// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a volume resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.requireObject("availabilityZone");
 * const volume = new huaweicloud.evs.Volume("volume", {
 *     description: "my volume",
 *     volumeType: "SAS",
 *     size: 20,
 *     availabilityZone: availabilityZone,
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 * ### With KMS Encryption
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.requireObject("availabilityZone");
 * const volume = new huaweicloud.evs.Volume("volume", {
 *     description: "my volume",
 *     volumeType: "SAS",
 *     size: 20,
 *     kmsId: _var.kms_id,
 *     availabilityZone: availabilityZone,
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 * ### With Server_id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const imageId = config.requireObject("imageId");
 * const flavorId = config.requireObject("flavorId");
 * const keyPair = config.requireObject("keyPair");
 * const securityGroupId = config.requireObject("securityGroupId");
 * const availabilityZone = config.requireObject("availabilityZone");
 * const subnetId = config.requireObject("subnetId");
 * const myinstance = new huaweicloud.ecs.Instance("myinstance", {
 *     imageId: imageId,
 *     flavorId: flavorId,
 *     keyPair: keyPair,
 *     securityGroupIds: [securityGroupId],
 *     availabilityZone: availabilityZone,
 *     networks: [{
 *         uuid: subnetId,
 *     }],
 * });
 * const volume = new huaweicloud.evs.Volume("volume", {
 *     description: "my volume",
 *     volumeType: "SAS",
 *     size: 20,
 *     availabilityZone: availabilityZone,
 *     serverId: myinstance.id,
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Volumes can be imported using the `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Evs/volume:Volume test <id>
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`cascade`, `period_unit`, `period`, `server_id`, `auto_renew`, and `charging_mode`. It is generally recommended running terraform plan after importing a disk. You can then decide if changes should be applied to the disk, or the resource definition should be updated to align with the disk. Also, you can ignore changes as below. hcl resource "huaweicloud_evs_volume" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  cascade, period_unit, period, server_id, auto_renew, charging_mode,
 *
 * ]
 *
 *  } }
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Evs/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The key-value pair disk metadata. Valid key-value pairs are as follows:
     * + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
     * for encryption.
     * + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
     * If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
     * If the disk is not created from a data source, the disk is not encrypted by default.
     * + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
     * + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
     * access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
     * the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
     * If this attribute is not specified, the disk device type is VBD.
     * + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
     * is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
     */
    public /*out*/ readonly allMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The metadata of the disk image.
     */
    public /*out*/ readonly allVolumeImageMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
     * the device as the instance sees it. The attachment structure is documented below.
     */
    public /*out*/ readonly attachments!: pulumi.Output<outputs.Evs.VolumeAttachment[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the availability zone for the disk.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the backup ID from which to create the disk.
     */
    public readonly backupId!: pulumi.Output<string | undefined>;
    /**
     * Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
     */
    public /*out*/ readonly bootable!: pulumi.Output<string>;
    /**
     * Specifies the delete mode of snapshot. The default value is **false**. All snapshot
     * associated with the disk will also be deleted when the parameter is set to **true**.
     */
    public readonly cascade!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * The time when the disk was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies the ID of the DSS storage pool accommodating the disk.
     */
    public readonly dedicatedStorageId!: pulumi.Output<string | undefined>;
    /**
     * The name of the DSS storage pool accommodating the disk.
     */
    public /*out*/ readonly dedicatedStorageName!: pulumi.Output<string>;
    /**
     * Specifies the disk description. You can enter up to `85` characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the device type of disk to create. Valid options are **VBD** and
     * **SCSI**. Defaults to **VBD**.
     */
    public readonly deviceType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project ID of the disk.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the image ID from which to create the disk.
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IOPS(Input/Output Operations Per Second) for the volume.
     * The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
     * SSD V2 disk. The iopsAttribute structure is documented below.
     */
    public /*out*/ readonly iopsAttributes!: pulumi.Output<outputs.Evs.VolumeIopsAttribute[]>;
    /**
     * Specifies the Encryption KMS ID to create the disk.
     */
    public readonly kmsId!: pulumi.Output<string | undefined>;
    /**
     * The disk URI.
     * The links structure is documented below.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.Evs.VolumeLink[]>;
    /**
     * Specifies whether the disk is shareable. Defaults to **false**.
     */
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the disk name. You can enter up to `64` characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the charging period of the disk.
     * + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * + If `periodUnit` is set to **year**, the valid value is `1`.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
     * disk mapping in the VM.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * Specifies the server ID to which the cloud volume is to be mounted.
     * After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
     * The chargingMode of the created cloud volume will be consistent with that of the cloud server.
     * Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
     */
    public readonly serverId!: pulumi.Output<string | undefined>;
    /**
     * The service type. Supported services are **EVS**, **DSS**, and **DESS**.
     */
    public /*out*/ readonly serviceType!: pulumi.Output<string>;
    /**
     * Specifies the disk size, in GB.
     * For system disk, the valid value ranges from `1` GB to `1,024` GB.
     * For data disk, the valid value ranges from `10` GB to `32,768` GB.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Specifies the snapshot ID from which to create the disk.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * The disk status.
     * Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the throughput for the volume. The Unit is MiB/s.
     * The field is valid and required when `volumeType` is set to **GPSSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    public readonly throughput!: pulumi.Output<number>;
    /**
     * The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
     * The throughputAttribute structure is documented below.
     */
    public /*out*/ readonly throughputAttributes!: pulumi.Output<outputs.Evs.VolumeThroughputAttribute[]>;
    /**
     * The time when the disk was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the disk type. Valid values are as follows:
     * + **SAS**: High I/O type.
     * + **SSD**: Ultra-high I/O type.
     * + **GPSSD**: General purpose SSD type.
     * + **ESSD**: Extreme SSD type.
     * + **GPSSD2**: General purpose SSD V2 type.
     * + **ESSD2**: Extreme SSD V2 type.
     */
    public readonly volumeType!: pulumi.Output<string>;
    /**
     * The unique identifier used for mounting the EVS disk.
     */
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["allMetadata"] = state ? state.allMetadata : undefined;
            resourceInputs["allVolumeImageMetadata"] = state ? state.allVolumeImageMetadata : undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["bootable"] = state ? state.bootable : undefined;
            resourceInputs["cascade"] = state ? state.cascade : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dedicatedStorageId"] = state ? state.dedicatedStorageId : undefined;
            resourceInputs["dedicatedStorageName"] = state ? state.dedicatedStorageName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["iopsAttributes"] = state ? state.iopsAttributes : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["throughputAttributes"] = state ? state.throughputAttributes : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.volumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["cascade"] = args ? args.cascade : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["dedicatedStorageId"] = args ? args.dedicatedStorageId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["allMetadata"] = undefined /*out*/;
            resourceInputs["allVolumeImageMetadata"] = undefined /*out*/;
            resourceInputs["attachments"] = undefined /*out*/;
            resourceInputs["bootable"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dedicatedStorageName"] = undefined /*out*/;
            resourceInputs["iopsAttributes"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["throughputAttributes"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The key-value pair disk metadata. Valid key-value pairs are as follows:
     * + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
     * for encryption.
     * + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
     * If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
     * If the disk is not created from a data source, the disk is not encrypted by default.
     * + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
     * + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
     * access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
     * the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
     * If this attribute is not specified, the disk device type is VBD.
     * + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
     * is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
     */
    allMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The metadata of the disk image.
     */
    allVolumeImageMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
     * the device as the instance sees it. The attachment structure is documented below.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeAttachment>[]>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone for the disk.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the backup ID from which to create the disk.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
     */
    bootable?: pulumi.Input<string>;
    /**
     * Specifies the delete mode of snapshot. The default value is **false**. All snapshot
     * associated with the disk will also be deleted when the parameter is set to **true**.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * The time when the disk was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DSS storage pool accommodating the disk.
     */
    dedicatedStorageId?: pulumi.Input<string>;
    /**
     * The name of the DSS storage pool accommodating the disk.
     */
    dedicatedStorageName?: pulumi.Input<string>;
    /**
     * Specifies the disk description. You can enter up to `85` characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the device type of disk to create. Valid options are **VBD** and
     * **SCSI**. Defaults to **VBD**.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the disk.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the image ID from which to create the disk.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Specifies the IOPS(Input/Output Operations Per Second) for the volume.
     * The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    iops?: pulumi.Input<number>;
    /**
     * The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
     * SSD V2 disk. The iopsAttribute structure is documented below.
     */
    iopsAttributes?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeIopsAttribute>[]>;
    /**
     * Specifies the Encryption KMS ID to create the disk.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * The disk URI.
     * The links structure is documented below.
     */
    links?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeLink>[]>;
    /**
     * Specifies whether the disk is shareable. Defaults to **false**.
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * Specifies the disk name. You can enter up to `64` characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the disk.
     * + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * + If `periodUnit` is set to **year**, the valid value is `1`.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
     * disk mapping in the VM.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * Specifies the server ID to which the cloud volume is to be mounted.
     * After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
     * The chargingMode of the created cloud volume will be consistent with that of the cloud server.
     * Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The service type. Supported services are **EVS**, **DSS**, and **DESS**.
     */
    serviceType?: pulumi.Input<string>;
    /**
     * Specifies the disk size, in GB.
     * For system disk, the valid value ranges from `1` GB to `1,024` GB.
     * For data disk, the valid value ranges from `10` GB to `32,768` GB.
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies the snapshot ID from which to create the disk.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The disk status.
     * Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the throughput for the volume. The Unit is MiB/s.
     * The field is valid and required when `volumeType` is set to **GPSSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    throughput?: pulumi.Input<number>;
    /**
     * The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
     * The throughputAttribute structure is documented below.
     */
    throughputAttributes?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeThroughputAttribute>[]>;
    /**
     * The time when the disk was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the disk type. Valid values are as follows:
     * + **SAS**: High I/O type.
     * + **SSD**: Ultra-high I/O type.
     * + **GPSSD**: General purpose SSD type.
     * + **ESSD**: Extreme SSD type.
     * + **GPSSD2**: General purpose SSD V2 type.
     * + **ESSD2**: Extreme SSD V2 type.
     */
    volumeType?: pulumi.Input<string>;
    /**
     * The unique identifier used for mounting the EVS disk.
     */
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone for the disk.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Specifies the backup ID from which to create the disk.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Specifies the delete mode of snapshot. The default value is **false**. All snapshot
     * associated with the disk will also be deleted when the parameter is set to **true**.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DSS storage pool accommodating the disk.
     */
    dedicatedStorageId?: pulumi.Input<string>;
    /**
     * Specifies the disk description. You can enter up to `85` characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the device type of disk to create. Valid options are **VBD** and
     * **SCSI**. Defaults to **VBD**.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the disk.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the image ID from which to create the disk.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Specifies the IOPS(Input/Output Operations Per Second) for the volume.
     * The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    iops?: pulumi.Input<number>;
    /**
     * Specifies the Encryption KMS ID to create the disk.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * Specifies whether the disk is shareable. Defaults to **false**.
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * Specifies the disk name. You can enter up to `64` characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the disk.
     * + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * + If `periodUnit` is set to **year**, the valid value is `1`.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the server ID to which the cloud volume is to be mounted.
     * After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
     * The chargingMode of the created cloud volume will be consistent with that of the cloud server.
     * Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
     */
    serverId?: pulumi.Input<string>;
    /**
     * Specifies the disk size, in GB.
     * For system disk, the valid value ranges from `1` GB to `1,024` GB.
     * For data disk, the valid value ranges from `10` GB to `32,768` GB.
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies the snapshot ID from which to create the disk.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the throughput for the volume. The Unit is MiB/s.
     * The field is valid and required when `volumeType` is set to **GPSSD2**.
     * This field can be changed only when the disk status is Available or In-use.
     */
    throughput?: pulumi.Input<number>;
    /**
     * Specifies the disk type. Valid values are as follows:
     * + **SAS**: High I/O type.
     * + **SSD**: Ultra-high I/O type.
     * + **GPSSD**: General purpose SSD type.
     * + **ESSD**: Extreme SSD type.
     * + **GPSSD2**: General purpose SSD V2 type.
     * + **ESSD2**: Extreme SSD V2 type.
     */
    volumeType: pulumi.Input<string>;
}
