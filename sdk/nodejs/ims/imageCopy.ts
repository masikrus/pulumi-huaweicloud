// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IMS image copy resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### Copy image within region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const sourceImageId = config.requireObject("sourceImageId");
 * const name = config.requireObject("name");
 * const kmsKeyId = config.requireObject("kmsKeyId");
 * const test = new huaweicloud.ims.ImageCopy("test", {
 *     sourceImageId: sourceImageId,
 *     kmsKeyId: kmsKeyId,
 * });
 * ```
 * ### Copy image cross region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const sourceImageId = config.requireObject("sourceImageId");
 * const name = config.requireObject("name");
 * const targetRegion = config.requireObject("targetRegion");
 * const agencyName = config.requireObject("agencyName");
 * const test = new huaweicloud.ims.ImageCopy("test", {
 *     sourceImageId: sourceImageId,
 *     targetRegion: targetRegion,
 *     agencyName: agencyName,
 * });
 * ```
 */
export class ImageCopy extends pulumi.CustomResource {
    /**
     * Get an existing ImageCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageCopyState, opts?: pulumi.CustomResourceOptions): ImageCopy {
        return new ImageCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Ims/imageCopy:ImageCopy';

    /**
     * Returns true if the given object is an instance of ImageCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageCopy.__pulumiType;
    }

    /**
     * The time when the image status changes to active, in RFC3339 format.
     */
    public /*out*/ readonly activeAt!: pulumi.Output<string>;
    /**
     * Specifies the agency name. It is required in the cross-region scene.
     * Changing this parameter will create a new resource.
     */
    public readonly agencyName!: pulumi.Output<string>;
    /**
     * checksum is deprecated
     */
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    /**
     * The creation time of the image, in RFC3339 format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates the image source.
     * The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
     */
    public /*out*/ readonly dataOrigin!: pulumi.Output<string>;
    /**
     * Specifies the description of the copy image.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates the image file format.
     * The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
     */
    public /*out*/ readonly diskFormat!: pulumi.Output<string>;
    /**
     * Specifies the enterprise project ID of the image.
     * Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
     * be used.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Indicates the size(bytes) of the image file.
     */
    public /*out*/ readonly imageSize!: pulumi.Output<string>;
    /**
     * Indicates the ID of the ECS that needs to be converted into an image.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the master key used for encrypting an image.
     * Only copying scene within a region is supported. Changing this parameter will create a new resource.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * Specifies the maximum memory of the copy image in the unit of MB.
     */
    public readonly maxRam!: pulumi.Output<number>;
    /**
     * The minimum disk space required to run an image, in GB unit.
     */
    public /*out*/ readonly minDisk!: pulumi.Output<number>;
    /**
     * Specifies the minimum memory of the copy image in the unit of MB. The default value is
     * `0`, indicating that the memory is not restricted.
     */
    public readonly minRam!: pulumi.Output<number>;
    /**
     * Specifies the name of the copy image. The name can contain `1` to `128` characters,
     * only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
     * start or end with a space.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates the OS version.
     */
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    /**
     * Specifies the region to which the source image belongs.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the ID of the copied image.
     * Changing this parameter will create a new resource.
     */
    public readonly sourceImageId!: pulumi.Output<string>;
    /**
     * Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
     * or **killed*, only image with a status of **active** can be used.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the copy image.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the target region name.
     * If specified, it means cross-region replication.
     */
    public readonly targetRegion!: pulumi.Output<string>;
    /**
     * The last update time of the image, in RFC3339 format.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the ID of the vault. It is used in the cross-region scene, it is
     * mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
     * the value of `targetRegion`.
     * Changing this parameter will create a new resource.
     */
    public readonly vaultId!: pulumi.Output<string>;
    /**
     * Indicates whether the image is visible to other tenants.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a ImageCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageCopyArgs | ImageCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageCopyState | undefined;
            resourceInputs["activeAt"] = state ? state.activeAt : undefined;
            resourceInputs["agencyName"] = state ? state.agencyName : undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataOrigin"] = state ? state.dataOrigin : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["imageSize"] = state ? state.imageSize : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["maxRam"] = state ? state.maxRam : undefined;
            resourceInputs["minDisk"] = state ? state.minDisk : undefined;
            resourceInputs["minRam"] = state ? state.minRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetRegion"] = state ? state.targetRegion : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as ImageCopyArgs | undefined;
            if ((!args || args.sourceImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceImageId'");
            }
            resourceInputs["agencyName"] = args ? args.agencyName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["maxRam"] = args ? args.maxRam : undefined;
            resourceInputs["minRam"] = args ? args.minRam : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetRegion"] = args ? args.targetRegion : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["activeAt"] = undefined /*out*/;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dataOrigin"] = undefined /*out*/;
            resourceInputs["diskFormat"] = undefined /*out*/;
            resourceInputs["imageSize"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["minDisk"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageCopy resources.
 */
export interface ImageCopyState {
    /**
     * The time when the image status changes to active, in RFC3339 format.
     */
    activeAt?: pulumi.Input<string>;
    /**
     * Specifies the agency name. It is required in the cross-region scene.
     * Changing this parameter will create a new resource.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * checksum is deprecated
     */
    checksum?: pulumi.Input<string>;
    /**
     * The creation time of the image, in RFC3339 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates the image source.
     * The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
     */
    dataOrigin?: pulumi.Input<string>;
    /**
     * Specifies the description of the copy image.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates the image file format.
     * The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
     */
    diskFormat?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the image.
     * Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
     * be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Indicates the size(bytes) of the image file.
     */
    imageSize?: pulumi.Input<string>;
    /**
     * Indicates the ID of the ECS that needs to be converted into an image.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the master key used for encrypting an image.
     * Only copying scene within a region is supported. Changing this parameter will create a new resource.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the maximum memory of the copy image in the unit of MB.
     */
    maxRam?: pulumi.Input<number>;
    /**
     * The minimum disk space required to run an image, in GB unit.
     */
    minDisk?: pulumi.Input<number>;
    /**
     * Specifies the minimum memory of the copy image in the unit of MB. The default value is
     * `0`, indicating that the memory is not restricted.
     */
    minRam?: pulumi.Input<number>;
    /**
     * Specifies the name of the copy image. The name can contain `1` to `128` characters,
     * only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
     * start or end with a space.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the OS version.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Specifies the region to which the source image belongs.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the copied image.
     * Changing this parameter will create a new resource.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
     * or **killed*, only image with a status of **active** can be used.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the copy image.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the target region name.
     * If specified, it means cross-region replication.
     */
    targetRegion?: pulumi.Input<string>;
    /**
     * The last update time of the image, in RFC3339 format.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the ID of the vault. It is used in the cross-region scene, it is
     * mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
     * the value of `targetRegion`.
     * Changing this parameter will create a new resource.
     */
    vaultId?: pulumi.Input<string>;
    /**
     * Indicates whether the image is visible to other tenants.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageCopy resource.
 */
export interface ImageCopyArgs {
    /**
     * Specifies the agency name. It is required in the cross-region scene.
     * Changing this parameter will create a new resource.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * Specifies the description of the copy image.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the image.
     * Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
     * be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the master key used for encrypting an image.
     * Only copying scene within a region is supported. Changing this parameter will create a new resource.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the maximum memory of the copy image in the unit of MB.
     */
    maxRam?: pulumi.Input<number>;
    /**
     * Specifies the minimum memory of the copy image in the unit of MB. The default value is
     * `0`, indicating that the memory is not restricted.
     */
    minRam?: pulumi.Input<number>;
    /**
     * Specifies the name of the copy image. The name can contain `1` to `128` characters,
     * only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
     * start or end with a space.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region to which the source image belongs.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the copied image.
     * Changing this parameter will create a new resource.
     */
    sourceImageId: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the copy image.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the target region name.
     * If specified, it means cross-region replication.
     */
    targetRegion?: pulumi.Input<string>;
    /**
     * Specifies the ID of the vault. It is used in the cross-region scene, it is
     * mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
     * the value of `targetRegion`.
     * Changing this parameter will create a new resource.
     */
    vaultId?: pulumi.Input<string>;
}
