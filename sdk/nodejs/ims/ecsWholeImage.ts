// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IMS whole image resource created from ECS instance within HuaweiCloud.
 *
 * > After deleting the image, the CBR backup that has not been deleted will be retained and continue to be charged.
 *    If you need to delete it later, you can delete the corresponding CBR backup in the CBR backup console.
 *
 * ## Example Usage
 * ### Creating an IMS whole image from an existing ECS instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject("name");
 * const instanceId = config.requireObject("instanceId");
 * const vaultId = config.requireObject("vaultId");
 * const test = new huaweicloud.ims.EcsWholeImage("test", {
 *     instanceId: instanceId,
 *     vaultId: vaultId,
 * });
 * ```
 *
 * ## Import
 *
 * The IMS ECS whole image resource can be imported using the `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Ims/ecsWholeImage:EcsWholeImage test <id>
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_delete_backup`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_ecs_whole_image" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  is_delete_backup,
 *
 *  ]
 *
 *  } }
 */
export class EcsWholeImage extends pulumi.CustomResource {
    /**
     * Get an existing EcsWholeImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsWholeImageState, opts?: pulumi.CustomResourceOptions): EcsWholeImage {
        return new EcsWholeImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Ims/ecsWholeImage:EcsWholeImage';

    /**
     * Returns true if the given object is an instance of EcsWholeImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsWholeImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsWholeImage.__pulumiType;
    }

    /**
     * The time when the image status changes to active, in RFC3339 format.
     */
    public /*out*/ readonly activeAt!: pulumi.Output<string>;
    /**
     * The ID of CBR backup.
     */
    public /*out*/ readonly backupId!: pulumi.Output<string>;
    /**
     * The creation time of the image, in RFC3339 format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The image resource. The format is **server_backup,vault_id**.
     */
    public /*out*/ readonly dataOrigin!: pulumi.Output<string>;
    /**
     * Specifies the description of the image.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
     */
    public /*out*/ readonly diskFormat!: pulumi.Output<string>;
    /**
     * Specifies the enterprise project ID to which the IMS image belongs.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the source ECS instance ID used to create the image.
     * Changing this parameter will create a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies whether to delete the associated CBR backup when deleting image.
     * The value can be **true** or **false**.
     */
    public readonly isDeleteBackup!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the maximum memory of the image, in MB unit.
     */
    public readonly maxRam!: pulumi.Output<number>;
    /**
     * The minimum disk space required to run an image, in GB unit.
     */
    public /*out*/ readonly minDisk!: pulumi.Output<number>;
    /**
     * Specifies the minimum memory of the image, in MB unit.
     * The default value is `0`, indicating that the memory is not restricted.
     */
    public readonly minRam!: pulumi.Output<number>;
    /**
     * Specifies the name of the image.
     * The valid length is limited from `1` to `128` characters.
     * The first and last letters of the name cannot be spaces.
     * The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The operating system version of the image.
     */
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
     * only image with a status of **active** can be used.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the image.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The last update time of the image, in RFC3339 format.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the ID of the vault to which an ECS instance is to be added or has
     * been added. Changing this parameter will create a new resource.
     */
    public readonly vaultId!: pulumi.Output<string>;
    /**
     * Whether the image is visible to other tenants.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a EcsWholeImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsWholeImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsWholeImageArgs | EcsWholeImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsWholeImageState | undefined;
            resourceInputs["activeAt"] = state ? state.activeAt : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataOrigin"] = state ? state.dataOrigin : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isDeleteBackup"] = state ? state.isDeleteBackup : undefined;
            resourceInputs["maxRam"] = state ? state.maxRam : undefined;
            resourceInputs["minDisk"] = state ? state.minDisk : undefined;
            resourceInputs["minRam"] = state ? state.minRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as EcsWholeImageArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isDeleteBackup"] = args ? args.isDeleteBackup : undefined;
            resourceInputs["maxRam"] = args ? args.maxRam : undefined;
            resourceInputs["minRam"] = args ? args.minRam : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["activeAt"] = undefined /*out*/;
            resourceInputs["backupId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dataOrigin"] = undefined /*out*/;
            resourceInputs["diskFormat"] = undefined /*out*/;
            resourceInputs["minDisk"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsWholeImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsWholeImage resources.
 */
export interface EcsWholeImageState {
    /**
     * The time when the image status changes to active, in RFC3339 format.
     */
    activeAt?: pulumi.Input<string>;
    /**
     * The ID of CBR backup.
     */
    backupId?: pulumi.Input<string>;
    /**
     * The creation time of the image, in RFC3339 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The image resource. The format is **server_backup,vault_id**.
     */
    dataOrigin?: pulumi.Input<string>;
    /**
     * Specifies the description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
     */
    diskFormat?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID to which the IMS image belongs.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the source ECS instance ID used to create the image.
     * Changing this parameter will create a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to delete the associated CBR backup when deleting image.
     * The value can be **true** or **false**.
     */
    isDeleteBackup?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum memory of the image, in MB unit.
     */
    maxRam?: pulumi.Input<number>;
    /**
     * The minimum disk space required to run an image, in GB unit.
     */
    minDisk?: pulumi.Input<number>;
    /**
     * Specifies the minimum memory of the image, in MB unit.
     * The default value is `0`, indicating that the memory is not restricted.
     */
    minRam?: pulumi.Input<number>;
    /**
     * Specifies the name of the image.
     * The valid length is limited from `1` to `128` characters.
     * The first and last letters of the name cannot be spaces.
     * The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
     */
    name?: pulumi.Input<string>;
    /**
     * The operating system version of the image.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
     * only image with a status of **active** can be used.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the image.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The last update time of the image, in RFC3339 format.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the ID of the vault to which an ECS instance is to be added or has
     * been added. Changing this parameter will create a new resource.
     */
    vaultId?: pulumi.Input<string>;
    /**
     * Whether the image is visible to other tenants.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsWholeImage resource.
 */
export interface EcsWholeImageArgs {
    /**
     * Specifies the description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID to which the IMS image belongs.
     * For enterprise users, if omitted, default enterprise project will be used.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the source ECS instance ID used to create the image.
     * Changing this parameter will create a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies whether to delete the associated CBR backup when deleting image.
     * The value can be **true** or **false**.
     */
    isDeleteBackup?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum memory of the image, in MB unit.
     */
    maxRam?: pulumi.Input<number>;
    /**
     * Specifies the minimum memory of the image, in MB unit.
     * The default value is `0`, indicating that the memory is not restricted.
     */
    minRam?: pulumi.Input<number>;
    /**
     * Specifies the name of the image.
     * The valid length is limited from `1` to `128` characters.
     * The first and last letters of the name cannot be spaces.
     * The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the image.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the vault to which an ECS instance is to be added or has
     * been added. Changing this parameter will create a new resource.
     */
    vaultId: pulumi.Input<string>;
}
