// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IMS image share resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const sourceImageId = config.requireObject("sourceImageId");
 * const targetProjectIds = config.requireObject("targetProjectIds");
 * const test = new huaweicloud.ims.ImageShare("test", {
 *     sourceImageId: sourceImageId,
 *     targetProjectIds: targetProjectIds,
 * });
 * ```
 */
export class ImageShare extends pulumi.CustomResource {
    /**
     * Get an existing ImageShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageShareState, opts?: pulumi.CustomResourceOptions): ImageShare {
        return new ImageShare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Ims/imageShare:ImageShare';

    /**
     * Returns true if the given object is an instance of ImageShare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageShare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageShare.__pulumiType;
    }

    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the ID of the source image. The source image must be in the
     * same region as the current resource.
     */
    public readonly sourceImageId!: pulumi.Output<string>;
    /**
     * Specifies the IDs of the target projects.
     */
    public readonly targetProjectIds!: pulumi.Output<string[]>;

    /**
     * Create a ImageShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageShareArgs | ImageShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageShareState | undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["targetProjectIds"] = state ? state.targetProjectIds : undefined;
        } else {
            const args = argsOrState as ImageShareArgs | undefined;
            if ((!args || args.sourceImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceImageId'");
            }
            if ((!args || args.targetProjectIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetProjectIds'");
            }
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["targetProjectIds"] = args ? args.targetProjectIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageShare.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageShare resources.
 */
export interface ImageShareState {
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the source image. The source image must be in the
     * same region as the current resource.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * Specifies the IDs of the target projects.
     */
    targetProjectIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ImageShare resource.
 */
export interface ImageShareArgs {
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the source image. The source image must be in the
     * same region as the current resource.
     */
    sourceImageId: pulumi.Input<string>;
    /**
     * Specifies the IDs of the target projects.
     */
    targetProjectIds: pulumi.Input<pulumi.Input<string>[]>;
}
