// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Using this data source to query the list of available routes within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const routeTableId = config.requireObject("routeTableId");
 * const test = huaweicloud.Er.getAvailableRoutes({
 *     routeTableId: routeTableId,
 * });
 * ```
 */
export function getAvailableRoutes(args: GetAvailableRoutesArgs, opts?: pulumi.InvokeOptions): Promise<GetAvailableRoutesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Er/getAvailableRoutes:getAvailableRoutes", {
        "destination": args.destination,
        "region": args.region,
        "resourceType": args.resourceType,
        "routeTableId": args.routeTableId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAvailableRoutes.
 */
export interface GetAvailableRoutesArgs {
    /**
     * The destination address of the routes to be queried.
     */
    destination?: string;
    /**
     * Specifies the region in which to query the available routes.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * The attachment type.
     * The valid values are as follows:
     * + **vpc**: VPC attachment.
     * + **vpn**: VPN gateway attachment.
     * + **vgw**: virtual gateway attachment.
     * + **peering**: peering connection attachment.
     * + **ecn**: ECN attachment.
     * + **cfw**: CFW instance attachment.
     */
    resourceType?: string;
    /**
     * The route table ID to which the available routes belong.
     */
    routeTableId: string;
}

/**
 * A collection of values returned by getAvailableRoutes.
 */
export interface GetAvailableRoutesResult {
    /**
     * The destination address of the route.
     */
    readonly destination?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly region: string;
    /**
     * The attachment type.
     */
    readonly resourceType?: string;
    readonly routeTableId: string;
    /**
     * All available routes that match the filter parameters.
     */
    readonly routes: outputs.Er.GetAvailableRoutesRoute[];
}

export function getAvailableRoutesOutput(args: GetAvailableRoutesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAvailableRoutesResult> {
    return pulumi.output(args).apply(a => getAvailableRoutes(a, opts))
}

/**
 * A collection of arguments for invoking getAvailableRoutes.
 */
export interface GetAvailableRoutesOutputArgs {
    /**
     * The destination address of the routes to be queried.
     */
    destination?: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the available routes.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * The attachment type.
     * The valid values are as follows:
     * + **vpc**: VPC attachment.
     * + **vpn**: VPN gateway attachment.
     * + **vgw**: virtual gateway attachment.
     * + **peering**: peering connection attachment.
     * + **ecn**: ECN attachment.
     * + **cfw**: CFW instance attachment.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The route table ID to which the available routes belong.
     */
    routeTableId: pulumi.Input<string>;
}
