# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceBlockInfoArgs',
    'InstanceBlockInfoArgsDict',
    'InstanceChannelArgs',
    'InstanceChannelArgsDict',
    'InstanceCouchdbArgs',
    'InstanceCouchdbArgsDict',
    'InstanceKafkaArgs',
    'InstanceKafkaArgsDict',
    'InstancePeerOrgArgs',
    'InstancePeerOrgArgsDict',
    'InstancePeerOrgAddressArgs',
    'InstancePeerOrgAddressArgsDict',
    'InstanceSfsTurboArgs',
    'InstanceSfsTurboArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceBlockInfoArgsDict(TypedDict):
        block_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the volume of the block, the unit is MB. The default value is 2.
        Changing this creates a new instance.
        """
        generation_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the block generation time, the unit is second. The default
        value is 2. Changing this creates a new instance.
        """
        transaction_quantity: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of transactions included in the block. The
        default value is 500. Changing this creates a new instance.
        """
elif False:
    InstanceBlockInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceBlockInfoArgs:
    def __init__(__self__, *,
                 block_size: Optional[pulumi.Input[_builtins.int]] = None,
                 generation_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 transaction_quantity: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] block_size: Specifies the volume of the block, the unit is MB. The default value is 2.
               Changing this creates a new instance.
        :param pulumi.Input[_builtins.int] generation_interval: Specifies the block generation time, the unit is second. The default
               value is 2. Changing this creates a new instance.
        :param pulumi.Input[_builtins.int] transaction_quantity: Specifies the number of transactions included in the block. The
               default value is 500. Changing this creates a new instance.
        """
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if generation_interval is not None:
            pulumi.set(__self__, "generation_interval", generation_interval)
        if transaction_quantity is not None:
            pulumi.set(__self__, "transaction_quantity", transaction_quantity)

    @_builtins.property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the volume of the block, the unit is MB. The default value is 2.
        Changing this creates a new instance.
        """
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "block_size", value)

    @_builtins.property
    @pulumi.getter(name="generationInterval")
    def generation_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the block generation time, the unit is second. The default
        value is 2. Changing this creates a new instance.
        """
        return pulumi.get(self, "generation_interval")

    @generation_interval.setter
    def generation_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "generation_interval", value)

    @_builtins.property
    @pulumi.getter(name="transactionQuantity")
    def transaction_quantity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of transactions included in the block. The
        default value is 500. Changing this creates a new instance.
        """
        return pulumi.get(self, "transaction_quantity")

    @transaction_quantity.setter
    def transaction_quantity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "transaction_quantity", value)


if not MYPY:
    class InstanceChannelArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the channel. Changing this creates a new instance.
        """
        org_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the name of the peer organization. Changing this creates a new
        instance.
        """
elif False:
    InstanceChannelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceChannelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 org_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the channel. Changing this creates a new instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] org_names: Specifies the name of the peer organization. Changing this creates a new
               instance.
        """
        pulumi.set(__self__, "name", name)
        if org_names is not None:
            pulumi.set(__self__, "org_names", org_names)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the channel. Changing this creates a new instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgNames")
    def org_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the name of the peer organization. Changing this creates a new
        instance.
        """
        return pulumi.get(self, "org_names")

    @org_names.setter
    def org_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "org_names", value)


if not MYPY:
    class InstanceCouchdbArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        Specifies the password of the couch database. The password consists of 8 to
        26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
        characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
        """
        user_name: pulumi.Input[_builtins.str]
        """
        Specifies the user name of the couch database. Changing this creates a new
        instance.
        """
elif False:
    InstanceCouchdbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceCouchdbArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 user_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: Specifies the password of the couch database. The password consists of 8 to
               26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
               characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name of the couch database. Changing this creates a new
               instance.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the password of the couch database. The password consists of 8 to
        26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
        characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user name of the couch database. Changing this creates a new
        instance.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class InstanceKafkaArgsDict(TypedDict):
        availability_zones: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the availability zone in which to create the kafka. The
        list must contain one or more than three availability zone. Please
        following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
        new instance.
        """
        flavor: pulumi.Input[_builtins.str]
        """
        Specifies the kafka flavor type. Changing this creates a new instance.
        + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
        + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
        + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
        + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
        """
        storage_size: pulumi.Input[_builtins.int]
        """
        Specifies the kafka storage capacity. The storage capacity must be an
        integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
        + The minimum storage capacity of mini type is 600GB.
        + The minimum storage capacity of small type is 1200GB.
        + The minimum storage capacity of middle type is 2400GB.
        + The minimum storage capacity of high type is 4800GB.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a unique name of the BCS instance. The name consists of 4 to 24
        characters, including letters, digits, chinese characters and hyphens (-), and the name cannot start with a hyphen.
        Changing this will create a new instance.
        """
elif False:
    InstanceKafkaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceKafkaArgs:
    def __init__(__self__, *,
                 availability_zones: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 flavor: pulumi.Input[_builtins.str],
                 storage_size: pulumi.Input[_builtins.int],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the availability zone in which to create the kafka. The
               list must contain one or more than three availability zone. Please
               following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
               new instance.
        :param pulumi.Input[_builtins.str] flavor: Specifies the kafka flavor type. Changing this creates a new instance.
               + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
               + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
               + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
               + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
        :param pulumi.Input[_builtins.int] storage_size: Specifies the kafka storage capacity. The storage capacity must be an
               integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
               + The minimum storage capacity of mini type is 600GB.
               + The minimum storage capacity of small type is 1200GB.
               + The minimum storage capacity of middle type is 2400GB.
               + The minimum storage capacity of high type is 4800GB.
        :param pulumi.Input[_builtins.str] name: Specifies a unique name of the BCS instance. The name consists of 4 to 24
               characters, including letters, digits, chinese characters and hyphens (-), and the name cannot start with a hyphen.
               Changing this will create a new instance.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "storage_size", storage_size)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the availability zone in which to create the kafka. The
        list must contain one or more than three availability zone. Please
        following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
        new instance.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "availability_zones", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the kafka flavor type. Changing this creates a new instance.
        + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
        + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
        + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
        + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the kafka storage capacity. The storage capacity must be an
        integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
        + The minimum storage capacity of mini type is 600GB.
        + The minimum storage capacity of small type is 1200GB.
        + The minimum storage capacity of middle type is 2400GB.
        + The minimum storage capacity of high type is 4800GB.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "storage_size", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a unique name of the BCS instance. The name consists of 4 to 24
        characters, including letters, digits, chinese characters and hyphens (-), and the name cannot start with a hyphen.
        Changing this will create a new instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InstancePeerOrgArgsDict(TypedDict):
        count: pulumi.Input[_builtins.int]
        """
        Specifies the number of peers in organization. Changing this creates a new
        instance.
        """
        org_name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the peer organization. Changing this creates a new
        instance.
        """
        addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstancePeerOrgAddressArgsDict']]]]
        pvc_name: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the BCS instance.
        """
        status_detail: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstancePeerOrgArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstancePeerOrgArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[_builtins.int],
                 org_name: pulumi.Input[_builtins.str],
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InstancePeerOrgAddressArgs']]]] = None,
                 pvc_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_detail: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] count: Specifies the number of peers in organization. Changing this creates a new
               instance.
        :param pulumi.Input[_builtins.str] org_name: Specifies the name of the peer organization. Changing this creates a new
               instance.
        :param pulumi.Input[_builtins.str] status: The status of the BCS instance.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "org_name", org_name)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if pvc_name is not None:
            pulumi.set(__self__, "pvc_name", pvc_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_detail is not None:
            pulumi.set(__self__, "status_detail", status_detail)

    @_builtins.property
    @pulumi.getter
    def count(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of peers in organization. Changing this creates a new
        instance.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "count", value)

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the peer organization. Changing this creates a new
        instance.
        """
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "org_name", value)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstancePeerOrgAddressArgs']]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstancePeerOrgAddressArgs']]]]):
        pulumi.set(self, "addresses", value)

    @_builtins.property
    @pulumi.getter(name="pvcName")
    def pvc_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pvc_name")

    @pvc_name.setter
    def pvc_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pvc_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the BCS instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status_detail")

    @status_detail.setter
    def status_detail(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_detail", value)


if not MYPY:
    class InstancePeerOrgAddressArgsDict(TypedDict):
        domain_port: NotRequired[pulumi.Input[_builtins.str]]
        ip_port: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstancePeerOrgAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstancePeerOrgAddressArgs:
    def __init__(__self__, *,
                 domain_port: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_port: Optional[pulumi.Input[_builtins.str]] = None):
        if domain_port is not None:
            pulumi.set(__self__, "domain_port", domain_port)
        if ip_port is not None:
            pulumi.set(__self__, "ip_port", ip_port)

    @_builtins.property
    @pulumi.getter(name="domainPort")
    def domain_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain_port")

    @domain_port.setter
    def domain_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_port", value)

    @_builtins.property
    @pulumi.getter(name="ipPort")
    def ip_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_port")

    @ip_port.setter
    def ip_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_port", value)


if not MYPY:
    class InstanceSfsTurboArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the availability zone in which to create the SFS turbo.
        Please following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this
        creates a new instance.
        """
        flavor: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the flavor of SFS turbo. Changing this creates a new instance.
        """
        share_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the share type of the SFS turbo. Changing this creates a new
        instance.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of SFS turbo. Changing this creates a new instance.
        """
elif False:
    InstanceSfsTurboArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceSfsTurboArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 share_type: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone in which to create the SFS turbo.
               Please following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this
               creates a new instance.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of SFS turbo. Changing this creates a new instance.
        :param pulumi.Input[_builtins.str] share_type: Specifies the share type of the SFS turbo. Changing this creates a new
               instance.
        :param pulumi.Input[_builtins.str] type: Specifies the type of SFS turbo. Changing this creates a new instance.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if share_type is not None:
            pulumi.set(__self__, "share_type", share_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone in which to create the SFS turbo.
        Please following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this
        creates a new instance.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor of SFS turbo. Changing this creates a new instance.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the share type of the SFS turbo. Changing this creates a new
        instance.
        """
        return pulumi.get(self, "share_type")

    @share_type.setter
    def share_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of SFS turbo. Changing this creates a new instance.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


