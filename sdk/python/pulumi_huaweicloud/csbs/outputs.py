# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackupPolicyResource',
    'BackupPolicyScheduledOperation',
    'BackupPolicyV1Resource',
    'BackupPolicyV1ScheduledOperation',
    'BackupV1VmMetadata',
    'BackupV1VolumeBackup',
    'BackupVmMetadata',
    'BackupVolumeBackup',
    'GetBackupPolicyResourceResult',
    'GetBackupPolicyScheduledOperationResult',
    'GetBackupPolicyV1ResourceResult',
    'GetBackupPolicyV1ScheduledOperationResult',
    'GetBackupV1VmMetadataResult',
    'GetBackupV1VolumeBackupResult',
    'GetBackupVmMetadataResult',
    'GetBackupVolumeBackupResult',
]

@pulumi.output_type
class BackupPolicyResource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the object to be backed up.
        :param _builtins.str name: Specifies backup object name.
        :param _builtins.str type: Entity object type of the backup object. If the type is VMs, the value is
               **OS::Nova::Server**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the object to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies backup object name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Entity object type of the backup object. If the type is VMs, the value is
        **OS::Nova::Server**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BackupPolicyScheduledOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationType":
            suggest = "operation_type"
        elif key == "triggerPattern":
            suggest = "trigger_pattern"
        elif key == "maxBackups":
            suggest = "max_backups"
        elif key == "retentionDurationDays":
            suggest = "retention_duration_days"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyScheduledOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyScheduledOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyScheduledOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_type: _builtins.str,
                 trigger_pattern: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 enabled: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 max_backups: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 permanent: Optional[_builtins.bool] = None,
                 retention_duration_days: Optional[_builtins.int] = None,
                 trigger_id: Optional[_builtins.str] = None,
                 trigger_name: Optional[_builtins.str] = None,
                 trigger_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str operation_type: Specifies Operation type, which can be backup.
        :param _builtins.str trigger_pattern: Specifies Scheduling policy of the scheduler.
        :param _builtins.str description: Specifies Scheduling period description.The value consists of 0 to 255
               characters and must not contain a greater-than sign (>) or less-than sign (<).
        :param _builtins.bool enabled: Specifies whether the scheduling period is enabled. Default value is **true**
        :param _builtins.str id: Specifies Scheduling period ID.
        :param _builtins.int max_backups: Specifies maximum number of backups that can be automatically created for a backup
               object.
        :param _builtins.str name: Specifies Scheduling period name.The value consists of 1 to 255 characters and can
               contain only letters, digits, underscores (_), and hyphens (-).
        :param _builtins.bool permanent: Specifies whether backups are permanently retained.
        :param _builtins.int retention_duration_days: Specifies duration of retaining a backup, in days.
        :param _builtins.str trigger_id: Specifies Scheduler ID.
        :param _builtins.str trigger_name: Specifies Scheduler name.
        :param _builtins.str trigger_type: Specifies Scheduler type.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        """
        Specifies Operation type, which can be backup.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> _builtins.str:
        """
        Specifies Scheduling policy of the scheduler.
        """
        return pulumi.get(self, "trigger_pattern")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduling period description.The value consists of 0 to 255
        characters and must not contain a greater-than sign (>) or less-than sign (<).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the scheduling period is enabled. Default value is **true**
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduling period ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[_builtins.int]:
        """
        Specifies maximum number of backups that can be automatically created for a backup
        object.
        """
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduling period name.The value consists of 1 to 255 characters and can
        contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> Optional[_builtins.bool]:
        """
        Specifies whether backups are permanently retained.
        """
        return pulumi.get(self, "permanent")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[_builtins.int]:
        """
        Specifies duration of retaining a backup, in days.
        """
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduler ID.
        """
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduler name.
        """
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        """
        Specifies Scheduler type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class BackupPolicyV1Resource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class BackupPolicyV1ScheduledOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationType":
            suggest = "operation_type"
        elif key == "triggerPattern":
            suggest = "trigger_pattern"
        elif key == "maxBackups":
            suggest = "max_backups"
        elif key == "retentionDurationDays":
            suggest = "retention_duration_days"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyV1ScheduledOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyV1ScheduledOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyV1ScheduledOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_type: _builtins.str,
                 trigger_pattern: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 enabled: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 max_backups: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 permanent: Optional[_builtins.bool] = None,
                 retention_duration_days: Optional[_builtins.int] = None,
                 trigger_id: Optional[_builtins.str] = None,
                 trigger_name: Optional[_builtins.str] = None,
                 trigger_type: Optional[_builtins.str] = None):
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> _builtins.str:
        return pulumi.get(self, "trigger_pattern")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "permanent")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class BackupV1VmMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudServiceType":
            suggest = "cloud_service_type"
        elif key == "imageType":
            suggest = "image_type"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupV1VmMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupV1VmMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupV1VmMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_service_type: Optional[_builtins.str] = None,
                 disk: Optional[_builtins.int] = None,
                 eip: Optional[_builtins.str] = None,
                 image_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 ram: Optional[_builtins.int] = None,
                 vcpus: Optional[_builtins.int] = None):
        if cloud_service_type is not None:
            pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class BackupV1VolumeBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageSpeed":
            suggest = "average_speed"
        elif key == "imageType":
            suggest = "image_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "sourceVolumeId":
            suggest = "source_volume_id"
        elif key == "sourceVolumeName":
            suggest = "source_volume_name"
        elif key == "sourceVolumeSize":
            suggest = "source_volume_size"
        elif key == "spaceSavingRatio":
            suggest = "space_saving_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupV1VolumeBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupV1VolumeBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupV1VolumeBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_speed: Optional[_builtins.int] = None,
                 bootable: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 image_type: Optional[_builtins.str] = None,
                 incremental: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None,
                 snapshot_id: Optional[_builtins.str] = None,
                 source_volume_id: Optional[_builtins.str] = None,
                 source_volume_name: Optional[_builtins.str] = None,
                 source_volume_size: Optional[_builtins.int] = None,
                 space_saving_ratio: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None):
        if average_speed is not None:
            pulumi.set(__self__, "average_speed", average_speed)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if source_volume_id is not None:
            pulumi.set(__self__, "source_volume_id", source_volume_id)
        if source_volume_name is not None:
            pulumi.set(__self__, "source_volume_name", source_volume_name)
        if source_volume_size is not None:
            pulumi.set(__self__, "source_volume_size", source_volume_size)
        if space_saving_ratio is not None:
            pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_speed")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_volume_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_volume_name")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "source_volume_size")

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "space_saving_ratio")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class BackupVmMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudServiceType":
            suggest = "cloud_service_type"
        elif key == "imageType":
            suggest = "image_type"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupVmMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupVmMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupVmMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_service_type: Optional[_builtins.str] = None,
                 disk: Optional[_builtins.int] = None,
                 eip: Optional[_builtins.str] = None,
                 image_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 ram: Optional[_builtins.int] = None,
                 vcpus: Optional[_builtins.int] = None):
        """
        :param _builtins.str cloud_service_type: Specifies ECS type.
        :param _builtins.int disk: Shows system disk size corresponding to the ECS specifications.
        :param _builtins.str eip: Specifies elastic IP address of the ECS.
        :param _builtins.str image_type: Specifies image type.
        :param _builtins.str name: Name of backup data.
        :param _builtins.str private_ip: It specifies internal IP address of the ECS.
        :param _builtins.int ram: Specifies memory size of the ECS, in MB.
        :param _builtins.int vcpus: Specifies CPU cores corresponding to the ECS.
        """
        if cloud_service_type is not None:
            pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> Optional[_builtins.str]:
        """
        Specifies ECS type.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> Optional[_builtins.int]:
        """
        Shows system disk size corresponding to the ECS specifications.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> Optional[_builtins.str]:
        """
        Specifies elastic IP address of the ECS.
        """
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[_builtins.str]:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        It specifies internal IP address of the ECS.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[_builtins.int]:
        """
        Specifies memory size of the ECS, in MB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.int]:
        """
        Specifies CPU cores corresponding to the ECS.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class BackupVolumeBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageSpeed":
            suggest = "average_speed"
        elif key == "imageType":
            suggest = "image_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "sourceVolumeId":
            suggest = "source_volume_id"
        elif key == "sourceVolumeName":
            suggest = "source_volume_name"
        elif key == "sourceVolumeSize":
            suggest = "source_volume_size"
        elif key == "spaceSavingRatio":
            suggest = "space_saving_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupVolumeBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupVolumeBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupVolumeBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_speed: Optional[_builtins.int] = None,
                 bootable: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 image_type: Optional[_builtins.str] = None,
                 incremental: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None,
                 snapshot_id: Optional[_builtins.str] = None,
                 source_volume_id: Optional[_builtins.str] = None,
                 source_volume_name: Optional[_builtins.str] = None,
                 source_volume_size: Optional[_builtins.int] = None,
                 space_saving_ratio: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.int average_speed: Specifies the average speed.
        :param _builtins.bool bootable: Specifies whether the disk is bootable.
        :param _builtins.str id: Specifies Cinder backup ID.
        :param _builtins.str image_type: Specifies image type.
        :param _builtins.bool incremental: Shows whether incremental backup is used.
        :param _builtins.str name: Name of backup data.
        :param _builtins.int size: Specifies accumulated size (MB) of backups.
        :param _builtins.str snapshot_id: ID of snapshot.
        :param _builtins.str source_volume_id: It specifies source volume ID.
        :param _builtins.str source_volume_name: Specifies source volume name.
        :param _builtins.int source_volume_size: Shows source volume size in GB.
        :param _builtins.int space_saving_ratio: Specifies space saving rate.
        :param _builtins.str status: Status of backup Volume.
        """
        if average_speed is not None:
            pulumi.set(__self__, "average_speed", average_speed)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if source_volume_id is not None:
            pulumi.set(__self__, "source_volume_id", source_volume_id)
        if source_volume_name is not None:
            pulumi.set(__self__, "source_volume_name", source_volume_name)
        if source_volume_size is not None:
            pulumi.set(__self__, "source_volume_size", source_volume_size)
        if space_saving_ratio is not None:
            pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> Optional[_builtins.int]:
        """
        Specifies the average speed.
        """
        return pulumi.get(self, "average_speed")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the disk is bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies Cinder backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[_builtins.str]:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[_builtins.bool]:
        """
        Shows whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies accumulated size (MB) of backups.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        """
        ID of snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> Optional[_builtins.str]:
        """
        It specifies source volume ID.
        """
        return pulumi.get(self, "source_volume_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> Optional[_builtins.str]:
        """
        Specifies source volume name.
        """
        return pulumi.get(self, "source_volume_name")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> Optional[_builtins.int]:
        """
        Shows source volume size in GB.
        """
        return pulumi.get(self, "source_volume_size")

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> Optional[_builtins.int]:
        """
        Specifies space saving rate.
        """
        return pulumi.get(self, "space_saving_ratio")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of backup Volume.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupPolicyResourceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of backup policy.
        :param _builtins.str name: Specifies the backup policy name.
        :param _builtins.str type: Entity object type of the backup object.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of backup policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backup policy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Entity object type of the backup object.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupPolicyScheduledOperationResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 max_backups: _builtins.int,
                 name: _builtins.str,
                 operation_type: _builtins.str,
                 permanent: _builtins.bool,
                 retention_duration_days: _builtins.int,
                 trigger_id: _builtins.str,
                 trigger_name: _builtins.str,
                 trigger_pattern: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str description: Specifies Scheduling period description.
        :param _builtins.bool enabled: Specifies whether the scheduling period is enabled.
        :param _builtins.str id: Specifies the ID of backup policy.
        :param _builtins.int max_backups: Specifies maximum number of backups that can be automatically created for a backup object.
        :param _builtins.str name: Specifies the backup policy name.
        :param _builtins.str operation_type: Specifies Operation type, which can be backup.
        :param _builtins.bool permanent: Specifies whether backups are permanently retained.
        :param _builtins.int retention_duration_days: Specifies duration of retaining a backup, in days.
        :param _builtins.str trigger_id: Specifies Scheduler ID.
        :param _builtins.str trigger_name: Specifies Scheduler name.
        :param _builtins.str trigger_pattern: Specifies Scheduling policy of the scheduler.
        :param _builtins.str trigger_type: Specifies Scheduler type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_backups", max_backups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "permanent", permanent)
        pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies Scheduling period description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether the scheduling period is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of backup policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> _builtins.int:
        """
        Specifies maximum number of backups that can be automatically created for a backup object.
        """
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backup policy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        """
        Specifies Operation type, which can be backup.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> _builtins.bool:
        """
        Specifies whether backups are permanently retained.
        """
        return pulumi.get(self, "permanent")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> _builtins.int:
        """
        Specifies duration of retaining a backup, in days.
        """
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> _builtins.str:
        """
        Specifies Scheduler ID.
        """
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> _builtins.str:
        """
        Specifies Scheduler name.
        """
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> _builtins.str:
        """
        Specifies Scheduling policy of the scheduler.
        """
        return pulumi.get(self, "trigger_pattern")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Specifies Scheduler type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetBackupPolicyV1ResourceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupPolicyV1ScheduledOperationResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 max_backups: _builtins.int,
                 name: _builtins.str,
                 operation_type: _builtins.str,
                 permanent: _builtins.bool,
                 retention_duration_days: _builtins.int,
                 trigger_id: _builtins.str,
                 trigger_name: _builtins.str,
                 trigger_pattern: _builtins.str,
                 trigger_type: _builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_backups", max_backups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "permanent", permanent)
        pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> _builtins.int:
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> _builtins.bool:
        return pulumi.get(self, "permanent")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> _builtins.int:
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> _builtins.str:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> _builtins.str:
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> _builtins.str:
        return pulumi.get(self, "trigger_pattern")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetBackupV1VmMetadataResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 disk: _builtins.int,
                 eip: _builtins.str,
                 image_type: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 ram: _builtins.int,
                 vcpus: _builtins.int):
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "eip", eip)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.int:
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> _builtins.str:
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.int:
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetBackupV1VolumeBackupResult(dict):
    def __init__(__self__, *,
                 average_speed: _builtins.int,
                 bootable: _builtins.bool,
                 id: _builtins.str,
                 image_type: _builtins.str,
                 incremental: _builtins.bool,
                 name: _builtins.str,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 source_volume_id: _builtins.str,
                 source_volume_name: _builtins.str,
                 source_volume_size: _builtins.int,
                 space_saving_ratio: _builtins.int,
                 status: _builtins.str):
        pulumi.set(__self__, "average_speed", average_speed)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "source_volume_id", source_volume_id)
        pulumi.set(__self__, "source_volume_name", source_volume_name)
        pulumi.set(__self__, "source_volume_size", source_volume_size)
        pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> _builtins.int:
        return pulumi.get(self, "average_speed")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> _builtins.str:
        return pulumi.get(self, "source_volume_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> _builtins.str:
        return pulumi.get(self, "source_volume_name")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> _builtins.int:
        return pulumi.get(self, "source_volume_size")

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> _builtins.int:
        return pulumi.get(self, "space_saving_ratio")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupVmMetadataResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 disk: _builtins.int,
                 eip: _builtins.str,
                 image_type: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 ram: _builtins.int,
                 vcpus: _builtins.int):
        """
        :param _builtins.str cloud_service_type: Specifies ECS type.
        :param _builtins.int disk: Shows system disk size corresponding to the ECS specifications.
        :param _builtins.str eip: Specifies elastic IP address of the ECS.
        :param _builtins.str image_type: Specifies image type.
        :param _builtins.str name: Name of backup data.
        :param _builtins.str private_ip: It specifies internal IP address of the ECS.
        :param _builtins.int ram: Specifies memory size of the ECS, in MB.
        :param _builtins.int vcpus: Specifies CPU cores corresponding to the ECS.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "eip", eip)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        Specifies ECS type.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.int:
        """
        Shows system disk size corresponding to the ECS specifications.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> _builtins.str:
        """
        Specifies elastic IP address of the ECS.
        """
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        It specifies internal IP address of the ECS.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.int:
        """
        Specifies memory size of the ECS, in MB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies CPU cores corresponding to the ECS.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetBackupVolumeBackupResult(dict):
    def __init__(__self__, *,
                 average_speed: _builtins.int,
                 bootable: _builtins.bool,
                 id: _builtins.str,
                 image_type: _builtins.str,
                 incremental: _builtins.bool,
                 name: _builtins.str,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 source_volume_id: _builtins.str,
                 source_volume_name: _builtins.str,
                 source_volume_size: _builtins.int,
                 space_saving_ratio: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.int average_speed: Specifies the average speed.
        :param _builtins.bool bootable: Specifies whether the disk is bootable.
        :param _builtins.str id: Specifies the ID of backup.
        :param _builtins.str image_type: Specifies image type.
        :param _builtins.bool incremental: Shows whether incremental backup is used.
        :param _builtins.str name: Name of backup data.
        :param _builtins.int size: Specifies accumulated size (MB) of backups.
        :param _builtins.str snapshot_id: ID of snapshot.
        :param _builtins.str source_volume_id: It specifies source volume ID.
        :param _builtins.str source_volume_name: Specifies source volume name.
        :param _builtins.int source_volume_size: Shows source volume size in GB.
        :param _builtins.int space_saving_ratio: Specifies space saving rate.
        :param _builtins.str status: Specifies the backup status.
        """
        pulumi.set(__self__, "average_speed", average_speed)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "source_volume_id", source_volume_id)
        pulumi.set(__self__, "source_volume_name", source_volume_name)
        pulumi.set(__self__, "source_volume_size", source_volume_size)
        pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> _builtins.int:
        """
        Specifies the average speed.
        """
        return pulumi.get(self, "average_speed")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Specifies whether the disk is bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of backup.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Shows whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies accumulated size (MB) of backups.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        ID of snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> _builtins.str:
        """
        It specifies source volume ID.
        """
        return pulumi.get(self, "source_volume_id")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> _builtins.str:
        """
        Specifies source volume name.
        """
        return pulumi.get(self, "source_volume_name")

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> _builtins.int:
        """
        Shows source volume size in GB.
        """
        return pulumi.get(self, "source_volume_size")

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> _builtins.int:
        """
        Specifies space saving rate.
        """
        return pulumi.get(self, "space_saving_ratio")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the backup status.
        """
        return pulumi.get(self, "status")


