# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupResult',
    'AwaitableGetBackupResult',
    'get_backup',
    'get_backup_output',
]

@pulumi.output_type
class GetBackupResult:
    """
    A collection of values returned by getBackup.
    """
    def __init__(__self__, auto_trigger=None, average_speed=None, backup_name=None, backup_record_id=None, description=None, id=None, policy_id=None, region=None, resource_id=None, resource_name=None, resource_type=None, size=None, status=None, vm_ip=None, vm_metadatas=None, volume_backups=None):
        if auto_trigger and not isinstance(auto_trigger, bool):
            raise TypeError("Expected argument 'auto_trigger' to be a bool")
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        if average_speed and not isinstance(average_speed, int):
            raise TypeError("Expected argument 'average_speed' to be a int")
        pulumi.set(__self__, "average_speed", average_speed)
        if backup_name and not isinstance(backup_name, str):
            raise TypeError("Expected argument 'backup_name' to be a str")
        pulumi.set(__self__, "backup_name", backup_name)
        if backup_record_id and not isinstance(backup_record_id, str):
            raise TypeError("Expected argument 'backup_record_id' to be a str")
        pulumi.set(__self__, "backup_record_id", backup_record_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vm_ip and not isinstance(vm_ip, str):
            raise TypeError("Expected argument 'vm_ip' to be a str")
        pulumi.set(__self__, "vm_ip", vm_ip)
        if vm_metadatas and not isinstance(vm_metadatas, list):
            raise TypeError("Expected argument 'vm_metadatas' to be a list")
        pulumi.set(__self__, "vm_metadatas", vm_metadatas)
        if volume_backups and not isinstance(volume_backups, list):
            raise TypeError("Expected argument 'volume_backups' to be a list")
        pulumi.set(__self__, "volume_backups", volume_backups)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Specifies whether automatic trigger is enabled.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> _builtins.int:
        """
        Specifies the average speed.
        """
        return pulumi.get(self, "average_speed")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> _builtins.str:
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="backupRecordId")
    def backup_record_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_record_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Provides the backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies Cinder backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies accumulated size (MB) of backups.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of backup Volume.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vm_ip")

    @_builtins.property
    @pulumi.getter(name="vmMetadatas")
    def vm_metadatas(self) -> Sequence['outputs.GetBackupVmMetadataResult']:
        """
        block supports the following arguments:
        """
        return pulumi.get(self, "vm_metadatas")

    @_builtins.property
    @pulumi.getter(name="volumeBackups")
    def volume_backups(self) -> Sequence['outputs.GetBackupVolumeBackupResult']:
        """
        block supports the following arguments:
        """
        return pulumi.get(self, "volume_backups")


class AwaitableGetBackupResult(GetBackupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupResult(
            auto_trigger=self.auto_trigger,
            average_speed=self.average_speed,
            backup_name=self.backup_name,
            backup_record_id=self.backup_record_id,
            description=self.description,
            id=self.id,
            policy_id=self.policy_id,
            region=self.region,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            resource_type=self.resource_type,
            size=self.size,
            status=self.status,
            vm_ip=self.vm_ip,
            vm_metadatas=self.vm_metadatas,
            volume_backups=self.volume_backups)


def get_backup(backup_name: Optional[_builtins.str] = None,
               backup_record_id: Optional[_builtins.str] = None,
               id: Optional[_builtins.str] = None,
               policy_id: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               resource_id: Optional[_builtins.str] = None,
               resource_name: Optional[_builtins.str] = None,
               resource_type: Optional[_builtins.str] = None,
               status: Optional[_builtins.str] = None,
               vm_ip: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupResult:
    """
    !> **WARNING:** It has been deprecated.

    The HuaweiCloud CSBS Backup data source allows access of backup resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_name = config.require_object("backupName")
    csbs = huaweicloud.csbs.get_backup(backup_name=backup_name)
    ```


    :param _builtins.str backup_name: Specifies the backup name.
    :param _builtins.str backup_record_id: Specifies the backup record ID.
    :param _builtins.str id: Specifies the ID of backup.
    :param _builtins.str policy_id: Specifies the Policy Id.
    :param _builtins.str region: The region in which to obtain the CSBS backups. If omitted, the provider-level region
           will be used.
    :param _builtins.str resource_id: Specifies the backup object ID.
    :param _builtins.str resource_name: Specifies the backup object name.
    :param _builtins.str resource_type: Specifies the type of backup objects.
    :param _builtins.str status: Specifies the backup status.
    :param _builtins.str vm_ip: Specifies the ip of VM.
    """
    __args__ = dict()
    __args__['backupName'] = backup_name
    __args__['backupRecordId'] = backup_record_id
    __args__['id'] = id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    __args__['vmIp'] = vm_ip
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:csbs/getBackup:getBackup', __args__, opts=opts, typ=GetBackupResult).value

    return AwaitableGetBackupResult(
        auto_trigger=pulumi.get(__ret__, 'auto_trigger'),
        average_speed=pulumi.get(__ret__, 'average_speed'),
        backup_name=pulumi.get(__ret__, 'backup_name'),
        backup_record_id=pulumi.get(__ret__, 'backup_record_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        vm_ip=pulumi.get(__ret__, 'vm_ip'),
        vm_metadatas=pulumi.get(__ret__, 'vm_metadatas'),
        volume_backups=pulumi.get(__ret__, 'volume_backups'))
def get_backup_output(backup_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      backup_record_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      vm_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupResult]:
    """
    !> **WARNING:** It has been deprecated.

    The HuaweiCloud CSBS Backup data source allows access of backup resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_name = config.require_object("backupName")
    csbs = huaweicloud.csbs.get_backup(backup_name=backup_name)
    ```


    :param _builtins.str backup_name: Specifies the backup name.
    :param _builtins.str backup_record_id: Specifies the backup record ID.
    :param _builtins.str id: Specifies the ID of backup.
    :param _builtins.str policy_id: Specifies the Policy Id.
    :param _builtins.str region: The region in which to obtain the CSBS backups. If omitted, the provider-level region
           will be used.
    :param _builtins.str resource_id: Specifies the backup object ID.
    :param _builtins.str resource_name: Specifies the backup object name.
    :param _builtins.str resource_type: Specifies the type of backup objects.
    :param _builtins.str status: Specifies the backup status.
    :param _builtins.str vm_ip: Specifies the ip of VM.
    """
    __args__ = dict()
    __args__['backupName'] = backup_name
    __args__['backupRecordId'] = backup_record_id
    __args__['id'] = id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    __args__['vmIp'] = vm_ip
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:csbs/getBackup:getBackup', __args__, opts=opts, typ=GetBackupResult)
    return __ret__.apply(lambda __response__: GetBackupResult(
        auto_trigger=pulumi.get(__response__, 'auto_trigger'),
        average_speed=pulumi.get(__response__, 'average_speed'),
        backup_name=pulumi.get(__response__, 'backup_name'),
        backup_record_id=pulumi.get(__response__, 'backup_record_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        vm_ip=pulumi.get(__response__, 'vm_ip'),
        vm_metadatas=pulumi.get(__response__, 'vm_metadatas'),
        volume_backups=pulumi.get(__response__, 'volume_backups')))
