# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupPolicyV1Result',
    'AwaitableGetBackupPolicyV1Result',
    'get_backup_policy_v1',
    'get_backup_policy_v1_output',
]

@pulumi.output_type
class GetBackupPolicyV1Result:
    """
    A collection of values returned by getBackupPolicyV1.
    """
    def __init__(__self__, common=None, description=None, id=None, name=None, provider_id=None, region=None, resources=None, scheduled_operations=None, status=None):
        if common and not isinstance(common, dict):
            raise TypeError("Expected argument 'common' to be a dict")
        pulumi.set(__self__, "common", common)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_id and not isinstance(provider_id, str):
            raise TypeError("Expected argument 'provider_id' to be a str")
        pulumi.set(__self__, "provider_id", provider_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if scheduled_operations and not isinstance(scheduled_operations, list):
            raise TypeError("Expected argument 'scheduled_operations' to be a list")
        pulumi.set(__self__, "scheduled_operations", scheduled_operations)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def common(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "common")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetBackupPolicyV1ResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="scheduledOperations")
    def scheduled_operations(self) -> Sequence['outputs.GetBackupPolicyV1ScheduledOperationResult']:
        return pulumi.get(self, "scheduled_operations")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetBackupPolicyV1Result(GetBackupPolicyV1Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupPolicyV1Result(
            common=self.common,
            description=self.description,
            id=self.id,
            name=self.name,
            provider_id=self.provider_id,
            region=self.region,
            resources=self.resources,
            scheduled_operations=self.scheduled_operations,
            status=self.status)


def get_backup_policy_v1(id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupPolicyV1Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:csbs/getBackupPolicyV1:getBackupPolicyV1', __args__, opts=opts, typ=GetBackupPolicyV1Result).value

    return AwaitableGetBackupPolicyV1Result(
        common=pulumi.get(__ret__, 'common'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provider_id=pulumi.get(__ret__, 'provider_id'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        scheduled_operations=pulumi.get(__ret__, 'scheduled_operations'),
        status=pulumi.get(__ret__, 'status'))
def get_backup_policy_v1_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupPolicyV1Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:csbs/getBackupPolicyV1:getBackupPolicyV1', __args__, opts=opts, typ=GetBackupPolicyV1Result)
    return __ret__.apply(lambda __response__: GetBackupPolicyV1Result(
        common=pulumi.get(__response__, 'common'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provider_id=pulumi.get(__response__, 'provider_id'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        scheduled_operations=pulumi.get(__response__, 'scheduled_operations'),
        status=pulumi.get(__response__, 'status')))
