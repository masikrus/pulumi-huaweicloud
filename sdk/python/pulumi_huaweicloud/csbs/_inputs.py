# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackupPolicyResourceArgs',
    'BackupPolicyResourceArgsDict',
    'BackupPolicyScheduledOperationArgs',
    'BackupPolicyScheduledOperationArgsDict',
    'BackupPolicyV1ResourceArgs',
    'BackupPolicyV1ResourceArgsDict',
    'BackupPolicyV1ScheduledOperationArgs',
    'BackupPolicyV1ScheduledOperationArgsDict',
    'BackupV1VmMetadataArgs',
    'BackupV1VmMetadataArgsDict',
    'BackupV1VolumeBackupArgs',
    'BackupV1VolumeBackupArgsDict',
    'BackupVmMetadataArgs',
    'BackupVmMetadataArgsDict',
    'BackupVolumeBackupArgs',
    'BackupVolumeBackupArgsDict',
]

MYPY = False

if not MYPY:
    class BackupPolicyResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the object to be backed up.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies backup object name.
        """
        type: pulumi.Input[_builtins.str]
        """
        Entity object type of the backup object. If the type is VMs, the value is
        **OS::Nova::Server**.
        """
elif False:
    BackupPolicyResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the object to be backed up.
        :param pulumi.Input[_builtins.str] name: Specifies backup object name.
        :param pulumi.Input[_builtins.str] type: Entity object type of the backup object. If the type is VMs, the value is
               **OS::Nova::Server**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the object to be backed up.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies backup object name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Entity object type of the backup object. If the type is VMs, the value is
        **OS::Nova::Server**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class BackupPolicyScheduledOperationArgsDict(TypedDict):
        operation_type: pulumi.Input[_builtins.str]
        """
        Specifies Operation type, which can be backup.
        """
        trigger_pattern: pulumi.Input[_builtins.str]
        """
        Specifies Scheduling policy of the scheduler.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduling period description.The value consists of 0 to 255
        characters and must not contain a greater-than sign (>) or less-than sign (<).
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the scheduling period is enabled. Default value is **true**
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduling period ID.
        """
        max_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies maximum number of backups that can be automatically created for a backup
        object.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduling period name.The value consists of 1 to 255 characters and can
        contain only letters, digits, underscores (_), and hyphens (-).
        """
        permanent: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether backups are permanently retained.
        """
        retention_duration_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies duration of retaining a backup, in days.
        """
        trigger_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduler ID.
        """
        trigger_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduler name.
        """
        trigger_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Scheduler type.
        """
elif False:
    BackupPolicyScheduledOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyScheduledOperationArgs:
    def __init__(__self__, *,
                 operation_type: pulumi.Input[_builtins.str],
                 trigger_pattern: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permanent: Optional[pulumi.Input[_builtins.bool]] = None,
                 retention_duration_days: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] operation_type: Specifies Operation type, which can be backup.
        :param pulumi.Input[_builtins.str] trigger_pattern: Specifies Scheduling policy of the scheduler.
        :param pulumi.Input[_builtins.str] description: Specifies Scheduling period description.The value consists of 0 to 255
               characters and must not contain a greater-than sign (>) or less-than sign (<).
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the scheduling period is enabled. Default value is **true**
        :param pulumi.Input[_builtins.str] id: Specifies Scheduling period ID.
        :param pulumi.Input[_builtins.int] max_backups: Specifies maximum number of backups that can be automatically created for a backup
               object.
        :param pulumi.Input[_builtins.str] name: Specifies Scheduling period name.The value consists of 1 to 255 characters and can
               contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.bool] permanent: Specifies whether backups are permanently retained.
        :param pulumi.Input[_builtins.int] retention_duration_days: Specifies duration of retaining a backup, in days.
        :param pulumi.Input[_builtins.str] trigger_id: Specifies Scheduler ID.
        :param pulumi.Input[_builtins.str] trigger_name: Specifies Scheduler name.
        :param pulumi.Input[_builtins.str] trigger_type: Specifies Scheduler type.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies Operation type, which can be backup.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation_type", value)

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies Scheduling policy of the scheduler.
        """
        return pulumi.get(self, "trigger_pattern")

    @trigger_pattern.setter
    def trigger_pattern(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trigger_pattern", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduling period description.The value consists of 0 to 255
        characters and must not contain a greater-than sign (>) or less-than sign (<).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the scheduling period is enabled. Default value is **true**
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduling period ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies maximum number of backups that can be automatically created for a backup
        object.
        """
        return pulumi.get(self, "max_backups")

    @max_backups.setter
    def max_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_backups", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduling period name.The value consists of 1 to 255 characters and can
        contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether backups are permanently retained.
        """
        return pulumi.get(self, "permanent")

    @permanent.setter
    def permanent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "permanent", value)

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies duration of retaining a backup, in days.
        """
        return pulumi.get(self, "retention_duration_days")

    @retention_duration_days.setter
    def retention_duration_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_duration_days", value)

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduler ID.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_id", value)

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduler name.
        """
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_name", value)

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Scheduler type.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_type", value)


if not MYPY:
    class BackupPolicyV1ResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        name: pulumi.Input[_builtins.str]
        type: pulumi.Input[_builtins.str]
elif False:
    BackupPolicyV1ResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyV1ResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class BackupPolicyV1ScheduledOperationArgsDict(TypedDict):
        operation_type: pulumi.Input[_builtins.str]
        trigger_pattern: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        max_backups: NotRequired[pulumi.Input[_builtins.int]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        permanent: NotRequired[pulumi.Input[_builtins.bool]]
        retention_duration_days: NotRequired[pulumi.Input[_builtins.int]]
        trigger_id: NotRequired[pulumi.Input[_builtins.str]]
        trigger_name: NotRequired[pulumi.Input[_builtins.str]]
        trigger_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    BackupPolicyV1ScheduledOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyV1ScheduledOperationArgs:
    def __init__(__self__, *,
                 operation_type: pulumi.Input[_builtins.str],
                 trigger_pattern: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permanent: Optional[pulumi.Input[_builtins.bool]] = None,
                 retention_duration_days: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "trigger_pattern", trigger_pattern)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation_type", value)

    @_builtins.property
    @pulumi.getter(name="triggerPattern")
    def trigger_pattern(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "trigger_pattern")

    @trigger_pattern.setter
    def trigger_pattern(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trigger_pattern", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "max_backups")

    @max_backups.setter
    def max_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_backups", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def permanent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "permanent")

    @permanent.setter
    def permanent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "permanent", value)

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "retention_duration_days")

    @retention_duration_days.setter
    def retention_duration_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_duration_days", value)

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_id", value)

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_name", value)

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_type", value)


if not MYPY:
    class BackupV1VmMetadataArgsDict(TypedDict):
        cloud_service_type: NotRequired[pulumi.Input[_builtins.str]]
        disk: NotRequired[pulumi.Input[_builtins.int]]
        eip: NotRequired[pulumi.Input[_builtins.str]]
        image_type: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        ram: NotRequired[pulumi.Input[_builtins.int]]
        vcpus: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    BackupV1VmMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupV1VmMetadataArgs:
    def __init__(__self__, *,
                 cloud_service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.int]] = None,
                 eip: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.int]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None):
        if cloud_service_type is not None:
            pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cloud_service_type")

    @cloud_service_type.setter
    def cloud_service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_service_type", value)

    @_builtins.property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ram", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vcpus", value)


if not MYPY:
    class BackupV1VolumeBackupArgsDict(TypedDict):
        average_speed: NotRequired[pulumi.Input[_builtins.int]]
        bootable: NotRequired[pulumi.Input[_builtins.bool]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        image_type: NotRequired[pulumi.Input[_builtins.str]]
        incremental: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        size: NotRequired[pulumi.Input[_builtins.int]]
        snapshot_id: NotRequired[pulumi.Input[_builtins.str]]
        source_volume_id: NotRequired[pulumi.Input[_builtins.str]]
        source_volume_name: NotRequired[pulumi.Input[_builtins.str]]
        source_volume_size: NotRequired[pulumi.Input[_builtins.int]]
        space_saving_ratio: NotRequired[pulumi.Input[_builtins.int]]
        status: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    BackupV1VolumeBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupV1VolumeBackupArgs:
    def __init__(__self__, *,
                 average_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 bootable: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 space_saving_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        if average_speed is not None:
            pulumi.set(__self__, "average_speed", average_speed)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if source_volume_id is not None:
            pulumi.set(__self__, "source_volume_id", source_volume_id)
        if source_volume_name is not None:
            pulumi.set(__self__, "source_volume_name", source_volume_name)
        if source_volume_size is not None:
            pulumi.set(__self__, "source_volume_size", source_volume_size)
        if space_saving_ratio is not None:
            pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "average_speed")

    @average_speed.setter
    def average_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "average_speed", value)

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "bootable")

    @bootable.setter
    def bootable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bootable", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "incremental")

    @incremental.setter
    def incremental(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_volume_id")

    @source_volume_id.setter
    def source_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_volume_name")

    @source_volume_name.setter
    def source_volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "source_volume_size")

    @source_volume_size.setter
    def source_volume_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_volume_size", value)

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "space_saving_ratio")

    @space_saving_ratio.setter
    def space_saving_ratio(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "space_saving_ratio", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class BackupVmMetadataArgsDict(TypedDict):
        cloud_service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies ECS type.
        """
        disk: NotRequired[pulumi.Input[_builtins.int]]
        """
        Shows system disk size corresponding to the ECS specifications.
        """
        eip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies elastic IP address of the ECS.
        """
        image_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies image type.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of backup data.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        It specifies internal IP address of the ECS.
        """
        ram: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies memory size of the ECS, in MB.
        """
        vcpus: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies CPU cores corresponding to the ECS.
        """
elif False:
    BackupVmMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupVmMetadataArgs:
    def __init__(__self__, *,
                 cloud_service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.int]] = None,
                 eip: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.int]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] cloud_service_type: Specifies ECS type.
        :param pulumi.Input[_builtins.int] disk: Shows system disk size corresponding to the ECS specifications.
        :param pulumi.Input[_builtins.str] eip: Specifies elastic IP address of the ECS.
        :param pulumi.Input[_builtins.str] image_type: Specifies image type.
        :param pulumi.Input[_builtins.str] name: Name of backup data.
        :param pulumi.Input[_builtins.str] private_ip: It specifies internal IP address of the ECS.
        :param pulumi.Input[_builtins.int] ram: Specifies memory size of the ECS, in MB.
        :param pulumi.Input[_builtins.int] vcpus: Specifies CPU cores corresponding to the ECS.
        """
        if cloud_service_type is not None:
            pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ECS type.
        """
        return pulumi.get(self, "cloud_service_type")

    @cloud_service_type.setter
    def cloud_service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_service_type", value)

    @_builtins.property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Shows system disk size corresponding to the ECS specifications.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies elastic IP address of the ECS.
        """
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        It specifies internal IP address of the ECS.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies memory size of the ECS, in MB.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ram", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies CPU cores corresponding to the ECS.
        """
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vcpus", value)


if not MYPY:
    class BackupVolumeBackupArgsDict(TypedDict):
        average_speed: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the average speed.
        """
        bootable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the disk is bootable.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies Cinder backup ID.
        """
        image_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies image type.
        """
        incremental: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Shows whether incremental backup is used.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of backup data.
        """
        size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies accumulated size (MB) of backups.
        """
        snapshot_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        ID of snapshot.
        """
        source_volume_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        It specifies source volume ID.
        """
        source_volume_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies source volume name.
        """
        source_volume_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Shows source volume size in GB.
        """
        space_saving_ratio: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies space saving rate.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Status of backup Volume.
        """
elif False:
    BackupVolumeBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupVolumeBackupArgs:
    def __init__(__self__, *,
                 average_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 bootable: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 space_saving_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] average_speed: Specifies the average speed.
        :param pulumi.Input[_builtins.bool] bootable: Specifies whether the disk is bootable.
        :param pulumi.Input[_builtins.str] id: Specifies Cinder backup ID.
        :param pulumi.Input[_builtins.str] image_type: Specifies image type.
        :param pulumi.Input[_builtins.bool] incremental: Shows whether incremental backup is used.
        :param pulumi.Input[_builtins.str] name: Name of backup data.
        :param pulumi.Input[_builtins.int] size: Specifies accumulated size (MB) of backups.
        :param pulumi.Input[_builtins.str] snapshot_id: ID of snapshot.
        :param pulumi.Input[_builtins.str] source_volume_id: It specifies source volume ID.
        :param pulumi.Input[_builtins.str] source_volume_name: Specifies source volume name.
        :param pulumi.Input[_builtins.int] source_volume_size: Shows source volume size in GB.
        :param pulumi.Input[_builtins.int] space_saving_ratio: Specifies space saving rate.
        :param pulumi.Input[_builtins.str] status: Status of backup Volume.
        """
        if average_speed is not None:
            pulumi.set(__self__, "average_speed", average_speed)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if source_volume_id is not None:
            pulumi.set(__self__, "source_volume_id", source_volume_id)
        if source_volume_name is not None:
            pulumi.set(__self__, "source_volume_name", source_volume_name)
        if source_volume_size is not None:
            pulumi.set(__self__, "source_volume_size", source_volume_size)
        if space_saving_ratio is not None:
            pulumi.set(__self__, "space_saving_ratio", space_saving_ratio)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="averageSpeed")
    def average_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the average speed.
        """
        return pulumi.get(self, "average_speed")

    @average_speed.setter
    def average_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "average_speed", value)

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the disk is bootable.
        """
        return pulumi.get(self, "bootable")

    @bootable.setter
    def bootable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bootable", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies Cinder backup ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies image type.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Shows whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")

    @incremental.setter
    def incremental(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of backup data.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies accumulated size (MB) of backups.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        It specifies source volume ID.
        """
        return pulumi.get(self, "source_volume_id")

    @source_volume_id.setter
    def source_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeName")
    def source_volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies source volume name.
        """
        return pulumi.get(self, "source_volume_name")

    @source_volume_name.setter
    def source_volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolumeSize")
    def source_volume_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Shows source volume size in GB.
        """
        return pulumi.get(self, "source_volume_size")

    @source_volume_size.setter
    def source_volume_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_volume_size", value)

    @_builtins.property
    @pulumi.getter(name="spaceSavingRatio")
    def space_saving_ratio(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies space saving rate.
        """
        return pulumi.get(self, "space_saving_ratio")

    @space_saving_ratio.setter
    def space_saving_ratio(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "space_saving_ratio", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of backup Volume.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


