# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupV1Args', 'BackupV1']

@pulumi.input_type
class BackupV1Args:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupV1 resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if backup_name is not None:
            pulumi.set(__self__, "backup_name", backup_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_name")

    @backup_name.setter
    def backup_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _BackupV1State:
    def __init__(__self__, *,
                 auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VmMetadataArgs']]]] = None,
                 volume_backups: Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VolumeBackupArgs']]]] = None):
        """
        Input properties used for looking up and filtering BackupV1 resources.
        """
        if auto_trigger is not None:
            pulumi.set(__self__, "auto_trigger", auto_trigger)
        if backup_name is not None:
            pulumi.set(__self__, "backup_name", backup_name)
        if backup_record_id is not None:
            pulumi.set(__self__, "backup_record_id", backup_record_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vm_metadatas is not None:
            pulumi.set(__self__, "vm_metadatas", vm_metadatas)
        if volume_backups is not None:
            pulumi.set(__self__, "volume_backups", volume_backups)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "auto_trigger")

    @auto_trigger.setter
    def auto_trigger(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_trigger", value)

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_name")

    @backup_name.setter
    def backup_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_name", value)

    @_builtins.property
    @pulumi.getter(name="backupRecordId")
    def backup_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_record_id")

    @backup_record_id.setter
    def backup_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_record_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="vmMetadatas")
    def vm_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VmMetadataArgs']]]]:
        return pulumi.get(self, "vm_metadatas")

    @vm_metadatas.setter
    def vm_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VmMetadataArgs']]]]):
        pulumi.set(self, "vm_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="volumeBackups")
    def volume_backups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VolumeBackupArgs']]]]:
        return pulumi.get(self, "volume_backups")

    @volume_backups.setter
    def volume_backups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupV1VolumeBackupArgs']]]]):
        pulumi.set(self, "volume_backups", value)


@pulumi.type_token("huaweicloud:csbs/backupV1:BackupV1")
class BackupV1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupV1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupV1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupV1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupV1Args.__new__(BackupV1Args)

            __props__.__dict__["backup_name"] = backup_name
            __props__.__dict__["description"] = description
            __props__.__dict__["region"] = region
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["auto_trigger"] = None
            __props__.__dict__["backup_record_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vm_metadatas"] = None
            __props__.__dict__["volume_backups"] = None
        super(BackupV1, __self__).__init__(
            'huaweicloud:csbs/backupV1:BackupV1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
            backup_name: Optional[pulumi.Input[_builtins.str]] = None,
            backup_record_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            vm_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupV1VmMetadataArgs', 'BackupV1VmMetadataArgsDict']]]]] = None,
            volume_backups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupV1VolumeBackupArgs', 'BackupV1VolumeBackupArgsDict']]]]] = None) -> 'BackupV1':
        """
        Get an existing BackupV1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupV1State.__new__(_BackupV1State)

        __props__.__dict__["auto_trigger"] = auto_trigger
        __props__.__dict__["backup_name"] = backup_name
        __props__.__dict__["backup_record_id"] = backup_record_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["vm_metadatas"] = vm_metadatas
        __props__.__dict__["volume_backups"] = volume_backups
        return BackupV1(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="backupRecordId")
    def backup_record_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_record_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vmMetadatas")
    def vm_metadatas(self) -> pulumi.Output[Sequence['outputs.BackupV1VmMetadata']]:
        return pulumi.get(self, "vm_metadatas")

    @_builtins.property
    @pulumi.getter(name="volumeBackups")
    def volume_backups(self) -> pulumi.Output[Sequence['outputs.BackupV1VolumeBackup']]:
        return pulumi.get(self, "volume_backups")

