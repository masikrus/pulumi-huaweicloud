# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiAssociatedApplicationsResult',
    'AwaitableGetApiAssociatedApplicationsResult',
    'get_api_associated_applications',
    'get_api_associated_applications_output',
]

@pulumi.output_type
class GetApiAssociatedApplicationsResult:
    """
    A collection of values returned by getApiAssociatedApplications.
    """
    def __init__(__self__, api_id=None, application_id=None, applications=None, env_id=None, env_name=None, id=None, instance_id=None, name=None, region=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if env_name and not isinstance(env_name, str):
            raise TypeError("Expected argument 'env_name' to be a str")
        pulumi.set(__self__, "env_name", env_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetApiAssociatedApplicationsApplicationResult']:
        """
        All applications that match the filter parameters.
        The applications structure is documented below.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[_builtins.str]:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> Optional[_builtins.str]:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetApiAssociatedApplicationsResult(GetApiAssociatedApplicationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAssociatedApplicationsResult(
            api_id=self.api_id,
            application_id=self.application_id,
            applications=self.applications,
            env_id=self.env_id,
            env_name=self.env_name,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region)


def get_api_associated_applications(api_id: Optional[_builtins.str] = None,
                                    application_id: Optional[_builtins.str] = None,
                                    env_id: Optional[_builtins.str] = None,
                                    env_name: Optional[_builtins.str] = None,
                                    instance_id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAssociatedApplicationsResult:
    """
    Use this data source to query the applications associated with the specified API within HuaweiCloud.

    ## Example Usage

    ### Query the contents of all applications bound to the current API

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    associated_api_id = config.require_object("associatedApiId")
    test = huaweicloud.DedicatedApig.get_api_associated_applications(instance_id=instance_id,
        api_id=associated_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API bound to the application.
    :param _builtins.str application_id: Specifies the ID of the application.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the applications belong.
    :param _builtins.str name: Specifies the name of the application.
    :param _builtins.str region: Specifies the region in which to query the associated applications.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['applicationId'] = application_id
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getApiAssociatedApplications:getApiAssociatedApplications', __args__, opts=opts, typ=GetApiAssociatedApplicationsResult).value

    return AwaitableGetApiAssociatedApplicationsResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        application_id=pulumi.get(__ret__, 'application_id'),
        applications=pulumi.get(__ret__, 'applications'),
        env_id=pulumi.get(__ret__, 'env_id'),
        env_name=pulumi.get(__ret__, 'env_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_api_associated_applications_output(api_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           application_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           env_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           env_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiAssociatedApplicationsResult]:
    """
    Use this data source to query the applications associated with the specified API within HuaweiCloud.

    ## Example Usage

    ### Query the contents of all applications bound to the current API

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    associated_api_id = config.require_object("associatedApiId")
    test = huaweicloud.DedicatedApig.get_api_associated_applications(instance_id=instance_id,
        api_id=associated_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API bound to the application.
    :param _builtins.str application_id: Specifies the ID of the application.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the applications belong.
    :param _builtins.str name: Specifies the name of the application.
    :param _builtins.str region: Specifies the region in which to query the associated applications.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['applicationId'] = application_id
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getApiAssociatedApplications:getApiAssociatedApplications', __args__, opts=opts, typ=GetApiAssociatedApplicationsResult)
    return __ret__.apply(lambda __response__: GetApiAssociatedApplicationsResult(
        api_id=pulumi.get(__response__, 'api_id'),
        application_id=pulumi.get(__response__, 'application_id'),
        applications=pulumi.get(__response__, 'applications'),
        env_id=pulumi.get(__response__, 'env_id'),
        env_name=pulumi.get(__response__, 'env_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
