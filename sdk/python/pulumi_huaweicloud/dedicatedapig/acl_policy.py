# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AclPolicyArgs', 'AclPolicy']

@pulumi.input_type
class AclPolicyArgs:
    def __init__(__self__, *,
                 entity_type: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AclPolicy resource.
        :param pulumi.Input[_builtins.str] entity_type: Specifies the entity type of the ACL policy.
               The valid values are as follows:
               + **IP**: This rule is specified to control access to the API for specific IPs.
               + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
               + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the ACL
               policy belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the ACL policy.
               The valid values are as follows:
               + **PERMIT**: Allow specific IPs or accounts to access API.
               + **DENY**: Forbid specific IPs or accounts to access API.
        :param pulumi.Input[_builtins.str] value: Specifies one or more objects from which the access will be controlled.  
               Separate multiple objects with commas (,).
        :param pulumi.Input[_builtins.str] name: Specifies the name of the ACL policy.  
               The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
               allowed. The name must start with an English letter or Chinese character.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the ACL policy is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the entity type of the ACL policy.
        The valid values are as follows:
        + **IP**: This rule is specified to control access to the API for specific IPs.
        + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
        + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).

        Changing this will create a new resource.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "entity_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the ACL
        policy belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the ACL policy.
        The valid values are as follows:
        + **PERMIT**: Allow specific IPs or accounts to access API.
        + **DENY**: Forbid specific IPs or accounts to access API.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies one or more objects from which the access will be controlled.  
        Separate multiple objects with commas (,).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the ACL policy.  
        The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
        allowed. The name must start with an English letter or Chinese character.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the ACL policy is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AclPolicyState:
    def __init__(__self__, *,
                 entity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AclPolicy resources.
        :param pulumi.Input[_builtins.str] entity_type: Specifies the entity type of the ACL policy.
               The valid values are as follows:
               + **IP**: This rule is specified to control access to the API for specific IPs.
               + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
               + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the ACL
               policy belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the ACL policy.  
               The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
               allowed. The name must start with an English letter or Chinese character.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the ACL policy is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the ACL policy.
               The valid values are as follows:
               + **PERMIT**: Allow specific IPs or accounts to access API.
               + **DENY**: Forbid specific IPs or accounts to access API.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the ACL policy.
        :param pulumi.Input[_builtins.str] value: Specifies one or more objects from which the access will be controlled.  
               Separate multiple objects with commas (,).
        """
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the entity type of the ACL policy.
        The valid values are as follows:
        + **IP**: This rule is specified to control access to the API for specific IPs.
        + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
        + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).

        Changing this will create a new resource.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the ACL
        policy belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the ACL policy.  
        The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
        allowed. The name must start with an English letter or Chinese character.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the ACL policy is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the ACL policy.
        The valid values are as follows:
        + **PERMIT**: Allow specific IPs or accounts to access API.
        + **DENY**: Forbid specific IPs or accounts to access API.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the ACL policy.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies one or more objects from which the access will be controlled.  
        Separate multiple objects with commas (,).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:DedicatedApig/aclPolicy:AclPolicy")
class AclPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an ACL policy resource within HuaweiCloud.

        ## Example Usage

        ## Import

        ACL Policies can be imported using their `id` and related dedicated instance ID, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/aclPolicy:AclPolicy test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_type: Specifies the entity type of the ACL policy.
               The valid values are as follows:
               + **IP**: This rule is specified to control access to the API for specific IPs.
               + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
               + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the ACL
               policy belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the ACL policy.  
               The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
               allowed. The name must start with an English letter or Chinese character.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the ACL policy is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the ACL policy.
               The valid values are as follows:
               + **PERMIT**: Allow specific IPs or accounts to access API.
               + **DENY**: Forbid specific IPs or accounts to access API.
        :param pulumi.Input[_builtins.str] value: Specifies one or more objects from which the access will be controlled.  
               Separate multiple objects with commas (,).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an ACL policy resource within HuaweiCloud.

        ## Example Usage

        ## Import

        ACL Policies can be imported using their `id` and related dedicated instance ID, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/aclPolicy:AclPolicy test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param AclPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclPolicyArgs.__new__(AclPolicyArgs)

            if entity_type is None and not opts.urn:
                raise TypeError("Missing required property 'entity_type'")
            __props__.__dict__["entity_type"] = entity_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["updated_at"] = None
        super(AclPolicy, __self__).__init__(
            'huaweicloud:DedicatedApig/aclPolicy:AclPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'AclPolicy':
        """
        Get an existing AclPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_type: Specifies the entity type of the ACL policy.
               The valid values are as follows:
               + **IP**: This rule is specified to control access to the API for specific IPs.
               + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
               + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the ACL
               policy belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the ACL policy.  
               The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
               allowed. The name must start with an English letter or Chinese character.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the ACL policy is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the ACL policy.
               The valid values are as follows:
               + **PERMIT**: Allow specific IPs or accounts to access API.
               + **DENY**: Forbid specific IPs or accounts to access API.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the ACL policy.
        :param pulumi.Input[_builtins.str] value: Specifies one or more objects from which the access will be controlled.  
               Separate multiple objects with commas (,).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclPolicyState.__new__(_AclPolicyState)

        __props__.__dict__["entity_type"] = entity_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        return AclPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the entity type of the ACL policy.
        The valid values are as follows:
        + **IP**: This rule is specified to control access to the API for specific IPs.
        + **DOMAIN**: This rule is specified to control access to the API for specific accounts (specified by domain name).
        + **DOMAIN_ID**: This rule is specified to control access to the API for specific accounts (specified by domain ID).

        Changing this will create a new resource.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the ACL
        policy belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the ACL policy.  
        The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
        allowed. The name must start with an English letter or Chinese character.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the ACL policy is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the ACL policy.
        The valid values are as follows:
        + **PERMIT**: Allow specific IPs or accounts to access API.
        + **DENY**: Forbid specific IPs or accounts to access API.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the ACL policy.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies one or more objects from which the access will be controlled.  
        Separate multiple objects with commas (,).
        """
        return pulumi.get(self, "value")

