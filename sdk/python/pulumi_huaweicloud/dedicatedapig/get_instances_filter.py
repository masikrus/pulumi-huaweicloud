# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInstancesFilterResult',
    'AwaitableGetInstancesFilterResult',
    'get_instances_filter',
    'get_instances_filter_output',
]

@pulumi.output_type
class GetInstancesFilterResult:
    """
    A collection of values returned by getInstancesFilter.
    """
    def __init__(__self__, id=None, instances=None, matches=None, region=None, tags=None, without_any_tag=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if without_any_tag and not isinstance(without_any_tag, bool):
            raise TypeError("Expected argument 'without_any_tag' to be a bool")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetInstancesFilterInstanceResult']:
        """
        All dedicated instances that match the filter parameters.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetInstancesFilterMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetInstancesFilterTagResult']]:
        """
        The tag list associated with the instance.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetInstancesFilterResult(GetInstancesFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesFilterResult(
            id=self.id,
            instances=self.instances,
            matches=self.matches,
            region=self.region,
            tags=self.tags,
            without_any_tag=self.without_any_tag)


def get_instances_filter(matches: Optional[Sequence[Union['GetInstancesFilterMatchArgs', 'GetInstancesFilterMatchArgsDict']]] = None,
                         region: Optional[_builtins.str] = None,
                         tags: Optional[Sequence[Union['GetInstancesFilterTagArgs', 'GetInstancesFilterTagArgsDict']]] = None,
                         without_any_tag: Optional[_builtins.bool] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesFilterResult:
    """
    Use this data source to query the dedicated instance list within HuaweiCloud.

    ## Example Usage

    ### Query all instances

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedApig.get_instances_filter()
    ```

    ### Query instance list by tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    tags = config.require_object("tags")
    test = huaweicloud.DedicatedApig.get_instances_filter(tags=[{
        "key": entry["value"]["key"],
        "values": entry["value"]["values"],
    } for entry in [{"key": k, "value": v} for k, v in tags]])
    ```


    :param Sequence[Union['GetInstancesFilterMatchArgs', 'GetInstancesFilterMatchArgsDict']] matches: Specifies the fields to be queried.  
           The matches structure is documented below.
           
           <a name="data_instances_filter_tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetInstancesFilterTagArgs', 'GetInstancesFilterTagArgsDict']] tags: Specifies the list of the tags to be queried.  
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to query resources without tags.  
           Defaults to **false**.
           + **true**: Only all resources without tags are queried.
           + **false**: All resources are queried.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getInstancesFilter:getInstancesFilter', __args__, opts=opts, typ=GetInstancesFilterResult).value

    return AwaitableGetInstancesFilterResult(
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_instances_filter_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetInstancesFilterMatchArgs', 'GetInstancesFilterMatchArgsDict']]]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tags: Optional[pulumi.Input[Optional[Sequence[Union['GetInstancesFilterTagArgs', 'GetInstancesFilterTagArgsDict']]]]] = None,
                                without_any_tag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstancesFilterResult]:
    """
    Use this data source to query the dedicated instance list within HuaweiCloud.

    ## Example Usage

    ### Query all instances

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedApig.get_instances_filter()
    ```

    ### Query instance list by tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    tags = config.require_object("tags")
    test = huaweicloud.DedicatedApig.get_instances_filter(tags=[{
        "key": entry["value"]["key"],
        "values": entry["value"]["values"],
    } for entry in [{"key": k, "value": v} for k, v in tags]])
    ```


    :param Sequence[Union['GetInstancesFilterMatchArgs', 'GetInstancesFilterMatchArgsDict']] matches: Specifies the fields to be queried.  
           The matches structure is documented below.
           
           <a name="data_instances_filter_tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetInstancesFilterTagArgs', 'GetInstancesFilterTagArgsDict']] tags: Specifies the list of the tags to be queried.  
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to query resources without tags.  
           Defaults to **false**.
           + **true**: Only all resources without tags are queried.
           + **false**: All resources are queried.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getInstancesFilter:getInstancesFilter', __args__, opts=opts, typ=GetInstancesFilterResult)
    return __ret__.apply(lambda __response__: GetInstancesFilterResult(
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
