# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ChannelArgs', 'Channel']

@pulumi.input_type
class ChannelArgs:
    def __init__(__self__, *,
                 balance_strategy: pulumi.Input[_builtins.int],
                 instance_id: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 health_check: Optional[pulumi.Input['ChannelHealthCheckArgs']] = None,
                 member_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]] = None,
                 microservice: Optional[pulumi.Input['ChannelMicroserviceArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Channel resource.
        :param pulumi.Input[_builtins.int] balance_strategy: Specifies the distribution algorithm.  
               The valid values are as follows:
               + **1**: Weighted round robin (WRR).
               + **2**: Weighted least connections (WLC).
               + **3**: Source hashing.
               + **4**: URI hashing.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input['ChannelHealthCheckArgs'] health_check: Specifies the health configuration of cloud servers associated with the load balance
               channel for APIG regularly check.
               The object structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]] member_groups: Specifies the backend (server) groups of the channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the channel.  
               The valid values are as follows:
               + **ip**.
               + **ecs**.
        :param pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]] members: Specifies the backend servers of the channel.  
               This parameter is required and only available if the `type` is `builtin`.
               The object structure is documented below.
        :param pulumi.Input['ChannelMicroserviceArgs'] microservice: Specifies the configuration of the microservice.  
               The object structure is documented below.
               
               <a name="channel_member_group"></a>
               The `member_group` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the channel.  
               The valid values are as follows:
               + **builtin**: Server type.
               + **microservice**: Microservice type.
               + **reference**: Reference load balance channel type.
               
               Defaults to `builtin` (server type).
        """
        pulumi.set(__self__, "balance_strategy", balance_strategy)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "port", port)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if member_groups is not None:
            pulumi.set(__self__, "member_groups", member_groups)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if microservice is not None:
            pulumi.set(__self__, "microservice", microservice)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the distribution algorithm.  
        The valid values are as follows:
        + **1**: Weighted round robin (WRR).
        + **2**: Weighted least connections (WLC).
        + **3**: Source hashing.
        + **4**: URI hashing.
        """
        return pulumi.get(self, "balance_strategy")

    @balance_strategy.setter
    def balance_strategy(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "balance_strategy", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ChannelHealthCheckArgs']]:
        """
        Specifies the health configuration of cloud servers associated with the load balance
        channel for APIG regularly check.
        The object structure is documented below.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ChannelHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]]:
        """
        Specifies the backend (server) groups of the channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "member_groups")

    @member_groups.setter
    def member_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]]):
        pulumi.set(self, "member_groups", value)

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the member type of the channel.  
        The valid values are as follows:
        + **ip**.
        + **ecs**.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_type", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]]:
        """
        Specifies the backend servers of the channel.  
        This parameter is required and only available if the `type` is `builtin`.
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def microservice(self) -> Optional[pulumi.Input['ChannelMicroserviceArgs']]:
        """
        Specifies the configuration of the microservice.  
        The object structure is documented below.

        <a name="channel_member_group"></a>
        The `member_group` block supports:
        """
        return pulumi.get(self, "microservice")

    @microservice.setter
    def microservice(self, value: Optional[pulumi.Input['ChannelMicroserviceArgs']]):
        pulumi.set(self, "microservice", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the channel.  
        The valid values are as follows:
        + **builtin**: Server type.
        + **microservice**: Microservice type.
        + **reference**: Reference load balance channel type.

        Defaults to `builtin` (server type).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ChannelState:
    def __init__(__self__, *,
                 balance_strategy: Optional[pulumi.Input[_builtins.int]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check: Optional[pulumi.Input['ChannelHealthCheckArgs']] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]] = None,
                 microservice: Optional[pulumi.Input['ChannelMicroserviceArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Channel resources.
        :param pulumi.Input[_builtins.int] balance_strategy: Specifies the distribution algorithm.  
               The valid values are as follows:
               + **1**: Weighted round robin (WRR).
               + **2**: Weighted least connections (WLC).
               + **3**: Source hashing.
               + **4**: URI hashing.
        :param pulumi.Input[_builtins.str] created_at: The time when the channel was created.
        :param pulumi.Input['ChannelHealthCheckArgs'] health_check: Specifies the health configuration of cloud servers associated with the load balance
               channel for APIG regularly check.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]] member_groups: Specifies the backend (server) groups of the channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the channel.  
               The valid values are as follows:
               + **ip**.
               + **ecs**.
        :param pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]] members: Specifies the backend servers of the channel.  
               This parameter is required and only available if the `type` is `builtin`.
               The object structure is documented below.
        :param pulumi.Input['ChannelMicroserviceArgs'] microservice: Specifies the configuration of the microservice.  
               The object structure is documented below.
               
               <a name="channel_member_group"></a>
               The `member_group` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of the channel.  
               The valid values are as follows:
               + **builtin**: Server type.
               + **microservice**: Microservice type.
               + **reference**: Reference load balance channel type.
               
               Defaults to `builtin` (server type).
        """
        if balance_strategy is not None:
            pulumi.set(__self__, "balance_strategy", balance_strategy)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if member_groups is not None:
            pulumi.set(__self__, "member_groups", member_groups)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if microservice is not None:
            pulumi.set(__self__, "microservice", microservice)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the distribution algorithm.  
        The valid values are as follows:
        + **1**: Weighted round robin (WRR).
        + **2**: Weighted least connections (WLC).
        + **3**: Source hashing.
        + **4**: URI hashing.
        """
        return pulumi.get(self, "balance_strategy")

    @balance_strategy.setter
    def balance_strategy(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "balance_strategy", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the channel was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ChannelHealthCheckArgs']]:
        """
        Specifies the health configuration of cloud servers associated with the load balance
        channel for APIG regularly check.
        The object structure is documented below.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ChannelHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]]:
        """
        Specifies the backend (server) groups of the channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "member_groups")

    @member_groups.setter
    def member_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberGroupArgs']]]]):
        pulumi.set(self, "member_groups", value)

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the member type of the channel.  
        The valid values are as follows:
        + **ip**.
        + **ecs**.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_type", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]]:
        """
        Specifies the backend servers of the channel.  
        This parameter is required and only available if the `type` is `builtin`.
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def microservice(self) -> Optional[pulumi.Input['ChannelMicroserviceArgs']]:
        """
        Specifies the configuration of the microservice.  
        The object structure is documented below.

        <a name="channel_member_group"></a>
        The `member_group` block supports:
        """
        return pulumi.get(self, "microservice")

    @microservice.setter
    def microservice(self, value: Optional[pulumi.Input['ChannelMicroserviceArgs']]):
        pulumi.set(self, "microservice", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the channel.  
        The valid values are as follows:
        + **builtin**: Server type.
        + **microservice**: Microservice type.
        + **reference**: Reference load balance channel type.

        Defaults to `builtin` (server type).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:DedicatedApig/channel:Channel")
class Channel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 balance_strategy: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check: Optional[pulumi.Input[Union['ChannelHealthCheckArgs', 'ChannelHealthCheckArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberGroupArgs', 'ChannelMemberGroupArgsDict']]]]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberArgs', 'ChannelMemberArgsDict']]]]] = None,
                 microservice: Optional[pulumi.Input[Union['ChannelMicroserviceArgs', 'ChannelMicroserviceArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a channel resource within HuaweiCloud.

        > After creating a channel of type server, you can configure it for an API of an HTTP/HTTPS backend service.

        ## Example Usage

        ### Create a channel of type server and use the default group to manage servers

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        backend_servers = config.require_object("backendServers")
        test = huaweicloud.dedicatedapig.Channel("test",
            members=[{
                "id": entry["value"]["id"],
                "weight": entry["value"]["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_servers]],
            instance_id=instance_id,
            name=channel_name,
            port=8080)
        ```

        ### Create a channel of type server and use the custom group to manage servers

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        backend_server_groups = config.require_object("backendServerGroups")
        backend_servers = config.require_object("backendServers")
        test = huaweicloud.dedicatedapig.Channel("test",
            member_groups=[{
                "name": value["name"],
                "description": value["description"],
                "weight": value["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_server_groups]],
            members=[{
                "group_name": value["group_name"],
                "id": value["id"],
                "weight": value["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_servers]],
            instance_id=instance_id,
            name=channel_name,
            port=8080)
        ```

        ### Create a channel of type reference

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        member_group_name = config.require_object("memberGroupName")
        reference_channel_id = config.require_object("referenceChannelId")
        test = huaweicloud.dedicatedapig.Channel("test",
            instance_id=instance_id,
            name=channel_name,
            port=82,
            balance_strategy=2,
            member_type="ecs",
            type="reference",
            member_groups=[{
                "name": member_group_name,
                "description": "Created by terraform script",
                "weight": 2,
                "reference_vpc_channel_id": reference_channel_id,
            }],
            health_check={
                "protocol": "HTTPS",
                "threshold_normal": 2,
                "threshold_abnormal": 5,
                "interval": 10,
                "timeout": 5,
                "path": "/terraform/",
                "method": "GET",
                "port": 50,
                "http_codes": "500",
            })
        ```

        ## Import

        Channels can be imported using their `id` and the ID of the related dedicated instance, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/channel:Channel test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] balance_strategy: Specifies the distribution algorithm.  
               The valid values are as follows:
               + **1**: Weighted round robin (WRR).
               + **2**: Weighted least connections (WLC).
               + **3**: Source hashing.
               + **4**: URI hashing.
        :param pulumi.Input[Union['ChannelHealthCheckArgs', 'ChannelHealthCheckArgsDict']] health_check: Specifies the health configuration of cloud servers associated with the load balance
               channel for APIG regularly check.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberGroupArgs', 'ChannelMemberGroupArgsDict']]]] member_groups: Specifies the backend (server) groups of the channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the channel.  
               The valid values are as follows:
               + **ip**.
               + **ecs**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberArgs', 'ChannelMemberArgsDict']]]] members: Specifies the backend servers of the channel.  
               This parameter is required and only available if the `type` is `builtin`.
               The object structure is documented below.
        :param pulumi.Input[Union['ChannelMicroserviceArgs', 'ChannelMicroserviceArgsDict']] microservice: Specifies the configuration of the microservice.  
               The object structure is documented below.
               
               <a name="channel_member_group"></a>
               The `member_group` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the channel.  
               The valid values are as follows:
               + **builtin**: Server type.
               + **microservice**: Microservice type.
               + **reference**: Reference load balance channel type.
               
               Defaults to `builtin` (server type).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a channel resource within HuaweiCloud.

        > After creating a channel of type server, you can configure it for an API of an HTTP/HTTPS backend service.

        ## Example Usage

        ### Create a channel of type server and use the default group to manage servers

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        backend_servers = config.require_object("backendServers")
        test = huaweicloud.dedicatedapig.Channel("test",
            members=[{
                "id": entry["value"]["id"],
                "weight": entry["value"]["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_servers]],
            instance_id=instance_id,
            name=channel_name,
            port=8080)
        ```

        ### Create a channel of type server and use the custom group to manage servers

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        backend_server_groups = config.require_object("backendServerGroups")
        backend_servers = config.require_object("backendServers")
        test = huaweicloud.dedicatedapig.Channel("test",
            member_groups=[{
                "name": value["name"],
                "description": value["description"],
                "weight": value["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_server_groups]],
            members=[{
                "group_name": value["group_name"],
                "id": value["id"],
                "weight": value["weight"],
            } for entry in [{"key": k, "value": v} for k, v in backend_servers]],
            instance_id=instance_id,
            name=channel_name,
            port=8080)
        ```

        ### Create a channel of type reference

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        member_group_name = config.require_object("memberGroupName")
        reference_channel_id = config.require_object("referenceChannelId")
        test = huaweicloud.dedicatedapig.Channel("test",
            instance_id=instance_id,
            name=channel_name,
            port=82,
            balance_strategy=2,
            member_type="ecs",
            type="reference",
            member_groups=[{
                "name": member_group_name,
                "description": "Created by terraform script",
                "weight": 2,
                "reference_vpc_channel_id": reference_channel_id,
            }],
            health_check={
                "protocol": "HTTPS",
                "threshold_normal": 2,
                "threshold_abnormal": 5,
                "interval": 10,
                "timeout": 5,
                "path": "/terraform/",
                "method": "GET",
                "port": 50,
                "http_codes": "500",
            })
        ```

        ## Import

        Channels can be imported using their `id` and the ID of the related dedicated instance, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/channel:Channel test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 balance_strategy: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check: Optional[pulumi.Input[Union['ChannelHealthCheckArgs', 'ChannelHealthCheckArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberGroupArgs', 'ChannelMemberGroupArgsDict']]]]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberArgs', 'ChannelMemberArgsDict']]]]] = None,
                 microservice: Optional[pulumi.Input[Union['ChannelMicroserviceArgs', 'ChannelMicroserviceArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChannelArgs.__new__(ChannelArgs)

            if balance_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'balance_strategy'")
            __props__.__dict__["balance_strategy"] = balance_strategy
            __props__.__dict__["health_check"] = health_check
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["member_groups"] = member_groups
            __props__.__dict__["member_type"] = member_type
            __props__.__dict__["members"] = members
            __props__.__dict__["microservice"] = microservice
            __props__.__dict__["name"] = name
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(Channel, __self__).__init__(
            'huaweicloud:DedicatedApig/channel:Channel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            balance_strategy: Optional[pulumi.Input[_builtins.int]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            health_check: Optional[pulumi.Input[Union['ChannelHealthCheckArgs', 'ChannelHealthCheckArgsDict']]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            member_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberGroupArgs', 'ChannelMemberGroupArgsDict']]]]] = None,
            member_type: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberArgs', 'ChannelMemberArgsDict']]]]] = None,
            microservice: Optional[pulumi.Input[Union['ChannelMicroserviceArgs', 'ChannelMicroserviceArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Channel':
        """
        Get an existing Channel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] balance_strategy: Specifies the distribution algorithm.  
               The valid values are as follows:
               + **1**: Weighted round robin (WRR).
               + **2**: Weighted least connections (WLC).
               + **3**: Source hashing.
               + **4**: URI hashing.
        :param pulumi.Input[_builtins.str] created_at: The time when the channel was created.
        :param pulumi.Input[Union['ChannelHealthCheckArgs', 'ChannelHealthCheckArgsDict']] health_check: Specifies the health configuration of cloud servers associated with the load balance
               channel for APIG regularly check.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberGroupArgs', 'ChannelMemberGroupArgsDict']]]] member_groups: Specifies the backend (server) groups of the channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the channel.  
               The valid values are as follows:
               + **ip**.
               + **ecs**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChannelMemberArgs', 'ChannelMemberArgsDict']]]] members: Specifies the backend servers of the channel.  
               This parameter is required and only available if the `type` is `builtin`.
               The object structure is documented below.
        :param pulumi.Input[Union['ChannelMicroserviceArgs', 'ChannelMicroserviceArgsDict']] microservice: Specifies the configuration of the microservice.  
               The object structure is documented below.
               
               <a name="channel_member_group"></a>
               The `member_group` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of the channel.  
               The valid values are as follows:
               + **builtin**: Server type.
               + **microservice**: Microservice type.
               + **reference**: Reference load balance channel type.
               
               Defaults to `builtin` (server type).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChannelState.__new__(_ChannelState)

        __props__.__dict__["balance_strategy"] = balance_strategy
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["member_groups"] = member_groups
        __props__.__dict__["member_type"] = member_type
        __props__.__dict__["members"] = members
        __props__.__dict__["microservice"] = microservice
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return Channel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the distribution algorithm.  
        The valid values are as follows:
        + **1**: Weighted round robin (WRR).
        + **2**: Weighted least connections (WLC).
        + **3**: Source hashing.
        + **4**: URI hashing.
        """
        return pulumi.get(self, "balance_strategy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the channel was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.ChannelHealthCheck']:
        """
        Specifies the health configuration of cloud servers associated with the load balance
        channel for APIG regularly check.
        The object structure is documented below.
        """
        return pulumi.get(self, "health_check")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> pulumi.Output[Sequence['outputs.ChannelMemberGroup']]:
        """
        Specifies the backend (server) groups of the channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "member_groups")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the member type of the channel.  
        The valid values are as follows:
        + **ip**.
        + **ecs**.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.ChannelMember']]:
        """
        Specifies the backend servers of the channel.  
        This parameter is required and only available if the `type` is `builtin`.
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def microservice(self) -> pulumi.Output['outputs.ChannelMicroservice']:
        """
        Specifies the configuration of the microservice.  
        The object structure is documented below.

        <a name="channel_member_group"></a>
        The `member_group` block supports:
        """
        return pulumi.get(self, "microservice")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the channel.  
        The valid values are as follows:
        + **builtin**: Server type.
        + **microservice**: Microservice type.
        + **reference**: Reference load balance channel type.

        Defaults to `builtin` (server type).
        """
        return pulumi.get(self, "type")

