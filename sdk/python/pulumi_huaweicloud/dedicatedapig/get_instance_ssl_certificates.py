# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceSslCertificatesResult',
    'AwaitableGetInstanceSslCertificatesResult',
    'get_instance_ssl_certificates',
    'get_instance_ssl_certificates_output',
]

@pulumi.output_type
class GetInstanceSslCertificatesResult:
    """
    A collection of values returned by getInstanceSslCertificates.
    """
    def __init__(__self__, algorithm_type=None, certificates=None, common_name=None, id=None, instance_id=None, name=None, region=None, signature_algorithm=None, type=None):
        if algorithm_type and not isinstance(algorithm_type, str):
            raise TypeError("Expected argument 'algorithm_type' to be a str")
        pulumi.set(__self__, "algorithm_type", algorithm_type)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if signature_algorithm and not isinstance(signature_algorithm, str):
            raise TypeError("Expected argument 'signature_algorithm' to be a str")
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="algorithmType")
    def algorithm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "algorithm_type")

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetInstanceSslCertificatesCertificateResult']:
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetInstanceSslCertificatesResult(GetInstanceSslCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceSslCertificatesResult(
            algorithm_type=self.algorithm_type,
            certificates=self.certificates,
            common_name=self.common_name,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            signature_algorithm=self.signature_algorithm,
            type=self.type)


def get_instance_ssl_certificates(algorithm_type: Optional[_builtins.str] = None,
                                  common_name: Optional[_builtins.str] = None,
                                  instance_id: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  signature_algorithm: Optional[_builtins.str] = None,
                                  type: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceSslCertificatesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['algorithmType'] = algorithm_type
    __args__['commonName'] = common_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['signatureAlgorithm'] = signature_algorithm
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getInstanceSslCertificates:getInstanceSslCertificates', __args__, opts=opts, typ=GetInstanceSslCertificatesResult).value

    return AwaitableGetInstanceSslCertificatesResult(
        algorithm_type=pulumi.get(__ret__, 'algorithm_type'),
        certificates=pulumi.get(__ret__, 'certificates'),
        common_name=pulumi.get(__ret__, 'common_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        signature_algorithm=pulumi.get(__ret__, 'signature_algorithm'),
        type=pulumi.get(__ret__, 'type'))
def get_instance_ssl_certificates_output(algorithm_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         common_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         signature_algorithm: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceSslCertificatesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['algorithmType'] = algorithm_type
    __args__['commonName'] = common_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['signatureAlgorithm'] = signature_algorithm
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getInstanceSslCertificates:getInstanceSslCertificates', __args__, opts=opts, typ=GetInstanceSslCertificatesResult)
    return __ret__.apply(lambda __response__: GetInstanceSslCertificatesResult(
        algorithm_type=pulumi.get(__response__, 'algorithm_type'),
        certificates=pulumi.get(__response__, 'certificates'),
        common_name=pulumi.get(__response__, 'common_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        signature_algorithm=pulumi.get(__response__, 'signature_algorithm'),
        type=pulumi.get(__response__, 'type')))
