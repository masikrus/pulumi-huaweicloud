# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiBasicConfigurationsResult',
    'AwaitableGetApiBasicConfigurationsResult',
    'get_api_basic_configurations',
    'get_api_basic_configurations_output',
]

@pulumi.output_type
class GetApiBasicConfigurationsResult:
    """
    A collection of values returned by getApiBasicConfigurations.
    """
    def __init__(__self__, api_id=None, backend_type=None, configurations=None, env_id=None, env_name=None, group_id=None, id=None, instance_id=None, name=None, precise_search=None, region=None, request_method=None, request_path=None, request_protocol=None, security_authentication=None, type=None, vpc_channel_name=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if backend_type and not isinstance(backend_type, str):
            raise TypeError("Expected argument 'backend_type' to be a str")
        pulumi.set(__self__, "backend_type", backend_type)
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if env_name and not isinstance(env_name, str):
            raise TypeError("Expected argument 'env_name' to be a str")
        pulumi.set(__self__, "env_name", env_name)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if precise_search and not isinstance(precise_search, str):
            raise TypeError("Expected argument 'precise_search' to be a str")
        pulumi.set(__self__, "precise_search", precise_search)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if request_method and not isinstance(request_method, str):
            raise TypeError("Expected argument 'request_method' to be a str")
        pulumi.set(__self__, "request_method", request_method)
        if request_path and not isinstance(request_path, str):
            raise TypeError("Expected argument 'request_path' to be a str")
        pulumi.set(__self__, "request_path", request_path)
        if request_protocol and not isinstance(request_protocol, str):
            raise TypeError("Expected argument 'request_protocol' to be a str")
        pulumi.set(__self__, "request_protocol", request_protocol)
        if security_authentication and not isinstance(security_authentication, str):
            raise TypeError("Expected argument 'security_authentication' to be a str")
        pulumi.set(__self__, "security_authentication", security_authentication)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_channel_name and not isinstance(vpc_channel_name, str):
            raise TypeError("Expected argument 'vpc_channel_name' to be a str")
        pulumi.set(__self__, "vpc_channel_name", vpc_channel_name)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[_builtins.str]:
        """
        The backend type of the API.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetApiBasicConfigurationsConfigurationResult']:
        """
        All API configurations that match the filter parameters.
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[_builtins.str]:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> Optional[_builtins.str]:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        The ID of group corresponding to the API.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="preciseSearch")
    def precise_search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "precise_search")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[_builtins.str]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[_builtins.str]:
        """
        The request address of the API.
        """
        return pulumi.get(self, "request_path")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        The request protocol of the API.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> Optional[_builtins.str]:
        """
        The security authentication mode of the API request.
        """
        return pulumi.get(self, "security_authentication")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the API.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcChannelName")
    def vpc_channel_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_channel_name")


class AwaitableGetApiBasicConfigurationsResult(GetApiBasicConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiBasicConfigurationsResult(
            api_id=self.api_id,
            backend_type=self.backend_type,
            configurations=self.configurations,
            env_id=self.env_id,
            env_name=self.env_name,
            group_id=self.group_id,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            precise_search=self.precise_search,
            region=self.region,
            request_method=self.request_method,
            request_path=self.request_path,
            request_protocol=self.request_protocol,
            security_authentication=self.security_authentication,
            type=self.type,
            vpc_channel_name=self.vpc_channel_name)


def get_api_basic_configurations(api_id: Optional[_builtins.str] = None,
                                 backend_type: Optional[_builtins.str] = None,
                                 env_id: Optional[_builtins.str] = None,
                                 env_name: Optional[_builtins.str] = None,
                                 group_id: Optional[_builtins.str] = None,
                                 instance_id: Optional[_builtins.str] = None,
                                 name: Optional[_builtins.str] = None,
                                 precise_search: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 request_method: Optional[_builtins.str] = None,
                                 request_path: Optional[_builtins.str] = None,
                                 request_protocol: Optional[_builtins.str] = None,
                                 security_authentication: Optional[_builtins.str] = None,
                                 type: Optional[_builtins.str] = None,
                                 vpc_channel_name: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiBasicConfigurationsResult:
    """
    Use this data source to get the basic configuration list of the APIs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_api_basic_configurations(instance_id=instance_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API.
    :param _builtins.str backend_type: Specifies the backend type of the API.  
           The valid values are **HTTP**, **FUNCTION**, **MOCK** and **GRPC**.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str group_id: Specifies the ID of the API group to which the APIs belong.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the APIs belong.
    :param _builtins.str name: Specifies the name of the API. Fuzzy search is supported.
    :param _builtins.str precise_search: Specifies the parameter name that you want to match exactly.  
           The valid values are as follows:
           + **name**: API name, corresponding to the field `name` in this data source arguments.
           + **req_uri**: Request path, corresponding to the field `request_path` in this data source arguments.
           
           This parameter can also be set to multiple enumerated values and separated by a comma (,), e.g. `name,req_uri`.
           This parameter takes effect only after the corresponding parameter(s) is(are) set.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str request_method: Specifies the request method of the API.  
           The valid values are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
    :param _builtins.str request_path: Specifies the request address of the API. Fuzzy search is supported.
    :param _builtins.str request_protocol: Specifies the request protocol of the API.  
           The valid values are **HTTP**, **HTTPS**, **BOTH** and **GRPCS**.
    :param _builtins.str security_authentication: Specifies the security authentication mode of the API request.  
           The valid values are **NONE**, **APP**, **IAM** and **AUTHORIZER**.
    :param _builtins.str type: Specifies the type of the API.  
           The valid values are **Public** and **Private**.
    :param _builtins.str vpc_channel_name: Specifies the name of the VPC channel. Fuzzy search is supported.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['backendType'] = backend_type
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['groupId'] = group_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    __args__['requestMethod'] = request_method
    __args__['requestPath'] = request_path
    __args__['requestProtocol'] = request_protocol
    __args__['securityAuthentication'] = security_authentication
    __args__['type'] = type
    __args__['vpcChannelName'] = vpc_channel_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getApiBasicConfigurations:getApiBasicConfigurations', __args__, opts=opts, typ=GetApiBasicConfigurationsResult).value

    return AwaitableGetApiBasicConfigurationsResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        backend_type=pulumi.get(__ret__, 'backend_type'),
        configurations=pulumi.get(__ret__, 'configurations'),
        env_id=pulumi.get(__ret__, 'env_id'),
        env_name=pulumi.get(__ret__, 'env_name'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        precise_search=pulumi.get(__ret__, 'precise_search'),
        region=pulumi.get(__ret__, 'region'),
        request_method=pulumi.get(__ret__, 'request_method'),
        request_path=pulumi.get(__ret__, 'request_path'),
        request_protocol=pulumi.get(__ret__, 'request_protocol'),
        security_authentication=pulumi.get(__ret__, 'security_authentication'),
        type=pulumi.get(__ret__, 'type'),
        vpc_channel_name=pulumi.get(__ret__, 'vpc_channel_name'))
def get_api_basic_configurations_output(api_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        backend_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        env_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        env_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        precise_search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        request_method: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        request_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        request_protocol: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        security_authentication: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        vpc_channel_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiBasicConfigurationsResult]:
    """
    Use this data source to get the basic configuration list of the APIs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_api_basic_configurations(instance_id=instance_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API.
    :param _builtins.str backend_type: Specifies the backend type of the API.  
           The valid values are **HTTP**, **FUNCTION**, **MOCK** and **GRPC**.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str group_id: Specifies the ID of the API group to which the APIs belong.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the APIs belong.
    :param _builtins.str name: Specifies the name of the API. Fuzzy search is supported.
    :param _builtins.str precise_search: Specifies the parameter name that you want to match exactly.  
           The valid values are as follows:
           + **name**: API name, corresponding to the field `name` in this data source arguments.
           + **req_uri**: Request path, corresponding to the field `request_path` in this data source arguments.
           
           This parameter can also be set to multiple enumerated values and separated by a comma (,), e.g. `name,req_uri`.
           This parameter takes effect only after the corresponding parameter(s) is(are) set.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str request_method: Specifies the request method of the API.  
           The valid values are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
    :param _builtins.str request_path: Specifies the request address of the API. Fuzzy search is supported.
    :param _builtins.str request_protocol: Specifies the request protocol of the API.  
           The valid values are **HTTP**, **HTTPS**, **BOTH** and **GRPCS**.
    :param _builtins.str security_authentication: Specifies the security authentication mode of the API request.  
           The valid values are **NONE**, **APP**, **IAM** and **AUTHORIZER**.
    :param _builtins.str type: Specifies the type of the API.  
           The valid values are **Public** and **Private**.
    :param _builtins.str vpc_channel_name: Specifies the name of the VPC channel. Fuzzy search is supported.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['backendType'] = backend_type
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['groupId'] = group_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    __args__['requestMethod'] = request_method
    __args__['requestPath'] = request_path
    __args__['requestProtocol'] = request_protocol
    __args__['securityAuthentication'] = security_authentication
    __args__['type'] = type
    __args__['vpcChannelName'] = vpc_channel_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getApiBasicConfigurations:getApiBasicConfigurations', __args__, opts=opts, typ=GetApiBasicConfigurationsResult)
    return __ret__.apply(lambda __response__: GetApiBasicConfigurationsResult(
        api_id=pulumi.get(__response__, 'api_id'),
        backend_type=pulumi.get(__response__, 'backend_type'),
        configurations=pulumi.get(__response__, 'configurations'),
        env_id=pulumi.get(__response__, 'env_id'),
        env_name=pulumi.get(__response__, 'env_name'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        precise_search=pulumi.get(__response__, 'precise_search'),
        region=pulumi.get(__response__, 'region'),
        request_method=pulumi.get(__response__, 'request_method'),
        request_path=pulumi.get(__response__, 'request_path'),
        request_protocol=pulumi.get(__response__, 'request_protocol'),
        security_authentication=pulumi.get(__response__, 'security_authentication'),
        type=pulumi.get(__response__, 'type'),
        vpc_channel_name=pulumi.get(__response__, 'vpc_channel_name')))
