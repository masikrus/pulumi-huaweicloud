# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOrchestrationRulesResult',
    'AwaitableGetOrchestrationRulesResult',
    'get_orchestration_rules',
    'get_orchestration_rules_output',
]

@pulumi.output_type
class GetOrchestrationRulesResult:
    """
    A collection of values returned by getOrchestrationRules.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, region=None, rule_id=None, rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the orchestration rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetOrchestrationRulesRuleResult']:
        """
        All orchestration rules that match the filter parameters.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")


class AwaitableGetOrchestrationRulesResult(GetOrchestrationRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrchestrationRulesResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules)


def get_orchestration_rules(instance_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            rule_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrchestrationRulesResult:
    """
    Use this data source to get the list of orchestration rules under specified instance within HuaweiCloud.

    ## Example Usage

    ### Query all orchestration rules under specified APIG instance

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_orchestration_rules(instance_id=instance_id)
    ```

    ### Query specified orchestration rule using its ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    test = huaweicloud.DedicatedApig.get_orchestration_rules(instance_id=instance_id,
        rule_id=orchestration_rule_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the orchestration rules belong.
    :param _builtins.str name: Specifies the name of the orchestration rule to be queried, fuzzy matching is supported.
    :param _builtins.str region: Specifies the region in which to query the associated signatures.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the orchestration rule to be queried.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getOrchestrationRules:getOrchestrationRules', __args__, opts=opts, typ=GetOrchestrationRulesResult).value

    return AwaitableGetOrchestrationRulesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'))
def get_orchestration_rules_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrchestrationRulesResult]:
    """
    Use this data source to get the list of orchestration rules under specified instance within HuaweiCloud.

    ## Example Usage

    ### Query all orchestration rules under specified APIG instance

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_orchestration_rules(instance_id=instance_id)
    ```

    ### Query specified orchestration rule using its ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    test = huaweicloud.DedicatedApig.get_orchestration_rules(instance_id=instance_id,
        rule_id=orchestration_rule_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the orchestration rules belong.
    :param _builtins.str name: Specifies the name of the orchestration rule to be queried, fuzzy matching is supported.
    :param _builtins.str region: Specifies the region in which to query the associated signatures.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the orchestration rule to be queried.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getOrchestrationRules:getOrchestrationRules', __args__, opts=opts, typ=GetOrchestrationRulesResult)
    return __ret__.apply(lambda __response__: GetOrchestrationRulesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules')))
