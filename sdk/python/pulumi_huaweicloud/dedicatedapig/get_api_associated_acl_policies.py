# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiAssociatedAclPoliciesResult',
    'AwaitableGetApiAssociatedAclPoliciesResult',
    'get_api_associated_acl_policies',
    'get_api_associated_acl_policies_output',
]

@pulumi.output_type
class GetApiAssociatedAclPoliciesResult:
    """
    A collection of values returned by getApiAssociatedAclPolicies.
    """
    def __init__(__self__, api_id=None, entity_type=None, env_id=None, env_name=None, id=None, instance_id=None, name=None, policies=None, policy_id=None, region=None, type=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if entity_type and not isinstance(entity_type, str):
            raise TypeError("Expected argument 'entity_type' to be a str")
        pulumi.set(__self__, "entity_type", entity_type)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if env_name and not isinstance(env_name, str):
            raise TypeError("Expected argument 'env_name' to be a str")
        pulumi.set(__self__, "env_name", env_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[_builtins.str]:
        """
        The entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[_builtins.str]:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> Optional[_builtins.str]:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetApiAssociatedAclPoliciesPolicyResult']:
        """
        All ACL policies that match the filter parameters.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the ACL policy.
        """
        return pulumi.get(self, "type")


class AwaitableGetApiAssociatedAclPoliciesResult(GetApiAssociatedAclPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAssociatedAclPoliciesResult(
            api_id=self.api_id,
            entity_type=self.entity_type,
            env_id=self.env_id,
            env_name=self.env_name,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            policies=self.policies,
            policy_id=self.policy_id,
            region=self.region,
            type=self.type)


def get_api_associated_acl_policies(api_id: Optional[_builtins.str] = None,
                                    entity_type: Optional[_builtins.str] = None,
                                    env_id: Optional[_builtins.str] = None,
                                    env_name: Optional[_builtins.str] = None,
                                    instance_id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    policy_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    type: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAssociatedAclPoliciesResult:
    """
    Use this data source to query the ACL policies associated with the specified API within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    associated_api_id = config.require_object("associatedApiId")
    test = huaweicloud.DedicatedApig.get_api_associated_acl_policies(instance_id=instance_id,
        api_id=associated_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API bound to the ACL policy.
    :param _builtins.str entity_type: Specifies the entity type of the ACL policy.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the ACL policies belong.
    :param _builtins.str name: Specifies the name of the ACL policy.
    :param _builtins.str policy_id: Specifies the ID of the ACL policy.
    :param _builtins.str region: Specifies the region in which to query the associated ACL policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the ACL policy.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['entityType'] = entity_type
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getApiAssociatedAclPolicies:getApiAssociatedAclPolicies', __args__, opts=opts, typ=GetApiAssociatedAclPoliciesResult).value

    return AwaitableGetApiAssociatedAclPoliciesResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        entity_type=pulumi.get(__ret__, 'entity_type'),
        env_id=pulumi.get(__ret__, 'env_id'),
        env_name=pulumi.get(__ret__, 'env_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_api_associated_acl_policies_output(api_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           entity_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           env_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           env_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiAssociatedAclPoliciesResult]:
    """
    Use this data source to query the ACL policies associated with the specified API within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    associated_api_id = config.require_object("associatedApiId")
    test = huaweicloud.DedicatedApig.get_api_associated_acl_policies(instance_id=instance_id,
        api_id=associated_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API bound to the ACL policy.
    :param _builtins.str entity_type: Specifies the entity type of the ACL policy.
    :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
    :param _builtins.str env_name: Specifies the name of the environment where the API is published.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the ACL policies belong.
    :param _builtins.str name: Specifies the name of the ACL policy.
    :param _builtins.str policy_id: Specifies the ID of the ACL policy.
    :param _builtins.str region: Specifies the region in which to query the associated ACL policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the ACL policy.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['entityType'] = entity_type
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getApiAssociatedAclPolicies:getApiAssociatedAclPolicies', __args__, opts=opts, typ=GetApiAssociatedAclPoliciesResult)
    return __ret__.apply(lambda __response__: GetApiAssociatedAclPoliciesResult(
        api_id=pulumi.get(__response__, 'api_id'),
        entity_type=pulumi.get(__response__, 'entity_type'),
        env_id=pulumi.get(__response__, 'env_id'),
        env_name=pulumi.get(__response__, 'env_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        policies=pulumi.get(__response__, 'policies'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
