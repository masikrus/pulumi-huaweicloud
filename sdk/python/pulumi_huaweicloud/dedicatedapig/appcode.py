# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppcodeArgs', 'Appcode']

@pulumi.input_type
class AppcodeArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Appcode resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of application to which the APPCODE belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               and APPCODE belong.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and APPCODE are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the APPCODE value (content).
               The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
               Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
               If omitted, a random value will be generated.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of application to which the APPCODE belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        and APPCODE belong.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application and APPCODE are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APPCODE value (content).
        The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
        Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
        If omitted, a random value will be generated.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _AppcodeState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Appcode resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of application to which the APPCODE belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the APPCODE.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               and APPCODE belong.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and APPCODE are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the APPCODE value (content).
               The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
               Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
               If omitted, a random value will be generated.
               Changing this will create a new resource.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of application to which the APPCODE belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the APPCODE.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the application
        and APPCODE belong.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application and APPCODE are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APPCODE value (content).
        The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
        Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
        If omitted, a random value will be generated.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:DedicatedApig/appcode:Appcode")
class Appcode(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an APPCODE in application resource within HuaweiCloud.

        ## Example Usage

        ### Auto generate APPCODE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        test = huaweicloud.dedicatedapig.Appcode("test",
            instance_id=instance_id,
            application_id=application_id)
        ```

        ### Manually configure APPCODE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        app_code = config.require_object("appCode")
        test = huaweicloud.dedicatedapig.Appcode("test",
            instance_id=instance_id,
            application_id=application_id,
            value=app_code)
        ```

        ## Import

        APPCODEs can be imported using related `instance_id`, `application_id` and their `id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/appcode:Appcode test <instance_id>/<application_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of application to which the APPCODE belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               and APPCODE belong.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and APPCODE are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the APPCODE value (content).
               The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
               Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
               If omitted, a random value will be generated.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppcodeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an APPCODE in application resource within HuaweiCloud.

        ## Example Usage

        ### Auto generate APPCODE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        test = huaweicloud.dedicatedapig.Appcode("test",
            instance_id=instance_id,
            application_id=application_id)
        ```

        ### Manually configure APPCODE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        app_code = config.require_object("appCode")
        test = huaweicloud.dedicatedapig.Appcode("test",
            instance_id=instance_id,
            application_id=application_id,
            value=app_code)
        ```

        ## Import

        APPCODEs can be imported using related `instance_id`, `application_id` and their `id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/appcode:Appcode test <instance_id>/<application_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param AppcodeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppcodeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppcodeArgs.__new__(AppcodeArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["value"] = value
            __props__.__dict__["created_at"] = None
        super(Appcode, __self__).__init__(
            'huaweicloud:DedicatedApig/appcode:Appcode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'Appcode':
        """
        Get an existing Appcode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of application to which the APPCODE belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the APPCODE.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               and APPCODE belong.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and APPCODE are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the APPCODE value (content).
               The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
               Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
               If omitted, a random value will be generated.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppcodeState.__new__(_AppcodeState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["value"] = value
        return Appcode(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of application to which the APPCODE belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the APPCODE.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        and APPCODE belong.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the application and APPCODE are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the APPCODE value (content).
        The value can contain `64` to `180` characters, starting with a letter, plus sign (+), or slash (/), or digit.
        Only letters, digit and the following special characters are allowed: `+_!@#$%/=`.
        If omitted, a random value will be generated.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "value")

