# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpcChannelArgs', 'VpcChannel']

@pulumi.input_type
class VpcChannelArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 members: pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]],
                 port: pulumi.Input[_builtins.int],
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 http_code: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a VpcChannel resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the VPC channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]] members: Specifies the configuration of the backend servers that bind the VPC channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the host port of the VPC channel.  
               The valid value ranges from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] algorithm: Specifies the distribution algorithm.  
               The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        :param pulumi.Input[_builtins.int] healthy_threshold: Specifies the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `2` to `10`, defaults to `2`.
        :param pulumi.Input[_builtins.str] http_code: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
               
               Required if the `protocol` is **HTTP**.
               
               <a name="vpc_channel_members"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.int] interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `5` to `300`, defaults to `10`.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the VPC channel.  
               The valid types are **ECS** and **EIP**, defaults to **ECS**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the VPC channel.  
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
               format.
        :param pulumi.Input[_builtins.str] path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol for performing health checks on backend servers in the VPC
               channel.
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the VPC channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `2` to `30`, defaults to `5`.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `2` to `10`, defaults to `5`.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "port", port)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_code is not None:
            pulumi.set(__self__, "http_code", http_code)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the VPC channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]]:
        """
        Specifies the configuration of the backend servers that bind the VPC channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the host port of the VPC channel.  
        The valid value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the distribution algorithm.  
        The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `2` to `10`, defaults to `2`.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @_builtins.property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.

        Required if the `protocol` is **HTTP**.

        <a name="vpc_channel_members"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "http_code")

    @http_code.setter
    def http_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "http_code", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `5` to `300`, defaults to `10`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the member type of the VPC channel.  
        The valid types are **ECS** and **EIP**, defaults to **ECS**.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the VPC channel.  
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
        format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol for performing health checks on backend servers in the VPC
        channel.
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the VPC channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `2` to `30`, defaults to `5`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `2` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class _VpcChannelState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 http_code: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering VpcChannel resources.
        :param pulumi.Input[_builtins.str] algorithm: Specifies the distribution algorithm.  
               The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        :param pulumi.Input[_builtins.str] created_at: The time when the VPC channel was created.
        :param pulumi.Input[_builtins.int] healthy_threshold: Specifies the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `2` to `10`, defaults to `2`.
        :param pulumi.Input[_builtins.str] http_code: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
               
               Required if the `protocol` is **HTTP**.
               
               <a name="vpc_channel_members"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the VPC channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `5` to `300`, defaults to `10`.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the VPC channel.  
               The valid types are **ECS** and **EIP**, defaults to **ECS**.
        :param pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]] members: Specifies the configuration of the backend servers that bind the VPC channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the VPC channel.  
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
               format.
        :param pulumi.Input[_builtins.str] path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param pulumi.Input[_builtins.int] port: Specifies the host port of the VPC channel.  
               The valid value ranges from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol for performing health checks on backend servers in the VPC
               channel.
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the VPC channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the VPC channel, supports **Normal** and **Abnormal**.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `2` to `30`, defaults to `5`.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `2` to `10`, defaults to `5`.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_code is not None:
            pulumi.set(__self__, "http_code", http_code)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the distribution algorithm.  
        The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the VPC channel was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `2` to `10`, defaults to `2`.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @_builtins.property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.

        Required if the `protocol` is **HTTP**.

        <a name="vpc_channel_members"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "http_code")

    @http_code.setter
    def http_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "http_code", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the VPC channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `5` to `300`, defaults to `10`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the member type of the VPC channel.  
        The valid types are **ECS** and **EIP**, defaults to **ECS**.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_type", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]]]:
        """
        Specifies the configuration of the backend servers that bind the VPC channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcChannelMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the VPC channel.  
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
        format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the host port of the VPC channel.  
        The valid value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol for performing health checks on backend servers in the VPC
        channel.
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the VPC channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the VPC channel, supports **Normal** and **Abnormal**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `2` to `30`, defaults to `5`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `2` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.type_token("huaweicloud:DedicatedApig/vpcChannel:VpcChannel")
class VpcChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 http_code: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcChannelMemberArgs', 'VpcChannelMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated.

        Manages a VPC channel resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        ecs_id1 = config.require_object("ecsId1")
        ecs_id2 = config.require_object("ecsId2")
        test = huaweicloud.dedicatedapig.VpcChannel("test",
            instance_id=instance_id,
            name=app_name,
            port=8080,
            protocol="HTTPS",
            path="/",
            http_code="201,202,203",
            members=[
                {
                    "id": ecs_id1,
                    "weight": 30,
                },
                {
                    "id": ecs_id2,
                    "weight": 70,
                },
            ])
        ```

        ## Import

        VPC Channels can be imported using their `name` and the ID of the related dedicated instance, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/vpcChannel:VpcChannel test <instance_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: Specifies the distribution algorithm.  
               The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        :param pulumi.Input[_builtins.int] healthy_threshold: Specifies the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `2` to `10`, defaults to `2`.
        :param pulumi.Input[_builtins.str] http_code: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
               
               Required if the `protocol` is **HTTP**.
               
               <a name="vpc_channel_members"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the VPC channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `5` to `300`, defaults to `10`.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the VPC channel.  
               The valid types are **ECS** and **EIP**, defaults to **ECS**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpcChannelMemberArgs', 'VpcChannelMemberArgsDict']]]] members: Specifies the configuration of the backend servers that bind the VPC channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the VPC channel.  
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
               format.
        :param pulumi.Input[_builtins.str] path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param pulumi.Input[_builtins.int] port: Specifies the host port of the VPC channel.  
               The valid value ranges from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol for performing health checks on backend servers in the VPC
               channel.
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the VPC channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `2` to `30`, defaults to `5`.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `2` to `10`, defaults to `5`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated.

        Manages a VPC channel resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        channel_name = config.require_object("channelName")
        ecs_id1 = config.require_object("ecsId1")
        ecs_id2 = config.require_object("ecsId2")
        test = huaweicloud.dedicatedapig.VpcChannel("test",
            instance_id=instance_id,
            name=app_name,
            port=8080,
            protocol="HTTPS",
            path="/",
            http_code="201,202,203",
            members=[
                {
                    "id": ecs_id1,
                    "weight": 30,
                },
                {
                    "id": ecs_id2,
                    "weight": 70,
                },
            ])
        ```

        ## Import

        VPC Channels can be imported using their `name` and the ID of the related dedicated instance, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/vpcChannel:VpcChannel test <instance_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param VpcChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 http_code: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 member_type: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcChannelMemberArgs', 'VpcChannelMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcChannelArgs.__new__(VpcChannelArgs)

            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["healthy_threshold"] = healthy_threshold
            __props__.__dict__["http_code"] = http_code
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["interval"] = interval
            __props__.__dict__["member_type"] = member_type
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["path"] = path
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["unhealthy_threshold"] = unhealthy_threshold
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(VpcChannel, __self__).__init__(
            'huaweicloud:DedicatedApig/vpcChannel:VpcChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
            http_code: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            interval: Optional[pulumi.Input[_builtins.int]] = None,
            member_type: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcChannelMemberArgs', 'VpcChannelMemberArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None,
            unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None) -> 'VpcChannel':
        """
        Get an existing VpcChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: Specifies the distribution algorithm.  
               The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        :param pulumi.Input[_builtins.str] created_at: The time when the VPC channel was created.
        :param pulumi.Input[_builtins.int] healthy_threshold: Specifies the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `2` to `10`, defaults to `2`.
        :param pulumi.Input[_builtins.str] http_code: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
               
               Required if the `protocol` is **HTTP**.
               
               <a name="vpc_channel_members"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the VPC channel
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `5` to `300`, defaults to `10`.
        :param pulumi.Input[_builtins.str] member_type: Specifies the member type of the VPC channel.  
               The valid types are **ECS** and **EIP**, defaults to **ECS**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpcChannelMemberArgs', 'VpcChannelMemberArgsDict']]]] members: Specifies the configuration of the backend servers that bind the VPC channel.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the VPC channel.  
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
               format.
        :param pulumi.Input[_builtins.str] path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param pulumi.Input[_builtins.int] port: Specifies the host port of the VPC channel.  
               The valid value ranges from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol for performing health checks on backend servers in the VPC
               channel.
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the VPC channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the VPC channel, supports **Normal** and **Abnormal**.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `2` to `30`, defaults to `5`.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `2` to `10`, defaults to `5`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcChannelState.__new__(_VpcChannelState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["healthy_threshold"] = healthy_threshold
        __props__.__dict__["http_code"] = http_code
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["interval"] = interval
        __props__.__dict__["member_type"] = member_type
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["unhealthy_threshold"] = unhealthy_threshold
        return VpcChannel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the distribution algorithm.  
        The valid types are **WRR**, **WLC**, **SH** and **URI hashing**, defaults to **WRR**.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the VPC channel was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `2` to `10`, defaults to `2`.
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.

        Required if the `protocol` is **HTTP**.

        <a name="vpc_channel_members"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "http_code")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the VPC channel
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `5` to `300`, defaults to `10`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the member type of the VPC channel.  
        The valid types are **ECS** and **EIP**, defaults to **ECS**.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.VpcChannelMember']]:
        """
        Specifies the configuration of the backend servers that bind the VPC channel.  
        The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the VPC channel.  
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The name must start with a chinese or english letter, and the Chinese characters must be in **UTF-8** or **Unicode**
        format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the host port of the VPC channel.  
        The valid value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the protocol for performing health checks on backend servers in the VPC
        channel.
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the VPC channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the VPC channel, supports **Normal** and **Abnormal**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `2` to `30`, defaults to `5`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `2` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "unhealthy_threshold")

