# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationQuotaAssociateArgs', 'ApplicationQuotaAssociate']

@pulumi.input_type
class ApplicationQuotaAssociateArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]],
                 instance_id: pulumi.Input[_builtins.str],
                 quota_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationQuotaAssociate resource.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]] applications: Specifies the configuration of applications bound to the quota (policy).  
               The applications structure is documented below.
               
               <a name="application_quota_associate_config"></a>
               The `applications` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               quota (policy) belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] quota_id: Specifies the ID of the application quota (policy).  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application quota (policy) is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "quota_id", quota_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]]:
        """
        Specifies the configuration of applications bound to the quota (policy).  
        The applications structure is documented below.

        <a name="application_quota_associate_config"></a>
        The `applications` block supports:
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        quota (policy) belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application quota (policy).  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "quota_id")

    @quota_id.setter
    def quota_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "quota_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application quota (policy) is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ApplicationQuotaAssociateState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quota_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApplicationQuotaAssociate resources.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]] applications: Specifies the configuration of applications bound to the quota (policy).  
               The applications structure is documented below.
               
               <a name="application_quota_associate_config"></a>
               The `applications` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               quota (policy) belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] quota_id: Specifies the ID of the application quota (policy).  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application quota (policy) is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if quota_id is not None:
            pulumi.set(__self__, "quota_id", quota_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]]]:
        """
        Specifies the configuration of applications bound to the quota (policy).  
        The applications structure is documented below.

        <a name="application_quota_associate_config"></a>
        The `applications` block supports:
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationQuotaAssociateApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the application
        quota (policy) belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application quota (policy).  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "quota_id")

    @quota_id.setter
    def quota_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "quota_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application quota (policy) is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:DedicatedApig/applicationQuotaAssociate:ApplicationQuotaAssociate")
class ApplicationQuotaAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplicationQuotaAssociateApplicationArgs', 'ApplicationQuotaAssociateApplicationArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quota_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to bind one or more applications to an application quota (policy) within HuaweiCloud.

        > Please note the following key points before use:<br>1. An application can only be associated with one quota.
           Please ensure that all applications in the script have only one association relationship (if an association
           relationship between an application and a quota is established, the corresponding relationship between the
           application and the original quota should be deleted).<br>2. The action of changing the quota association
           relationship may generate a large number of API calls. Please ensure that the API flow control of the APIG service
           is sufficient.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        quota_id = config.require_object("quotaId")
        associated_application_ids = config.require_object("associatedApplicationIds")
        test = huaweicloud.dedicatedapig.ApplicationQuotaAssociate("test",
            applications=[{
                "id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in associated_application_ids]],
            instance_id=instance_id,
            quota_id=quota_id)
        ```

        ## Import

        Quota associate relationship can be imported using related `instance_id` and `id` (also `quota_id`), separated by

        a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/applicationQuotaAssociate:ApplicationQuotaAssociate test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApplicationQuotaAssociateApplicationArgs', 'ApplicationQuotaAssociateApplicationArgsDict']]]] applications: Specifies the configuration of applications bound to the quota (policy).  
               The applications structure is documented below.
               
               <a name="application_quota_associate_config"></a>
               The `applications` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               quota (policy) belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] quota_id: Specifies the ID of the application quota (policy).  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application quota (policy) is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationQuotaAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to bind one or more applications to an application quota (policy) within HuaweiCloud.

        > Please note the following key points before use:<br>1. An application can only be associated with one quota.
           Please ensure that all applications in the script have only one association relationship (if an association
           relationship between an application and a quota is established, the corresponding relationship between the
           application and the original quota should be deleted).<br>2. The action of changing the quota association
           relationship may generate a large number of API calls. Please ensure that the API flow control of the APIG service
           is sufficient.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        quota_id = config.require_object("quotaId")
        associated_application_ids = config.require_object("associatedApplicationIds")
        test = huaweicloud.dedicatedapig.ApplicationQuotaAssociate("test",
            applications=[{
                "id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in associated_application_ids]],
            instance_id=instance_id,
            quota_id=quota_id)
        ```

        ## Import

        Quota associate relationship can be imported using related `instance_id` and `id` (also `quota_id`), separated by

        a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/applicationQuotaAssociate:ApplicationQuotaAssociate test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationQuotaAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationQuotaAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplicationQuotaAssociateApplicationArgs', 'ApplicationQuotaAssociateApplicationArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quota_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationQuotaAssociateArgs.__new__(ApplicationQuotaAssociateArgs)

            if applications is None and not opts.urn:
                raise TypeError("Missing required property 'applications'")
            __props__.__dict__["applications"] = applications
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if quota_id is None and not opts.urn:
                raise TypeError("Missing required property 'quota_id'")
            __props__.__dict__["quota_id"] = quota_id
            __props__.__dict__["region"] = region
        super(ApplicationQuotaAssociate, __self__).__init__(
            'huaweicloud:DedicatedApig/applicationQuotaAssociate:ApplicationQuotaAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplicationQuotaAssociateApplicationArgs', 'ApplicationQuotaAssociateApplicationArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            quota_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApplicationQuotaAssociate':
        """
        Get an existing ApplicationQuotaAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApplicationQuotaAssociateApplicationArgs', 'ApplicationQuotaAssociateApplicationArgsDict']]]] applications: Specifies the configuration of applications bound to the quota (policy).  
               The applications structure is documented below.
               
               <a name="application_quota_associate_config"></a>
               The `applications` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               quota (policy) belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] quota_id: Specifies the ID of the application quota (policy).  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application quota (policy) is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationQuotaAssociateState.__new__(_ApplicationQuotaAssociateState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["quota_id"] = quota_id
        __props__.__dict__["region"] = region
        return ApplicationQuotaAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Sequence['outputs.ApplicationQuotaAssociateApplication']]:
        """
        Specifies the configuration of applications bound to the quota (policy).  
        The applications structure is documented below.

        <a name="application_quota_associate_config"></a>
        The `applications` block supports:
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        quota (policy) belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application quota (policy).  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "quota_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the application quota (policy) is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

