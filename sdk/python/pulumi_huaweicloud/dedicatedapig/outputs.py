# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApiBackendParam',
    'ApiFuncGraph',
    'ApiFuncGraphPolicy',
    'ApiFuncGraphPolicyBackendParam',
    'ApiFuncGraphPolicyCondition',
    'ApiMock',
    'ApiMockPolicy',
    'ApiMockPolicyBackendParam',
    'ApiMockPolicyCondition',
    'ApiPublishmentHistory',
    'ApiRequestParam',
    'ApiWeb',
    'ApiWebPolicy',
    'ApiWebPolicyBackendParam',
    'ApiWebPolicyCondition',
    'ApplicationQuotaAssociateApplication',
    'ChannelHealthCheck',
    'ChannelMember',
    'ChannelMemberGroup',
    'ChannelMicroservice',
    'ChannelMicroserviceCceConfig',
    'ChannelMicroserviceCseConfig',
    'CustomAuthorizerIdentity',
    'GroupEnvironment',
    'GroupEnvironmentVariable',
    'GroupUrlDomain',
    'InstanceCustomIngressPort',
    'ResponseRule',
    'ResponseRuleHeader',
    'ThrottlingPolicyAppThrottle',
    'ThrottlingPolicyUserThrottle',
    'VpcChannelMember',
    'GetAclPoliciesPolicyResult',
    'GetApiAssociatedAclPoliciesPolicyResult',
    'GetApiAssociatedApplicationsApplicationResult',
    'GetApiAssociatedPluginsPluginResult',
    'GetApiAssociatedSignaturesSignatureResult',
    'GetApiAssociatedThrottlingPoliciesPolicyResult',
    'GetApiAssociatedThrottlingPoliciesPolicyAppThrottleResult',
    'GetApiAssociatedThrottlingPoliciesPolicyUserThrottleResult',
    'GetApiBackendParamResult',
    'GetApiBasicConfigurationsConfigurationResult',
    'GetApiFuncGraphResult',
    'GetApiFuncGraphPolicyResult',
    'GetApiFuncGraphPolicyBackendParamResult',
    'GetApiFuncGraphPolicyConditionResult',
    'GetApiMockResult',
    'GetApiMockPolicyResult',
    'GetApiMockPolicyBackendParamResult',
    'GetApiMockPolicyConditionResult',
    'GetApiRequestParamResult',
    'GetApiWebResult',
    'GetApiWebPolicyResult',
    'GetApiWebPolicyBackendParamResult',
    'GetApiWebPolicyConditionResult',
    'GetAppcodesAppcodeResult',
    'GetApplicationQuotasQuotaResult',
    'GetApplicationsApplicationResult',
    'GetAvailabilityZonesAvailabilityZoneResult',
    'GetAvailabilityZonesAvailabilityZoneLocalNameResult',
    'GetChannelsVpcChannelResult',
    'GetChannelsVpcChannelMemberGroupResult',
    'GetChannelsVpcChannelMemberGroupMicroserviceLabelResult',
    'GetCustomAuthorizersAuthorizerResult',
    'GetCustomAuthorizersAuthorizerIdentityResult',
    'GetEndpointConnectionsConnectionResult',
    'GetEnvironmentVariablesVariableResult',
    'GetEnvironmentsEnvironmentResult',
    'GetGroupsGroupResult',
    'GetGroupsGroupEnvironmentResult',
    'GetGroupsGroupEnvironmentVariableResult',
    'GetGroupsGroupUrlDomainResult',
    'GetInstanceFeaturesFeatureResult',
    'GetInstanceQuotasQuotaResult',
    'GetInstanceSslCertificatesCertificateResult',
    'GetInstancesFilterInstanceResult',
    'GetInstancesFilterInstanceTagResult',
    'GetInstancesFilterMatchResult',
    'GetInstancesFilterTagResult',
    'GetInstancesInstanceResult',
    'GetOrchestrationRuleAssociatedApisApiResult',
    'GetOrchestrationRulesRuleResult',
    'GetPluginsPluginResult',
    'GetSignaturesSignatureResult',
    'GetThrottlingPoliciesPolicyResult',
    'GetThrottlingPoliciesPolicyAppThrottleResult',
    'GetThrottlingPoliciesPolicyUserThrottleResult',
]

@pulumi.output_type
class ApiBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 system_param_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraph(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraph. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_urn: _builtins.str,
                 authorizer_id: Optional[_builtins.str] = None,
                 function_alias_urn: Optional[_builtins.str] = None,
                 invocation_type: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 request_protocol: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str function_urn: Specifies the URN of the FunctionGraph function.
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param _builtins.str function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param _builtins.str invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
               
               > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        :param _builtins.str network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
               
               Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        :param _builtins.str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param _builtins.int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param _builtins.str version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[_builtins.str]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[_builtins.str]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationMode":
            suggest = "invocation_mode"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiFuncGraphPolicyCondition'],
                 function_urn: _builtins.str,
                 name: _builtins.str,
                 authorizer_id: Optional[_builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']] = None,
                 effective_mode: Optional[_builtins.str] = None,
                 function_alias_urn: Optional[_builtins.str] = None,
                 invocation_mode: Optional[_builtins.str] = None,
                 invocation_type: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 request_protocol: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param Sequence['ApiFuncGraphPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param _builtins.str function_urn: Specifies the URN of the FunctionGraph function.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param Sequence['ApiFuncGraphPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param _builtins.str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param _builtins.str function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param _builtins.str invocation_mode: The invocation mode of the FunctionGraph function.
        :param _builtins.str invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
               
               > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        :param _builtins.str network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
               
               Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        :param _builtins.str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param _builtins.int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param _builtins.str version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiFuncGraphPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[_builtins.str]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[_builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[_builtins.str]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 system_param_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraphPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 frontend_authorizer_name: Optional[_builtins.str] = None,
                 mapped_param_location: Optional[_builtins.str] = None,
                 mapped_param_name: Optional[_builtins.str] = None,
                 param_name: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None,
                 sys_name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param _builtins.str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param _builtins.str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param _builtins.str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param _builtins.str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param _builtins.str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param _builtins.str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[_builtins.str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[_builtins.str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[_builtins.str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiMock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizer_id: Optional[_builtins.str] = None,
                 response: Optional[_builtins.str] = None,
                 status_code: Optional[_builtins.int] = None):
        """
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param _builtins.str response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.int status_code: Specifies the custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[_builtins.str]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[_builtins.int]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiMockPolicyCondition'],
                 name: _builtins.str,
                 authorizer_id: Optional[_builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiMockPolicyBackendParam']] = None,
                 effective_mode: Optional[_builtins.str] = None,
                 response: Optional[_builtins.str] = None,
                 status_code: Optional[_builtins.int] = None):
        """
        :param Sequence['ApiMockPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param Sequence['ApiMockPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param _builtins.str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param _builtins.str response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.int status_code: Specifies the custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiMockPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiMockPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[_builtins.str]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[_builtins.int]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 system_param_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiMockPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 frontend_authorizer_name: Optional[_builtins.str] = None,
                 mapped_param_location: Optional[_builtins.str] = None,
                 mapped_param_name: Optional[_builtins.str] = None,
                 param_name: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None,
                 sys_name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param _builtins.str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param _builtins.str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param _builtins.str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param _builtins.str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param _builtins.str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param _builtins.str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[_builtins.str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[_builtins.str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[_builtins.str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiPublishmentHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiPublishmentHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 version_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of the current publishment.
        :param _builtins.str version_id: Specifies the version ID of the current publishment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the current publishment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[_builtins.str]:
        """
        Specifies the version ID of the current publishment.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validEnable":
            suggest = "valid_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 default: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 enumeration: Optional[_builtins.str] = None,
                 example: Optional[_builtins.str] = None,
                 location: Optional[_builtins.str] = None,
                 maximum: Optional[_builtins.int] = None,
                 minimum: Optional[_builtins.int] = None,
                 orchestrations: Optional[Sequence[_builtins.str]] = None,
                 passthrough: Optional[_builtins.bool] = None,
                 required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 valid_enable: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str default: Specifies the default value of the request parameter.
               The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str enumeration: Specifies the enumerated value(s).
               Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        :param _builtins.str example: Specifies the example value of the request parameter.  
               The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param _builtins.int maximum: Specifies the maximum value or size of the request parameter.
        :param _builtins.int minimum: Specifies the minimum value or size of the request parameter.
               
               > For string type, The `maximum` and `minimum` means size. For number type, they means value.
        :param Sequence[_builtins.str] orchestrations: Specifies the list of orchestration rule IDs which parameter used.  
               The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
               list elements.
               
               > 1. The **none_value** rule has the highest priority, a maximum of one **none_value** rule can be bound.<br>2. The
               **default** rule has the lowest priority, a maximum of one **default** rule can be bound.<br>3. Only one parameter
               of each API can be bound with unique orchestration rules.
               
               <a name="apig_api_backend_params"></a>
               The `backend_params` block supports:
        :param _builtins.bool passthrough: Specifies whether to transparently transfer the parameter.
        :param _builtins.bool required: Specifies whether the request parameter is required.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param _builtins.int valid_enable: Specifies whether to enable the parameter validation.
               + **1**: enable
               + **2**: disable (by default)
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[_builtins.str]:
        """
        Specifies the default value of the request parameter.
        The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enumeration(self) -> Optional[_builtins.str]:
        """
        Specifies the enumerated value(s).
        Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        """
        return pulumi.get(self, "enumeration")

    @_builtins.property
    @pulumi.getter
    def example(self) -> Optional[_builtins.str]:
        """
        Specifies the example value of the request parameter.  
        The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "example")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum value or size of the request parameter.
        """
        return pulumi.get(self, "maximum")

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum value or size of the request parameter.

        > For string type, The `maximum` and `minimum` means size. For number type, they means value.
        """
        return pulumi.get(self, "minimum")

    @_builtins.property
    @pulumi.getter
    def orchestrations(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of orchestration rule IDs which parameter used.  
        The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
        list elements.

        > 1. The **none_value** rule has the highest priority, a maximum of one **none_value** rule can be bound.<br>2. The
        **default** rule has the lowest priority, a maximum of one **default** rule can be bound.<br>3. Only one parameter
        of each API can be bound with unique orchestration rules.

        <a name="apig_api_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "orchestrations")

    @_builtins.property
    @pulumi.getter
    def passthrough(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the request parameter is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[_builtins.int]:
        """
        Specifies whether to enable the parameter validation.
        + **1**: enable
        + **2**: disable (by default)
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class ApiWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "sslEnable":
            suggest = "ssl_enable"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 authorizer_id: Optional[_builtins.str] = None,
                 backend_address: Optional[_builtins.str] = None,
                 host_header: Optional[_builtins.str] = None,
                 request_method: Optional[_builtins.str] = None,
                 request_protocol: Optional[_builtins.str] = None,
                 retry_count: Optional[_builtins.int] = None,
                 ssl_enable: Optional[_builtins.bool] = None,
                 timeout: Optional[_builtins.int] = None,
                 vpc_channel_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param _builtins.str backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param _builtins.str host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param _builtins.str request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param _builtins.str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param _builtins.int retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
               
               > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
               servers in the channel.
        :param _builtins.bool ssl_enable: Specifies whether to enable two-way authentication, defaults to **false**.
        :param _builtins.int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param _builtins.str vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[_builtins.str]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[_builtins.str]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[_builtins.str]:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[_builtins.int]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable two-way authentication, defaults to **false**.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[_builtins.str]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiWebPolicyCondition'],
                 name: _builtins.str,
                 path: _builtins.str,
                 request_method: _builtins.str,
                 authorizer_id: Optional[_builtins.str] = None,
                 backend_address: Optional[_builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiWebPolicyBackendParam']] = None,
                 effective_mode: Optional[_builtins.str] = None,
                 host_header: Optional[_builtins.str] = None,
                 request_protocol: Optional[_builtins.str] = None,
                 retry_count: Optional[_builtins.int] = None,
                 timeout: Optional[_builtins.int] = None,
                 vpc_channel_id: Optional[_builtins.str] = None):
        """
        :param Sequence['ApiWebPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param _builtins.str request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param _builtins.str authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param _builtins.str backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param Sequence['ApiWebPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param _builtins.str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param _builtins.str host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param _builtins.str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param _builtins.int retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
               
               > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
               servers in the channel.
        :param _builtins.int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param _builtins.str vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiWebPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[_builtins.str]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiWebPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[_builtins.str]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[_builtins.int]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[_builtins.str]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 system_param_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param _builtins.str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param _builtins.str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiWebPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 frontend_authorizer_name: Optional[_builtins.str] = None,
                 mapped_param_location: Optional[_builtins.str] = None,
                 mapped_param_name: Optional[_builtins.str] = None,
                 param_name: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None,
                 sys_name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param _builtins.str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param _builtins.str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param _builtins.str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param _builtins.str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param _builtins.str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param _builtins.str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param _builtins.str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param _builtins.str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[_builtins.str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[_builtins.str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[_builtins.str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[_builtins.str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApplicationQuotaAssociateApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindTime":
            suggest = "bind_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationQuotaAssociateApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationQuotaAssociateApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationQuotaAssociateApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 bind_time: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the application ID bound to the application quota.
        :param _builtins.str bind_time: The binding time, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        if bind_time is not None:
            pulumi.set(__self__, "bind_time", bind_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the application ID bound to the application quota.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> Optional[_builtins.str]:
        """
        The binding time, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")


@pulumi.output_type
class ChannelHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdAbnormal":
            suggest = "threshold_abnormal"
        elif key == "thresholdNormal":
            suggest = "threshold_normal"
        elif key == "enableClientSsl":
            suggest = "enable_client_ssl"
        elif key == "httpCodes":
            suggest = "http_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: _builtins.int,
                 protocol: _builtins.str,
                 threshold_abnormal: _builtins.int,
                 threshold_normal: _builtins.int,
                 timeout: _builtins.int,
                 enable_client_ssl: Optional[_builtins.bool] = None,
                 http_codes: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `1` to `300`.
        :param _builtins.str protocol: Specifies the microservice for performing health check on backend servers.  
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param _builtins.int threshold_abnormal: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `1` to `10`.
        :param _builtins.int threshold_normal: Specifies the the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `1` to `10`.
        :param _builtins.int timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `1` to `30`.
        :param _builtins.bool enable_client_ssl: Specifies whether to enable two-way authentication.  
               Defaults to **false**.
        :param _builtins.str http_codes: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
        :param _builtins.str method: Specifies the request method for health check.  
               The valid values are **GET** and **HEAD**.
        :param _builtins.str path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param _builtins.int port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param _builtins.int status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "threshold_abnormal", threshold_abnormal)
        pulumi.set(__self__, "threshold_normal", threshold_normal)
        pulumi.set(__self__, "timeout", timeout)
        if enable_client_ssl is not None:
            pulumi.set(__self__, "enable_client_ssl", enable_client_ssl)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `1` to `300`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the microservice for performing health check on backend servers.  
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="thresholdAbnormal")
    def threshold_abnormal(self) -> _builtins.int:
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `1` to `10`.
        """
        return pulumi.get(self, "threshold_abnormal")

    @_builtins.property
    @pulumi.getter(name="thresholdNormal")
    def threshold_normal(self) -> _builtins.int:
        """
        Specifies the the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `1` to `10`.
        """
        return pulumi.get(self, "threshold_normal")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `1` to `30`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="enableClientSsl")
    def enable_client_ssl(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable two-way authentication.  
        Defaults to **false**.
        """
        return pulumi.get(self, "enable_client_ssl")

    @_builtins.property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[_builtins.str]:
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.
        """
        return pulumi.get(self, "http_codes")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        Specifies the request method for health check.  
        The valid values are **GET** and **HEAD**.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ChannelMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "isBackup":
            suggest = "is_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 host: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 is_backup: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 status: Optional[_builtins.int] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Specifies the IP address each backend servers.
               If omitted, means that all backend servers are both in one group.
        :param _builtins.str host: Specifies the IP address each backend servers.
        :param _builtins.str id: Specifies the ECS ID for each backend servers.
               
               > One of the parameter `member.host` and `member.id` must be set if `member_type` is **ecs**.
               The parameter `member.host` and `member.id` are alternative.
        :param _builtins.bool is_backup: Specifies whether this member is the backup member.  
               Defaults to **false**.
        :param _builtins.str name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param _builtins.int port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param _builtins.int status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        :param _builtins.int weight: Specifies the weight of current backend server.  
               The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address each backend servers.
        If omitted, means that all backend servers are both in one group.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address each backend servers.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ECS ID for each backend servers.

        > One of the parameter `member.host` and `member.id` must be set if `member_type` is **ecs**.
        The parameter `member.host` and `member.id` are alternative.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this member is the backup member.  
        Defaults to **false**.
        """
        return pulumi.get(self, "is_backup")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChannelMemberGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "microserviceLabels":
            suggest = "microservice_labels"
        elif key == "microservicePort":
            suggest = "microservice_port"
        elif key == "microserviceVersion":
            suggest = "microservice_version"
        elif key == "referenceVpcChannelId":
            suggest = "reference_vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelMemberGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelMemberGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelMemberGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 microservice_labels: Optional[Mapping[str, _builtins.str]] = None,
                 microservice_port: Optional[_builtins.int] = None,
                 microservice_version: Optional[_builtins.str] = None,
                 reference_vpc_channel_id: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param _builtins.str description: Specifies the description of the member group.
        :param Mapping[str, _builtins.str] microservice_labels: Specifies the microservice tags of the backend server group.
        :param _builtins.int microservice_port: Specifies the microservice port of the backend server group.  
               The valid value ranges from `0` to `65,535`.
        :param _builtins.str microservice_version: Specifies the microservice version of the backend server group.
        :param _builtins.str reference_vpc_channel_id: Specifies the ID of the reference load balance channel.
               This parameter is only available if the `type` is **reference**.
               
               <a name="channel_members"></a>
               The `member` block supports:
        :param _builtins.int weight: Specifies the weight of current backend server.  
               The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microservice_labels is not None:
            pulumi.set(__self__, "microservice_labels", microservice_labels)
        if microservice_port is not None:
            pulumi.set(__self__, "microservice_port", microservice_port)
        if microservice_version is not None:
            pulumi.set(__self__, "microservice_version", microservice_version)
        if reference_vpc_channel_id is not None:
            pulumi.set(__self__, "reference_vpc_channel_id", reference_vpc_channel_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the member group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @_builtins.property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> Optional[_builtins.int]:
        """
        Specifies the microservice port of the backend server group.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "microservice_port")

    @_builtins.property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> Optional[_builtins.str]:
        """
        Specifies the microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @_builtins.property
    @pulumi.getter(name="referenceVpcChannelId")
    def reference_vpc_channel_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the reference load balance channel.
        This parameter is only available if the `type` is **reference**.

        <a name="channel_members"></a>
        The `member` block supports:
        """
        return pulumi.get(self, "reference_vpc_channel_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChannelMicroservice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cceConfig":
            suggest = "cce_config"
        elif key == "cseConfig":
            suggest = "cse_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelMicroservice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelMicroservice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelMicroservice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cce_config: Optional['outputs.ChannelMicroserviceCceConfig'] = None,
                 cse_config: Optional['outputs.ChannelMicroserviceCseConfig'] = None):
        """
        :param 'ChannelMicroserviceCceConfigArgs' cce_config: Specifies the CCE microservice details.  
               The object structure is documented below.
               
               <a name="microservice_cce_config"></a>
               The `cce_config` block supports:
        :param 'ChannelMicroserviceCseConfigArgs' cse_config: schema:Internal; The CSE microservice details.
        """
        if cce_config is not None:
            pulumi.set(__self__, "cce_config", cce_config)
        if cse_config is not None:
            pulumi.set(__self__, "cse_config", cse_config)

    @_builtins.property
    @pulumi.getter(name="cceConfig")
    def cce_config(self) -> Optional['outputs.ChannelMicroserviceCceConfig']:
        """
        Specifies the CCE microservice details.  
        The object structure is documented below.

        <a name="microservice_cce_config"></a>
        The `cce_config` block supports:
        """
        return pulumi.get(self, "cce_config")

    @_builtins.property
    @pulumi.getter(name="cseConfig")
    def cse_config(self) -> Optional['outputs.ChannelMicroserviceCseConfig']:
        """
        schema:Internal; The CSE microservice details.
        """
        return pulumi.get(self, "cse_config")


@pulumi.output_type
class ChannelMicroserviceCceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "workloadType":
            suggest = "workload_type"
        elif key == "labelKey":
            suggest = "label_key"
        elif key == "labelValue":
            suggest = "label_value"
        elif key == "workloadName":
            suggest = "workload_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelMicroserviceCceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelMicroserviceCceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelMicroserviceCceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 namespace: _builtins.str,
                 workload_type: _builtins.str,
                 label_key: Optional[_builtins.str] = None,
                 label_value: Optional[_builtins.str] = None,
                 workload_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_id: Specifies the CCE cluster ID.
        :param _builtins.str namespace: Specifies the namespace, such as the default namespace for CCE cluster: **default**.
        :param _builtins.str workload_type: Specifies the workload type.
               + **deployment**: Stateless load.
               + **statefulset**: Stateful load.
               + **daemonset**: Daemons set.
        :param _builtins.str label_key: Specifies the service label key.
        :param _builtins.str label_value: Specifies the service label value.
        :param _builtins.str workload_name: The workload name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "workload_type", workload_type)
        if label_key is not None:
            pulumi.set(__self__, "label_key", label_key)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)
        if workload_name is not None:
            pulumi.set(__self__, "workload_name", workload_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the CCE cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace, such as the default namespace for CCE cluster: **default**.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        Specifies the workload type.
        + **deployment**: Stateless load.
        + **statefulset**: Stateful load.
        + **daemonset**: Daemons set.
        """
        return pulumi.get(self, "workload_type")

    @_builtins.property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> Optional[_builtins.str]:
        """
        Specifies the service label key.
        """
        return pulumi.get(self, "label_key")

    @_builtins.property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[_builtins.str]:
        """
        Specifies the service label value.
        """
        return pulumi.get(self, "label_value")

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> Optional[_builtins.str]:
        """
        The workload name.
        """
        return pulumi.get(self, "workload_name")


@pulumi.output_type
class ChannelMicroserviceCseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineId":
            suggest = "engine_id"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelMicroserviceCseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelMicroserviceCseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelMicroserviceCseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_id: _builtins.str,
                 service_id: _builtins.str):
        """
        :param _builtins.str engine_id: schema:Internal; The microservice engine ID.
        :param _builtins.str service_id: schema:Internal; The microservice ID.
        """
        pulumi.set(__self__, "engine_id", engine_id)
        pulumi.set(__self__, "service_id", service_id)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> _builtins.str:
        """
        schema:Internal; The microservice engine ID.
        """
        return pulumi.get(self, "engine_id")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        schema:Internal; The microservice ID.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class CustomAuthorizerIdentity(dict):
    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 validation: Optional[_builtins.str] = None):
        """
        :param _builtins.str location: Specifies the parameter location, which support **HEADER** and **QUERY**.
        :param _builtins.str name: Specifies the name of the parameter to be verified.
               The parameter includes front-end and back-end parameters.
        :param _builtins.str validation: Specifies the parameter verification expression.
               If omitted, the custom authorizer will not perform verification.
               The valid value is range form `1` to `2,048`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the parameter location, which support **HEADER** and **QUERY**.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the parameter to be verified.
        The parameter includes front-end and back-end parameters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def validation(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter verification expression.
        If omitted, the custom authorizer will not perform verification.
        The valid value is range form `1` to `2,048`.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GroupEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: _builtins.str,
                 variables: Sequence['outputs.GroupEnvironmentVariable']):
        """
        :param _builtins.str environment_id: Specifies the environment ID of the associated group.
               
               <a name="group_environment_variable"></a>
               The `variable` block supports:
        :param Sequence['GroupEnvironmentVariableArgs'] variables: Specifies an array of one or more environment variables.  
               The object structure is documented below.
               
               > The environment variables of different groups are isolated in the same environment.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        Specifies the environment ID of the associated group.

        <a name="group_environment_variable"></a>
        The `variable` block supports:
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GroupEnvironmentVariable']:
        """
        Specifies an array of one or more environment variables.  
        The object structure is documented below.

        > The environment variables of different groups are isolated in the same environment.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GroupEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableId":
            suggest = "variable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 variable_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param _builtins.str value: Specifies the variable value.  
               The valid length is limited from `1` to `255` characters.
               Only letters, digits and special characters (_-/.:) are allowed.
               
               > **NOTE:** The variable value will be displayed in plain text on the console.
        :param _builtins.str id: The variable ID.
        :param _builtins.str variable_id: schema: Deprecated; The ID of the variable that the group has.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the variable value.  
        The valid length is limited from `1` to `255` characters.
        Only letters, digits and special characters (_-/.:) are allowed.

        > **NOTE:** The variable value will be displayed in plain text on the console.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[_builtins.str]:
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
        return pulumi.get(self, "variable_id")


@pulumi.output_type
class GroupUrlDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHttpRedirectToHttps":
            suggest = "is_http_redirect_to_https"
        elif key == "minSslVersion":
            suggest = "min_ssl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupUrlDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 is_http_redirect_to_https: Optional[_builtins.bool] = None,
                 min_ssl_version: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param _builtins.bool is_http_redirect_to_https: Whether to enable redirection from `HTTP` to `HTTPS`.
        :param _builtins.str min_ssl_version: The minimum SSL protocol version.
               + **TLSv1.1**
               + **TLSv1.2**
        """
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[_builtins.bool]:
        """
        Whether to enable redirection from `HTTP` to `HTTPS`.
        """
        return pulumi.get(self, "is_http_redirect_to_https")

    @_builtins.property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[_builtins.str]:
        """
        The minimum SSL protocol version.
        + **TLSv1.1**
        + **TLSv1.2**
        """
        return pulumi.get(self, "min_ssl_version")


@pulumi.output_type
class InstanceCustomIngressPort(dict):
    def __init__(__self__, *,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.int port: Specified port of the custom ingress port.
               The valid value is range form `1,024` to `49,151`.
               
               > Currently, in the same dedicated instance, a maximum of `40` custom ingress ports can be created,
               and one port can only support one protocol.
        :param _builtins.str protocol: Specified protocol of the custom ingress port.  
               The valid values are as follows:
               + **HTTP**
               + **HTTPS**
        :param _builtins.str id: The ID of the custom ingress port.
        :param _builtins.str status: The current status of the custom ingress port.
               + **normal**
               + **abnormal**
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specified port of the custom ingress port.
        The valid value is range form `1,024` to `49,151`.

        > Currently, in the same dedicated instance, a maximum of `40` custom ingress ports can be created,
        and one port can only support one protocol.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specified protocol of the custom ingress port.  
        The valid values are as follows:
        + **HTTP**
        + **HTTPS**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the custom ingress port.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the custom ingress port.
        + **normal**
        + **abnormal**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ResponseRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorType":
            suggest = "error_type"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: _builtins.str,
                 error_type: _builtins.str,
                 headers: Optional[Sequence['outputs.ResponseRuleHeader']] = None,
                 status_code: Optional[_builtins.int] = None):
        """
        :param _builtins.str body: Specifies the body template of the API response rule, e.g.
               `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        :param _builtins.str error_type: Specifies the error type of the API response rule.
               The valid values and the related default status code are as follows:
               + **ACCESS_DENIED**: (**403**) Access denied.
               + **AUTH_FAILURE**: (**401**) Authentication failed.
               + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
               + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
               + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
               + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
               + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
               + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
               + **NOT_FOUND**: (**404**) No API is found.
               + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
               + **THROTTLED**: (**429**) The request was rejected due to request throttling.
               + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
               + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
               + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
               + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
               + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
               + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        :param Sequence['ResponseRuleHeaderArgs'] headers: Specifies the configuration of the custom response headers.  
               The headers structure is documented below.
               
               <a name="custom_response_rule_headers"></a>
               The `headers` block supports:
        :param _builtins.int status_code: Specifies the HTTP status code of the API response rule.
               The valid value is range from `200` to `599`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "error_type", error_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def body(self) -> _builtins.str:
        """
        Specifies the body template of the API response rule, e.g.
        `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="errorType")
    def error_type(self) -> _builtins.str:
        """
        Specifies the error type of the API response rule.
        The valid values and the related default status code are as follows:
        + **ACCESS_DENIED**: (**403**) Access denied.
        + **AUTH_FAILURE**: (**401**) Authentication failed.
        + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
        + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
        + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
        + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
        + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
        + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
        + **NOT_FOUND**: (**404**) No API is found.
        + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
        + **THROTTLED**: (**429**) The request was rejected due to request throttling.
        + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
        + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
        + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
        + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
        + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
        + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        """
        return pulumi.get(self, "error_type")

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ResponseRuleHeader']]:
        """
        Specifies the configuration of the custom response headers.  
        The headers structure is documented below.

        <a name="custom_response_rule_headers"></a>
        The `headers` block supports:
        """
        return pulumi.get(self, "headers")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[_builtins.int]:
        """
        Specifies the HTTP status code of the API response rule.
        The valid value is range from `200` to `599`.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ResponseRuleHeader(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key name of the response header.
               The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        :param _builtins.str value: Specifies the value for the specified response header key.
               The valid length is limited from `1` to `1,024`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key name of the response header.
        The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value for the specified response header key.
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ThrottlingPolicyAppThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyAppThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 throttling_object_name: Optional[_builtins.str] = None):
        """
        :param _builtins.int max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param _builtins.str throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param _builtins.str id: ID of the special user/application throttling policy.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[_builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class ThrottlingPolicyUserThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyUserThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 throttling_object_name: Optional[_builtins.str] = None):
        """
        :param _builtins.int max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param _builtins.str throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param _builtins.str id: ID of the special user/application throttling policy.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[_builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class VpcChannelMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcChannelMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcChannelMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcChannelMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies the ECS ID for each backend servers.
               Required if the `member_type` is **ECS**.
               This parameter and `ip_address` are alternative.
        :param _builtins.str ip_address: Specifies the IP address each backend servers.
               Required if the `member_type` is **EIP**.
        :param _builtins.int weight: Specifies the backend server weight.
               The valid value ranges from `1` to `100`, defaults to `1`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ECS ID for each backend servers.
        Required if the `member_type` is **ECS**.
        This parameter and `ip_address` are alternative.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address each backend servers.
        Required if the `member_type` is **EIP**.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Specifies the backend server weight.
        The valid value ranges from `1` to `100`, defaults to `1`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_num: _builtins.int,
                 entity_type: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str entity_type: Specifies the entity type of the ACL policy to be queried.  
               The valid values are as follows:
               + **IP**
               + **DOMAIN**
               + **DOMAIN_ID**
        :param _builtins.str id: The ID of the ACL policy.
        :param _builtins.str name: Specifies the name of the ACL policy to be queried.
        :param _builtins.str type: Specifies the type of the ACL policy to be queried.  
               The valid values are as follows:
               + **PERMIT**: The whitelist type Strategies.
               + **DENY**: The blacklist type Strategies.
        :param _builtins.str updated_at: The latest update time of the policy.
        :param _builtins.str value: The value of the ACL policy.
        """
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        Specifies the entity type of the ACL policy to be queried.  
        The valid values are as follows:
        + **IP**
        + **DOMAIN**
        + **DOMAIN_ID**
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ACL policy to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the ACL policy to be queried.  
        The valid values are as follows:
        + **PERMIT**: The whitelist type Strategies.
        + **DENY**: The blacklist type Strategies.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the policy.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the ACL policy.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiAssociatedAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 entity_type: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the ACL policy is bound to the API.
        :param _builtins.str entity_type: Specifies the entity type of the ACL policy.
        :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str id: The ID of the ACL policy.
        :param _builtins.str name: Specifies the name of the ACL policy.
        :param _builtins.str type: Specifies the type of the ACL policy.
        :param _builtins.str value: One or more objects from which the access will be controlled.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the ACL policy is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        Specifies the entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the ACL policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        One or more objects from which the access will be controlled.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiAssociatedApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the application is bound to the API.
        :param _builtins.str description: The description of the application.
        :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str name: Specifies the name of the application.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the application is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiAssociatedPluginsPluginResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 content: _builtins.str,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the plugin is bound to the API.
        :param _builtins.str content: The configuration details for the plugin.
        :param _builtins.str description: The description of the plugin.
        :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str id: The ID of the plugin.
        :param _builtins.str name: Specifies the name of the plugin.
        :param _builtins.str type: Specifies the type of the plugin.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the plugin is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The configuration details for the plugin.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the plugin.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the plugin.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the plugin.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiAssociatedSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 secret: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the signature is bound to the API.
        :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str id: The ID of the signature.
        :param _builtins.str key: The signature key.
        :param _builtins.str name: Specifies the name of the signature.
        :param _builtins.str secret: The signature secret.
        :param _builtins.str type: Specifies the type of the signature.  
               The valid values are as follows:
               + **basic**: Basic auth type.
               + **hmac**: HMAC type.
               + **aes**: AES type
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the signature is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The signature key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the signature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        """
        The signature secret.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the signature.  
        The valid values are as follows:
        + **basic**: Basic auth type.
        + **hmac**: HMAC type.
        + **aes**: AES type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiAssociatedThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetApiAssociatedThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 max_app_requests: _builtins.int,
                 max_ip_requests: _builtins.int,
                 max_user_requests: _builtins.int,
                 name: _builtins.str,
                 period: _builtins.int,
                 period_unit: _builtins.str,
                 type: _builtins.str,
                 user_throttles: Sequence['outputs.GetApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetApiAssociatedThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
               The app_throttles structure is documented below.
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the throttling policy is bound to the API, in RFC3339 format.
        :param _builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param _builtins.str description: The description of the throttling policy.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param _builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param _builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param _builtins.str name: Specifies the name of the throttling policy.
        :param _builtins.int period: The period of time for limiting the number of API calls.
        :param _builtins.str period_unit: Specifies the time unit for limiting the number of API calls.  
               The valid values are **SECOND**, **MINUTE**, **HOUR** and **DAY**.
        :param _builtins.str type: Specifies the type of the throttling policy.  
               The valid values are as follows:
               + **API-based**: limiting the maximum number of times a single API bound to the policy can be called within the
               specified period.
               + **API-shared**: limiting the maximum number of times all APIs bound to the policy can be called within the specified
               period.
        :param Sequence['GetApiAssociatedThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
               The user_throttles structure is documented below.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @_builtins.property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetApiAssociatedThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        The app_throttles structure is documented below.
        """
        return pulumi.get(self, "app_throttles")

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the throttling policy is bound to the API, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the throttling policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @_builtins.property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @_builtins.property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        Specifies the time unit for limiting the number of API calls.  
        The valid values are **SECOND**, **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the throttling policy.  
        The valid values are as follows:
        + **API-based**: limiting the maximum number of times a single API bound to the policy can be called within the
        specified period.
        + **API-shared**: limiting the maximum number of times all APIs bound to the policy can be called within the specified
        period.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        The user_throttles structure is documented below.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetApiAssociatedThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApiAssociatedThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApiBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiBasicConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_type: _builtins.str,
                 cors: _builtins.bool,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 group_version: _builtins.str,
                 id: _builtins.str,
                 matching: _builtins.str,
                 name: _builtins.str,
                 publish_id: _builtins.str,
                 published_at: _builtins.str,
                 registered_at: _builtins.str,
                 request_method: _builtins.str,
                 request_path: _builtins.str,
                 request_protocol: _builtins.str,
                 security_authentication: _builtins.str,
                 simple_authentication: _builtins.bool,
                 tags: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the authorizer to which the API request used.
        :param _builtins.str backend_type: Specifies the backend type of the API.  
               The valid values are **HTTP**, **FUNCTION**, **MOCK** and **GRPC**.
        :param _builtins.bool cors: Whether CORS is supported.
        :param _builtins.str description: The description of the API.
        :param _builtins.str env_id: Specifies the ID of the environment where the API is published.
        :param _builtins.str env_name: Specifies the name of the environment where the API is published.
        :param _builtins.str group_id: Specifies the ID of the API group to which the APIs belong.
        :param _builtins.str group_name: The name of group corresponding to the API.
        :param _builtins.str group_version: The version of group corresponding to the API.
        :param _builtins.str id: The ID of the API.
        :param _builtins.str matching: The matching mode of the API.  
               + **Exact**
               + **Prefix**
        :param _builtins.str name: Specifies the name of the API. Fuzzy search is supported.
        :param _builtins.str publish_id: The ID of publish corresponding to the API.
        :param _builtins.str published_at: The published time of the API, in RFC3339 format.
        :param _builtins.str registered_at: The registered time of the API, in RFC3339 format.
        :param _builtins.str request_method: Specifies the request method of the API.  
               The valid values are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param _builtins.str request_path: Specifies the request address of the API. Fuzzy search is supported.
        :param _builtins.str request_protocol: Specifies the request protocol of the API.  
               The valid values are **HTTP**, **HTTPS**, **BOTH** and **GRPCS**.
        :param _builtins.str security_authentication: Specifies the security authentication mode of the API request.  
               The valid values are **NONE**, **APP**, **IAM** and **AUTHORIZER**.
        :param _builtins.bool simple_authentication: Whether the authentication of the application code is enabled.
        :param Sequence[_builtins.str] tags: The list of tags configuration.
        :param _builtins.str type: Specifies the type of the API.  
               The valid values are **Public** and **Private**.
        :param _builtins.str updated_at: The latest update time of the API, in RFC3339 format.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_type", backend_type)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "group_version", group_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "matching", matching)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publish_id", publish_id)
        pulumi.set(__self__, "published_at", published_at)
        pulumi.set(__self__, "registered_at", registered_at)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_path", request_path)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "security_authentication", security_authentication)
        pulumi.set(__self__, "simple_authentication", simple_authentication)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the authorizer to which the API request used.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> _builtins.str:
        """
        Specifies the backend type of the API.  
        The valid values are **HTTP**, **FUNCTION**, **MOCK** and **GRPC**.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter
    def cors(self) -> _builtins.bool:
        """
        Whether CORS is supported.
        """
        return pulumi.get(self, "cors")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the API.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the ID of the API group to which the APIs belong.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        The name of group corresponding to the API.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="groupVersion")
    def group_version(self) -> _builtins.str:
        """
        The version of group corresponding to the API.
        """
        return pulumi.get(self, "group_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the API.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matching(self) -> _builtins.str:
        """
        The matching mode of the API.  
        + **Exact**
        + **Prefix**
        """
        return pulumi.get(self, "matching")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the API. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> _builtins.str:
        """
        The ID of publish corresponding to the API.
        """
        return pulumi.get(self, "publish_id")

    @_builtins.property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> _builtins.str:
        """
        The published time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "published_at")

    @_builtins.property
    @pulumi.getter(name="registeredAt")
    def registered_at(self) -> _builtins.str:
        """
        The registered time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "registered_at")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        Specifies the request method of the API.  
        The valid values are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> _builtins.str:
        """
        Specifies the request address of the API. Fuzzy search is supported.
        """
        return pulumi.get(self, "request_path")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        Specifies the request protocol of the API.  
        The valid values are **HTTP**, **HTTPS**, **BOTH** and **GRPCS**.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> _builtins.str:
        """
        Specifies the security authentication mode of the API request.  
        The valid values are **NONE**, **APP**, **IAM** and **AUTHORIZER**.
        """
        return pulumi.get(self, "security_authentication")

    @_builtins.property
    @pulumi.getter(name="simpleAuthentication")
    def simple_authentication(self) -> _builtins.bool:
        """
        Whether the authentication of the application code is enabled.
        """
        return pulumi.get(self, "simple_authentication")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        The list of tags configuration.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the API.  
        The valid values are **Public** and **Private**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApiFuncGraphResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 function_alias_urn: _builtins.str,
                 function_urn: _builtins.str,
                 id: _builtins.str,
                 invocation_type: _builtins.str,
                 network_type: _builtins.str,
                 request_protocol: _builtins.str,
                 timeout: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param _builtins.str function_urn: The URN of the FunctionGraph function.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param _builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
        :param _builtins.str request_protocol: The backend request protocol.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> _builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> _builtins.str:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApiFuncGraphPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_params: Sequence['outputs.GetApiFuncGraphPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApiFuncGraphPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 function_alias_urn: _builtins.str,
                 function_urn: _builtins.str,
                 id: _builtins.str,
                 invocation_type: _builtins.str,
                 name: _builtins.str,
                 network_type: _builtins.str,
                 request_protocol: _builtins.str,
                 timeout: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApiFuncGraphPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
               The backend_params structure is documented below.
        :param Sequence['GetApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
               The conditions structure is documented below.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param _builtins.str function_urn: The URN of the FunctionGraph function.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
        :param _builtins.str request_protocol: The backend request protocol.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApiFuncGraphPolicyBackendParamResult']:
        """
        The configuration list of the backend parameters.
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApiFuncGraphPolicyConditionResult']:
        """
        The policy conditions.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> _builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> _builtins.str:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApiFuncGraphPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiFuncGraphPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiMockResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 id: _builtins.str,
                 response: _builtins.str,
                 status_code: _builtins.int):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str response: The response of the backend policy.
        :param _builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def response(self) -> _builtins.str:
        """
        The response of the backend policy.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApiMockPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_params: Sequence['outputs.GetApiMockPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApiMockPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 response: _builtins.str,
                 status_code: _builtins.int):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApiMockPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
               The backend_params structure is documented below.
        :param Sequence['GetApiMockPolicyConditionArgs'] conditions: The policy conditions.
               The conditions structure is documented below.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str response: The response of the backend policy.
        :param _builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApiMockPolicyBackendParamResult']:
        """
        The configuration list of the backend parameters.
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApiMockPolicyConditionResult']:
        """
        The policy conditions.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def response(self) -> _builtins.str:
        """
        The response of the backend policy.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApiMockPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiMockPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiRequestParamResult(dict):
    def __init__(__self__, *,
                 default: _builtins.str,
                 description: _builtins.str,
                 enumeration: _builtins.str,
                 example: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 maximum: _builtins.int,
                 minimum: _builtins.int,
                 name: _builtins.str,
                 passthrough: _builtins.bool,
                 required: _builtins.bool,
                 type: _builtins.str,
                 valid_enable: _builtins.int):
        """
        :param _builtins.str default: The default value of the parameter.
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str enumeration: The enumerated value.
        :param _builtins.str example: The parameter example.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param _builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param _builtins.bool required: Whether this parameter is required.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.int valid_enable: Whether to enable the parameter validation.
               + **1**: enable
               + **2**: disable
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enumeration", enumeration)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "passthrough", passthrough)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "valid_enable", valid_enable)

    @_builtins.property
    @pulumi.getter
    def default(self) -> _builtins.str:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enumeration(self) -> _builtins.str:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @_builtins.property
    @pulumi.getter
    def example(self) -> _builtins.str:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> _builtins.int:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> _builtins.int:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def passthrough(self) -> _builtins.bool:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> _builtins.int:
        """
        Whether to enable the parameter validation.
        + **1**: enable
        + **2**: disable
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class GetApiWebResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_address: _builtins.str,
                 host_header: _builtins.str,
                 id: _builtins.str,
                 path: _builtins.str,
                 request_method: _builtins.str,
                 request_protocol: _builtins.str,
                 retry_count: _builtins.int,
                 ssl_enable: _builtins.bool,
                 timeout: _builtins.int,
                 vpc_channel_id: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str backend_address: The backend service address
        :param _builtins.str host_header: The proxy host header.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str path: The backend request address.
        :param _builtins.str request_method: The backend request method of the API.
        :param _builtins.str request_protocol: The backend request protocol.
        :param _builtins.int retry_count: The number of retry attempts to request the backend service.
        :param _builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> _builtins.str:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> _builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> _builtins.bool:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> _builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApiWebPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_address: _builtins.str,
                 backend_params: Sequence['outputs.GetApiWebPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApiWebPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 host_header: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 path: _builtins.str,
                 request_method: _builtins.str,
                 request_protocol: _builtins.str,
                 retry_count: _builtins.int,
                 timeout: _builtins.int,
                 vpc_channel_id: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str backend_address: The backend service address
        :param Sequence['GetApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
               The backend_params structure is documented below.
        :param Sequence['GetApiWebPolicyConditionArgs'] conditions: The policy conditions.
               The conditions structure is documented below.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str host_header: The proxy host header.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str path: The backend request address.
        :param _builtins.str request_method: The backend request method of the API.
        :param _builtins.str request_protocol: The backend request protocol.
        :param _builtins.int retry_count: The number of retry attempts to request the backend service.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> _builtins.str:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApiWebPolicyBackendParamResult']:
        """
        The configuration list of the backend parameters.
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApiWebPolicyConditionResult']:
        """
        The policy conditions.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> _builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> _builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApiWebPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiWebPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
               + **Equal**
               + **Enumerated**
               + **Matching**
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        + **Equal**
        + **Enumerated**
        + **Matching**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppcodesAppcodeResult(dict):
    def __init__(__self__, *,
                 application_id: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str application_id: Specifies the ID of the application to be queried.
        :param _builtins.str created_at: The creation time of the APPCODE, in RFC3339 format.
        :param _builtins.str id: The ID of the APPCODE.
        :param _builtins.str value: The APPCODE value (content).
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> _builtins.str:
        """
        Specifies the ID of the application to be queried.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the APPCODE, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the APPCODE.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The APPCODE value (content).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 bound_app_num: _builtins.int,
                 call_limits: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 time_interval: _builtins.int,
                 time_unit: _builtins.str):
        """
        :param _builtins.int bound_app_num: The number of applications bound to the quota policy.
        :param _builtins.int call_limits: The maximum number of times a application quota can be called.
        :param _builtins.str created_at: The creation time of the application quota, in RFC3339 format.
        :param _builtins.str description: The description of the application quota.
        :param _builtins.str id: The ID of the application quota.
        :param _builtins.str name: Specifies the name of the application quota to be queried.
        :param _builtins.int time_interval: The time limit of a quota.
        :param _builtins.str time_unit: The time unit.
        """
        pulumi.set(__self__, "bound_app_num", bound_app_num)
        pulumi.set(__self__, "call_limits", call_limits)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_interval", time_interval)
        pulumi.set(__self__, "time_unit", time_unit)

    @_builtins.property
    @pulumi.getter(name="boundAppNum")
    def bound_app_num(self) -> _builtins.int:
        """
        The number of applications bound to the quota policy.
        """
        return pulumi.get(self, "bound_app_num")

    @_builtins.property
    @pulumi.getter(name="callLimits")
    def call_limits(self) -> _builtins.int:
        """
        The maximum number of times a application quota can be called.
        """
        return pulumi.get(self, "call_limits")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application quota, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application quota.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application quota.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application quota to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> _builtins.int:
        """
        The time limit of a quota.
        """
        return pulumi.get(self, "time_interval")

    @_builtins.property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> _builtins.str:
        """
        The time unit.
        """
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app_key: _builtins.str,
                 app_secret: _builtins.str,
                 app_type: _builtins.str,
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param _builtins.str app_key: Specifies the key of the application to be queried.
        :param _builtins.str app_secret: The secret of the application.
        :param _builtins.str app_type: The type of the application.
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str created_at: The creation time of the application, in RFC3339 format.
        :param _builtins.str created_by: Specifies the creator of the application to be queried.  
               The valid values are as follows:
               + **USER**: The user created.
               + **MARKET**: The cloud store allocation.
        :param _builtins.str description: The description of the application.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str name: Specifies the name of the application to be queried.
        :param _builtins.int status: The status of the application.
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "app_secret", app_secret)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> _builtins.str:
        """
        Specifies the key of the application to be queried.
        """
        return pulumi.get(self, "app_key")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> _builtins.str:
        """
        The secret of the application.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> _builtins.str:
        """
        The type of the application.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Specifies the creator of the application to be queried.  
        The valid values are as follows:
        + **USER**: The user created.
        + **MARKET**: The cloud store allocation.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The status of the application.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 id: _builtins.str,
                 local_names: Sequence['outputs.GetAvailabilityZonesAvailabilityZoneLocalNameResult'],
                 name: _builtins.str,
                 port: _builtins.str,
                 specs: Mapping[str, _builtins.bool]):
        """
        :param _builtins.str code: The code of the availability zone.
        :param _builtins.str id: The ID of the availability zone.
        :param Sequence['GetAvailabilityZonesAvailabilityZoneLocalNameArgs'] local_names: The Chinese and English names of the availability zone.
        :param _builtins.str name: The name of the availability zone.
        :param _builtins.str port: The port of the availability zone.
        :param Mapping[str, _builtins.bool] specs: The APIG instance editions supported by the availability zone.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_names", local_names)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "specs", specs)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the availability zone.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the availability zone.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localNames")
    def local_names(self) -> Sequence['outputs.GetAvailabilityZonesAvailabilityZoneLocalNameResult']:
        """
        The Chinese and English names of the availability zone.
        """
        return pulumi.get(self, "local_names")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the availability zone.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port of the availability zone.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Mapping[str, _builtins.bool]:
        """
        The APIG instance editions supported by the availability zone.
        """
        return pulumi.get(self, "specs")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneLocalNameResult(dict):
    def __init__(__self__, *,
                 en_us: _builtins.str,
                 zh_cn: _builtins.str):
        """
        :param _builtins.str en_us: The English name of the availability zone.
        :param _builtins.str zh_cn: The Chinese name of the availability zone.
        """
        pulumi.set(__self__, "en_us", en_us)
        pulumi.set(__self__, "zh_cn", zh_cn)

    @_builtins.property
    @pulumi.getter(name="enUs")
    def en_us(self) -> _builtins.str:
        """
        The English name of the availability zone.
        """
        return pulumi.get(self, "en_us")

    @_builtins.property
    @pulumi.getter(name="zhCn")
    def zh_cn(self) -> _builtins.str:
        """
        The Chinese name of the availability zone.
        """
        return pulumi.get(self, "zh_cn")


@pulumi.output_type
class GetChannelsVpcChannelResult(dict):
    def __init__(__self__, *,
                 balance_strategy: _builtins.int,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 member_groups: Sequence['outputs.GetChannelsVpcChannelMemberGroupResult'],
                 member_type: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 type: _builtins.int):
        """
        :param _builtins.int balance_strategy: The distribution algorithm.
        :param _builtins.str created_at: The creation time of channel, in RFC3339 format.
        :param _builtins.str id: The ID of the member group.
        :param Sequence['GetChannelsVpcChannelMemberGroupArgs'] member_groups: The parameter member groups of the VPC channels.
               The member_group structure is documented below.
        :param _builtins.str member_type: The member type of the VPC channel.
        :param _builtins.str name: Specifies the name of the channel to be queried.
        :param _builtins.int port: The port of the backend server.
        :param _builtins.int type: The type of the VPC channel.
        """
        pulumi.set(__self__, "balance_strategy", balance_strategy)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "member_groups", member_groups)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> _builtins.int:
        """
        The distribution algorithm.
        """
        return pulumi.get(self, "balance_strategy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of channel, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the member group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> Sequence['outputs.GetChannelsVpcChannelMemberGroupResult']:
        """
        The parameter member groups of the VPC channels.
        The member_group structure is documented below.
        """
        return pulumi.get(self, "member_groups")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> _builtins.str:
        """
        The member type of the VPC channel.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the channel to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port of the backend server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The type of the VPC channel.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetChannelsVpcChannelMemberGroupResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 microservice_labels: Sequence['outputs.GetChannelsVpcChannelMemberGroupMicroserviceLabelResult'],
                 microservice_port: _builtins.int,
                 microservice_version: _builtins.str,
                 name: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str description: The description of the member group.
        :param _builtins.str id: The ID of the member group.
        :param Sequence['GetChannelsVpcChannelMemberGroupMicroserviceLabelArgs'] microservice_labels: The microservice tags of the backend server group.
               The microservice_labels structure is documented below.
        :param _builtins.int microservice_port: The microservice port of the backend server group.
        :param _builtins.str microservice_version: The microservice version of the backend server group.
        :param _builtins.str name: Specifies the name of the channel to be queried.
        :param _builtins.int weight: The weight of the current member group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "microservice_labels", microservice_labels)
        pulumi.set(__self__, "microservice_port", microservice_port)
        pulumi.set(__self__, "microservice_version", microservice_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the member group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the member group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Sequence['outputs.GetChannelsVpcChannelMemberGroupMicroserviceLabelResult']:
        """
        The microservice tags of the backend server group.
        The microservice_labels structure is documented below.
        """
        return pulumi.get(self, "microservice_labels")

    @_builtins.property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> _builtins.int:
        """
        The microservice port of the backend server group.
        """
        return pulumi.get(self, "microservice_port")

    @_builtins.property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> _builtins.str:
        """
        The microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the channel to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        The weight of the current member group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetChannelsVpcChannelMemberGroupMicroserviceLabelResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the channel to be queried.
        :param _builtins.str value: The value of the microservice label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the channel to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the microservice label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomAuthorizersAuthorizerResult(dict):
    def __init__(__self__, *,
                 cache_age: _builtins.int,
                 created_at: _builtins.str,
                 function_alias_uri: _builtins.str,
                 function_type: _builtins.str,
                 function_urn: _builtins.str,
                 function_version: _builtins.str,
                 id: _builtins.str,
                 identities: Sequence['outputs.GetCustomAuthorizersAuthorizerIdentityResult'],
                 is_body_send: _builtins.bool,
                 name: _builtins.str,
                 network_type: _builtins.str,
                 type: _builtins.str,
                 user_data: _builtins.str):
        """
        :param _builtins.int cache_age: The maximum cache age of custom authorizer.
        :param _builtins.str created_at: The creation time of custom authorizer.
        :param _builtins.str function_alias_uri: The version alias URI of the FGS function.
        :param _builtins.str function_type: The type of the FGS function.
        :param _builtins.str function_urn: The URN of the FGS function.
        :param _builtins.str function_version: The version of the FGS function.
        :param _builtins.str id: The ID of the custom authorizer.
        :param Sequence['GetCustomAuthorizersAuthorizerIdentityArgs'] identities: The parameter identities of the custom authorizer.
               The identity structure is documented below.
        :param _builtins.bool is_body_send: Whether to send the body of custom authorizer.
        :param _builtins.str name: Specifies the name of the custom authorizer.  
               The custom authorizer name consists of `3` to `64` characters, starting with a letter.
               Only letters, digits and underscores (_) are allowed.
        :param _builtins.str network_type: The network architecture types of function.
        :param _builtins.str type: Specifies the type of the custom authorizer.  
               The valid values are as follows:
               + **FRONTEND**
               + **BACKEND**
        :param _builtins.str user_data: The user data of custom authorizer.
        """
        pulumi.set(__self__, "cache_age", cache_age)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "function_alias_uri", function_alias_uri)
        pulumi.set(__self__, "function_type", function_type)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "function_version", function_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_body_send", is_body_send)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_data", user_data)

    @_builtins.property
    @pulumi.getter(name="cacheAge")
    def cache_age(self) -> _builtins.int:
        """
        The maximum cache age of custom authorizer.
        """
        return pulumi.get(self, "cache_age")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of custom authorizer.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="functionAliasUri")
    def function_alias_uri(self) -> _builtins.str:
        """
        The version alias URI of the FGS function.
        """
        return pulumi.get(self, "function_alias_uri")

    @_builtins.property
    @pulumi.getter(name="functionType")
    def function_type(self) -> _builtins.str:
        """
        The type of the FGS function.
        """
        return pulumi.get(self, "function_type")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FGS function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> _builtins.str:
        """
        The version of the FGS function.
        """
        return pulumi.get(self, "function_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the custom authorizer.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetCustomAuthorizersAuthorizerIdentityResult']:
        """
        The parameter identities of the custom authorizer.
        The identity structure is documented below.
        """
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="isBodySend")
    def is_body_send(self) -> _builtins.bool:
        """
        Whether to send the body of custom authorizer.
        """
        return pulumi.get(self, "is_body_send")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the custom authorizer.  
        The custom authorizer name consists of `3` to `64` characters, starting with a letter.
        Only letters, digits and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network architecture types of function.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the custom authorizer.  
        The valid values are as follows:
        + **FRONTEND**
        + **BACKEND**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The user data of custom authorizer.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class GetCustomAuthorizersAuthorizerIdentityResult(dict):
    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 validation: _builtins.str):
        """
        :param _builtins.str location: The parameter location of identity.
        :param _builtins.str name: Specifies the name of the custom authorizer.  
               The custom authorizer name consists of `3` to `64` characters, starting with a letter.
               Only letters, digits and underscores (_) are allowed.
        :param _builtins.str validation: The parameter verification expression of identity.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "validation", validation)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The parameter location of identity.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the custom authorizer.  
        The custom authorizer name consists of `3` to `64` characters, starting with a letter.
        Only letters, digits and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def validation(self) -> _builtins.str:
        """
        The parameter verification expression of identity.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GetEndpointConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 packet_id: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the endpoint connection, in RFC3339 format.
        :param _builtins.str domain_id: The IAM account ID of the endpoint connection creator.
        :param _builtins.str id: The ID of the endpoint connection.
        :param _builtins.int packet_id: Specifies packet ID of endpoint connection.
        :param _builtins.str status: Specifies status of endpoint connection.
               The valid values are as follows:
               + **pendingAcceptance**
               + **accepted**
               + **rejected**
               + **failed**
        :param _builtins.str updated_at: The latest time of the endpoint connection, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "packet_id", packet_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The IAM account ID of the endpoint connection creator.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the endpoint connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> _builtins.int:
        """
        Specifies packet ID of endpoint connection.
        """
        return pulumi.get(self, "packet_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies status of endpoint connection.
        The valid values are as follows:
        + **pendingAcceptance**
        + **accepted**
        + **rejected**
        + **failed**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEnvironmentVariablesVariableResult(dict):
    def __init__(__self__, *,
                 env_id: _builtins.str,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str env_id: Specifies the ID of the environment to which the environment variables belong.
        :param _builtins.str group_id: Specifies the ID of the group to which the environment variables belong.
        :param _builtins.str id: The ID of the environment variable.
        :param _builtins.str name: Specifies the name of the environment variable.
               Fuzzy search is supported.
        :param _builtins.str value: The value of the environment variable.
        """
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment to which the environment variables belong.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the ID of the group to which the environment variables belong.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the environment variable.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the environment variable.
        Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str create_time: Time when the APIG environment was created, in RFC-3339 format.
        :param _builtins.str description: The description about the API environment.
        :param _builtins.str id: ID of the APIG environment.
        :param _builtins.str name: Specifies the name of the API environment. The API environment name consists of 3 to 64
               characters, starting with a letter. Only letters, digits and underscores (_) are allowed.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Time when the APIG environment was created, in RFC-3339 format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description about the API environment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the APIG environment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the API environment. The API environment name consists of 3 to 64
        characters, starting with a letter. Only letters, digits and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 environments: Sequence['outputs.GetGroupsGroupEnvironmentResult'],
                 id: _builtins.str,
                 is_default: _builtins.int,
                 name: _builtins.str,
                 on_sell_status: _builtins.int,
                 sl_domain: _builtins.str,
                 sl_domains: Sequence[_builtins.str],
                 status: _builtins.int,
                 updated_at: _builtins.str,
                 url_domains: Sequence['outputs.GetGroupsGroupUrlDomainResult']):
        """
        :param _builtins.str created_at: The creation time of the API group.
        :param _builtins.str description: The description of the API group.
        :param Sequence['GetGroupsGroupEnvironmentArgs'] environments: The array of one or more environments of the API group.
               The environment structure is documented below.
        :param _builtins.str id: The variable ID.
        :param _builtins.int is_default: Indicates whether the API group is the default group.
        :param _builtins.str name: Specifies the API group name used to query.
        :param _builtins.int on_sell_status: Whether it has been listed on the cloud store.
               The valid values are as follows:
               + **1**: Listed.
               + **2**: Not listed.
               + **3**: Under review.
        :param _builtins.str sl_domain: The subdomain name assigned by the system by default.
        :param Sequence[_builtins.str] sl_domains: List of subdomain names assigned by the system by default.
        :param _builtins.int status: The current status of the API group.
               The valid values are as follows:
               + **1**: Normal.
        :param _builtins.str updated_at: The latest update time of the API group.
        :param Sequence['GetGroupsGroupUrlDomainArgs'] url_domains: List of independent domains bound on the API group.
               The url_domains structure is documented below.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "on_sell_status", on_sell_status)
        pulumi.set(__self__, "sl_domain", sl_domain)
        pulumi.set(__self__, "sl_domains", sl_domains)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url_domains", url_domains)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the API group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the API group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetGroupsGroupEnvironmentResult']:
        """
        The array of one or more environments of the API group.
        The environment structure is documented below.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.int:
        """
        Indicates whether the API group is the default group.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API group name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onSellStatus")
    def on_sell_status(self) -> _builtins.int:
        """
        Whether it has been listed on the cloud store.
        The valid values are as follows:
        + **1**: Listed.
        + **2**: Not listed.
        + **3**: Under review.
        """
        return pulumi.get(self, "on_sell_status")

    @_builtins.property
    @pulumi.getter(name="slDomain")
    def sl_domain(self) -> _builtins.str:
        """
        The subdomain name assigned by the system by default.
        """
        return pulumi.get(self, "sl_domain")

    @_builtins.property
    @pulumi.getter(name="slDomains")
    def sl_domains(self) -> Sequence[_builtins.str]:
        """
        List of subdomain names assigned by the system by default.
        """
        return pulumi.get(self, "sl_domains")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The current status of the API group.
        The valid values are as follows:
        + **1**: Normal.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the API group.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="urlDomains")
    def url_domains(self) -> Sequence['outputs.GetGroupsGroupUrlDomainResult']:
        """
        List of independent domains bound on the API group.
        The url_domains structure is documented below.
        """
        return pulumi.get(self, "url_domains")


@pulumi.output_type
class GetGroupsGroupEnvironmentResult(dict):
    def __init__(__self__, *,
                 environment_id: _builtins.str,
                 variables: Sequence['outputs.GetGroupsGroupEnvironmentVariableResult']):
        """
        :param _builtins.str environment_id: The ID of the environment to which the variables belong.
        :param Sequence['GetGroupsGroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.  
               The variable structure is documented below.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        The ID of the environment to which the variables belong.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetGroupsGroupEnvironmentVariableResult']:
        """
        The array of one or more environment variables.  
        The variable structure is documented below.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetGroupsGroupEnvironmentVariableResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str id: The variable ID.
        :param _builtins.str name: Specifies the API group name used to query.
        :param _builtins.str value: The variable value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API group name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGroupsGroupUrlDomainResult(dict):
    def __init__(__self__, *,
                 cname_status: _builtins.int,
                 id: _builtins.str,
                 is_has_trusted_root_ca: _builtins.bool,
                 min_ssl_version: _builtins.str,
                 name: _builtins.str,
                 ssl_id: _builtins.str,
                 ssl_name: _builtins.str,
                 verified_client_certificate_enabled: _builtins.bool):
        """
        :param _builtins.int cname_status: CNAME resolution status of the domain name.
               The valid values are as follows:
               + **1**: Not resolved.
               + **2**: Resolving.
               + **3**: Resolved.
               + **4**: Resolution failed.
        :param _builtins.str id: The variable ID.
        :param _builtins.bool is_has_trusted_root_ca: Whether a trusted root certificate (CA) exists. The value is true
               if trusted_root_ca exists in the bound certificate. The default is **false**.
        :param _builtins.str min_ssl_version: Minimum SSL version. The default is **TLSv1.1**.
               The valid values are as follows:
               + **TLSv1.1**
               + **TLSv1.2**
        :param _builtins.str name: Specifies the API group name used to query.
        :param _builtins.str ssl_id: The SSL certificate ID.
        :param _builtins.str ssl_name: The SSL certificate name.
        :param _builtins.bool verified_client_certificate_enabled: Whether to enable client certificate verification.
               This parameter is available only when a certificate is bound. It is enabled by default if trusted_root_ca exists,
               and disabled if trusted_root_ca does not exist. The default is **false**.
        """
        pulumi.set(__self__, "cname_status", cname_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_has_trusted_root_ca", is_has_trusted_root_ca)
        pulumi.set(__self__, "min_ssl_version", min_ssl_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ssl_id", ssl_id)
        pulumi.set(__self__, "ssl_name", ssl_name)
        pulumi.set(__self__, "verified_client_certificate_enabled", verified_client_certificate_enabled)

    @_builtins.property
    @pulumi.getter(name="cnameStatus")
    def cname_status(self) -> _builtins.int:
        """
        CNAME resolution status of the domain name.
        The valid values are as follows:
        + **1**: Not resolved.
        + **2**: Resolving.
        + **3**: Resolved.
        + **4**: Resolution failed.
        """
        return pulumi.get(self, "cname_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isHasTrustedRootCa")
    def is_has_trusted_root_ca(self) -> _builtins.bool:
        """
        Whether a trusted root certificate (CA) exists. The value is true
        if trusted_root_ca exists in the bound certificate. The default is **false**.
        """
        return pulumi.get(self, "is_has_trusted_root_ca")

    @_builtins.property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> _builtins.str:
        """
        Minimum SSL version. The default is **TLSv1.1**.
        The valid values are as follows:
        + **TLSv1.1**
        + **TLSv1.2**
        """
        return pulumi.get(self, "min_ssl_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API group name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> _builtins.str:
        """
        The SSL certificate ID.
        """
        return pulumi.get(self, "ssl_id")

    @_builtins.property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> _builtins.str:
        """
        The SSL certificate name.
        """
        return pulumi.get(self, "ssl_name")

    @_builtins.property
    @pulumi.getter(name="verifiedClientCertificateEnabled")
    def verified_client_certificate_enabled(self) -> _builtins.bool:
        """
        Whether to enable client certificate verification.
        This parameter is available only when a certificate is bound. It is enabled by default if trusted_root_ca exists,
        and disabled if trusted_root_ca does not exist. The default is **false**.
        """
        return pulumi.get(self, "verified_client_certificate_enabled")


@pulumi.output_type
class GetInstanceFeaturesFeatureResult(dict):
    def __init__(__self__, *,
                 config: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str config: The detailed configuration of the instance feature.
        :param _builtins.bool enabled: Whether the feature is enabled.
        :param _builtins.str id: The ID of the feature.
        :param _builtins.str name: Specified the name of the feature.
        :param _builtins.str updated_at: The latest update time of the feature, in RFC3339 format.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def config(self) -> _builtins.str:
        """
        The detailed configuration of the instance feature.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the feature is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the feature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specified the name of the feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the feature, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetInstanceQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 config_id: _builtins.str,
                 config_name: _builtins.str,
                 config_time: _builtins.str,
                 config_value: _builtins.str,
                 remark: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str config_id: The ID of the quota.
        :param _builtins.str config_name: The name of the quota.
        :param _builtins.str config_time: The creation time of the quota.
        :param _builtins.str config_value: The number of available quotas.
        :param _builtins.str remark: The description of the quota.
        :param _builtins.int used: The number of quota used.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "config_time", config_time)
        pulumi.set(__self__, "config_value", config_value)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="configId")
    def config_id(self) -> _builtins.str:
        """
        The ID of the quota.
        """
        return pulumi.get(self, "config_id")

    @_builtins.property
    @pulumi.getter(name="configName")
    def config_name(self) -> _builtins.str:
        """
        The name of the quota.
        """
        return pulumi.get(self, "config_name")

    @_builtins.property
    @pulumi.getter(name="configTime")
    def config_time(self) -> _builtins.str:
        """
        The creation time of the quota.
        """
        return pulumi.get(self, "config_time")

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> _builtins.str:
        """
        The number of available quotas.
        """
        return pulumi.get(self, "config_value")

    @_builtins.property
    @pulumi.getter
    def remark(self) -> _builtins.str:
        """
        The description of the quota.
        """
        return pulumi.get(self, "remark")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of quota used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetInstanceSslCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 algorithm_type: _builtins.str,
                 common_name: _builtins.str,
                 create_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 is_has_trusted_root_ca: _builtins.bool,
                 name: _builtins.str,
                 not_after: _builtins.str,
                 project_id: _builtins.str,
                 sans: Sequence[_builtins.str],
                 signature_algorithm: _builtins.str,
                 type: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str algorithm_type: The algorithm type of the SSL certificate(RSA, ECC, SM2).
        :param _builtins.str common_name: The domain name of the SSL certificate.
        :param _builtins.str create_time: The create time of the SSL certificate.
        :param _builtins.str id: The ID of the SSL certificate.
        :param _builtins.str instance_id: The ID of the dedicated instance to which the SSL certificates belong.
        :param _builtins.bool is_has_trusted_root_ca: The certificate has trusted root certificate authority or not.
        :param _builtins.str name: The name of the SSL certificate.
        :param _builtins.str not_after: The expiration date of the SSL certificate.
        :param _builtins.str project_id: The ID of the tenant project
        :param Sequence[_builtins.str] sans: The san extended domain of the SSL certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the SSL certificate.
        :param _builtins.str type: The type of the SSL certificate.
        :param _builtins.str update_time: The update time of the SSL certificate.
        """
        pulumi.set(__self__, "algorithm_type", algorithm_type)
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "is_has_trusted_root_ca", is_has_trusted_root_ca)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "sans", sans)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="algorithmType")
    def algorithm_type(self) -> _builtins.str:
        """
        The algorithm type of the SSL certificate(RSA, ECC, SM2).
        """
        return pulumi.get(self, "algorithm_type")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        The domain name of the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The create time of the SSL certificate.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the SSL certificate.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the dedicated instance to which the SSL certificates belong.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isHasTrustedRootCa")
    def is_has_trusted_root_ca(self) -> _builtins.bool:
        """
        The certificate has trusted root certificate authority or not.
        """
        return pulumi.get(self, "is_has_trusted_root_ca")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the SSL certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> _builtins.str:
        """
        The expiration date of the SSL certificate.
        """
        return pulumi.get(self, "not_after")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the tenant project
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def sans(self) -> Sequence[_builtins.str]:
        """
        The san extended domain of the SSL certificate.
        """
        return pulumi.get(self, "sans")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature algorithm of the SSL certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the SSL certificate.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time of the SSL certificate.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetInstancesFilterInstanceResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetInstancesFilterInstanceTagResult']):
        """
        :param _builtins.str resource_id: The ID of the instance.
        :param _builtins.str resource_name: The name of the instance.
        :param Sequence['GetInstancesFilterInstanceTagArgs'] tags: Specifies the list of the tags to be queried.  
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInstancesFilterInstanceTagResult']:
        """
        Specifies the list of the tags to be queried.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInstancesFilterInstanceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key to be matched.  
               The valid values are as follows:
               + **resource_name**
        :param _builtins.str value: Specifies the value of the matching field. Fuzzy match is supported.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the matching field. Fuzzy match is supported.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstancesFilterMatchResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key to be matched.  
               The valid values are as follows:
               + **resource_name**
        :param _builtins.str value: Specifies the value of the matching field. Fuzzy match is supported.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the matching field. Fuzzy match is supported.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstancesFilterTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key to be matched.  
               The valid values are as follows:
               + **resource_name**
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
               
               <a name="data_instances_filter_matches"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.

        <a name="data_instances_filter_matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 edition: _builtins.str,
                 eip_address: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 loadbalancer_provider: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the instance, in RFC3339 format.
        :param _builtins.str edition: The edition of instance.
        :param _builtins.str eip_address: The elastic IP address of instance binding.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the instances belong.
        :param _builtins.str id: The ID of instance.
        :param _builtins.str loadbalancer_provider: The type of load balancer used by the instance.  
               The valid values are as follows:
               + **lvs**: Linux virtual server.
               + **elb**: Elastic load balance.
        :param _builtins.str name: Specifies the name of the instance to be queried.
        :param _builtins.str status: Specifies the status of the instance to be queried.  
               The valid values are as follows:
               + **Creating**: Instance creation in progress.
               + **CreateSuccess**: Instance created successfully
               + **CreateFail**: Instance creation failed.
        :param _builtins.str type: The type of instance.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "loadbalancer_provider", loadbalancer_provider)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the instance, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def edition(self) -> _builtins.str:
        """
        The edition of instance.
        """
        return pulumi.get(self, "edition")

    @_builtins.property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> _builtins.str:
        """
        The elastic IP address of instance binding.
        """
        return pulumi.get(self, "eip_address")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the instances belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadbalancerProvider")
    def loadbalancer_provider(self) -> _builtins.str:
        """
        The type of load balancer used by the instance.  
        The valid values are as follows:
        + **lvs**: Linux virtual server.
        + **elb**: Elastic load balance.
        """
        return pulumi.get(self, "loadbalancer_provider")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the instance to be queried.  
        The valid values are as follows:
        + **Creating**: Instance creation in progress.
        + **CreateSuccess**: Instance created successfully
        + **CreateFail**: Instance creation failed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of instance.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOrchestrationRuleAssociatedApisApiResult(dict):
    def __init__(__self__, *,
                 api_id: _builtins.str,
                 api_name: _builtins.str,
                 attached_time: _builtins.str,
                 auth_type: _builtins.str,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 match_mode: _builtins.str,
                 req_method: _builtins.str,
                 req_uri: _builtins.str):
        """
        :param _builtins.str api_id: Specifies the ID of the API associated with the orchestration rule.
        :param _builtins.str api_name: Specifies the name of the API associated with the orchestration rule,
               fuzzy matching is supported.
        :param _builtins.str attached_time: The time when the orchestration rule is associated with the API, in RFC3339 format.
        :param _builtins.str auth_type: The security authentication mode of the API request.
        :param _builtins.str group_id: The ID of the API group to which the API belongs.
        :param _builtins.str group_name: The name of the API group to which the API belongs.
        :param _builtins.str match_mode: The matching mode of the API.
        :param _builtins.str req_method: The request method of the API.
        :param _builtins.str req_uri: The request address of the API.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "attached_time", attached_time)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "match_mode", match_mode)
        pulumi.set(__self__, "req_method", req_method)
        pulumi.set(__self__, "req_uri", req_uri)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        """
        Specifies the ID of the API associated with the orchestration rule.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> _builtins.str:
        """
        Specifies the name of the API associated with the orchestration rule,
        fuzzy matching is supported.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter(name="attachedTime")
    def attached_time(self) -> _builtins.str:
        """
        The time when the orchestration rule is associated with the API, in RFC3339 format.
        """
        return pulumi.get(self, "attached_time")

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        The security authentication mode of the API request.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The ID of the API group to which the API belongs.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        The name of the API group to which the API belongs.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> _builtins.str:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "match_mode")

    @_builtins.property
    @pulumi.getter(name="reqMethod")
    def req_method(self) -> _builtins.str:
        """
        The request method of the API.
        """
        return pulumi.get(self, "req_method")

    @_builtins.property
    @pulumi.getter(name="reqUri")
    def req_uri(self) -> _builtins.str:
        """
        The request address of the API.
        """
        return pulumi.get(self, "req_uri")


@pulumi.output_type
class GetOrchestrationRulesRuleResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 is_preprocessing: _builtins.bool,
                 mapped_param: _builtins.str,
                 name: _builtins.str,
                 strategy: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the orchestration rule, in RFC3339 format.
        :param _builtins.str id: The ID of the orchestration rule.
        :param _builtins.bool is_preprocessing: Whether rule is a preprocessing rule.
        :param _builtins.str mapped_param: The parameter configuration after orchestration, in JSON format.
        :param _builtins.str name: Specifies the name of the orchestration rule to be queried, fuzzy matching is supported.
        :param _builtins.str strategy: The type of the orchestration rule.  
               The values are as follows:
               + **list**: Maps the values ​​in the list to new values.
               + **range**: Maps the values ​​in the range to new values.
               + **hash**: The value of the request header is directly mapped to the new request header after hash calculation.
               + **hash_range**: Use the request parameter to generate a hash value, and then use the hash value to perform range
               arrangement.
               + **none_value**: Value returned when the request parameter is empty.
               + **default**: When the request parameters exist but no orchestration rule can match them, the orchestration
               mapping value of the default rule is returned.
               + **head_n**: Try to intercept the first N characters of the string as the new value.
               + **tail_n**: Try to intercept the last N characters of the string as the new value.
        :param _builtins.str updated_at: The latest update time of the orchestration rule, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_preprocessing", is_preprocessing)
        pulumi.set(__self__, "mapped_param", mapped_param)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the orchestration rule, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the orchestration rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPreprocessing")
    def is_preprocessing(self) -> _builtins.bool:
        """
        Whether rule is a preprocessing rule.
        """
        return pulumi.get(self, "is_preprocessing")

    @_builtins.property
    @pulumi.getter(name="mappedParam")
    def mapped_param(self) -> _builtins.str:
        """
        The parameter configuration after orchestration, in JSON format.
        """
        return pulumi.get(self, "mapped_param")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the orchestration rule to be queried, fuzzy matching is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> _builtins.str:
        """
        The type of the orchestration rule.  
        The values are as follows:
        + **list**: Maps the values ​​in the list to new values.
        + **range**: Maps the values ​​in the range to new values.
        + **hash**: The value of the request header is directly mapped to the new request header after hash calculation.
        + **hash_range**: Use the request parameter to generate a hash value, and then use the hash value to perform range
        arrangement.
        + **none_value**: Value returned when the request parameter is empty.
        + **default**: When the request parameters exist but no orchestration rule can match them, the orchestration
        mapping value of the default rule is returned.
        + **head_n**: Try to intercept the first N characters of the string as the new value.
        + **tail_n**: Try to intercept the last N characters of the string as the new value.
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the orchestration rule, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPluginsPluginResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 plugin_scope: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str content: The content of the plugin.
        :param _builtins.str created_at: The creation time of the plugin, in RFC3339 format.
        :param _builtins.str description: The description of the plugin.
        :param _builtins.str id: The ID of the plugin.
        :param _builtins.str name: Specifies the name of the plugin. Fuzzy search is supported.
        :param _builtins.str plugin_scope: Specifies the scope of the plugin.  
               The valid values are as follows:
               + **global**
        :param _builtins.str type: Specifies the type of the plugin.  
               The valid values are as follows:
               + **cors**
               + **set_resp_headers**
               + **rate_limit**
               + **kafka_log**
               + **breaker**
               + **third_auth**
               + **proxy_cache**
               + **proxy_mirror**
        :param _builtins.str updated_at: The latest update time of the plugin, in RFC3339 format.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plugin_scope", plugin_scope)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The content of the plugin.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the plugin, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the plugin.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the plugin. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pluginScope")
    def plugin_scope(self) -> _builtins.str:
        """
        Specifies the scope of the plugin.  
        The valid values are as follows:
        + **global**
        """
        return pulumi.get(self, "plugin_scope")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the plugin.  
        The valid values are as follows:
        + **cors**
        + **set_resp_headers**
        + **rate_limit**
        + **kafka_log**
        + **breaker**
        + **third_auth**
        + **proxy_cache**
        + **proxy_mirror**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the plugin, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 algorithm: _builtins.str,
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 secret: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str algorithm: Specifies the algorithm of the signature to be queried.  
               This parameter is only available when signature `type` is `aes`.
               The valid values are as follows:
               + **aes-128-cfb**
               + **aes-256-cfb**
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str created_at: The creation time of the signature, in RFC3339 format.
        :param _builtins.str id: The ID of the signature.
        :param _builtins.str key: The key of the signature.
        :param _builtins.str name: Specifies the name of signature to be queried.  
               The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
               allowed. The name must start with an English letter or Chinese character.
        :param _builtins.str secret: The secret of the signature.
        :param _builtins.str type: Specifies the type of signature to be queried.  
               The valid values are as follows:
               + **basic**: Basic auth type.
               + **hmac**: HMAC type.
               + **aes**: AES type
        :param _builtins.str updated_at: The latest update time of the signature, in RFC3339 format.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> _builtins.str:
        """
        Specifies the algorithm of the signature to be queried.  
        This parameter is only available when signature `type` is `aes`.
        The valid values are as follows:
        + **aes-128-cfb**
        + **aes-256-cfb**
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the signature, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the signature.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of signature to be queried.  
        The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
        allowed. The name must start with an English letter or Chinese character.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        """
        The secret of the signature.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of signature to be queried.  
        The valid values are as follows:
        + **basic**: Basic auth type.
        + **hmac**: HMAC type.
        + **aes**: AES type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the signature, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 max_app_requests: _builtins.int,
                 max_ip_requests: _builtins.int,
                 max_user_requests: _builtins.int,
                 name: _builtins.str,
                 period: _builtins.int,
                 period_unit: _builtins.str,
                 type: _builtins.str,
                 user_throttles: Sequence['outputs.GetThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
               The app_throttles structure is documented below.
        :param _builtins.int bind_num: The number of APIs bound to the throttling policy.
        :param _builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param _builtins.str description: The description of throttling policy.
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param _builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param _builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param _builtins.str name: Specifies the name of the throttling policy. Fuzzy search is supported.
        :param _builtins.int period: The period of time for limiting the number of API calls.
        :param _builtins.str period_unit: The time unit for limiting the number of API calls.
               The valid values are **SECOND**, **MINUTE**, **HOUR** and **DAY**.
        :param _builtins.str type: The type of the throttling policy.
               The valid values are as follows:
               + **API-based**: Limiting the maximum number of times a single API bound to the policy can be called within the
               specified period.
               + **API-shared**: Limiting the maximum number of times all APIs bound to the policy can be called within the specified
               period.
        :param Sequence['GetThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
               The user_throttles structure is documented below.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @_builtins.property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        The app_throttles structure is documented below.
        """
        return pulumi.get(self, "app_throttles")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of APIs bound to the throttling policy.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of throttling policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @_builtins.property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @_builtins.property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the throttling policy. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        The time unit for limiting the number of API calls.
        The valid values are **SECOND**, **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the throttling policy.
        The valid values are as follows:
        + **API-based**: Limiting the maximum number of times a single API bound to the policy can be called within the
        specified period.
        + **API-shared**: Limiting the maximum number of times all APIs bound to the policy can be called within the specified
        period.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        The user_throttles structure is documented below.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


