# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOrchestrationRuleAssociatedApisResult',
    'AwaitableGetOrchestrationRuleAssociatedApisResult',
    'get_orchestration_rule_associated_apis',
    'get_orchestration_rule_associated_apis_output',
]

@pulumi.output_type
class GetOrchestrationRuleAssociatedApisResult:
    """
    A collection of values returned by getOrchestrationRuleAssociatedApis.
    """
    def __init__(__self__, api_id=None, api_name=None, apis=None, id=None, instance_id=None, region=None, rule_id=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if api_name and not isinstance(api_name, str):
            raise TypeError("Expected argument 'api_name' to be a str")
        pulumi.set(__self__, "api_name", api_name)
        if apis and not isinstance(apis, list):
            raise TypeError("Expected argument 'apis' to be a list")
        pulumi.set(__self__, "apis", apis)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[_builtins.str]:
        """
        The ID of the API.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[_builtins.str]:
        """
        The name of the API.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter
    def apis(self) -> Sequence['outputs.GetOrchestrationRuleAssociatedApisApiResult']:
        """
        All associated APIs that match the filter parameters.  
        The apis structure is documented below.
        """
        return pulumi.get(self, "apis")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")


class AwaitableGetOrchestrationRuleAssociatedApisResult(GetOrchestrationRuleAssociatedApisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrchestrationRuleAssociatedApisResult(
            api_id=self.api_id,
            api_name=self.api_name,
            apis=self.apis,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            rule_id=self.rule_id)


def get_orchestration_rule_associated_apis(api_id: Optional[_builtins.str] = None,
                                           api_name: Optional[_builtins.str] = None,
                                           instance_id: Optional[_builtins.str] = None,
                                           region: Optional[_builtins.str] = None,
                                           rule_id: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrchestrationRuleAssociatedApisResult:
    """
    Use this data source to get API list associated with the specified orchestration rule within HuaweiCloud.

    ## Example Usage

    ### Querying all APIs associated with the specified orchestration rule

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    test = huaweicloud.DedicatedApig.get_orchestration_rule_associated_apis(instance_id=instance_id,
        rule_id=orchestration_rule_id)
    ```

    ### Querying API associated with the orchestration rule using specified API ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    api_id = config.require_object("apiId")
    test = huaweicloud.DedicatedApig.get_orchestration_rule_associated_apis(instance_id=instance_id,
        rule_id=orchestration_rule_id,
        api_id=api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API associated with the orchestration rule.
    :param _builtins.str api_name: Specifies the name of the API associated with the orchestration rule,
           fuzzy matching is supported.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the orchestration rule belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the orchestration rule.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['apiName'] = api_name
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getOrchestrationRuleAssociatedApis:getOrchestrationRuleAssociatedApis', __args__, opts=opts, typ=GetOrchestrationRuleAssociatedApisResult).value

    return AwaitableGetOrchestrationRuleAssociatedApisResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        api_name=pulumi.get(__ret__, 'api_name'),
        apis=pulumi.get(__ret__, 'apis'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'))
def get_orchestration_rule_associated_apis_output(api_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  api_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrchestrationRuleAssociatedApisResult]:
    """
    Use this data source to get API list associated with the specified orchestration rule within HuaweiCloud.

    ## Example Usage

    ### Querying all APIs associated with the specified orchestration rule

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    test = huaweicloud.DedicatedApig.get_orchestration_rule_associated_apis(instance_id=instance_id,
        rule_id=orchestration_rule_id)
    ```

    ### Querying API associated with the orchestration rule using specified API ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    orchestration_rule_id = config.require_object("orchestrationRuleId")
    api_id = config.require_object("apiId")
    test = huaweicloud.DedicatedApig.get_orchestration_rule_associated_apis(instance_id=instance_id,
        rule_id=orchestration_rule_id,
        api_id=api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API associated with the orchestration rule.
    :param _builtins.str api_name: Specifies the name of the API associated with the orchestration rule,
           fuzzy matching is supported.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the orchestration rule belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the orchestration rule.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['apiName'] = api_name
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getOrchestrationRuleAssociatedApis:getOrchestrationRuleAssociatedApis', __args__, opts=opts, typ=GetOrchestrationRuleAssociatedApisResult)
    return __ret__.apply(lambda __response__: GetOrchestrationRuleAssociatedApisResult(
        api_id=pulumi.get(__response__, 'api_id'),
        api_name=pulumi.get(__response__, 'api_name'),
        apis=pulumi.get(__response__, 'apis'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id')))
