# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ApplicationAclArgs', 'ApplicationAcl']

@pulumi.input_type
class ApplicationAclArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationAcl resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the ACL rules belong.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the ACL type.  
               The valid values are as follows:
               + **PERMIT**: Whitelist.
               + **DENY**: Blacklist.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the ACL values.  
               The valid formats are as follows:
               + Common IP address, e.g. `127.0.0.1` or `::1`.
               + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
               + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.
               
               > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and ACL rules are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "values", values)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application to which the ACL rules belong.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ACL type.  
        The valid values are as follows:
        + **PERMIT**: Whitelist.
        + **DENY**: Blacklist.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the ACL values.  
        The valid formats are as follows:
        + Common IP address, e.g. `127.0.0.1` or `::1`.
        + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
        + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.

        > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application and ACL rules are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ApplicationAclState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ApplicationAcl resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the ACL rules belong.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and ACL rules are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the ACL type.  
               The valid values are as follows:
               + **PERMIT**: Whitelist.
               + **DENY**: Blacklist.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the ACL values.  
               The valid formats are as follows:
               + Common IP address, e.g. `127.0.0.1` or `::1`.
               + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
               + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.
               
               > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application to which the ACL rules belong.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the dedicated instance to which the application
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application and ACL rules are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ACL type.  
        The valid values are as follows:
        + **PERMIT**: Whitelist.
        + **DENY**: Blacklist.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ACL values.  
        The valid formats are as follows:
        + Common IP address, e.g. `127.0.0.1` or `::1`.
        + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
        + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.

        > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "values", value)


@pulumi.type_token("huaweicloud:DedicatedApig/applicationAcl:ApplicationAcl")
class ApplicationAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages multiple ACL rules of the same type under an APIG application within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        test = huaweicloud.dedicatedapig.ApplicationAcl("test",
            instance_id=instance_id,
            application_id=application_id,
            type="PERMIT",
            values=["192.145.0.0/16"])
        ```

        ## Import

        ACL rules can be imported using the related dedicate instance ID (`instance_id`) and the resource ID (`id`, also the

        `application_id`) and the ID of the , separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/applicationAcl:ApplicationAcl test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the ACL rules belong.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and ACL rules are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the ACL type.  
               The valid values are as follows:
               + **PERMIT**: Whitelist.
               + **DENY**: Blacklist.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the ACL values.  
               The valid formats are as follows:
               + Common IP address, e.g. `127.0.0.1` or `::1`.
               + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
               + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.
               
               > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationAclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages multiple ACL rules of the same type under an APIG application within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        application_id = config.require_object("applicationId")
        test = huaweicloud.dedicatedapig.ApplicationAcl("test",
            instance_id=instance_id,
            application_id=application_id,
            type="PERMIT",
            values=["192.145.0.0/16"])
        ```

        ## Import

        ACL rules can be imported using the related dedicate instance ID (`instance_id`) and the resource ID (`id`, also the

        `application_id`) and the ID of the , separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedApig/applicationAcl:ApplicationAcl test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationAclArgs.__new__(ApplicationAclArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if values is None and not opts.urn:
                raise TypeError("Missing required property 'values'")
            __props__.__dict__["values"] = values
        super(ApplicationAcl, __self__).__init__(
            'huaweicloud:DedicatedApig/applicationAcl:ApplicationAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ApplicationAcl':
        """
        Get an existing ApplicationAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the ACL rules belong.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the dedicated instance to which the application
               belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application and ACL rules are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the ACL type.  
               The valid values are as follows:
               + **PERMIT**: Whitelist.
               + **DENY**: Blacklist.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the ACL values.  
               The valid formats are as follows:
               + Common IP address, e.g. `127.0.0.1` or `::1`.
               + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
               + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.
               
               > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationAclState.__new__(_ApplicationAclState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["values"] = values
        return ApplicationAcl(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application to which the ACL rules belong.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the dedicated instance to which the application
        belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the application and ACL rules are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ACL type.  
        The valid values are as follows:
        + **PERMIT**: Whitelist.
        + **DENY**: Blacklist.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the ACL values.  
        The valid formats are as follows:
        + Common IP address, e.g. `127.0.0.1` or `::1`.
        + IP address with mask, e.g. `192.145.0.0/16` or `2407:c080:17ef:ffff::3104:703a/64`.
        + IP address range, e.g. `127.0.0.1-192.145.0.1` or `2407:c080:17ef:ffff::3104:703a-2407:c080:17ef:ffff::3104:704a`.

        > Before entering an IPv6 address, ensure that the dedicated instance supports the **IPv6** protocol.
        """
        return pulumi.get(self, "values")

