# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApiBackendParamArgs',
    'ApiBackendParamArgsDict',
    'ApiFuncGraphArgs',
    'ApiFuncGraphArgsDict',
    'ApiFuncGraphPolicyArgs',
    'ApiFuncGraphPolicyArgsDict',
    'ApiFuncGraphPolicyBackendParamArgs',
    'ApiFuncGraphPolicyBackendParamArgsDict',
    'ApiFuncGraphPolicyConditionArgs',
    'ApiFuncGraphPolicyConditionArgsDict',
    'ApiMockArgs',
    'ApiMockArgsDict',
    'ApiMockPolicyArgs',
    'ApiMockPolicyArgsDict',
    'ApiMockPolicyBackendParamArgs',
    'ApiMockPolicyBackendParamArgsDict',
    'ApiMockPolicyConditionArgs',
    'ApiMockPolicyConditionArgsDict',
    'ApiPublishmentHistoryArgs',
    'ApiPublishmentHistoryArgsDict',
    'ApiRequestParamArgs',
    'ApiRequestParamArgsDict',
    'ApiWebArgs',
    'ApiWebArgsDict',
    'ApiWebPolicyArgs',
    'ApiWebPolicyArgsDict',
    'ApiWebPolicyBackendParamArgs',
    'ApiWebPolicyBackendParamArgsDict',
    'ApiWebPolicyConditionArgs',
    'ApiWebPolicyConditionArgsDict',
    'ApplicationQuotaAssociateApplicationArgs',
    'ApplicationQuotaAssociateApplicationArgsDict',
    'ChannelHealthCheckArgs',
    'ChannelHealthCheckArgsDict',
    'ChannelMemberArgs',
    'ChannelMemberArgsDict',
    'ChannelMemberGroupArgs',
    'ChannelMemberGroupArgsDict',
    'ChannelMicroserviceArgs',
    'ChannelMicroserviceArgsDict',
    'ChannelMicroserviceCceConfigArgs',
    'ChannelMicroserviceCceConfigArgsDict',
    'ChannelMicroserviceCseConfigArgs',
    'ChannelMicroserviceCseConfigArgsDict',
    'CustomAuthorizerIdentityArgs',
    'CustomAuthorizerIdentityArgsDict',
    'GroupEnvironmentArgs',
    'GroupEnvironmentArgsDict',
    'GroupEnvironmentVariableArgs',
    'GroupEnvironmentVariableArgsDict',
    'GroupUrlDomainArgs',
    'GroupUrlDomainArgsDict',
    'InstanceCustomIngressPortArgs',
    'InstanceCustomIngressPortArgsDict',
    'ResponseRuleArgs',
    'ResponseRuleArgsDict',
    'ResponseRuleHeaderArgs',
    'ResponseRuleHeaderArgsDict',
    'ThrottlingPolicyAppThrottleArgs',
    'ThrottlingPolicyAppThrottleArgsDict',
    'ThrottlingPolicyUserThrottleArgs',
    'ThrottlingPolicyUserThrottleArgsDict',
    'VpcChannelMemberArgs',
    'VpcChannelMemberArgsDict',
    'GetInstancesFilterMatchArgs',
    'GetInstancesFilterMatchArgsDict',
    'GetInstancesFilterTagArgs',
    'GetInstancesFilterTagArgsDict',
]

MYPY = False

if not MYPY:
    class ApiBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
elif False:
    ApiBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiFuncGraphArgsDict(TypedDict):
        function_urn: pulumi.Input[_builtins.str]
        """
        Specifies the URN of the FunctionGraph function.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        function_alias_urn: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        invocation_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
elif False:
    ApiFuncGraphArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphArgs:
    def __init__(__self__, *,
                 function_urn: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 function_alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] function_urn: Specifies the URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param pulumi.Input[_builtins.str] invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
               
               > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        :param pulumi.Input[_builtins.str] network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
               
               Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @function_alias_urn.setter
    def function_alias_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_alias_urn", value)

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_type", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ApiFuncGraphPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgsDict']]]
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        function_urn: pulumi.Input[_builtins.str]
        """
        Specifies the URN of the FunctionGraph function.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgsDict']]]]
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        function_alias_urn: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        invocation_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The invocation mode of the FunctionGraph function.
        """
        invocation_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
elif False:
    ApiFuncGraphPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]],
                 function_urn: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 function_alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param pulumi.Input[_builtins.str] effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param pulumi.Input[_builtins.str] function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param pulumi.Input[_builtins.str] invocation_mode: The invocation mode of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
               
               > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        :param pulumi.Input[_builtins.str] network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
               
               Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]]:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @function_alias_urn.setter
    def function_alias_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_alias_urn", value)

    @_builtins.property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @invocation_mode.setter
    def invocation_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_mode", value)

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.

        > Only **sync** is allowed for the **GRPCS** protocol type FunctionGraph backend.
        """
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_type", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.

        Defaults to **V1** and **V2** is required if the `request_protocol` is **GRPCS**.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ApiFuncGraphPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
elif False:
    ApiFuncGraphPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiFuncGraphPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
elif False:
    ApiFuncGraphPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param pulumi.Input[_builtins.str] mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param pulumi.Input[_builtins.str] source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param pulumi.Input[_builtins.str] sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ApiMockArgsDict(TypedDict):
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        response: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        status_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the custom status code of the mock response.
        """
elif False:
    ApiMockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockArgs:
    def __init__(__self__, *,
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 response: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.int] status_code: Specifies the custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ApiMockPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgsDict']]]
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgsDict']]]]
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        response: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        status_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the custom status code of the mock response.
        """
elif False:
    ApiMockPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]],
                 name: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 response: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param pulumi.Input[_builtins.str] effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param pulumi.Input[_builtins.str] response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.int] status_code: Specifies the custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]]:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ApiMockPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
elif False:
    ApiMockPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiMockPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
elif False:
    ApiMockPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param pulumi.Input[_builtins.str] mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param pulumi.Input[_builtins.str] source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param pulumi.Input[_builtins.str] sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ApiPublishmentHistoryArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the current publishment.
        """
        version_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version ID of the current publishment.
        """
elif False:
    ApiPublishmentHistoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiPublishmentHistoryArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the description of the current publishment.
        :param pulumi.Input[_builtins.str] version_id: Specifies the version ID of the current publishment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the current publishment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version ID of the current publishment.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)


if not MYPY:
    class ApiRequestParamArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        default: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the default value of the request parameter.
        The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        enumeration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the enumerated value(s).
        Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        """
        example: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the example value of the request parameter.  
        The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        maximum: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum value or size of the request parameter.
        """
        minimum: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the minimum value or size of the request parameter.

        > For string type, The `maximum` and `minimum` means size. For number type, they means value.
        """
        orchestrations: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of orchestration rule IDs which parameter used.  
        The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
        list elements.

        > 1. The **none_value** rule has the highest priority, a maximum of one **none_value** rule can be bound.<br>2. The
        **default** rule has the lowest priority, a maximum of one **default** rule can be bound.<br>3. Only one parameter
        of each API can be bound with unique orchestration rules.

        <a name="apig_api_backend_params"></a>
        The `backend_params` block supports:
        """
        passthrough: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to transparently transfer the parameter.
        """
        required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the request parameter is required.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        valid_enable: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies whether to enable the parameter validation.
        + **1**: enable
        + **2**: disable (by default)
        """
elif False:
    ApiRequestParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiRequestParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enumeration: Optional[pulumi.Input[_builtins.str]] = None,
                 example: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 orchestrations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_enable: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] default: Specifies the default value of the request parameter.
               The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enumeration: Specifies the enumerated value(s).
               Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        :param pulumi.Input[_builtins.str] example: Specifies the example value of the request parameter.  
               The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param pulumi.Input[_builtins.int] maximum: Specifies the maximum value or size of the request parameter.
        :param pulumi.Input[_builtins.int] minimum: Specifies the minimum value or size of the request parameter.
               
               > For string type, The `maximum` and `minimum` means size. For number type, they means value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] orchestrations: Specifies the list of orchestration rule IDs which parameter used.  
               The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
               list elements.
               
               > 1. The **none_value** rule has the highest priority, a maximum of one **none_value** rule can be bound.<br>2. The
               **default** rule has the lowest priority, a maximum of one **default** rule can be bound.<br>3. Only one parameter
               of each API can be bound with unique orchestration rules.
               
               <a name="apig_api_backend_params"></a>
               The `backend_params` block supports:
        :param pulumi.Input[_builtins.bool] passthrough: Specifies whether to transparently transfer the parameter.
        :param pulumi.Input[_builtins.bool] required: Specifies whether the request parameter is required.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param pulumi.Input[_builtins.int] valid_enable: Specifies whether to enable the parameter validation.
               + **1**: enable
               + **2**: disable (by default)
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default value of the request parameter.
        The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enumeration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enumerated value(s).
        Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        """
        return pulumi.get(self, "enumeration")

    @enumeration.setter
    def enumeration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enumeration", value)

    @_builtins.property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the example value of the request parameter.  
        The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "example", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum value or size of the request parameter.
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum", value)

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum value or size of the request parameter.

        > For string type, The `maximum` and `minimum` means size. For number type, they means value.
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minimum", value)

    @_builtins.property
    @pulumi.getter
    def orchestrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of orchestration rule IDs which parameter used.  
        The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
        list elements.

        > 1. The **none_value** rule has the highest priority, a maximum of one **none_value** rule can be bound.<br>2. The
        **default** rule has the lowest priority, a maximum of one **default** rule can be bound.<br>3. Only one parameter
        of each API can be bound with unique orchestration rules.

        <a name="apig_api_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "orchestrations")

    @orchestrations.setter
    def orchestrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "orchestrations", value)

    @_builtins.property
    @pulumi.getter
    def passthrough(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @passthrough.setter
    def passthrough(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passthrough", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the request parameter is required.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to enable the parameter validation.
        + **1**: enable
        + **2**: disable (by default)
        """
        return pulumi.get(self, "valid_enable")

    @valid_enable.setter
    def valid_enable(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "valid_enable", value)


if not MYPY:
    class ApiWebArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        backend_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        host_header: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        request_method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        retry_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        ssl_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable two-way authentication, defaults to **false**.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        vpc_channel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
elif False:
    ApiWebArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_address: Optional[pulumi.Input[_builtins.str]] = None,
                 host_header: Optional[pulumi.Input[_builtins.str]] = None,
                 request_method: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_count: Optional[pulumi.Input[_builtins.int]] = None,
                 ssl_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_channel_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param pulumi.Input[_builtins.str] request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param pulumi.Input[_builtins.int] retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
               
               > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
               servers in the channel.
        :param pulumi.Input[_builtins.bool] ssl_enable: Specifies whether to enable two-way authentication, defaults to **false**.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param pulumi.Input[_builtins.str] vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @backend_address.setter
    def backend_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_address", value)

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_header", value)

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_method", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_count", value)

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable two-way authentication, defaults to **false**.
        """
        return pulumi.get(self, "ssl_enable")

    @ssl_enable.setter
    def ssl_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_enable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")

    @vpc_channel_id.setter
    def vpc_channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_channel_id", value)


if not MYPY:
    class ApiWebPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgsDict']]]
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        path: pulumi.Input[_builtins.str]
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        request_method: pulumi.Input[_builtins.str]
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        backend_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgsDict']]]]
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        host_header: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        retry_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        vpc_channel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
elif False:
    ApiWebPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]],
                 name: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 request_method: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_address: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 host_header: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_count: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_channel_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param pulumi.Input[_builtins.str] request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param pulumi.Input[_builtins.str] authorizer_id: Specifies the ID of the backend custom authorization.
               
               <a name="apig_api_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param pulumi.Input[_builtins.str] effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param pulumi.Input[_builtins.str] host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param pulumi.Input[_builtins.int] retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
               
               > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
               servers in the channel.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param pulumi.Input[_builtins.str] vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]]:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "request_method", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backend custom authorization.

        <a name="apig_api_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @backend_address.setter
    def backend_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_address", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_header", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.

        > When the (web) backend uses the channel, the `retry_count` must be less than the number of available backend
        servers in the channel.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_count", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")

    @vpc_channel_id.setter
    def vpc_channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_channel_id", value)


if not MYPY:
    class ApiWebPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
elif False:
    ApiWebPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param pulumi.Input[_builtins.str] name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
               
               <a name="apig_api_mock"></a>
               The `mock` block supports:
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.

        <a name="apig_api_mock"></a>
        The `mock` block supports:
        """
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiWebPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
elif False:
    ApiWebPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
               
               For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
               address format is supported.
               
               For a condition with the input parameter source:
               When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
               **HEAD** or **OPTIONS**.
        :param pulumi.Input[_builtins.str] cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param pulumi.Input[_builtins.str] mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param pulumi.Input[_builtins.str] param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param pulumi.Input[_builtins.str] source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param pulumi.Input[_builtins.str] sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param pulumi.Input[_builtins.str] type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.

        For a condition with the Source IP address source, enter IPv4 addresses and separate them with commas. The CIDR
        address format is supported.

        For a condition with the input parameter source:
        When the `sys_name` is **req_method**, the valid values are **GET**, **POST**, **DELETE**, **PUT**, **PATCH**,
        **HEAD** or **OPTIONS**.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ApplicationQuotaAssociateApplicationArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the application ID bound to the application quota.
        """
        bind_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The binding time, in RFC3339 format.
        """
elif False:
    ApplicationQuotaAssociateApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationQuotaAssociateApplicationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 bind_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the application ID bound to the application quota.
        :param pulumi.Input[_builtins.str] bind_time: The binding time, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        if bind_time is not None:
            pulumi.set(__self__, "bind_time", bind_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID bound to the application quota.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The binding time, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")

    @bind_time.setter
    def bind_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bind_time", value)


if not MYPY:
    class ChannelHealthCheckArgsDict(TypedDict):
        interval: pulumi.Input[_builtins.int]
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `1` to `300`.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the microservice for performing health check on backend servers.  
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        threshold_abnormal: pulumi.Input[_builtins.int]
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `1` to `10`.
        """
        threshold_normal: pulumi.Input[_builtins.int]
        """
        Specifies the the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `1` to `10`.
        """
        timeout: pulumi.Input[_builtins.int]
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `1` to `30`.
        """
        enable_client_ssl: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable two-way authentication.  
        Defaults to **false**.
        """
        http_codes: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.
        """
        method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request method for health check.  
        The valid values are **GET** and **HEAD**.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
elif False:
    ChannelHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelHealthCheckArgs:
    def __init__(__self__, *,
                 interval: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str],
                 threshold_abnormal: pulumi.Input[_builtins.int],
                 threshold_normal: pulumi.Input[_builtins.int],
                 timeout: pulumi.Input[_builtins.int],
                 enable_client_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 http_codes: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] interval: Specifies the interval between consecutive checks, in second.  
               The valid value ranges from `1` to `300`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the microservice for performing health check on backend servers.  
               The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        :param pulumi.Input[_builtins.int] threshold_abnormal: Specifies the unhealthy threshold, which refers to the number of consecutive
               failed checks required for a backend server to be considered unhealthy.
               The valid value ranges from `1` to `10`.
        :param pulumi.Input[_builtins.int] threshold_normal: Specifies the the healthy threshold, which refers to the number of consecutive
               successful checks required for a backend server to be considered healthy.
               The valid value ranges from `1` to `10`.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout for determining whether a health check fails, in second.  
               The value must be less than the value of the time `interval`.
               The valid value ranges from `1` to `30`.
        :param pulumi.Input[_builtins.bool] enable_client_ssl: Specifies whether to enable two-way authentication.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] http_codes: Specifies the response codes for determining a successful HTTP response.  
               The valid value ranges from `100` to `599` and the valid formats are as follows:
               + The multiple values, for example, **200,201,202**.
               + The range, for example, **200-299**.
               + Both multiple values and ranges, for example, **201,202,210-299**.
        :param pulumi.Input[_builtins.str] method: Specifies the request method for health check.  
               The valid values are **GET** and **HEAD**.
        :param pulumi.Input[_builtins.str] path: Specifies the destination path for health checks.  
               Required if the `protocol` is **HTTP** or **HTTPS**.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.int] status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "threshold_abnormal", threshold_abnormal)
        pulumi.set(__self__, "threshold_normal", threshold_normal)
        pulumi.set(__self__, "timeout", timeout)
        if enable_client_ssl is not None:
            pulumi.set(__self__, "enable_client_ssl", enable_client_ssl)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the interval between consecutive checks, in second.  
        The valid value ranges from `1` to `300`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the microservice for performing health check on backend servers.  
        The valid values are **TCP**, **HTTP** and **HTTPS**, defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="thresholdAbnormal")
    def threshold_abnormal(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the unhealthy threshold, which refers to the number of consecutive
        failed checks required for a backend server to be considered unhealthy.
        The valid value ranges from `1` to `10`.
        """
        return pulumi.get(self, "threshold_abnormal")

    @threshold_abnormal.setter
    def threshold_abnormal(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "threshold_abnormal", value)

    @_builtins.property
    @pulumi.getter(name="thresholdNormal")
    def threshold_normal(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the the healthy threshold, which refers to the number of consecutive
        successful checks required for a backend server to be considered healthy.
        The valid value ranges from `1` to `10`.
        """
        return pulumi.get(self, "threshold_normal")

    @threshold_normal.setter
    def threshold_normal(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "threshold_normal", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timeout for determining whether a health check fails, in second.  
        The value must be less than the value of the time `interval`.
        The valid value ranges from `1` to `30`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="enableClientSsl")
    def enable_client_ssl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable two-way authentication.  
        Defaults to **false**.
        """
        return pulumi.get(self, "enable_client_ssl")

    @enable_client_ssl.setter
    def enable_client_ssl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_client_ssl", value)

    @_builtins.property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the response codes for determining a successful HTTP response.  
        The valid value ranges from `100` to `599` and the valid formats are as follows:
        + The multiple values, for example, **200,201,202**.
        + The range, for example, **200-299**.
        + Both multiple values and ranges, for example, **201,202,210-299**.
        """
        return pulumi.get(self, "http_codes")

    @http_codes.setter
    def http_codes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "http_codes", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request method for health check.  
        The valid values are **GET** and **HEAD**.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination path for health checks.  
        Required if the `protocol` is **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ChannelMemberArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the IP address each backend servers.
        If omitted, means that all backend servers are both in one group.
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the IP address each backend servers.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ECS ID for each backend servers.

        > One of the parameter `member.host` and `member.id` must be set if `member_type` is **ecs**.
        The parameter `member.host` and `member.id` are alternative.
        """
        is_backup: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether this member is the backup member.  
        Defaults to **false**.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
elif False:
    ChannelMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelMemberArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Specifies the IP address each backend servers.
               If omitted, means that all backend servers are both in one group.
        :param pulumi.Input[_builtins.str] host: Specifies the IP address each backend servers.
        :param pulumi.Input[_builtins.str] id: Specifies the ECS ID for each backend servers.
               
               > One of the parameter `member.host` and `member.id` must be set if `member_type` is **ecs**.
               The parameter `member.host` and `member.id` are alternative.
        :param pulumi.Input[_builtins.bool] is_backup: Specifies whether this member is the backup member.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.int] port: Specifies the destination host port for health check.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.int] status: Specifies the status of health check.  
               The valid values are as follows:
               + **1**: Normal.
               + **2**: Abnormal.
               
               Defaults to `1` (normal).
               
               <a name="channel_microservice"></a>
               The `microservice` block supports:
        :param pulumi.Input[_builtins.int] weight: Specifies the weight of current backend server.  
               The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address each backend servers.
        If omitted, means that all backend servers are both in one group.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address each backend servers.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ECS ID for each backend servers.

        > One of the parameter `member.host` and `member.id` must be set if `member_type` is **ecs**.
        The parameter `member.host` and `member.id` are alternative.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether this member is the backup member.  
        Defaults to **false**.
        """
        return pulumi.get(self, "is_backup")

    @is_backup.setter
    def is_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_backup", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the destination host port for health check.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of health check.  
        The valid values are as follows:
        + **1**: Normal.
        + **2**: Abnormal.

        Defaults to `1` (normal).

        <a name="channel_microservice"></a>
        The `microservice` block supports:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ChannelMemberGroupArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the member group.
        """
        microservice_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the microservice tags of the backend server group.
        """
        microservice_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the microservice port of the backend server group.  
        The valid value ranges from `0` to `65,535`.
        """
        microservice_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the microservice version of the backend server group.
        """
        reference_vpc_channel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the reference load balance channel.
        This parameter is only available if the `type` is **reference**.

        <a name="channel_members"></a>
        The `member` block supports:
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
elif False:
    ChannelMemberGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelMemberGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 microservice_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 microservice_port: Optional[pulumi.Input[_builtins.int]] = None,
                 microservice_version: Optional[pulumi.Input[_builtins.str]] = None,
                 reference_vpc_channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backend server.  
               Required if the parameter `member.id` is set.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the member group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] microservice_labels: Specifies the microservice tags of the backend server group.
        :param pulumi.Input[_builtins.int] microservice_port: Specifies the microservice port of the backend server group.  
               The valid value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] microservice_version: Specifies the microservice version of the backend server group.
        :param pulumi.Input[_builtins.str] reference_vpc_channel_id: Specifies the ID of the reference load balance channel.
               This parameter is only available if the `type` is **reference**.
               
               <a name="channel_members"></a>
               The `member` block supports:
        :param pulumi.Input[_builtins.int] weight: Specifies the weight of current backend server.  
               The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microservice_labels is not None:
            pulumi.set(__self__, "microservice_labels", microservice_labels)
        if microservice_port is not None:
            pulumi.set(__self__, "microservice_port", microservice_port)
        if microservice_version is not None:
            pulumi.set(__self__, "microservice_version", microservice_version)
        if reference_vpc_channel_id is not None:
            pulumi.set(__self__, "reference_vpc_channel_id", reference_vpc_channel_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the backend server.  
        Required if the parameter `member.id` is set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the member group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @microservice_labels.setter
    def microservice_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "microservice_labels", value)

    @_builtins.property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the microservice port of the backend server group.  
        The valid value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "microservice_port")

    @microservice_port.setter
    def microservice_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "microservice_port", value)

    @_builtins.property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @microservice_version.setter
    def microservice_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "microservice_version", value)

    @_builtins.property
    @pulumi.getter(name="referenceVpcChannelId")
    def reference_vpc_channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the reference load balance channel.
        This parameter is only available if the `type` is **reference**.

        <a name="channel_members"></a>
        The `member` block supports:
        """
        return pulumi.get(self, "reference_vpc_channel_id")

    @reference_vpc_channel_id.setter
    def reference_vpc_channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reference_vpc_channel_id", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the weight of current backend server.  
        The valid value ranges from `0` to `10,000`, defaults to `0`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ChannelMicroserviceArgsDict(TypedDict):
        cce_config: NotRequired[pulumi.Input['ChannelMicroserviceCceConfigArgsDict']]
        """
        Specifies the CCE microservice details.  
        The object structure is documented below.

        <a name="microservice_cce_config"></a>
        The `cce_config` block supports:
        """
        cse_config: NotRequired[pulumi.Input['ChannelMicroserviceCseConfigArgsDict']]
        """
        schema:Internal; The CSE microservice details.
        """
elif False:
    ChannelMicroserviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelMicroserviceArgs:
    def __init__(__self__, *,
                 cce_config: Optional[pulumi.Input['ChannelMicroserviceCceConfigArgs']] = None,
                 cse_config: Optional[pulumi.Input['ChannelMicroserviceCseConfigArgs']] = None):
        """
        :param pulumi.Input['ChannelMicroserviceCceConfigArgs'] cce_config: Specifies the CCE microservice details.  
               The object structure is documented below.
               
               <a name="microservice_cce_config"></a>
               The `cce_config` block supports:
        :param pulumi.Input['ChannelMicroserviceCseConfigArgs'] cse_config: schema:Internal; The CSE microservice details.
        """
        if cce_config is not None:
            pulumi.set(__self__, "cce_config", cce_config)
        if cse_config is not None:
            pulumi.set(__self__, "cse_config", cse_config)

    @_builtins.property
    @pulumi.getter(name="cceConfig")
    def cce_config(self) -> Optional[pulumi.Input['ChannelMicroserviceCceConfigArgs']]:
        """
        Specifies the CCE microservice details.  
        The object structure is documented below.

        <a name="microservice_cce_config"></a>
        The `cce_config` block supports:
        """
        return pulumi.get(self, "cce_config")

    @cce_config.setter
    def cce_config(self, value: Optional[pulumi.Input['ChannelMicroserviceCceConfigArgs']]):
        pulumi.set(self, "cce_config", value)

    @_builtins.property
    @pulumi.getter(name="cseConfig")
    def cse_config(self) -> Optional[pulumi.Input['ChannelMicroserviceCseConfigArgs']]:
        """
        schema:Internal; The CSE microservice details.
        """
        return pulumi.get(self, "cse_config")

    @cse_config.setter
    def cse_config(self, value: Optional[pulumi.Input['ChannelMicroserviceCseConfigArgs']]):
        pulumi.set(self, "cse_config", value)


if not MYPY:
    class ChannelMicroserviceCceConfigArgsDict(TypedDict):
        cluster_id: pulumi.Input[_builtins.str]
        """
        Specifies the CCE cluster ID.
        """
        namespace: pulumi.Input[_builtins.str]
        """
        Specifies the namespace, such as the default namespace for CCE cluster: **default**.
        """
        workload_type: pulumi.Input[_builtins.str]
        """
        Specifies the workload type.
        + **deployment**: Stateless load.
        + **statefulset**: Stateful load.
        + **daemonset**: Daemons set.
        """
        label_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the service label key.
        """
        label_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the service label value.
        """
        workload_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The workload name.
        """
elif False:
    ChannelMicroserviceCceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelMicroserviceCceConfigArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 workload_type: pulumi.Input[_builtins.str],
                 label_key: Optional[pulumi.Input[_builtins.str]] = None,
                 label_value: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE cluster ID.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace, such as the default namespace for CCE cluster: **default**.
        :param pulumi.Input[_builtins.str] workload_type: Specifies the workload type.
               + **deployment**: Stateless load.
               + **statefulset**: Stateful load.
               + **daemonset**: Daemons set.
        :param pulumi.Input[_builtins.str] label_key: Specifies the service label key.
        :param pulumi.Input[_builtins.str] label_value: Specifies the service label value.
        :param pulumi.Input[_builtins.str] workload_name: The workload name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "workload_type", workload_type)
        if label_key is not None:
            pulumi.set(__self__, "label_key", label_key)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)
        if workload_name is not None:
            pulumi.set(__self__, "workload_name", workload_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCE cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace, such as the default namespace for CCE cluster: **default**.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workload type.
        + **deployment**: Stateless load.
        + **statefulset**: Stateful load.
        + **daemonset**: Daemons set.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workload_type", value)

    @_builtins.property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service label key.
        """
        return pulumi.get(self, "label_key")

    @label_key.setter
    def label_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label_key", value)

    @_builtins.property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service label value.
        """
        return pulumi.get(self, "label_value")

    @label_value.setter
    def label_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label_value", value)

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The workload name.
        """
        return pulumi.get(self, "workload_name")

    @workload_name.setter
    def workload_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_name", value)


if not MYPY:
    class ChannelMicroserviceCseConfigArgsDict(TypedDict):
        engine_id: pulumi.Input[_builtins.str]
        """
        schema:Internal; The microservice engine ID.
        """
        service_id: pulumi.Input[_builtins.str]
        """
        schema:Internal; The microservice ID.
        """
elif False:
    ChannelMicroserviceCseConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelMicroserviceCseConfigArgs:
    def __init__(__self__, *,
                 engine_id: pulumi.Input[_builtins.str],
                 service_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] engine_id: schema:Internal; The microservice engine ID.
        :param pulumi.Input[_builtins.str] service_id: schema:Internal; The microservice ID.
        """
        pulumi.set(__self__, "engine_id", engine_id)
        pulumi.set(__self__, "service_id", service_id)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Input[_builtins.str]:
        """
        schema:Internal; The microservice engine ID.
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[_builtins.str]:
        """
        schema:Internal; The microservice ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_id", value)


if not MYPY:
    class CustomAuthorizerIdentityArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the parameter location, which support **HEADER** and **QUERY**.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the parameter to be verified.
        The parameter includes front-end and back-end parameters.
        """
        validation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter verification expression.
        If omitted, the custom authorizer will not perform verification.
        The valid value is range form `1` to `2,048`.
        """
elif False:
    CustomAuthorizerIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomAuthorizerIdentityArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 validation: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the parameter location, which support **HEADER** and **QUERY**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter to be verified.
               The parameter includes front-end and back-end parameters.
        :param pulumi.Input[_builtins.str] validation: Specifies the parameter verification expression.
               If omitted, the custom authorizer will not perform verification.
               The valid value is range form `1` to `2,048`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter location, which support **HEADER** and **QUERY**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the parameter to be verified.
        The parameter includes front-end and back-end parameters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter verification expression.
        If omitted, the custom authorizer will not perform verification.
        The valid value is range form `1` to `2,048`.
        """
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validation", value)


if not MYPY:
    class GroupEnvironmentArgsDict(TypedDict):
        environment_id: pulumi.Input[_builtins.str]
        """
        Specifies the environment ID of the associated group.

        <a name="group_environment_variable"></a>
        The `variable` block supports:
        """
        variables: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgsDict']]]
        """
        Specifies an array of one or more environment variables.  
        The object structure is documented below.

        > The environment variables of different groups are isolated in the same environment.
        """
elif False:
    GroupEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupEnvironmentArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[_builtins.str],
                 variables: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]):
        """
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID of the associated group.
               
               <a name="group_environment_variable"></a>
               The `variable` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]] variables: Specifies an array of one or more environment variables.  
               The object structure is documented below.
               
               > The environment variables of different groups are isolated in the same environment.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment ID of the associated group.

        <a name="group_environment_variable"></a>
        The `variable` block supports:
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]:
        """
        Specifies an array of one or more environment variables.  
        The object structure is documented below.

        > The environment variables of different groups are isolated in the same environment.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class GroupEnvironmentVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the variable value.  
        The valid length is limited from `1` to `255` characters.
        Only letters, digits and special characters (_-/.:) are allowed.

        > **NOTE:** The variable value will be displayed in plain text on the console.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The variable ID.
        """
        variable_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
elif False:
    GroupEnvironmentVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 variable_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param pulumi.Input[_builtins.str] value: Specifies the variable value.  
               The valid length is limited from `1` to `255` characters.
               Only letters, digits and special characters (_-/.:) are allowed.
               
               > **NOTE:** The variable value will be displayed in plain text on the console.
        :param pulumi.Input[_builtins.str] id: The variable ID.
        :param pulumi.Input[_builtins.str] variable_id: schema: Deprecated; The ID of the variable that the group has.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            warnings.warn("""Use 'id' instead""", DeprecationWarning)
            pulumi.log.warn("""variable_id is deprecated: Use 'id' instead""")
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable value.  
        The valid length is limited from `1` to `255` characters.
        Only letters, digits and special characters (_-/.:) are allowed.

        > **NOTE:** The variable value will be displayed in plain text on the console.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
        return pulumi.get(self, "variable_id")

    @variable_id.setter
    def variable_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "variable_id", value)


if not MYPY:
    class GroupUrlDomainArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        is_http_redirect_to_https: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable redirection from `HTTP` to `HTTPS`.
        """
        min_ssl_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The minimum SSL protocol version.
        + **TLSv1.1**
        + **TLSv1.2**
        """
elif False:
    GroupUrlDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupUrlDomainArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 is_http_redirect_to_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 min_ssl_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param pulumi.Input[_builtins.bool] is_http_redirect_to_https: Whether to enable redirection from `HTTP` to `HTTPS`.
        :param pulumi.Input[_builtins.str] min_ssl_version: The minimum SSL protocol version.
               + **TLSv1.1**
               + **TLSv1.2**
        """
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable redirection from `HTTP` to `HTTPS`.
        """
        return pulumi.get(self, "is_http_redirect_to_https")

    @is_http_redirect_to_https.setter
    def is_http_redirect_to_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_http_redirect_to_https", value)

    @_builtins.property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The minimum SSL protocol version.
        + **TLSv1.1**
        + **TLSv1.2**
        """
        return pulumi.get(self, "min_ssl_version")

    @min_ssl_version.setter
    def min_ssl_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_ssl_version", value)


if not MYPY:
    class InstanceCustomIngressPortArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Specified port of the custom ingress port.
        The valid value is range form `1,024` to `49,151`.

        > Currently, in the same dedicated instance, a maximum of `40` custom ingress ports can be created,
        and one port can only support one protocol.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specified protocol of the custom ingress port.  
        The valid values are as follows:
        + **HTTP**
        + **HTTPS**
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the custom ingress port.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The current status of the custom ingress port.
        + **normal**
        + **abnormal**
        """
elif False:
    InstanceCustomIngressPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceCustomIngressPortArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] port: Specified port of the custom ingress port.
               The valid value is range form `1,024` to `49,151`.
               
               > Currently, in the same dedicated instance, a maximum of `40` custom ingress ports can be created,
               and one port can only support one protocol.
        :param pulumi.Input[_builtins.str] protocol: Specified protocol of the custom ingress port.  
               The valid values are as follows:
               + **HTTP**
               + **HTTPS**
        :param pulumi.Input[_builtins.str] id: The ID of the custom ingress port.
        :param pulumi.Input[_builtins.str] status: The current status of the custom ingress port.
               + **normal**
               + **abnormal**
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specified port of the custom ingress port.
        The valid value is range form `1,024` to `49,151`.

        > Currently, in the same dedicated instance, a maximum of `40` custom ingress ports can be created,
        and one port can only support one protocol.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specified protocol of the custom ingress port.  
        The valid values are as follows:
        + **HTTP**
        + **HTTPS**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the custom ingress port.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the custom ingress port.
        + **normal**
        + **abnormal**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ResponseRuleArgsDict(TypedDict):
        body: pulumi.Input[_builtins.str]
        """
        Specifies the body template of the API response rule, e.g.
        `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        """
        error_type: pulumi.Input[_builtins.str]
        """
        Specifies the error type of the API response rule.
        The valid values and the related default status code are as follows:
        + **ACCESS_DENIED**: (**403**) Access denied.
        + **AUTH_FAILURE**: (**401**) Authentication failed.
        + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
        + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
        + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
        + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
        + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
        + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
        + **NOT_FOUND**: (**404**) No API is found.
        + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
        + **THROTTLED**: (**429**) The request was rejected due to request throttling.
        + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
        + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
        + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
        + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
        + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
        + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        """
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ResponseRuleHeaderArgsDict']]]]
        """
        Specifies the configuration of the custom response headers.  
        The headers structure is documented below.

        <a name="custom_response_rule_headers"></a>
        The `headers` block supports:
        """
        status_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the HTTP status code of the API response rule.
        The valid value is range from `200` to `599`.
        """
elif False:
    ResponseRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResponseRuleArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[_builtins.str],
                 error_type: pulumi.Input[_builtins.str],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ResponseRuleHeaderArgs']]]] = None,
                 status_code: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] body: Specifies the body template of the API response rule, e.g.
               `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        :param pulumi.Input[_builtins.str] error_type: Specifies the error type of the API response rule.
               The valid values and the related default status code are as follows:
               + **ACCESS_DENIED**: (**403**) Access denied.
               + **AUTH_FAILURE**: (**401**) Authentication failed.
               + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
               + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
               + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
               + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
               + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
               + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
               + **NOT_FOUND**: (**404**) No API is found.
               + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
               + **THROTTLED**: (**429**) The request was rejected due to request throttling.
               + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
               + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
               + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
               + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
               + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
               + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        :param pulumi.Input[Sequence[pulumi.Input['ResponseRuleHeaderArgs']]] headers: Specifies the configuration of the custom response headers.  
               The headers structure is documented below.
               
               <a name="custom_response_rule_headers"></a>
               The `headers` block supports:
        :param pulumi.Input[_builtins.int] status_code: Specifies the HTTP status code of the API response rule.
               The valid value is range from `200` to `599`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "error_type", error_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the body template of the API response rule, e.g.
        `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="errorType")
    def error_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the error type of the API response rule.
        The valid values and the related default status code are as follows:
        + **ACCESS_DENIED**: (**403**) Access denied.
        + **AUTH_FAILURE**: (**401**) Authentication failed.
        + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
        + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
        + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
        + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
        + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
        + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
        + **NOT_FOUND**: (**404**) No API is found.
        + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
        + **THROTTLED**: (**429**) The request was rejected due to request throttling.
        + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
        + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
        + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
        + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
        + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
        + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        """
        return pulumi.get(self, "error_type")

    @error_type.setter
    def error_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "error_type", value)

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResponseRuleHeaderArgs']]]]:
        """
        Specifies the configuration of the custom response headers.  
        The headers structure is documented below.

        <a name="custom_response_rule_headers"></a>
        The `headers` block supports:
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResponseRuleHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the HTTP status code of the API response rule.
        The valid value is range from `200` to `599`.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ResponseRuleHeaderArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the key name of the response header.
        The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value for the specified response header key.
        The valid length is limited from `1` to `1,024`.
        """
elif False:
    ResponseRuleHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResponseRuleHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the key name of the response header.
               The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] value: Specifies the value for the specified response header key.
               The valid length is limited from `1` to `1,024`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key name of the response header.
        The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value for the specified response header key.
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ThrottlingPolicyAppThrottleArgsDict(TypedDict):
        max_api_requests: pulumi.Input[_builtins.int]
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        throttling_object_id: pulumi.Input[_builtins.str]
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        ID of the special user/application throttling policy.
        """
        throttling_object_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The object name which the special user/application throttling policy belongs.
        """
elif False:
    ThrottlingPolicyAppThrottleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThrottlingPolicyAppThrottleArgs:
    def __init__(__self__, *,
                 max_api_requests: pulumi.Input[_builtins.int],
                 throttling_object_id: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 throttling_object_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param pulumi.Input[_builtins.str] throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param pulumi.Input[_builtins.str] id: ID of the special user/application throttling policy.
        :param pulumi.Input[_builtins.str] throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @max_api_requests.setter
    def max_api_requests(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_api_requests", value)

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @throttling_object_id.setter
    def throttling_object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "throttling_object_id", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")

    @throttling_object_name.setter
    def throttling_object_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "throttling_object_name", value)


if not MYPY:
    class ThrottlingPolicyUserThrottleArgsDict(TypedDict):
        max_api_requests: pulumi.Input[_builtins.int]
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        throttling_object_id: pulumi.Input[_builtins.str]
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        ID of the special user/application throttling policy.
        """
        throttling_object_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The object name which the special user/application throttling policy belongs.
        """
elif False:
    ThrottlingPolicyUserThrottleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThrottlingPolicyUserThrottleArgs:
    def __init__(__self__, *,
                 max_api_requests: pulumi.Input[_builtins.int],
                 throttling_object_id: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 throttling_object_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param pulumi.Input[_builtins.str] throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param pulumi.Input[_builtins.str] id: ID of the special user/application throttling policy.
        :param pulumi.Input[_builtins.str] throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @max_api_requests.setter
    def max_api_requests(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_api_requests", value)

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @throttling_object_id.setter
    def throttling_object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "throttling_object_id", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")

    @throttling_object_name.setter
    def throttling_object_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "throttling_object_name", value)


if not MYPY:
    class VpcChannelMemberArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ECS ID for each backend servers.
        Required if the `member_type` is **ECS**.
        This parameter and `ip_address` are alternative.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the IP address each backend servers.
        Required if the `member_type` is **EIP**.
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the backend server weight.
        The valid value ranges from `1` to `100`, defaults to `1`.
        """
elif False:
    VpcChannelMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcChannelMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ECS ID for each backend servers.
               Required if the `member_type` is **ECS**.
               This parameter and `ip_address` are alternative.
        :param pulumi.Input[_builtins.str] ip_address: Specifies the IP address each backend servers.
               Required if the `member_type` is **EIP**.
        :param pulumi.Input[_builtins.int] weight: Specifies the backend server weight.
               The valid value ranges from `1` to `100`, defaults to `1`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ECS ID for each backend servers.
        Required if the `member_type` is **ECS**.
        This parameter and `ip_address` are alternative.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address each backend servers.
        Required if the `member_type` is **EIP**.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the backend server weight.
        The valid value ranges from `1` to `100`, defaults to `1`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class GetInstancesFilterMatchArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        value: NotRequired[_builtins.str]
        """
        Specifies the value of the matching field. Fuzzy match is supported.
        """
elif False:
    GetInstancesFilterMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetInstancesFilterMatchArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key to be matched.  
               The valid values are as follows:
               + **resource_name**
        :param _builtins.str value: Specifies the value of the matching field. Fuzzy match is supported.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the matching field. Fuzzy match is supported.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetInstancesFilterTagArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        values: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the list of values of the tag.

        <a name="data_instances_filter_matches"></a>
        The `matches` block supports:
        """
elif False:
    GetInstancesFilterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetInstancesFilterTagArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key to be matched.  
               The valid values are as follows:
               + **resource_name**
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
               
               <a name="data_instances_filter_matches"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key to be matched.  
        The valid values are as follows:
        + **resource_name**
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.

        <a name="data_instances_filter_matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "values", value)


