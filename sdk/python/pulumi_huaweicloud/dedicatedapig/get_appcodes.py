# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppcodesResult',
    'AwaitableGetAppcodesResult',
    'get_appcodes',
    'get_appcodes_output',
]

@pulumi.output_type
class GetAppcodesResult:
    """
    A collection of values returned by getAppcodes.
    """
    def __init__(__self__, appcodes=None, application_id=None, id=None, instance_id=None, region=None):
        if appcodes and not isinstance(appcodes, list):
            raise TypeError("Expected argument 'appcodes' to be a list")
        pulumi.set(__self__, "appcodes", appcodes)
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def appcodes(self) -> Sequence['outputs.GetAppcodesAppcodeResult']:
        """
        All APPCODEs of the specified application.
        The app_codes structure is documented below.
        """
        return pulumi.get(self, "appcodes")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAppcodesResult(GetAppcodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppcodesResult(
            appcodes=self.appcodes,
            application_id=self.application_id,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_appcodes(application_id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppcodesResult:
    """
    Use this data source to query the APPCODEs of the specified APIG application within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    application_id = config.require_object("applicationId")
    test = huaweicloud.DedicatedApig.get_appcodes(instance_id=instance_id,
        application_id=application_id)
    ```


    :param _builtins.str application_id: Specifies the ID of the application to be queried.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the application belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getAppcodes:getAppcodes', __args__, opts=opts, typ=GetAppcodesResult).value

    return AwaitableGetAppcodesResult(
        appcodes=pulumi.get(__ret__, 'appcodes'),
        application_id=pulumi.get(__ret__, 'application_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_appcodes_output(application_id: Optional[pulumi.Input[_builtins.str]] = None,
                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppcodesResult]:
    """
    Use this data source to query the APPCODEs of the specified APIG application within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    application_id = config.require_object("applicationId")
    test = huaweicloud.DedicatedApig.get_appcodes(instance_id=instance_id,
        application_id=application_id)
    ```


    :param _builtins.str application_id: Specifies the ID of the application to be queried.
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the application belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getAppcodes:getAppcodes', __args__, opts=opts, typ=GetAppcodesResult)
    return __ret__.apply(lambda __response__: GetAppcodesResult(
        appcodes=pulumi.get(__response__, 'appcodes'),
        application_id=pulumi.get(__response__, 'application_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
