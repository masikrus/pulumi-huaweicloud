# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPluginsResult',
    'AwaitableGetPluginsResult',
    'get_plugins',
    'get_plugins_output',
]

@pulumi.output_type
class GetPluginsResult:
    """
    A collection of values returned by getPlugins.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, plugin_id=None, plugin_scope=None, plugins=None, precise_search=None, region=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plugin_id and not isinstance(plugin_id, str):
            raise TypeError("Expected argument 'plugin_id' to be a str")
        pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_scope and not isinstance(plugin_scope, str):
            raise TypeError("Expected argument 'plugin_scope' to be a str")
        pulumi.set(__self__, "plugin_scope", plugin_scope)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)
        if precise_search and not isinstance(precise_search, str):
            raise TypeError("Expected argument 'precise_search' to be a str")
        pulumi.set(__self__, "precise_search", precise_search)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "plugin_id")

    @_builtins.property
    @pulumi.getter(name="pluginScope")
    def plugin_scope(self) -> Optional[_builtins.str]:
        """
        The scope of the plugin.
        """
        return pulumi.get(self, "plugin_scope")

    @_builtins.property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetPluginsPluginResult']:
        """
        All plugins that match the filter parameters.
        """
        return pulumi.get(self, "plugins")

    @_builtins.property
    @pulumi.getter(name="preciseSearch")
    def precise_search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "precise_search")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the plugin.
        """
        return pulumi.get(self, "type")


class AwaitableGetPluginsResult(GetPluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPluginsResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            plugin_id=self.plugin_id,
            plugin_scope=self.plugin_scope,
            plugins=self.plugins,
            precise_search=self.precise_search,
            region=self.region,
            type=self.type)


def get_plugins(instance_id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                plugin_id: Optional[_builtins.str] = None,
                plugin_scope: Optional[_builtins.str] = None,
                precise_search: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                type: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPluginsResult:
    """
    Use this data source to get plugin list under the specified dedicated instance within HuaweiCloud.

    ## Example Usage

    ### Query all plugins under specified instance

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_plugins(instance_id=instance_id)
    ```

    ### Query the plugins by the specified plugin ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    plugin_id = config.require_object("pluginId")
    test = huaweicloud.DedicatedApig.get_plugins(instance_id=instance_id,
        plugin_id=plugin_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the plugin belongs.
    :param _builtins.str name: Specifies the name of the plugin. Fuzzy search is supported.
    :param _builtins.str plugin_id: Specifies the ID of the plugin.
    :param _builtins.str plugin_scope: Specifies the scope of the plugin.  
           The valid values are as follows:
           + **global**
    :param _builtins.str precise_search: Specifies the name of the parameter to be matched exactly.  
           The valid values are as follows:
           + **name**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the plugin.  
           The valid values are as follows:
           + **cors**
           + **set_resp_headers**
           + **rate_limit**
           + **kafka_log**
           + **breaker**
           + **third_auth**
           + **proxy_cache**
           + **proxy_mirror**
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['pluginId'] = plugin_id
    __args__['pluginScope'] = plugin_scope
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getPlugins:getPlugins', __args__, opts=opts, typ=GetPluginsResult).value

    return AwaitableGetPluginsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        plugin_id=pulumi.get(__ret__, 'plugin_id'),
        plugin_scope=pulumi.get(__ret__, 'plugin_scope'),
        plugins=pulumi.get(__ret__, 'plugins'),
        precise_search=pulumi.get(__ret__, 'precise_search'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_plugins_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       plugin_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       plugin_scope: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       precise_search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPluginsResult]:
    """
    Use this data source to get plugin list under the specified dedicated instance within HuaweiCloud.

    ## Example Usage

    ### Query all plugins under specified instance

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_plugins(instance_id=instance_id)
    ```

    ### Query the plugins by the specified plugin ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    plugin_id = config.require_object("pluginId")
    test = huaweicloud.DedicatedApig.get_plugins(instance_id=instance_id,
        plugin_id=plugin_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the plugin belongs.
    :param _builtins.str name: Specifies the name of the plugin. Fuzzy search is supported.
    :param _builtins.str plugin_id: Specifies the ID of the plugin.
    :param _builtins.str plugin_scope: Specifies the scope of the plugin.  
           The valid values are as follows:
           + **global**
    :param _builtins.str precise_search: Specifies the name of the parameter to be matched exactly.  
           The valid values are as follows:
           + **name**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the plugin.  
           The valid values are as follows:
           + **cors**
           + **set_resp_headers**
           + **rate_limit**
           + **kafka_log**
           + **breaker**
           + **third_auth**
           + **proxy_cache**
           + **proxy_mirror**
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['pluginId'] = plugin_id
    __args__['pluginScope'] = plugin_scope
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getPlugins:getPlugins', __args__, opts=opts, typ=GetPluginsResult)
    return __ret__.apply(lambda __response__: GetPluginsResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        plugin_id=pulumi.get(__response__, 'plugin_id'),
        plugin_scope=pulumi.get(__response__, 'plugin_scope'),
        plugins=pulumi.get(__response__, 'plugins'),
        precise_search=pulumi.get(__response__, 'precise_search'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
