# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetThrottlingPoliciesResult',
    'AwaitableGetThrottlingPoliciesResult',
    'get_throttling_policies',
    'get_throttling_policies_output',
]

@pulumi.output_type
class GetThrottlingPoliciesResult:
    """
    A collection of values returned by getThrottlingPolicies.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, policies=None, policy_id=None, region=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetThrottlingPoliciesPolicyResult']:
        """
        All throttling policies that match the filter parameters.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the throttling policy.
        """
        return pulumi.get(self, "type")


class AwaitableGetThrottlingPoliciesResult(GetThrottlingPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetThrottlingPoliciesResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            policies=self.policies,
            policy_id=self.policy_id,
            region=self.region,
            type=self.type)


def get_throttling_policies(instance_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            policy_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            type: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetThrottlingPoliciesResult:
    """
    Use this data source to get the list of the throttling policies under the APIG instance within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_throttling_policies(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the throttling policies belong.
    :param _builtins.str name: Specifies the name of the throttling policy. Fuzzy search is supported.
    :param _builtins.str policy_id: Specifies the ID of the throttling policy.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: The type of the throttling policy.
           The valid values are as follows:
           + **API-based**: Limiting the maximum number of times a single API bound to the policy can be called within the
           specified period.
           + **API-shared**: Limiting the maximum number of times all APIs bound to the policy can be called within the specified
           period.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getThrottlingPolicies:getThrottlingPolicies', __args__, opts=opts, typ=GetThrottlingPoliciesResult).value

    return AwaitableGetThrottlingPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_throttling_policies_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetThrottlingPoliciesResult]:
    """
    Use this data source to get the list of the throttling policies under the APIG instance within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.DedicatedApig.get_throttling_policies(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the throttling policies belong.
    :param _builtins.str name: Specifies the name of the throttling policy. Fuzzy search is supported.
    :param _builtins.str policy_id: Specifies the ID of the throttling policy.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: The type of the throttling policy.
           The valid values are as follows:
           + **API-based**: Limiting the maximum number of times a single API bound to the policy can be called within the
           specified period.
           + **API-shared**: Limiting the maximum number of times all APIs bound to the policy can be called within the specified
           period.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getThrottlingPolicies:getThrottlingPolicies', __args__, opts=opts, typ=GetThrottlingPoliciesResult)
    return __ret__.apply(lambda __response__: GetThrottlingPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        policies=pulumi.get(__response__, 'policies'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
