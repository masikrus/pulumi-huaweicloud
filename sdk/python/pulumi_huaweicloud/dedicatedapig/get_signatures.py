# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSignaturesResult',
    'AwaitableGetSignaturesResult',
    'get_signatures',
    'get_signatures_output',
]

@pulumi.output_type
class GetSignaturesResult:
    """
    A collection of values returned by getSignatures.
    """
    def __init__(__self__, algorithm=None, id=None, instance_id=None, name=None, region=None, signature_id=None, signatures=None, type=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if signature_id and not isinstance(signature_id, str):
            raise TypeError("Expected argument 'signature_id' to be a str")
        pulumi.set(__self__, "signature_id", signature_id)
        if signatures and not isinstance(signatures, list):
            raise TypeError("Expected argument 'signatures' to be a list")
        pulumi.set(__self__, "signatures", signatures)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[_builtins.str]:
        """
        The algorithm of the signature.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the signature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "signature_id")

    @_builtins.property
    @pulumi.getter
    def signatures(self) -> Sequence['outputs.GetSignaturesSignatureResult']:
        """
        All signature key that match the filter parameters.
        The signatures structure is documented below.
        """
        return pulumi.get(self, "signatures")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the signature.
        """
        return pulumi.get(self, "type")


class AwaitableGetSignaturesResult(GetSignaturesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSignaturesResult(
            algorithm=self.algorithm,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            signature_id=self.signature_id,
            signatures=self.signatures,
            type=self.type)


def get_signatures(algorithm: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   signature_id: Optional[_builtins.str] = None,
                   type: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSignaturesResult:
    """
    Use this data source to query the signatures under the specified APIG instance within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    signature_name = config.require_object("signatureName")
    test = huaweicloud.DedicatedApig.get_signatures(instance_id=instance_id,
        name=signature_name)
    ```


    :param _builtins.str algorithm: Specifies the algorithm of the signature to be queried.  
           This parameter is only available when signature `type` is `aes`.
           The valid values are as follows:
           + **aes-128-cfb**
           + **aes-256-cfb**
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the signatrues belong.
    :param _builtins.str name: Specifies the name of signature to be queried.  
           The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
           allowed. The name must start with an English letter or Chinese character.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str signature_id: Specifies the ID of signature to be queried.
    :param _builtins.str type: Specifies the type of signature to be queried.  
           The valid values are as follows:
           + **basic**: Basic auth type.
           + **hmac**: HMAC type.
           + **aes**: AES type
    """
    __args__ = dict()
    __args__['algorithm'] = algorithm
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['signatureId'] = signature_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedApig/getSignatures:getSignatures', __args__, opts=opts, typ=GetSignaturesResult).value

    return AwaitableGetSignaturesResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        signature_id=pulumi.get(__ret__, 'signature_id'),
        signatures=pulumi.get(__ret__, 'signatures'),
        type=pulumi.get(__ret__, 'type'))
def get_signatures_output(algorithm: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          signature_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSignaturesResult]:
    """
    Use this data source to query the signatures under the specified APIG instance within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    signature_name = config.require_object("signatureName")
    test = huaweicloud.DedicatedApig.get_signatures(instance_id=instance_id,
        name=signature_name)
    ```


    :param _builtins.str algorithm: Specifies the algorithm of the signature to be queried.  
           This parameter is only available when signature `type` is `aes`.
           The valid values are as follows:
           + **aes-128-cfb**
           + **aes-256-cfb**
    :param _builtins.str instance_id: Specifies the ID of the dedicated instance to which the signatrues belong.
    :param _builtins.str name: Specifies the name of signature to be queried.  
           The valid length is limited from `3` to `64`, only English letters, Chinese characters, digits and underscores (_) are
           allowed. The name must start with an English letter or Chinese character.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str signature_id: Specifies the ID of signature to be queried.
    :param _builtins.str type: Specifies the type of signature to be queried.  
           The valid values are as follows:
           + **basic**: Basic auth type.
           + **hmac**: HMAC type.
           + **aes**: AES type
    """
    __args__ = dict()
    __args__['algorithm'] = algorithm
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['signatureId'] = signature_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedApig/getSignatures:getSignatures', __args__, opts=opts, typ=GetSignaturesResult)
    return __ret__.apply(lambda __response__: GetSignaturesResult(
        algorithm=pulumi.get(__response__, 'algorithm'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        signature_id=pulumi.get(__response__, 'signature_id'),
        signatures=pulumi.get(__response__, 'signatures'),
        type=pulumi.get(__response__, 'type')))
