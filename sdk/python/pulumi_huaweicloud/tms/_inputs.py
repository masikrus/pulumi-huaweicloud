# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ResourceTagsResourceArgs',
    'ResourceTagsResourceArgsDict',
    'TagsTagArgs',
    'TagsTagArgsDict',
    'GetResourceInstancesTagArgs',
    'GetResourceInstancesTagArgsDict',
]

MYPY = False

if not MYPY:
    class ResourceTagsResourceArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID.
        """
        resource_type: pulumi.Input[_builtins.str]
        """
        Specifies the resource type.
        """
elif False:
    ResourceTagsResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceTagsResourceArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the resource type.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class TagsTagArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the tag key. The value can contain up to `36` characters. Only English letters,
        Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the tag value. The value can contain up to `43` characters. Only English letters,
        Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
        """
elif False:
    TagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TagsTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the tag key. The value can contain up to `36` characters. Only English letters,
               Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] value: Specifies the tag value. The value can contain up to `43` characters. Only English letters,
               Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag key. The value can contain up to `36` characters. Only English letters,
        Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag value. The value can contain up to `43` characters. Only English letters,
        Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetResourceInstancesTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the tag key.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the tag values.
        """
elif False:
    GetResourceInstancesTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key.
        :param Sequence[_builtins.str] values: Specifies the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the tag values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


