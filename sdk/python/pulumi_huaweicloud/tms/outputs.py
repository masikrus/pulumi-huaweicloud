# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ResourceTagsResource',
    'TagsTag',
    'GetQuotasQuotaResult',
    'GetResourceInstancesErrorResult',
    'GetResourceInstancesResourceResult',
    'GetResourceInstancesResourceTagResult',
    'GetResourceInstancesTagResult',
    'GetResourceTypesTypeResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class ResourceTagsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTagsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTagsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTagsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_type: Specifies the resource type.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class TagsTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the tag key. The value can contain up to `36` characters. Only English letters,
               Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
        :param _builtins.str value: Specifies the tag value. The value can contain up to `43` characters. Only English letters,
               Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key. The value can contain up to `36` characters. Only English letters,
        Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the tag value. The value can contain up to `43` characters. Only English letters,
        Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 quota_key: _builtins.str,
                 quota_limit: _builtins.int,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str quota_key: Indicates the quota key.
        :param _builtins.int quota_limit: Indicates the quota value.
        :param _builtins.str unit: Indicates the unit.
        :param _builtins.int used: Indicates the quota used.
        """
        pulumi.set(__self__, "quota_key", quota_key)
        pulumi.set(__self__, "quota_limit", quota_limit)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="quotaKey")
    def quota_key(self) -> _builtins.str:
        """
        Indicates the quota key.
        """
        return pulumi.get(self, "quota_key")

    @_builtins.property
    @pulumi.getter(name="quotaLimit")
    def quota_limit(self) -> _builtins.int:
        """
        Indicates the quota value.
        """
        return pulumi.get(self, "quota_limit")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        Indicates the unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the quota used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourceInstancesErrorResult(dict):
    def __init__(__self__, *,
                 error_code: _builtins.str,
                 error_msg: _builtins.str,
                 project_id: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str error_code: Indicates the error code.
        :param _builtins.str error_msg: Indicates the error message.
        :param _builtins.str project_id: Specifies the project ID. It is mandatory when `resource_types` contains region-specific
               service.
        :param _builtins.str resource_type: Indicates the resource type.
        """
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_msg", error_msg)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Indicates the error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Specifies the project ID. It is mandatory when `resource_types` contains region-specific
        service.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetResourceInstancesResourceResult(dict):
    def __init__(__self__, *,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 tags: Sequence['outputs.GetResourceInstancesResourceTagResult']):
        """
        :param _builtins.str project_id: Specifies the project ID. It is mandatory when `resource_types` contains region-specific
               service.
        :param _builtins.str project_name: Indicates the project name.
        :param _builtins.str resource_id: Indicates the resource ID.
        :param _builtins.str resource_name: Indicates the resource name.
        :param _builtins.str resource_type: Indicates the resource type.
        :param Sequence['GetResourceInstancesResourceTagArgs'] tags: Specifies the tags.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Specifies the project ID. It is mandatory when `resource_types` contains region-specific
        service.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        Indicates the project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceInstancesResourceTagResult']:
        """
        Specifies the tags.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceInstancesResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the tag key.
        :param _builtins.str value: Indicates the tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key.
        :param Sequence[_builtins.str] values: Specifies the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceTypesTypeResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 is_global: _builtins.bool,
                 name: _builtins.str,
                 service_name: _builtins.str):
        """
        :param _builtins.str display_name: The service display name of the resource type.
        :param _builtins.bool is_global: Whether the resource corresponding to this type is a global resource.
        :param _builtins.str name: The resource type name.
        :param _builtins.str service_name: Specifies the service name used to filter resource types information.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_global", is_global)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The service display name of the resource type.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="isGlobal")
    def is_global(self) -> _builtins.bool:
        """
        Whether the resource corresponding to this type is a global resource.
        """
        return pulumi.get(self, "is_global")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource type name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Specifies the service name used to filter resource types information.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 update_time: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the tag key.
               Fuzzy search is supported. Key is case-insensitive. If the key contains non-URL-safe characters, it must be URL encoded.
        :param _builtins.str update_time: Indicates the time when the tag is updated.
        :param _builtins.str value: Specifies the tag value.
               Fuzzy search is supported. Value is case-insensitive. If the value contains non-URL-safe characters, it must be URL encoded.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        Fuzzy search is supported. Key is case-insensitive. If the key contains non-URL-safe characters, it must be URL encoded.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the time when the tag is updated.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the tag value.
        Fuzzy search is supported. Value is case-insensitive. If the value contains non-URL-safe characters, it must be URL encoded.
        """
        return pulumi.get(self, "value")


