# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTagsResult',
    'AwaitableGetTagsResult',
    'get_tags',
    'get_tags_output',
]

@pulumi.output_type
class GetTagsResult:
    """
    A collection of values returned by getTags.
    """
    def __init__(__self__, id=None, key=None, order_field=None, order_method=None, tags=None, value=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if order_field and not isinstance(order_field, str):
            raise TypeError("Expected argument 'order_field' to be a str")
        pulumi.set(__self__, "order_field", order_field)
        if order_method and not isinstance(order_method, str):
            raise TypeError("Expected argument 'order_method' to be a str")
        pulumi.set(__self__, "order_method", order_method)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Indicates the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="orderField")
    def order_field(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_field")

    @_builtins.property
    @pulumi.getter(name="orderMethod")
    def order_method(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_method")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTagsTagResult']:
        """
        Indicates the list of tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the value of the tag.
        """
        return pulumi.get(self, "value")


class AwaitableGetTagsResult(GetTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagsResult(
            id=self.id,
            key=self.key,
            order_field=self.order_field,
            order_method=self.order_method,
            tags=self.tags,
            value=self.value)


def get_tags(key: Optional[_builtins.str] = None,
             order_field: Optional[_builtins.str] = None,
             order_method: Optional[_builtins.str] = None,
             value: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagsResult:
    """
    Use this data source to get the list of predefined tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Tms.get_tags()
    ```


    :param _builtins.str key: Specifies the tag key.
           Fuzzy search is supported. Key is case-insensitive. If the key contains non-URL-safe characters, it must be URL encoded.
    :param _builtins.str order_field: Specifies the sorting field:
           The field is case-sensitive, value options:
           + **update_time**: keys and values are sorted in ascending order.
           + **key**: values of `update_time` are sorted in descending order and `value` in ascending order.
           + **value**: values of `update_time` are sorted in descending order and `key` in ascending order.
           
           Defaults to **update_time**.
    :param _builtins.str order_method: Specifies the sorting method of the `order_field` field.
           The method is case-sensitive and can be:
           + **asc**: ascending order
           + **desc**: descending order
           
           Defaults to **desc**.
    :param _builtins.str value: Specifies the tag value.
           Fuzzy search is supported. Value is case-insensitive. If the value contains non-URL-safe characters, it must be URL encoded.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['orderField'] = order_field
    __args__['orderMethod'] = order_method
    __args__['value'] = value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Tms/getTags:getTags', __args__, opts=opts, typ=GetTagsResult).value

    return AwaitableGetTagsResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        order_field=pulumi.get(__ret__, 'order_field'),
        order_method=pulumi.get(__ret__, 'order_method'),
        tags=pulumi.get(__ret__, 'tags'),
        value=pulumi.get(__ret__, 'value'))
def get_tags_output(key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    order_field: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    order_method: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTagsResult]:
    """
    Use this data source to get the list of predefined tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Tms.get_tags()
    ```


    :param _builtins.str key: Specifies the tag key.
           Fuzzy search is supported. Key is case-insensitive. If the key contains non-URL-safe characters, it must be URL encoded.
    :param _builtins.str order_field: Specifies the sorting field:
           The field is case-sensitive, value options:
           + **update_time**: keys and values are sorted in ascending order.
           + **key**: values of `update_time` are sorted in descending order and `value` in ascending order.
           + **value**: values of `update_time` are sorted in descending order and `key` in ascending order.
           
           Defaults to **update_time**.
    :param _builtins.str order_method: Specifies the sorting method of the `order_field` field.
           The method is case-sensitive and can be:
           + **asc**: ascending order
           + **desc**: descending order
           
           Defaults to **desc**.
    :param _builtins.str value: Specifies the tag value.
           Fuzzy search is supported. Value is case-insensitive. If the value contains non-URL-safe characters, it must be URL encoded.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['orderField'] = order_field
    __args__['orderMethod'] = order_method
    __args__['value'] = value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Tms/getTags:getTags', __args__, opts=opts, typ=GetTagsResult)
    return __ret__.apply(lambda __response__: GetTagsResult(
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        order_field=pulumi.get(__response__, 'order_field'),
        order_method=pulumi.get(__response__, 'order_method'),
        tags=pulumi.get(__response__, 'tags'),
        value=pulumi.get(__response__, 'value')))
