# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceTagsArgs', 'ResourceTags']

@pulumi.input_type
class ResourceTagsArgs:
    def __init__(__self__, *,
                 resources: pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]],
                 tags: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourceTags resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]] resources: Specifies the managed resource configuration.  
               The resources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies resource tags for batch management.
               + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
               Chinese characters are allowed.
               + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
               underscores (_) and Chinese characters are allowed.
               
               <a name="tags_resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies project ID to which the managed resources belong.  
               Required if the resources are project level. Changing this will create a new resource.
        """
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "tags", tags)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]]:
        """
        Specifies the managed resource configuration.  
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Specifies resource tags for batch management.
        + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
        Chinese characters are allowed.
        + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
        underscores (_) and Chinese characters are allowed.

        <a name="tags_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies project ID to which the managed resources belong.  
        Required if the resources are project level. Changing this will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _ResourceTagsState:
    def __init__(__self__, *,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ResourceTags resources.
        :param pulumi.Input[_builtins.str] project_id: Specifies project ID to which the managed resources belong.  
               Required if the resources are project level. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]] resources: Specifies the managed resource configuration.  
               The resources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies resource tags for batch management.
               + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
               Chinese characters are allowed.
               + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
               underscores (_) and Chinese characters are allowed.
               
               <a name="tags_resources"></a>
               The `resources` block supports:
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies project ID to which the managed resources belong.  
        Required if the resources are project level. Changing this will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]]]:
        """
        Specifies the managed resource configuration.  
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTagsResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies resource tags for batch management.
        + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
        Chinese characters are allowed.
        + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
        underscores (_) and Chinese characters are allowed.

        <a name="tags_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:Tms/resourceTags:ResourceTags")
class ResourceTags(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceTagsResourceArgs', 'ResourceTagsResourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Using this resource to manage tags of other service resources in batches within HuaweiCloud.

        > The `tags` parameters of this resource and each service resource will affect each other, and should be managed in
        only one way as much as possible. You can use `lifecycle.ignore_changes` to ignore resource changes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resources_project_id = config.require_object("resourcesProjectId")
        resources_configuration = config.require_object("resourcesConfiguration")
        test = huaweicloud.tms.ResourceTags("test",
            resources=[{
                "resource_type": entry["value"]["type"],
                "resource_id": entry["value"]["id"],
            } for entry in [{"key": k, "value": v} for k, v in resources_configuration]],
            project_id=resources_project_id,
            tags={
                "foo": "bar",
                "owner": "terraform",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies project ID to which the managed resources belong.  
               Required if the resources are project level. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceTagsResourceArgs', 'ResourceTagsResourceArgsDict']]]] resources: Specifies the managed resource configuration.  
               The resources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies resource tags for batch management.
               + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
               Chinese characters are allowed.
               + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
               underscores (_) and Chinese characters are allowed.
               
               <a name="tags_resources"></a>
               The `resources` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceTagsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage tags of other service resources in batches within HuaweiCloud.

        > The `tags` parameters of this resource and each service resource will affect each other, and should be managed in
        only one way as much as possible. You can use `lifecycle.ignore_changes` to ignore resource changes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resources_project_id = config.require_object("resourcesProjectId")
        resources_configuration = config.require_object("resourcesConfiguration")
        test = huaweicloud.tms.ResourceTags("test",
            resources=[{
                "resource_type": entry["value"]["type"],
                "resource_id": entry["value"]["id"],
            } for entry in [{"key": k, "value": v} for k, v in resources_configuration]],
            project_id=resources_project_id,
            tags={
                "foo": "bar",
                "owner": "terraform",
            })
        ```

        :param str resource_name: The name of the resource.
        :param ResourceTagsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceTagsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceTagsResourceArgs', 'ResourceTagsResourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceTagsArgs.__new__(ResourceTagsArgs)

            __props__.__dict__["project_id"] = project_id
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if tags is None and not opts.urn:
                raise TypeError("Missing required property 'tags'")
            __props__.__dict__["tags"] = tags
        super(ResourceTags, __self__).__init__(
            'huaweicloud:Tms/resourceTags:ResourceTags',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceTagsResourceArgs', 'ResourceTagsResourceArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'ResourceTags':
        """
        Get an existing ResourceTags resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies project ID to which the managed resources belong.  
               Required if the resources are project level. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceTagsResourceArgs', 'ResourceTagsResourceArgsDict']]]] resources: Specifies the managed resource configuration.  
               The resources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies resource tags for batch management.
               + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
               Chinese characters are allowed.
               + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
               underscores (_) and Chinese characters are allowed.
               
               <a name="tags_resources"></a>
               The `resources` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceTagsState.__new__(_ResourceTagsState)

        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resources"] = resources
        __props__.__dict__["tags"] = tags
        return ResourceTags(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies project ID to which the managed resources belong.  
        Required if the resources are project level. Changing this will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.ResourceTagsResource']]:
        """
        Specifies the managed resource configuration.  
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies resource tags for batch management.
        + The valid length of the tag key is limited from `1` to `36`, only letters, digits, hyphens (-), underscores (_) and
        Chinese characters are allowed.
        + The valid length of the tag value is limited from `0` to `43`, only letters, digits, periods (.), hyphens (-),
        underscores (_) and Chinese characters are allowed.

        <a name="tags_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "tags")

