# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceInstancesResult',
    'AwaitableGetResourceInstancesResult',
    'get_resource_instances',
    'get_resource_instances_output',
]

@pulumi.output_type
class GetResourceInstancesResult:
    """
    A collection of values returned by getResourceInstances.
    """
    def __init__(__self__, errors=None, id=None, project_id=None, resource_types=None, resources=None, tags=None, without_any_tag=None):
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        pulumi.set(__self__, "errors", errors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if resource_types and not isinstance(resource_types, list):
            raise TypeError("Expected argument 'resource_types' to be a list")
        pulumi.set(__self__, "resource_types", resource_types)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if without_any_tag and not isinstance(without_any_tag, str):
            raise TypeError("Expected argument 'without_any_tag' to be a str")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetResourceInstancesErrorResult']:
        """
        Indicates the list of errors.
        The errors structure is documented below.
        """
        return pulumi.get(self, "errors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "resource_types")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceInstancesResourceResult']:
        """
        Indicates the list of resources.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceInstancesTagResult']:
        """
        Indicates the resource tags.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetResourceInstancesResult(GetResourceInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceInstancesResult(
            errors=self.errors,
            id=self.id,
            project_id=self.project_id,
            resource_types=self.resource_types,
            resources=self.resources,
            tags=self.tags,
            without_any_tag=self.without_any_tag)


def get_resource_instances(project_id: Optional[_builtins.str] = None,
                           resource_types: Optional[Sequence[_builtins.str]] = None,
                           tags: Optional[Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']]] = None,
                           without_any_tag: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceInstancesResult:
    """
    Use this data source to get the list of resources by tag.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Tms.get_resource_instances()
    ```


    :param _builtins.str project_id: Specifies the project ID. It is mandatory when `resource_types` contains region-specific
           service.
    :param Sequence[_builtins.str] resource_types: Specifies the list of resource types. It is case-sensitive.
    :param Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']] tags: Specifies the tags.
           The tags structure is documented below.
    :param _builtins.str without_any_tag: Specifies whether query untagged resources.
           + **true**: only untagged resources are queried.
           + **false**: only tagged resources are queried.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['resourceTypes'] = resource_types
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Tms/getResourceInstances:getResourceInstances', __args__, opts=opts, typ=GetResourceInstancesResult).value

    return AwaitableGetResourceInstancesResult(
        errors=pulumi.get(__ret__, 'errors'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        resource_types=pulumi.get(__ret__, 'resource_types'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_resource_instances_output(project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_types: Optional[pulumi.Input[Sequence[_builtins.str]]] = None,
                                  tags: Optional[pulumi.Input[Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']]]] = None,
                                  without_any_tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceInstancesResult]:
    """
    Use this data source to get the list of resources by tag.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Tms.get_resource_instances()
    ```


    :param _builtins.str project_id: Specifies the project ID. It is mandatory when `resource_types` contains region-specific
           service.
    :param Sequence[_builtins.str] resource_types: Specifies the list of resource types. It is case-sensitive.
    :param Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']] tags: Specifies the tags.
           The tags structure is documented below.
    :param _builtins.str without_any_tag: Specifies whether query untagged resources.
           + **true**: only untagged resources are queried.
           + **false**: only tagged resources are queried.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['resourceTypes'] = resource_types
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Tms/getResourceInstances:getResourceInstances', __args__, opts=opts, typ=GetResourceInstancesResult)
    return __ret__.apply(lambda __response__: GetResourceInstancesResult(
        errors=pulumi.get(__response__, 'errors'),
        id=pulumi.get(__response__, 'id'),
        project_id=pulumi.get(__response__, 'project_id'),
        resource_types=pulumi.get(__response__, 'resource_types'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
