# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PrivateHookConfiguration',
    'StackAgency',
]

@pulumi.output_type
class PrivateHookConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureMode":
            suggest = "failure_mode"
        elif key == "targetStacks":
            suggest = "target_stacks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateHookConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateHookConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateHookConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_mode: Optional[_builtins.str] = None,
                 target_stacks: Optional[_builtins.str] = None):
        """
        :param _builtins.str failure_mode: Specifies the behavior after private hook verification fails.  
               The valid values are as follows:
               + **FAIL**: The resource stack will stop deploying after this private hook verification fails, and the resource stack
               status will be updated to DEPLOYMENT_FAILED.
               + **WARN**: After this private hook verification fails, only a warning message will be displayed through the resource
               stack event, but it will not affect the resource stack deployment.
        :param _builtins.str target_stacks: Specifies the target resource stack for the private hook to take effect.  
               The valid values are as follows:
               + **NONE**: This private hook will not be applied to any resource stack.
               + **ALL**: This private hook will be applied to all resource stacks under the account.
        """
        if failure_mode is not None:
            pulumi.set(__self__, "failure_mode", failure_mode)
        if target_stacks is not None:
            pulumi.set(__self__, "target_stacks", target_stacks)

    @_builtins.property
    @pulumi.getter(name="failureMode")
    def failure_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the behavior after private hook verification fails.  
        The valid values are as follows:
        + **FAIL**: The resource stack will stop deploying after this private hook verification fails, and the resource stack
        status will be updated to DEPLOYMENT_FAILED.
        + **WARN**: After this private hook verification fails, only a warning message will be displayed through the resource
        stack event, but it will not affect the resource stack deployment.
        """
        return pulumi.get(self, "failure_mode")

    @_builtins.property
    @pulumi.getter(name="targetStacks")
    def target_stacks(self) -> Optional[_builtins.str]:
        """
        Specifies the target resource stack for the private hook to take effect.  
        The valid values are as follows:
        + **NONE**: This private hook will not be applied to any resource stack.
        + **ALL**: This private hook will be applied to all resource stacks under the account.
        """
        return pulumi.get(self, "target_stacks")


@pulumi.output_type
class StackAgency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerName":
            suggest = "provider_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackAgency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackAgency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackAgency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 provider_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of IAM agency authorized to IAC account.  
               Change this parameter will create a new resource.
        :param _builtins.str provider_name: Specifies the name of the provider corresponding to the IAM agency.  
               Change this parameter will create a new resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of IAM agency authorized to IAC account.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the provider corresponding to the IAM agency.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "provider_name")


