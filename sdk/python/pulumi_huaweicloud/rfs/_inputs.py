# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PrivateHookConfigurationArgs',
    'PrivateHookConfigurationArgsDict',
    'StackAgencyArgs',
    'StackAgencyArgsDict',
]

MYPY = False

if not MYPY:
    class PrivateHookConfigurationArgsDict(TypedDict):
        failure_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the behavior after private hook verification fails.  
        The valid values are as follows:
        + **FAIL**: The resource stack will stop deploying after this private hook verification fails, and the resource stack
        status will be updated to DEPLOYMENT_FAILED.
        + **WARN**: After this private hook verification fails, only a warning message will be displayed through the resource
        stack event, but it will not affect the resource stack deployment.
        """
        target_stacks: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the target resource stack for the private hook to take effect.  
        The valid values are as follows:
        + **NONE**: This private hook will not be applied to any resource stack.
        + **ALL**: This private hook will be applied to all resource stacks under the account.
        """
elif False:
    PrivateHookConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateHookConfigurationArgs:
    def __init__(__self__, *,
                 failure_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 target_stacks: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] failure_mode: Specifies the behavior after private hook verification fails.  
               The valid values are as follows:
               + **FAIL**: The resource stack will stop deploying after this private hook verification fails, and the resource stack
               status will be updated to DEPLOYMENT_FAILED.
               + **WARN**: After this private hook verification fails, only a warning message will be displayed through the resource
               stack event, but it will not affect the resource stack deployment.
        :param pulumi.Input[_builtins.str] target_stacks: Specifies the target resource stack for the private hook to take effect.  
               The valid values are as follows:
               + **NONE**: This private hook will not be applied to any resource stack.
               + **ALL**: This private hook will be applied to all resource stacks under the account.
        """
        if failure_mode is not None:
            pulumi.set(__self__, "failure_mode", failure_mode)
        if target_stacks is not None:
            pulumi.set(__self__, "target_stacks", target_stacks)

    @_builtins.property
    @pulumi.getter(name="failureMode")
    def failure_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the behavior after private hook verification fails.  
        The valid values are as follows:
        + **FAIL**: The resource stack will stop deploying after this private hook verification fails, and the resource stack
        status will be updated to DEPLOYMENT_FAILED.
        + **WARN**: After this private hook verification fails, only a warning message will be displayed through the resource
        stack event, but it will not affect the resource stack deployment.
        """
        return pulumi.get(self, "failure_mode")

    @failure_mode.setter
    def failure_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "failure_mode", value)

    @_builtins.property
    @pulumi.getter(name="targetStacks")
    def target_stacks(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target resource stack for the private hook to take effect.  
        The valid values are as follows:
        + **NONE**: This private hook will not be applied to any resource stack.
        + **ALL**: This private hook will be applied to all resource stacks under the account.
        """
        return pulumi.get(self, "target_stacks")

    @target_stacks.setter
    def target_stacks(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_stacks", value)


if not MYPY:
    class StackAgencyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of IAM agency authorized to IAC account.  
        Change this parameter will create a new resource.
        """
        provider_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the provider corresponding to the IAM agency.  
        Change this parameter will create a new resource.
        """
elif False:
    StackAgencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StackAgencyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of IAM agency authorized to IAC account.  
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] provider_name: Specifies the name of the provider corresponding to the IAM agency.  
               Change this parameter will create a new resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of IAM agency authorized to IAC account.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the provider corresponding to the IAM agency.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_name", value)


