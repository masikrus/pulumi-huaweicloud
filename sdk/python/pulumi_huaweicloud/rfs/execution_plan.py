# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ExecutionPlanArgs', 'ExecutionPlan']

@pulumi.input_type
class ExecutionPlanArgs:
    def __init__(__self__, *,
                 stack_name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_body: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ExecutionPlan resource.
        :param pulumi.Input[_builtins.str] stack_name: Specifies the name of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the execution plan.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the execution plan.
               Changing this creates a new resource.
               The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
               hyphens (-) are allowed.
               The name must start with a Chinese character or an English letter, and must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the related stack to which the execution plan belongs
               is located. If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] stack_id: Specifies the ID of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
               
               > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
               recommended to use `stack_id` for strong matching.
        :param pulumi.Input[_builtins.str] template_body: Specifies the HCL/JSON template content for deployment resources.
               Changing this creates a new resource.
               This parameter and `template_uri` are alternative and exactly one of them must be provided.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
               which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
               the target status of the deployment resources.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vars_body: Specifies the variable content for deployment resources.
               Changing this creates a new resource.
               This parameter and `vars_uri` parameters cannot be set at the same time.
        :param pulumi.Input[_builtins.str] vars_uri: Specifies the OBS address where the variable (**.tfvars**) file corresponding
               to the HCL/JSON template located, which describes the target status of the deployment resources.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "stack_name", stack_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if template_body is not None:
            pulumi.set(__self__, "template_body", template_body)
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)
        if vars_body is not None:
            pulumi.set(__self__, "vars_body", vars_body)
        if vars_uri is not None:
            pulumi.set(__self__, "vars_uri", vars_uri)

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "stack_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the execution plan.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the execution plan.
        Changing this creates a new resource.
        The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
        hyphens (-) are allowed.
        The name must start with a Chinese character or an English letter, and must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the related stack to which the execution plan belongs
        is located. If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.

        > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
        recommended to use `stack_id` for strong matching.
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stack_id", value)

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the HCL/JSON template content for deployment resources.
        Changing this creates a new resource.
        This parameter and `template_uri` are alternative and exactly one of them must be provided.
        """
        return pulumi.get(self, "template_body")

    @template_body.setter
    def template_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_body", value)

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
        which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
        the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "template_uri")

    @template_uri.setter
    def template_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uri", value)

    @_builtins.property
    @pulumi.getter(name="varsBody")
    def vars_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the variable content for deployment resources.
        Changing this creates a new resource.
        This parameter and `vars_uri` parameters cannot be set at the same time.
        """
        return pulumi.get(self, "vars_body")

    @vars_body.setter
    def vars_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vars_body", value)

    @_builtins.property
    @pulumi.getter(name="varsUri")
    def vars_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address where the variable (**.tfvars**) file corresponding
        to the HCL/JSON template located, which describes the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vars_uri")

    @vars_uri.setter
    def vars_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vars_uri", value)


@pulumi.input_type
class _ExecutionPlanState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_body: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ExecutionPlan resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the execution plan.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the execution plan.
               Changing this creates a new resource.
               The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
               hyphens (-) are allowed.
               The name must start with a Chinese character or an English letter, and must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the related stack to which the execution plan belongs
               is located. If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] stack_id: Specifies the ID of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
               
               > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
               recommended to use `stack_id` for strong matching.
        :param pulumi.Input[_builtins.str] stack_name: Specifies the name of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] template_body: Specifies the HCL/JSON template content for deployment resources.
               Changing this creates a new resource.
               This parameter and `template_uri` are alternative and exactly one of them must be provided.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
               which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
               the target status of the deployment resources.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vars_body: Specifies the variable content for deployment resources.
               Changing this creates a new resource.
               This parameter and `vars_uri` parameters cannot be set at the same time.
        :param pulumi.Input[_builtins.str] vars_uri: Specifies the OBS address where the variable (**.tfvars**) file corresponding
               to the HCL/JSON template located, which describes the target status of the deployment resources.
               Changing this creates a new resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if stack_name is not None:
            pulumi.set(__self__, "stack_name", stack_name)
        if template_body is not None:
            pulumi.set(__self__, "template_body", template_body)
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)
        if vars_body is not None:
            pulumi.set(__self__, "vars_body", vars_body)
        if vars_uri is not None:
            pulumi.set(__self__, "vars_uri", vars_uri)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the execution plan.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the execution plan.
        Changing this creates a new resource.
        The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
        hyphens (-) are allowed.
        The name must start with a Chinese character or an English letter, and must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the related stack to which the execution plan belongs
        is located. If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.

        > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
        recommended to use `stack_id` for strong matching.
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stack_id", value)

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stack_name", value)

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the HCL/JSON template content for deployment resources.
        Changing this creates a new resource.
        This parameter and `template_uri` are alternative and exactly one of them must be provided.
        """
        return pulumi.get(self, "template_body")

    @template_body.setter
    def template_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_body", value)

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
        which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
        the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "template_uri")

    @template_uri.setter
    def template_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uri", value)

    @_builtins.property
    @pulumi.getter(name="varsBody")
    def vars_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the variable content for deployment resources.
        Changing this creates a new resource.
        This parameter and `vars_uri` parameters cannot be set at the same time.
        """
        return pulumi.get(self, "vars_body")

    @vars_body.setter
    def vars_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vars_body", value)

    @_builtins.property
    @pulumi.getter(name="varsUri")
    def vars_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address where the variable (**.tfvars**) file corresponding
        to the HCL/JSON template located, which describes the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vars_uri")

    @vars_uri.setter
    def vars_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vars_uri", value)


@pulumi.type_token("huaweicloud:rfs/executionPlan:ExecutionPlan")
class ExecutionPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_body: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to manages a execution plan under specified resource stack within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stack_name = config.require_object("stackName")
        execution_plan_name = config.require_object("executionPlanName")
        template_uri = config.require_object("templateUri")
        vars_uri = config.require_object("varsUri")
        test = huaweicloud.rfs.ExecutionPlan("test",
            stack_name=stack_name,
            name=execution_plan_name,
            template_uri=template_uri,
            vars_uri=vars_uri)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the execution plan.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the execution plan.
               Changing this creates a new resource.
               The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
               hyphens (-) are allowed.
               The name must start with a Chinese character or an English letter, and must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the related stack to which the execution plan belongs
               is located. If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] stack_id: Specifies the ID of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
               
               > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
               recommended to use `stack_id` for strong matching.
        :param pulumi.Input[_builtins.str] stack_name: Specifies the name of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] template_body: Specifies the HCL/JSON template content for deployment resources.
               Changing this creates a new resource.
               This parameter and `template_uri` are alternative and exactly one of them must be provided.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
               which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
               the target status of the deployment resources.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vars_body: Specifies the variable content for deployment resources.
               Changing this creates a new resource.
               This parameter and `vars_uri` parameters cannot be set at the same time.
        :param pulumi.Input[_builtins.str] vars_uri: Specifies the OBS address where the variable (**.tfvars**) file corresponding
               to the HCL/JSON template located, which describes the target status of the deployment resources.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExecutionPlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manages a execution plan under specified resource stack within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stack_name = config.require_object("stackName")
        execution_plan_name = config.require_object("executionPlanName")
        template_uri = config.require_object("templateUri")
        vars_uri = config.require_object("varsUri")
        test = huaweicloud.rfs.ExecutionPlan("test",
            stack_name=stack_name,
            name=execution_plan_name,
            template_uri=template_uri,
            vars_uri=vars_uri)
        ```

        :param str resource_name: The name of the resource.
        :param ExecutionPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExecutionPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_body: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExecutionPlanArgs.__new__(ExecutionPlanArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["stack_id"] = stack_id
            if stack_name is None and not opts.urn:
                raise TypeError("Missing required property 'stack_name'")
            __props__.__dict__["stack_name"] = stack_name
            __props__.__dict__["template_body"] = template_body
            __props__.__dict__["template_uri"] = template_uri
            __props__.__dict__["vars_body"] = vars_body
            __props__.__dict__["vars_uri"] = vars_uri
        super(ExecutionPlan, __self__).__init__(
            'huaweicloud:rfs/executionPlan:ExecutionPlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            stack_id: Optional[pulumi.Input[_builtins.str]] = None,
            stack_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_body: Optional[pulumi.Input[_builtins.str]] = None,
            template_uri: Optional[pulumi.Input[_builtins.str]] = None,
            vars_body: Optional[pulumi.Input[_builtins.str]] = None,
            vars_uri: Optional[pulumi.Input[_builtins.str]] = None) -> 'ExecutionPlan':
        """
        Get an existing ExecutionPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the execution plan.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the execution plan.
               Changing this creates a new resource.
               The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
               hyphens (-) are allowed.
               The name must start with a Chinese character or an English letter, and must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the related stack to which the execution plan belongs
               is located. If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] stack_id: Specifies the ID of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
               
               > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
               recommended to use `stack_id` for strong matching.
        :param pulumi.Input[_builtins.str] stack_name: Specifies the name of the resource stack to which the execution plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] template_body: Specifies the HCL/JSON template content for deployment resources.
               Changing this creates a new resource.
               This parameter and `template_uri` are alternative and exactly one of them must be provided.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
               which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
               the target status of the deployment resources.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vars_body: Specifies the variable content for deployment resources.
               Changing this creates a new resource.
               This parameter and `vars_uri` parameters cannot be set at the same time.
        :param pulumi.Input[_builtins.str] vars_uri: Specifies the OBS address where the variable (**.tfvars**) file corresponding
               to the HCL/JSON template located, which describes the target status of the deployment resources.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExecutionPlanState.__new__(_ExecutionPlanState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["stack_name"] = stack_name
        __props__.__dict__["template_body"] = template_body
        __props__.__dict__["template_uri"] = template_uri
        __props__.__dict__["vars_body"] = vars_body
        __props__.__dict__["vars_uri"] = vars_uri
        return ExecutionPlan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the execution plan.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the execution plan.
        Changing this creates a new resource.
        The valid length is limited from `1` to `128`, only Chinese characters, English letters, digits, underscores (_) and
        hyphens (-) are allowed.
        The name must start with a Chinese character or an English letter, and must be unique.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the related stack to which the execution plan belongs
        is located. If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.

        > To ensure the correctness of the stack resource being operated (there may be stacks with the same name), it is
        recommended to use `stack_id` for strong matching.
        """
        return pulumi.get(self, "stack_id")

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the resource stack to which the execution plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "stack_name")

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the HCL/JSON template content for deployment resources.
        Changing this creates a new resource.
        This parameter and `template_uri` are alternative and exactly one of them must be provided.
        """
        return pulumi.get(self, "template_body")

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OBS address where the HCL/JSON template archive (**.zip** file,
        which contains all resource **.tf.json** script files to be deployed) or **.tf.json** file is located, which describes
        the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "template_uri")

    @_builtins.property
    @pulumi.getter(name="varsBody")
    def vars_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the variable content for deployment resources.
        Changing this creates a new resource.
        This parameter and `vars_uri` parameters cannot be set at the same time.
        """
        return pulumi.get(self, "vars_body")

    @_builtins.property
    @pulumi.getter(name="varsUri")
    def vars_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OBS address where the variable (**.tfvars**) file corresponding
        to the HCL/JSON template located, which describes the target status of the deployment resources.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vars_uri")

