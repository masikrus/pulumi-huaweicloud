# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateHookArgs', 'PrivateHook']

@pulumi.input_type
class PrivateHookArgs:
    def __init__(__self__, *,
                 version: pulumi.Input[_builtins.str],
                 configuration: Optional[pulumi.Input['PrivateHookConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_old_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_body: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version_description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PrivateHook resource.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the private hook.
               The version number must follow the **Semantic Version** rules.
        :param pulumi.Input['PrivateHookConfigurationArgs'] configuration: Specifies the configuration of the private hook, that can specify the target
               resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
               verification fails.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the private hook.  
               The valid length is limited from `1` to `1,024`.
        :param pulumi.Input[_builtins.bool] keep_old_version: Specifies whether keeping old version while updating hook version.  
               Defaults to **false**.
               
               > A maximum of `199` historical versions can be created for a hook name.
               
               <a name="private_hook_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the private hook.  
               The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
               underscores (_) are allowed.
               The name must start with a Chinese characters or English letter. The names are case sensitive.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_body: Specifies the policy content of the private hook.  
               Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
               recognized by the OPA open source engine are supported.
               
               > Exactly one of the `policy_uri` and `policy_body` must be set.
        :param pulumi.Input[_builtins.str] policy_uri: Specifies the OBS address of the policy file.  
               The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
               language recognized by the OPA open source engine.
               Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
               Compressed packages currently only support zip format and files need to end with `.zip`.
               The verification requirements for policy files are as follows:
               + Size, format, syntax, etc. will be verified when creating.
               + Policy files must be `UTF-8` encoded.
               + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
               + The number of files in a compressed package cannot exceed `100`.
               + The maximum length of the file path in the compressed package is `2,048`.
               + The maximum length of the file name in the compressed package is `255` bytes.
               
               > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
               dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
               dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
               to specific tenants).
        :param pulumi.Input[_builtins.str] region: Specifies the region where the private hook is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version_description: Specifies the description of the private hook version.  
               The valid length is limited from `1` to `1,024`.
        """
        pulumi.set(__self__, "version", version)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if keep_old_version is not None:
            pulumi.set(__self__, "keep_old_version", keep_old_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_body is not None:
            pulumi.set(__self__, "policy_body", policy_body)
        if policy_uri is not None:
            pulumi.set(__self__, "policy_uri", policy_uri)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if version_description is not None:
            pulumi.set(__self__, "version_description", version_description)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of the private hook.
        The version number must follow the **Semantic Version** rules.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['PrivateHookConfigurationArgs']]:
        """
        Specifies the configuration of the private hook, that can specify the target
        resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
        verification fails.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['PrivateHookConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the private hook.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="keepOldVersion")
    def keep_old_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether keeping old version while updating hook version.  
        Defaults to **false**.

        > A maximum of `199` historical versions can be created for a hook name.

        <a name="private_hook_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "keep_old_version")

    @keep_old_version.setter
    def keep_old_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_old_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the private hook.  
        The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
        underscores (_) are allowed.
        The name must start with a Chinese characters or English letter. The names are case sensitive.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyBody")
    def policy_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy content of the private hook.  
        Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
        recognized by the OPA open source engine are supported.

        > Exactly one of the `policy_uri` and `policy_body` must be set.
        """
        return pulumi.get(self, "policy_body")

    @policy_body.setter
    def policy_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_body", value)

    @_builtins.property
    @pulumi.getter(name="policyUri")
    def policy_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address of the policy file.  
        The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
        language recognized by the OPA open source engine.
        Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
        Compressed packages currently only support zip format and files need to end with `.zip`.
        The verification requirements for policy files are as follows:
        + Size, format, syntax, etc. will be verified when creating.
        + Policy files must be `UTF-8` encoded.
        + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
        + The number of files in a compressed package cannot exceed `100`.
        + The maximum length of the file path in the compressed package is `2,048`.
        + The maximum length of the file name in the compressed package is `255` bytes.

        > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
        dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
        dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
        to specific tenants).
        """
        return pulumi.get(self, "policy_uri")

    @policy_uri.setter
    def policy_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_uri", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the private hook is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the private hook version.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "version_description")

    @version_description.setter
    def version_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_description", value)


@pulumi.input_type
class _PrivateHookState:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['PrivateHookConfigurationArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_old_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_body: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PrivateHook resources.
        :param pulumi.Input['PrivateHookConfigurationArgs'] configuration: Specifies the configuration of the private hook, that can specify the target
               resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
               verification fails.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation of the private hook, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the private hook.  
               The valid length is limited from `1` to `1,024`.
        :param pulumi.Input[_builtins.bool] keep_old_version: Specifies whether keeping old version while updating hook version.  
               Defaults to **false**.
               
               > A maximum of `199` historical versions can be created for a hook name.
               
               <a name="private_hook_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the private hook.  
               The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
               underscores (_) are allowed.
               The name must start with a Chinese characters or English letter. The names are case sensitive.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_body: Specifies the policy content of the private hook.  
               Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
               recognized by the OPA open source engine are supported.
               
               > Exactly one of the `policy_uri` and `policy_body` must be set.
        :param pulumi.Input[_builtins.str] policy_uri: Specifies the OBS address of the policy file.  
               The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
               language recognized by the OPA open source engine.
               Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
               Compressed packages currently only support zip format and files need to end with `.zip`.
               The verification requirements for policy files are as follows:
               + Size, format, syntax, etc. will be verified when creating.
               + Policy files must be `UTF-8` encoded.
               + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
               + The number of files in a compressed package cannot exceed `100`.
               + The maximum length of the file path in the compressed package is `2,048`.
               + The maximum length of the file name in the compressed package is `255` bytes.
               
               > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
               dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
               dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
               to specific tenants).
        :param pulumi.Input[_builtins.str] region: Specifies the region where the private hook is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update of the private hook, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the private hook.
               The version number must follow the **Semantic Version** rules.
        :param pulumi.Input[_builtins.str] version_description: Specifies the description of the private hook version.  
               The valid length is limited from `1` to `1,024`.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if keep_old_version is not None:
            pulumi.set(__self__, "keep_old_version", keep_old_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_body is not None:
            pulumi.set(__self__, "policy_body", policy_body)
        if policy_uri is not None:
            pulumi.set(__self__, "policy_uri", policy_uri)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_description is not None:
            pulumi.set(__self__, "version_description", version_description)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['PrivateHookConfigurationArgs']]:
        """
        Specifies the configuration of the private hook, that can specify the target
        resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
        verification fails.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['PrivateHookConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation of the private hook, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the private hook.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="keepOldVersion")
    def keep_old_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether keeping old version while updating hook version.  
        Defaults to **false**.

        > A maximum of `199` historical versions can be created for a hook name.

        <a name="private_hook_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "keep_old_version")

    @keep_old_version.setter
    def keep_old_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_old_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the private hook.  
        The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
        underscores (_) are allowed.
        The name must start with a Chinese characters or English letter. The names are case sensitive.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyBody")
    def policy_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy content of the private hook.  
        Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
        recognized by the OPA open source engine are supported.

        > Exactly one of the `policy_uri` and `policy_body` must be set.
        """
        return pulumi.get(self, "policy_body")

    @policy_body.setter
    def policy_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_body", value)

    @_builtins.property
    @pulumi.getter(name="policyUri")
    def policy_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS address of the policy file.  
        The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
        language recognized by the OPA open source engine.
        Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
        Compressed packages currently only support zip format and files need to end with `.zip`.
        The verification requirements for policy files are as follows:
        + Size, format, syntax, etc. will be verified when creating.
        + Policy files must be `UTF-8` encoded.
        + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
        + The number of files in a compressed package cannot exceed `100`.
        + The maximum length of the file path in the compressed package is `2,048`.
        + The maximum length of the file name in the compressed package is `255` bytes.

        > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
        dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
        dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
        to specific tenants).
        """
        return pulumi.get(self, "policy_uri")

    @policy_uri.setter
    def policy_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_uri", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the private hook is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update of the private hook, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the private hook.
        The version number must follow the **Semantic Version** rules.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the private hook version.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "version_description")

    @version_description.setter
    def version_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_description", value)


@pulumi.type_token("huaweicloud:rfs/privateHook:PrivateHook")
class PrivateHook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['PrivateHookConfigurationArgs', 'PrivateHookConfigurationArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_old_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_body: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_description: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a RFS private hook resource within HuaweiCloud.

        ## Example Usage

        ### Create a private hook using remote OBS object (ZIP file)

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hook_name = config.require_object("hookName")
        object_access_uri = config.require_object("objectAccessUri")
        test = huaweicloud.rfs.PrivateHook("test",
            name=hook_name,
            version="1.0.0",
            version_description="This is a first version",
            policy_uri=object_access_uri,
            configuration={
                "failure_mode": "WARN",
                "target_stacks": "ALL",
            })
        ```

        ### Create a private hook using Rego codes

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hook_name = config.require_object("hookName")
        test = huaweicloud.rfs.PrivateHook("test",
            name=hook_name,
            version="1.0.0",
            version_description="This is a first version",
            policy_body=\"\"\"package policy

        import rego.v1

        hook_result := {
          "is_passed": input.message == "world",
          "err_msg": "The error msg when private hook is not passed the validation",
        }
        \"\"\",
            configuration={
                "failure_mode": "WARN",
                "target_stacks": "ALL",
            })
        ```

        ## Import

        Private hooks can be imported using their `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rfs/privateHook:PrivateHook test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `policy_uri`, `policy_body` and `keep_old_version`. It is generally

        recommended running `pulumi preview` after importing a hook. You can keep the resource the same with its definition bo

        choosing any of them to update. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rfs_private_hook" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              policy_uri,
            
              keep_old_version,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PrivateHookConfigurationArgs', 'PrivateHookConfigurationArgsDict']] configuration: Specifies the configuration of the private hook, that can specify the target
               resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
               verification fails.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the private hook.  
               The valid length is limited from `1` to `1,024`.
        :param pulumi.Input[_builtins.bool] keep_old_version: Specifies whether keeping old version while updating hook version.  
               Defaults to **false**.
               
               > A maximum of `199` historical versions can be created for a hook name.
               
               <a name="private_hook_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the private hook.  
               The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
               underscores (_) are allowed.
               The name must start with a Chinese characters or English letter. The names are case sensitive.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_body: Specifies the policy content of the private hook.  
               Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
               recognized by the OPA open source engine are supported.
               
               > Exactly one of the `policy_uri` and `policy_body` must be set.
        :param pulumi.Input[_builtins.str] policy_uri: Specifies the OBS address of the policy file.  
               The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
               language recognized by the OPA open source engine.
               Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
               Compressed packages currently only support zip format and files need to end with `.zip`.
               The verification requirements for policy files are as follows:
               + Size, format, syntax, etc. will be verified when creating.
               + Policy files must be `UTF-8` encoded.
               + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
               + The number of files in a compressed package cannot exceed `100`.
               + The maximum length of the file path in the compressed package is `2,048`.
               + The maximum length of the file name in the compressed package is `255` bytes.
               
               > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
               dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
               dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
               to specific tenants).
        :param pulumi.Input[_builtins.str] region: Specifies the region where the private hook is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the private hook.
               The version number must follow the **Semantic Version** rules.
        :param pulumi.Input[_builtins.str] version_description: Specifies the description of the private hook version.  
               The valid length is limited from `1` to `1,024`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateHookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RFS private hook resource within HuaweiCloud.

        ## Example Usage

        ### Create a private hook using remote OBS object (ZIP file)

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hook_name = config.require_object("hookName")
        object_access_uri = config.require_object("objectAccessUri")
        test = huaweicloud.rfs.PrivateHook("test",
            name=hook_name,
            version="1.0.0",
            version_description="This is a first version",
            policy_uri=object_access_uri,
            configuration={
                "failure_mode": "WARN",
                "target_stacks": "ALL",
            })
        ```

        ### Create a private hook using Rego codes

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hook_name = config.require_object("hookName")
        test = huaweicloud.rfs.PrivateHook("test",
            name=hook_name,
            version="1.0.0",
            version_description="This is a first version",
            policy_body=\"\"\"package policy

        import rego.v1

        hook_result := {
          "is_passed": input.message == "world",
          "err_msg": "The error msg when private hook is not passed the validation",
        }
        \"\"\",
            configuration={
                "failure_mode": "WARN",
                "target_stacks": "ALL",
            })
        ```

        ## Import

        Private hooks can be imported using their `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rfs/privateHook:PrivateHook test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `policy_uri`, `policy_body` and `keep_old_version`. It is generally

        recommended running `pulumi preview` after importing a hook. You can keep the resource the same with its definition bo

        choosing any of them to update. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rfs_private_hook" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              policy_uri,
            
              keep_old_version,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PrivateHookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateHookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['PrivateHookConfigurationArgs', 'PrivateHookConfigurationArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_old_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_body: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_description: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateHookArgs.__new__(PrivateHookArgs)

            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["description"] = description
            __props__.__dict__["keep_old_version"] = keep_old_version
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_body"] = policy_body
            __props__.__dict__["policy_uri"] = policy_uri
            __props__.__dict__["region"] = region
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["version_description"] = version_description
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(PrivateHook, __self__).__init__(
            'huaweicloud:rfs/privateHook:PrivateHook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration: Optional[pulumi.Input[Union['PrivateHookConfigurationArgs', 'PrivateHookConfigurationArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            keep_old_version: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_body: Optional[pulumi.Input[_builtins.str]] = None,
            policy_uri: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_description: Optional[pulumi.Input[_builtins.str]] = None) -> 'PrivateHook':
        """
        Get an existing PrivateHook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PrivateHookConfigurationArgs', 'PrivateHookConfigurationArgsDict']] configuration: Specifies the configuration of the private hook, that can specify the target
               resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
               verification fails.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation of the private hook, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the private hook.  
               The valid length is limited from `1` to `1,024`.
        :param pulumi.Input[_builtins.bool] keep_old_version: Specifies whether keeping old version while updating hook version.  
               Defaults to **false**.
               
               > A maximum of `199` historical versions can be created for a hook name.
               
               <a name="private_hook_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the private hook.  
               The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
               underscores (_) are allowed.
               The name must start with a Chinese characters or English letter. The names are case sensitive.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_body: Specifies the policy content of the private hook.  
               Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
               recognized by the OPA open source engine are supported.
               
               > Exactly one of the `policy_uri` and `policy_body` must be set.
        :param pulumi.Input[_builtins.str] policy_uri: Specifies the OBS address of the policy file.  
               The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
               language recognized by the OPA open source engine.
               Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
               Compressed packages currently only support zip format and files need to end with `.zip`.
               The verification requirements for policy files are as follows:
               + Size, format, syntax, etc. will be verified when creating.
               + Policy files must be `UTF-8` encoded.
               + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
               + The number of files in a compressed package cannot exceed `100`.
               + The maximum length of the file path in the compressed package is `2,048`.
               + The maximum length of the file name in the compressed package is `255` bytes.
               
               > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
               dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
               dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
               to specific tenants).
        :param pulumi.Input[_builtins.str] region: Specifies the region where the private hook is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update of the private hook, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the private hook.
               The version number must follow the **Semantic Version** rules.
        :param pulumi.Input[_builtins.str] version_description: Specifies the description of the private hook version.  
               The valid length is limited from `1` to `1,024`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateHookState.__new__(_PrivateHookState)

        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["keep_old_version"] = keep_old_version
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_body"] = policy_body
        __props__.__dict__["policy_uri"] = policy_uri
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        __props__.__dict__["version_description"] = version_description
        return PrivateHook(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.PrivateHookConfiguration']:
        """
        Specifies the configuration of the private hook, that can specify the target
        resource stack where the private hook takes effect and the behavior of the resource stack after the private hook
        verification fails.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation of the private hook, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the private hook.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="keepOldVersion")
    def keep_old_version(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether keeping old version while updating hook version.  
        Defaults to **false**.

        > A maximum of `199` historical versions can be created for a hook name.

        <a name="private_hook_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "keep_old_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the private hook.  
        The valid length is limited from `1` to `128`, only Chinese or English letters, digits, hyphens (-),
        underscores (_) are allowed.
        The name must start with a Chinese characters or English letter. The names are case sensitive.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyBody")
    def policy_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the policy content of the private hook.  
        Only policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language) language that are
        recognized by the OPA open source engine are supported.

        > Exactly one of the `policy_uri` and `policy_body` must be set.
        """
        return pulumi.get(self, "policy_body")

    @_builtins.property
    @pulumi.getter(name="policyUri")
    def policy_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OBS address of the policy file.  
        The content only supports policy templates written in [Rego](https://www.openpolicyagent.org/docs/latest/policy-language)
        language recognized by the OPA open source engine.
        Policy files currently support single files or zip compressed packages. Single files need to end with `.rego`.
        Compressed packages currently only support zip format and files need to end with `.zip`.
        The verification requirements for policy files are as follows:
        + Size, format, syntax, etc. will be verified when creating.
        + Policy files must be `UTF-8` encoded.
        + The size of a single file or compressed package before and after decompression should be controlled within `1MB`.
        + The number of files in a compressed package cannot exceed `100`.
        + The maximum length of the file path in the compressed package is `2,048`.
        + The maximum length of the file name in the compressed package is `255` bytes.

        > OBS address supports mutual access between regions of the same type(, regions are divided into general regions and
        dedicated regions. General regions refer to regions that provide general cloud services to public tenants;
        dedicated regions refer to dedicated regions that only carry the same type of business or provide business services
        to specific tenants).
        """
        return pulumi.get(self, "policy_uri")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the private hook is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update of the private hook, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the private hook.
        The version number must follow the **Semantic Version** rules.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the private hook version.  
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "version_description")

