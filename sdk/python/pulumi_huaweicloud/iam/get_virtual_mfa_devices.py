# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualMfaDevicesResult',
    'AwaitableGetVirtualMfaDevicesResult',
    'get_virtual_mfa_devices',
    'get_virtual_mfa_devices_output',
]

@pulumi.output_type
class GetVirtualMfaDevicesResult:
    """
    A collection of values returned by getVirtualMfaDevices.
    """
    def __init__(__self__, id=None, user_id=None, virtual_mfa_devices=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if virtual_mfa_devices and not isinstance(virtual_mfa_devices, list):
            raise TypeError("Expected argument 'virtual_mfa_devices' to be a list")
        pulumi.set(__self__, "virtual_mfa_devices", virtual_mfa_devices)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The user ID to which the virtual MFA device belongs.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="virtualMfaDevices")
    def virtual_mfa_devices(self) -> Sequence['outputs.GetVirtualMfaDevicesVirtualMfaDeviceResult']:
        """
        The list of virtual MFA devices.
        """
        return pulumi.get(self, "virtual_mfa_devices")


class AwaitableGetVirtualMfaDevicesResult(GetVirtualMfaDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualMfaDevicesResult(
            id=self.id,
            user_id=self.user_id,
            virtual_mfa_devices=self.virtual_mfa_devices)


def get_virtual_mfa_devices(user_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualMfaDevicesResult:
    """
    Use this data source to get the list of IAM virtual MFA devices within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Iam.get_virtual_mfa_devices()
    ```


    :param _builtins.str user_id: Specifies the user ID to which the virtual MFA device belongs.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iam/getVirtualMfaDevices:getVirtualMfaDevices', __args__, opts=opts, typ=GetVirtualMfaDevicesResult).value

    return AwaitableGetVirtualMfaDevicesResult(
        id=pulumi.get(__ret__, 'id'),
        user_id=pulumi.get(__ret__, 'user_id'),
        virtual_mfa_devices=pulumi.get(__ret__, 'virtual_mfa_devices'))
def get_virtual_mfa_devices_output(user_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualMfaDevicesResult]:
    """
    Use this data source to get the list of IAM virtual MFA devices within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Iam.get_virtual_mfa_devices()
    ```


    :param _builtins.str user_id: Specifies the user ID to which the virtual MFA device belongs.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Iam/getVirtualMfaDevices:getVirtualMfaDevices', __args__, opts=opts, typ=GetVirtualMfaDevicesResult)
    return __ret__.apply(lambda __response__: GetVirtualMfaDevicesResult(
        id=pulumi.get(__response__, 'id'),
        user_id=pulumi.get(__response__, 'user_id'),
        virtual_mfa_devices=pulumi.get(__response__, 'virtual_mfa_devices')))
