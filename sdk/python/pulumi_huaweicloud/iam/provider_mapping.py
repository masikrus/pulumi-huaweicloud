# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ProviderMappingArgs', 'ProviderMapping']

@pulumi.input_type
class ProviderMappingArgs:
    def __init__(__self__, *,
                 mapping_rules: pulumi.Input[_builtins.str],
                 provider_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a ProviderMapping resource.
        :param pulumi.Input[_builtins.str] mapping_rules: Specifies the identity mapping rules in json string format.
        :param pulumi.Input[_builtins.str] provider_id: Specifies the ID of the identity provider used to manage the mapping rules.
        """
        pulumi.set(__self__, "mapping_rules", mapping_rules)
        pulumi.set(__self__, "provider_id", provider_id)

    @_builtins.property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the identity mapping rules in json string format.
        """
        return pulumi.get(self, "mapping_rules")

    @mapping_rules.setter
    def mapping_rules(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mapping_rules", value)

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the identity provider used to manage the mapping rules.
        """
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider_id", value)


@pulumi.input_type
class _ProviderMappingState:
    def __init__(__self__, *,
                 mapping_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ProviderMapping resources.
        :param pulumi.Input[_builtins.str] mapping_rules: Specifies the identity mapping rules in json string format.
        :param pulumi.Input[_builtins.str] provider_id: Specifies the ID of the identity provider used to manage the mapping rules.
        """
        if mapping_rules is not None:
            pulumi.set(__self__, "mapping_rules", mapping_rules)
        if provider_id is not None:
            pulumi.set(__self__, "provider_id", provider_id)

    @_builtins.property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the identity mapping rules in json string format.
        """
        return pulumi.get(self, "mapping_rules")

    @mapping_rules.setter
    def mapping_rules(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapping_rules", value)

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the identity provider used to manage the mapping rules.
        """
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_id", value)


@pulumi.type_token("huaweicloud:Iam/providerMapping:ProviderMapping")
class ProviderMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mapping_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage the mapping rules of identity provider within HuaweiCloud IAM service.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        provider_id = config.require_object("providerId")
        mapping = huaweicloud.iam.ProviderMapping("mapping",
            provider_id=provider_id,
            mapping_rules=\"\"\"    [
              {
                "local": [
                  {
                    "user": {
                      "name": "{0}"
                    }
                  },
                  {
                    "group": {
                      "name": "admin"
                    }
                  }
                ],
                "remote": [
                  {
                    "type": "UserName"
                  },
                  {
                    "type": "Groups",
                    "any_one_of": [
                      ".*@mail.com$"
                    ],
                    "regex": true
                  }
                ]
              }
            ]
        \"\"\")
        ```

        ## Import

        Identity provider mapping rules are imported using the `provider_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Iam/providerMapping:ProviderMapping mapping <provider_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] mapping_rules: Specifies the identity mapping rules in json string format.
        :param pulumi.Input[_builtins.str] provider_id: Specifies the ID of the identity provider used to manage the mapping rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage the mapping rules of identity provider within HuaweiCloud IAM service.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        provider_id = config.require_object("providerId")
        mapping = huaweicloud.iam.ProviderMapping("mapping",
            provider_id=provider_id,
            mapping_rules=\"\"\"    [
              {
                "local": [
                  {
                    "user": {
                      "name": "{0}"
                    }
                  },
                  {
                    "group": {
                      "name": "admin"
                    }
                  }
                ],
                "remote": [
                  {
                    "type": "UserName"
                  },
                  {
                    "type": "Groups",
                    "any_one_of": [
                      ".*@mail.com$"
                    ],
                    "regex": true
                  }
                ]
              }
            ]
        \"\"\")
        ```

        ## Import

        Identity provider mapping rules are imported using the `provider_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Iam/providerMapping:ProviderMapping mapping <provider_id>
        ```

        :param str resource_name: The name of the resource.
        :param ProviderMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mapping_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderMappingArgs.__new__(ProviderMappingArgs)

            if mapping_rules is None and not opts.urn:
                raise TypeError("Missing required property 'mapping_rules'")
            __props__.__dict__["mapping_rules"] = mapping_rules
            if provider_id is None and not opts.urn:
                raise TypeError("Missing required property 'provider_id'")
            __props__.__dict__["provider_id"] = provider_id
        super(ProviderMapping, __self__).__init__(
            'huaweicloud:Iam/providerMapping:ProviderMapping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            mapping_rules: Optional[pulumi.Input[_builtins.str]] = None,
            provider_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ProviderMapping':
        """
        Get an existing ProviderMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] mapping_rules: Specifies the identity mapping rules in json string format.
        :param pulumi.Input[_builtins.str] provider_id: Specifies the ID of the identity provider used to manage the mapping rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProviderMappingState.__new__(_ProviderMappingState)

        __props__.__dict__["mapping_rules"] = mapping_rules
        __props__.__dict__["provider_id"] = provider_id
        return ProviderMapping(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the identity mapping rules in json string format.
        """
        return pulumi.get(self, "mapping_rules")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the identity provider used to manage the mapping rules.
        """
        return pulumi.get(self, "provider_id")

