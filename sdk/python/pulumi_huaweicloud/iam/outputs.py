# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AclIpCidr',
    'AclIpRange',
    'AgencyProjectRole',
    'AgencyV1ProjectRole',
    'AgencyV3ProjectRole',
    'ProtectionPolicySelfManagement',
    'ProviderAccessConfig',
    'ProviderConversionConversionRule',
    'ProviderConversionConversionRuleLocal',
    'ProviderConversionConversionRuleRemote',
    'ProviderConversionRule',
    'ProviderConversionRuleLocal',
    'ProviderConversionRuleRemote',
    'GetAgenciesAgencyResult',
    'GetGroupUserResult',
    'GetPermissionsPermissionResult',
    'GetProjectsProjectResult',
    'GetProvidersIdentityProviderResult',
    'GetProvidersIdentityProviderLinkResult',
    'GetUsersUserResult',
    'GetVirtualMfaDevicesVirtualMfaDeviceResult',
]

@pulumi.output_type
class AclIpCidr(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str cidr: Specifies the IPv4 CIDR block, for example, **192.168.0.0/24**.
        :param _builtins.str description: Specifies a description about an IP address range. This parameter can contain a
               maximum of 255 characters and the following characters are not allowed:**@#%^&*<>\\\\**.
        """
        pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the IPv4 CIDR block, for example, **192.168.0.0/24**.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies a description about an IP address range. This parameter can contain a
        maximum of 255 characters and the following characters are not allowed:**@#%^&*<>\\\\**.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class AclIpRange(dict):
    def __init__(__self__, *,
                 range: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str range: Specifies the Ip address range, for example, **0.0.0.0-255.255.255.0**.
        :param _builtins.str description: Specifies a description about an IP address range. This parameter can contain a
               maximum of 255 characters and the following characters are not allowed:**@#%^&*<>\\\\**.
        """
        pulumi.set(__self__, "range", range)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def range(self) -> _builtins.str:
        """
        Specifies the Ip address range, for example, **0.0.0.0-255.255.255.0**.
        """
        return pulumi.get(self, "range")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies a description about an IP address range. This parameter can contain a
        maximum of 255 characters and the following characters are not allowed:**@#%^&*<>\\\\**.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class AgencyProjectRole(dict):
    def __init__(__self__, *,
                 project: _builtins.str,
                 roles: Sequence[_builtins.str]):
        """
        :param _builtins.str project: Specifies the name of project.
        :param Sequence[_builtins.str] roles: Specifies an array of role names.
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        """
        Specifies the name of project.
        """
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of role names.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class AgencyV1ProjectRole(dict):
    def __init__(__self__, *,
                 project: _builtins.str,
                 roles: Sequence[_builtins.str]):
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class AgencyV3ProjectRole(dict):
    def __init__(__self__, *,
                 project: _builtins.str,
                 roles: Sequence[_builtins.str]):
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class ProtectionPolicySelfManagement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionPolicySelfManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionPolicySelfManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionPolicySelfManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[_builtins.bool] = None,
                 email: Optional[_builtins.bool] = None,
                 mobile: Optional[_builtins.bool] = None,
                 password: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool access_key: Specifies whether to allow IAM users to manage access keys by themselves.
        :param _builtins.bool email: Specifies whether to allow IAM users to change their email addresses.
        :param _builtins.bool mobile: Specifies whether to allow IAM users to change their mobile numbers.
        :param _builtins.bool password: Specifies whether to allow IAM users to change their passwords.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to allow IAM users to manage access keys by themselves.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to allow IAM users to change their email addresses.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def mobile(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to allow IAM users to change their mobile numbers.
        """
        return pulumi.get(self, "mobile")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to allow IAM users to change their passwords.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class ProviderAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "providerUrl":
            suggest = "provider_url"
        elif key == "signingKey":
            suggest = "signing_key"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "responseMode":
            suggest = "response_mode"
        elif key == "responseType":
            suggest = "response_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: _builtins.str,
                 client_id: _builtins.str,
                 provider_url: _builtins.str,
                 signing_key: _builtins.str,
                 authorization_endpoint: Optional[_builtins.str] = None,
                 response_mode: Optional[_builtins.str] = None,
                 response_type: Optional[_builtins.str] = None,
                 scopes: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str access_type: Specifies the access type of the identity provider.
               Available options are:
               + **program**: programmatic access only.
               + **program_console**: programmatic access and management console access.
        :param _builtins.str client_id: Specifies the ID of a client registered with the OpenID Connect identity provider.
        :param _builtins.str provider_url: Specifies the URL of the identity provider.
               This field corresponds to the iss field in the ID token.
        :param _builtins.str signing_key: Public key used to sign the ID token of the OpenID Connect identity provider.
               This field is required only if the protocol is set to *oidc*.
        :param _builtins.str authorization_endpoint: Specifies the authorization endpoint of the OpenID Connect identity
               provider. This field is required only if the access type is set to `program_console`.
        :param _builtins.str response_mode: Response mode.
               Valid values is *form_post* and *fragment*, default value is *form_post*.
               This field is required only if the access type is set to `program_console`.
        :param _builtins.str response_type: Response type. Valid values is *id_token*, default value is *id_token*.
               This field is required only if the access type is set to `program_console`.
        :param Sequence[_builtins.str] scopes: Specifies the scopes of authorization requests. It is an array of one or more scopes.
               Valid values are *openid*, *email*, *profile* and other values defined by you.
               This field is required only if the access type is set to `program_console`.
               
               > **NOTE:** 1. *openid* must be specified for this field.
               <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
               <br/>Example: openid email host.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "provider_url", provider_url)
        pulumi.set(__self__, "signing_key", signing_key)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if response_mode is not None:
            pulumi.set(__self__, "response_mode", response_mode)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> _builtins.str:
        """
        Specifies the access type of the identity provider.
        Available options are:
        + **program**: programmatic access only.
        + **program_console**: programmatic access and management console access.
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Specifies the ID of a client registered with the OpenID Connect identity provider.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> _builtins.str:
        """
        Specifies the URL of the identity provider.
        This field corresponds to the iss field in the ID token.
        """
        return pulumi.get(self, "provider_url")

    @_builtins.property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> _builtins.str:
        """
        Public key used to sign the ID token of the OpenID Connect identity provider.
        This field is required only if the protocol is set to *oidc*.
        """
        return pulumi.get(self, "signing_key")

    @_builtins.property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[_builtins.str]:
        """
        Specifies the authorization endpoint of the OpenID Connect identity
        provider. This field is required only if the access type is set to `program_console`.
        """
        return pulumi.get(self, "authorization_endpoint")

    @_builtins.property
    @pulumi.getter(name="responseMode")
    def response_mode(self) -> Optional[_builtins.str]:
        """
        Response mode.
        Valid values is *form_post* and *fragment*, default value is *form_post*.
        This field is required only if the access type is set to `program_console`.
        """
        return pulumi.get(self, "response_mode")

    @_builtins.property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[_builtins.str]:
        """
        Response type. Valid values is *id_token*, default value is *id_token*.
        This field is required only if the access type is set to `program_console`.
        """
        return pulumi.get(self, "response_type")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the scopes of authorization requests. It is an array of one or more scopes.
        Valid values are *openid*, *email*, *profile* and other values defined by you.
        This field is required only if the access type is set to `program_console`.

        > **NOTE:** 1. *openid* must be specified for this field.
        <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
        <br/>Example: openid email host.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class ProviderConversionConversionRule(dict):
    def __init__(__self__, *,
                 locals: Sequence['outputs.ProviderConversionConversionRuleLocal'],
                 remotes: Sequence['outputs.ProviderConversionConversionRuleRemote']):
        """
        :param Sequence['ProviderConversionConversionRuleLocalArgs'] locals: Specifies the federated user information on the cloud platform.
        :param Sequence['ProviderConversionConversionRuleRemoteArgs'] remotes: Specifies Federated user information in the IDP system.
               
               > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
               attributes and operators.
               If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
        """
        pulumi.set(__self__, "locals", locals)
        pulumi.set(__self__, "remotes", remotes)

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Sequence['outputs.ProviderConversionConversionRuleLocal']:
        """
        Specifies the federated user information on the cloud platform.
        """
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Sequence['outputs.ProviderConversionConversionRuleRemote']:
        """
        Specifies Federated user information in the IDP system.

        > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
        attributes and operators.
        If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
        """
        return pulumi.get(self, "remotes")


@pulumi.output_type
class ProviderConversionConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        """
        :param _builtins.str group: Specifies the user group to which the federated user belongs on the cloud platform.
        :param _builtins.str username: Specifies the name of a federated user on the cloud platform.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        Specifies the user group to which the federated user belongs on the cloud platform.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a federated user on the cloud platform.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ProviderConversionConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: _builtins.str,
                 condition: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str attribute: Specifies the attribute in the IDP assertion.
        :param _builtins.str condition: Specifies the condition of conversion rule.
               Available options are:
        :param Sequence[_builtins.str] values: Specifies the rule is matched only if the specified strings appear in the attribute type.
        """
        pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def attribute(self) -> _builtins.str:
        """
        Specifies the attribute in the IDP assertion.
        """
        return pulumi.get(self, "attribute")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        """
        Specifies the condition of conversion rule.
        Available options are:
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the rule is matched only if the specified strings appear in the attribute type.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ProviderConversionRule(dict):
    def __init__(__self__, *,
                 locals: Optional[Sequence['outputs.ProviderConversionRuleLocal']] = None,
                 remotes: Optional[Sequence['outputs.ProviderConversionRuleRemote']] = None):
        """
        :param Sequence['ProviderConversionRuleLocalArgs'] locals: The federated user information on the cloud platform.
        :param Sequence['ProviderConversionRuleRemoteArgs'] remotes: The description of the identity provider.
        """
        if locals is not None:
            pulumi.set(__self__, "locals", locals)
        if remotes is not None:
            pulumi.set(__self__, "remotes", remotes)

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Optional[Sequence['outputs.ProviderConversionRuleLocal']]:
        """
        The federated user information on the cloud platform.
        """
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Optional[Sequence['outputs.ProviderConversionRuleRemote']]:
        """
        The description of the identity provider.
        """
        return pulumi.get(self, "remotes")


@pulumi.output_type
class ProviderConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        """
        :param _builtins.str group: The user group to which the federated user belongs on the cloud platform.
        :param _builtins.str username: The name of a federated user on the cloud platform.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        The user group to which the federated user belongs on the cloud platform.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        """
        The name of a federated user on the cloud platform.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ProviderConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: Optional[_builtins.str] = None,
                 condition: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str attribute: The attribute in the IDP assertion.
        :param _builtins.str condition: The condition of conversion rule.
        :param Sequence[_builtins.str] values: The rule is matched only if the specified strings appear in the attribute type.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def attribute(self) -> Optional[_builtins.str]:
        """
        The attribute in the IDP assertion.
        """
        return pulumi.get(self, "attribute")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        """
        The condition of conversion rule.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        The rule is matched only if the specified strings appear in the attribute type.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAgenciesAgencyResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 duration: _builtins.str,
                 expired_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 trust_domain_id: _builtins.str,
                 trust_domain_name: _builtins.str):
        """
        :param _builtins.str created_at: The time when the agency was created.
        :param _builtins.str description: The supplementary information about the agency.
        :param _builtins.str duration: The validity period of an agency.
        :param _builtins.str expired_at: The expiration time of agency.
        :param _builtins.str id: The agency ID.
        :param _builtins.str name: Specifies the name of agency. The name is a string of 1 to 64 characters.
        :param _builtins.str trust_domain_id: Specifies the ID of delegated user domain.
        :param _builtins.str trust_domain_name: The name of delegated user domain.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trust_domain_id", trust_domain_id)
        pulumi.set(__self__, "trust_domain_name", trust_domain_name)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the agency was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The supplementary information about the agency.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        The validity period of an agency.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time of agency.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The agency ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of agency. The name is a string of 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="trustDomainId")
    def trust_domain_id(self) -> _builtins.str:
        """
        Specifies the ID of delegated user domain.
        """
        return pulumi.get(self, "trust_domain_id")

    @_builtins.property
    @pulumi.getter(name="trustDomainName")
    def trust_domain_name(self) -> _builtins.str:
        """
        The name of delegated user domain.
        """
        return pulumi.get(self, "trust_domain_name")


@pulumi.output_type
class GetGroupUserResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 password_expires_at: _builtins.str,
                 password_status: _builtins.bool,
                 password_strength: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the identity group.
        :param _builtins.bool enabled: Indicates the whether the IAM user is enabled.
        :param _builtins.str id: Specifies the ID of the identity group.
        :param _builtins.str name: Specifies the name of the identity group.
        :param _builtins.str password_expires_at: Indicates the time when the password will expire.
               If this value is not set, the password will not expire.
        :param _builtins.bool password_status: Indicates the password status. True means that the password needs to be changed,
               and false means that the password is normal.
        :param _builtins.str password_strength: Indicates the password strength. The value can be high, mid, or low.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)
        pulumi.set(__self__, "password_strength", password_strength)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the identity group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates the whether the IAM user is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the identity group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the identity group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> _builtins.str:
        """
        Indicates the time when the password will expire.
        If this value is not set, the password will not expire.
        """
        return pulumi.get(self, "password_expires_at")

    @_builtins.property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> _builtins.bool:
        """
        Indicates the password status. True means that the password needs to be changed,
        and false means that the password is normal.
        """
        return pulumi.get(self, "password_status")

    @_builtins.property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> _builtins.str:
        """
        Indicates the password strength. The value can be high, mid, or low.
        """
        return pulumi.get(self, "password_strength")


@pulumi.output_type
class GetPermissionsPermissionResult(dict):
    def __init__(__self__, *,
                 catalog: _builtins.str,
                 description: _builtins.str,
                 description_cn: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 policy: _builtins.str):
        """
        :param _builtins.str catalog: Specifies the service catalog of the permission.
        :param _builtins.str description: The description of the permission.
        :param _builtins.str description_cn: The description of the permission in Chinese.
        :param _builtins.str id: The permission ID.
        :param _builtins.str name: Specifies the permission name or filter condition.
               + Permission name: For example, if you set this parameter to **ECS FullAccess**, information about the permission will
               be returned.
               + Filter condition: For example, if you set this parameter to **Administrator**, all administrator permissions that
               meet the conditions will be returned.
        :param _builtins.str policy: The content of the permission.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_cn", description_cn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy", policy)

    @_builtins.property
    @pulumi.getter
    def catalog(self) -> _builtins.str:
        """
        Specifies the service catalog of the permission.
        """
        return pulumi.get(self, "catalog")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the permission.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionCn")
    def description_cn(self) -> _builtins.str:
        """
        The description of the permission in Chinese.
        """
        return pulumi.get(self, "description_cn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The permission ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the permission name or filter condition.
        + Permission name: For example, if you set this parameter to **ECS FullAccess**, information about the permission will
        be returned.
        + Filter condition: For example, if you set this parameter to **Administrator**, all administrator permissions that
        meet the conditions will be returned.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        The content of the permission.
        """
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.bool enabled: Whether the IAM project is enabled.
        :param _builtins.str id: The IAM project ID.
        :param _builtins.str name: Specifies the IAM project name to query.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the IAM project is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The IAM project ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the IAM project name to query.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 links: Sequence['outputs.GetProvidersIdentityProviderLinkResult'],
                 remote_ids: Sequence[_builtins.str],
                 sso_type: _builtins.str,
                 status: _builtins.bool):
        """
        :param _builtins.str description: The description of the identity provider.
        :param _builtins.str id: The identity provider ID which equals the identity provider name.
        :param Sequence['GetProvidersIdentityProviderLinkArgs'] links: The links of identity provider.
        :param Sequence[_builtins.str] remote_ids: The list of federated user IDs configured for the identity provider.
        :param _builtins.str sso_type: Specifies the single sign-on type of the identity provider.
        :param _builtins.bool status: Specifies the status of the identity provider. The value can be **true** or **false**
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "remote_ids", remote_ids)
        pulumi.set(__self__, "sso_type", sso_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the identity provider.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The identity provider ID which equals the identity provider name.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetProvidersIdentityProviderLinkResult']:
        """
        The links of identity provider.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Sequence[_builtins.str]:
        """
        The list of federated user IDs configured for the identity provider.
        """
        return pulumi.get(self, "remote_ids")

    @_builtins.property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> _builtins.str:
        """
        Specifies the single sign-on type of the identity provider.
        """
        return pulumi.get(self, "sso_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.bool:
        """
        Specifies the status of the identity provider. The value can be **true** or **false**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetProvidersIdentityProviderLinkResult(dict):
    def __init__(__self__, *,
                 protocols: _builtins.str,
                 self: _builtins.str):
        """
        :param _builtins.str protocols: The protocol resource link.
        :param _builtins.str self: The identity provider resource link.
        """
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "self", self)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> _builtins.str:
        """
        The protocol resource link.
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter
    def self(self) -> _builtins.str:
        """
        The identity provider resource link.
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 groups: Sequence[_builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 password_expires_at: _builtins.str,
                 password_status: _builtins.bool):
        """
        :param _builtins.str description: Indicates the description of the IAM user.
        :param _builtins.bool enabled: Specifies the status of the IAM user, the default value is **true**.
        :param Sequence[_builtins.str] groups: Indicates the user groups to which an IAM user belongs.
        :param _builtins.str id: Indicates the ID of the User.
        :param _builtins.str name: Specifies the IAM user name.
        :param _builtins.str password_expires_at: Indicates the time when the password will expire.
               If this value is not set, the password will not expire.
        :param _builtins.bool password_status: Indicates the password status. True means that the password needs to be changed,
               and false means that the password is normal.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the IAM user.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies the status of the IAM user, the default value is **true**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        """
        Indicates the user groups to which an IAM user belongs.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the User.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the IAM user name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> _builtins.str:
        """
        Indicates the time when the password will expire.
        If this value is not set, the password will not expire.
        """
        return pulumi.get(self, "password_expires_at")

    @_builtins.property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> _builtins.bool:
        """
        Indicates the password status. True means that the password needs to be changed,
        and false means that the password is normal.
        """
        return pulumi.get(self, "password_status")


@pulumi.output_type
class GetVirtualMfaDevicesVirtualMfaDeviceResult(dict):
    def __init__(__self__, *,
                 serial_number: _builtins.str,
                 user_id: _builtins.str):
        """
        :param _builtins.str serial_number: The virtual MFA device serial number.
        :param _builtins.str user_id: Specifies the user ID to which the virtual MFA device belongs.
        """
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        The virtual MFA device serial number.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Specifies the user ID to which the virtual MFA device belongs.
        """
        return pulumi.get(self, "user_id")


