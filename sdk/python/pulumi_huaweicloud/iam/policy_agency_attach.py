# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PolicyAgencyAttachArgs', 'PolicyAgencyAttach']

@pulumi.input_type
class PolicyAgencyAttachArgs:
    def __init__(__self__, *,
                 agency_id: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a PolicyAgencyAttach resource.
        """
        pulumi.set(__self__, "agency_id", agency_id)
        pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="agencyId")
    def agency_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "agency_id")

    @agency_id.setter
    def agency_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_id", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)


@pulumi.input_type
class _PolicyAgencyAttachState:
    def __init__(__self__, *,
                 agency_id: Optional[pulumi.Input[_builtins.str]] = None,
                 attached_at: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyAgencyAttach resources.
        """
        if agency_id is not None:
            pulumi.set(__self__, "agency_id", agency_id)
        if attached_at is not None:
            pulumi.set(__self__, "attached_at", attached_at)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_urn is not None:
            pulumi.set(__self__, "policy_urn", policy_urn)

    @_builtins.property
    @pulumi.getter(name="agencyId")
    def agency_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agency_id")

    @agency_id.setter
    def agency_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_id", value)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "attached_at")

    @attached_at.setter
    def attached_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attached_at", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyUrn")
    def policy_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "policy_urn")

    @policy_urn.setter
    def policy_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_urn", value)


@pulumi.type_token("huaweicloud:Iam/policyAgencyAttach:PolicyAgencyAttach")
class PolicyAgencyAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a PolicyAgencyAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyAgencyAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PolicyAgencyAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyAgencyAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyAgencyAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyAgencyAttachArgs.__new__(PolicyAgencyAttachArgs)

            if agency_id is None and not opts.urn:
                raise TypeError("Missing required property 'agency_id'")
            __props__.__dict__["agency_id"] = agency_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["attached_at"] = None
            __props__.__dict__["policy_name"] = None
            __props__.__dict__["policy_urn"] = None
        super(PolicyAgencyAttach, __self__).__init__(
            'huaweicloud:Iam/policyAgencyAttach:PolicyAgencyAttach',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_id: Optional[pulumi.Input[_builtins.str]] = None,
            attached_at: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyAgencyAttach':
        """
        Get an existing PolicyAgencyAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyAgencyAttachState.__new__(_PolicyAgencyAttachState)

        __props__.__dict__["agency_id"] = agency_id
        __props__.__dict__["attached_at"] = attached_at
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["policy_urn"] = policy_urn
        return PolicyAgencyAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agencyId")
    def agency_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "agency_id")

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyUrn")
    def policy_urn(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "policy_urn")

