# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetProvidersResult',
    'AwaitableGetProvidersResult',
    'get_providers',
    'get_providers_output',
]

@pulumi.output_type
class GetProvidersResult:
    """
    A collection of values returned by getProviders.
    """
    def __init__(__self__, id=None, identity_providers=None, name=None, sso_type=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_providers and not isinstance(identity_providers, list):
            raise TypeError("Expected argument 'identity_providers' to be a list")
        pulumi.set(__self__, "identity_providers", identity_providers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sso_type and not isinstance(sso_type, str):
            raise TypeError("Expected argument 'sso_type' to be a str")
        pulumi.set(__self__, "sso_type", sso_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Sequence['outputs.GetProvidersIdentityProviderResult']:
        """
        The list of identity providers.
        """
        return pulumi.get(self, "identity_providers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> Optional[_builtins.str]:
        """
        The single sign-on type of the identity provider.
        """
        return pulumi.get(self, "sso_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The enabled status for the identity provider.
        """
        return pulumi.get(self, "status")


class AwaitableGetProvidersResult(GetProvidersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProvidersResult(
            id=self.id,
            identity_providers=self.identity_providers,
            name=self.name,
            sso_type=self.sso_type,
            status=self.status)


def get_providers(name: Optional[_builtins.str] = None,
                  sso_type: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProvidersResult:
    """
    Use this data source to get the list of IAM identity providers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    provider_name = config.require_object("providerName")
    test = huaweicloud.Iam.get_providers(name=provider_name)
    ```


    :param _builtins.str name: Specifies the name of the identity provider.
    :param _builtins.str sso_type: Specifies the single sign-on type of the identity provider.
    :param _builtins.str status: Specifies the status of the identity provider. The value can be **true** or **false**
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['ssoType'] = sso_type
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iam/getProviders:getProviders', __args__, opts=opts, typ=GetProvidersResult).value

    return AwaitableGetProvidersResult(
        id=pulumi.get(__ret__, 'id'),
        identity_providers=pulumi.get(__ret__, 'identity_providers'),
        name=pulumi.get(__ret__, 'name'),
        sso_type=pulumi.get(__ret__, 'sso_type'),
        status=pulumi.get(__ret__, 'status'))
def get_providers_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         sso_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProvidersResult]:
    """
    Use this data source to get the list of IAM identity providers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    provider_name = config.require_object("providerName")
    test = huaweicloud.Iam.get_providers(name=provider_name)
    ```


    :param _builtins.str name: Specifies the name of the identity provider.
    :param _builtins.str sso_type: Specifies the single sign-on type of the identity provider.
    :param _builtins.str status: Specifies the status of the identity provider. The value can be **true** or **false**
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['ssoType'] = sso_type
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Iam/getProviders:getProviders', __args__, opts=opts, typ=GetProvidersResult)
    return __ret__.apply(lambda __response__: GetProvidersResult(
        id=pulumi.get(__response__, 'id'),
        identity_providers=pulumi.get(__response__, 'identity_providers'),
        name=pulumi.get(__response__, 'name'),
        sso_type=pulumi.get(__response__, 'sso_type'),
        status=pulumi.get(__response__, 'status')))
