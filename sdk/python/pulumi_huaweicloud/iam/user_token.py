# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UserTokenArgs', 'UserToken']

@pulumi.input_type
class UserTokenArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 user_name: pulumi.Input[_builtins.str],
                 project_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a UserToken resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the account name to which the IAM user belongs.
               Changing this will create a new token.
        :param pulumi.Input[_builtins.str] password: Specifies the IAM user password. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] user_name: Specifies the IAM user name. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name. If it is blank, the token applies to global
               services, otherwise the token applies to project-level services. Changing this will create a new token.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the account name to which the IAM user belongs.
        Changing this will create a new token.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM user password. Changing this will create a new token.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM user name. Changing this will create a new token.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name. If it is blank, the token applies to global
        services, otherwise the token applies to project-level services. Changing this will create a new token.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _UserTokenState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering UserToken resources.
        :param pulumi.Input[_builtins.str] account_name: Specifies the account name to which the IAM user belongs.
               Changing this will create a new token.
        :param pulumi.Input[_builtins.str] expires_at: The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
        :param pulumi.Input[_builtins.str] password: Specifies the IAM user password. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name. If it is blank, the token applies to global
               services, otherwise the token applies to project-level services. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] token: The token. Validity period is 24 hours.
        :param pulumi.Input[_builtins.str] user_name: Specifies the IAM user name. Changing this will create a new token.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account name to which the IAM user belongs.
        Changing this will create a new token.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_at", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM user password. Changing this will create a new token.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name. If it is blank, the token applies to global
        services, otherwise the token applies to project-level services. Changing this will create a new token.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The token. Validity period is 24 hours.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM user name. Changing this will create a new token.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("huaweicloud:Iam/userToken:UserToken")
class UserToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IAM user token resource within HuaweiCloud.

        ->**Note** The token can not be destroyed. It will be invalid after expiration time. If password or AK/SK is changed,
        the token valid time will last less than 30 minutes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        account_name = config.require_object("accountName")
        user_name = config.require_object("userName")
        password = config.require_object("password")
        test = huaweicloud.iam.UserToken("test",
            account_name=account_name,
            user_name=user_name,
            password=password)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the account name to which the IAM user belongs.
               Changing this will create a new token.
        :param pulumi.Input[_builtins.str] password: Specifies the IAM user password. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name. If it is blank, the token applies to global
               services, otherwise the token applies to project-level services. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] user_name: Specifies the IAM user name. Changing this will create a new token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IAM user token resource within HuaweiCloud.

        ->**Note** The token can not be destroyed. It will be invalid after expiration time. If password or AK/SK is changed,
        the token valid time will last less than 30 minutes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        account_name = config.require_object("accountName")
        user_name = config.require_object("userName")
        password = config.require_object("password")
        test = huaweicloud.iam.UserToken("test",
            account_name=account_name,
            user_name=user_name,
            password=password)
        ```

        :param str resource_name: The name of the resource.
        :param UserTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserTokenArgs.__new__(UserTokenArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["project_name"] = project_name
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UserToken, __self__).__init__(
            'huaweicloud:Iam/userToken:UserToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[_builtins.str]] = None,
            expires_at: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            project_name: Optional[pulumi.Input[_builtins.str]] = None,
            token: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'UserToken':
        """
        Get an existing UserToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the account name to which the IAM user belongs.
               Changing this will create a new token.
        :param pulumi.Input[_builtins.str] expires_at: The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
        :param pulumi.Input[_builtins.str] password: Specifies the IAM user password. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name. If it is blank, the token applies to global
               services, otherwise the token applies to project-level services. Changing this will create a new token.
        :param pulumi.Input[_builtins.str] token: The token. Validity period is 24 hours.
        :param pulumi.Input[_builtins.str] user_name: Specifies the IAM user name. Changing this will create a new token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserTokenState.__new__(_UserTokenState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["password"] = password
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["token"] = token
        __props__.__dict__["user_name"] = user_name
        return UserToken(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the account name to which the IAM user belongs.
        Changing this will create a new token.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[_builtins.str]:
        """
        The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
        """
        return pulumi.get(self, "expires_at")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM user password. Changing this will create a new token.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the project name. If it is blank, the token applies to global
        services, otherwise the token applies to project-level services. Changing this will create a new token.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def token(self) -> pulumi.Output[_builtins.str]:
        """
        The token. Validity period is 24 hours.
        """
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM user name. Changing this will create a new token.
        """
        return pulumi.get(self, "user_name")

