# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AlarmNotificationArgs', 'AlarmNotification']

@pulumi.input_type
class AlarmNotificationArgs:
    def __init__(__self__, *,
                 alarm_topic_id: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.int],
                 topic_urn: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmNotification resource.
        :param pulumi.Input[_builtins.str] alarm_topic_id: Specifies the alarm topic ID.
               
               Changing this will create new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the alarm notification status. Valid values are:
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the unique resource identifier of an SMN topic.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "alarm_topic_id", alarm_topic_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topic_urn", topic_urn)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="alarmTopicId")
    def alarm_topic_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm topic ID.

        Changing this will create new resource.
        """
        return pulumi.get(self, "alarm_topic_id")

    @alarm_topic_id.setter
    def alarm_topic_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_topic_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the alarm notification status. Valid values are:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the unique resource identifier of an SMN topic.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmNotificationState:
    def __init__(__self__, *,
                 alarm_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmNotification resources.
        :param pulumi.Input[_builtins.str] alarm_topic_id: Specifies the alarm topic ID.
               
               Changing this will create new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the alarm notification status. Valid values are:
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the unique resource identifier of an SMN topic.
        """
        if alarm_topic_id is not None:
            pulumi.set(__self__, "alarm_topic_id", alarm_topic_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter(name="alarmTopicId")
    def alarm_topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm topic ID.

        Changing this will create new resource.
        """
        return pulumi.get(self, "alarm_topic_id")

    @alarm_topic_id.setter
    def alarm_topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_topic_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the alarm notification status. Valid values are:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique resource identifier of an SMN topic.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)


@pulumi.type_token("huaweicloud:dsc/alarmNotification:AlarmNotification")
class AlarmNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DSC alarm notification resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_topic_id = config.require_object("alarmTopicId")
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.dsc.AlarmNotification("test",
            alarm_topic_id=alarm_topic_id,
            topic_urn=topic_urn,
            status=1)
        ```

        ## Import

        DSC alarm notification resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dsc/alarmNotification:AlarmNotification test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `status`. It is generally recommended running `pulumi preview` after

        importing the resource. You can then decide if changes should be applied to the resource, or the resource

        definition should be updated to align with the cloud. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dsc_alarm_notification" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              status,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_topic_id: Specifies the alarm topic ID.
               
               Changing this will create new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the alarm notification status. Valid values are:
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the unique resource identifier of an SMN topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DSC alarm notification resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_topic_id = config.require_object("alarmTopicId")
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.dsc.AlarmNotification("test",
            alarm_topic_id=alarm_topic_id,
            topic_urn=topic_urn,
            status=1)
        ```

        ## Import

        DSC alarm notification resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dsc/alarmNotification:AlarmNotification test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `status`. It is generally recommended running `pulumi preview` after

        importing the resource. You can then decide if changes should be applied to the resource, or the resource

        definition should be updated to align with the cloud. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dsc_alarm_notification" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              status,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AlarmNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmNotificationArgs.__new__(AlarmNotificationArgs)

            if alarm_topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_topic_id'")
            __props__.__dict__["alarm_topic_id"] = alarm_topic_id
            __props__.__dict__["region"] = region
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
        super(AlarmNotification, __self__).__init__(
            'huaweicloud:dsc/alarmNotification:AlarmNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmNotification':
        """
        Get an existing AlarmNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_topic_id: Specifies the alarm topic ID.
               
               Changing this will create new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the alarm notification status. Valid values are:
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the unique resource identifier of an SMN topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmNotificationState.__new__(_AlarmNotificationState)

        __props__.__dict__["alarm_topic_id"] = alarm_topic_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["topic_urn"] = topic_urn
        return AlarmNotification(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmTopicId")
    def alarm_topic_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm topic ID.

        Changing this will create new resource.
        """
        return pulumi.get(self, "alarm_topic_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the alarm notification status. Valid values are:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique resource identifier of an SMN topic.
        """
        return pulumi.get(self, "topic_urn")

