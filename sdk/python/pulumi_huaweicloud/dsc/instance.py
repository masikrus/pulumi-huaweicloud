# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charging_mode: pulumi.Input[_builtins.str],
                 edition: pulumi.Input[_builtins.str],
                 period: pulumi.Input[_builtins.int],
                 period_unit: pulumi.Input[_builtins.str],
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 database_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 obs_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode.
               Valid value is **prePaid** (the yearly/monthly billing mode).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] edition: Specifies the edition of DSC.
               By default, it supports `2` databases and `100`GB of OBS storage.
               The options are as follows:
               + **base_standard**: Standard Edition.
               It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
               + **base_professional**: Professional Edition.
               It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
               and **Watermark injection/extraction**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               Defaults to **false**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] database_expansion_package: Specifies the size of database expansion packages.
               One expansion package offers one database.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] obs_expansion_package: Specifies the size of OBS expansion packages.
               One expansion package offers `1` TB of OBS storage.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if database_expansion_package is not None:
            pulumi.set(__self__, "database_expansion_package", database_expansion_package)
        if obs_expansion_package is not None:
            pulumi.set(__self__, "obs_expansion_package", obs_expansion_package)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the billing mode.
        Valid value is **prePaid** (the yearly/monthly billing mode).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def edition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the edition of DSC.
        By default, it supports `2` databases and `100`GB of OBS storage.
        The options are as follows:
        + **base_standard**: Standard Edition.
        It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
        + **base_professional**: Professional Edition.
        It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
        and **Watermark injection/extraction**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "edition", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
        Defaults to **false**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="databaseExpansionPackage")
    def database_expansion_package(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of database expansion packages.
        One expansion package offers one database.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "database_expansion_package")

    @database_expansion_package.setter
    def database_expansion_package(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "database_expansion_package", value)

    @_builtins.property
    @pulumi.getter(name="obsExpansionPackage")
    def obs_expansion_package(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of OBS expansion packages.
        One expansion package offers `1` TB of OBS storage.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_expansion_package")

    @obs_expansion_package.setter
    def obs_expansion_package(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "obs_expansion_package", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 database_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 edition: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               Defaults to **false**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode.
               Valid value is **prePaid** (the yearly/monthly billing mode).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] database_expansion_package: Specifies the size of database expansion packages.
               One expansion package offers one database.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] edition: Specifies the edition of DSC.
               By default, it supports `2` databases and `100`GB of OBS storage.
               The options are as follows:
               + **base_standard**: Standard Edition.
               It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
               + **base_professional**: Professional Edition.
               It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
               and **Watermark injection/extraction**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] obs_expansion_package: Specifies the size of OBS expansion packages.
               One expansion package offers `1` TB of OBS storage.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if database_expansion_package is not None:
            pulumi.set(__self__, "database_expansion_package", database_expansion_package)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if obs_expansion_package is not None:
            pulumi.set(__self__, "obs_expansion_package", obs_expansion_package)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
        Defaults to **false**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the billing mode.
        Valid value is **prePaid** (the yearly/monthly billing mode).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="databaseExpansionPackage")
    def database_expansion_package(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of database expansion packages.
        One expansion package offers one database.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "database_expansion_package")

    @database_expansion_package.setter
    def database_expansion_package(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "database_expansion_package", value)

    @_builtins.property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the edition of DSC.
        By default, it supports `2` databases and `100`GB of OBS storage.
        The options are as follows:
        + **base_standard**: Standard Edition.
        It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
        + **base_professional**: Professional Edition.
        It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
        and **Watermark injection/extraction**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edition", value)

    @_builtins.property
    @pulumi.getter(name="obsExpansionPackage")
    def obs_expansion_package(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of OBS expansion packages.
        One expansion package offers `1` TB of OBS storage.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_expansion_package")

    @obs_expansion_package.setter
    def obs_expansion_package(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "obs_expansion_package", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:dsc/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 database_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 edition: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DSC instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dsc.Instance("test",
            edition="base_standard",
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="false",
            obs_expansion_package=1,
            database_expansion_package=1)
        ```

        ## Import

        The DSC instance resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dsc/instance:Instance test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               Defaults to **false**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode.
               Valid value is **prePaid** (the yearly/monthly billing mode).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] database_expansion_package: Specifies the size of database expansion packages.
               One expansion package offers one database.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] edition: Specifies the edition of DSC.
               By default, it supports `2` databases and `100`GB of OBS storage.
               The options are as follows:
               + **base_standard**: Standard Edition.
               It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
               + **base_professional**: Professional Edition.
               It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
               and **Watermark injection/extraction**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] obs_expansion_package: Specifies the size of OBS expansion packages.
               One expansion package offers `1` TB of OBS storage.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DSC instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dsc.Instance("test",
            edition="base_standard",
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="false",
            obs_expansion_package=1,
            database_expansion_package=1)
        ```

        ## Import

        The DSC instance resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dsc/instance:Instance test <id>
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 database_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 edition: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            if charging_mode is None and not opts.urn:
                raise TypeError("Missing required property 'charging_mode'")
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["database_expansion_package"] = database_expansion_package
            if edition is None and not opts.urn:
                raise TypeError("Missing required property 'edition'")
            __props__.__dict__["edition"] = edition
            __props__.__dict__["obs_expansion_package"] = obs_expansion_package
            if period is None and not opts.urn:
                raise TypeError("Missing required property 'period'")
            __props__.__dict__["period"] = period
            if period_unit is None and not opts.urn:
                raise TypeError("Missing required property 'period_unit'")
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
        super(Instance, __self__).__init__(
            'huaweicloud:dsc/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            database_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
            edition: Optional[pulumi.Input[_builtins.str]] = None,
            obs_expansion_package: Optional[pulumi.Input[_builtins.int]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               Defaults to **false**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode.
               Valid value is **prePaid** (the yearly/monthly billing mode).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] database_expansion_package: Specifies the size of database expansion packages.
               One expansion package offers one database.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] edition: Specifies the edition of DSC.
               By default, it supports `2` databases and `100`GB of OBS storage.
               The options are as follows:
               + **base_standard**: Standard Edition.
               It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
               + **base_professional**: Professional Edition.
               It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
               and **Watermark injection/extraction**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] obs_expansion_package: Specifies the size of OBS expansion packages.
               One expansion package offers `1` TB of OBS storage.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["database_expansion_package"] = database_expansion_package
        __props__.__dict__["edition"] = edition
        __props__.__dict__["obs_expansion_package"] = obs_expansion_package
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
        Defaults to **false**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the billing mode.
        Valid value is **prePaid** (the yearly/monthly billing mode).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="databaseExpansionPackage")
    def database_expansion_package(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the size of database expansion packages.
        One expansion package offers one database.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "database_expansion_package")

    @_builtins.property
    @pulumi.getter
    def edition(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the edition of DSC.
        By default, it supports `2` databases and `100`GB of OBS storage.
        The options are as follows:
        + **base_standard**: Standard Edition.
        It supports **Overview**, **Sensitive Data Identification** and **Data Usage Audit**.
        + **base_professional**: Professional Edition.
        It supports **Overview**, **Sensitive Data Identification**, **Data Usage Audit**, **Data Masking**,
        and **Watermark injection/extraction**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "edition")

    @_builtins.property
    @pulumi.getter(name="obsExpansionPackage")
    def obs_expansion_package(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the size of OBS expansion packages.
        One expansion package offers `1` TB of OBS storage.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_expansion_package")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

