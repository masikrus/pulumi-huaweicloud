# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralNetworkPoliciesResult',
    'AwaitableGetCentralNetworkPoliciesResult',
    'get_central_network_policies',
    'get_central_network_policies_output',
]

@pulumi.output_type
class GetCentralNetworkPoliciesResult:
    """
    A collection of values returned by getCentralNetworkPolicies.
    """
    def __init__(__self__, central_network_id=None, central_network_policies=None, id=None, is_applied=None, policy_id=None, region=None, status=None):
        if central_network_id and not isinstance(central_network_id, str):
            raise TypeError("Expected argument 'central_network_id' to be a str")
        pulumi.set(__self__, "central_network_id", central_network_id)
        if central_network_policies and not isinstance(central_network_policies, list):
            raise TypeError("Expected argument 'central_network_policies' to be a list")
        pulumi.set(__self__, "central_network_policies", central_network_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_applied and not isinstance(is_applied, str):
            raise TypeError("Expected argument 'is_applied' to be a str")
        pulumi.set(__self__, "is_applied", is_applied)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        The ID of the central network.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="centralNetworkPolicies")
    def central_network_policies(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyResult']:
        """
        The list of the central network policies.
        """
        return pulumi.get(self, "central_network_policies")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isApplied")
    def is_applied(self) -> Optional[_builtins.str]:
        """
        Whether the policy is applied or not.
        """
        return pulumi.get(self, "is_applied")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the central network policy.
        """
        return pulumi.get(self, "status")


class AwaitableGetCentralNetworkPoliciesResult(GetCentralNetworkPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralNetworkPoliciesResult(
            central_network_id=self.central_network_id,
            central_network_policies=self.central_network_policies,
            id=self.id,
            is_applied=self.is_applied,
            policy_id=self.policy_id,
            region=self.region,
            status=self.status)


def get_central_network_policies(central_network_id: Optional[_builtins.str] = None,
                                 is_applied: Optional[_builtins.str] = None,
                                 policy_id: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 status: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralNetworkPoliciesResult:
    """
    Use this data source to get the list of CC central network policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    central_network_policy_id = config.require_object("centralNetworkPolicyId")
    test = huaweicloud.Cc.get_central_network_policies(central_network_id=central_network_id,
        policy_id=central_network_policy_id)
    ```


    :param _builtins.str central_network_id: Specifies the ID of central network.
    :param _builtins.str is_applied: Specifies whether the central network policy is applied or not.
    :param _builtins.str policy_id: Specifies the ID of central network policy.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of central network policy.
           The valid values can be **AVAILABLE**, **CANCELING**, **APPLYING**, **FAILED** and **DELETED**.
    """
    __args__ = dict()
    __args__['centralNetworkId'] = central_network_id
    __args__['isApplied'] = is_applied
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getCentralNetworkPolicies:getCentralNetworkPolicies', __args__, opts=opts, typ=GetCentralNetworkPoliciesResult).value

    return AwaitableGetCentralNetworkPoliciesResult(
        central_network_id=pulumi.get(__ret__, 'central_network_id'),
        central_network_policies=pulumi.get(__ret__, 'central_network_policies'),
        id=pulumi.get(__ret__, 'id'),
        is_applied=pulumi.get(__ret__, 'is_applied'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_central_network_policies_output(central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        is_applied: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCentralNetworkPoliciesResult]:
    """
    Use this data source to get the list of CC central network policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    central_network_policy_id = config.require_object("centralNetworkPolicyId")
    test = huaweicloud.Cc.get_central_network_policies(central_network_id=central_network_id,
        policy_id=central_network_policy_id)
    ```


    :param _builtins.str central_network_id: Specifies the ID of central network.
    :param _builtins.str is_applied: Specifies whether the central network policy is applied or not.
    :param _builtins.str policy_id: Specifies the ID of central network policy.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of central network policy.
           The valid values can be **AVAILABLE**, **CANCELING**, **APPLYING**, **FAILED** and **DELETED**.
    """
    __args__ = dict()
    __args__['centralNetworkId'] = central_network_id
    __args__['isApplied'] = is_applied
    __args__['policyId'] = policy_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getCentralNetworkPolicies:getCentralNetworkPolicies', __args__, opts=opts, typ=GetCentralNetworkPoliciesResult)
    return __ret__.apply(lambda __response__: GetCentralNetworkPoliciesResult(
        central_network_id=pulumi.get(__response__, 'central_network_id'),
        central_network_policies=pulumi.get(__response__, 'central_network_policies'),
        id=pulumi.get(__response__, 'id'),
        is_applied=pulumi.get(__response__, 'is_applied'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
