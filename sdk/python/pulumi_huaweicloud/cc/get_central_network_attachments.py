# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralNetworkAttachmentsResult',
    'AwaitableGetCentralNetworkAttachmentsResult',
    'get_central_network_attachments',
    'get_central_network_attachments_output',
]

@pulumi.output_type
class GetCentralNetworkAttachmentsResult:
    """
    A collection of values returned by getCentralNetworkAttachments.
    """
    def __init__(__self__, attachment_id=None, attachment_instance_id=None, attachment_instance_type=None, central_network_attachments=None, central_network_id=None, id=None, name=None, region=None, state=None):
        if attachment_id and not isinstance(attachment_id, str):
            raise TypeError("Expected argument 'attachment_id' to be a str")
        pulumi.set(__self__, "attachment_id", attachment_id)
        if attachment_instance_id and not isinstance(attachment_instance_id, str):
            raise TypeError("Expected argument 'attachment_instance_id' to be a str")
        pulumi.set(__self__, "attachment_instance_id", attachment_instance_id)
        if attachment_instance_type and not isinstance(attachment_instance_type, str):
            raise TypeError("Expected argument 'attachment_instance_type' to be a str")
        pulumi.set(__self__, "attachment_instance_type", attachment_instance_type)
        if central_network_attachments and not isinstance(central_network_attachments, list):
            raise TypeError("Expected argument 'central_network_attachments' to be a list")
        pulumi.set(__self__, "central_network_attachments", central_network_attachments)
        if central_network_id and not isinstance(central_network_id, str):
            raise TypeError("Expected argument 'central_network_id' to be a str")
        pulumi.set(__self__, "central_network_id", central_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise router connection.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceId")
    def attachment_instance_id(self) -> Optional[_builtins.str]:
        """
        The attachment instance ID.
        """
        return pulumi.get(self, "attachment_instance_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceType")
    def attachment_instance_type(self) -> Optional[_builtins.str]:
        """
        The attachment instance type.
        """
        return pulumi.get(self, "attachment_instance_type")

    @_builtins.property
    @pulumi.getter(name="centralNetworkAttachments")
    def central_network_attachments(self) -> Sequence['outputs.GetCentralNetworkAttachmentsCentralNetworkAttachmentResult']:
        """
        List of attachments on the central network.
        """
        return pulumi.get(self, "central_network_attachments")

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        The central network ID.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The attachment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The attachment status.
        """
        return pulumi.get(self, "state")


class AwaitableGetCentralNetworkAttachmentsResult(GetCentralNetworkAttachmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralNetworkAttachmentsResult(
            attachment_id=self.attachment_id,
            attachment_instance_id=self.attachment_instance_id,
            attachment_instance_type=self.attachment_instance_type,
            central_network_attachments=self.central_network_attachments,
            central_network_id=self.central_network_id,
            id=self.id,
            name=self.name,
            region=self.region,
            state=self.state)


def get_central_network_attachments(attachment_id: Optional[_builtins.str] = None,
                                    attachment_instance_id: Optional[_builtins.str] = None,
                                    attachment_instance_type: Optional[_builtins.str] = None,
                                    central_network_id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    state: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralNetworkAttachmentsResult:
    """
    Use this data source to get the list of CC attachments on the central network.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    test = huaweicloud.Cc.get_central_network_attachments(central_network_id=central_network_id)
    ```


    :param _builtins.str attachment_id: Specifies the attachment ID.
    :param _builtins.str attachment_instance_id: Specifies the instance ID.
    :param _builtins.str attachment_instance_type: Specifies the type of attachment instance.
           The valid values are **GDGW** and **ER_ROUTE_TABLE**.
    :param _builtins.str central_network_id: Specifies the central network ID.
    :param _builtins.str name: Specifies the attachment name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the attachment status.
           The valid values are as follows:
           + **AVAILABLE**: The attachment is available.
           + **CREATING**: The attachment is being created.
           + **UPDATING**: The attachment is being updated.
           + **DELETING**: The attachment is being deleted.
           + **FREEZING**: The attachment is being frozen.
           + **UNFREEZING**: The attachment is being unfrozen.
           + **RECOVERING**: The attachment is being recovered.
           + **FAILED**: The operation on the attachment failed.
           + **DELETED**: The attachment is deleted.
           + **APPROVING**: The attachment is being approved.
           + **APPROVED**: The attachment is approved.
           + **UNAPPROVED**: The approval failed.
    """
    __args__ = dict()
    __args__['attachmentId'] = attachment_id
    __args__['attachmentInstanceId'] = attachment_instance_id
    __args__['attachmentInstanceType'] = attachment_instance_type
    __args__['centralNetworkId'] = central_network_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getCentralNetworkAttachments:getCentralNetworkAttachments', __args__, opts=opts, typ=GetCentralNetworkAttachmentsResult).value

    return AwaitableGetCentralNetworkAttachmentsResult(
        attachment_id=pulumi.get(__ret__, 'attachment_id'),
        attachment_instance_id=pulumi.get(__ret__, 'attachment_instance_id'),
        attachment_instance_type=pulumi.get(__ret__, 'attachment_instance_type'),
        central_network_attachments=pulumi.get(__ret__, 'central_network_attachments'),
        central_network_id=pulumi.get(__ret__, 'central_network_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'))
def get_central_network_attachments_output(attachment_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           attachment_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           attachment_instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCentralNetworkAttachmentsResult]:
    """
    Use this data source to get the list of CC attachments on the central network.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    test = huaweicloud.Cc.get_central_network_attachments(central_network_id=central_network_id)
    ```


    :param _builtins.str attachment_id: Specifies the attachment ID.
    :param _builtins.str attachment_instance_id: Specifies the instance ID.
    :param _builtins.str attachment_instance_type: Specifies the type of attachment instance.
           The valid values are **GDGW** and **ER_ROUTE_TABLE**.
    :param _builtins.str central_network_id: Specifies the central network ID.
    :param _builtins.str name: Specifies the attachment name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the attachment status.
           The valid values are as follows:
           + **AVAILABLE**: The attachment is available.
           + **CREATING**: The attachment is being created.
           + **UPDATING**: The attachment is being updated.
           + **DELETING**: The attachment is being deleted.
           + **FREEZING**: The attachment is being frozen.
           + **UNFREEZING**: The attachment is being unfrozen.
           + **RECOVERING**: The attachment is being recovered.
           + **FAILED**: The operation on the attachment failed.
           + **DELETED**: The attachment is deleted.
           + **APPROVING**: The attachment is being approved.
           + **APPROVED**: The attachment is approved.
           + **UNAPPROVED**: The approval failed.
    """
    __args__ = dict()
    __args__['attachmentId'] = attachment_id
    __args__['attachmentInstanceId'] = attachment_instance_id
    __args__['attachmentInstanceType'] = attachment_instance_type
    __args__['centralNetworkId'] = central_network_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getCentralNetworkAttachments:getCentralNetworkAttachments', __args__, opts=opts, typ=GetCentralNetworkAttachmentsResult)
    return __ret__.apply(lambda __response__: GetCentralNetworkAttachmentsResult(
        attachment_id=pulumi.get(__response__, 'attachment_id'),
        attachment_instance_id=pulumi.get(__response__, 'attachment_instance_id'),
        attachment_instance_type=pulumi.get(__response__, 'attachment_instance_type'),
        central_network_attachments=pulumi.get(__response__, 'central_network_attachments'),
        central_network_id=pulumi.get(__response__, 'central_network_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        state=pulumi.get(__response__, 'state')))
