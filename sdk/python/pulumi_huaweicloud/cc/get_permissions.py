# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPermissionsResult',
    'AwaitableGetPermissionsResult',
    'get_permissions',
    'get_permissions_output',
]

@pulumi.output_type
class GetPermissionsResult:
    """
    A collection of values returned by getPermissions.
    """
    def __init__(__self__, cloud_connection_id=None, description=None, id=None, instance_id=None, name=None, permission_id=None, permissions=None, region=None):
        if cloud_connection_id and not isinstance(cloud_connection_id, str):
            raise TypeError("Expected argument 'cloud_connection_id' to be a str")
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission_id and not isinstance(permission_id, str):
            raise TypeError("Expected argument 'permission_id' to be a str")
        pulumi.set(__self__, "permission_id", permission_id)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[_builtins.str]:
        """
        The cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The authorized instance description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The network instance ID that another account allows you to use.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The authorized instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "permission_id")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetPermissionsPermissionResult']:
        """
        The list of the authorized instances.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPermissionsResult(GetPermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionsResult(
            cloud_connection_id=self.cloud_connection_id,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            permission_id=self.permission_id,
            permissions=self.permissions,
            region=self.region)


def get_permissions(cloud_connection_id: Optional[_builtins.str] = None,
                    description: Optional[_builtins.str] = None,
                    instance_id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    permission_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionsResult:
    """
    Use this data source to get the list of the CC authorized instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    permission_id = config.require_object("permissionId")
    test = huaweicloud.Cc.get_permissions(permission_id=permission_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the permission description.
    :param _builtins.str instance_id: Specifies the network instance ID.
    :param _builtins.str name: Specifies the permission name.
    :param _builtins.str permission_id: Specifies the permission ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permissionId'] = permission_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getPermissions:getPermissions', __args__, opts=opts, typ=GetPermissionsResult).value

    return AwaitableGetPermissionsResult(
        cloud_connection_id=pulumi.get(__ret__, 'cloud_connection_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        permission_id=pulumi.get(__ret__, 'permission_id'),
        permissions=pulumi.get(__ret__, 'permissions'),
        region=pulumi.get(__ret__, 'region'))
def get_permissions_output(cloud_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           permission_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPermissionsResult]:
    """
    Use this data source to get the list of the CC authorized instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    permission_id = config.require_object("permissionId")
    test = huaweicloud.Cc.get_permissions(permission_id=permission_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the permission description.
    :param _builtins.str instance_id: Specifies the network instance ID.
    :param _builtins.str name: Specifies the permission name.
    :param _builtins.str permission_id: Specifies the permission ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permissionId'] = permission_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getPermissions:getPermissions', __args__, opts=opts, typ=GetPermissionsResult)
    return __ret__.apply(lambda __response__: GetPermissionsResult(
        cloud_connection_id=pulumi.get(__response__, 'cloud_connection_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        permission_id=pulumi.get(__response__, 'permission_id'),
        permissions=pulumi.get(__response__, 'permissions'),
        region=pulumi.get(__response__, 'region')))
