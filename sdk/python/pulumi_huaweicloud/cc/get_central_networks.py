# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralNetworksResult',
    'AwaitableGetCentralNetworksResult',
    'get_central_networks',
    'get_central_networks_output',
]

@pulumi.output_type
class GetCentralNetworksResult:
    """
    A collection of values returned by getCentralNetworks.
    """
    def __init__(__self__, central_network_id=None, central_networks=None, enterprise_project_id=None, id=None, name=None, region=None, state=None, tags=None):
        if central_network_id and not isinstance(central_network_id, str):
            raise TypeError("Expected argument 'central_network_id' to be a str")
        pulumi.set(__self__, "central_network_id", central_network_id)
        if central_networks and not isinstance(central_networks, list):
            raise TypeError("Expected argument 'central_networks' to be a list")
        pulumi.set(__self__, "central_networks", central_networks)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="centralNetworks")
    def central_networks(self) -> Sequence['outputs.GetCentralNetworksCentralNetworkResult']:
        """
        The central network list.
        """
        return pulumi.get(self, "central_networks")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project that the central network belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The central network name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The central network status.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The central network tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetCentralNetworksResult(GetCentralNetworksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralNetworksResult(
            central_network_id=self.central_network_id,
            central_networks=self.central_networks,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            state=self.state,
            tags=self.tags)


def get_central_networks(central_network_id: Optional[_builtins.str] = None,
                         enterprise_project_id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         state: Optional[_builtins.str] = None,
                         tags: Optional[Mapping[str, _builtins.str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralNetworksResult:
    """
    Use this data source to get the list of CC central networks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_name = config.require_object("centralNetworkName")
    test = huaweicloud.Cc.get_central_networks(name=central_network_name)
    ```


    :param _builtins.str central_network_id: Specifies the ID of central network.
    :param _builtins.str enterprise_project_id: Specifies enterprise project ID to which the central network belongs.
    :param _builtins.str name: Specifies the name of the central network. The name supports fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the status of the central network.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the central network.
    """
    __args__ = dict()
    __args__['centralNetworkId'] = central_network_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getCentralNetworks:getCentralNetworks', __args__, opts=opts, typ=GetCentralNetworksResult).value

    return AwaitableGetCentralNetworksResult(
        central_network_id=pulumi.get(__ret__, 'central_network_id'),
        central_networks=pulumi.get(__ret__, 'central_networks'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'))
def get_central_networks_output(central_network_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCentralNetworksResult]:
    """
    Use this data source to get the list of CC central networks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_name = config.require_object("centralNetworkName")
    test = huaweicloud.Cc.get_central_networks(name=central_network_name)
    ```


    :param _builtins.str central_network_id: Specifies the ID of central network.
    :param _builtins.str enterprise_project_id: Specifies enterprise project ID to which the central network belongs.
    :param _builtins.str name: Specifies the name of the central network. The name supports fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the status of the central network.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the central network.
    """
    __args__ = dict()
    __args__['centralNetworkId'] = central_network_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getCentralNetworks:getCentralNetworks', __args__, opts=opts, typ=GetCentralNetworksResult)
    return __ret__.apply(lambda __response__: GetCentralNetworksResult(
        central_network_id=pulumi.get(__response__, 'central_network_id'),
        central_networks=pulumi.get(__response__, 'central_networks'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags')))
