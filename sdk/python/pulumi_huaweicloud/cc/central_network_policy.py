# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CentralNetworkPolicyArgs', 'CentralNetworkPolicy']

@pulumi.input_type
class CentralNetworkPolicyArgs:
    def __init__(__self__, *,
                 central_network_id: pulumi.Input[_builtins.str],
                 er_instances: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]],
                 planes: Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CentralNetworkPolicy resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]] er_instances: List of the enterprise routers on the central network policy.
               
               Changing this parameter will create a new resource.
               The er_instances structure is documented below.
        :param pulumi.Input['CentralNetworkPolicyPlanesArgs'] planes: List of the central network policy planes.
               
               Changing this parameter will create a new resource.
               The planes structure is documented below.
               
               <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
               The `er_instances` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "er_instances", er_instances)
        if planes is not None:
            pulumi.set(__self__, "planes", planes)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Input[_builtins.str]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="erInstances")
    def er_instances(self) -> pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]]:
        """
        List of the enterprise routers on the central network policy.

        Changing this parameter will create a new resource.
        The er_instances structure is documented below.
        """
        return pulumi.get(self, "er_instances")

    @er_instances.setter
    def er_instances(self, value: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]]):
        pulumi.set(self, "er_instances", value)

    @_builtins.property
    @pulumi.getter
    def planes(self) -> Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']]:
        """
        List of the central network policy planes.

        Changing this parameter will create a new resource.
        The planes structure is documented below.

        <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
        The `er_instances` block supports:
        """
        return pulumi.get(self, "planes")

    @planes.setter
    def planes(self, value: Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']]):
        pulumi.set(self, "planes", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CentralNetworkPolicyState:
    def __init__(__self__, *,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 document_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 er_instances: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]]] = None,
                 is_applied: Optional[pulumi.Input[_builtins.bool]] = None,
                 planes: Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering CentralNetworkPolicy resources.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] document_template_version: Central network policy document template version.
        :param pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]] er_instances: List of the enterprise routers on the central network policy.
               
               Changing this parameter will create a new resource.
               The er_instances structure is documented below.
        :param pulumi.Input[_builtins.bool] is_applied: Whether the central network policy is applied.
        :param pulumi.Input['CentralNetworkPolicyPlanesArgs'] planes: List of the central network policy planes.
               
               Changing this parameter will create a new resource.
               The planes structure is documented below.
               
               <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
               The `er_instances` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Central network policy status.
               The valid values are as follows:
               - **AVAILABLE**: The policy is available.
               - **CANCELING**: The policy is being cancelled.
               - **APPLYING**: The policy is being applied.
               - **FAILED**: The operation on the policy failed.
               - **DELETED**: The policy is deleted.
        :param pulumi.Input[_builtins.int] version: Central network policy version.
        """
        if central_network_id is not None:
            pulumi.set(__self__, "central_network_id", central_network_id)
        if document_template_version is not None:
            pulumi.set(__self__, "document_template_version", document_template_version)
        if er_instances is not None:
            pulumi.set(__self__, "er_instances", er_instances)
        if is_applied is not None:
            pulumi.set(__self__, "is_applied", is_applied)
        if planes is not None:
            pulumi.set(__self__, "planes", planes)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="documentTemplateVersion")
    def document_template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Central network policy document template version.
        """
        return pulumi.get(self, "document_template_version")

    @document_template_version.setter
    def document_template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "document_template_version", value)

    @_builtins.property
    @pulumi.getter(name="erInstances")
    def er_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]]]:
        """
        List of the enterprise routers on the central network policy.

        Changing this parameter will create a new resource.
        The er_instances structure is documented below.
        """
        return pulumi.get(self, "er_instances")

    @er_instances.setter
    def er_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyErInstanceArgs']]]]):
        pulumi.set(self, "er_instances", value)

    @_builtins.property
    @pulumi.getter(name="isApplied")
    def is_applied(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the central network policy is applied.
        """
        return pulumi.get(self, "is_applied")

    @is_applied.setter
    def is_applied(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_applied", value)

    @_builtins.property
    @pulumi.getter
    def planes(self) -> Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']]:
        """
        List of the central network policy planes.

        Changing this parameter will create a new resource.
        The planes structure is documented below.

        <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
        The `er_instances` block supports:
        """
        return pulumi.get(self, "planes")

    @planes.setter
    def planes(self, value: Optional[pulumi.Input['CentralNetworkPolicyPlanesArgs']]):
        pulumi.set(self, "planes", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Central network policy status.
        The valid values are as follows:
        - **AVAILABLE**: The policy is available.
        - **CANCELING**: The policy is being cancelled.
        - **APPLYING**: The policy is being applied.
        - **FAILED**: The operation on the policy failed.
        - **DELETED**: The policy is deleted.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Central network policy version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Cc/centralNetworkPolicy:CentralNetworkPolicy")
class CentralNetworkPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 er_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNetworkPolicyErInstanceArgs', 'CentralNetworkPolicyErInstanceArgsDict']]]]] = None,
                 planes: Optional[pulumi.Input[Union['CentralNetworkPolicyPlanesArgs', 'CentralNetworkPolicyPlanesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a central network policy resource of Cloud Connect within HuaweiCloud.

        ## Example Usage

        ### Create a basic policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        project_id = config.require_object("projectId")
        region_id = config.require_object("regionId")
        enterprise_router_id = config.require_object("enterpriseRouterId")
        enterprise_router_table_id = config.require_object("enterpriseRouterTableId")
        test = huaweicloud.cc.CentralNetworkPolicy("test",
            central_network_id=central_network_id,
            planes={
                "associate_er_tables": [{
                    "project_id": project_id,
                    "region_id": region_id,
                    "enterprise_router_id": enterprise_router_id,
                    "enterprise_router_table_id": enterprise_router_table_id,
                }],
            },
            er_instances=[{
                "project_id": project_id,
                "region_id": region_id,
                "enterprise_router_id": enterprise_router_id,
            }])
        ```

        ### Create a policy that needs to exclude some ER connections

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        project_id1 = config.require_object("projectId1")
        project_id2 = config.require_object("projectId2")
        project_id3 = config.require_object("projectId3")
        region_id1 = config.require_object("regionId1")
        region_id2 = config.require_object("regionId2")
        region_id3 = config.require_object("regionId3")
        enterprise_router_id1 = config.require_object("enterpriseRouterId1")
        enterprise_router_id2 = config.require_object("enterpriseRouterId2")
        enterprise_router_id3 = config.require_object("enterpriseRouterId3")
        enterprise_router_table_id1 = config.require_object("enterpriseRouterTableId1")
        enterprise_router_table_id2 = config.require_object("enterpriseRouterTableId2")
        enterprise_router_table_id3 = config.require_object("enterpriseRouterTableId3")
        test = huaweicloud.cc.CentralNetworkPolicy("test",
            central_network_id=central_network_id,
            planes={
                "associate_er_tables": [
                    {
                        "project_id": project_id1,
                        "region_id": region_id1,
                        "enterprise_router_id": enterprise_router_id1,
                        "enterprise_router_table_id": enterprise_router_table_id1,
                    },
                    {
                        "project_id": project_id2,
                        "region_id": region_id2,
                        "enterprise_router_id": enterprise_router_id2,
                        "enterprise_router_table_id": enterprise_router_table_id2,
                    },
                    {
                        "project_id": project_id3,
                        "region_id": region_id3,
                        "enterprise_router_id": enterprise_router_id3,
                        "enterprise_router_table_id": enterprise_router_table_id3,
                    },
                ],
                "exclude_er_connections": [{
                    "exclude_er_instances": [
                        {
                            "project_id": project_id1,
                            "region_id": region_id1,
                            "enterprise_router_id": enterprise_router_id1,
                        },
                        {
                            "project_id": project_id2,
                            "region_id": region_id2,
                            "enterprise_router_id": enterprise_router_id2,
                        },
                    ],
                }],
            },
            er_instances=[
                {
                    "project_id": project_id1,
                    "region_id": region_id1,
                    "enterprise_router_id": enterprise_router_id1,
                },
                {
                    "project_id": project_id2,
                    "region_id": region_id2,
                    "enterprise_router_id": enterprise_router_id2,
                },
                {
                    "project_id": project_id3,
                    "region_id": region_id3,
                    "enterprise_router_id": enterprise_router_id3,
                },
            ])
        ```

        ## Import

        The central network policy can be imported using

        `central_network_id`, `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkPolicy:CentralNetworkPolicy test <central_network_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CentralNetworkPolicyErInstanceArgs', 'CentralNetworkPolicyErInstanceArgsDict']]]] er_instances: List of the enterprise routers on the central network policy.
               
               Changing this parameter will create a new resource.
               The er_instances structure is documented below.
        :param pulumi.Input[Union['CentralNetworkPolicyPlanesArgs', 'CentralNetworkPolicyPlanesArgsDict']] planes: List of the central network policy planes.
               
               Changing this parameter will create a new resource.
               The planes structure is documented below.
               
               <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
               The `er_instances` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CentralNetworkPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a central network policy resource of Cloud Connect within HuaweiCloud.

        ## Example Usage

        ### Create a basic policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        project_id = config.require_object("projectId")
        region_id = config.require_object("regionId")
        enterprise_router_id = config.require_object("enterpriseRouterId")
        enterprise_router_table_id = config.require_object("enterpriseRouterTableId")
        test = huaweicloud.cc.CentralNetworkPolicy("test",
            central_network_id=central_network_id,
            planes={
                "associate_er_tables": [{
                    "project_id": project_id,
                    "region_id": region_id,
                    "enterprise_router_id": enterprise_router_id,
                    "enterprise_router_table_id": enterprise_router_table_id,
                }],
            },
            er_instances=[{
                "project_id": project_id,
                "region_id": region_id,
                "enterprise_router_id": enterprise_router_id,
            }])
        ```

        ### Create a policy that needs to exclude some ER connections

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        project_id1 = config.require_object("projectId1")
        project_id2 = config.require_object("projectId2")
        project_id3 = config.require_object("projectId3")
        region_id1 = config.require_object("regionId1")
        region_id2 = config.require_object("regionId2")
        region_id3 = config.require_object("regionId3")
        enterprise_router_id1 = config.require_object("enterpriseRouterId1")
        enterprise_router_id2 = config.require_object("enterpriseRouterId2")
        enterprise_router_id3 = config.require_object("enterpriseRouterId3")
        enterprise_router_table_id1 = config.require_object("enterpriseRouterTableId1")
        enterprise_router_table_id2 = config.require_object("enterpriseRouterTableId2")
        enterprise_router_table_id3 = config.require_object("enterpriseRouterTableId3")
        test = huaweicloud.cc.CentralNetworkPolicy("test",
            central_network_id=central_network_id,
            planes={
                "associate_er_tables": [
                    {
                        "project_id": project_id1,
                        "region_id": region_id1,
                        "enterprise_router_id": enterprise_router_id1,
                        "enterprise_router_table_id": enterprise_router_table_id1,
                    },
                    {
                        "project_id": project_id2,
                        "region_id": region_id2,
                        "enterprise_router_id": enterprise_router_id2,
                        "enterprise_router_table_id": enterprise_router_table_id2,
                    },
                    {
                        "project_id": project_id3,
                        "region_id": region_id3,
                        "enterprise_router_id": enterprise_router_id3,
                        "enterprise_router_table_id": enterprise_router_table_id3,
                    },
                ],
                "exclude_er_connections": [{
                    "exclude_er_instances": [
                        {
                            "project_id": project_id1,
                            "region_id": region_id1,
                            "enterprise_router_id": enterprise_router_id1,
                        },
                        {
                            "project_id": project_id2,
                            "region_id": region_id2,
                            "enterprise_router_id": enterprise_router_id2,
                        },
                    ],
                }],
            },
            er_instances=[
                {
                    "project_id": project_id1,
                    "region_id": region_id1,
                    "enterprise_router_id": enterprise_router_id1,
                },
                {
                    "project_id": project_id2,
                    "region_id": region_id2,
                    "enterprise_router_id": enterprise_router_id2,
                },
                {
                    "project_id": project_id3,
                    "region_id": region_id3,
                    "enterprise_router_id": enterprise_router_id3,
                },
            ])
        ```

        ## Import

        The central network policy can be imported using

        `central_network_id`, `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkPolicy:CentralNetworkPolicy test <central_network_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param CentralNetworkPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralNetworkPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 er_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNetworkPolicyErInstanceArgs', 'CentralNetworkPolicyErInstanceArgsDict']]]]] = None,
                 planes: Optional[pulumi.Input[Union['CentralNetworkPolicyPlanesArgs', 'CentralNetworkPolicyPlanesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralNetworkPolicyArgs.__new__(CentralNetworkPolicyArgs)

            if central_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'central_network_id'")
            __props__.__dict__["central_network_id"] = central_network_id
            if er_instances is None and not opts.urn:
                raise TypeError("Missing required property 'er_instances'")
            __props__.__dict__["er_instances"] = er_instances
            __props__.__dict__["planes"] = planes
            __props__.__dict__["region"] = region
            __props__.__dict__["document_template_version"] = None
            __props__.__dict__["is_applied"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["version"] = None
        super(CentralNetworkPolicy, __self__).__init__(
            'huaweicloud:Cc/centralNetworkPolicy:CentralNetworkPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            document_template_version: Optional[pulumi.Input[_builtins.str]] = None,
            er_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNetworkPolicyErInstanceArgs', 'CentralNetworkPolicyErInstanceArgsDict']]]]] = None,
            is_applied: Optional[pulumi.Input[_builtins.bool]] = None,
            planes: Optional[pulumi.Input[Union['CentralNetworkPolicyPlanesArgs', 'CentralNetworkPolicyPlanesArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'CentralNetworkPolicy':
        """
        Get an existing CentralNetworkPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] document_template_version: Central network policy document template version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CentralNetworkPolicyErInstanceArgs', 'CentralNetworkPolicyErInstanceArgsDict']]]] er_instances: List of the enterprise routers on the central network policy.
               
               Changing this parameter will create a new resource.
               The er_instances structure is documented below.
        :param pulumi.Input[_builtins.bool] is_applied: Whether the central network policy is applied.
        :param pulumi.Input[Union['CentralNetworkPolicyPlanesArgs', 'CentralNetworkPolicyPlanesArgsDict']] planes: List of the central network policy planes.
               
               Changing this parameter will create a new resource.
               The planes structure is documented below.
               
               <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
               The `er_instances` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Central network policy status.
               The valid values are as follows:
               - **AVAILABLE**: The policy is available.
               - **CANCELING**: The policy is being cancelled.
               - **APPLYING**: The policy is being applied.
               - **FAILED**: The operation on the policy failed.
               - **DELETED**: The policy is deleted.
        :param pulumi.Input[_builtins.int] version: Central network policy version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralNetworkPolicyState.__new__(_CentralNetworkPolicyState)

        __props__.__dict__["central_network_id"] = central_network_id
        __props__.__dict__["document_template_version"] = document_template_version
        __props__.__dict__["er_instances"] = er_instances
        __props__.__dict__["is_applied"] = is_applied
        __props__.__dict__["planes"] = planes
        __props__.__dict__["region"] = region
        __props__.__dict__["state"] = state
        __props__.__dict__["version"] = version
        return CentralNetworkPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="documentTemplateVersion")
    def document_template_version(self) -> pulumi.Output[_builtins.str]:
        """
        Central network policy document template version.
        """
        return pulumi.get(self, "document_template_version")

    @_builtins.property
    @pulumi.getter(name="erInstances")
    def er_instances(self) -> pulumi.Output[Sequence['outputs.CentralNetworkPolicyErInstance']]:
        """
        List of the enterprise routers on the central network policy.

        Changing this parameter will create a new resource.
        The er_instances structure is documented below.
        """
        return pulumi.get(self, "er_instances")

    @_builtins.property
    @pulumi.getter(name="isApplied")
    def is_applied(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the central network policy is applied.
        """
        return pulumi.get(self, "is_applied")

    @_builtins.property
    @pulumi.getter
    def planes(self) -> pulumi.Output['outputs.CentralNetworkPolicyPlanes']:
        """
        List of the central network policy planes.

        Changing this parameter will create a new resource.
        The planes structure is documented below.

        <a name="centralNetworkPolicy_AssociateErInstanceDocument"></a>
        The `er_instances` block supports:
        """
        return pulumi.get(self, "planes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Central network policy status.
        The valid values are as follows:
        - **AVAILABLE**: The policy is available.
        - **CANCELING**: The policy is being cancelled.
        - **APPLYING**: The policy is being applied.
        - **FAILED**: The operation on the policy failed.
        - **DELETED**: The policy is deleted.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        Central network policy version.
        """
        return pulumi.get(self, "version")

