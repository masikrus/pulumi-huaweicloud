# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalConnectionBandwidthsResult',
    'AwaitableGetGlobalConnectionBandwidthsResult',
    'get_global_connection_bandwidths',
    'get_global_connection_bandwidths_output',
]

@pulumi.output_type
class GetGlobalConnectionBandwidthsResult:
    """
    A collection of values returned by getGlobalConnectionBandwidths.
    """
    def __init__(__self__, admin_state=None, binding_service=None, charge_mode=None, enterprise_project_id=None, gcb_id=None, globalconnection_bandwidths=None, id=None, instance_id=None, instance_type=None, name=None, region=None, size=None, tags=None, type=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if binding_service and not isinstance(binding_service, str):
            raise TypeError("Expected argument 'binding_service' to be a str")
        pulumi.set(__self__, "binding_service", binding_service)
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gcb_id and not isinstance(gcb_id, str):
            raise TypeError("Expected argument 'gcb_id' to be a str")
        pulumi.set(__self__, "gcb_id", gcb_id)
        if globalconnection_bandwidths and not isinstance(globalconnection_bandwidths, list):
            raise TypeError("Expected argument 'globalconnection_bandwidths' to be a list")
        pulumi.set(__self__, "globalconnection_bandwidths", globalconnection_bandwidths)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[_builtins.str]:
        """
        Global connection bandwidth status.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bindingService")
    def binding_service(self) -> Optional[_builtins.str]:
        """
        Binding service.
        """
        return pulumi.get(self, "binding_service")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Billing option.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        ID of the enterprise project that the global connection bandwidth belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter(name="globalconnectionBandwidths")
    def globalconnection_bandwidths(self) -> Sequence['outputs.GetGlobalConnectionBandwidthsGlobalconnectionBandwidthResult']:
        """
        Response body for querying the global connection bandwidth list.
        The globalconnection_bandwidths structure is documented below.
        """
        return pulumi.get(self, "globalconnection_bandwidths")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Range of a global connection bandwidth, in Mbit/s.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Bound instance type.
        """
        return pulumi.get(self, "type")


class AwaitableGetGlobalConnectionBandwidthsResult(GetGlobalConnectionBandwidthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalConnectionBandwidthsResult(
            admin_state=self.admin_state,
            binding_service=self.binding_service,
            charge_mode=self.charge_mode,
            enterprise_project_id=self.enterprise_project_id,
            gcb_id=self.gcb_id,
            globalconnection_bandwidths=self.globalconnection_bandwidths,
            id=self.id,
            instance_id=self.instance_id,
            instance_type=self.instance_type,
            name=self.name,
            region=self.region,
            size=self.size,
            tags=self.tags,
            type=self.type)


def get_global_connection_bandwidths(admin_state: Optional[_builtins.str] = None,
                                     binding_service: Optional[_builtins.str] = None,
                                     charge_mode: Optional[_builtins.str] = None,
                                     enterprise_project_id: Optional[_builtins.str] = None,
                                     gcb_id: Optional[_builtins.str] = None,
                                     instance_id: Optional[_builtins.str] = None,
                                     instance_type: Optional[_builtins.str] = None,
                                     name: Optional[_builtins.str] = None,
                                     region: Optional[_builtins.str] = None,
                                     size: Optional[_builtins.int] = None,
                                     tags: Optional[Mapping[str, _builtins.str]] = None,
                                     type: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalConnectionBandwidthsResult:
    """
    Use this data source to get the list of CC global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gcb_id = config.require_object("gcbId")
    name = config.require_object("name")
    test = huaweicloud.Cc.get_global_connection_bandwidths(gcb_id=gcb_id,
        name=name)
    ```


    :param _builtins.str admin_state: Specifies the status of the global connection bandwidth.
           Value options are as follows:
           + **NORMAL**: The global connection bandwidth is available.
           + **FREEZED**: The global connection bandwidth is frozen.
    :param _builtins.str binding_service: Specifies the binding service.
           Value options are as follows:
           + **Cloud Connect**: cloud connection.
           + **GEIP**: Global EIP.
           + **GCN**: central network.
           + **GSN**: site network.
    :param _builtins.str charge_mode: Specifies the billing option.
           Value options are as follows:
           + **bwd**: billing by bandwidth
           + **95**: standard 95th percentile bandwidth billing
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str gcb_id: Specifies the resource ID.
    :param _builtins.str instance_id: Specifies the bound instance ID.
    :param _builtins.str instance_type: Specifies the instance type.
    :param _builtins.str name: Specifies the resource name.
    :param _builtins.str region: Specifies the region in which to query the resource.
    :param _builtins.int size: Specifies the bandwidth range.
           Bandwidth range: `2` Mbit/s to `300` Mbit/s.
    :param Mapping[str, _builtins.str] tags: Specifies tags.
    :param _builtins.str type: Specifies the type of a global connection bandwidth.
           Value options are as follows:
           + **TrsArea**: cross-geographic-region bandwidth.
           + **Area**: geographic-region bandwidth.
           + **SubArea**: region bandwidth.
           + **Region** : multi-city bandwidth.
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bindingService'] = binding_service
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gcbId'] = gcb_id
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['size'] = size
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getGlobalConnectionBandwidths:getGlobalConnectionBandwidths', __args__, opts=opts, typ=GetGlobalConnectionBandwidthsResult).value

    return AwaitableGetGlobalConnectionBandwidthsResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        binding_service=pulumi.get(__ret__, 'binding_service'),
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gcb_id=pulumi.get(__ret__, 'gcb_id'),
        globalconnection_bandwidths=pulumi.get(__ret__, 'globalconnection_bandwidths'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_global_connection_bandwidths_output(admin_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            binding_service: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            gcb_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            size: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                            tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                            type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalConnectionBandwidthsResult]:
    """
    Use this data source to get the list of CC global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gcb_id = config.require_object("gcbId")
    name = config.require_object("name")
    test = huaweicloud.Cc.get_global_connection_bandwidths(gcb_id=gcb_id,
        name=name)
    ```


    :param _builtins.str admin_state: Specifies the status of the global connection bandwidth.
           Value options are as follows:
           + **NORMAL**: The global connection bandwidth is available.
           + **FREEZED**: The global connection bandwidth is frozen.
    :param _builtins.str binding_service: Specifies the binding service.
           Value options are as follows:
           + **Cloud Connect**: cloud connection.
           + **GEIP**: Global EIP.
           + **GCN**: central network.
           + **GSN**: site network.
    :param _builtins.str charge_mode: Specifies the billing option.
           Value options are as follows:
           + **bwd**: billing by bandwidth
           + **95**: standard 95th percentile bandwidth billing
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str gcb_id: Specifies the resource ID.
    :param _builtins.str instance_id: Specifies the bound instance ID.
    :param _builtins.str instance_type: Specifies the instance type.
    :param _builtins.str name: Specifies the resource name.
    :param _builtins.str region: Specifies the region in which to query the resource.
    :param _builtins.int size: Specifies the bandwidth range.
           Bandwidth range: `2` Mbit/s to `300` Mbit/s.
    :param Mapping[str, _builtins.str] tags: Specifies tags.
    :param _builtins.str type: Specifies the type of a global connection bandwidth.
           Value options are as follows:
           + **TrsArea**: cross-geographic-region bandwidth.
           + **Area**: geographic-region bandwidth.
           + **SubArea**: region bandwidth.
           + **Region** : multi-city bandwidth.
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bindingService'] = binding_service
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gcbId'] = gcb_id
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['size'] = size
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getGlobalConnectionBandwidths:getGlobalConnectionBandwidths', __args__, opts=opts, typ=GetGlobalConnectionBandwidthsResult)
    return __ret__.apply(lambda __response__: GetGlobalConnectionBandwidthsResult(
        admin_state=pulumi.get(__response__, 'admin_state'),
        binding_service=pulumi.get(__response__, 'binding_service'),
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gcb_id=pulumi.get(__response__, 'gcb_id'),
        globalconnection_bandwidths=pulumi.get(__response__, 'globalconnection_bandwidths'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
