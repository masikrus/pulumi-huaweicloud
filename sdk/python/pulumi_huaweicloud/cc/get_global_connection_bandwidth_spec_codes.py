# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalConnectionBandwidthSpecCodesResult',
    'AwaitableGetGlobalConnectionBandwidthSpecCodesResult',
    'get_global_connection_bandwidth_spec_codes',
    'get_global_connection_bandwidth_spec_codes_output',
]

@pulumi.output_type
class GetGlobalConnectionBandwidthSpecCodesResult:
    """
    A collection of values returned by getGlobalConnectionBandwidthSpecCodes.
    """
    def __init__(__self__, id=None, level=None, local_area=None, region=None, remote_area=None, spec_codes=None, spec_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if local_area and not isinstance(local_area, str):
            raise TypeError("Expected argument 'local_area' to be a str")
        pulumi.set(__self__, "local_area", local_area)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remote_area and not isinstance(remote_area, str):
            raise TypeError("Expected argument 'remote_area' to be a str")
        pulumi.set(__self__, "remote_area", remote_area)
        if spec_codes and not isinstance(spec_codes, list):
            raise TypeError("Expected argument 'spec_codes' to be a list")
        pulumi.set(__self__, "spec_codes", spec_codes)
        if spec_id and not isinstance(spec_id, str):
            raise TypeError("Expected argument 'spec_id' to be a str")
        pulumi.set(__self__, "spec_id", spec_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        Line grade.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> Optional[_builtins.str]:
        """
        Local access point.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> Optional[_builtins.str]:
        """
        Remote access point.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter(name="specCodes")
    def spec_codes(self) -> Sequence['outputs.GetGlobalConnectionBandwidthSpecCodesSpecCodeResult']:
        """
        The line specification list.
        """
        return pulumi.get(self, "spec_codes")

    @_builtins.property
    @pulumi.getter(name="specId")
    def spec_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "spec_id")


class AwaitableGetGlobalConnectionBandwidthSpecCodesResult(GetGlobalConnectionBandwidthSpecCodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalConnectionBandwidthSpecCodesResult(
            id=self.id,
            level=self.level,
            local_area=self.local_area,
            region=self.region,
            remote_area=self.remote_area,
            spec_codes=self.spec_codes,
            spec_id=self.spec_id)


def get_global_connection_bandwidth_spec_codes(level: Optional[_builtins.str] = None,
                                               local_area: Optional[_builtins.str] = None,
                                               region: Optional[_builtins.str] = None,
                                               remote_area: Optional[_builtins.str] = None,
                                               spec_id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalConnectionBandwidthSpecCodesResult:
    """
    Use this data source to get the list of CC line specification of global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    spec_id = config.require_object("specId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_spec_codes(spec_id=spec_id)
    ```


    :param _builtins.str level: Line grade.
           The valid values are as follows:
           + **Pt**: platinum.
           + **Au**: gold.
           + **Ag**: silver.
    :param _builtins.str local_area: Local access point included in the line specification.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Remote access point included in the line specification.
    :param _builtins.str spec_id: Line specification ID.
    """
    __args__ = dict()
    __args__['level'] = level
    __args__['localArea'] = local_area
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    __args__['specId'] = spec_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getGlobalConnectionBandwidthSpecCodes:getGlobalConnectionBandwidthSpecCodes', __args__, opts=opts, typ=GetGlobalConnectionBandwidthSpecCodesResult).value

    return AwaitableGetGlobalConnectionBandwidthSpecCodesResult(
        id=pulumi.get(__ret__, 'id'),
        level=pulumi.get(__ret__, 'level'),
        local_area=pulumi.get(__ret__, 'local_area'),
        region=pulumi.get(__ret__, 'region'),
        remote_area=pulumi.get(__ret__, 'remote_area'),
        spec_codes=pulumi.get(__ret__, 'spec_codes'),
        spec_id=pulumi.get(__ret__, 'spec_id'))
def get_global_connection_bandwidth_spec_codes_output(level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      local_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      remote_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      spec_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalConnectionBandwidthSpecCodesResult]:
    """
    Use this data source to get the list of CC line specification of global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    spec_id = config.require_object("specId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_spec_codes(spec_id=spec_id)
    ```


    :param _builtins.str level: Line grade.
           The valid values are as follows:
           + **Pt**: platinum.
           + **Au**: gold.
           + **Ag**: silver.
    :param _builtins.str local_area: Local access point included in the line specification.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Remote access point included in the line specification.
    :param _builtins.str spec_id: Line specification ID.
    """
    __args__ = dict()
    __args__['level'] = level
    __args__['localArea'] = local_area
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    __args__['specId'] = spec_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getGlobalConnectionBandwidthSpecCodes:getGlobalConnectionBandwidthSpecCodes', __args__, opts=opts, typ=GetGlobalConnectionBandwidthSpecCodesResult)
    return __ret__.apply(lambda __response__: GetGlobalConnectionBandwidthSpecCodesResult(
        id=pulumi.get(__response__, 'id'),
        level=pulumi.get(__response__, 'level'),
        local_area=pulumi.get(__response__, 'local_area'),
        region=pulumi.get(__response__, 'region'),
        remote_area=pulumi.get(__response__, 'remote_area'),
        spec_codes=pulumi.get(__response__, 'spec_codes'),
        spec_id=pulumi.get(__response__, 'spec_id')))
