# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AuthorizationArgs', 'Authorization']

@pulumi.input_type
class AuthorizationArgs:
    def __init__(__self__, *,
                 cloud_connection_domain_id: pulumi.Input[_builtins.str],
                 cloud_connection_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 instance_type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Authorization resource.
        :param pulumi.Input[_builtins.str] cloud_connection_domain_id: The peer account ID that you want to authorize.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Peer cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: The instance ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_type: The instance type.
               The options are as follows:
               + **vpc**: VPC
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the cross-account authorization.
        :param pulumi.Input[_builtins.str] name: The name of the cross-account authorization.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cloud_connection_domain_id", cloud_connection_domain_id)
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionDomainId")
    def cloud_connection_domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        The peer account ID that you want to authorize.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_domain_id")

    @cloud_connection_domain_id.setter
    def cloud_connection_domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_connection_domain_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Peer cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @cloud_connection_id.setter
    def cloud_connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The instance ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[_builtins.str]:
        """
        The instance type.
        The options are as follows:
        + **vpc**: VPC

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the cross-account authorization.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the cross-account authorization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AuthorizationState:
    def __init__(__self__, *,
                 cloud_connection_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Authorization resources.
        :param pulumi.Input[_builtins.str] cloud_connection_domain_id: The peer account ID that you want to authorize.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Peer cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the cross-account authorization.
        :param pulumi.Input[_builtins.str] instance_id: The instance ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_type: The instance type.
               The options are as follows:
               + **vpc**: VPC
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the cross-account authorization.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if cloud_connection_domain_id is not None:
            pulumi.set(__self__, "cloud_connection_domain_id", cloud_connection_domain_id)
        if cloud_connection_id is not None:
            pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionDomainId")
    def cloud_connection_domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The peer account ID that you want to authorize.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_domain_id")

    @cloud_connection_domain_id.setter
    def cloud_connection_domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_connection_domain_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Peer cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @cloud_connection_id.setter
    def cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the cross-account authorization.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance type.
        The options are as follows:
        + **vpc**: VPC

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the cross-account authorization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cc/authorization:Authorization")
class Authorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_connection_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a cross-account authorization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        cloud_connection_domain_id = config.require_object("cloudConnectionDomainId")
        cloud_connection_id = config.require_object("cloudConnectionId")
        test = huaweicloud.cc.Authorization("test",
            name="demo",
            instance_type="vpc",
            instance_id=instance_id,
            cloud_connection_domain_id=cloud_connection_domain_id,
            cloud_connection_id=cloud_connection_id)
        ```

        ## Import

        The cross-account authorization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/authorization:Authorization test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cloud_connection_domain_id: The peer account ID that you want to authorize.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Peer cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the cross-account authorization.
        :param pulumi.Input[_builtins.str] instance_id: The instance ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_type: The instance type.
               The options are as follows:
               + **vpc**: VPC
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the cross-account authorization.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a cross-account authorization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        cloud_connection_domain_id = config.require_object("cloudConnectionDomainId")
        cloud_connection_id = config.require_object("cloudConnectionId")
        test = huaweicloud.cc.Authorization("test",
            name="demo",
            instance_type="vpc",
            instance_id=instance_id,
            cloud_connection_domain_id=cloud_connection_domain_id,
            cloud_connection_id=cloud_connection_id)
        ```

        ## Import

        The cross-account authorization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/authorization:Authorization test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param AuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_connection_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthorizationArgs.__new__(AuthorizationArgs)

            if cloud_connection_domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_connection_domain_id'")
            __props__.__dict__["cloud_connection_domain_id"] = cloud_connection_domain_id
            if cloud_connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_connection_id'")
            __props__.__dict__["cloud_connection_id"] = cloud_connection_id
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(Authorization, __self__).__init__(
            'huaweicloud:Cc/authorization:Authorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_connection_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Authorization':
        """
        Get an existing Authorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cloud_connection_domain_id: The peer account ID that you want to authorize.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Peer cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the cross-account authorization.
        :param pulumi.Input[_builtins.str] instance_id: The instance ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_type: The instance type.
               The options are as follows:
               + **vpc**: VPC
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the cross-account authorization.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthorizationState.__new__(_AuthorizationState)

        __props__.__dict__["cloud_connection_domain_id"] = cloud_connection_domain_id
        __props__.__dict__["cloud_connection_id"] = cloud_connection_id
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return Authorization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionDomainId")
    def cloud_connection_domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        The peer account ID that you want to authorize.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_domain_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Peer cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the cross-account authorization.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The instance ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        The instance type.
        The options are as follows:
        + **vpc**: VPC

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the cross-account authorization.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

