# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthPackagesResult',
    'AwaitableGetBandwidthPackagesResult',
    'get_bandwidth_packages',
    'get_bandwidth_packages_output',
]

@pulumi.output_type
class GetBandwidthPackagesResult:
    """
    A collection of values returned by getBandwidthPackages.
    """
    def __init__(__self__, bandwidth=None, bandwidth_package_id=None, bandwidth_packages=None, billing_mode=None, enterprise_project_id=None, id=None, name=None, region=None, resource_id=None, status=None, tags=None):
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_package_id and not isinstance(bandwidth_package_id, str):
            raise TypeError("Expected argument 'bandwidth_package_id' to be a str")
        pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if bandwidth_packages and not isinstance(bandwidth_packages, list):
            raise TypeError("Expected argument 'bandwidth_packages' to be a list")
        pulumi.set(__self__, "bandwidth_packages", bandwidth_packages)
        if billing_mode and not isinstance(billing_mode, str):
            raise TypeError("Expected argument 'billing_mode' to be a str")
        pulumi.set(__self__, "billing_mode", billing_mode)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[_builtins.int]:
        """
        Bandwidth range specified for the bandwidth package.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bandwidth_package_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthPackages")
    def bandwidth_packages(self) -> Sequence['outputs.GetBandwidthPackagesBandwidthPackageResult']:
        """
        Bandwidth package list.
        """
        return pulumi.get(self, "bandwidth_packages")

    @_builtins.property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> Optional[_builtins.str]:
        """
        Billing mode of the bandwidth package.
        """
        return pulumi.get(self, "billing_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project that the bandwidth package belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The bandwidth package name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource that the bandwidth package is bound to.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the bandwidth package.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The bandwidth package tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetBandwidthPackagesResult(GetBandwidthPackagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthPackagesResult(
            bandwidth=self.bandwidth,
            bandwidth_package_id=self.bandwidth_package_id,
            bandwidth_packages=self.bandwidth_packages,
            billing_mode=self.billing_mode,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            resource_id=self.resource_id,
            status=self.status,
            tags=self.tags)


def get_bandwidth_packages(bandwidth: Optional[_builtins.int] = None,
                           bandwidth_package_id: Optional[_builtins.str] = None,
                           billing_mode: Optional[_builtins.str] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           resource_id: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           tags: Optional[Mapping[str, _builtins.str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthPackagesResult:
    """
    Use this data source to get the list of CC bandwidth packages.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bandwidth_package_id = config.require_object("bandwidthPackageId")
    test = huaweicloud.Cc.get_bandwidth_packages(bandwidth_package_id=bandwidth_package_id)
    ```


    :param _builtins.int bandwidth: Specifies the bandwidth range specified for the bandwidth package.
    :param _builtins.str bandwidth_package_id: Specifies the bandwidth package ID.
    :param _builtins.str billing_mode: Specifies the billing mode of the bandwidth package.
           The options are as follows:
           + **1**ï¼špay by period for the Chinese Mainland website.
           + **2**: pay by period for the International website.
           + **3**: pay-per-use for the Chinese Mainland website.
           + **4**: pay-per-use for the International website.
           + **5**: 95th percentile bandwidth billing for the Chinese Mainland website.
           + **6**: 95th percentile bandwidth billing for the International website.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the bandwidth package
           belongs to.
    :param _builtins.str name: Specifies the bandwidth package name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of the resource that the bandwidth package is bound to.
    :param _builtins.str status: Specifies the bandwidth package status.
           The valid value is as follows:
           + **ACTIVE**: Bandwidth packages are available.
    :param Mapping[str, _builtins.str] tags: Specifies the bandwidth package tags.
    """
    __args__ = dict()
    __args__['bandwidth'] = bandwidth
    __args__['bandwidthPackageId'] = bandwidth_package_id
    __args__['billingMode'] = billing_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getBandwidthPackages:getBandwidthPackages', __args__, opts=opts, typ=GetBandwidthPackagesResult).value

    return AwaitableGetBandwidthPackagesResult(
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        bandwidth_package_id=pulumi.get(__ret__, 'bandwidth_package_id'),
        bandwidth_packages=pulumi.get(__ret__, 'bandwidth_packages'),
        billing_mode=pulumi.get(__ret__, 'billing_mode'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_bandwidth_packages_output(bandwidth: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                  bandwidth_package_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  billing_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthPackagesResult]:
    """
    Use this data source to get the list of CC bandwidth packages.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bandwidth_package_id = config.require_object("bandwidthPackageId")
    test = huaweicloud.Cc.get_bandwidth_packages(bandwidth_package_id=bandwidth_package_id)
    ```


    :param _builtins.int bandwidth: Specifies the bandwidth range specified for the bandwidth package.
    :param _builtins.str bandwidth_package_id: Specifies the bandwidth package ID.
    :param _builtins.str billing_mode: Specifies the billing mode of the bandwidth package.
           The options are as follows:
           + **1**ï¼špay by period for the Chinese Mainland website.
           + **2**: pay by period for the International website.
           + **3**: pay-per-use for the Chinese Mainland website.
           + **4**: pay-per-use for the International website.
           + **5**: 95th percentile bandwidth billing for the Chinese Mainland website.
           + **6**: 95th percentile bandwidth billing for the International website.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the bandwidth package
           belongs to.
    :param _builtins.str name: Specifies the bandwidth package name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of the resource that the bandwidth package is bound to.
    :param _builtins.str status: Specifies the bandwidth package status.
           The valid value is as follows:
           + **ACTIVE**: Bandwidth packages are available.
    :param Mapping[str, _builtins.str] tags: Specifies the bandwidth package tags.
    """
    __args__ = dict()
    __args__['bandwidth'] = bandwidth
    __args__['bandwidthPackageId'] = bandwidth_package_id
    __args__['billingMode'] = billing_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getBandwidthPackages:getBandwidthPackages', __args__, opts=opts, typ=GetBandwidthPackagesResult)
    return __ret__.apply(lambda __response__: GetBandwidthPackagesResult(
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        bandwidth_package_id=pulumi.get(__response__, 'bandwidth_package_id'),
        bandwidth_packages=pulumi.get(__response__, 'bandwidth_packages'),
        billing_mode=pulumi.get(__response__, 'billing_mode'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
