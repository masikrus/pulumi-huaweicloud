# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInterRegionBandwidthsResult',
    'AwaitableGetInterRegionBandwidthsResult',
    'get_inter_region_bandwidths',
    'get_inter_region_bandwidths_output',
]

@pulumi.output_type
class GetInterRegionBandwidthsResult:
    """
    A collection of values returned by getInterRegionBandwidths.
    """
    def __init__(__self__, bandwidth_package_id=None, cloud_connection_id=None, enterprise_project_id=None, id=None, inter_region_bandwidth_id=None, inter_region_bandwidths=None, region=None):
        if bandwidth_package_id and not isinstance(bandwidth_package_id, str):
            raise TypeError("Expected argument 'bandwidth_package_id' to be a str")
        pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cloud_connection_id and not isinstance(cloud_connection_id, str):
            raise TypeError("Expected argument 'cloud_connection_id' to be a str")
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inter_region_bandwidth_id and not isinstance(inter_region_bandwidth_id, str):
            raise TypeError("Expected argument 'inter_region_bandwidth_id' to be a str")
        pulumi.set(__self__, "inter_region_bandwidth_id", inter_region_bandwidth_id)
        if inter_region_bandwidths and not isinstance(inter_region_bandwidths, list):
            raise TypeError("Expected argument 'inter_region_bandwidths' to be a list")
        pulumi.set(__self__, "inter_region_bandwidths", inter_region_bandwidths)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth package ID.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[_builtins.str]:
        """
        The cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interRegionBandwidthId")
    def inter_region_bandwidth_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "inter_region_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="interRegionBandwidths")
    def inter_region_bandwidths(self) -> Sequence['outputs.GetInterRegionBandwidthsInterRegionBandwidthResult']:
        """
        The inter-region bandwidth list.
        """
        return pulumi.get(self, "inter_region_bandwidths")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetInterRegionBandwidthsResult(GetInterRegionBandwidthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterRegionBandwidthsResult(
            bandwidth_package_id=self.bandwidth_package_id,
            cloud_connection_id=self.cloud_connection_id,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            inter_region_bandwidth_id=self.inter_region_bandwidth_id,
            inter_region_bandwidths=self.inter_region_bandwidths,
            region=self.region)


def get_inter_region_bandwidths(bandwidth_package_id: Optional[_builtins.str] = None,
                                cloud_connection_id: Optional[_builtins.str] = None,
                                enterprise_project_id: Optional[_builtins.str] = None,
                                inter_region_bandwidth_id: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterRegionBandwidthsResult:
    """
    Use this data source to get the list of CC inter-region bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    inter_region_bandwidth_id = config.require_object("interRegionBandwidthId")
    test = huaweicloud.Cc.get_inter_region_bandwidths(inter_region_bandwidth_id=inter_region_bandwidth_id)
    ```


    :param _builtins.str bandwidth_package_id: Specifies the bandwidth package ID.
    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str enterprise_project_id: Specifies enterprise project ID.
    :param _builtins.str inter_region_bandwidth_id: Specifies the inter-region bandwidth ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['bandwidthPackageId'] = bandwidth_package_id
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['interRegionBandwidthId'] = inter_region_bandwidth_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getInterRegionBandwidths:getInterRegionBandwidths', __args__, opts=opts, typ=GetInterRegionBandwidthsResult).value

    return AwaitableGetInterRegionBandwidthsResult(
        bandwidth_package_id=pulumi.get(__ret__, 'bandwidth_package_id'),
        cloud_connection_id=pulumi.get(__ret__, 'cloud_connection_id'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        inter_region_bandwidth_id=pulumi.get(__ret__, 'inter_region_bandwidth_id'),
        inter_region_bandwidths=pulumi.get(__ret__, 'inter_region_bandwidths'),
        region=pulumi.get(__ret__, 'region'))
def get_inter_region_bandwidths_output(bandwidth_package_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       cloud_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       inter_region_bandwidth_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInterRegionBandwidthsResult]:
    """
    Use this data source to get the list of CC inter-region bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    inter_region_bandwidth_id = config.require_object("interRegionBandwidthId")
    test = huaweicloud.Cc.get_inter_region_bandwidths(inter_region_bandwidth_id=inter_region_bandwidth_id)
    ```


    :param _builtins.str bandwidth_package_id: Specifies the bandwidth package ID.
    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str enterprise_project_id: Specifies enterprise project ID.
    :param _builtins.str inter_region_bandwidth_id: Specifies the inter-region bandwidth ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['bandwidthPackageId'] = bandwidth_package_id
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['interRegionBandwidthId'] = inter_region_bandwidth_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getInterRegionBandwidths:getInterRegionBandwidths', __args__, opts=opts, typ=GetInterRegionBandwidthsResult)
    return __ret__.apply(lambda __response__: GetInterRegionBandwidthsResult(
        bandwidth_package_id=pulumi.get(__response__, 'bandwidth_package_id'),
        cloud_connection_id=pulumi.get(__response__, 'cloud_connection_id'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        inter_region_bandwidth_id=pulumi.get(__response__, 'inter_region_bandwidth_id'),
        inter_region_bandwidths=pulumi.get(__response__, 'inter_region_bandwidths'),
        region=pulumi.get(__response__, 'region')))
