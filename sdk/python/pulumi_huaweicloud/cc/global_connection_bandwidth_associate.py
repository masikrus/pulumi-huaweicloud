# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalConnectionBandwidthAssociateArgs', 'GlobalConnectionBandwidthAssociate']

@pulumi.input_type
class GlobalConnectionBandwidthAssociateArgs:
    def __init__(__self__, *,
                 gcb_binding_resources: pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]],
                 gcb_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a GlobalConnectionBandwidthAssociate resource.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]] gcb_binding_resources: The resources to associate with the global connection bandwidth.
               The gcb_binding_resources structure is documented below.
        :param pulumi.Input[_builtins.str] gcb_id: The global connection bandwidth ID.
               Changing this creates a new resource.
               
               <a name="GCB_Binding_Resources"></a>
               The `gcb_binding_resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "gcb_binding_resources", gcb_binding_resources)
        pulumi.set(__self__, "gcb_id", gcb_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="gcbBindingResources")
    def gcb_binding_resources(self) -> pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]]:
        """
        The resources to associate with the global connection bandwidth.
        The gcb_binding_resources structure is documented below.
        """
        return pulumi.get(self, "gcb_binding_resources")

    @gcb_binding_resources.setter
    def gcb_binding_resources(self, value: pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]]):
        pulumi.set(self, "gcb_binding_resources", value)

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> pulumi.Input[_builtins.str]:
        """
        The global connection bandwidth ID.
        Changing this creates a new resource.

        <a name="GCB_Binding_Resources"></a>
        The `gcb_binding_resources` block supports:
        """
        return pulumi.get(self, "gcb_id")

    @gcb_id.setter
    def gcb_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gcb_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _GlobalConnectionBandwidthAssociateState:
    def __init__(__self__, *,
                 gcb_binding_resources: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]]] = None,
                 gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering GlobalConnectionBandwidthAssociate resources.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]] gcb_binding_resources: The resources to associate with the global connection bandwidth.
               The gcb_binding_resources structure is documented below.
        :param pulumi.Input[_builtins.str] gcb_id: The global connection bandwidth ID.
               Changing this creates a new resource.
               
               <a name="GCB_Binding_Resources"></a>
               The `gcb_binding_resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if gcb_binding_resources is not None:
            pulumi.set(__self__, "gcb_binding_resources", gcb_binding_resources)
        if gcb_id is not None:
            pulumi.set(__self__, "gcb_id", gcb_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="gcbBindingResources")
    def gcb_binding_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]]]:
        """
        The resources to associate with the global connection bandwidth.
        The gcb_binding_resources structure is documented below.
        """
        return pulumi.get(self, "gcb_binding_resources")

    @gcb_binding_resources.setter
    def gcb_binding_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs']]]]):
        pulumi.set(self, "gcb_binding_resources", value)

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The global connection bandwidth ID.
        Changing this creates a new resource.

        <a name="GCB_Binding_Resources"></a>
        The `gcb_binding_resources` block supports:
        """
        return pulumi.get(self, "gcb_id")

    @gcb_id.setter
    def gcb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gcb_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cc/globalConnectionBandwidthAssociate:GlobalConnectionBandwidthAssociate")
class GlobalConnectionBandwidthAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gcb_binding_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs', 'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict']]]]] = None,
                 gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Associate a global connection bandwidth to GEIP or some other resource instances within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        gcb_id = config.require_object("gcbId")
        resource_id = config.require_object("resourceId")
        test = huaweicloud.cc.GlobalConnectionBandwidthAssociate("test",
            gcb_id=gcb_id,
            gcb_binding_resources=[{
                "resource_id": resource_id,
                "resource_type": "GEIP",
                "region_id": "global",
                "project_id": project_id,
            }])
        ```

        ## Import

        The global connection bandwidth associate resource can be imported using the global connection bandwidth ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/globalConnectionBandwidthAssociate:GlobalConnectionBandwidthAssociate test <gcb_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs', 'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict']]]] gcb_binding_resources: The resources to associate with the global connection bandwidth.
               The gcb_binding_resources structure is documented below.
        :param pulumi.Input[_builtins.str] gcb_id: The global connection bandwidth ID.
               Changing this creates a new resource.
               
               <a name="GCB_Binding_Resources"></a>
               The `gcb_binding_resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalConnectionBandwidthAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Associate a global connection bandwidth to GEIP or some other resource instances within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        gcb_id = config.require_object("gcbId")
        resource_id = config.require_object("resourceId")
        test = huaweicloud.cc.GlobalConnectionBandwidthAssociate("test",
            gcb_id=gcb_id,
            gcb_binding_resources=[{
                "resource_id": resource_id,
                "resource_type": "GEIP",
                "region_id": "global",
                "project_id": project_id,
            }])
        ```

        ## Import

        The global connection bandwidth associate resource can be imported using the global connection bandwidth ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/globalConnectionBandwidthAssociate:GlobalConnectionBandwidthAssociate test <gcb_id>
        ```

        :param str resource_name: The name of the resource.
        :param GlobalConnectionBandwidthAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalConnectionBandwidthAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gcb_binding_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs', 'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict']]]]] = None,
                 gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalConnectionBandwidthAssociateArgs.__new__(GlobalConnectionBandwidthAssociateArgs)

            if gcb_binding_resources is None and not opts.urn:
                raise TypeError("Missing required property 'gcb_binding_resources'")
            __props__.__dict__["gcb_binding_resources"] = gcb_binding_resources
            if gcb_id is None and not opts.urn:
                raise TypeError("Missing required property 'gcb_id'")
            __props__.__dict__["gcb_id"] = gcb_id
            __props__.__dict__["region"] = region
        super(GlobalConnectionBandwidthAssociate, __self__).__init__(
            'huaweicloud:Cc/globalConnectionBandwidthAssociate:GlobalConnectionBandwidthAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            gcb_binding_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs', 'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict']]]]] = None,
            gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'GlobalConnectionBandwidthAssociate':
        """
        Get an existing GlobalConnectionBandwidthAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GlobalConnectionBandwidthAssociateGcbBindingResourceArgs', 'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict']]]] gcb_binding_resources: The resources to associate with the global connection bandwidth.
               The gcb_binding_resources structure is documented below.
        :param pulumi.Input[_builtins.str] gcb_id: The global connection bandwidth ID.
               Changing this creates a new resource.
               
               <a name="GCB_Binding_Resources"></a>
               The `gcb_binding_resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalConnectionBandwidthAssociateState.__new__(_GlobalConnectionBandwidthAssociateState)

        __props__.__dict__["gcb_binding_resources"] = gcb_binding_resources
        __props__.__dict__["gcb_id"] = gcb_id
        __props__.__dict__["region"] = region
        return GlobalConnectionBandwidthAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="gcbBindingResources")
    def gcb_binding_resources(self) -> pulumi.Output[Sequence['outputs.GlobalConnectionBandwidthAssociateGcbBindingResource']]:
        """
        The resources to associate with the global connection bandwidth.
        The gcb_binding_resources structure is documented below.
        """
        return pulumi.get(self, "gcb_binding_resources")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> pulumi.Output[_builtins.str]:
        """
        The global connection bandwidth ID.
        Changing this creates a new resource.

        <a name="GCB_Binding_Resources"></a>
        The `gcb_binding_resources` block supports:
        """
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

