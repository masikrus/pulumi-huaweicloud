# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterRegionBandwidthArgs', 'InterRegionBandwidth']

@pulumi.input_type
class InterRegionBandwidthArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[_builtins.int],
                 bandwidth_package_id: pulumi.Input[_builtins.str],
                 cloud_connection_id: pulumi.Input[_builtins.str],
                 inter_region_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InterRegionBandwidth resource.
        :param pulumi.Input[_builtins.int] bandwidth: Inter-region bandwidth size.
        :param pulumi.Input[_builtins.str] bandwidth_package_id: Bandwidth package ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inter_region_ids: Two regions to which bandwidth is allocated.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "inter_region_ids", inter_region_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[_builtins.int]:
        """
        Inter-region bandwidth size.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> pulumi.Input[_builtins.str]:
        """
        Bandwidth package ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bandwidth_package_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @cloud_connection_id.setter
    def cloud_connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="interRegionIds")
    def inter_region_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Two regions to which bandwidth is allocated.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "inter_region_ids")

    @inter_region_ids.setter
    def inter_region_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "inter_region_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _InterRegionBandwidthState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 inter_region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 inter_regions: Optional[pulumi.Input[Sequence[pulumi.Input['InterRegionBandwidthInterRegionArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InterRegionBandwidth resources.
        :param pulumi.Input[_builtins.int] bandwidth: Inter-region bandwidth size.
        :param pulumi.Input[_builtins.str] bandwidth_package_id: Bandwidth package ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inter_region_ids: Two regions to which bandwidth is allocated.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['InterRegionBandwidthInterRegionArgs']]] inter_regions: Details about regions of the inter-region bandwidth.
               The inter_regions structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cloud_connection_id is not None:
            pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if inter_region_ids is not None:
            pulumi.set(__self__, "inter_region_ids", inter_region_ids)
        if inter_regions is not None:
            pulumi.set(__self__, "inter_regions", inter_regions)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Inter-region bandwidth size.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bandwidth package ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @cloud_connection_id.setter
    def cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="interRegionIds")
    def inter_region_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Two regions to which bandwidth is allocated.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "inter_region_ids")

    @inter_region_ids.setter
    def inter_region_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "inter_region_ids", value)

    @_builtins.property
    @pulumi.getter(name="interRegions")
    def inter_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterRegionBandwidthInterRegionArgs']]]]:
        """
        Details about regions of the inter-region bandwidth.
        The inter_regions structure is documented below.
        """
        return pulumi.get(self, "inter_regions")

    @inter_regions.setter
    def inter_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterRegionBandwidthInterRegionArgs']]]]):
        pulumi.set(self, "inter_regions", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cc/interRegionBandwidth:InterRegionBandwidth")
class InterRegionBandwidth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 inter_region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an inter-region bandwidth resource of Cloud Connect within HuaweiCloud.

        > If network instances are in the same region, they can communicate with each other by default after they are loaded
           to one cloud connection. If network instances are in different regions, you need to assign inter-region bandwidths
           to ensure normal network communications between the instances.
           By default, the system allocates 10 kbit/s of bandwidth for testing network connectivity across regions.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cloud_connection_id = config.require_object("cloudConnectionId")
        bandwidth_package_id = config.require_object("bandwidthPackageId")
        region_local = config.require_object("regionLocal")
        region_remote = config.require_object("regionRemote")
        test = huaweicloud.cc.InterRegionBandwidth("test",
            cloud_connection_id=cloud_connection_id,
            bandwidth_package_id=bandwidth_package_id,
            bandwidth=5,
            inter_region_ids=[
                region_local,
                region_remote,
            ])
        ```

        ## Import

        The inter-region bandwidth can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/interRegionBandwidth:InterRegionBandwidth test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth: Inter-region bandwidth size.
        :param pulumi.Input[_builtins.str] bandwidth_package_id: Bandwidth package ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inter_region_ids: Two regions to which bandwidth is allocated.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterRegionBandwidthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an inter-region bandwidth resource of Cloud Connect within HuaweiCloud.

        > If network instances are in the same region, they can communicate with each other by default after they are loaded
           to one cloud connection. If network instances are in different regions, you need to assign inter-region bandwidths
           to ensure normal network communications between the instances.
           By default, the system allocates 10 kbit/s of bandwidth for testing network connectivity across regions.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cloud_connection_id = config.require_object("cloudConnectionId")
        bandwidth_package_id = config.require_object("bandwidthPackageId")
        region_local = config.require_object("regionLocal")
        region_remote = config.require_object("regionRemote")
        test = huaweicloud.cc.InterRegionBandwidth("test",
            cloud_connection_id=cloud_connection_id,
            bandwidth_package_id=bandwidth_package_id,
            bandwidth=5,
            inter_region_ids=[
                region_local,
                region_remote,
            ])
        ```

        ## Import

        The inter-region bandwidth can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/interRegionBandwidth:InterRegionBandwidth test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param InterRegionBandwidthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterRegionBandwidthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 inter_region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterRegionBandwidthArgs.__new__(InterRegionBandwidthArgs)

            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            if bandwidth_package_id is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth_package_id'")
            __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
            if cloud_connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_connection_id'")
            __props__.__dict__["cloud_connection_id"] = cloud_connection_id
            if inter_region_ids is None and not opts.urn:
                raise TypeError("Missing required property 'inter_region_ids'")
            __props__.__dict__["inter_region_ids"] = inter_region_ids
            __props__.__dict__["region"] = region
            __props__.__dict__["inter_regions"] = None
        super(InterRegionBandwidth, __self__).__init__(
            'huaweicloud:Cc/interRegionBandwidth:InterRegionBandwidth',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth_package_id: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            inter_region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            inter_regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InterRegionBandwidthInterRegionArgs', 'InterRegionBandwidthInterRegionArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'InterRegionBandwidth':
        """
        Get an existing InterRegionBandwidth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth: Inter-region bandwidth size.
        :param pulumi.Input[_builtins.str] bandwidth_package_id: Bandwidth package ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inter_region_ids: Two regions to which bandwidth is allocated.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InterRegionBandwidthInterRegionArgs', 'InterRegionBandwidthInterRegionArgsDict']]]] inter_regions: Details about regions of the inter-region bandwidth.
               The inter_regions structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterRegionBandwidthState.__new__(_InterRegionBandwidthState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
        __props__.__dict__["cloud_connection_id"] = cloud_connection_id
        __props__.__dict__["inter_region_ids"] = inter_region_ids
        __props__.__dict__["inter_regions"] = inter_regions
        __props__.__dict__["region"] = region
        return InterRegionBandwidth(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.int]:
        """
        Inter-region bandwidth size.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> pulumi.Output[_builtins.str]:
        """
        Bandwidth package ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud connection ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="interRegionIds")
    def inter_region_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Two regions to which bandwidth is allocated.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "inter_region_ids")

    @_builtins.property
    @pulumi.getter(name="interRegions")
    def inter_regions(self) -> pulumi.Output[Sequence['outputs.InterRegionBandwidthInterRegion']]:
        """
        Details about regions of the inter-region bandwidth.
        The inter_regions structure is documented below.
        """
        return pulumi.get(self, "inter_regions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

