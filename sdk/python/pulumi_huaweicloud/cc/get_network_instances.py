# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkInstancesResult',
    'AwaitableGetNetworkInstancesResult',
    'get_network_instances',
    'get_network_instances_output',
]

@pulumi.output_type
class GetNetworkInstancesResult:
    """
    A collection of values returned by getNetworkInstances.
    """
    def __init__(__self__, cloud_connection_id=None, description=None, id=None, instance_id=None, name=None, network_instance_id=None, network_instances=None, region=None, region_id=None, status=None, type=None):
        if cloud_connection_id and not isinstance(cloud_connection_id, str):
            raise TypeError("Expected argument 'cloud_connection_id' to be a str")
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_instance_id and not isinstance(network_instance_id, str):
            raise TypeError("Expected argument 'network_instance_id' to be a str")
        pulumi.set(__self__, "network_instance_id", network_instance_id)
        if network_instances and not isinstance(network_instances, list):
            raise TypeError("Expected argument 'network_instances' to be a list")
        pulumi.set(__self__, "network_instances", network_instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[_builtins.str]:
        """
        The cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Network instance description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC or virtual gateway to be loaded to the cloud connection.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Network instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInstanceId")
    def network_instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_instance_id")

    @_builtins.property
    @pulumi.getter(name="networkInstances")
    def network_instances(self) -> Sequence['outputs.GetNetworkInstancesNetworkInstanceResult']:
        """
        Network instance list.
        """
        return pulumi.get(self, "network_instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        Region ID of the network instance.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the network instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type of the network instance.
        """
        return pulumi.get(self, "type")


class AwaitableGetNetworkInstancesResult(GetNetworkInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkInstancesResult(
            cloud_connection_id=self.cloud_connection_id,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            network_instance_id=self.network_instance_id,
            network_instances=self.network_instances,
            region=self.region,
            region_id=self.region_id,
            status=self.status,
            type=self.type)


def get_network_instances(cloud_connection_id: Optional[_builtins.str] = None,
                          description: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          network_instance_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          region_id: Optional[_builtins.str] = None,
                          status: Optional[_builtins.str] = None,
                          type: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkInstancesResult:
    """
    Use this data source to get the list of CC network instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_instance_id = config.require_object("networkInstanceId")
    test = huaweicloud.Cc.get_network_instances(network_instance_id=network_instance_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the network instance description.
    :param _builtins.str instance_id: Specifies the ID of the VPC or virtual gateway to be loaded to the cloud connection.
    :param _builtins.str name: Specifies the network instance name.
    :param _builtins.str network_instance_id: Specifies the network instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies the region ID of the network instance.
    :param _builtins.str status: Specifies the status of the network instance.
           The options are as follows:
           + **ACTIVE**: The network instance is available.
           + **PENDING**: The network instance is being processed.
           + **ERROR**: The processing failed.
    :param _builtins.str type: Specifies the type of the network instance.
           Value options are as follows:
           + **vpc**: a VPC.
           + **vgw**: a virtual gateway.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['networkInstanceId'] = network_instance_id
    __args__['region'] = region
    __args__['regionId'] = region_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getNetworkInstances:getNetworkInstances', __args__, opts=opts, typ=GetNetworkInstancesResult).value

    return AwaitableGetNetworkInstancesResult(
        cloud_connection_id=pulumi.get(__ret__, 'cloud_connection_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        network_instance_id=pulumi.get(__ret__, 'network_instance_id'),
        network_instances=pulumi.get(__ret__, 'network_instances'),
        region=pulumi.get(__ret__, 'region'),
        region_id=pulumi.get(__ret__, 'region_id'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_network_instances_output(cloud_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 network_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkInstancesResult]:
    """
    Use this data source to get the list of CC network instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_instance_id = config.require_object("networkInstanceId")
    test = huaweicloud.Cc.get_network_instances(network_instance_id=network_instance_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the network instance description.
    :param _builtins.str instance_id: Specifies the ID of the VPC or virtual gateway to be loaded to the cloud connection.
    :param _builtins.str name: Specifies the network instance name.
    :param _builtins.str network_instance_id: Specifies the network instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies the region ID of the network instance.
    :param _builtins.str status: Specifies the status of the network instance.
           The options are as follows:
           + **ACTIVE**: The network instance is available.
           + **PENDING**: The network instance is being processed.
           + **ERROR**: The processing failed.
    :param _builtins.str type: Specifies the type of the network instance.
           Value options are as follows:
           + **vpc**: a VPC.
           + **vgw**: a virtual gateway.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['networkInstanceId'] = network_instance_id
    __args__['region'] = region
    __args__['regionId'] = region_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getNetworkInstances:getNetworkInstances', __args__, opts=opts, typ=GetNetworkInstancesResult)
    return __ret__.apply(lambda __response__: GetNetworkInstancesResult(
        cloud_connection_id=pulumi.get(__response__, 'cloud_connection_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        network_instance_id=pulumi.get(__response__, 'network_instance_id'),
        network_instances=pulumi.get(__response__, 'network_instances'),
        region=pulumi.get(__response__, 'region'),
        region_id=pulumi.get(__response__, 'region_id'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
