# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalConnectionBandwidthSitesResult',
    'AwaitableGetGlobalConnectionBandwidthSitesResult',
    'get_global_connection_bandwidth_sites',
    'get_global_connection_bandwidth_sites_output',
]

@pulumi.output_type
class GetGlobalConnectionBandwidthSitesResult:
    """
    A collection of values returned by getGlobalConnectionBandwidthSites.
    """
    def __init__(__self__, id=None, name_cn=None, name_en=None, region=None, site_code=None, site_id=None, site_infos=None, site_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_cn and not isinstance(name_cn, str):
            raise TypeError("Expected argument 'name_cn' to be a str")
        pulumi.set(__self__, "name_cn", name_cn)
        if name_en and not isinstance(name_en, str):
            raise TypeError("Expected argument 'name_en' to be a str")
        pulumi.set(__self__, "name_en", name_en)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if site_code and not isinstance(site_code, str):
            raise TypeError("Expected argument 'site_code' to be a str")
        pulumi.set(__self__, "site_code", site_code)
        if site_id and not isinstance(site_id, str):
            raise TypeError("Expected argument 'site_id' to be a str")
        pulumi.set(__self__, "site_id", site_id)
        if site_infos and not isinstance(site_infos, list):
            raise TypeError("Expected argument 'site_infos' to be a list")
        pulumi.set(__self__, "site_infos", site_infos)
        if site_type and not isinstance(site_type, str):
            raise TypeError("Expected argument 'site_type' to be a str")
        pulumi.set(__self__, "site_type", site_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameCn")
    def name_cn(self) -> Optional[_builtins.str]:
        """
        User-defined site group name in Chinese.
        """
        return pulumi.get(self, "name_cn")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[_builtins.str]:
        """
        User-defined site group name in English.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> Optional[_builtins.str]:
        """
        The site code.
        """
        return pulumi.get(self, "site_code")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteInfos")
    def site_infos(self) -> Sequence['outputs.GetGlobalConnectionBandwidthSitesSiteInfoResult']:
        """
        The site list.
        """
        return pulumi.get(self, "site_infos")

    @_builtins.property
    @pulumi.getter(name="siteType")
    def site_type(self) -> Optional[_builtins.str]:
        """
        The site type.
        """
        return pulumi.get(self, "site_type")


class AwaitableGetGlobalConnectionBandwidthSitesResult(GetGlobalConnectionBandwidthSitesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalConnectionBandwidthSitesResult(
            id=self.id,
            name_cn=self.name_cn,
            name_en=self.name_en,
            region=self.region,
            site_code=self.site_code,
            site_id=self.site_id,
            site_infos=self.site_infos,
            site_type=self.site_type)


def get_global_connection_bandwidth_sites(name_cn: Optional[_builtins.str] = None,
                                          name_en: Optional[_builtins.str] = None,
                                          region: Optional[_builtins.str] = None,
                                          site_code: Optional[_builtins.str] = None,
                                          site_id: Optional[_builtins.str] = None,
                                          site_type: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalConnectionBandwidthSitesResult:
    """
    Use this data source to get the list of CC global connection bandwidth sites.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    site_id = config.require_object("siteId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_sites(site_id=site_id)
    ```


    :param _builtins.str name_cn: Specifies the site name in Chinese.
    :param _builtins.str name_en: Specifies the site name in English.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str site_code: Specifies site code.
    :param _builtins.str site_id: Specifies site ID.
    :param _builtins.str site_type: Specifies site type.
           + **Area**: a geographic region site.
           + **SubArea**: a region site.
           + **Region**: a multi-city site.
    """
    __args__ = dict()
    __args__['nameCn'] = name_cn
    __args__['nameEn'] = name_en
    __args__['region'] = region
    __args__['siteCode'] = site_code
    __args__['siteId'] = site_id
    __args__['siteType'] = site_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getGlobalConnectionBandwidthSites:getGlobalConnectionBandwidthSites', __args__, opts=opts, typ=GetGlobalConnectionBandwidthSitesResult).value

    return AwaitableGetGlobalConnectionBandwidthSitesResult(
        id=pulumi.get(__ret__, 'id'),
        name_cn=pulumi.get(__ret__, 'name_cn'),
        name_en=pulumi.get(__ret__, 'name_en'),
        region=pulumi.get(__ret__, 'region'),
        site_code=pulumi.get(__ret__, 'site_code'),
        site_id=pulumi.get(__ret__, 'site_id'),
        site_infos=pulumi.get(__ret__, 'site_infos'),
        site_type=pulumi.get(__ret__, 'site_type'))
def get_global_connection_bandwidth_sites_output(name_cn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 name_en: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 site_code: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 site_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 site_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalConnectionBandwidthSitesResult]:
    """
    Use this data source to get the list of CC global connection bandwidth sites.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    site_id = config.require_object("siteId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_sites(site_id=site_id)
    ```


    :param _builtins.str name_cn: Specifies the site name in Chinese.
    :param _builtins.str name_en: Specifies the site name in English.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str site_code: Specifies site code.
    :param _builtins.str site_id: Specifies site ID.
    :param _builtins.str site_type: Specifies site type.
           + **Area**: a geographic region site.
           + **SubArea**: a region site.
           + **Region**: a multi-city site.
    """
    __args__ = dict()
    __args__['nameCn'] = name_cn
    __args__['nameEn'] = name_en
    __args__['region'] = region
    __args__['siteCode'] = site_code
    __args__['siteId'] = site_id
    __args__['siteType'] = site_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getGlobalConnectionBandwidthSites:getGlobalConnectionBandwidthSites', __args__, opts=opts, typ=GetGlobalConnectionBandwidthSitesResult)
    return __ret__.apply(lambda __response__: GetGlobalConnectionBandwidthSitesResult(
        id=pulumi.get(__response__, 'id'),
        name_cn=pulumi.get(__response__, 'name_cn'),
        name_en=pulumi.get(__response__, 'name_en'),
        region=pulumi.get(__response__, 'region'),
        site_code=pulumi.get(__response__, 'site_code'),
        site_id=pulumi.get(__response__, 'site_id'),
        site_infos=pulumi.get(__response__, 'site_infos'),
        site_type=pulumi.get(__response__, 'site_type')))
