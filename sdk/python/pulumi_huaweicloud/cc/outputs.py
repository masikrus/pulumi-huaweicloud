# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CentralNetworkPolicyErInstance',
    'CentralNetworkPolicyPlanes',
    'CentralNetworkPolicyPlanesAssociateErTable',
    'CentralNetworkPolicyPlanesExcludeErConnection',
    'CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance',
    'GlobalConnectionBandwidthAssociateGcbBindingResource',
    'GlobalConnectionBandwidthInstance',
    'InterRegionBandwidthInterRegion',
    'GetAuthorizationsAuthorizationResult',
    'GetBandwidthPackagesBandwidthPackageResult',
    'GetCentralNetworkAttachmentsCentralNetworkAttachmentResult',
    'GetCentralNetworkAttachmentsCentralNetworkAttachmentSpecificationValueResult',
    'GetCentralNetworkCapabilitiesCapabilityResult',
    'GetCentralNetworkConnectionsCentralNetworkConnectionResult',
    'GetCentralNetworkConnectionsCentralNetworkConnectionConnectionPointPairResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentErInstanceResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneAssociateErTableResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionResult',
    'GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionExcludeErInstanceResult',
    'GetCentralNetworkPoliciesChangeSetCentralNetworkPolicyChangeSetResult',
    'GetCentralNetworkQuotasQuotaResult',
    'GetCentralNetworksCentralNetworkResult',
    'GetConnectionRoutesCloudConnectionRouteResult',
    'GetConnectionsConnectionResult',
    'GetGlobalConnectionBandwidthLineLevelsLineLevelResult',
    'GetGlobalConnectionBandwidthSitesSiteInfoResult',
    'GetGlobalConnectionBandwidthSitesSiteInfoGroupListResult',
    'GetGlobalConnectionBandwidthSpecCodesSpecCodeResult',
    'GetGlobalConnectionBandwidthsGlobalconnectionBandwidthResult',
    'GetGlobalConnectionBandwidthsGlobalconnectionBandwidthInstanceResult',
    'GetInterRegionBandwidthsInterRegionBandwidthResult',
    'GetInterRegionBandwidthsInterRegionBandwidthInterRegionResult',
    'GetNetworkInstancesNetworkInstanceResult',
    'GetPermissionsPermissionResult',
    'GetSupportBindingGlobalConnectionBandwidthsGlobalconnectionBandwidthResult',
]

@pulumi.output_type
class CentralNetworkPolicyErInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enterpriseRouterId":
            suggest = "enterprise_router_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralNetworkPolicyErInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralNetworkPolicyErInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralNetworkPolicyErInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param _builtins.str project_id: Project ID.
               Changing this parameter will create a new resource.
        :param _builtins.str region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class CentralNetworkPolicyPlanes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associateErTables":
            suggest = "associate_er_tables"
        elif key == "excludeErConnections":
            suggest = "exclude_er_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralNetworkPolicyPlanes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralNetworkPolicyPlanes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralNetworkPolicyPlanes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 associate_er_tables: Sequence['outputs.CentralNetworkPolicyPlanesAssociateErTable'],
                 exclude_er_connections: Optional[Sequence['outputs.CentralNetworkPolicyPlanesExcludeErConnection']] = None):
        """
        :param Sequence['CentralNetworkPolicyPlanesAssociateErTableArgs'] associate_er_tables: List of route tables associated with the central network policy.
               The associate_er_tables structure is documented below.
               Changing this parameter will create a new resource.
        :param Sequence['CentralNetworkPolicyPlanesExcludeErConnectionArgs'] exclude_er_connections: List of the enterprise router connections excluded from the
               central network policy.
               The exclude_er_connections structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="centralNetworkPolicy_AssociateErTableDocument"></a>
               The `associate_er_tables` block supports:
        """
        pulumi.set(__self__, "associate_er_tables", associate_er_tables)
        if exclude_er_connections is not None:
            pulumi.set(__self__, "exclude_er_connections", exclude_er_connections)

    @_builtins.property
    @pulumi.getter(name="associateErTables")
    def associate_er_tables(self) -> Sequence['outputs.CentralNetworkPolicyPlanesAssociateErTable']:
        """
        List of route tables associated with the central network policy.
        The associate_er_tables structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "associate_er_tables")

    @_builtins.property
    @pulumi.getter(name="excludeErConnections")
    def exclude_er_connections(self) -> Optional[Sequence['outputs.CentralNetworkPolicyPlanesExcludeErConnection']]:
        """
        List of the enterprise router connections excluded from the
        central network policy.
        The exclude_er_connections structure is documented below.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_AssociateErTableDocument"></a>
        The `associate_er_tables` block supports:
        """
        return pulumi.get(self, "exclude_er_connections")


@pulumi.output_type
class CentralNetworkPolicyPlanesAssociateErTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enterpriseRouterId":
            suggest = "enterprise_router_id"
        elif key == "enterpriseRouterTableId":
            suggest = "enterprise_router_table_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralNetworkPolicyPlanesAssociateErTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralNetworkPolicyPlanesAssociateErTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralNetworkPolicyPlanesAssociateErTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 enterprise_router_table_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param _builtins.str enterprise_router_table_id: Enterprise router table ID.
               Changing this parameter will create a new resource.
               
               <a name="centralNetworkPolicy_ExcludeErConnectionDocument"></a>
               The `exclude_er_connections` block supports:
        :param _builtins.str project_id: Project ID.
               Changing this parameter will create a new resource.
        :param _builtins.str region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "enterprise_router_table_id", enterprise_router_table_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterTableId")
    def enterprise_router_table_id(self) -> _builtins.str:
        """
        Enterprise router table ID.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_ExcludeErConnectionDocument"></a>
        The `exclude_er_connections` block supports:
        """
        return pulumi.get(self, "enterprise_router_table_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class CentralNetworkPolicyPlanesExcludeErConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeErInstances":
            suggest = "exclude_er_instances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralNetworkPolicyPlanesExcludeErConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralNetworkPolicyPlanesExcludeErConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralNetworkPolicyPlanesExcludeErConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_er_instances: Sequence['outputs.CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance']):
        """
        :param Sequence['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs'] exclude_er_instances: List of enterprise routers that will not establish a connection.
               The exclude_er_instances structure is the same as `er_instances`.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "exclude_er_instances", exclude_er_instances)

    @_builtins.property
    @pulumi.getter(name="excludeErInstances")
    def exclude_er_instances(self) -> Sequence['outputs.CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance']:
        """
        List of enterprise routers that will not establish a connection.
        The exclude_er_instances structure is the same as `er_instances`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "exclude_er_instances")


@pulumi.output_type
class CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enterpriseRouterId":
            suggest = "enterprise_router_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param _builtins.str project_id: Project ID.
               Changing this parameter will create a new resource.
        :param _builtins.str region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GlobalConnectionBandwidthAssociateGcbBindingResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalConnectionBandwidthAssociateGcbBindingResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalConnectionBandwidthAssociateGcbBindingResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalConnectionBandwidthAssociateGcbBindingResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 project_id: Optional[_builtins.str] = None,
                 region_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: The ID of the resource to associate with the global connection bandwidth.
        :param _builtins.str resource_type: The type of the resource to associate with the global connection bandwidth.
               Currently, only **GEIP** is supported.
        :param _builtins.str project_id: The project ID of the resource to associate with the global connection bandwidth.
        :param _builtins.str region_id: The region ID of the resource to associate with the global connection bandwidth.
               If the value of `resource_type` is **GEIP**, the valid value is **global**.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the resource to associate with the global connection bandwidth.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource to associate with the global connection bandwidth.
        Currently, only **GEIP** is supported.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        The project ID of the resource to associate with the global connection bandwidth.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        The region ID of the resource to associate with the global connection bandwidth.
        If the value of `resource_type` is **GEIP**, the valid value is **global**.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GlobalConnectionBandwidthInstance(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The instance ID.
        :param _builtins.str region: The region of the instance.
        :param _builtins.str type: Specifies the GCB type.
               
               Valid values are as follows:
               + **TrsArea**: Cross geographic region.
               + **Area**: Geographic region.
               + **SubArea**: Homezones region.
               + **Region**: Multi-city region.
               
               Changing this creates a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The region of the instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the GCB type.

        Valid values are as follows:
        + **TrsArea**: Cross geographic region.
        + **Area**: Geographic region.
        + **SubArea**: Homezones region.
        + **Region**: Multi-city region.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InterRegionBandwidthInterRegion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localRegionId":
            suggest = "local_region_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "remoteRegionId":
            suggest = "remote_region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterRegionBandwidthInterRegion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterRegionBandwidthInterRegion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterRegionBandwidthInterRegion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 local_region_id: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 remote_region_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Inter-region bandwidth ID.
        :param _builtins.str local_region_id: ID of the local region where the inter-region bandwidth is used.
        :param _builtins.str project_id: Project ID of a region where the inter-region bandwidth is used.
        :param _builtins.str remote_region_id: ID of the remote region where the inter-region bandwidth is used.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_region_id is not None:
            pulumi.set(__self__, "local_region_id", local_region_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remote_region_id is not None:
            pulumi.set(__self__, "remote_region_id", remote_region_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Inter-region bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localRegionId")
    def local_region_id(self) -> Optional[_builtins.str]:
        """
        ID of the local region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "local_region_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Project ID of a region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="remoteRegionId")
    def remote_region_id(self) -> Optional[_builtins.str]:
        """
        ID of the remote region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "remote_region_id")


@pulumi.output_type
class GetAuthorizationsAuthorizationResult(dict):
    def __init__(__self__, *,
                 cloud_connection_domain_id: _builtins.str,
                 cloud_connection_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str cloud_connection_domain_id: Specifies the account ID that the cloud connection belongs to.
        :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str description: Specifies the description of the cross-account authorization.
        :param _builtins.str domain_id: The ID of the account that the network instance belongs to.
        :param _builtins.str id: The ID of the cross-account authorization.
        :param _builtins.str instance_id: Specifies the network instance ID.
        :param _builtins.str instance_type: The type of an authorized network instance.
        :param _builtins.str name: Specifies the name of the cross-account authorization.
        :param _builtins.str project_id: The project ID of the network instance.
        :param _builtins.str region_id: The region ID of the network instance.
        :param _builtins.str status: The authorization status.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "cloud_connection_domain_id", cloud_connection_domain_id)
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionDomainId")
    def cloud_connection_domain_id(self) -> _builtins.str:
        """
        Specifies the account ID that the cloud connection belongs to.
        """
        return pulumi.get(self, "cloud_connection_domain_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> _builtins.str:
        """
        Specifies the cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the cross-account authorization.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account that the network instance belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the cross-account authorization.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the network instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        The type of an authorized network instance.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the cross-account authorization.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the network instance.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID of the network instance.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The authorization status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBandwidthPackagesBandwidthPackageResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 billing_mode: _builtins.str,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 interflow_mode: _builtins.str,
                 local_area_id: _builtins.str,
                 name: _builtins.str,
                 order_id: _builtins.str,
                 product_id: _builtins.str,
                 project_id: _builtins.str,
                 remote_area_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.int bandwidth: Specifies the bandwidth range specified for the bandwidth package.
        :param _builtins.str billing_mode: Specifies the billing mode of the bandwidth package.
               The options are as follows:
               + **1**：pay by period for the Chinese Mainland website.
               + **2**: pay by period for the International website.
               + **3**: pay-per-use for the Chinese Mainland website.
               + **4**: pay-per-use for the International website.
               + **5**: 95th percentile bandwidth billing for the Chinese Mainland website.
               + **6**: 95th percentile bandwidth billing for the International website.
        :param _builtins.str charge_mode: Billing option.
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str description: The bandwidth package description.
        :param _builtins.str domain_id: The ID of the account that the bandwidth package belongs to.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the bandwidth package
               belongs to.
        :param _builtins.str id: The bandwidth package ID.
        :param _builtins.str interflow_mode: Interflow mode of the bandwidth package.
        :param _builtins.str local_area_id: The ID of a local access point.
        :param _builtins.str name: Specifies the bandwidth package name.
        :param _builtins.str order_id: Order ID of the bandwidth package.
        :param _builtins.str product_id: Product ID of the bandwidth package.
        :param _builtins.str project_id: Project ID of the bandwidth package.
        :param _builtins.str remote_area_id: The ID of a remote access point.
        :param _builtins.str resource_id: Specifies the ID of the resource that the bandwidth package is bound to.
        :param _builtins.str resource_type: Type of the resource that the bandwidth package is bound to.
        :param _builtins.str spec_code: Specification code of the bandwidth package.
        :param _builtins.str status: Specifies the bandwidth package status.
               The valid value is as follows:
               + **ACTIVE**: Bandwidth packages are available.
        :param Mapping[str, _builtins.str] tags: Specifies the bandwidth package tags.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interflow_mode", interflow_mode)
        pulumi.set(__self__, "local_area_id", local_area_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "remote_area_id", remote_area_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Specifies the bandwidth range specified for the bandwidth package.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> _builtins.str:
        """
        Specifies the billing mode of the bandwidth package.
        The options are as follows:
        + **1**：pay by period for the Chinese Mainland website.
        + **2**: pay by period for the International website.
        + **3**: pay-per-use for the Chinese Mainland website.
        + **4**: pay-per-use for the International website.
        + **5**: 95th percentile bandwidth billing for the Chinese Mainland website.
        + **6**: 95th percentile bandwidth billing for the International website.
        """
        return pulumi.get(self, "billing_mode")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Billing option.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The bandwidth package description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account that the bandwidth package belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project that the bandwidth package
        belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The bandwidth package ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interflowMode")
    def interflow_mode(self) -> _builtins.str:
        """
        Interflow mode of the bandwidth package.
        """
        return pulumi.get(self, "interflow_mode")

    @_builtins.property
    @pulumi.getter(name="localAreaId")
    def local_area_id(self) -> _builtins.str:
        """
        The ID of a local access point.
        """
        return pulumi.get(self, "local_area_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the bandwidth package name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        Order ID of the bandwidth package.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Product ID of the bandwidth package.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID of the bandwidth package.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="remoteAreaId")
    def remote_area_id(self) -> _builtins.str:
        """
        The ID of a remote access point.
        """
        return pulumi.get(self, "remote_area_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the ID of the resource that the bandwidth package is bound to.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Type of the resource that the bandwidth package is bound to.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Specification code of the bandwidth package.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the bandwidth package status.
        The valid value is as follows:
        + **ACTIVE**: Bandwidth packages are available.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the bandwidth package tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCentralNetworkAttachmentsCentralNetworkAttachmentResult(dict):
    def __init__(__self__, *,
                 attachment_id: _builtins.str,
                 attachment_instance_id: _builtins.str,
                 attachment_instance_project_id: _builtins.str,
                 attachment_instance_region_id: _builtins.str,
                 attachment_instance_site_code: _builtins.str,
                 attachment_instance_type: _builtins.str,
                 bandwidth_size: _builtins.int,
                 bandwidth_type: _builtins.str,
                 central_network_id: _builtins.str,
                 central_network_plane_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enterprise_router_attachment_id: _builtins.str,
                 enterprise_router_id: _builtins.str,
                 enterprise_router_project_id: _builtins.str,
                 enterprise_router_region_id: _builtins.str,
                 enterprise_router_site_code: _builtins.str,
                 global_connection_bandwidth_id: _builtins.str,
                 id: _builtins.str,
                 is_frozen: _builtins.bool,
                 name: _builtins.str,
                 specification_values: Sequence['outputs.GetCentralNetworkAttachmentsCentralNetworkAttachmentSpecificationValueResult'],
                 state: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str attachment_id: Specifies the attachment ID.
        :param _builtins.str attachment_instance_id: Specifies the instance ID.
        :param _builtins.str attachment_instance_project_id: The project ID of the attachment instance.
        :param _builtins.str attachment_instance_region_id: The Region ID of the attachment instance.
        :param _builtins.str attachment_instance_site_code: The attachment instance site code.
        :param _builtins.str attachment_instance_type: Specifies the type of attachment instance.
               The valid values are **GDGW** and **ER_ROUTE_TABLE**.
        :param _builtins.int bandwidth_size: The bandwidth size.
        :param _builtins.str bandwidth_type: The bandwidth type.
        :param _builtins.str central_network_id: Specifies the central network ID.
        :param _builtins.str central_network_plane_id: The central network plane ID.
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str description: The attachment description.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str enterprise_router_attachment_id: The enterprise router attachment ID.
        :param _builtins.str enterprise_router_id: The enterprise router ID.
        :param _builtins.str enterprise_router_project_id: The project ID to which the enterprise router belongs.
        :param _builtins.str enterprise_router_region_id: The region ID to which the enterprise router belongs.
        :param _builtins.str enterprise_router_site_code: The enterprise router site code.
        :param _builtins.str global_connection_bandwidth_id: The global connection bandwidth ID.
        :param _builtins.str id: The attachment ID.
        :param _builtins.bool is_frozen: Whether the resource is frozen.
        :param _builtins.str name: Specifies the attachment name.
        :param Sequence['GetCentralNetworkAttachmentsCentralNetworkAttachmentSpecificationValueArgs'] specification_values: Additional information about an attachment.
        :param _builtins.str state: Specifies the attachment status.
               The valid values are as follows:
               + **AVAILABLE**: The attachment is available.
               + **CREATING**: The attachment is being created.
               + **UPDATING**: The attachment is being updated.
               + **DELETING**: The attachment is being deleted.
               + **FREEZING**: The attachment is being frozen.
               + **UNFREEZING**: The attachment is being unfrozen.
               + **RECOVERING**: The attachment is being recovered.
               + **FAILED**: The operation on the attachment failed.
               + **DELETED**: The attachment is deleted.
               + **APPROVING**: The attachment is being approved.
               + **APPROVED**: The attachment is approved.
               + **UNAPPROVED**: The approval failed.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "attachment_id", attachment_id)
        pulumi.set(__self__, "attachment_instance_id", attachment_instance_id)
        pulumi.set(__self__, "attachment_instance_project_id", attachment_instance_project_id)
        pulumi.set(__self__, "attachment_instance_region_id", attachment_instance_region_id)
        pulumi.set(__self__, "attachment_instance_site_code", attachment_instance_site_code)
        pulumi.set(__self__, "attachment_instance_type", attachment_instance_type)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "central_network_plane_id", central_network_plane_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enterprise_router_attachment_id", enterprise_router_attachment_id)
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "enterprise_router_project_id", enterprise_router_project_id)
        pulumi.set(__self__, "enterprise_router_region_id", enterprise_router_region_id)
        pulumi.set(__self__, "enterprise_router_site_code", enterprise_router_site_code)
        pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_frozen", is_frozen)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "specification_values", specification_values)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> _builtins.str:
        """
        Specifies the attachment ID.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceId")
    def attachment_instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "attachment_instance_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceProjectId")
    def attachment_instance_project_id(self) -> _builtins.str:
        """
        The project ID of the attachment instance.
        """
        return pulumi.get(self, "attachment_instance_project_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceRegionId")
    def attachment_instance_region_id(self) -> _builtins.str:
        """
        The Region ID of the attachment instance.
        """
        return pulumi.get(self, "attachment_instance_region_id")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceSiteCode")
    def attachment_instance_site_code(self) -> _builtins.str:
        """
        The attachment instance site code.
        """
        return pulumi.get(self, "attachment_instance_site_code")

    @_builtins.property
    @pulumi.getter(name="attachmentInstanceType")
    def attachment_instance_type(self) -> _builtins.str:
        """
        Specifies the type of attachment instance.
        The valid values are **GDGW** and **ER_ROUTE_TABLE**.
        """
        return pulumi.get(self, "attachment_instance_type")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        The bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        Specifies the central network ID.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="centralNetworkPlaneId")
    def central_network_plane_id(self) -> _builtins.str:
        """
        The central network plane ID.
        """
        return pulumi.get(self, "central_network_plane_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The attachment description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterAttachmentId")
    def enterprise_router_attachment_id(self) -> _builtins.str:
        """
        The enterprise router attachment ID.
        """
        return pulumi.get(self, "enterprise_router_attachment_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        The enterprise router ID.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterProjectId")
    def enterprise_router_project_id(self) -> _builtins.str:
        """
        The project ID to which the enterprise router belongs.
        """
        return pulumi.get(self, "enterprise_router_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterRegionId")
    def enterprise_router_region_id(self) -> _builtins.str:
        """
        The region ID to which the enterprise router belongs.
        """
        return pulumi.get(self, "enterprise_router_region_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterSiteCode")
    def enterprise_router_site_code(self) -> _builtins.str:
        """
        The enterprise router site code.
        """
        return pulumi.get(self, "enterprise_router_site_code")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> _builtins.str:
        """
        The global connection bandwidth ID.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The attachment ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFrozen")
    def is_frozen(self) -> _builtins.bool:
        """
        Whether the resource is frozen.
        """
        return pulumi.get(self, "is_frozen")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the attachment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="specificationValues")
    def specification_values(self) -> Sequence['outputs.GetCentralNetworkAttachmentsCentralNetworkAttachmentSpecificationValueResult']:
        """
        Additional information about an attachment.
        """
        return pulumi.get(self, "specification_values")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the attachment status.
        The valid values are as follows:
        + **AVAILABLE**: The attachment is available.
        + **CREATING**: The attachment is being created.
        + **UPDATING**: The attachment is being updated.
        + **DELETING**: The attachment is being deleted.
        + **FREEZING**: The attachment is being frozen.
        + **UNFREEZING**: The attachment is being unfrozen.
        + **RECOVERING**: The attachment is being recovered.
        + **FAILED**: The operation on the attachment failed.
        + **DELETED**: The attachment is deleted.
        + **APPROVING**: The attachment is being approved.
        + **APPROVED**: The attachment is approved.
        + **UNAPPROVED**: The approval failed.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCentralNetworkAttachmentsCentralNetworkAttachmentSpecificationValueResult(dict):
    def __init__(__self__, *,
                 approved_state: _builtins.str,
                 attached_er_id: _builtins.str,
                 enterprise_router_table_id: _builtins.str,
                 hosted_cloud: _builtins.str,
                 reason: _builtins.str):
        """
        :param _builtins.str approved_state: Approval status.
        :param _builtins.str attached_er_id: The attached enterprise router ID.
        :param _builtins.str enterprise_router_table_id: The enterprise router table ID.
        :param _builtins.str hosted_cloud: Huawei Cloud or partner cloud.
        :param _builtins.str reason: Reason for rejecting attachment creation.
        """
        pulumi.set(__self__, "approved_state", approved_state)
        pulumi.set(__self__, "attached_er_id", attached_er_id)
        pulumi.set(__self__, "enterprise_router_table_id", enterprise_router_table_id)
        pulumi.set(__self__, "hosted_cloud", hosted_cloud)
        pulumi.set(__self__, "reason", reason)

    @_builtins.property
    @pulumi.getter(name="approvedState")
    def approved_state(self) -> _builtins.str:
        """
        Approval status.
        """
        return pulumi.get(self, "approved_state")

    @_builtins.property
    @pulumi.getter(name="attachedErId")
    def attached_er_id(self) -> _builtins.str:
        """
        The attached enterprise router ID.
        """
        return pulumi.get(self, "attached_er_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterTableId")
    def enterprise_router_table_id(self) -> _builtins.str:
        """
        The enterprise router table ID.
        """
        return pulumi.get(self, "enterprise_router_table_id")

    @_builtins.property
    @pulumi.getter(name="hostedCloud")
    def hosted_cloud(self) -> _builtins.str:
        """
        Huawei Cloud or partner cloud.
        """
        return pulumi.get(self, "hosted_cloud")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        Reason for rejecting attachment creation.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetCentralNetworkCapabilitiesCapabilityResult(dict):
    def __init__(__self__, *,
                 capability: _builtins.str,
                 domain_id: _builtins.str,
                 specifications: _builtins.str):
        """
        :param _builtins.str capability: Specifies the capability of the central network.
               The valid values are as follows:
               + **central-network.is-support**: Whether the central network is supported.
               + **central-network.is-support-enterprise-project**: Whether the central network supports enterprise projects.
               + **central-network.is-support-tag**: Whether the central network supports tags.
               + **connection-bandwidth.size-range**: The bandwidth range for a cross-site connection.
               + **connection-bandwidth.charge-mode**: The Billing mode of the global private bandwidth for assigning cross-site
               connection bandwidths.
               + **er-instance.support-regions**: The list of the regions where Enterprise Router is available.
               + **er-instance.support-ipv6-regions**: The list of the regions where Enterprise Router supports IPv6.
               + **er-instance.support-dscp-regions**: The list of the regions that support gold, silver, and bronze global private
               bandwidths.
               + **er-instance.support-sites**: The list of the sites where Enterprise Router is available.
               + **gdgw-attachment.is-support**: Whether global DC gateways as attachments are supported.
               + **gdgw-attachment.support-regions**: The list of the regions where global DC gateways are available.
               + **gdgw-attachment.support-sites**: The list of the sites where global DC gateways are available.
               + **er-route-table-attachment.is-support**: Whether The enterprise router route tables as attachments are supported.
               + **er-route-table-attachment.support-regions**: The list of regions where enterprise router route tables can be added
               as attachments.
               + **er-route-table-attachment.support-sites**: The list of sites where enterprise router route tables can be added as
               attachments.
               + **cloud-alliance.support-regions**: The list of regions that support Cloud Alliance.
        :param _builtins.str domain_id: The ID of the account that the central network belongs to.
        :param _builtins.str specifications: The specifications of the central network capability.
        """
        pulumi.set(__self__, "capability", capability)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "specifications", specifications)

    @_builtins.property
    @pulumi.getter
    def capability(self) -> _builtins.str:
        """
        Specifies the capability of the central network.
        The valid values are as follows:
        + **central-network.is-support**: Whether the central network is supported.
        + **central-network.is-support-enterprise-project**: Whether the central network supports enterprise projects.
        + **central-network.is-support-tag**: Whether the central network supports tags.
        + **connection-bandwidth.size-range**: The bandwidth range for a cross-site connection.
        + **connection-bandwidth.charge-mode**: The Billing mode of the global private bandwidth for assigning cross-site
        connection bandwidths.
        + **er-instance.support-regions**: The list of the regions where Enterprise Router is available.
        + **er-instance.support-ipv6-regions**: The list of the regions where Enterprise Router supports IPv6.
        + **er-instance.support-dscp-regions**: The list of the regions that support gold, silver, and bronze global private
        bandwidths.
        + **er-instance.support-sites**: The list of the sites where Enterprise Router is available.
        + **gdgw-attachment.is-support**: Whether global DC gateways as attachments are supported.
        + **gdgw-attachment.support-regions**: The list of the regions where global DC gateways are available.
        + **gdgw-attachment.support-sites**: The list of the sites where global DC gateways are available.
        + **er-route-table-attachment.is-support**: Whether The enterprise router route tables as attachments are supported.
        + **er-route-table-attachment.support-regions**: The list of regions where enterprise router route tables can be added
        as attachments.
        + **er-route-table-attachment.support-sites**: The list of sites where enterprise router route tables can be added as
        attachments.
        + **cloud-alliance.support-regions**: The list of regions that support Cloud Alliance.
        """
        return pulumi.get(self, "capability")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account that the central network belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def specifications(self) -> _builtins.str:
        """
        The specifications of the central network capability.
        """
        return pulumi.get(self, "specifications")


@pulumi.output_type
class GetCentralNetworkConnectionsCentralNetworkConnectionResult(dict):
    def __init__(__self__, *,
                 bandwidth_size: _builtins.int,
                 bandwidth_type: _builtins.str,
                 central_network_id: _builtins.str,
                 central_network_plane_id: _builtins.str,
                 connection_point_pairs: Sequence['outputs.GetCentralNetworkConnectionsCentralNetworkConnectionConnectionPointPairResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 global_connection_bandwidth_id: _builtins.str,
                 id: _builtins.str,
                 is_frozen: _builtins.bool,
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int bandwidth_size: The bandwidth size of the enterprise router connection on the central network.
        :param _builtins.str bandwidth_type: Specifies the bandwidth type of the central network connection.
               The bandwidth types are as follows:
               + **BandwidthPackage**: A global private bandwidth billed by fixed bandwidth is required, and cross-site connection
               bandwidths are assigned from the global private bandwidth.
               + **TestBandwidth**: Only the minimum bandwidth is used for testing cross-region connectivity.
        :param _builtins.str central_network_id: Specifies the central network ID.
        :param _builtins.str central_network_plane_id: The plane ID of the enterprise router connection on the central network.
        :param Sequence['GetCentralNetworkConnectionsCentralNetworkConnectionConnectionPointPairArgs'] connection_point_pairs: The both ends of a central network connection. The length is fixed to an array of 2.
        :param _builtins.str created_at: The creation time. The time is in the **yyyy-MM-ddTHH:mm:ss** format.
        :param _builtins.str description: The central network connection description.
        :param _builtins.str enterprise_project_id: The ID of the enterprise project that the virtual gateway belongs to.
        :param _builtins.str global_connection_bandwidth_id: Specifies the bandwidth package ID of the central network connection.
        :param _builtins.str id: The point ID of a central network connection.
        :param _builtins.bool is_frozen: Whether the central network connection is frozen.
        :param _builtins.str name: The central network connection name.
        :param _builtins.str status: Specifies the central network connection status.
        :param _builtins.str type: Specifies the central network connection type.
        :param _builtins.str updated_at: The update time. The time must be in the **yyyy-MM-ddTHH:mm:ss** format.
        """
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "central_network_plane_id", central_network_plane_id)
        pulumi.set(__self__, "connection_point_pairs", connection_point_pairs)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_frozen", is_frozen)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The bandwidth size of the enterprise router connection on the central network.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        Specifies the bandwidth type of the central network connection.
        The bandwidth types are as follows:
        + **BandwidthPackage**: A global private bandwidth billed by fixed bandwidth is required, and cross-site connection
        bandwidths are assigned from the global private bandwidth.
        + **TestBandwidth**: Only the minimum bandwidth is used for testing cross-region connectivity.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        Specifies the central network ID.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="centralNetworkPlaneId")
    def central_network_plane_id(self) -> _builtins.str:
        """
        The plane ID of the enterprise router connection on the central network.
        """
        return pulumi.get(self, "central_network_plane_id")

    @_builtins.property
    @pulumi.getter(name="connectionPointPairs")
    def connection_point_pairs(self) -> Sequence['outputs.GetCentralNetworkConnectionsCentralNetworkConnectionConnectionPointPairResult']:
        """
        The both ends of a central network connection. The length is fixed to an array of 2.
        """
        return pulumi.get(self, "connection_point_pairs")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time. The time is in the **yyyy-MM-ddTHH:mm:ss** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The central network connection description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The ID of the enterprise project that the virtual gateway belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> _builtins.str:
        """
        Specifies the bandwidth package ID of the central network connection.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The point ID of a central network connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFrozen")
    def is_frozen(self) -> _builtins.bool:
        """
        Whether the central network connection is frozen.
        """
        return pulumi.get(self, "is_frozen")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The central network connection name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the central network connection status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the central network connection type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time. The time must be in the **yyyy-MM-ddTHH:mm:ss** format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCentralNetworkConnectionsCentralNetworkConnectionConnectionPointPairResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 site_code: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: The point ID of a central network connection.
        :param _builtins.str instance_id: The point instance ID of central network connection.
        :param _builtins.str project_id: The point project ID of a central network connection.
        :param _builtins.str region_id: The point region ID of central network connection.
        :param _builtins.str site_code: The site code of the point of central network connection.
        :param _builtins.str type: Specifies the central network connection type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "site_code", site_code)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The point ID of a central network connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The point instance ID of central network connection.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The point project ID of a central network connection.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The point region ID of central network connection.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> _builtins.str:
        """
        The site code of the point of central network connection.
        """
        return pulumi.get(self, "site_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the central network connection type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 central_network_id: _builtins.str,
                 created_at: _builtins.str,
                 document_template_version: _builtins.str,
                 documents: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentResult'],
                 id: _builtins.str,
                 is_applied: _builtins.bool,
                 status: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str central_network_id: Specifies the ID of central network.
        :param _builtins.str created_at: The creation time of the central network policy.
               The time is in the **yyyy-MM-ddTHH:mm:ss** format.
        :param _builtins.str document_template_version: The document template version of the central network policy.
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentArgs'] documents: The document of the central network policy.
        :param _builtins.str id: The ID of the central network policies.
        :param _builtins.bool is_applied: Specifies whether the central network policy is applied or not.
        :param _builtins.str status: Specifies the status of central network policy.
               The valid values can be **AVAILABLE**, **CANCELING**, **APPLYING**, **FAILED** and **DELETED**.
        :param _builtins.int version: The version of the central network policy.
        """
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "document_template_version", document_template_version)
        pulumi.set(__self__, "documents", documents)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_applied", is_applied)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        Specifies the ID of central network.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the central network policy.
        The time is in the **yyyy-MM-ddTHH:mm:ss** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="documentTemplateVersion")
    def document_template_version(self) -> _builtins.str:
        """
        The document template version of the central network policy.
        """
        return pulumi.get(self, "document_template_version")

    @_builtins.property
    @pulumi.getter
    def documents(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentResult']:
        """
        The document of the central network policy.
        """
        return pulumi.get(self, "documents")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the central network policies.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isApplied")
    def is_applied(self) -> _builtins.bool:
        """
        Specifies whether the central network policy is applied or not.
        """
        return pulumi.get(self, "is_applied")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of central network policy.
        The valid values can be **AVAILABLE**, **CANCELING**, **APPLYING**, **FAILED** and **DELETED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the central network policy.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentResult(dict):
    def __init__(__self__, *,
                 default_plane: _builtins.str,
                 er_instances: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentErInstanceResult'],
                 planes: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneResult']):
        """
        :param _builtins.str default_plane: The name of the default central network plane.
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentErInstanceArgs'] er_instances: The list of the enterprise routers instances.
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneArgs'] planes: The list of the central network planes.
        """
        pulumi.set(__self__, "default_plane", default_plane)
        pulumi.set(__self__, "er_instances", er_instances)
        pulumi.set(__self__, "planes", planes)

    @_builtins.property
    @pulumi.getter(name="defaultPlane")
    def default_plane(self) -> _builtins.str:
        """
        The name of the default central network plane.
        """
        return pulumi.get(self, "default_plane")

    @_builtins.property
    @pulumi.getter(name="erInstances")
    def er_instances(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentErInstanceResult']:
        """
        The list of the enterprise routers instances.
        """
        return pulumi.get(self, "er_instances")

    @_builtins.property
    @pulumi.getter
    def planes(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneResult']:
        """
        The list of the central network planes.
        """
        return pulumi.get(self, "planes")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentErInstanceResult(dict):
    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: The ID of the enterprise router on the central network.
        :param _builtins.str project_id: The project ID of the enterprise router on the central network.
        :param _builtins.str region_id: The region ID of the enterprise router on the central network.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        The ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneResult(dict):
    def __init__(__self__, *,
                 associate_er_tables: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneAssociateErTableResult'],
                 exclude_er_connections: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneAssociateErTableArgs'] associate_er_tables: The list of the enterprise router tables on the central network.
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionArgs'] exclude_er_connections: The list of the enterprise router connections excluded from the central network policy.
        :param _builtins.str name: The name of the central network plane.
        """
        pulumi.set(__self__, "associate_er_tables", associate_er_tables)
        pulumi.set(__self__, "exclude_er_connections", exclude_er_connections)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="associateErTables")
    def associate_er_tables(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneAssociateErTableResult']:
        """
        The list of the enterprise router tables on the central network.
        """
        return pulumi.get(self, "associate_er_tables")

    @_builtins.property
    @pulumi.getter(name="excludeErConnections")
    def exclude_er_connections(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionResult']:
        """
        The list of the enterprise router connections excluded from the central network policy.
        """
        return pulumi.get(self, "exclude_er_connections")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the central network plane.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneAssociateErTableResult(dict):
    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 enterprise_router_table_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: The ID of the enterprise router on the central network.
        :param _builtins.str enterprise_router_table_id: The ID of the enterprise router table on the central network.
        :param _builtins.str project_id: The project ID of the enterprise router on the central network.
        :param _builtins.str region_id: The region ID of the enterprise router on the central network.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "enterprise_router_table_id", enterprise_router_table_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        The ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterTableId")
    def enterprise_router_table_id(self) -> _builtins.str:
        """
        The ID of the enterprise router table on the central network.
        """
        return pulumi.get(self, "enterprise_router_table_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionResult(dict):
    def __init__(__self__, *,
                 exclude_er_instances: Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionExcludeErInstanceResult']):
        """
        :param Sequence['GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionExcludeErInstanceArgs'] exclude_er_instances: The list of enterprise routers that will not establish a connection.
               The exclude_er_instances structure is the same as `er_instances`.
        """
        pulumi.set(__self__, "exclude_er_instances", exclude_er_instances)

    @_builtins.property
    @pulumi.getter(name="excludeErInstances")
    def exclude_er_instances(self) -> Sequence['outputs.GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionExcludeErInstanceResult']:
        """
        The list of enterprise routers that will not establish a connection.
        The exclude_er_instances structure is the same as `er_instances`.
        """
        return pulumi.get(self, "exclude_er_instances")


@pulumi.output_type
class GetCentralNetworkPoliciesCentralNetworkPolicyDocumentPlaneExcludeErConnectionExcludeErInstanceResult(dict):
    def __init__(__self__, *,
                 enterprise_router_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str enterprise_router_id: The ID of the enterprise router on the central network.
        :param _builtins.str project_id: The project ID of the enterprise router on the central network.
        :param _builtins.str region_id: The region ID of the enterprise router on the central network.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> _builtins.str:
        """
        The ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "enterprise_router_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID of the enterprise router on the central network.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetCentralNetworkPoliciesChangeSetCentralNetworkPolicyChangeSetResult(dict):
    def __init__(__self__, *,
                 change_content: Mapping[str, _builtins.str]):
        """
        :param Mapping[str, _builtins.str] change_content: The central network policy change set content.
        """
        pulumi.set(__self__, "change_content", change_content)

    @_builtins.property
    @pulumi.getter(name="changeContent")
    def change_content(self) -> Mapping[str, _builtins.str]:
        """
        The central network policy change set content.
        """
        return pulumi.get(self, "change_content")


@pulumi.output_type
class GetCentralNetworkQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 quota_key: _builtins.str,
                 quota_limit: _builtins.int,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str quota_key: The central network quota type.
        :param _builtins.int quota_limit: The quota size.
        :param _builtins.str unit: The unit of the quota value.
        :param _builtins.int used: The used quotas.
        """
        pulumi.set(__self__, "quota_key", quota_key)
        pulumi.set(__self__, "quota_limit", quota_limit)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="quotaKey")
    def quota_key(self) -> _builtins.str:
        """
        The central network quota type.
        """
        return pulumi.get(self, "quota_key")

    @_builtins.property
    @pulumi.getter(name="quotaLimit")
    def quota_limit(self) -> _builtins.int:
        """
        The quota size.
        """
        return pulumi.get(self, "quota_limit")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the quota value.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used quotas.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetCentralNetworksCentralNetworkResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 default_plane_id: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 state: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of central network.
        :param _builtins.str default_plane_id: The central network default plane ID.
        :param _builtins.str description: The central network description.
        :param _builtins.str enterprise_project_id: Specifies enterprise project ID to which the central network belongs.
        :param _builtins.str id: The central network ID.
        :param _builtins.str name: Specifies the name of the central network. The name supports fuzzy query.
        :param _builtins.str state: Specifies the status of the central network.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the central network.
        :param _builtins.str updated_at: The update time of central network.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_plane_id", default_plane_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of central network.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultPlaneId")
    def default_plane_id(self) -> _builtins.str:
        """
        The central network default plane ID.
        """
        return pulumi.get(self, "default_plane_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The central network description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies enterprise project ID to which the central network belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The central network ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the central network. The name supports fuzzy query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the status of the central network.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs to associate with the central network.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of central network.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetConnectionRoutesCloudConnectionRouteResult(dict):
    def __init__(__self__, *,
                 cloud_connection_id: _builtins.str,
                 destination: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str cloud_connection_id: Specifies cloud connection ID.
        :param _builtins.str destination: The destination address.
        :param _builtins.str id: The cloud connection route ID.
        :param _builtins.str instance_id: Specifies network instance ID of cloud connection route.
        :param _builtins.str project_id: The project ID of cloud connection route.
        :param _builtins.str region_id: Specifies region ID of cloud connection route.
        :param _builtins.str type: The type of the network instance that the next hop of a route points to.
        """
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> _builtins.str:
        """
        Specifies cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        The destination address.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The cloud connection route ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies network instance ID of cloud connection route.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of cloud connection route.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies region ID of cloud connection route.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the network instance that the next hop of a route points to.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 bandwidth_package_number: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 inter_region_bandwidth_number: _builtins.int,
                 name: _builtins.str,
                 network_instance_number: _builtins.int,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 used_scene: _builtins.str):
        """
        :param _builtins.int bandwidth_package_number: Number of the bandwidth packages bound to the cloud connection.
        :param _builtins.str created_at: Time when the cloud connection was created.
        :param _builtins.str description: Specifies the cloud connection description.
        :param _builtins.str domain_id: ID of the account that the instance belongs to.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str id: Cloud connection ID.
        :param _builtins.int inter_region_bandwidth_number: Number of the inter-region bandwidths configured for the cloud connection.
        :param _builtins.str name: Specifies the cloud connection name.
        :param _builtins.int network_instance_number: Number of the network instances loaded to the cloud connection.
        :param _builtins.str status: Specifies the cloud connection status.
        :param Mapping[str, _builtins.str] tags: Specifies the cloud connection tags.
        :param _builtins.str updated_at: Time when the cloud connection was updated.
        :param _builtins.str used_scene: Specifies the application scenario.
        """
        pulumi.set(__self__, "bandwidth_package_number", bandwidth_package_number)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inter_region_bandwidth_number", inter_region_bandwidth_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_instance_number", network_instance_number)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used_scene", used_scene)

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageNumber")
    def bandwidth_package_number(self) -> _builtins.int:
        """
        Number of the bandwidth packages bound to the cloud connection.
        """
        return pulumi.get(self, "bandwidth_package_number")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the cloud connection was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the cloud connection description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        ID of the account that the instance belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Cloud connection ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interRegionBandwidthNumber")
    def inter_region_bandwidth_number(self) -> _builtins.int:
        """
        Number of the inter-region bandwidths configured for the cloud connection.
        """
        return pulumi.get(self, "inter_region_bandwidth_number")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the cloud connection name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInstanceNumber")
    def network_instance_number(self) -> _builtins.int:
        """
        Number of the network instances loaded to the cloud connection.
        """
        return pulumi.get(self, "network_instance_number")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the cloud connection status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the cloud connection tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the cloud connection was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="usedScene")
    def used_scene(self) -> _builtins.str:
        """
        Specifies the application scenario.
        """
        return pulumi.get(self, "used_scene")


@pulumi.output_type
class GetGlobalConnectionBandwidthLineLevelsLineLevelResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 levels: Sequence[_builtins.str],
                 local_area: _builtins.str,
                 remote_area: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Time when the line was created.
        :param _builtins.str id: The line ID.
        :param Sequence[_builtins.str] levels: Line grade.
               + **Pt**: Platinum.
               + **Ag**: Silver.
        :param _builtins.str local_area: Local access point code included in the line specification.
        :param _builtins.str remote_area: Remote access point code included in the line specification.
        :param _builtins.str updated_at: Time when the line was updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "local_area", local_area)
        pulumi.set(__self__, "remote_area", remote_area)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the line was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The line ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def levels(self) -> Sequence[_builtins.str]:
        """
        Line grade.
        + **Pt**: Platinum.
        + **Ag**: Silver.
        """
        return pulumi.get(self, "levels")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> _builtins.str:
        """
        Local access point code included in the line specification.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> _builtins.str:
        """
        Remote access point code included in the line specification.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the line was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetGlobalConnectionBandwidthSitesSiteInfoResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 group_lists: Sequence['outputs.GetGlobalConnectionBandwidthSitesSiteInfoGroupListResult'],
                 id: _builtins.str,
                 name_cn: _builtins.str,
                 name_en: _builtins.str,
                 public_border_group: _builtins.str,
                 region_id: _builtins.str,
                 service_list: _builtins.str,
                 site_code: _builtins.str,
                 site_type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The site group list description.
        :param Sequence['GetGlobalConnectionBandwidthSitesSiteInfoGroupListArgs'] group_lists: The site group list.
        :param _builtins.str id: The site group list ID.
        :param _builtins.str name_cn: Specifies the site name in Chinese.
        :param _builtins.str name_en: Specifies the site name in English.
        :param _builtins.str public_border_group: Whether the site is a central site or an edge site.
        :param _builtins.str region_id: The site region ID.
        :param _builtins.str service_list: The list of services supported at the site. Multiple services are separated by commas (,).
        :param _builtins.str site_code: Specifies site code.
        :param _builtins.str site_type: Specifies site type.
               + **Area**: a geographic region site.
               + **SubArea**: a region site.
               + **Region**: a multi-city site.
        :param _builtins.str updated_at: The update time.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_lists", group_lists)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name_cn", name_cn)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "service_list", service_list)
        pulumi.set(__self__, "site_code", site_code)
        pulumi.set(__self__, "site_type", site_type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The site group list description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupLists")
    def group_lists(self) -> Sequence['outputs.GetGlobalConnectionBandwidthSitesSiteInfoGroupListResult']:
        """
        The site group list.
        """
        return pulumi.get(self, "group_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The site group list ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameCn")
    def name_cn(self) -> _builtins.str:
        """
        Specifies the site name in Chinese.
        """
        return pulumi.get(self, "name_cn")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Specifies the site name in English.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Whether the site is a central site or an edge site.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The site region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="serviceList")
    def service_list(self) -> _builtins.str:
        """
        The list of services supported at the site. Multiple services are separated by commas (,).
        """
        return pulumi.get(self, "service_list")

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> _builtins.str:
        """
        Specifies site code.
        """
        return pulumi.get(self, "site_code")

    @_builtins.property
    @pulumi.getter(name="siteType")
    def site_type(self) -> _builtins.str:
        """
        Specifies site type.
        + **Area**: a geographic region site.
        + **SubArea**: a region site.
        + **Region**: a multi-city site.
        """
        return pulumi.get(self, "site_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetGlobalConnectionBandwidthSitesSiteInfoGroupListResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 name_cn: _builtins.str,
                 name_en: _builtins.str):
        """
        :param _builtins.str description: The site group list description.
        :param _builtins.str id: The site group list ID.
        :param _builtins.str name_cn: Specifies the site name in Chinese.
        :param _builtins.str name_en: Specifies the site name in English.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name_cn", name_cn)
        pulumi.set(__self__, "name_en", name_en)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The site group list description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The site group list ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameCn")
    def name_cn(self) -> _builtins.str:
        """
        Specifies the site name in Chinese.
        """
        return pulumi.get(self, "name_cn")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Specifies the site name in English.
        """
        return pulumi.get(self, "name_en")


@pulumi.output_type
class GetGlobalConnectionBandwidthSpecCodesSpecCodeResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 level: _builtins.str,
                 local_area: _builtins.str,
                 name_en: _builtins.str,
                 name_zh: _builtins.str,
                 remote_area: _builtins.str,
                 size: _builtins.int,
                 sku: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str id: Line specification ID.
        :param _builtins.str level: Line grade.
               The valid values are as follows:
               + **Pt**: platinum.
               + **Au**: gold.
               + **Ag**: silver.
        :param _builtins.str local_area: Local access point included in the line specification.
        :param _builtins.str name_en: Line specification in English.
        :param _builtins.str name_zh: Line specification in Chinese.
        :param _builtins.str remote_area: Remote access point included in the line specification.
        :param _builtins.int size: Minimum bandwidth for sale, in Mbit/s.
        :param _builtins.str sku: Product code of specific global connection bandwidth line specifications.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "local_area", local_area)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "name_zh", name_zh)
        pulumi.set(__self__, "remote_area", remote_area)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Line specification ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Line grade.
        The valid values are as follows:
        + **Pt**: platinum.
        + **Au**: gold.
        + **Ag**: silver.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> _builtins.str:
        """
        Local access point included in the line specification.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Line specification in English.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> _builtins.str:
        """
        Line specification in Chinese.
        """
        return pulumi.get(self, "name_zh")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> _builtins.str:
        """
        Remote access point included in the line specification.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Minimum bandwidth for sale, in Mbit/s.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> _builtins.str:
        """
        Product code of specific global connection bandwidth line specifications.
        """
        return pulumi.get(self, "sku")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetGlobalConnectionBandwidthsGlobalconnectionBandwidthResult(dict):
    def __init__(__self__, *,
                 admin_state: _builtins.str,
                 binding_service: _builtins.str,
                 bordercross: _builtins.bool,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enable_share: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 frozen: _builtins.bool,
                 id: _builtins.str,
                 instances: Sequence['outputs.GetGlobalConnectionBandwidthsGlobalconnectionBandwidthInstanceResult'],
                 local_area: _builtins.str,
                 local_site_code: _builtins.str,
                 name: _builtins.str,
                 remote_area: _builtins.str,
                 remote_site_code: _builtins.str,
                 size: _builtins.int,
                 sla_level: _builtins.str,
                 spec_code_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str admin_state: Specifies the status of the global connection bandwidth.
               Value options are as follows:
               + **NORMAL**: The global connection bandwidth is available.
               + **FREEZED**: The global connection bandwidth is frozen.
        :param _builtins.str binding_service: Specifies the binding service.
               Value options are as follows:
               + **Cloud Connect**: cloud connection.
               + **GEIP**: Global EIP.
               + **GCN**: central network.
               + **GSN**: site network.
        :param _builtins.bool bordercross: Whether the global connection bandwidth is used for cross-border communications.
        :param _builtins.str charge_mode: Specifies the billing option.
               Value options are as follows:
               + **bwd**: billing by bandwidth
               + **95**: standard 95th percentile bandwidth billing
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str description: Resource description.
        :param _builtins.str domain_id: ID of the account that the resource belongs to.
        :param _builtins.bool enable_share: Whether a global connection bandwidth can be used by multiple instances.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.bool frozen: Whether a global connection bandwidth is frozen.
        :param _builtins.str id: Bound instance ID.
        :param Sequence['GetGlobalConnectionBandwidthsGlobalconnectionBandwidthInstanceArgs'] instances: The list of instances that the global connection bandwidth is bound to.
               The instances structure is documented below.
        :param _builtins.str local_area: Name of a local access point.
        :param _builtins.str local_site_code: Code of the local access point.
        :param _builtins.str name: Specifies the resource name.
        :param _builtins.str remote_area: Name of a remote access point.
        :param _builtins.str remote_site_code: Code of the remote access point.
        :param _builtins.int size: Specifies the bandwidth range.
               Bandwidth range: `2` Mbit/s to `300` Mbit/s.
        :param _builtins.str sla_level: Class of a global connection bandwidth.
        :param _builtins.str spec_code_id: UUID of a line specification code.
        :param Mapping[str, _builtins.str] tags: Specifies tags.
        :param _builtins.str type: Specifies the type of a global connection bandwidth.
               Value options are as follows:
               + **TrsArea**: cross-geographic-region bandwidth.
               + **Area**: geographic-region bandwidth.
               + **SubArea**: region bandwidth.
               + **Region** : multi-city bandwidth.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "admin_state", admin_state)
        pulumi.set(__self__, "binding_service", binding_service)
        pulumi.set(__self__, "bordercross", bordercross)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enable_share", enable_share)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "frozen", frozen)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "local_area", local_area)
        pulumi.set(__self__, "local_site_code", local_site_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_area", remote_area)
        pulumi.set(__self__, "remote_site_code", remote_site_code)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sla_level", sla_level)
        pulumi.set(__self__, "spec_code_id", spec_code_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> _builtins.str:
        """
        Specifies the status of the global connection bandwidth.
        Value options are as follows:
        + **NORMAL**: The global connection bandwidth is available.
        + **FREEZED**: The global connection bandwidth is frozen.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bindingService")
    def binding_service(self) -> _builtins.str:
        """
        Specifies the binding service.
        Value options are as follows:
        + **Cloud Connect**: cloud connection.
        + **GEIP**: Global EIP.
        + **GCN**: central network.
        + **GSN**: site network.
        """
        return pulumi.get(self, "binding_service")

    @_builtins.property
    @pulumi.getter
    def bordercross(self) -> _builtins.bool:
        """
        Whether the global connection bandwidth is used for cross-border communications.
        """
        return pulumi.get(self, "bordercross")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Specifies the billing option.
        Value options are as follows:
        + **bwd**: billing by bandwidth
        + **95**: standard 95th percentile bandwidth billing
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Resource description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        ID of the account that the resource belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enableShare")
    def enable_share(self) -> _builtins.bool:
        """
        Whether a global connection bandwidth can be used by multiple instances.
        """
        return pulumi.get(self, "enable_share")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> _builtins.bool:
        """
        Whether a global connection bandwidth is frozen.
        """
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Bound instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetGlobalConnectionBandwidthsGlobalconnectionBandwidthInstanceResult']:
        """
        The list of instances that the global connection bandwidth is bound to.
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> _builtins.str:
        """
        Name of a local access point.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter(name="localSiteCode")
    def local_site_code(self) -> _builtins.str:
        """
        Code of the local access point.
        """
        return pulumi.get(self, "local_site_code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> _builtins.str:
        """
        Name of a remote access point.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter(name="remoteSiteCode")
    def remote_site_code(self) -> _builtins.str:
        """
        Code of the remote access point.
        """
        return pulumi.get(self, "remote_site_code")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the bandwidth range.
        Bandwidth range: `2` Mbit/s to `300` Mbit/s.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="slaLevel")
    def sla_level(self) -> _builtins.str:
        """
        Class of a global connection bandwidth.
        """
        return pulumi.get(self, "sla_level")

    @_builtins.property
    @pulumi.getter(name="specCodeId")
    def spec_code_id(self) -> _builtins.str:
        """
        UUID of a line specification code.
        """
        return pulumi.get(self, "spec_code_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of a global connection bandwidth.
        Value options are as follows:
        + **TrsArea**: cross-geographic-region bandwidth.
        + **Area**: geographic-region bandwidth.
        + **SubArea**: region bandwidth.
        + **Region** : multi-city bandwidth.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetGlobalConnectionBandwidthsGlobalconnectionBandwidthInstanceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Bound instance ID.
        :param _builtins.str project_id: Project ID of the bound instance.
        :param _builtins.str region_id: Region of the bound instance. The default value is **global** for global services.
        :param _builtins.str type: Specifies the type of a global connection bandwidth.
               Value options are as follows:
               + **TrsArea**: cross-geographic-region bandwidth.
               + **Area**: geographic-region bandwidth.
               + **SubArea**: region bandwidth.
               + **Region** : multi-city bandwidth.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Bound instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID of the bound instance.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region of the bound instance. The default value is **global** for global services.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of a global connection bandwidth.
        Value options are as follows:
        + **TrsArea**: cross-geographic-region bandwidth.
        + **Area**: geographic-region bandwidth.
        + **SubArea**: region bandwidth.
        + **Region** : multi-city bandwidth.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInterRegionBandwidthsInterRegionBandwidthResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 bandwidth_package_id: _builtins.str,
                 cloud_connection_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 inter_regions: Sequence['outputs.GetInterRegionBandwidthsInterRegionBandwidthInterRegionResult'],
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int bandwidth: The range of an inter-region bandwidth.
        :param _builtins.str bandwidth_package_id: Specifies the bandwidth package ID.
        :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The inter-region bandwidth description.
        :param _builtins.str id: The inter-region ID.
        :param Sequence['GetInterRegionBandwidthsInterRegionBandwidthInterRegionArgs'] inter_regions: The inter-region bandwidth details.
        :param _builtins.str name: The inter-region bandwidth name.
        :param _builtins.str updated_at: The update time.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inter_regions", inter_regions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        The range of an inter-region bandwidth.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> _builtins.str:
        """
        Specifies the bandwidth package ID.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> _builtins.str:
        """
        Specifies the cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The inter-region bandwidth description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The inter-region ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interRegions")
    def inter_regions(self) -> Sequence['outputs.GetInterRegionBandwidthsInterRegionBandwidthInterRegionResult']:
        """
        The inter-region bandwidth details.
        """
        return pulumi.get(self, "inter_regions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The inter-region bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetInterRegionBandwidthsInterRegionBandwidthInterRegionResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 local_region_id: _builtins.str,
                 project_id: _builtins.str,
                 remote_region_id: _builtins.str):
        """
        :param _builtins.str id: The inter-region ID.
        :param _builtins.str local_region_id: The ID of one region where an inter-region bandwidth is used.
        :param _builtins.str project_id: The project ID of a region where the inter-region bandwidth is used.
        :param _builtins.str remote_region_id: The ID of another region where an inter-region bandwidth is used.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_region_id", local_region_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "remote_region_id", remote_region_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The inter-region ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localRegionId")
    def local_region_id(self) -> _builtins.str:
        """
        The ID of one region where an inter-region bandwidth is used.
        """
        return pulumi.get(self, "local_region_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of a region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="remoteRegionId")
    def remote_region_id(self) -> _builtins.str:
        """
        The ID of another region where an inter-region bandwidth is used.
        """
        return pulumi.get(self, "remote_region_id")


@pulumi.output_type
class GetNetworkInstancesNetworkInstanceResult(dict):
    def __init__(__self__, *,
                 cidrs: Sequence[_builtins.str],
                 cloud_connection_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 instance_domain_id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence[_builtins.str] cidrs: The list of routes advertised by the network instance.
        :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
        :param _builtins.str created_at: Time when the network instance was created.
        :param _builtins.str description: Specifies the network instance description.
        :param _builtins.str domain_id: ID of the account that the network instance belongs to.
        :param _builtins.str id: Network instance ID.
        :param _builtins.str instance_domain_id: Account ID of the VPC or virtual gateway.
        :param _builtins.str instance_id: Specifies the ID of the VPC or virtual gateway to be loaded to the cloud connection.
        :param _builtins.str name: Specifies the network instance name.
        :param _builtins.str project_id: Project ID of the network instance.
        :param _builtins.str region_id: Specifies the region ID of the network instance.
        :param _builtins.str status: Specifies the status of the network instance.
               The options are as follows:
               + **ACTIVE**: The network instance is available.
               + **PENDING**: The network instance is being processed.
               + **ERROR**: The processing failed.
        :param _builtins.str type: Specifies the type of the network instance.
               Value options are as follows:
               + **vpc**: a VPC.
               + **vgw**: a virtual gateway.
        :param _builtins.str updated_at: Time when the network instance was updated.
        """
        pulumi.set(__self__, "cidrs", cidrs)
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_domain_id", instance_domain_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def cidrs(self) -> Sequence[_builtins.str]:
        """
        The list of routes advertised by the network instance.
        """
        return pulumi.get(self, "cidrs")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> _builtins.str:
        """
        Specifies the cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the network instance was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the network instance description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        ID of the account that the network instance belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Network instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceDomainId")
    def instance_domain_id(self) -> _builtins.str:
        """
        Account ID of the VPC or virtual gateway.
        """
        return pulumi.get(self, "instance_domain_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC or virtual gateway to be loaded to the cloud connection.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the network instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID of the network instance.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region ID of the network instance.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the network instance.
        The options are as follows:
        + **ACTIVE**: The network instance is available.
        + **PENDING**: The network instance is being processed.
        + **ERROR**: The processing failed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the network instance.
        Value options are as follows:
        + **vpc**: a VPC.
        + **vgw**: a virtual gateway.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the network instance was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPermissionsPermissionResult(dict):
    def __init__(__self__, *,
                 cloud_connection_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 instance_domain_id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: Specifies the permission description.
        :param _builtins.str domain_id: The account ID to which the authorized instance belongs.
        :param _builtins.str id: The authorized instance ID.
        :param _builtins.str instance_domain_id: The account ID of the network instance that another account allows you to use.
        :param _builtins.str instance_id: Specifies the network instance ID.
        :param _builtins.str instance_type: The type of the network instance that another account allows you to use.
        :param _builtins.str name: Specifies the permission name.
        :param _builtins.str project_id: The project ID to which the authorized instance belongs.
        :param _builtins.str region_id: The region ID to which the authorized instance belongs.
        :param _builtins.str status: The authorized instance status.
        """
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_domain_id", instance_domain_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> _builtins.str:
        """
        Specifies the cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the permission description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The account ID to which the authorized instance belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The authorized instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceDomainId")
    def instance_domain_id(self) -> _builtins.str:
        """
        The account ID of the network instance that another account allows you to use.
        """
        return pulumi.get(self, "instance_domain_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the network instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        The type of the network instance that another account allows you to use.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the permission name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID to which the authorized instance belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID to which the authorized instance belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The authorized instance status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSupportBindingGlobalConnectionBandwidthsGlobalconnectionBandwidthResult(dict):
    def __init__(__self__, *,
                 admin_state: _builtins.str,
                 binding_service: _builtins.str,
                 bordercross: _builtins.bool,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enable_share: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 frozen: _builtins.bool,
                 id: _builtins.str,
                 local_area: _builtins.str,
                 local_site_code: _builtins.str,
                 name: _builtins.str,
                 remote_area: _builtins.str,
                 remote_site_code: _builtins.str,
                 size: _builtins.int,
                 sla_level: _builtins.str,
                 spec_code_id: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str admin_state: Specifies the global connection bandwidth status.
               The valid values are as follows:
               + **NORMAL**: The bandwidth is normal.
               + **FREEZED**: The bandwidth is frozen.
        :param _builtins.str binding_service: Specifies the binding service.
               The valid values are as follows:
               + **CC**: cloud connection.
               + **GEIP**: global EIP.
               + **GCN**: central network.
               + **GSN**: site network.
        :param _builtins.bool bordercross: Whether the global connection bandwidth is used for cross-border communications.
        :param _builtins.str charge_mode: Specifies the billing option.
               The valid values are as follows:
               + **bwd**: billing by bandwidth.
               + **95**: standard 95th percentile bandwidth billing.
        :param _builtins.str created_at: Time when the resource was created.
        :param _builtins.str description: The global connection bandwidth description.
        :param _builtins.str domain_id: The ID of the account that the global connection bandwidth belongs to.
        :param _builtins.bool enable_share: Whether a global connection bandwidth can be used by multiple instances.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.bool frozen: Whether a global connection bandwidth is frozen.
        :param _builtins.str id: The global connection bandwidth ID.
        :param _builtins.str local_area: Specifies the local access point.
               If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
               This field is not matched for filtering. For other types, this field is used to match **local_area** of the backbone bandwidth.
        :param _builtins.str local_site_code: The code of the local access point.
        :param _builtins.str name: Specifies the global connection bandwidth name.
        :param _builtins.str remote_area: Specifies the remote access point.
               If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
               This field is not matched for filtering. For other types, this field is used to match **remote_area** of the backbone bandwidth.
        :param _builtins.str remote_site_code: The code of the remote access point.
        :param _builtins.int size: Specifies the global connection bandwidth size.
        :param _builtins.str sla_level: Specifies the class of a global connection bandwidth.
               The valid values are as follows:
               + **Pt**: platinum.
               + **Au**: gold.
               + **Ag**: silver.
        :param _builtins.str spec_code_id: The UUID of a line specification code.
        :param _builtins.str type: Specifies the global connection bandwidth type.
               The valid values are as follows:
               + **TrsArea**: cross-geographic-region bandwidth.
               + **Area**: geographic-region bandwidth.
               + **SubArea**: region bandwidth.
               + **Region**: multi-city bandwidth.
        :param _builtins.str updated_at: Time when the resource was updated.
        """
        pulumi.set(__self__, "admin_state", admin_state)
        pulumi.set(__self__, "binding_service", binding_service)
        pulumi.set(__self__, "bordercross", bordercross)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enable_share", enable_share)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "frozen", frozen)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_area", local_area)
        pulumi.set(__self__, "local_site_code", local_site_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_area", remote_area)
        pulumi.set(__self__, "remote_site_code", remote_site_code)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sla_level", sla_level)
        pulumi.set(__self__, "spec_code_id", spec_code_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> _builtins.str:
        """
        Specifies the global connection bandwidth status.
        The valid values are as follows:
        + **NORMAL**: The bandwidth is normal.
        + **FREEZED**: The bandwidth is frozen.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bindingService")
    def binding_service(self) -> _builtins.str:
        """
        Specifies the binding service.
        The valid values are as follows:
        + **CC**: cloud connection.
        + **GEIP**: global EIP.
        + **GCN**: central network.
        + **GSN**: site network.
        """
        return pulumi.get(self, "binding_service")

    @_builtins.property
    @pulumi.getter
    def bordercross(self) -> _builtins.bool:
        """
        Whether the global connection bandwidth is used for cross-border communications.
        """
        return pulumi.get(self, "bordercross")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Specifies the billing option.
        The valid values are as follows:
        + **bwd**: billing by bandwidth.
        + **95**: standard 95th percentile bandwidth billing.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The global connection bandwidth description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account that the global connection bandwidth belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enableShare")
    def enable_share(self) -> _builtins.bool:
        """
        Whether a global connection bandwidth can be used by multiple instances.
        """
        return pulumi.get(self, "enable_share")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> _builtins.bool:
        """
        Whether a global connection bandwidth is frozen.
        """
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The global connection bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> _builtins.str:
        """
        Specifies the local access point.
        If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
        This field is not matched for filtering. For other types, this field is used to match **local_area** of the backbone bandwidth.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter(name="localSiteCode")
    def local_site_code(self) -> _builtins.str:
        """
        The code of the local access point.
        """
        return pulumi.get(self, "local_site_code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the global connection bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> _builtins.str:
        """
        Specifies the remote access point.
        If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
        This field is not matched for filtering. For other types, this field is used to match **remote_area** of the backbone bandwidth.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter(name="remoteSiteCode")
    def remote_site_code(self) -> _builtins.str:
        """
        The code of the remote access point.
        """
        return pulumi.get(self, "remote_site_code")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the global connection bandwidth size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="slaLevel")
    def sla_level(self) -> _builtins.str:
        """
        Specifies the class of a global connection bandwidth.
        The valid values are as follows:
        + **Pt**: platinum.
        + **Au**: gold.
        + **Ag**: silver.
        """
        return pulumi.get(self, "sla_level")

    @_builtins.property
    @pulumi.getter(name="specCodeId")
    def spec_code_id(self) -> _builtins.str:
        """
        The UUID of a line specification code.
        """
        return pulumi.get(self, "spec_code_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the global connection bandwidth type.
        The valid values are as follows:
        + **TrsArea**: cross-geographic-region bandwidth.
        + **Area**: geographic-region bandwidth.
        + **SubArea**: region bandwidth.
        + **Region**: multi-city bandwidth.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the resource was updated.
        """
        return pulumi.get(self, "updated_at")


