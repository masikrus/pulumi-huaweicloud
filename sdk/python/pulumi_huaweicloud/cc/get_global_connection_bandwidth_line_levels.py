# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalConnectionBandwidthLineLevelsResult',
    'AwaitableGetGlobalConnectionBandwidthLineLevelsResult',
    'get_global_connection_bandwidth_line_levels',
    'get_global_connection_bandwidth_line_levels_output',
]

@pulumi.output_type
class GetGlobalConnectionBandwidthLineLevelsResult:
    """
    A collection of values returned by getGlobalConnectionBandwidthLineLevels.
    """
    def __init__(__self__, id=None, levels=None, line_id=None, line_levels=None, local_area=None, region=None, remote_area=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if levels and not isinstance(levels, str):
            raise TypeError("Expected argument 'levels' to be a str")
        pulumi.set(__self__, "levels", levels)
        if line_id and not isinstance(line_id, str):
            raise TypeError("Expected argument 'line_id' to be a str")
        pulumi.set(__self__, "line_id", line_id)
        if line_levels and not isinstance(line_levels, list):
            raise TypeError("Expected argument 'line_levels' to be a list")
        pulumi.set(__self__, "line_levels", line_levels)
        if local_area and not isinstance(local_area, str):
            raise TypeError("Expected argument 'local_area' to be a str")
        pulumi.set(__self__, "local_area", local_area)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remote_area and not isinstance(remote_area, str):
            raise TypeError("Expected argument 'remote_area' to be a str")
        pulumi.set(__self__, "remote_area", remote_area)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def levels(self) -> Optional[_builtins.str]:
        """
        Line grade.
        """
        return pulumi.get(self, "levels")

    @_builtins.property
    @pulumi.getter(name="lineId")
    def line_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "line_id")

    @_builtins.property
    @pulumi.getter(name="lineLevels")
    def line_levels(self) -> Sequence['outputs.GetGlobalConnectionBandwidthLineLevelsLineLevelResult']:
        """
        The line grade list.
        """
        return pulumi.get(self, "line_levels")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> Optional[_builtins.str]:
        """
        Local access point.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> Optional[_builtins.str]:
        """
        Remote access point.
        """
        return pulumi.get(self, "remote_area")


class AwaitableGetGlobalConnectionBandwidthLineLevelsResult(GetGlobalConnectionBandwidthLineLevelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalConnectionBandwidthLineLevelsResult(
            id=self.id,
            levels=self.levels,
            line_id=self.line_id,
            line_levels=self.line_levels,
            local_area=self.local_area,
            region=self.region,
            remote_area=self.remote_area)


def get_global_connection_bandwidth_line_levels(levels: Optional[_builtins.str] = None,
                                                line_id: Optional[_builtins.str] = None,
                                                local_area: Optional[_builtins.str] = None,
                                                region: Optional[_builtins.str] = None,
                                                remote_area: Optional[_builtins.str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalConnectionBandwidthLineLevelsResult:
    """
    Use this data source to get the list of CC line levels of global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    line_id = config.require_object("lineId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_line_levels(line_id=line_id)
    ```


    :param _builtins.str levels: Line grade.
           + **Pt**: Platinum.
           + **Ag**: Silver.
    :param _builtins.str line_id: Line ID.
    :param _builtins.str local_area: Local access point code included in the line specification.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Remote access point code included in the line specification.
    """
    __args__ = dict()
    __args__['levels'] = levels
    __args__['lineId'] = line_id
    __args__['localArea'] = local_area
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getGlobalConnectionBandwidthLineLevels:getGlobalConnectionBandwidthLineLevels', __args__, opts=opts, typ=GetGlobalConnectionBandwidthLineLevelsResult).value

    return AwaitableGetGlobalConnectionBandwidthLineLevelsResult(
        id=pulumi.get(__ret__, 'id'),
        levels=pulumi.get(__ret__, 'levels'),
        line_id=pulumi.get(__ret__, 'line_id'),
        line_levels=pulumi.get(__ret__, 'line_levels'),
        local_area=pulumi.get(__ret__, 'local_area'),
        region=pulumi.get(__ret__, 'region'),
        remote_area=pulumi.get(__ret__, 'remote_area'))
def get_global_connection_bandwidth_line_levels_output(levels: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       line_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       local_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       remote_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalConnectionBandwidthLineLevelsResult]:
    """
    Use this data source to get the list of CC line levels of global connection bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    line_id = config.require_object("lineId")
    test = huaweicloud.Cc.get_global_connection_bandwidth_line_levels(line_id=line_id)
    ```


    :param _builtins.str levels: Line grade.
           + **Pt**: Platinum.
           + **Ag**: Silver.
    :param _builtins.str line_id: Line ID.
    :param _builtins.str local_area: Local access point code included in the line specification.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Remote access point code included in the line specification.
    """
    __args__ = dict()
    __args__['levels'] = levels
    __args__['lineId'] = line_id
    __args__['localArea'] = local_area
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getGlobalConnectionBandwidthLineLevels:getGlobalConnectionBandwidthLineLevels', __args__, opts=opts, typ=GetGlobalConnectionBandwidthLineLevelsResult)
    return __ret__.apply(lambda __response__: GetGlobalConnectionBandwidthLineLevelsResult(
        id=pulumi.get(__response__, 'id'),
        levels=pulumi.get(__response__, 'levels'),
        line_id=pulumi.get(__response__, 'line_id'),
        line_levels=pulumi.get(__response__, 'line_levels'),
        local_area=pulumi.get(__response__, 'local_area'),
        region=pulumi.get(__response__, 'region'),
        remote_area=pulumi.get(__response__, 'remote_area')))
