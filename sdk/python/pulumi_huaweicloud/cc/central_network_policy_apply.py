# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CentralNetworkPolicyApplyArgs', 'CentralNetworkPolicyApply']

@pulumi.input_type
class CentralNetworkPolicyApplyArgs:
    def __init__(__self__, *,
                 central_network_id: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CentralNetworkPolicyApply resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Policy ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "policy_id", policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Input[_builtins.str]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CentralNetworkPolicyApplyState:
    def __init__(__self__, *,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CentralNetworkPolicyApply resources.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Policy ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if central_network_id is not None:
            pulumi.set(__self__, "central_network_id", central_network_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cc/centralNetworkPolicyApply:CentralNetworkPolicyApply")
class CentralNetworkPolicyApply(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Apply a central network policy of Cloud Connect within HuaweiCloud.
        Only one policy can be applied to a central network. If you need to change the policy, apply a new policy.
        The previously applied policy will be automatically canceled.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        policy_id = config.require_object("policyId")
        test = huaweicloud.cc.CentralNetworkPolicyApply("test",
            central_network_id=central_network_id,
            policy_id=policy_id)
        ```

        ## Import

        The central network policy apply can be imported using `central_network_id` and `policy_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkPolicyApply:CentralNetworkPolicyApply test <central_network_id>/<policy_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Policy ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CentralNetworkPolicyApplyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Apply a central network policy of Cloud Connect within HuaweiCloud.
        Only one policy can be applied to a central network. If you need to change the policy, apply a new policy.
        The previously applied policy will be automatically canceled.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        policy_id = config.require_object("policyId")
        test = huaweicloud.cc.CentralNetworkPolicyApply("test",
            central_network_id=central_network_id,
            policy_id=policy_id)
        ```

        ## Import

        The central network policy apply can be imported using `central_network_id` and `policy_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkPolicyApply:CentralNetworkPolicyApply test <central_network_id>/<policy_id>
        ```

        :param str resource_name: The name of the resource.
        :param CentralNetworkPolicyApplyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralNetworkPolicyApplyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralNetworkPolicyApplyArgs.__new__(CentralNetworkPolicyApplyArgs)

            if central_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'central_network_id'")
            __props__.__dict__["central_network_id"] = central_network_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["region"] = region
        super(CentralNetworkPolicyApply, __self__).__init__(
            'huaweicloud:Cc/centralNetworkPolicyApply:CentralNetworkPolicyApply',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'CentralNetworkPolicyApply':
        """
        Get an existing CentralNetworkPolicyApply resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] central_network_id: Central network ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Policy ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralNetworkPolicyApplyState.__new__(_CentralNetworkPolicyApplyState)

        __props__.__dict__["central_network_id"] = central_network_id
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["region"] = region
        return CentralNetworkPolicyApply(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        Central network ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

