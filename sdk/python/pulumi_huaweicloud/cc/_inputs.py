# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CentralNetworkPolicyErInstanceArgs',
    'CentralNetworkPolicyErInstanceArgsDict',
    'CentralNetworkPolicyPlanesArgs',
    'CentralNetworkPolicyPlanesArgsDict',
    'CentralNetworkPolicyPlanesAssociateErTableArgs',
    'CentralNetworkPolicyPlanesAssociateErTableArgsDict',
    'CentralNetworkPolicyPlanesExcludeErConnectionArgs',
    'CentralNetworkPolicyPlanesExcludeErConnectionArgsDict',
    'CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs',
    'CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgsDict',
    'GlobalConnectionBandwidthAssociateGcbBindingResourceArgs',
    'GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict',
    'GlobalConnectionBandwidthInstanceArgs',
    'GlobalConnectionBandwidthInstanceArgsDict',
    'InterRegionBandwidthInterRegionArgs',
    'InterRegionBandwidthInterRegionArgsDict',
]

MYPY = False

if not MYPY:
    class CentralNetworkPolicyErInstanceArgsDict(TypedDict):
        enterprise_router_id: pulumi.Input[_builtins.str]
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        project_id: pulumi.Input[_builtins.str]
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        region_id: pulumi.Input[_builtins.str]
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
elif False:
    CentralNetworkPolicyErInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralNetworkPolicyErInstanceArgs:
    def __init__(__self__, *,
                 enterprise_router_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @enterprise_router_id.setter
    def enterprise_router_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_router_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)


if not MYPY:
    class CentralNetworkPolicyPlanesArgsDict(TypedDict):
        associate_er_tables: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesAssociateErTableArgsDict']]]
        """
        List of route tables associated with the central network policy.
        The associate_er_tables structure is documented below.
        Changing this parameter will create a new resource.
        """
        exclude_er_connections: NotRequired[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionArgsDict']]]]
        """
        List of the enterprise router connections excluded from the
        central network policy.
        The exclude_er_connections structure is documented below.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_AssociateErTableDocument"></a>
        The `associate_er_tables` block supports:
        """
elif False:
    CentralNetworkPolicyPlanesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralNetworkPolicyPlanesArgs:
    def __init__(__self__, *,
                 associate_er_tables: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesAssociateErTableArgs']]],
                 exclude_er_connections: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesAssociateErTableArgs']]] associate_er_tables: List of route tables associated with the central network policy.
               The associate_er_tables structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionArgs']]] exclude_er_connections: List of the enterprise router connections excluded from the
               central network policy.
               The exclude_er_connections structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="centralNetworkPolicy_AssociateErTableDocument"></a>
               The `associate_er_tables` block supports:
        """
        pulumi.set(__self__, "associate_er_tables", associate_er_tables)
        if exclude_er_connections is not None:
            pulumi.set(__self__, "exclude_er_connections", exclude_er_connections)

    @_builtins.property
    @pulumi.getter(name="associateErTables")
    def associate_er_tables(self) -> pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesAssociateErTableArgs']]]:
        """
        List of route tables associated with the central network policy.
        The associate_er_tables structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "associate_er_tables")

    @associate_er_tables.setter
    def associate_er_tables(self, value: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesAssociateErTableArgs']]]):
        pulumi.set(self, "associate_er_tables", value)

    @_builtins.property
    @pulumi.getter(name="excludeErConnections")
    def exclude_er_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionArgs']]]]:
        """
        List of the enterprise router connections excluded from the
        central network policy.
        The exclude_er_connections structure is documented below.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_AssociateErTableDocument"></a>
        The `associate_er_tables` block supports:
        """
        return pulumi.get(self, "exclude_er_connections")

    @exclude_er_connections.setter
    def exclude_er_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionArgs']]]]):
        pulumi.set(self, "exclude_er_connections", value)


if not MYPY:
    class CentralNetworkPolicyPlanesAssociateErTableArgsDict(TypedDict):
        enterprise_router_id: pulumi.Input[_builtins.str]
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        enterprise_router_table_id: pulumi.Input[_builtins.str]
        """
        Enterprise router table ID.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_ExcludeErConnectionDocument"></a>
        The `exclude_er_connections` block supports:
        """
        project_id: pulumi.Input[_builtins.str]
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        region_id: pulumi.Input[_builtins.str]
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
elif False:
    CentralNetworkPolicyPlanesAssociateErTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralNetworkPolicyPlanesAssociateErTableArgs:
    def __init__(__self__, *,
                 enterprise_router_id: pulumi.Input[_builtins.str],
                 enterprise_router_table_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_router_table_id: Enterprise router table ID.
               Changing this parameter will create a new resource.
               
               <a name="centralNetworkPolicy_ExcludeErConnectionDocument"></a>
               The `exclude_er_connections` block supports:
        :param pulumi.Input[_builtins.str] project_id: Project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "enterprise_router_table_id", enterprise_router_table_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @enterprise_router_id.setter
    def enterprise_router_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_router_id", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterTableId")
    def enterprise_router_table_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise router table ID.
        Changing this parameter will create a new resource.

        <a name="centralNetworkPolicy_ExcludeErConnectionDocument"></a>
        The `exclude_er_connections` block supports:
        """
        return pulumi.get(self, "enterprise_router_table_id")

    @enterprise_router_table_id.setter
    def enterprise_router_table_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_router_table_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)


if not MYPY:
    class CentralNetworkPolicyPlanesExcludeErConnectionArgsDict(TypedDict):
        exclude_er_instances: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgsDict']]]
        """
        List of enterprise routers that will not establish a connection.
        The exclude_er_instances structure is the same as `er_instances`.
        Changing this parameter will create a new resource.
        """
elif False:
    CentralNetworkPolicyPlanesExcludeErConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralNetworkPolicyPlanesExcludeErConnectionArgs:
    def __init__(__self__, *,
                 exclude_er_instances: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs']]] exclude_er_instances: List of enterprise routers that will not establish a connection.
               The exclude_er_instances structure is the same as `er_instances`.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "exclude_er_instances", exclude_er_instances)

    @_builtins.property
    @pulumi.getter(name="excludeErInstances")
    def exclude_er_instances(self) -> pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs']]]:
        """
        List of enterprise routers that will not establish a connection.
        The exclude_er_instances structure is the same as `er_instances`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "exclude_er_instances")

    @exclude_er_instances.setter
    def exclude_er_instances(self, value: pulumi.Input[Sequence[pulumi.Input['CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs']]]):
        pulumi.set(self, "exclude_er_instances", value)


if not MYPY:
    class CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgsDict(TypedDict):
        enterprise_router_id: pulumi.Input[_builtins.str]
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        project_id: pulumi.Input[_builtins.str]
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        region_id: pulumi.Input[_builtins.str]
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
elif False:
    CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralNetworkPolicyPlanesExcludeErConnectionExcludeErInstanceArgs:
    def __init__(__self__, *,
                 enterprise_router_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] enterprise_router_id: Enterprise router ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region_id: Region ID.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_router_id", enterprise_router_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseRouterId")
    def enterprise_router_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise router ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_router_id")

    @enterprise_router_id.setter
    def enterprise_router_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_router_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        Region ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)


if not MYPY:
    class GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        The ID of the resource to associate with the global connection bandwidth.
        """
        resource_type: pulumi.Input[_builtins.str]
        """
        The type of the resource to associate with the global connection bandwidth.
        Currently, only **GEIP** is supported.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The project ID of the resource to associate with the global connection bandwidth.
        """
        region_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The region ID of the resource to associate with the global connection bandwidth.
        If the value of `resource_type` is **GEIP**, the valid value is **global**.
        """
elif False:
    GlobalConnectionBandwidthAssociateGcbBindingResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GlobalConnectionBandwidthAssociateGcbBindingResourceArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_id: The ID of the resource to associate with the global connection bandwidth.
        :param pulumi.Input[_builtins.str] resource_type: The type of the resource to associate with the global connection bandwidth.
               Currently, only **GEIP** is supported.
        :param pulumi.Input[_builtins.str] project_id: The project ID of the resource to associate with the global connection bandwidth.
        :param pulumi.Input[_builtins.str] region_id: The region ID of the resource to associate with the global connection bandwidth.
               If the value of `resource_type` is **GEIP**, the valid value is **global**.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the resource to associate with the global connection bandwidth.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the resource to associate with the global connection bandwidth.
        Currently, only **GEIP** is supported.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project ID of the resource to associate with the global connection bandwidth.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region ID of the resource to associate with the global connection bandwidth.
        If the value of `resource_type` is **GEIP**, the valid value is **global**.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)


if not MYPY:
    class GlobalConnectionBandwidthInstanceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The instance ID.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        The region of the instance.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the GCB type.

        Valid values are as follows:
        + **TrsArea**: Cross geographic region.
        + **Area**: Geographic region.
        + **SubArea**: Homezones region.
        + **Region**: Multi-city region.

        Changing this creates a new resource.
        """
elif False:
    GlobalConnectionBandwidthInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GlobalConnectionBandwidthInstanceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The instance ID.
        :param pulumi.Input[_builtins.str] region: The region of the instance.
        :param pulumi.Input[_builtins.str] type: Specifies the GCB type.
               
               Valid values are as follows:
               + **TrsArea**: Cross geographic region.
               + **Area**: Geographic region.
               + **SubArea**: Homezones region.
               + **Region**: Multi-city region.
               
               Changing this creates a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the GCB type.

        Valid values are as follows:
        + **TrsArea**: Cross geographic region.
        + **Area**: Geographic region.
        + **SubArea**: Homezones region.
        + **Region**: Multi-city region.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InterRegionBandwidthInterRegionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Inter-region bandwidth ID.
        """
        local_region_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        ID of the local region where the inter-region bandwidth is used.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Project ID of a region where the inter-region bandwidth is used.
        """
        remote_region_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        ID of the remote region where the inter-region bandwidth is used.
        """
elif False:
    InterRegionBandwidthInterRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InterRegionBandwidthInterRegionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_region_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Inter-region bandwidth ID.
        :param pulumi.Input[_builtins.str] local_region_id: ID of the local region where the inter-region bandwidth is used.
        :param pulumi.Input[_builtins.str] project_id: Project ID of a region where the inter-region bandwidth is used.
        :param pulumi.Input[_builtins.str] remote_region_id: ID of the remote region where the inter-region bandwidth is used.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_region_id is not None:
            pulumi.set(__self__, "local_region_id", local_region_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remote_region_id is not None:
            pulumi.set(__self__, "remote_region_id", remote_region_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Inter-region bandwidth ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="localRegionId")
    def local_region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the local region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "local_region_id")

    @local_region_id.setter
    def local_region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_region_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project ID of a region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteRegionId")
    def remote_region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the remote region where the inter-region bandwidth is used.
        """
        return pulumi.get(self, "remote_region_id")

    @remote_region_id.setter
    def remote_region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_region_id", value)


