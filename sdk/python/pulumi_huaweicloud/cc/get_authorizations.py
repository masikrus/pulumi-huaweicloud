# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationsResult',
    'AwaitableGetAuthorizationsResult',
    'get_authorizations',
    'get_authorizations_output',
]

@pulumi.output_type
class GetAuthorizationsResult:
    """
    A collection of values returned by getAuthorizations.
    """
    def __init__(__self__, authorization_id=None, authorizations=None, cloud_connection_domain_id=None, cloud_connection_id=None, description=None, id=None, instance_id=None, name=None, region=None):
        if authorization_id and not isinstance(authorization_id, str):
            raise TypeError("Expected argument 'authorization_id' to be a str")
        pulumi.set(__self__, "authorization_id", authorization_id)
        if authorizations and not isinstance(authorizations, list):
            raise TypeError("Expected argument 'authorizations' to be a list")
        pulumi.set(__self__, "authorizations", authorizations)
        if cloud_connection_domain_id and not isinstance(cloud_connection_domain_id, str):
            raise TypeError("Expected argument 'cloud_connection_domain_id' to be a str")
        pulumi.set(__self__, "cloud_connection_domain_id", cloud_connection_domain_id)
        if cloud_connection_id and not isinstance(cloud_connection_id, str):
            raise TypeError("Expected argument 'cloud_connection_id' to be a str")
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authorizationId")
    def authorization_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "authorization_id")

    @_builtins.property
    @pulumi.getter
    def authorizations(self) -> Sequence['outputs.GetAuthorizationsAuthorizationResult']:
        """
        The authorized instances.
        """
        return pulumi.get(self, "authorizations")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionDomainId")
    def cloud_connection_domain_id(self) -> Optional[_builtins.str]:
        """
        The account ID that the cloud connection belongs to.
        """
        return pulumi.get(self, "cloud_connection_domain_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[_builtins.str]:
        """
        The cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the cross-account authorization.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The network instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the cross-account authorization.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAuthorizationsResult(GetAuthorizationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationsResult(
            authorization_id=self.authorization_id,
            authorizations=self.authorizations,
            cloud_connection_domain_id=self.cloud_connection_domain_id,
            cloud_connection_id=self.cloud_connection_id,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region)


def get_authorizations(authorization_id: Optional[_builtins.str] = None,
                       cloud_connection_domain_id: Optional[_builtins.str] = None,
                       cloud_connection_id: Optional[_builtins.str] = None,
                       description: Optional[_builtins.str] = None,
                       instance_id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationsResult:
    """
    Use this data source to get the list of CC authorizations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    authorization_id = config.require_object("authorizationId")
    test = huaweicloud.Cc.get_authorizations(authorization_id=authorization_id)
    ```


    :param _builtins.str authorization_id: Specifies the ID of the cross-account authorization.
    :param _builtins.str cloud_connection_domain_id: Specifies the account ID that the cloud connection belongs to.
    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the description of the cross-account authorization.
    :param _builtins.str instance_id: Specifies the network instance ID.
    :param _builtins.str name: Specifies the name of the cross-account authorization.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['authorizationId'] = authorization_id
    __args__['cloudConnectionDomainId'] = cloud_connection_domain_id
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getAuthorizations:getAuthorizations', __args__, opts=opts, typ=GetAuthorizationsResult).value

    return AwaitableGetAuthorizationsResult(
        authorization_id=pulumi.get(__ret__, 'authorization_id'),
        authorizations=pulumi.get(__ret__, 'authorizations'),
        cloud_connection_domain_id=pulumi.get(__ret__, 'cloud_connection_domain_id'),
        cloud_connection_id=pulumi.get(__ret__, 'cloud_connection_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_authorizations_output(authorization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              cloud_connection_domain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              cloud_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuthorizationsResult]:
    """
    Use this data source to get the list of CC authorizations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    authorization_id = config.require_object("authorizationId")
    test = huaweicloud.Cc.get_authorizations(authorization_id=authorization_id)
    ```


    :param _builtins.str authorization_id: Specifies the ID of the cross-account authorization.
    :param _builtins.str cloud_connection_domain_id: Specifies the account ID that the cloud connection belongs to.
    :param _builtins.str cloud_connection_id: Specifies the cloud connection ID.
    :param _builtins.str description: Specifies the description of the cross-account authorization.
    :param _builtins.str instance_id: Specifies the network instance ID.
    :param _builtins.str name: Specifies the name of the cross-account authorization.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['authorizationId'] = authorization_id
    __args__['cloudConnectionDomainId'] = cloud_connection_domain_id
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getAuthorizations:getAuthorizations', __args__, opts=opts, typ=GetAuthorizationsResult)
    return __ret__.apply(lambda __response__: GetAuthorizationsResult(
        authorization_id=pulumi.get(__response__, 'authorization_id'),
        authorizations=pulumi.get(__response__, 'authorizations'),
        cloud_connection_domain_id=pulumi.get(__response__, 'cloud_connection_domain_id'),
        cloud_connection_id=pulumi.get(__response__, 'cloud_connection_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
