# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSupportBindingGlobalConnectionBandwidthsResult',
    'AwaitableGetSupportBindingGlobalConnectionBandwidthsResult',
    'get_support_binding_global_connection_bandwidths',
    'get_support_binding_global_connection_bandwidths_output',
]

@pulumi.output_type
class GetSupportBindingGlobalConnectionBandwidthsResult:
    """
    A collection of values returned by getSupportBindingGlobalConnectionBandwidths.
    """
    def __init__(__self__, admin_state=None, binding_service=None, charge_mode=None, enterprise_project_id=None, gcb_id=None, globalconnection_bandwidths=None, id=None, local_area=None, name=None, region=None, remote_area=None, size=None, sla_level=None, type=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if binding_service and not isinstance(binding_service, str):
            raise TypeError("Expected argument 'binding_service' to be a str")
        pulumi.set(__self__, "binding_service", binding_service)
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gcb_id and not isinstance(gcb_id, str):
            raise TypeError("Expected argument 'gcb_id' to be a str")
        pulumi.set(__self__, "gcb_id", gcb_id)
        if globalconnection_bandwidths and not isinstance(globalconnection_bandwidths, list):
            raise TypeError("Expected argument 'globalconnection_bandwidths' to be a list")
        pulumi.set(__self__, "globalconnection_bandwidths", globalconnection_bandwidths)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_area and not isinstance(local_area, str):
            raise TypeError("Expected argument 'local_area' to be a str")
        pulumi.set(__self__, "local_area", local_area)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remote_area and not isinstance(remote_area, str):
            raise TypeError("Expected argument 'remote_area' to be a str")
        pulumi.set(__self__, "remote_area", remote_area)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if sla_level and not isinstance(sla_level, str):
            raise TypeError("Expected argument 'sla_level' to be a str")
        pulumi.set(__self__, "sla_level", sla_level)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[_builtins.str]:
        """
        The global connection bandwidth status.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bindingService")
    def binding_service(self) -> _builtins.str:
        """
        The type of the binding service.
        """
        return pulumi.get(self, "binding_service")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The billing option. By default, billing by bandwidth is enabled.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project that the global connection bandwidth belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter(name="globalconnectionBandwidths")
    def globalconnection_bandwidths(self) -> Sequence['outputs.GetSupportBindingGlobalConnectionBandwidthsGlobalconnectionBandwidthResult']:
        """
        The global connection bandwidth list.
        """
        return pulumi.get(self, "globalconnection_bandwidths")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localArea")
    def local_area(self) -> Optional[_builtins.str]:
        """
        The name of a local access point.
        """
        return pulumi.get(self, "local_area")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The global connection bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remoteArea")
    def remote_area(self) -> Optional[_builtins.str]:
        """
        The name of a remote access point.
        """
        return pulumi.get(self, "remote_area")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        The range of a global connection bandwidth, in Mbit/s.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="slaLevel")
    def sla_level(self) -> Optional[_builtins.str]:
        """
        The class of a global connection bandwidth.
        """
        return pulumi.get(self, "sla_level")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of a global connection bandwidth.
        """
        return pulumi.get(self, "type")


class AwaitableGetSupportBindingGlobalConnectionBandwidthsResult(GetSupportBindingGlobalConnectionBandwidthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSupportBindingGlobalConnectionBandwidthsResult(
            admin_state=self.admin_state,
            binding_service=self.binding_service,
            charge_mode=self.charge_mode,
            enterprise_project_id=self.enterprise_project_id,
            gcb_id=self.gcb_id,
            globalconnection_bandwidths=self.globalconnection_bandwidths,
            id=self.id,
            local_area=self.local_area,
            name=self.name,
            region=self.region,
            remote_area=self.remote_area,
            size=self.size,
            sla_level=self.sla_level,
            type=self.type)


def get_support_binding_global_connection_bandwidths(admin_state: Optional[_builtins.str] = None,
                                                     binding_service: Optional[_builtins.str] = None,
                                                     charge_mode: Optional[_builtins.str] = None,
                                                     enterprise_project_id: Optional[_builtins.str] = None,
                                                     gcb_id: Optional[_builtins.str] = None,
                                                     local_area: Optional[_builtins.str] = None,
                                                     name: Optional[_builtins.str] = None,
                                                     region: Optional[_builtins.str] = None,
                                                     remote_area: Optional[_builtins.str] = None,
                                                     size: Optional[_builtins.int] = None,
                                                     sla_level: Optional[_builtins.str] = None,
                                                     type: Optional[_builtins.str] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSupportBindingGlobalConnectionBandwidthsResult:
    """
    Use this data source to get the list of CC global connection bandwidths which support binding.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    binding_service = config.require_object("bindingService")
    test = huaweicloud.Cc.get_support_binding_global_connection_bandwidths(binding_service=binding_service)
    ```


    :param _builtins.str admin_state: Specifies the global connection bandwidth status.
           The valid values are as follows:
           + **NORMAL**: The bandwidth is normal.
           + **FREEZED**: The bandwidth is frozen.
    :param _builtins.str binding_service: Specifies the binding service.
           The valid values are as follows:
           + **CC**: cloud connection.
           + **GEIP**: global EIP.
           + **GCN**: central network.
           + **GSN**: site network.
    :param _builtins.str charge_mode: Specifies the billing option.
           The valid values are as follows:
           + **bwd**: billing by bandwidth.
           + **95**: standard 95th percentile bandwidth billing.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str gcb_id: Specifies the global connection bandwidth ID.
    :param _builtins.str local_area: Specifies the local access point.
           If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
           This field is not matched for filtering. For other types, this field is used to match **local_area** of the backbone bandwidth.
    :param _builtins.str name: Specifies the global connection bandwidth name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Specifies the remote access point.
           If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
           This field is not matched for filtering. For other types, this field is used to match **remote_area** of the backbone bandwidth.
    :param _builtins.int size: Specifies the global connection bandwidth size.
    :param _builtins.str sla_level: Specifies the class of a global connection bandwidth.
           The valid values are as follows:
           + **Pt**: platinum.
           + **Au**: gold.
           + **Ag**: silver.
    :param _builtins.str type: Specifies the global connection bandwidth type.
           The valid values are as follows:
           + **TrsArea**: cross-geographic-region bandwidth.
           + **Area**: geographic-region bandwidth.
           + **SubArea**: region bandwidth.
           + **Region**: multi-city bandwidth.
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bindingService'] = binding_service
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gcbId'] = gcb_id
    __args__['localArea'] = local_area
    __args__['name'] = name
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    __args__['size'] = size
    __args__['slaLevel'] = sla_level
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getSupportBindingGlobalConnectionBandwidths:getSupportBindingGlobalConnectionBandwidths', __args__, opts=opts, typ=GetSupportBindingGlobalConnectionBandwidthsResult).value

    return AwaitableGetSupportBindingGlobalConnectionBandwidthsResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        binding_service=pulumi.get(__ret__, 'binding_service'),
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gcb_id=pulumi.get(__ret__, 'gcb_id'),
        globalconnection_bandwidths=pulumi.get(__ret__, 'globalconnection_bandwidths'),
        id=pulumi.get(__ret__, 'id'),
        local_area=pulumi.get(__ret__, 'local_area'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        remote_area=pulumi.get(__ret__, 'remote_area'),
        size=pulumi.get(__ret__, 'size'),
        sla_level=pulumi.get(__ret__, 'sla_level'),
        type=pulumi.get(__ret__, 'type'))
def get_support_binding_global_connection_bandwidths_output(admin_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            binding_service: Optional[pulumi.Input[_builtins.str]] = None,
                                                            charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            gcb_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            local_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            remote_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            size: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                            sla_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSupportBindingGlobalConnectionBandwidthsResult]:
    """
    Use this data source to get the list of CC global connection bandwidths which support binding.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    binding_service = config.require_object("bindingService")
    test = huaweicloud.Cc.get_support_binding_global_connection_bandwidths(binding_service=binding_service)
    ```


    :param _builtins.str admin_state: Specifies the global connection bandwidth status.
           The valid values are as follows:
           + **NORMAL**: The bandwidth is normal.
           + **FREEZED**: The bandwidth is frozen.
    :param _builtins.str binding_service: Specifies the binding service.
           The valid values are as follows:
           + **CC**: cloud connection.
           + **GEIP**: global EIP.
           + **GCN**: central network.
           + **GSN**: site network.
    :param _builtins.str charge_mode: Specifies the billing option.
           The valid values are as follows:
           + **bwd**: billing by bandwidth.
           + **95**: standard 95th percentile bandwidth billing.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str gcb_id: Specifies the global connection bandwidth ID.
    :param _builtins.str local_area: Specifies the local access point.
           If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
           This field is not matched for filtering. For other types, this field is used to match **local_area** of the backbone bandwidth.
    :param _builtins.str name: Specifies the global connection bandwidth name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str remote_area: Specifies the remote access point.
           If the bandwidth type is set to **region**, all multi-city bandwidths that meet the filtering criteria are returned.
           This field is not matched for filtering. For other types, this field is used to match **remote_area** of the backbone bandwidth.
    :param _builtins.int size: Specifies the global connection bandwidth size.
    :param _builtins.str sla_level: Specifies the class of a global connection bandwidth.
           The valid values are as follows:
           + **Pt**: platinum.
           + **Au**: gold.
           + **Ag**: silver.
    :param _builtins.str type: Specifies the global connection bandwidth type.
           The valid values are as follows:
           + **TrsArea**: cross-geographic-region bandwidth.
           + **Area**: geographic-region bandwidth.
           + **SubArea**: region bandwidth.
           + **Region**: multi-city bandwidth.
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bindingService'] = binding_service
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gcbId'] = gcb_id
    __args__['localArea'] = local_area
    __args__['name'] = name
    __args__['region'] = region
    __args__['remoteArea'] = remote_area
    __args__['size'] = size
    __args__['slaLevel'] = sla_level
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getSupportBindingGlobalConnectionBandwidths:getSupportBindingGlobalConnectionBandwidths', __args__, opts=opts, typ=GetSupportBindingGlobalConnectionBandwidthsResult)
    return __ret__.apply(lambda __response__: GetSupportBindingGlobalConnectionBandwidthsResult(
        admin_state=pulumi.get(__response__, 'admin_state'),
        binding_service=pulumi.get(__response__, 'binding_service'),
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gcb_id=pulumi.get(__response__, 'gcb_id'),
        globalconnection_bandwidths=pulumi.get(__response__, 'globalconnection_bandwidths'),
        id=pulumi.get(__response__, 'id'),
        local_area=pulumi.get(__response__, 'local_area'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        remote_area=pulumi.get(__response__, 'remote_area'),
        size=pulumi.get(__response__, 'size'),
        sla_level=pulumi.get(__response__, 'sla_level'),
        type=pulumi.get(__response__, 'type')))
