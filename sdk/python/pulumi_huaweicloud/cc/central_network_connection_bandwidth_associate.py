# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CentralNetworkConnectionBandwidthAssociateArgs', 'CentralNetworkConnectionBandwidthAssociate']

@pulumi.input_type
class CentralNetworkConnectionBandwidthAssociateArgs:
    def __init__(__self__, *,
                 bandwidth_size: pulumi.Input[_builtins.int],
                 central_network_id: pulumi.Input[_builtins.str],
                 connection_id: pulumi.Input[_builtins.str],
                 global_connection_bandwidth_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CentralNetworkConnectionBandwidthAssociate resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: The bandwidth size of the connection.
        :param pulumi.Input[_builtins.str] central_network_id: The ID of the central network to which the connection belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] connection_id: The ID of the connection.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "central_network_id", central_network_id)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> pulumi.Input[_builtins.int]:
        """
        The bandwidth size of the connection.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the central network to which the connection belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the connection.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @global_connection_bandwidth_id.setter
    def global_connection_bandwidth_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "global_connection_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CentralNetworkConnectionBandwidthAssociateState:
    def __init__(__self__, *,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CentralNetworkConnectionBandwidthAssociate resources.
        :param pulumi.Input[_builtins.int] bandwidth_size: The bandwidth size of the connection.
        :param pulumi.Input[_builtins.str] central_network_id: The ID of the central network to which the connection belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] connection_id: The ID of the connection.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if central_network_id is not None:
            pulumi.set(__self__, "central_network_id", central_network_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if global_connection_bandwidth_id is not None:
            pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The bandwidth size of the connection.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the central network to which the connection belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @central_network_id.setter
    def central_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "central_network_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the connection.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @global_connection_bandwidth_id.setter
    def global_connection_bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_connection_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cc/centralNetworkConnectionBandwidthAssociate:CentralNetworkConnectionBandwidthAssociate")
class CentralNetworkConnectionBandwidthAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Associate a global connection bandwidth to a central network connection within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        connection_id = config.require_object("connectionId")
        global_connection_bandwidth_id = config.require_object("globalConnectionBandwidthId")
        test = huaweicloud.cc.CentralNetworkConnectionBandwidthAssociate("test",
            central_network_id=central_network_id,
            connection_id=connection_id,
            global_connection_bandwidth_id=global_connection_bandwidth_id,
            bandwidth_size=3)
        ```

        ## Import

        The central network connection bandwidth associate resource can be imported using the `central_network_id`

        and `connection_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkConnectionBandwidthAssociate:CentralNetworkConnectionBandwidthAssociate test <central_network_id>/<connection_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: The bandwidth size of the connection.
        :param pulumi.Input[_builtins.str] central_network_id: The ID of the central network to which the connection belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] connection_id: The ID of the connection.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CentralNetworkConnectionBandwidthAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Associate a global connection bandwidth to a central network connection within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        central_network_id = config.require_object("centralNetworkId")
        connection_id = config.require_object("connectionId")
        global_connection_bandwidth_id = config.require_object("globalConnectionBandwidthId")
        test = huaweicloud.cc.CentralNetworkConnectionBandwidthAssociate("test",
            central_network_id=central_network_id,
            connection_id=connection_id,
            global_connection_bandwidth_id=global_connection_bandwidth_id,
            bandwidth_size=3)
        ```

        ## Import

        The central network connection bandwidth associate resource can be imported using the `central_network_id`

        and `connection_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cc/centralNetworkConnectionBandwidthAssociate:CentralNetworkConnectionBandwidthAssociate test <central_network_id>/<connection_id>
        ```

        :param str resource_name: The name of the resource.
        :param CentralNetworkConnectionBandwidthAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralNetworkConnectionBandwidthAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralNetworkConnectionBandwidthAssociateArgs.__new__(CentralNetworkConnectionBandwidthAssociateArgs)

            if bandwidth_size is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth_size'")
            __props__.__dict__["bandwidth_size"] = bandwidth_size
            if central_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'central_network_id'")
            __props__.__dict__["central_network_id"] = central_network_id
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if global_connection_bandwidth_id is None and not opts.urn:
                raise TypeError("Missing required property 'global_connection_bandwidth_id'")
            __props__.__dict__["global_connection_bandwidth_id"] = global_connection_bandwidth_id
            __props__.__dict__["region"] = region
        super(CentralNetworkConnectionBandwidthAssociate, __self__).__init__(
            'huaweicloud:Cc/centralNetworkConnectionBandwidthAssociate:CentralNetworkConnectionBandwidthAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
            central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'CentralNetworkConnectionBandwidthAssociate':
        """
        Get an existing CentralNetworkConnectionBandwidthAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: The bandwidth size of the connection.
        :param pulumi.Input[_builtins.str] central_network_id: The ID of the central network to which the connection belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] connection_id: The ID of the connection.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralNetworkConnectionBandwidthAssociateState.__new__(_CentralNetworkConnectionBandwidthAssociateState)

        __props__.__dict__["bandwidth_size"] = bandwidth_size
        __props__.__dict__["central_network_id"] = central_network_id
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["global_connection_bandwidth_id"] = global_connection_bandwidth_id
        __props__.__dict__["region"] = region
        return CentralNetworkConnectionBandwidthAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> pulumi.Output[_builtins.int]:
        """
        The bandwidth size of the connection.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the central network to which the connection belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the connection.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

