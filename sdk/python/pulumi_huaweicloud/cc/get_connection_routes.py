# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionRoutesResult',
    'AwaitableGetConnectionRoutesResult',
    'get_connection_routes',
    'get_connection_routes_output',
]

@pulumi.output_type
class GetConnectionRoutesResult:
    """
    A collection of values returned by getConnectionRoutes.
    """
    def __init__(__self__, cloud_connection_id=None, cloud_connection_route_id=None, cloud_connection_routes=None, id=None, instance_id=None, region=None, region_id=None):
        if cloud_connection_id and not isinstance(cloud_connection_id, str):
            raise TypeError("Expected argument 'cloud_connection_id' to be a str")
        pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if cloud_connection_route_id and not isinstance(cloud_connection_route_id, str):
            raise TypeError("Expected argument 'cloud_connection_route_id' to be a str")
        pulumi.set(__self__, "cloud_connection_route_id", cloud_connection_route_id)
        if cloud_connection_routes and not isinstance(cloud_connection_routes, list):
            raise TypeError("Expected argument 'cloud_connection_routes' to be a list")
        pulumi.set(__self__, "cloud_connection_routes", cloud_connection_routes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[_builtins.str]:
        """
        The cloud connection ID.
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionRouteId")
    def cloud_connection_route_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cloud_connection_route_id")

    @_builtins.property
    @pulumi.getter(name="cloudConnectionRoutes")
    def cloud_connection_routes(self) -> Sequence['outputs.GetConnectionRoutesCloudConnectionRouteResult']:
        """
        The list of cloud connection routes.
        """
        return pulumi.get(self, "cloud_connection_routes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The network instance ID of cloud connection route.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        The region ID of cloud connection route.
        """
        return pulumi.get(self, "region_id")


class AwaitableGetConnectionRoutesResult(GetConnectionRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionRoutesResult(
            cloud_connection_id=self.cloud_connection_id,
            cloud_connection_route_id=self.cloud_connection_route_id,
            cloud_connection_routes=self.cloud_connection_routes,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            region_id=self.region_id)


def get_connection_routes(cloud_connection_id: Optional[_builtins.str] = None,
                          cloud_connection_route_id: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          region_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionRoutesResult:
    """
    Use this data source to get the list of cloud connection routes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cloud_connection_route_id = config.require_object("cloudConnectionRouteId")
    test = huaweicloud.Cc.get_connection_routes(cloud_connection_route_id=cloud_connection_route_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies cloud connection ID.
    :param _builtins.str cloud_connection_route_id: Specifies cloud connection route ID.
    :param _builtins.str instance_id: Specifies network instance ID of cloud connection route.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies region ID of cloud connection route.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['cloudConnectionRouteId'] = cloud_connection_route_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['regionId'] = region_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getConnectionRoutes:getConnectionRoutes', __args__, opts=opts, typ=GetConnectionRoutesResult).value

    return AwaitableGetConnectionRoutesResult(
        cloud_connection_id=pulumi.get(__ret__, 'cloud_connection_id'),
        cloud_connection_route_id=pulumi.get(__ret__, 'cloud_connection_route_id'),
        cloud_connection_routes=pulumi.get(__ret__, 'cloud_connection_routes'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        region_id=pulumi.get(__ret__, 'region_id'))
def get_connection_routes_output(cloud_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 cloud_connection_route_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionRoutesResult]:
    """
    Use this data source to get the list of cloud connection routes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cloud_connection_route_id = config.require_object("cloudConnectionRouteId")
    test = huaweicloud.Cc.get_connection_routes(cloud_connection_route_id=cloud_connection_route_id)
    ```


    :param _builtins.str cloud_connection_id: Specifies cloud connection ID.
    :param _builtins.str cloud_connection_route_id: Specifies cloud connection route ID.
    :param _builtins.str instance_id: Specifies network instance ID of cloud connection route.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies region ID of cloud connection route.
    """
    __args__ = dict()
    __args__['cloudConnectionId'] = cloud_connection_id
    __args__['cloudConnectionRouteId'] = cloud_connection_route_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['regionId'] = region_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getConnectionRoutes:getConnectionRoutes', __args__, opts=opts, typ=GetConnectionRoutesResult)
    return __ret__.apply(lambda __response__: GetConnectionRoutesResult(
        cloud_connection_id=pulumi.get(__response__, 'cloud_connection_id'),
        cloud_connection_route_id=pulumi.get(__response__, 'cloud_connection_route_id'),
        cloud_connection_routes=pulumi.get(__response__, 'cloud_connection_routes'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        region_id=pulumi.get(__response__, 'region_id')))
