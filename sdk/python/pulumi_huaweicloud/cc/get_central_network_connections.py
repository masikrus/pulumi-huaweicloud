# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralNetworkConnectionsResult',
    'AwaitableGetCentralNetworkConnectionsResult',
    'get_central_network_connections',
    'get_central_network_connections_output',
]

@pulumi.output_type
class GetCentralNetworkConnectionsResult:
    """
    A collection of values returned by getCentralNetworkConnections.
    """
    def __init__(__self__, bandwidth_type=None, central_network_connections=None, central_network_id=None, connection_id=None, global_connection_bandwidth_id=None, id=None, is_cross_region=None, region=None, status=None, type=None):
        if bandwidth_type and not isinstance(bandwidth_type, str):
            raise TypeError("Expected argument 'bandwidth_type' to be a str")
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        if central_network_connections and not isinstance(central_network_connections, list):
            raise TypeError("Expected argument 'central_network_connections' to be a list")
        pulumi.set(__self__, "central_network_connections", central_network_connections)
        if central_network_id and not isinstance(central_network_id, str):
            raise TypeError("Expected argument 'central_network_id' to be a str")
        pulumi.set(__self__, "central_network_id", central_network_id)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if global_connection_bandwidth_id and not isinstance(global_connection_bandwidth_id, str):
            raise TypeError("Expected argument 'global_connection_bandwidth_id' to be a str")
        pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_cross_region and not isinstance(is_cross_region, str):
            raise TypeError("Expected argument 'is_cross_region' to be a str")
        pulumi.set(__self__, "is_cross_region", is_cross_region)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> Optional[_builtins.str]:
        """
        The bandwidth type of the enterprise router connection on the central network.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="centralNetworkConnections")
    def central_network_connections(self) -> Sequence['outputs.GetCentralNetworkConnectionsCentralNetworkConnectionResult']:
        """
        The list of the central network connections.
        """
        return pulumi.get(self, "central_network_connections")

    @_builtins.property
    @pulumi.getter(name="centralNetworkId")
    def central_network_id(self) -> _builtins.str:
        """
        The the central network ID.
        """
        return pulumi.get(self, "central_network_id")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID of the enterprise router connection on the central network.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCrossRegion")
    def is_cross_region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_cross_region")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The central network connection status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The point type of central network connection.
        """
        return pulumi.get(self, "type")


class AwaitableGetCentralNetworkConnectionsResult(GetCentralNetworkConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralNetworkConnectionsResult(
            bandwidth_type=self.bandwidth_type,
            central_network_connections=self.central_network_connections,
            central_network_id=self.central_network_id,
            connection_id=self.connection_id,
            global_connection_bandwidth_id=self.global_connection_bandwidth_id,
            id=self.id,
            is_cross_region=self.is_cross_region,
            region=self.region,
            status=self.status,
            type=self.type)


def get_central_network_connections(bandwidth_type: Optional[_builtins.str] = None,
                                    central_network_id: Optional[_builtins.str] = None,
                                    connection_id: Optional[_builtins.str] = None,
                                    global_connection_bandwidth_id: Optional[_builtins.str] = None,
                                    is_cross_region: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    status: Optional[_builtins.str] = None,
                                    type: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralNetworkConnectionsResult:
    """
    Use this data source to get the list of CC central network connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    central_network_connection_id = config.require_object("centralNetworkConnectionId")
    test = huaweicloud.Cc.get_central_network_connections(central_network_id=central_network_id,
        connection_id=central_network_connection_id)
    ```


    :param _builtins.str bandwidth_type: Specifies the bandwidth type of the central network connection.
           The bandwidth types are as follows:
           + **BandwidthPackage**: A global private bandwidth billed by fixed bandwidth is required, and cross-site connection
           bandwidths are assigned from the global private bandwidth.
           + **TestBandwidth**: Only the minimum bandwidth is used for testing cross-region connectivity.
    :param _builtins.str central_network_id: Specifies the central network ID.
    :param _builtins.str connection_id: Specifies the central network connection ID.
    :param _builtins.str global_connection_bandwidth_id: Specifies the bandwidth package ID of the central network connection.
    :param _builtins.str is_cross_region: Specifies whether there are different regions.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the central network connection status.
    :param _builtins.str type: Specifies the central network connection type.
    """
    __args__ = dict()
    __args__['bandwidthType'] = bandwidth_type
    __args__['centralNetworkId'] = central_network_id
    __args__['connectionId'] = connection_id
    __args__['globalConnectionBandwidthId'] = global_connection_bandwidth_id
    __args__['isCrossRegion'] = is_cross_region
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cc/getCentralNetworkConnections:getCentralNetworkConnections', __args__, opts=opts, typ=GetCentralNetworkConnectionsResult).value

    return AwaitableGetCentralNetworkConnectionsResult(
        bandwidth_type=pulumi.get(__ret__, 'bandwidth_type'),
        central_network_connections=pulumi.get(__ret__, 'central_network_connections'),
        central_network_id=pulumi.get(__ret__, 'central_network_id'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        global_connection_bandwidth_id=pulumi.get(__ret__, 'global_connection_bandwidth_id'),
        id=pulumi.get(__ret__, 'id'),
        is_cross_region=pulumi.get(__ret__, 'is_cross_region'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_central_network_connections_output(bandwidth_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           central_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           global_connection_bandwidth_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           is_cross_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCentralNetworkConnectionsResult]:
    """
    Use this data source to get the list of CC central network connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    central_network_id = config.require_object("centralNetworkId")
    central_network_connection_id = config.require_object("centralNetworkConnectionId")
    test = huaweicloud.Cc.get_central_network_connections(central_network_id=central_network_id,
        connection_id=central_network_connection_id)
    ```


    :param _builtins.str bandwidth_type: Specifies the bandwidth type of the central network connection.
           The bandwidth types are as follows:
           + **BandwidthPackage**: A global private bandwidth billed by fixed bandwidth is required, and cross-site connection
           bandwidths are assigned from the global private bandwidth.
           + **TestBandwidth**: Only the minimum bandwidth is used for testing cross-region connectivity.
    :param _builtins.str central_network_id: Specifies the central network ID.
    :param _builtins.str connection_id: Specifies the central network connection ID.
    :param _builtins.str global_connection_bandwidth_id: Specifies the bandwidth package ID of the central network connection.
    :param _builtins.str is_cross_region: Specifies whether there are different regions.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the central network connection status.
    :param _builtins.str type: Specifies the central network connection type.
    """
    __args__ = dict()
    __args__['bandwidthType'] = bandwidth_type
    __args__['centralNetworkId'] = central_network_id
    __args__['connectionId'] = connection_id
    __args__['globalConnectionBandwidthId'] = global_connection_bandwidth_id
    __args__['isCrossRegion'] = is_cross_region
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cc/getCentralNetworkConnections:getCentralNetworkConnections', __args__, opts=opts, typ=GetCentralNetworkConnectionsResult)
    return __ret__.apply(lambda __response__: GetCentralNetworkConnectionsResult(
        bandwidth_type=pulumi.get(__response__, 'bandwidth_type'),
        central_network_connections=pulumi.get(__response__, 'central_network_connections'),
        central_network_id=pulumi.get(__response__, 'central_network_id'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        global_connection_bandwidth_id=pulumi.get(__response__, 'global_connection_bandwidth_id'),
        id=pulumi.get(__response__, 'id'),
        is_cross_region=pulumi.get(__response__, 'is_cross_region'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
