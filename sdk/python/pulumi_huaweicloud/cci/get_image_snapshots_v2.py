# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetImageSnapshotsV2Result',
    'AwaitableGetImageSnapshotsV2Result',
    'get_image_snapshots_v2',
    'get_image_snapshots_v2_output',
]

@pulumi.output_type
class GetImageSnapshotsV2Result:
    """
    A collection of values returned by getImageSnapshotsV2.
    """
    def __init__(__self__, id=None, image_snapshots=None, name=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_snapshots and not isinstance(image_snapshots, list):
            raise TypeError("Expected argument 'image_snapshots' to be a list")
        pulumi.set(__self__, "image_snapshots", image_snapshots)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageSnapshots")
    def image_snapshots(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotResult']:
        return pulumi.get(self, "image_snapshots")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetImageSnapshotsV2Result(GetImageSnapshotsV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageSnapshotsV2Result(
            id=self.id,
            image_snapshots=self.image_snapshots,
            name=self.name,
            region=self.region)


def get_image_snapshots_v2(name: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageSnapshotsV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cci/getImageSnapshotsV2:getImageSnapshotsV2', __args__, opts=opts, typ=GetImageSnapshotsV2Result).value

    return AwaitableGetImageSnapshotsV2Result(
        id=pulumi.get(__ret__, 'id'),
        image_snapshots=pulumi.get(__ret__, 'image_snapshots'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_image_snapshots_v2_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetImageSnapshotsV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cci/getImageSnapshotsV2:getImageSnapshotsV2', __args__, opts=opts, typ=GetImageSnapshotsV2Result)
    return __ret__.apply(lambda __response__: GetImageSnapshotsV2Result(
        id=pulumi.get(__response__, 'id'),
        image_snapshots=pulumi.get(__response__, 'image_snapshots'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
