# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentV2Args', 'DeploymentV2']

@pulumi.input_type
class DeploymentV2Args:
    def __init__(__self__, *,
                 namespace: pulumi.Input[_builtins.str],
                 selector: pulumi.Input['DeploymentV2SelectorArgs'],
                 template: pulumi.Input['DeploymentV2TemplateArgs'],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 progress_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 strategy: Optional[pulumi.Input['DeploymentV2StrategyArgs']] = None):
        """
        The set of arguments for constructing a DeploymentV2 resource.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "template", template)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if progress_deadline_seconds is not None:
            pulumi.set(__self__, "progress_deadline_seconds", progress_deadline_seconds)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> pulumi.Input['DeploymentV2SelectorArgs']:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input['DeploymentV2SelectorArgs']):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Input['DeploymentV2TemplateArgs']:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['DeploymentV2TemplateArgs']):
        pulumi.set(self, "template", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "min_ready_seconds")

    @min_ready_seconds.setter
    def min_ready_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ready_seconds", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "progress_deadline_seconds")

    @progress_deadline_seconds.setter
    def progress_deadline_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "progress_deadline_seconds", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['DeploymentV2StrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['DeploymentV2StrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class _DeploymentV2State:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 generation: Optional[pulumi.Input[_builtins.int]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 selector: Optional[pulumi.Input['DeploymentV2SelectorArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentV2StatusArgs']]]] = None,
                 strategy: Optional[pulumi.Input['DeploymentV2StrategyArgs']] = None,
                 template: Optional[pulumi.Input['DeploymentV2TemplateArgs']] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeploymentV2 resources.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if progress_deadline_seconds is not None:
            pulumi.set(__self__, "progress_deadline_seconds", progress_deadline_seconds)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "generation", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "min_ready_seconds")

    @min_ready_seconds.setter
    def min_ready_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ready_seconds", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "progress_deadline_seconds")

    @progress_deadline_seconds.setter
    def progress_deadline_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "progress_deadline_seconds", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['DeploymentV2SelectorArgs']]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['DeploymentV2SelectorArgs']]):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentV2StatusArgs']]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentV2StatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['DeploymentV2StrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['DeploymentV2StrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['DeploymentV2TemplateArgs']]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['DeploymentV2TemplateArgs']]):
        pulumi.set(self, "template", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)


@pulumi.type_token("huaweicloud:Cci/deploymentV2:DeploymentV2")
class DeploymentV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 selector: Optional[pulumi.Input[Union['DeploymentV2SelectorArgs', 'DeploymentV2SelectorArgsDict']]] = None,
                 strategy: Optional[pulumi.Input[Union['DeploymentV2StrategyArgs', 'DeploymentV2StrategyArgsDict']]] = None,
                 template: Optional[pulumi.Input[Union['DeploymentV2TemplateArgs', 'DeploymentV2TemplateArgsDict']]] = None,
                 __props__=None):
        """
        Create a DeploymentV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DeploymentV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeploymentV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 selector: Optional[pulumi.Input[Union['DeploymentV2SelectorArgs', 'DeploymentV2SelectorArgsDict']]] = None,
                 strategy: Optional[pulumi.Input[Union['DeploymentV2StrategyArgs', 'DeploymentV2StrategyArgsDict']]] = None,
                 template: Optional[pulumi.Input[Union['DeploymentV2TemplateArgs', 'DeploymentV2TemplateArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentV2Args.__new__(DeploymentV2Args)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["min_ready_seconds"] = min_ready_seconds
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["progress_deadline_seconds"] = progress_deadline_seconds
            __props__.__dict__["region"] = region
            __props__.__dict__["replicas"] = replicas
            if selector is None and not opts.urn:
                raise TypeError("Missing required property 'selector'")
            __props__.__dict__["selector"] = selector
            __props__.__dict__["strategy"] = strategy
            if template is None and not opts.urn:
                raise TypeError("Missing required property 'template'")
            __props__.__dict__["template"] = template
            __props__.__dict__["annotations"] = None
            __props__.__dict__["api_version"] = None
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["generation"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
        super(DeploymentV2, __self__).__init__(
            'huaweicloud:Cci/deploymentV2:DeploymentV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            generation: Optional[pulumi.Input[_builtins.int]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            min_ready_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            progress_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replicas: Optional[pulumi.Input[_builtins.int]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            selector: Optional[pulumi.Input[Union['DeploymentV2SelectorArgs', 'DeploymentV2SelectorArgsDict']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentV2StatusArgs', 'DeploymentV2StatusArgsDict']]]]] = None,
            strategy: Optional[pulumi.Input[Union['DeploymentV2StrategyArgs', 'DeploymentV2StrategyArgsDict']]] = None,
            template: Optional[pulumi.Input[Union['DeploymentV2TemplateArgs', 'DeploymentV2TemplateArgsDict']]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeploymentV2':
        """
        Get an existing DeploymentV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentV2State.__new__(_DeploymentV2State)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["generation"] = generation
        __props__.__dict__["kind"] = kind
        __props__.__dict__["min_ready_seconds"] = min_ready_seconds
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["progress_deadline_seconds"] = progress_deadline_seconds
        __props__.__dict__["region"] = region
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["selector"] = selector
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["template"] = template
        __props__.__dict__["uid"] = uid
        return DeploymentV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def generation(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "generation")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "min_ready_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "progress_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> pulumi.Output['outputs.DeploymentV2Selector']:
        return pulumi.get(self, "selector")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.DeploymentV2Status']]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Output['outputs.DeploymentV2Strategy']:
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Output['outputs.DeploymentV2Template']:
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "uid")

