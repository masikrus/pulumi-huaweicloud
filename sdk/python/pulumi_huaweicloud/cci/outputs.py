# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DeploymentV2Selector',
    'DeploymentV2SelectorMatchExpression',
    'DeploymentV2Status',
    'DeploymentV2StatusCondition',
    'DeploymentV2Strategy',
    'DeploymentV2Template',
    'DeploymentV2TemplateMetadata',
    'DeploymentV2TemplateSpec',
    'DeploymentV2TemplateSpecAffinity',
    'DeploymentV2TemplateSpecAffinityNodeAffinity',
    'DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm',
    'DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinity',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression',
    'DeploymentV2TemplateSpecContainer',
    'DeploymentV2TemplateSpecContainerEnv',
    'DeploymentV2TemplateSpecContainerEnvFrom',
    'DeploymentV2TemplateSpecContainerEnvFromConfigMapRef',
    'DeploymentV2TemplateSpecContainerEnvFromSecretRef',
    'DeploymentV2TemplateSpecContainerLifecycle',
    'DeploymentV2TemplateSpecContainerLifecyclePostStart',
    'DeploymentV2TemplateSpecContainerLifecyclePostStartExec',
    'DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet',
    'DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetHttpHeader',
    'DeploymentV2TemplateSpecContainerLifecyclePreStop',
    'DeploymentV2TemplateSpecContainerLifecyclePreStopExec',
    'DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet',
    'DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetHttpHeader',
    'DeploymentV2TemplateSpecContainerLivenessProbe',
    'DeploymentV2TemplateSpecContainerLivenessProbeExec',
    'DeploymentV2TemplateSpecContainerLivenessProbeHttpGet',
    'DeploymentV2TemplateSpecContainerLivenessProbeHttpGetHttpHeader',
    'DeploymentV2TemplateSpecContainerPort',
    'DeploymentV2TemplateSpecContainerReadinessProbe',
    'DeploymentV2TemplateSpecContainerReadinessProbeExec',
    'DeploymentV2TemplateSpecContainerReadinessProbeHttpGet',
    'DeploymentV2TemplateSpecContainerReadinessProbeHttpGetHttpHeader',
    'DeploymentV2TemplateSpecContainerResources',
    'DeploymentV2TemplateSpecContainerSecurityContext',
    'DeploymentV2TemplateSpecContainerSecurityContextCapabilities',
    'DeploymentV2TemplateSpecContainerStartupProbe',
    'DeploymentV2TemplateSpecContainerStartupProbeExec',
    'DeploymentV2TemplateSpecContainerStartupProbeHttpGet',
    'DeploymentV2TemplateSpecContainerStartupProbeHttpGetHttpHeader',
    'DeploymentV2TemplateSpecContainerVolumeMount',
    'DeploymentV2TemplateSpecImagePullSecret',
    'HpaV2Behavior',
    'HpaV2BehaviorScaleDown',
    'HpaV2BehaviorScaleDownPolicy',
    'HpaV2BehaviorScaleUp',
    'HpaV2BehaviorScaleUpPolicy',
    'HpaV2Metric',
    'HpaV2MetricContainerResource',
    'HpaV2MetricContainerResourceTarget',
    'HpaV2MetricExternal',
    'HpaV2MetricExternalMetric',
    'HpaV2MetricExternalMetricSelector',
    'HpaV2MetricExternalMetricSelectorMatchExpression',
    'HpaV2MetricExternalTarget',
    'HpaV2MetricObject',
    'HpaV2MetricObjectDescribedObject',
    'HpaV2MetricObjectMetric',
    'HpaV2MetricObjectMetricSelector',
    'HpaV2MetricObjectMetricSelectorMatchExpression',
    'HpaV2MetricObjectTarget',
    'HpaV2MetricPods',
    'HpaV2MetricPodsMetric',
    'HpaV2MetricPodsMetricSelector',
    'HpaV2MetricPodsMetricSelectorMatchExpression',
    'HpaV2MetricPodsTarget',
    'HpaV2MetricResources',
    'HpaV2MetricResourcesTarget',
    'HpaV2ScaleTargetRef',
    'HpaV2Status',
    'HpaV2StatusCondition',
    'HpaV2StatusCurrentMetric',
    'HpaV2StatusCurrentMetricContainerResource',
    'HpaV2StatusCurrentMetricContainerResourceTarget',
    'HpaV2StatusCurrentMetricExternal',
    'HpaV2StatusCurrentMetricExternalMetric',
    'HpaV2StatusCurrentMetricExternalMetricSelector',
    'HpaV2StatusCurrentMetricExternalMetricSelectorMatchExpression',
    'HpaV2StatusCurrentMetricExternalTarget',
    'HpaV2StatusCurrentMetricObject',
    'HpaV2StatusCurrentMetricObjectDescribedObject',
    'HpaV2StatusCurrentMetricObjectMetric',
    'HpaV2StatusCurrentMetricObjectMetricSelector',
    'HpaV2StatusCurrentMetricObjectMetricSelectorMatchExpression',
    'HpaV2StatusCurrentMetricObjectTarget',
    'HpaV2StatusCurrentMetricPods',
    'HpaV2StatusCurrentMetricPodsMetric',
    'HpaV2StatusCurrentMetricPodsMetricSelector',
    'HpaV2StatusCurrentMetricPodsMetricSelectorMatchExpression',
    'HpaV2StatusCurrentMetricPodsTarget',
    'HpaV2StatusCurrentMetricResources',
    'HpaV2StatusCurrentMetricResourcesTarget',
    'ImageSnapshotV2BuildingConfig',
    'ImageSnapshotV2BuildingConfigAutoCreateEipAttribute',
    'ImageSnapshotV2Image',
    'ImageSnapshotV2Registry',
    'ImageSnapshotV2Status',
    'ImageSnapshotV2StatusImage',
    'NetworkV2Status',
    'NetworkV2StatusCondition',
    'NetworkV2StatusSubnetAttr',
    'NetworkV2Subnet',
    'PersistentVolumeClaimV2Resources',
    'PersistentVolumeClaimV2Selector',
    'PersistentVolumeClaimV2SelectorMatchExpression',
    'PersistentVolumeV2ClaimRef',
    'PersistentVolumeV2Csi',
    'PersistentVolumeV2CsiControllerExpandSecretRef',
    'PersistentVolumeV2CsiControllerPublishSecretRef',
    'PersistentVolumeV2CsiNodeExpandSecretRef',
    'PersistentVolumeV2CsiNodePublishSecretRef',
    'PersistentVolumeV2CsiNodeStageSecretRef',
    'PersistentVolumeV2NodeAffinity',
    'PersistentVolumeV2NodeAffinityRequired',
    'PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm',
    'PersistentVolumeV2NodeAffinityRequiredNodeSelectorTermMatchExpression',
    'PersistentVolumeV2Status',
    'PodV2Affinity',
    'PodV2AffinityNodeAffinity',
    'PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm',
    'PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression',
    'PodV2AffinityPodAntiAffinity',
    'PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression',
    'PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression',
    'PodV2Container',
    'PodV2ContainerEnv',
    'PodV2ContainerEnvFrom',
    'PodV2ContainerEnvFromConfigMapRef',
    'PodV2ContainerEnvFromSecretRef',
    'PodV2ContainerLifecycle',
    'PodV2ContainerLifecyclePostStart',
    'PodV2ContainerLifecyclePostStartExec',
    'PodV2ContainerLifecyclePostStartHttpGet',
    'PodV2ContainerLifecyclePostStartHttpGetHttpHeader',
    'PodV2ContainerLifecyclePreStop',
    'PodV2ContainerLifecyclePreStopExec',
    'PodV2ContainerLifecyclePreStopHttpGet',
    'PodV2ContainerLifecyclePreStopHttpGetHttpHeader',
    'PodV2ContainerLivenessProbe',
    'PodV2ContainerLivenessProbeExec',
    'PodV2ContainerLivenessProbeHttpGet',
    'PodV2ContainerLivenessProbeHttpGetHttpHeader',
    'PodV2ContainerPort',
    'PodV2ContainerReadinessProbe',
    'PodV2ContainerReadinessProbeExec',
    'PodV2ContainerReadinessProbeHttpGet',
    'PodV2ContainerReadinessProbeHttpGetHttpHeader',
    'PodV2ContainerResources',
    'PodV2ContainerSecurityContext',
    'PodV2ContainerSecurityContextCapabilities',
    'PodV2ContainerStartupProbe',
    'PodV2ContainerStartupProbeExec',
    'PodV2ContainerStartupProbeHttpGet',
    'PodV2ContainerStartupProbeHttpGetHttpHeader',
    'PodV2ContainerVolumeMount',
    'PodV2DnsConfig',
    'PodV2DnsConfigOption',
    'PodV2EphemeralContainer',
    'PodV2EphemeralContainerEnv',
    'PodV2EphemeralContainerEnvFrom',
    'PodV2EphemeralContainerEnvFromConfigMapRef',
    'PodV2EphemeralContainerEnvFromSecretRef',
    'PodV2EphemeralContainerLifecycle',
    'PodV2EphemeralContainerLifecyclePostStart',
    'PodV2EphemeralContainerLifecyclePostStartExec',
    'PodV2EphemeralContainerLifecyclePostStartHttpGet',
    'PodV2EphemeralContainerLifecyclePostStartHttpGetHttpHeader',
    'PodV2EphemeralContainerLifecyclePreStop',
    'PodV2EphemeralContainerLifecyclePreStopExec',
    'PodV2EphemeralContainerLifecyclePreStopHttpGet',
    'PodV2EphemeralContainerLifecyclePreStopHttpGetHttpHeader',
    'PodV2EphemeralContainerLivenessProbe',
    'PodV2EphemeralContainerLivenessProbeExec',
    'PodV2EphemeralContainerLivenessProbeHttpGet',
    'PodV2EphemeralContainerLivenessProbeHttpGetHttpHeader',
    'PodV2EphemeralContainerPort',
    'PodV2EphemeralContainerReadinessProbe',
    'PodV2EphemeralContainerReadinessProbeExec',
    'PodV2EphemeralContainerReadinessProbeHttpGet',
    'PodV2EphemeralContainerReadinessProbeHttpGetHttpHeader',
    'PodV2EphemeralContainerResources',
    'PodV2EphemeralContainerSecurityContext',
    'PodV2EphemeralContainerSecurityContextCapabilities',
    'PodV2EphemeralContainerStartupProbe',
    'PodV2EphemeralContainerStartupProbeExec',
    'PodV2EphemeralContainerStartupProbeHttpGet',
    'PodV2EphemeralContainerStartupProbeHttpGetHttpHeader',
    'PodV2EphemeralContainerVolumeMount',
    'PodV2HostAlias',
    'PodV2ImagePullSecret',
    'PodV2InitContainer',
    'PodV2InitContainerEnv',
    'PodV2InitContainerEnvFrom',
    'PodV2InitContainerEnvFromConfigMapRef',
    'PodV2InitContainerEnvFromSecretRef',
    'PodV2InitContainerLifecycle',
    'PodV2InitContainerLifecyclePostStart',
    'PodV2InitContainerLifecyclePostStartExec',
    'PodV2InitContainerLifecyclePostStartHttpGet',
    'PodV2InitContainerLifecyclePostStartHttpGetHttpHeader',
    'PodV2InitContainerLifecyclePreStop',
    'PodV2InitContainerLifecyclePreStopExec',
    'PodV2InitContainerLifecyclePreStopHttpGet',
    'PodV2InitContainerLifecyclePreStopHttpGetHttpHeader',
    'PodV2InitContainerLivenessProbe',
    'PodV2InitContainerLivenessProbeExec',
    'PodV2InitContainerLivenessProbeHttpGet',
    'PodV2InitContainerLivenessProbeHttpGetHttpHeader',
    'PodV2InitContainerPort',
    'PodV2InitContainerReadinessProbe',
    'PodV2InitContainerReadinessProbeExec',
    'PodV2InitContainerReadinessProbeHttpGet',
    'PodV2InitContainerReadinessProbeHttpGetHttpHeader',
    'PodV2InitContainerResources',
    'PodV2InitContainerSecurityContext',
    'PodV2InitContainerSecurityContextCapabilities',
    'PodV2InitContainerStartupProbe',
    'PodV2InitContainerStartupProbeExec',
    'PodV2InitContainerStartupProbeHttpGet',
    'PodV2InitContainerStartupProbeHttpGetHttpHeader',
    'PodV2InitContainerVolumeMount',
    'PodV2ReadinessGate',
    'PodV2SecurityContext',
    'PodV2SecurityContextSysctl',
    'PodV2Status',
    'PodV2StatusCondition',
    'PodV2Volume',
    'PodV2VolumeConfigMap',
    'PodV2VolumeConfigMapItems',
    'PodV2VolumeNfs',
    'PodV2VolumePersistentVolumeClaim',
    'PodV2VolumeProjected',
    'PodV2VolumeProjectedSource',
    'PodV2VolumeProjectedSourceConfigMap',
    'PodV2VolumeProjectedSourceConfigMapItem',
    'PodV2VolumeProjectedSourceDownwardApi',
    'PodV2VolumeProjectedSourceDownwardApiItem',
    'PodV2VolumeProjectedSourceDownwardApiItemFieldRef',
    'PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef',
    'PodV2VolumeProjectedSourceSecret',
    'PodV2VolumeProjectedSourceSecretItem',
    'PodV2VolumeSecret',
    'PodV2VolumeSecretItems',
    'PoolBindingOwnerReference',
    'PoolBindingPoolRef',
    'PoolBindingTargetRef',
    'PvcV2Resources',
    'PvcV2Selector',
    'PvcV2SelectorMatchExpression',
    'ServiceV2Port',
    'ServiceV2Status',
    'ServiceV2StatusCondition',
    'ServiceV2StatusLoadbalancer',
    'ServiceV2StatusLoadbalancerIngress',
    'ServiceV2StatusLoadbalancerIngressPort',
    'GetConfigMapsV2ConfigMapResult',
    'GetDeploymentsV2DeploymentResult',
    'GetDeploymentsV2DeploymentSelectorResult',
    'GetDeploymentsV2DeploymentSelectorMatchExpressionResult',
    'GetDeploymentsV2DeploymentStatusResult',
    'GetDeploymentsV2DeploymentStatusConditionResult',
    'GetDeploymentsV2DeploymentStrategyResult',
    'GetDeploymentsV2DeploymentTemplateResult',
    'GetDeploymentsV2DeploymentTemplateMetadataResult',
    'GetDeploymentsV2DeploymentTemplateSpecResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult',
    'GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerEnvResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromConfigMapRefResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromSecretRefResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecycleResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartExecResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopExecResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeExecResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerPortResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeExecResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerResourceResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextCapabilityResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeExecResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult',
    'GetDeploymentsV2DeploymentTemplateSpecContainerVolumeMountResult',
    'GetDeploymentsV2DeploymentTemplateSpecImagePullSecretResult',
    'GetEventsV2EventResult',
    'GetEventsV2EventInvolvedObjectResult',
    'GetEventsV2EventMetadataResult',
    'GetEventsV2EventSourceResult',
    'GetHpasV2HpaResult',
    'GetHpasV2HpaBehaviorResult',
    'GetHpasV2HpaBehaviorScaleDownResult',
    'GetHpasV2HpaBehaviorScaleDownPolicyResult',
    'GetHpasV2HpaBehaviorScaleUpResult',
    'GetHpasV2HpaBehaviorScaleUpPolicyResult',
    'GetHpasV2HpaMetricResult',
    'GetHpasV2HpaMetricContainerResourceResult',
    'GetHpasV2HpaMetricContainerResourceTargetResult',
    'GetHpasV2HpaMetricExternalResult',
    'GetHpasV2HpaMetricExternalMetricResult',
    'GetHpasV2HpaMetricExternalMetricSelectorResult',
    'GetHpasV2HpaMetricExternalMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaMetricExternalTargetResult',
    'GetHpasV2HpaMetricObjectResult',
    'GetHpasV2HpaMetricObjectDescribedObjectResult',
    'GetHpasV2HpaMetricObjectMetricResult',
    'GetHpasV2HpaMetricObjectMetricSelectorResult',
    'GetHpasV2HpaMetricObjectMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaMetricObjectTargetResult',
    'GetHpasV2HpaMetricPodResult',
    'GetHpasV2HpaMetricPodMetricResult',
    'GetHpasV2HpaMetricPodMetricSelectorResult',
    'GetHpasV2HpaMetricPodMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaMetricPodTargetResult',
    'GetHpasV2HpaMetricResourceResult',
    'GetHpasV2HpaMetricResourceTargetResult',
    'GetHpasV2HpaScaleTargetRefResult',
    'GetHpasV2HpaStatusResult',
    'GetHpasV2HpaStatusConditionResult',
    'GetHpasV2HpaStatusCurrentMetricResult',
    'GetHpasV2HpaStatusCurrentMetricContainerResourceResult',
    'GetHpasV2HpaStatusCurrentMetricContainerResourceTargetResult',
    'GetHpasV2HpaStatusCurrentMetricExternalResult',
    'GetHpasV2HpaStatusCurrentMetricExternalMetricResult',
    'GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorResult',
    'GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaStatusCurrentMetricExternalTargetResult',
    'GetHpasV2HpaStatusCurrentMetricObjectResult',
    'GetHpasV2HpaStatusCurrentMetricObjectDescribedObjectResult',
    'GetHpasV2HpaStatusCurrentMetricObjectMetricResult',
    'GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorResult',
    'GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaStatusCurrentMetricObjectTargetResult',
    'GetHpasV2HpaStatusCurrentMetricPodResult',
    'GetHpasV2HpaStatusCurrentMetricPodMetricResult',
    'GetHpasV2HpaStatusCurrentMetricPodMetricSelectorResult',
    'GetHpasV2HpaStatusCurrentMetricPodMetricSelectorMatchExpressionResult',
    'GetHpasV2HpaStatusCurrentMetricPodTargetResult',
    'GetHpasV2HpaStatusCurrentMetricResourceResult',
    'GetHpasV2HpaStatusCurrentMetricResourceTargetResult',
    'GetImageSnapshotsV2ImageSnapshotResult',
    'GetImageSnapshotsV2ImageSnapshotBuildingConfigResult',
    'GetImageSnapshotsV2ImageSnapshotBuildingConfigAutoCreateEipAttributeResult',
    'GetImageSnapshotsV2ImageSnapshotImageResult',
    'GetImageSnapshotsV2ImageSnapshotRegistryResult',
    'GetImageSnapshotsV2ImageSnapshotStatusResult',
    'GetImageSnapshotsV2ImageSnapshotStatusImageResult',
    'GetNamespacesNamespaceResult',
    'GetNamespacesNamespaceNetworkResult',
    'GetNamespacesNamespaceNetworkVpcResult',
    'GetNamespacesV2NamespaceResult',
    'GetNetworksV2NetworkResult',
    'GetNetworksV2NetworkStatusResult',
    'GetNetworksV2NetworkStatusConditionResult',
    'GetNetworksV2NetworkStatusSubnetAttrResult',
    'GetNetworksV2NetworkSubnetResult',
    'GetPersistentVolumeClaimsV2PvcResult',
    'GetPersistentVolumeClaimsV2PvcResourceResult',
    'GetPersistentVolumeClaimsV2PvcSelectorResult',
    'GetPersistentVolumeClaimsV2PvcSelectorMatchExpressionResult',
    'GetPersistentVolumesV2PersistentVolumeResult',
    'GetPersistentVolumesV2PersistentVolumeClaimRefResult',
    'GetPersistentVolumesV2PersistentVolumeCsiResult',
    'GetPersistentVolumesV2PersistentVolumeCsiControllerExpandSecretRefResult',
    'GetPersistentVolumesV2PersistentVolumeCsiControllerPublishSecretRefResult',
    'GetPersistentVolumesV2PersistentVolumeCsiNodeExpandSecretRefResult',
    'GetPersistentVolumesV2PersistentVolumeCsiNodePublishSecretRefResult',
    'GetPersistentVolumesV2PersistentVolumeCsiNodeStageSecretRefResult',
    'GetPersistentVolumesV2PersistentVolumeNodeAffinityResult',
    'GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredResult',
    'GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermResult',
    'GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermMatchExpressionResult',
    'GetPersistentVolumesV2PersistentVolumeStatusResult',
    'GetPodsV2PodResult',
    'GetPodsV2PodAffinityResult',
    'GetPodsV2PodAffinityNodeAffinityResult',
    'GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult',
    'GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult',
    'GetPodsV2PodAffinityPodAntiAffinityResult',
    'GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult',
    'GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult',
    'GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult',
    'GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult',
    'GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult',
    'GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult',
    'GetPodsV2PodContainerResult',
    'GetPodsV2PodContainerEnvResult',
    'GetPodsV2PodContainerEnvFromResult',
    'GetPodsV2PodContainerEnvFromConfigMapRefResult',
    'GetPodsV2PodContainerEnvFromSecretRefResult',
    'GetPodsV2PodContainerLifecycleResult',
    'GetPodsV2PodContainerLifecyclePostStartResult',
    'GetPodsV2PodContainerLifecyclePostStartExecResult',
    'GetPodsV2PodContainerLifecyclePostStartHttpGetResult',
    'GetPodsV2PodContainerLifecyclePostStartHttpGetHttpHeaderResult',
    'GetPodsV2PodContainerLifecyclePreStopResult',
    'GetPodsV2PodContainerLifecyclePreStopExecResult',
    'GetPodsV2PodContainerLifecyclePreStopHttpGetResult',
    'GetPodsV2PodContainerLifecyclePreStopHttpGetHttpHeaderResult',
    'GetPodsV2PodContainerLivenessProbeResult',
    'GetPodsV2PodContainerLivenessProbeExecResult',
    'GetPodsV2PodContainerLivenessProbeHttpGetResult',
    'GetPodsV2PodContainerLivenessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodContainerPortResult',
    'GetPodsV2PodContainerReadinessProbeResult',
    'GetPodsV2PodContainerReadinessProbeExecResult',
    'GetPodsV2PodContainerReadinessProbeHttpGetResult',
    'GetPodsV2PodContainerReadinessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodContainerResourceResult',
    'GetPodsV2PodContainerSecurityContextResult',
    'GetPodsV2PodContainerSecurityContextCapabilityResult',
    'GetPodsV2PodContainerStartupProbeResult',
    'GetPodsV2PodContainerStartupProbeExecResult',
    'GetPodsV2PodContainerStartupProbeHttpGetResult',
    'GetPodsV2PodContainerStartupProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodContainerVolumeMountResult',
    'GetPodsV2PodDnsConfigResult',
    'GetPodsV2PodDnsConfigOptionResult',
    'GetPodsV2PodEphemeralContainerResult',
    'GetPodsV2PodEphemeralContainerEnvResult',
    'GetPodsV2PodEphemeralContainerEnvFromResult',
    'GetPodsV2PodEphemeralContainerEnvFromConfigMapRefResult',
    'GetPodsV2PodEphemeralContainerEnvFromSecretRefResult',
    'GetPodsV2PodEphemeralContainerLifecycleResult',
    'GetPodsV2PodEphemeralContainerLifecyclePostStartResult',
    'GetPodsV2PodEphemeralContainerLifecyclePostStartExecResult',
    'GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetResult',
    'GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetHttpHeaderResult',
    'GetPodsV2PodEphemeralContainerLifecyclePreStopResult',
    'GetPodsV2PodEphemeralContainerLifecyclePreStopExecResult',
    'GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetResult',
    'GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetHttpHeaderResult',
    'GetPodsV2PodEphemeralContainerLivenessProbeResult',
    'GetPodsV2PodEphemeralContainerLivenessProbeExecResult',
    'GetPodsV2PodEphemeralContainerLivenessProbeHttpGetResult',
    'GetPodsV2PodEphemeralContainerLivenessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodEphemeralContainerPortResult',
    'GetPodsV2PodEphemeralContainerReadinessProbeResult',
    'GetPodsV2PodEphemeralContainerReadinessProbeExecResult',
    'GetPodsV2PodEphemeralContainerReadinessProbeHttpGetResult',
    'GetPodsV2PodEphemeralContainerReadinessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodEphemeralContainerResourceResult',
    'GetPodsV2PodEphemeralContainerSecurityContextResult',
    'GetPodsV2PodEphemeralContainerSecurityContextCapabilityResult',
    'GetPodsV2PodEphemeralContainerStartupProbeResult',
    'GetPodsV2PodEphemeralContainerStartupProbeExecResult',
    'GetPodsV2PodEphemeralContainerStartupProbeHttpGetResult',
    'GetPodsV2PodEphemeralContainerStartupProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodEphemeralContainerVolumeMountResult',
    'GetPodsV2PodHostAliasResult',
    'GetPodsV2PodImagePullSecretResult',
    'GetPodsV2PodInitContainerResult',
    'GetPodsV2PodInitContainerEnvResult',
    'GetPodsV2PodInitContainerEnvFromResult',
    'GetPodsV2PodInitContainerEnvFromConfigMapRefResult',
    'GetPodsV2PodInitContainerEnvFromSecretRefResult',
    'GetPodsV2PodInitContainerLifecycleResult',
    'GetPodsV2PodInitContainerLifecyclePostStartResult',
    'GetPodsV2PodInitContainerLifecyclePostStartExecResult',
    'GetPodsV2PodInitContainerLifecyclePostStartHttpGetResult',
    'GetPodsV2PodInitContainerLifecyclePostStartHttpGetHttpHeaderResult',
    'GetPodsV2PodInitContainerLifecyclePreStopResult',
    'GetPodsV2PodInitContainerLifecyclePreStopExecResult',
    'GetPodsV2PodInitContainerLifecyclePreStopHttpGetResult',
    'GetPodsV2PodInitContainerLifecyclePreStopHttpGetHttpHeaderResult',
    'GetPodsV2PodInitContainerLivenessProbeResult',
    'GetPodsV2PodInitContainerLivenessProbeExecResult',
    'GetPodsV2PodInitContainerLivenessProbeHttpGetResult',
    'GetPodsV2PodInitContainerLivenessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodInitContainerPortResult',
    'GetPodsV2PodInitContainerReadinessProbeResult',
    'GetPodsV2PodInitContainerReadinessProbeExecResult',
    'GetPodsV2PodInitContainerReadinessProbeHttpGetResult',
    'GetPodsV2PodInitContainerReadinessProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodInitContainerResourceResult',
    'GetPodsV2PodInitContainerSecurityContextResult',
    'GetPodsV2PodInitContainerSecurityContextCapabilityResult',
    'GetPodsV2PodInitContainerStartupProbeResult',
    'GetPodsV2PodInitContainerStartupProbeExecResult',
    'GetPodsV2PodInitContainerStartupProbeHttpGetResult',
    'GetPodsV2PodInitContainerStartupProbeHttpGetHttpHeaderResult',
    'GetPodsV2PodInitContainerVolumeMountResult',
    'GetPodsV2PodReadinessGateResult',
    'GetPodsV2PodSecurityContextResult',
    'GetPodsV2PodSecurityContextSysctlResult',
    'GetPodsV2PodStatusResult',
    'GetPodsV2PodStatusConditionResult',
    'GetPodsV2PodVolumeResult',
    'GetPodsV2PodVolumeConfigMapResult',
    'GetPodsV2PodVolumeConfigMapItemResult',
    'GetPodsV2PodVolumeNfResult',
    'GetPodsV2PodVolumePersistentVolumeClaimResult',
    'GetPodsV2PodVolumeProjectedResult',
    'GetPodsV2PodVolumeProjectedSourceResult',
    'GetPodsV2PodVolumeProjectedSourceConfigMapResult',
    'GetPodsV2PodVolumeProjectedSourceConfigMapItemResult',
    'GetPodsV2PodVolumeProjectedSourceDownwardApiResult',
    'GetPodsV2PodVolumeProjectedSourceDownwardApiItemResult',
    'GetPodsV2PodVolumeProjectedSourceDownwardApiItemFieldRefResult',
    'GetPodsV2PodVolumeProjectedSourceDownwardApiItemResourceFileRefResult',
    'GetPodsV2PodVolumeProjectedSourceSecretResult',
    'GetPodsV2PodVolumeProjectedSourceSecretItemResult',
    'GetPodsV2PodVolumeSecretResult',
    'GetPodsV2PodVolumeSecretItemResult',
    'GetReplicaSetsV2ReplicaSetResult',
    'GetReplicaSetsV2ReplicaSetSelectorResult',
    'GetReplicaSetsV2ReplicaSetSelectorMatchExpressionResult',
    'GetReplicaSetsV2ReplicaSetStatusResult',
    'GetReplicaSetsV2ReplicaSetStatusConditionResult',
    'GetReplicaSetsV2ReplicaSetTemplateResult',
    'GetReplicaSetsV2ReplicaSetTemplateMetadataResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromConfigMapRefResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromSecretRefResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecycleResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartExecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopExecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeExecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerPortResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeExecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerResourceResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextCapabilityResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeExecResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecContainerVolumeMountResult',
    'GetReplicaSetsV2ReplicaSetTemplateSpecImagePullSecretResult',
    'GetResourcesV2ResourceResult',
    'GetSecretsV2SecretResult',
    'GetServicesV2ServiceResult',
    'GetServicesV2ServicePortResult',
    'GetServicesV2ServiceStatusResult',
    'GetServicesV2ServiceStatusConditionResult',
    'GetServicesV2ServiceStatusLoadbalancerResult',
    'GetServicesV2ServiceStatusLoadbalancerIngressResult',
    'GetServicesV2ServiceStatusLoadbalancerIngressPortResult',
    'GetStorageClassesV2StorageClassResult',
    'GetStorageClassesV2StorageClassAllowedTopologyResult',
    'GetStorageClassesV2StorageClassAllowedTopologyMatchLabelExpressionResult',
]

@pulumi.output_type
class DeploymentV2Selector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2Selector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2Selector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2Selector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.DeploymentV2SelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.DeploymentV2SelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class DeploymentV2SelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentV2Status(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2Status. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2Status.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2Status.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.DeploymentV2StatusCondition']] = None,
                 observed_generation: Optional[_builtins.int] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.DeploymentV2StatusCondition']]:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class DeploymentV2StatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "lastUpdateTime":
            suggest = "last_update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2StatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2StatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2StatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[_builtins.str] = None,
                 last_update_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentV2Strategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingUpdate":
            suggest = "rolling_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2Strategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2Strategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2Strategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rolling_update: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "rolling_update")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentV2Template(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.DeploymentV2TemplateMetadata'] = None,
                 spec: Optional['outputs.DeploymentV2TemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.DeploymentV2TemplateMetadata']:
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional['outputs.DeploymentV2TemplateSpec']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class DeploymentV2TemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, _builtins.str]] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class DeploymentV2TemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDeadlineSeconds":
            suggest = "active_deadline_seconds"
        elif key == "dnsPolicy":
            suggest = "dns_policy"
        elif key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeName":
            suggest = "node_name"
        elif key == "restartPolicy":
            suggest = "restart_policy"
        elif key == "schedulerName":
            suggest = "scheduler_name"
        elif key == "setHostnameAsPqdn":
            suggest = "set_hostname_as_pqdn"
        elif key == "shareProcessNamespace":
            suggest = "share_process_namespace"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Sequence['outputs.DeploymentV2TemplateSpecContainer'],
                 active_deadline_seconds: Optional[_builtins.int] = None,
                 affinity: Optional['outputs.DeploymentV2TemplateSpecAffinity'] = None,
                 dns_policy: Optional[_builtins.str] = None,
                 hostname: Optional[_builtins.str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.DeploymentV2TemplateSpecImagePullSecret']] = None,
                 node_name: Optional[_builtins.str] = None,
                 overhead: Optional[Mapping[str, _builtins.str]] = None,
                 restart_policy: Optional[_builtins.str] = None,
                 scheduler_name: Optional[_builtins.str] = None,
                 set_hostname_as_pqdn: Optional[_builtins.bool] = None,
                 share_process_namespace: Optional[_builtins.bool] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        pulumi.set(__self__, "containers", containers)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if set_hostname_as_pqdn is not None:
            pulumi.set(__self__, "set_hostname_as_pqdn", set_hostname_as_pqdn)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.DeploymentV2TemplateSpecContainer']:
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinity']:
        return pulumi.get(self, "affinity")

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dns_policy")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecImagePullSecret']]:
        return pulumi.get(self, "image_pull_secrets")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "overhead")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scheduler_name")

    @_builtins.property
    @pulumi.getter(name="setHostnameAsPqdn")
    def set_hostname_as_pqdn(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "set_hostname_as_pqdn")

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "share_process_namespace")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_affinity: Optional['outputs.DeploymentV2TemplateSpecAffinityNodeAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @_builtins.property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @_builtins.property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityNodeAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityNodeAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression']]:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecutions":
            suggest = "preferred_during_scheduling_ignored_during_executions"
        elif key == "requiredDuringSchedulingIgnoredDuringExecutions":
            suggest = "required_during_scheduling_ignored_during_executions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_executions: Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: _builtins.int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: _builtins.str,
                 label_selector: Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")

    @_builtins.property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: _builtins.str,
                 label_selector: Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")

    @_builtins.property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class DeploymentV2TemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentV2TemplateSpecContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envFroms":
            suggest = "env_froms"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "startupProbe":
            suggest = "startup_probe"
        elif key == "stdinOnce":
            suggest = "stdin_once"
        elif key == "terminationMessagePath":
            suggest = "termination_message_path"
        elif key == "terminationMessagePolicy":
            suggest = "termination_message_policy"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 args: Optional[Sequence[_builtins.str]] = None,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 env_froms: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerEnvFrom']] = None,
                 envs: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerEnv']] = None,
                 image: Optional[_builtins.str] = None,
                 lifecycle: Optional['outputs.DeploymentV2TemplateSpecContainerLifecycle'] = None,
                 liveness_probe: Optional['outputs.DeploymentV2TemplateSpecContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerPort']] = None,
                 readiness_probe: Optional['outputs.DeploymentV2TemplateSpecContainerReadinessProbe'] = None,
                 resources: Optional['outputs.DeploymentV2TemplateSpecContainerResources'] = None,
                 security_context: Optional['outputs.DeploymentV2TemplateSpecContainerSecurityContext'] = None,
                 startup_probe: Optional['outputs.DeploymentV2TemplateSpecContainerStartupProbe'] = None,
                 stdin: Optional[_builtins.bool] = None,
                 stdin_once: Optional[_builtins.bool] = None,
                 termination_message_path: Optional[_builtins.str] = None,
                 termination_message_policy: Optional[_builtins.str] = None,
                 tty: Optional[_builtins.bool] = None,
                 volume_mounts: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerVolumeMount']] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the container.
        :param Sequence[_builtins.str] args: Specifies the arguments to the entrypoint of the container.
        :param Sequence[_builtins.str] commands: Specifies the command of the container.
        :param Sequence['DeploymentV2TemplateSpecContainerEnvFromArgs'] env_froms: The sources to populate environment variables of the container.
        :param _builtins.str image: Specifies the image name of the CCI Pod container.
        :param 'DeploymentV2TemplateSpecContainerLifecycleArgs' lifecycle: Specifies the lifecycle of the container.
        :param 'DeploymentV2TemplateSpecContainerLivenessProbeArgs' liveness_probe: Specifies the liveness probe of the container.
        :param Sequence['DeploymentV2TemplateSpecContainerPortArgs'] ports: Specifies the ports of the container.
        :param 'DeploymentV2TemplateSpecContainerReadinessProbeArgs' readiness_probe: Specifies the readiness probe of the container.
        :param 'DeploymentV2TemplateSpecContainerResourcesArgs' resources: Specifies the resources of the container.
        :param 'DeploymentV2TemplateSpecContainerSecurityContextArgs' security_context: Specifies the security context of the container.
        :param 'DeploymentV2TemplateSpecContainerStartupProbeArgs' startup_probe: Specifies the startup probe of the container.
        :param _builtins.bool stdin: Specifies whether this container should allocate a buffer for stdin in the container runtime.
        :param _builtins.bool stdin_once: Specifies whether this container runtime should close the stdin channel.
        :param _builtins.str termination_message_path: Specifies the termination message path of the CCI Pod container.
        :param _builtins.str termination_message_policy: Specifies the termination message policy of the CCI Pod container.
        :param _builtins.bool tty: Specifies whether this container should allocate a TTY for itself.
        :param _builtins.str working_dir: Specifies the working directory of the CCI Pod container.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the arguments to the entrypoint of the container.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command of the container.
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerEnvFrom']]:
        """
        The sources to populate environment variables of the container.
        """
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerEnv']]:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        Specifies the image name of the CCI Pod container.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecycle']:
        """
        Specifies the lifecycle of the container.
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLivenessProbe']:
        """
        Specifies the liveness probe of the container.
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerPort']]:
        """
        Specifies the ports of the container.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerReadinessProbe']:
        """
        Specifies the readiness probe of the container.
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerResources']:
        """
        Specifies the resources of the container.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerSecurityContext']:
        """
        Specifies the security context of the container.
        """
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerStartupProbe']:
        """
        Specifies the startup probe of the container.
        """
        return pulumi.get(self, "startup_probe")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a buffer for stdin in the container runtime.
        """
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container runtime should close the stdin channel.
        """
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message path of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message policy of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a TTY for itself.
        """
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        Specifies the working directory of the CCI Pod container.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerEnv(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerEnvFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerEnvFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerEnvFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerEnvFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.DeploymentV2TemplateSpecContainerEnvFromConfigMapRef'] = None,
                 prefix: Optional[_builtins.str] = None,
                 secret_ref: Optional['outputs.DeploymentV2TemplateSpecContainerEnvFromSecretRef'] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerEnvFromConfigMapRefArgs' config_map_ref: Specifies the config map.
        :param _builtins.str prefix: Specifies the prefix.
        :param 'DeploymentV2TemplateSpecContainerEnvFromSecretRefArgs' secret_ref: Specifies the secret.
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @_builtins.property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerEnvFromConfigMapRef']:
        """
        Specifies the config map.
        """
        return pulumi.get(self, "config_map_ref")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerEnvFromSecretRef']:
        """
        Specifies the secret.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_start: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStop'] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerLifecyclePostStartArgs' post_start: The lifecycle post start of the CCI Pod container.
        :param 'DeploymentV2TemplateSpecContainerLifecyclePreStopArgs' pre_stop: The lifecycle pre stop of the CCI Pod container.
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStart']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStop']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePostStart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLifecyclePostStart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePostStart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePostStart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet'] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerLifecyclePostStartExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePostStartHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePreStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLifecyclePreStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePreStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePreStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet'] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerLifecyclePreStopExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLifecyclePreStopHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.DeploymentV2TemplateSpecContainerLivenessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLivenessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerLivenessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['DeploymentV2TemplateSpecContainerLivenessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerLivenessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLivenessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLivenessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLivenessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['DeploymentV2TemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerLivenessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerLivenessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int container_port: Specifies the number of port to expose on the IP address of pod.
        :param _builtins.str name: Specifies the port name of the container.
        :param _builtins.str protocol: Specifies the protocol for container port.
        """
        pulumi.set(__self__, "container_port", container_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        """
        Specifies the number of port to expose on the IP address of pod.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the port name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol for container port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.DeploymentV2TemplateSpecContainerReadinessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerReadinessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerReadinessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['DeploymentV2TemplateSpecContainerReadinessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerReadinessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerReadinessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerReadinessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerReadinessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['DeploymentV2TemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerReadinessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerReadinessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] limits: Specifies the limits of resource.
        :param Mapping[str, _builtins.str] requests: Specifies the requests of the resource.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the limits of resource.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the requests of the resource.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "procMount":
            suggest = "proc_mount"
        elif key == "readOnlyRootFileSystem":
            suggest = "read_only_root_file_system"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Optional['outputs.DeploymentV2TemplateSpecContainerSecurityContextCapabilities'] = None,
                 proc_mount: Optional[_builtins.str] = None,
                 read_only_root_file_system: Optional[_builtins.bool] = None,
                 run_as_group: Optional[_builtins.int] = None,
                 run_as_non_root: Optional[_builtins.bool] = None,
                 run_as_user: Optional[_builtins.int] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerSecurityContextCapabilitiesArgs' capabilities: Specifies the capabilities of the security context.
        :param _builtins.str proc_mount: Specifies the denotes the type of proc mount to use for the containers.
        :param _builtins.bool read_only_root_file_system: Whether this container has a read-only root file system.
        :param _builtins.int run_as_group: The GID TO run the entrypoint of the container process.
        :param _builtins.bool run_as_non_root: The container must run as a non-root user.
        :param _builtins.int run_as_user: The UID to run the entrypoint of the container process.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_file_system is not None:
            pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerSecurityContextCapabilities']:
        """
        Specifies the capabilities of the security context.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[_builtins.str]:
        """
        Specifies the denotes the type of proc mount to use for the containers.
        """
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> Optional[_builtins.bool]:
        """
        Whether this container has a read-only root file system.
        """
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[_builtins.int]:
        """
        The GID TO run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[_builtins.bool]:
        """
        The container must run as a non-root user.
        """
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[_builtins.int]:
        """
        The UID to run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[_builtins.str]] = None,
                 drops: Optional[Sequence[_builtins.str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerStartupProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerStartupProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerStartupProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerStartupProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.DeploymentV2TemplateSpecContainerStartupProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerStartupProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'DeploymentV2TemplateSpecContainerStartupProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['DeploymentV2TemplateSpecContainerStartupProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.DeploymentV2TemplateSpecContainerStartupProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerStartupProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerStartupProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerStartupProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerStartupProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerStartupProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerStartupProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerStartupProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['DeploymentV2TemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.DeploymentV2TemplateSpecContainerStartupProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerStartupProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentV2TemplateSpecContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"
        elif key == "extendPathMode":
            suggest = "extend_path_mode"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentV2TemplateSpecContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentV2TemplateSpecContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentV2TemplateSpecContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 extend_path_mode: Optional[_builtins.str] = None,
                 read_only: Optional[_builtins.bool] = None,
                 sub_path: Optional[_builtins.str] = None,
                 sub_path_expr: Optional[_builtins.str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if extend_path_mode is not None:
            pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class DeploymentV2TemplateSpecImagePullSecret(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class HpaV2Behavior(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleDown":
            suggest = "scale_down"
        elif key == "scaleUp":
            suggest = "scale_up"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2Behavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2Behavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2Behavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_down: Optional['outputs.HpaV2BehaviorScaleDown'] = None,
                 scale_up: Optional['outputs.HpaV2BehaviorScaleUp'] = None):
        if scale_down is not None:
            pulumi.set(__self__, "scale_down", scale_down)
        if scale_up is not None:
            pulumi.set(__self__, "scale_up", scale_up)

    @_builtins.property
    @pulumi.getter(name="scaleDown")
    def scale_down(self) -> Optional['outputs.HpaV2BehaviorScaleDown']:
        return pulumi.get(self, "scale_down")

    @_builtins.property
    @pulumi.getter(name="scaleUp")
    def scale_up(self) -> Optional['outputs.HpaV2BehaviorScaleUp']:
        return pulumi.get(self, "scale_up")


@pulumi.output_type
class HpaV2BehaviorScaleDown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectPolicy":
            suggest = "select_policy"
        elif key == "stabilizationWindowSeconds":
            suggest = "stabilization_window_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2BehaviorScaleDown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2BehaviorScaleDown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2BehaviorScaleDown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policies: Optional[Sequence['outputs.HpaV2BehaviorScaleDownPolicy']] = None,
                 select_policy: Optional[_builtins.str] = None,
                 stabilization_window_seconds: Optional[_builtins.int] = None):
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.HpaV2BehaviorScaleDownPolicy']]:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "select_policy")

    @_builtins.property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class HpaV2BehaviorScaleDownPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodSeconds":
            suggest = "period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2BehaviorScaleDownPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2BehaviorScaleDownPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2BehaviorScaleDownPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period_seconds: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.int):
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2BehaviorScaleUp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectPolicy":
            suggest = "select_policy"
        elif key == "stabilizationWindowSeconds":
            suggest = "stabilization_window_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2BehaviorScaleUp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2BehaviorScaleUp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2BehaviorScaleUp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policies: Optional[Sequence['outputs.HpaV2BehaviorScaleUpPolicy']] = None,
                 select_policy: Optional[_builtins.str] = None,
                 stabilization_window_seconds: Optional[_builtins.int] = None):
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.HpaV2BehaviorScaleUpPolicy']]:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "select_policy")

    @_builtins.property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class HpaV2BehaviorScaleUpPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodSeconds":
            suggest = "period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2BehaviorScaleUpPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2BehaviorScaleUpPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2BehaviorScaleUpPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period_seconds: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.int):
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2Metric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerResource":
            suggest = "container_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2Metric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2Metric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2Metric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 container_resource: Optional['outputs.HpaV2MetricContainerResource'] = None,
                 external: Optional['outputs.HpaV2MetricExternal'] = None,
                 object: Optional['outputs.HpaV2MetricObject'] = None,
                 pods: Optional['outputs.HpaV2MetricPods'] = None,
                 resources: Optional['outputs.HpaV2MetricResources'] = None):
        pulumi.set(__self__, "type", type)
        if container_resource is not None:
            pulumi.set(__self__, "container_resource", container_resource)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if pods is not None:
            pulumi.set(__self__, "pods", pods)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="containerResource")
    def container_resource(self) -> Optional['outputs.HpaV2MetricContainerResource']:
        return pulumi.get(self, "container_resource")

    @_builtins.property
    @pulumi.getter
    def external(self) -> Optional['outputs.HpaV2MetricExternal']:
        return pulumi.get(self, "external")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional['outputs.HpaV2MetricObject']:
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter
    def pods(self) -> Optional['outputs.HpaV2MetricPods']:
        return pulumi.get(self, "pods")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.HpaV2MetricResources']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class HpaV2MetricContainerResource(dict):
    def __init__(__self__, *,
                 container: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 target: Optional['outputs.HpaV2MetricContainerResourceTarget'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2MetricContainerResourceTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2MetricContainerResourceTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricContainerResourceTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricContainerResourceTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricContainerResourceTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2MetricExternal(dict):
    def __init__(__self__, *,
                 metric: 'outputs.HpaV2MetricExternalMetric',
                 target: 'outputs.HpaV2MetricExternalTarget'):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> 'outputs.HpaV2MetricExternalMetric':
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> 'outputs.HpaV2MetricExternalTarget':
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2MetricExternalMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2MetricExternalMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2MetricExternalMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2MetricExternalMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricExternalMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricExternalMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricExternalMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2MetricExternalMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2MetricExternalMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2MetricExternalMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2MetricExternalTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricExternalTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricExternalTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricExternalTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2MetricObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "describedObject":
            suggest = "described_object"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 described_object: 'outputs.HpaV2MetricObjectDescribedObject',
                 metric: 'outputs.HpaV2MetricObjectMetric',
                 target: 'outputs.HpaV2MetricObjectTarget'):
        pulumi.set(__self__, "described_object", described_object)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="describedObject")
    def described_object(self) -> 'outputs.HpaV2MetricObjectDescribedObject':
        return pulumi.get(self, "described_object")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> 'outputs.HpaV2MetricObjectMetric':
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> 'outputs.HpaV2MetricObjectTarget':
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2MetricObjectDescribedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricObjectDescribedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricObjectDescribedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricObjectDescribedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class HpaV2MetricObjectMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2MetricObjectMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2MetricObjectMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2MetricObjectMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricObjectMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricObjectMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricObjectMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2MetricObjectMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2MetricObjectMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2MetricObjectMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2MetricObjectTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricObjectTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricObjectTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricObjectTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2MetricPods(dict):
    def __init__(__self__, *,
                 metric: Optional['outputs.HpaV2MetricPodsMetric'] = None,
                 target: Optional['outputs.HpaV2MetricPodsTarget'] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional['outputs.HpaV2MetricPodsMetric']:
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2MetricPodsTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2MetricPodsMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2MetricPodsMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2MetricPodsMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2MetricPodsMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricPodsMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricPodsMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricPodsMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2MetricPodsMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2MetricPodsMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2MetricPodsMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2MetricPodsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricPodsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricPodsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricPodsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2MetricResources(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 target: Optional['outputs.HpaV2MetricResourcesTarget'] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2MetricResourcesTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2MetricResourcesTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2MetricResourcesTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2MetricResourcesTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2MetricResourcesTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2ScaleTargetRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2ScaleTargetRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2ScaleTargetRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2ScaleTargetRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class HpaV2Status(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentMetrics":
            suggest = "current_metrics"
        elif key == "currentReplicas":
            suggest = "current_replicas"
        elif key == "desiredReplicas":
            suggest = "desired_replicas"
        elif key == "lastScaleTime":
            suggest = "last_scale_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2Status. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2Status.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2Status.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.HpaV2StatusCondition']] = None,
                 current_metrics: Optional[Sequence['outputs.HpaV2StatusCurrentMetric']] = None,
                 current_replicas: Optional[_builtins.int] = None,
                 desired_replicas: Optional[_builtins.int] = None,
                 last_scale_time: Optional[_builtins.str] = None,
                 observed_generation: Optional[_builtins.int] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if current_metrics is not None:
            pulumi.set(__self__, "current_metrics", current_metrics)
        if current_replicas is not None:
            pulumi.set(__self__, "current_replicas", current_replicas)
        if desired_replicas is not None:
            pulumi.set(__self__, "desired_replicas", desired_replicas)
        if last_scale_time is not None:
            pulumi.set(__self__, "last_scale_time", last_scale_time)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.HpaV2StatusCondition']]:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="currentMetrics")
    def current_metrics(self) -> Optional[Sequence['outputs.HpaV2StatusCurrentMetric']]:
        return pulumi.get(self, "current_metrics")

    @_builtins.property
    @pulumi.getter(name="currentReplicas")
    def current_replicas(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "current_replicas")

    @_builtins.property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "desired_replicas")

    @_builtins.property
    @pulumi.getter(name="lastScaleTime")
    def last_scale_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_scale_time")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class HpaV2StatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class HpaV2StatusCurrentMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerResource":
            suggest = "container_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 container_resource: Optional['outputs.HpaV2StatusCurrentMetricContainerResource'] = None,
                 external: Optional['outputs.HpaV2StatusCurrentMetricExternal'] = None,
                 object: Optional['outputs.HpaV2StatusCurrentMetricObject'] = None,
                 pods: Optional['outputs.HpaV2StatusCurrentMetricPods'] = None,
                 resources: Optional['outputs.HpaV2StatusCurrentMetricResources'] = None):
        pulumi.set(__self__, "type", type)
        if container_resource is not None:
            pulumi.set(__self__, "container_resource", container_resource)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if pods is not None:
            pulumi.set(__self__, "pods", pods)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="containerResource")
    def container_resource(self) -> Optional['outputs.HpaV2StatusCurrentMetricContainerResource']:
        return pulumi.get(self, "container_resource")

    @_builtins.property
    @pulumi.getter
    def external(self) -> Optional['outputs.HpaV2StatusCurrentMetricExternal']:
        return pulumi.get(self, "external")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional['outputs.HpaV2StatusCurrentMetricObject']:
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter
    def pods(self) -> Optional['outputs.HpaV2StatusCurrentMetricPods']:
        return pulumi.get(self, "pods")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.HpaV2StatusCurrentMetricResources']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class HpaV2StatusCurrentMetricContainerResource(dict):
    def __init__(__self__, *,
                 container: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 target: Optional['outputs.HpaV2StatusCurrentMetricContainerResourceTarget'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2StatusCurrentMetricContainerResourceTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2StatusCurrentMetricContainerResourceTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricContainerResourceTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricContainerResourceTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricContainerResourceTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2StatusCurrentMetricExternal(dict):
    def __init__(__self__, *,
                 metric: 'outputs.HpaV2StatusCurrentMetricExternalMetric',
                 target: 'outputs.HpaV2StatusCurrentMetricExternalTarget'):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> 'outputs.HpaV2StatusCurrentMetricExternalMetric':
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> 'outputs.HpaV2StatusCurrentMetricExternalTarget':
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2StatusCurrentMetricExternalMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2StatusCurrentMetricExternalMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2StatusCurrentMetricExternalMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2StatusCurrentMetricExternalMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricExternalMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricExternalMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricExternalMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2StatusCurrentMetricExternalMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2StatusCurrentMetricExternalMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2StatusCurrentMetricExternalMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2StatusCurrentMetricExternalTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricExternalTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricExternalTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricExternalTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2StatusCurrentMetricObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "describedObject":
            suggest = "described_object"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 described_object: 'outputs.HpaV2StatusCurrentMetricObjectDescribedObject',
                 metric: 'outputs.HpaV2StatusCurrentMetricObjectMetric',
                 target: 'outputs.HpaV2StatusCurrentMetricObjectTarget'):
        pulumi.set(__self__, "described_object", described_object)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="describedObject")
    def described_object(self) -> 'outputs.HpaV2StatusCurrentMetricObjectDescribedObject':
        return pulumi.get(self, "described_object")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> 'outputs.HpaV2StatusCurrentMetricObjectMetric':
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> 'outputs.HpaV2StatusCurrentMetricObjectTarget':
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2StatusCurrentMetricObjectDescribedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricObjectDescribedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricObjectDescribedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricObjectDescribedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class HpaV2StatusCurrentMetricObjectMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2StatusCurrentMetricObjectMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2StatusCurrentMetricObjectMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2StatusCurrentMetricObjectMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricObjectMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricObjectMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricObjectMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2StatusCurrentMetricObjectMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2StatusCurrentMetricObjectMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2StatusCurrentMetricObjectMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2StatusCurrentMetricObjectTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricObjectTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricObjectTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricObjectTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2StatusCurrentMetricPods(dict):
    def __init__(__self__, *,
                 metric: Optional['outputs.HpaV2StatusCurrentMetricPodsMetric'] = None,
                 target: Optional['outputs.HpaV2StatusCurrentMetricPodsTarget'] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional['outputs.HpaV2StatusCurrentMetricPodsMetric']:
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2StatusCurrentMetricPodsTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2StatusCurrentMetricPodsMetric(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selector: Optional['outputs.HpaV2StatusCurrentMetricPodsMetricSelector'] = None):
        pulumi.set(__self__, "name", name)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional['outputs.HpaV2StatusCurrentMetricPodsMetricSelector']:
        return pulumi.get(self, "selector")


@pulumi.output_type
class HpaV2StatusCurrentMetricPodsMetricSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricPodsMetricSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricPodsMetricSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricPodsMetricSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.HpaV2StatusCurrentMetricPodsMetricSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.HpaV2StatusCurrentMetricPodsMetricSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class HpaV2StatusCurrentMetricPodsMetricSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Mapping[str, _builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class HpaV2StatusCurrentMetricPodsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricPodsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricPodsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricPodsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HpaV2StatusCurrentMetricResources(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 target: Optional['outputs.HpaV2StatusCurrentMetricResourcesTarget'] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional['outputs.HpaV2StatusCurrentMetricResourcesTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class HpaV2StatusCurrentMetricResourcesTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HpaV2StatusCurrentMetricResourcesTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HpaV2StatusCurrentMetricResourcesTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HpaV2StatusCurrentMetricResourcesTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_utilization: Optional[_builtins.int] = None,
                 average_value: Optional[Mapping[str, _builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[Mapping[str, _builtins.str]] = None):
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageSnapshotV2BuildingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoCreateEip":
            suggest = "auto_create_eip"
        elif key == "autoCreateEipAttribute":
            suggest = "auto_create_eip_attribute"
        elif key == "eipId":
            suggest = "eip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshotV2BuildingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshotV2BuildingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshotV2BuildingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_create_eip: Optional[_builtins.bool] = None,
                 auto_create_eip_attribute: Optional['outputs.ImageSnapshotV2BuildingConfigAutoCreateEipAttribute'] = None,
                 eip_id: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if auto_create_eip is not None:
            pulumi.set(__self__, "auto_create_eip", auto_create_eip)
        if auto_create_eip_attribute is not None:
            pulumi.set(__self__, "auto_create_eip_attribute", auto_create_eip_attribute)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter(name="autoCreateEip")
    def auto_create_eip(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "auto_create_eip")

    @_builtins.property
    @pulumi.getter(name="autoCreateEipAttribute")
    def auto_create_eip_attribute(self) -> Optional['outputs.ImageSnapshotV2BuildingConfigAutoCreateEipAttribute']:
        return pulumi.get(self, "auto_create_eip_attribute")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ImageSnapshotV2BuildingConfigAutoCreateEipAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthChargeMode":
            suggest = "bandwidth_charge_mode"
        elif key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshotV2BuildingConfigAutoCreateEipAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshotV2BuildingConfigAutoCreateEipAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshotV2BuildingConfigAutoCreateEipAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_charge_mode: Optional[_builtins.str] = None,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        if bandwidth_charge_mode is not None:
            pulumi.set(__self__, "bandwidth_charge_mode", bandwidth_charge_mode)
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthChargeMode")
    def bandwidth_charge_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bandwidth_charge_mode")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ImageSnapshotV2Image(dict):
    def __init__(__self__, *,
                 image: Optional[_builtins.str] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class ImageSnapshotV2Registry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecret":
            suggest = "image_pull_secret"
        elif key == "insecureSkipVerify":
            suggest = "insecure_skip_verify"
        elif key == "plainHttp":
            suggest = "plain_http"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshotV2Registry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshotV2Registry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshotV2Registry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_pull_secret: Optional[_builtins.str] = None,
                 insecure_skip_verify: Optional[_builtins.bool] = None,
                 plain_http: Optional[_builtins.bool] = None,
                 server: Optional[_builtins.str] = None):
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)
        if plain_http is not None:
            pulumi.set(__self__, "plain_http", plain_http)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @_builtins.property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_pull_secret")

    @_builtins.property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "insecure_skip_verify")

    @_builtins.property
    @pulumi.getter(name="plainHttp")
    def plain_http(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "plain_http")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server")


@pulumi.output_type
class ImageSnapshotV2Status(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireDateTime":
            suggest = "expire_date_time"
        elif key == "lastUpdatedTime":
            suggest = "last_updated_time"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "snapshotName":
            suggest = "snapshot_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshotV2Status. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshotV2Status.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshotV2Status.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_date_time: Optional[_builtins.str] = None,
                 images: Optional[Sequence['outputs.ImageSnapshotV2StatusImage']] = None,
                 last_updated_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 phase: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 snapshot_id: Optional[_builtins.str] = None,
                 snapshot_name: Optional[_builtins.str] = None):
        if expire_date_time is not None:
            pulumi.set(__self__, "expire_date_time", expire_date_time)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if last_updated_time is not None:
            pulumi.set(__self__, "last_updated_time", last_updated_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @_builtins.property
    @pulumi.getter(name="expireDateTime")
    def expire_date_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expire_date_time")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.ImageSnapshotV2StatusImage']]:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_name")


@pulumi.output_type
class ImageSnapshotV2StatusImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeBytes":
            suggest = "size_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshotV2StatusImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshotV2StatusImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshotV2StatusImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 digest: Optional[_builtins.str] = None,
                 image: Optional[_builtins.str] = None,
                 size_bytes: Optional[_builtins.int] = None):
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if size_bytes is not None:
            pulumi.set(__self__, "size_bytes", size_bytes)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "size_bytes")


@pulumi.output_type
class NetworkV2Status(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetAttrs":
            suggest = "subnet_attrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV2Status. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV2Status.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV2Status.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.NetworkV2StatusCondition']] = None,
                 status: Optional[_builtins.str] = None,
                 subnet_attrs: Optional[Sequence['outputs.NetworkV2StatusSubnetAttr']] = None):
        """
        :param Sequence['NetworkV2StatusConditionArgs'] conditions: Tthe conditions of the CCI network.
        :param _builtins.str status: The status of the CCI network.
        :param Sequence['NetworkV2StatusSubnetAttrArgs'] subnet_attrs: The subnet attributes of the CCI network.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_attrs is not None:
            pulumi.set(__self__, "subnet_attrs", subnet_attrs)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.NetworkV2StatusCondition']]:
        """
        Tthe conditions of the CCI network.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the CCI network.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetAttrs")
    def subnet_attrs(self) -> Optional[Sequence['outputs.NetworkV2StatusSubnetAttr']]:
        """
        The subnet attributes of the CCI network.
        """
        return pulumi.get(self, "subnet_attrs")


@pulumi.output_type
class NetworkV2StatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV2StatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV2StatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV2StatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str last_transition_time: The last transition time of the CCI network conditions.
        :param _builtins.str message: The message of the CCI network conditions.
        :param _builtins.str reason: The reason of the CCI network conditions.
        :param _builtins.str status: Tthe status of the CCI network conditions.
        :param _builtins.str type: The type of the CCI network conditions.
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[_builtins.str]:
        """
        The last transition time of the CCI network conditions.
        """
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The message of the CCI network conditions.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        """
        The reason of the CCI network conditions.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Tthe status of the CCI network conditions.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the CCI network conditions.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkV2StatusSubnetAttr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "subnetV4Id":
            suggest = "subnet_v4_id"
        elif key == "subnetV6Id":
            suggest = "subnet_v6_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV2StatusSubnetAttr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV2StatusSubnetAttr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV2StatusSubnetAttr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: Optional[_builtins.str] = None,
                 subnet_v4_id: Optional[_builtins.str] = None,
                 subnet_v6_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_id: The ID of the CCI network.
        :param _builtins.str subnet_v4_id: The subnet IPv4 ID of the CCI network.
        :param _builtins.str subnet_v6_id: The subnet IPv6 ID of the CCI network.
        """
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if subnet_v4_id is not None:
            pulumi.set(__self__, "subnet_v4_id", subnet_v4_id)
        if subnet_v6_id is not None:
            pulumi.set(__self__, "subnet_v6_id", subnet_v6_id)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[_builtins.str]:
        """
        The ID of the CCI network.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="subnetV4Id")
    def subnet_v4_id(self) -> Optional[_builtins.str]:
        """
        The subnet IPv4 ID of the CCI network.
        """
        return pulumi.get(self, "subnet_v4_id")

    @_builtins.property
    @pulumi.getter(name="subnetV6Id")
    def subnet_v6_id(self) -> Optional[_builtins.str]:
        """
        The subnet IPv6 ID of the CCI network.
        """
        return pulumi.get(self, "subnet_v6_id")


@pulumi.output_type
class NetworkV2Subnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV2Subnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV2Subnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV2Subnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str subnet_id: Specifies the subnet ID of the CCI network.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        Specifies the subnet ID of the CCI network.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class PersistentVolumeClaimV2Resources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class PersistentVolumeClaimV2Selector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentVolumeClaimV2Selector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentVolumeClaimV2Selector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentVolumeClaimV2Selector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PersistentVolumeClaimV2SelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PersistentVolumeClaimV2SelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class PersistentVolumeClaimV2SelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PersistentVolumeV2ClaimRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "fieldPath":
            suggest = "field_path"
        elif key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentVolumeV2ClaimRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentVolumeV2ClaimRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentVolumeV2ClaimRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[_builtins.str] = None,
                 field_path: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 resource_version: Optional[_builtins.str] = None,
                 uid: Optional[_builtins.str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "field_path")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "uid")


@pulumi.output_type
class PersistentVolumeV2Csi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeHandle":
            suggest = "volume_handle"
        elif key == "controllerExpandSecretRef":
            suggest = "controller_expand_secret_ref"
        elif key == "controllerPublishSecretRef":
            suggest = "controller_publish_secret_ref"
        elif key == "fsType":
            suggest = "fs_type"
        elif key == "nodeExpandSecretRef":
            suggest = "node_expand_secret_ref"
        elif key == "nodePublishSecretRef":
            suggest = "node_publish_secret_ref"
        elif key == "nodeStageSecretRef":
            suggest = "node_stage_secret_ref"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "volumeAttributes":
            suggest = "volume_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentVolumeV2Csi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentVolumeV2Csi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentVolumeV2Csi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 driver: _builtins.str,
                 volume_handle: _builtins.str,
                 controller_expand_secret_ref: Optional['outputs.PersistentVolumeV2CsiControllerExpandSecretRef'] = None,
                 controller_publish_secret_ref: Optional['outputs.PersistentVolumeV2CsiControllerPublishSecretRef'] = None,
                 fs_type: Optional[_builtins.str] = None,
                 node_expand_secret_ref: Optional['outputs.PersistentVolumeV2CsiNodeExpandSecretRef'] = None,
                 node_publish_secret_ref: Optional['outputs.PersistentVolumeV2CsiNodePublishSecretRef'] = None,
                 node_stage_secret_ref: Optional['outputs.PersistentVolumeV2CsiNodeStageSecretRef'] = None,
                 read_only: Optional[_builtins.bool] = None,
                 volume_attributes: Optional[Mapping[str, _builtins.str]] = None):
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "volume_handle", volume_handle)
        if controller_expand_secret_ref is not None:
            pulumi.set(__self__, "controller_expand_secret_ref", controller_expand_secret_ref)
        if controller_publish_secret_ref is not None:
            pulumi.set(__self__, "controller_publish_secret_ref", controller_publish_secret_ref)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_expand_secret_ref is not None:
            pulumi.set(__self__, "node_expand_secret_ref", node_expand_secret_ref)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if node_stage_secret_ref is not None:
            pulumi.set(__self__, "node_stage_secret_ref", node_stage_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @_builtins.property
    @pulumi.getter
    def driver(self) -> _builtins.str:
        return pulumi.get(self, "driver")

    @_builtins.property
    @pulumi.getter(name="volumeHandle")
    def volume_handle(self) -> _builtins.str:
        return pulumi.get(self, "volume_handle")

    @_builtins.property
    @pulumi.getter(name="controllerExpandSecretRef")
    def controller_expand_secret_ref(self) -> Optional['outputs.PersistentVolumeV2CsiControllerExpandSecretRef']:
        return pulumi.get(self, "controller_expand_secret_ref")

    @_builtins.property
    @pulumi.getter(name="controllerPublishSecretRef")
    def controller_publish_secret_ref(self) -> Optional['outputs.PersistentVolumeV2CsiControllerPublishSecretRef']:
        return pulumi.get(self, "controller_publish_secret_ref")

    @_builtins.property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fs_type")

    @_builtins.property
    @pulumi.getter(name="nodeExpandSecretRef")
    def node_expand_secret_ref(self) -> Optional['outputs.PersistentVolumeV2CsiNodeExpandSecretRef']:
        return pulumi.get(self, "node_expand_secret_ref")

    @_builtins.property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.PersistentVolumeV2CsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @_builtins.property
    @pulumi.getter(name="nodeStageSecretRef")
    def node_stage_secret_ref(self) -> Optional['outputs.PersistentVolumeV2CsiNodeStageSecretRef']:
        return pulumi.get(self, "node_stage_secret_ref")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "volume_attributes")


@pulumi.output_type
class PersistentVolumeV2CsiControllerExpandSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class PersistentVolumeV2CsiControllerPublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class PersistentVolumeV2CsiNodeExpandSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class PersistentVolumeV2CsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class PersistentVolumeV2CsiNodeStageSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class PersistentVolumeV2NodeAffinity(dict):
    def __init__(__self__, *,
                 required: Optional['outputs.PersistentVolumeV2NodeAffinityRequired'] = None):
        if required is not None:
            pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional['outputs.PersistentVolumeV2NodeAffinityRequired']:
        return pulumi.get(self, "required")


@pulumi.output_type
class PersistentVolumeV2NodeAffinityRequired(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentVolumeV2NodeAffinityRequired. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentVolumeV2NodeAffinityRequired.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentVolumeV2NodeAffinityRequired.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentVolumeV2NodeAffinityRequiredNodeSelectorTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PersistentVolumeV2NodeAffinityRequiredNodeSelectorTermMatchExpression']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PersistentVolumeV2NodeAffinityRequiredNodeSelectorTermMatchExpression']]:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class PersistentVolumeV2NodeAffinityRequiredNodeSelectorTermMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PersistentVolumeV2Status(dict):
    def __init__(__self__, *,
                 message: Optional[_builtins.str] = None,
                 phase: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class PodV2Affinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2Affinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2Affinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2Affinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_affinity: Optional['outputs.PodV2AffinityNodeAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.PodV2AffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @_builtins.property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.PodV2AffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @_builtins.property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.PodV2AffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class PodV2AffinityNodeAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityNodeAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityNodeAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityNodeAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression']]:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class PodV2AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PodV2AffinityPodAntiAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecutions":
            suggest = "preferred_during_scheduling_ignored_during_executions"
        elif key == "requiredDuringSchedulingIgnoredDuringExecutions":
            suggest = "required_during_scheduling_ignored_during_executions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_executions: Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: _builtins.int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: _builtins.str,
                 label_selector: Optional['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")

    @_builtins.property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: _builtins.str,
                 label_selector: Optional['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")

    @_builtins.property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class PodV2AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PodV2Container(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envFroms":
            suggest = "env_froms"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "startupProbe":
            suggest = "startup_probe"
        elif key == "stdinOnce":
            suggest = "stdin_once"
        elif key == "terminationMessagePath":
            suggest = "termination_message_path"
        elif key == "terminationMessagePolicy":
            suggest = "termination_message_policy"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2Container. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2Container.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2Container.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 args: Optional[Sequence[_builtins.str]] = None,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 env_froms: Optional[Sequence['outputs.PodV2ContainerEnvFrom']] = None,
                 envs: Optional[Sequence['outputs.PodV2ContainerEnv']] = None,
                 image: Optional[_builtins.str] = None,
                 lifecycle: Optional['outputs.PodV2ContainerLifecycle'] = None,
                 liveness_probe: Optional['outputs.PodV2ContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PodV2ContainerPort']] = None,
                 readiness_probe: Optional['outputs.PodV2ContainerReadinessProbe'] = None,
                 resources: Optional['outputs.PodV2ContainerResources'] = None,
                 security_context: Optional['outputs.PodV2ContainerSecurityContext'] = None,
                 startup_probe: Optional['outputs.PodV2ContainerStartupProbe'] = None,
                 stdin: Optional[_builtins.bool] = None,
                 stdin_once: Optional[_builtins.bool] = None,
                 termination_message_path: Optional[_builtins.str] = None,
                 termination_message_policy: Optional[_builtins.str] = None,
                 tty: Optional[_builtins.bool] = None,
                 volume_mounts: Optional[Sequence['outputs.PodV2ContainerVolumeMount']] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the container.
        :param Sequence[_builtins.str] args: Specifies the arguments to the entrypoint of the container.
        :param Sequence[_builtins.str] commands: Specifies the command of the container.
        :param Sequence['PodV2ContainerEnvFromArgs'] env_froms: The sources to populate environment variables of the container.
        :param _builtins.str image: Specifies the image name of the CCI Pod container.
        :param 'PodV2ContainerLifecycleArgs' lifecycle: Specifies the lifecycle of the container.
        :param 'PodV2ContainerLivenessProbeArgs' liveness_probe: Specifies the liveness probe of the container.
        :param Sequence['PodV2ContainerPortArgs'] ports: Specifies the ports of the container.
        :param 'PodV2ContainerReadinessProbeArgs' readiness_probe: Specifies the readiness probe of the container.
        :param 'PodV2ContainerResourcesArgs' resources: Specifies the resources of the container.
        :param 'PodV2ContainerSecurityContextArgs' security_context: Specifies the security context of the container.
        :param 'PodV2ContainerStartupProbeArgs' startup_probe: Specifies the startup probe of the container.
        :param _builtins.bool stdin: Specifies whether this container should allocate a buffer for stdin in the container runtime.
        :param _builtins.bool stdin_once: Specifies whether this container runtime should close the stdin channel.
        :param _builtins.str termination_message_path: Specifies the termination message path of the CCI Pod container.
        :param _builtins.str termination_message_policy: Specifies the termination message policy of the CCI Pod container.
        :param _builtins.bool tty: Specifies whether this container should allocate a TTY for itself.
        :param _builtins.str working_dir: Specifies the working directory of the CCI Pod container.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the arguments to the entrypoint of the container.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command of the container.
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[Sequence['outputs.PodV2ContainerEnvFrom']]:
        """
        The sources to populate environment variables of the container.
        """
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.PodV2ContainerEnv']]:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        Specifies the image name of the CCI Pod container.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PodV2ContainerLifecycle']:
        """
        Specifies the lifecycle of the container.
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PodV2ContainerLivenessProbe']:
        """
        Specifies the liveness probe of the container.
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PodV2ContainerPort']]:
        """
        Specifies the ports of the container.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PodV2ContainerReadinessProbe']:
        """
        Specifies the readiness probe of the container.
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PodV2ContainerResources']:
        """
        Specifies the resources of the container.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PodV2ContainerSecurityContext']:
        """
        Specifies the security context of the container.
        """
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PodV2ContainerStartupProbe']:
        """
        Specifies the startup probe of the container.
        """
        return pulumi.get(self, "startup_probe")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a buffer for stdin in the container runtime.
        """
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container runtime should close the stdin channel.
        """
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message path of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message policy of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a TTY for itself.
        """
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PodV2ContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        Specifies the working directory of the CCI Pod container.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class PodV2ContainerEnv(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerEnvFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerEnvFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerEnvFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerEnvFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PodV2ContainerEnvFromConfigMapRef'] = None,
                 prefix: Optional[_builtins.str] = None,
                 secret_ref: Optional['outputs.PodV2ContainerEnvFromSecretRef'] = None):
        """
        :param 'PodV2ContainerEnvFromConfigMapRefArgs' config_map_ref: Specifies the config map.
        :param _builtins.str prefix: Specifies the prefix.
        :param 'PodV2ContainerEnvFromSecretRefArgs' secret_ref: Specifies the secret.
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @_builtins.property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PodV2ContainerEnvFromConfigMapRef']:
        """
        Specifies the config map.
        """
        return pulumi.get(self, "config_map_ref")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PodV2ContainerEnvFromSecretRef']:
        """
        Specifies the secret.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class PodV2ContainerEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2ContainerEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2ContainerLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_start: Optional['outputs.PodV2ContainerLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PodV2ContainerLifecyclePreStop'] = None):
        """
        :param 'PodV2ContainerLifecyclePostStartArgs' post_start: The lifecycle post start of the CCI Pod container.
        :param 'PodV2ContainerLifecyclePreStopArgs' pre_stop: The lifecycle pre stop of the CCI Pod container.
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PodV2ContainerLifecyclePostStart']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PodV2ContainerLifecyclePreStop']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class PodV2ContainerLifecyclePostStart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLifecyclePostStart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLifecyclePostStart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLifecyclePostStart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2ContainerLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PodV2ContainerLifecyclePostStartHttpGet'] = None):
        """
        :param 'PodV2ContainerLifecyclePostStartExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2ContainerLifecyclePostStartHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2ContainerLifecyclePostStartExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2ContainerLifecyclePostStartHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2ContainerLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2ContainerLifecyclePostStartHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLifecyclePostStartHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2ContainerLifecyclePostStartHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2ContainerLifecyclePostStartHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2ContainerLifecyclePostStartHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2ContainerLifecyclePostStartHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerLifecyclePreStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLifecyclePreStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLifecyclePreStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLifecyclePreStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2ContainerLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PodV2ContainerLifecyclePreStopHttpGet'] = None):
        """
        :param 'PodV2ContainerLifecyclePreStopExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2ContainerLifecyclePreStopHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2ContainerLifecyclePreStopExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2ContainerLifecyclePreStopHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2ContainerLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2ContainerLifecyclePreStopHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLifecyclePreStopHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2ContainerLifecyclePreStopHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2ContainerLifecyclePreStopHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2ContainerLifecyclePreStopHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2ContainerLifecyclePreStopHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2ContainerLivenessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2ContainerLivenessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2ContainerLivenessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2ContainerLivenessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2ContainerLivenessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2ContainerLivenessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2ContainerLivenessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2ContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2ContainerLivenessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2ContainerLivenessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2ContainerLivenessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2ContainerLivenessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int container_port: Specifies the number of port to expose on the IP address of pod.
        :param _builtins.str name: Specifies the port name of the container.
        :param _builtins.str protocol: Specifies the protocol for container port.
        """
        pulumi.set(__self__, "container_port", container_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        """
        Specifies the number of port to expose on the IP address of pod.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the port name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol for container port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class PodV2ContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2ContainerReadinessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2ContainerReadinessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2ContainerReadinessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2ContainerReadinessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2ContainerReadinessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2ContainerReadinessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2ContainerReadinessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2ContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2ContainerReadinessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2ContainerReadinessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2ContainerReadinessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2ContainerReadinessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] limits: Specifies the limits of resource.
        :param Mapping[str, _builtins.str] requests: Specifies the requests of the resource.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the limits of resource.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the requests of the resource.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class PodV2ContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "procMount":
            suggest = "proc_mount"
        elif key == "readOnlyRootFileSystem":
            suggest = "read_only_root_file_system"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Optional['outputs.PodV2ContainerSecurityContextCapabilities'] = None,
                 proc_mount: Optional[_builtins.str] = None,
                 read_only_root_file_system: Optional[_builtins.bool] = None,
                 run_as_group: Optional[_builtins.int] = None,
                 run_as_non_root: Optional[_builtins.bool] = None,
                 run_as_user: Optional[_builtins.int] = None):
        """
        :param 'PodV2ContainerSecurityContextCapabilitiesArgs' capabilities: Specifies the capabilities of the security context.
        :param _builtins.str proc_mount: Specifies the denotes the type of proc mount to use for the containers.
        :param _builtins.bool read_only_root_file_system: Whether this container has a read-only root file system.
        :param _builtins.int run_as_group: The GID TO run the entrypoint of the container process.
        :param _builtins.bool run_as_non_root: The container must run as a non-root user.
        :param _builtins.int run_as_user: The UID to run the entrypoint of the container process.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_file_system is not None:
            pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PodV2ContainerSecurityContextCapabilities']:
        """
        Specifies the capabilities of the security context.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[_builtins.str]:
        """
        Specifies the denotes the type of proc mount to use for the containers.
        """
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> Optional[_builtins.bool]:
        """
        Whether this container has a read-only root file system.
        """
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[_builtins.int]:
        """
        The GID TO run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[_builtins.bool]:
        """
        The container must run as a non-root user.
        """
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[_builtins.int]:
        """
        The UID to run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class PodV2ContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[_builtins.str]] = None,
                 drops: Optional[Sequence[_builtins.str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class PodV2ContainerStartupProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerStartupProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerStartupProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerStartupProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2ContainerStartupProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2ContainerStartupProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2ContainerStartupProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2ContainerStartupProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2ContainerStartupProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2ContainerStartupProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2ContainerStartupProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2ContainerStartupProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerStartupProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerStartupProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerStartupProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2ContainerStartupProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2ContainerStartupProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2ContainerStartupProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2ContainerStartupProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2ContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"
        elif key == "extendPathMode":
            suggest = "extend_path_mode"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 extend_path_mode: Optional[_builtins.str] = None,
                 read_only: Optional[_builtins.bool] = None,
                 sub_path: Optional[_builtins.str] = None,
                 sub_path_expr: Optional[_builtins.str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if extend_path_mode is not None:
            pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class PodV2DnsConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[_builtins.str]] = None,
                 options: Optional[Sequence['outputs.PodV2DnsConfigOption']] = None,
                 searches: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] nameservers: Specifies the name servers of the DNS config.
        :param Sequence['PodV2DnsConfigOptionArgs'] options: Specifies the options of the DNS config.
        :param Sequence[_builtins.str] searches: Specifies the searches of the DNS config.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the name servers of the DNS config.
        """
        return pulumi.get(self, "nameservers")

    @_builtins.property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.PodV2DnsConfigOption']]:
        """
        Specifies the options of the DNS config.
        """
        return pulumi.get(self, "options")

    @_builtins.property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the searches of the DNS config.
        """
        return pulumi.get(self, "searches")


@pulumi.output_type
class PodV2DnsConfigOption(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the options.
        :param _builtins.str value: Specifies the value of the options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the options.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the options.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envFroms":
            suggest = "env_froms"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "startupProbe":
            suggest = "startup_probe"
        elif key == "stdinOnce":
            suggest = "stdin_once"
        elif key == "terminationMessagePath":
            suggest = "termination_message_path"
        elif key == "terminationMessagePolicy":
            suggest = "termination_message_policy"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 args: Optional[Sequence[_builtins.str]] = None,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 env_froms: Optional[Sequence['outputs.PodV2EphemeralContainerEnvFrom']] = None,
                 envs: Optional[Sequence['outputs.PodV2EphemeralContainerEnv']] = None,
                 image: Optional[_builtins.str] = None,
                 lifecycle: Optional['outputs.PodV2EphemeralContainerLifecycle'] = None,
                 liveness_probe: Optional['outputs.PodV2EphemeralContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PodV2EphemeralContainerPort']] = None,
                 readiness_probe: Optional['outputs.PodV2EphemeralContainerReadinessProbe'] = None,
                 resources: Optional['outputs.PodV2EphemeralContainerResources'] = None,
                 security_context: Optional['outputs.PodV2EphemeralContainerSecurityContext'] = None,
                 startup_probe: Optional['outputs.PodV2EphemeralContainerStartupProbe'] = None,
                 stdin: Optional[_builtins.bool] = None,
                 stdin_once: Optional[_builtins.bool] = None,
                 termination_message_path: Optional[_builtins.str] = None,
                 termination_message_policy: Optional[_builtins.str] = None,
                 tty: Optional[_builtins.bool] = None,
                 volume_mounts: Optional[Sequence['outputs.PodV2EphemeralContainerVolumeMount']] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the container.
        :param Sequence[_builtins.str] args: Specifies the arguments to the entrypoint of the container.
        :param Sequence[_builtins.str] commands: Specifies the command of the container.
        :param Sequence['PodV2EphemeralContainerEnvFromArgs'] env_froms: The sources to populate environment variables of the container.
        :param _builtins.str image: Specifies the image name of the CCI Pod container.
        :param 'PodV2EphemeralContainerLifecycleArgs' lifecycle: Specifies the lifecycle of the container.
        :param 'PodV2EphemeralContainerLivenessProbeArgs' liveness_probe: Specifies the liveness probe of the container.
        :param Sequence['PodV2EphemeralContainerPortArgs'] ports: Specifies the ports of the container.
        :param 'PodV2EphemeralContainerReadinessProbeArgs' readiness_probe: Specifies the readiness probe of the container.
        :param 'PodV2EphemeralContainerResourcesArgs' resources: Specifies the resources of the container.
        :param 'PodV2EphemeralContainerSecurityContextArgs' security_context: Specifies the security context of the container.
        :param 'PodV2EphemeralContainerStartupProbeArgs' startup_probe: Specifies the startup probe of the container.
        :param _builtins.bool stdin: Specifies whether this container should allocate a buffer for stdin in the container runtime.
        :param _builtins.bool stdin_once: Specifies whether this container runtime should close the stdin channel.
        :param _builtins.str termination_message_path: Specifies the termination message path of the CCI Pod container.
        :param _builtins.str termination_message_policy: Specifies the termination message policy of the CCI Pod container.
        :param _builtins.bool tty: Specifies whether this container should allocate a TTY for itself.
        :param _builtins.str working_dir: Specifies the working directory of the CCI Pod container.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the arguments to the entrypoint of the container.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command of the container.
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerEnvFrom']]:
        """
        The sources to populate environment variables of the container.
        """
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerEnv']]:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        Specifies the image name of the CCI Pod container.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PodV2EphemeralContainerLifecycle']:
        """
        Specifies the lifecycle of the container.
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PodV2EphemeralContainerLivenessProbe']:
        """
        Specifies the liveness probe of the container.
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerPort']]:
        """
        Specifies the ports of the container.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PodV2EphemeralContainerReadinessProbe']:
        """
        Specifies the readiness probe of the container.
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PodV2EphemeralContainerResources']:
        """
        Specifies the resources of the container.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PodV2EphemeralContainerSecurityContext']:
        """
        Specifies the security context of the container.
        """
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PodV2EphemeralContainerStartupProbe']:
        """
        Specifies the startup probe of the container.
        """
        return pulumi.get(self, "startup_probe")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a buffer for stdin in the container runtime.
        """
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container runtime should close the stdin channel.
        """
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message path of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message policy of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a TTY for itself.
        """
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        Specifies the working directory of the CCI Pod container.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class PodV2EphemeralContainerEnv(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerEnvFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerEnvFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerEnvFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerEnvFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PodV2EphemeralContainerEnvFromConfigMapRef'] = None,
                 prefix: Optional[_builtins.str] = None,
                 secret_ref: Optional['outputs.PodV2EphemeralContainerEnvFromSecretRef'] = None):
        """
        :param 'PodV2EphemeralContainerEnvFromConfigMapRefArgs' config_map_ref: Specifies the config map.
        :param _builtins.str prefix: Specifies the prefix.
        :param 'PodV2EphemeralContainerEnvFromSecretRefArgs' secret_ref: Specifies the secret.
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @_builtins.property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PodV2EphemeralContainerEnvFromConfigMapRef']:
        """
        Specifies the config map.
        """
        return pulumi.get(self, "config_map_ref")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PodV2EphemeralContainerEnvFromSecretRef']:
        """
        Specifies the secret.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class PodV2EphemeralContainerEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2EphemeralContainerEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2EphemeralContainerLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_start: Optional['outputs.PodV2EphemeralContainerLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PodV2EphemeralContainerLifecyclePreStop'] = None):
        """
        :param 'PodV2EphemeralContainerLifecyclePostStartArgs' post_start: The lifecycle post start of the CCI Pod container.
        :param 'PodV2EphemeralContainerLifecyclePreStopArgs' pre_stop: The lifecycle pre stop of the CCI Pod container.
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePostStart']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePreStop']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePostStart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLifecyclePostStart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLifecyclePostStart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLifecyclePostStart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2EphemeralContainerLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PodV2EphemeralContainerLifecyclePostStartHttpGet'] = None):
        """
        :param 'PodV2EphemeralContainerLifecyclePostStartExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2EphemeralContainerLifecyclePostStartHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePostStartExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePostStartHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePostStartHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLifecyclePostStartHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2EphemeralContainerLifecyclePostStartHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2EphemeralContainerLifecyclePostStartHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerLifecyclePostStartHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePostStartHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePreStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLifecyclePreStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLifecyclePreStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLifecyclePreStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2EphemeralContainerLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PodV2EphemeralContainerLifecyclePreStopHttpGet'] = None):
        """
        :param 'PodV2EphemeralContainerLifecyclePreStopExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2EphemeralContainerLifecyclePreStopHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePreStopExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2EphemeralContainerLifecyclePreStopHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePreStopHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLifecyclePreStopHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2EphemeralContainerLifecyclePreStopHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2EphemeralContainerLifecyclePreStopHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerLifecyclePreStopHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2EphemeralContainerLifecyclePreStopHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2EphemeralContainerLivenessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2EphemeralContainerLivenessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2EphemeralContainerLivenessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2EphemeralContainerLivenessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2EphemeralContainerLivenessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerLivenessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2EphemeralContainerLivenessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2EphemeralContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2EphemeralContainerLivenessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2EphemeralContainerLivenessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerLivenessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2EphemeralContainerLivenessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int container_port: Specifies the number of port to expose on the IP address of pod.
        :param _builtins.str name: Specifies the port name of the container.
        :param _builtins.str protocol: Specifies the protocol for container port.
        """
        pulumi.set(__self__, "container_port", container_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        """
        Specifies the number of port to expose on the IP address of pod.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the port name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol for container port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class PodV2EphemeralContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2EphemeralContainerReadinessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2EphemeralContainerReadinessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2EphemeralContainerReadinessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2EphemeralContainerReadinessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2EphemeralContainerReadinessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerReadinessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2EphemeralContainerReadinessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2EphemeralContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2EphemeralContainerReadinessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2EphemeralContainerReadinessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerReadinessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2EphemeralContainerReadinessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] limits: Specifies the limits of resource.
        :param Mapping[str, _builtins.str] requests: Specifies the requests of the resource.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the limits of resource.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the requests of the resource.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class PodV2EphemeralContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "procMount":
            suggest = "proc_mount"
        elif key == "readOnlyRootFileSystem":
            suggest = "read_only_root_file_system"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Optional['outputs.PodV2EphemeralContainerSecurityContextCapabilities'] = None,
                 proc_mount: Optional[_builtins.str] = None,
                 read_only_root_file_system: Optional[_builtins.bool] = None,
                 run_as_group: Optional[_builtins.int] = None,
                 run_as_non_root: Optional[_builtins.bool] = None,
                 run_as_user: Optional[_builtins.int] = None):
        """
        :param 'PodV2EphemeralContainerSecurityContextCapabilitiesArgs' capabilities: Specifies the capabilities of the security context.
        :param _builtins.str proc_mount: Specifies the denotes the type of proc mount to use for the containers.
        :param _builtins.bool read_only_root_file_system: Whether this container has a read-only root file system.
        :param _builtins.int run_as_group: The GID TO run the entrypoint of the container process.
        :param _builtins.bool run_as_non_root: The container must run as a non-root user.
        :param _builtins.int run_as_user: The UID to run the entrypoint of the container process.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_file_system is not None:
            pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PodV2EphemeralContainerSecurityContextCapabilities']:
        """
        Specifies the capabilities of the security context.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[_builtins.str]:
        """
        Specifies the denotes the type of proc mount to use for the containers.
        """
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> Optional[_builtins.bool]:
        """
        Whether this container has a read-only root file system.
        """
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[_builtins.int]:
        """
        The GID TO run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[_builtins.bool]:
        """
        The container must run as a non-root user.
        """
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[_builtins.int]:
        """
        The UID to run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class PodV2EphemeralContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[_builtins.str]] = None,
                 drops: Optional[Sequence[_builtins.str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class PodV2EphemeralContainerStartupProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerStartupProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerStartupProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerStartupProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2EphemeralContainerStartupProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2EphemeralContainerStartupProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2EphemeralContainerStartupProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2EphemeralContainerStartupProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2EphemeralContainerStartupProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerStartupProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2EphemeralContainerStartupProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2EphemeralContainerStartupProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerStartupProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerStartupProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerStartupProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2EphemeralContainerStartupProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2EphemeralContainerStartupProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2EphemeralContainerStartupProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2EphemeralContainerStartupProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2EphemeralContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"
        elif key == "extendPathMode":
            suggest = "extend_path_mode"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2EphemeralContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2EphemeralContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2EphemeralContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 extend_path_mode: Optional[_builtins.str] = None,
                 read_only: Optional[_builtins.bool] = None,
                 sub_path: Optional[_builtins.str] = None,
                 sub_path_expr: Optional[_builtins.str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if extend_path_mode is not None:
            pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class PodV2HostAlias(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[_builtins.str]] = None,
                 ip: Optional[_builtins.str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "hostnames")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class PodV2ImagePullSecret(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PodV2InitContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envFroms":
            suggest = "env_froms"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "startupProbe":
            suggest = "startup_probe"
        elif key == "stdinOnce":
            suggest = "stdin_once"
        elif key == "terminationMessagePath":
            suggest = "termination_message_path"
        elif key == "terminationMessagePolicy":
            suggest = "termination_message_policy"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 args: Optional[Sequence[_builtins.str]] = None,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 env_froms: Optional[Sequence['outputs.PodV2InitContainerEnvFrom']] = None,
                 envs: Optional[Sequence['outputs.PodV2InitContainerEnv']] = None,
                 image: Optional[_builtins.str] = None,
                 lifecycle: Optional['outputs.PodV2InitContainerLifecycle'] = None,
                 liveness_probe: Optional['outputs.PodV2InitContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PodV2InitContainerPort']] = None,
                 readiness_probe: Optional['outputs.PodV2InitContainerReadinessProbe'] = None,
                 resources: Optional['outputs.PodV2InitContainerResources'] = None,
                 security_context: Optional['outputs.PodV2InitContainerSecurityContext'] = None,
                 startup_probe: Optional['outputs.PodV2InitContainerStartupProbe'] = None,
                 stdin: Optional[_builtins.bool] = None,
                 stdin_once: Optional[_builtins.bool] = None,
                 termination_message_path: Optional[_builtins.str] = None,
                 termination_message_policy: Optional[_builtins.str] = None,
                 tty: Optional[_builtins.bool] = None,
                 volume_mounts: Optional[Sequence['outputs.PodV2InitContainerVolumeMount']] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the container.
        :param Sequence[_builtins.str] args: Specifies the arguments to the entrypoint of the container.
        :param Sequence[_builtins.str] commands: Specifies the command of the container.
        :param Sequence['PodV2InitContainerEnvFromArgs'] env_froms: The sources to populate environment variables of the container.
        :param _builtins.str image: Specifies the image name of the CCI Pod container.
        :param 'PodV2InitContainerLifecycleArgs' lifecycle: Specifies the lifecycle of the container.
        :param 'PodV2InitContainerLivenessProbeArgs' liveness_probe: Specifies the liveness probe of the container.
        :param Sequence['PodV2InitContainerPortArgs'] ports: Specifies the ports of the container.
        :param 'PodV2InitContainerReadinessProbeArgs' readiness_probe: Specifies the readiness probe of the container.
        :param 'PodV2InitContainerResourcesArgs' resources: Specifies the resources of the container.
        :param 'PodV2InitContainerSecurityContextArgs' security_context: Specifies the security context of the container.
        :param 'PodV2InitContainerStartupProbeArgs' startup_probe: Specifies the startup probe of the container.
        :param _builtins.bool stdin: Specifies whether this container should allocate a buffer for stdin in the container runtime.
        :param _builtins.bool stdin_once: Specifies whether this container runtime should close the stdin channel.
        :param _builtins.str termination_message_path: Specifies the termination message path of the CCI Pod container.
        :param _builtins.str termination_message_policy: Specifies the termination message policy of the CCI Pod container.
        :param _builtins.bool tty: Specifies whether this container should allocate a TTY for itself.
        :param _builtins.str working_dir: Specifies the working directory of the CCI Pod container.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the arguments to the entrypoint of the container.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command of the container.
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[Sequence['outputs.PodV2InitContainerEnvFrom']]:
        """
        The sources to populate environment variables of the container.
        """
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.PodV2InitContainerEnv']]:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        Specifies the image name of the CCI Pod container.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PodV2InitContainerLifecycle']:
        """
        Specifies the lifecycle of the container.
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PodV2InitContainerLivenessProbe']:
        """
        Specifies the liveness probe of the container.
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PodV2InitContainerPort']]:
        """
        Specifies the ports of the container.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PodV2InitContainerReadinessProbe']:
        """
        Specifies the readiness probe of the container.
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PodV2InitContainerResources']:
        """
        Specifies the resources of the container.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PodV2InitContainerSecurityContext']:
        """
        Specifies the security context of the container.
        """
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PodV2InitContainerStartupProbe']:
        """
        Specifies the startup probe of the container.
        """
        return pulumi.get(self, "startup_probe")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a buffer for stdin in the container runtime.
        """
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container runtime should close the stdin channel.
        """
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message path of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[_builtins.str]:
        """
        Specifies the termination message policy of the CCI Pod container.
        """
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this container should allocate a TTY for itself.
        """
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PodV2InitContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        Specifies the working directory of the CCI Pod container.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class PodV2InitContainerEnv(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerEnvFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerEnvFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerEnvFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerEnvFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PodV2InitContainerEnvFromConfigMapRef'] = None,
                 prefix: Optional[_builtins.str] = None,
                 secret_ref: Optional['outputs.PodV2InitContainerEnvFromSecretRef'] = None):
        """
        :param 'PodV2InitContainerEnvFromConfigMapRefArgs' config_map_ref: Specifies the config map.
        :param _builtins.str prefix: Specifies the prefix.
        :param 'PodV2InitContainerEnvFromSecretRefArgs' secret_ref: Specifies the secret.
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @_builtins.property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PodV2InitContainerEnvFromConfigMapRef']:
        """
        Specifies the config map.
        """
        return pulumi.get(self, "config_map_ref")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PodV2InitContainerEnvFromSecretRef']:
        """
        Specifies the secret.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class PodV2InitContainerEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2InitContainerEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name.
        :param _builtins.bool optional: Specifies whether to be defined.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to be defined.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2InitContainerLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_start: Optional['outputs.PodV2InitContainerLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PodV2InitContainerLifecyclePreStop'] = None):
        """
        :param 'PodV2InitContainerLifecyclePostStartArgs' post_start: The lifecycle post start of the CCI Pod container.
        :param 'PodV2InitContainerLifecyclePreStopArgs' pre_stop: The lifecycle pre stop of the CCI Pod container.
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PodV2InitContainerLifecyclePostStart']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PodV2InitContainerLifecyclePreStop']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class PodV2InitContainerLifecyclePostStart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLifecyclePostStart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLifecyclePostStart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLifecyclePostStart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2InitContainerLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PodV2InitContainerLifecyclePostStartHttpGet'] = None):
        """
        :param 'PodV2InitContainerLifecyclePostStartExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2InitContainerLifecyclePostStartHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2InitContainerLifecyclePostStartExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2InitContainerLifecyclePostStartHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2InitContainerLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2InitContainerLifecyclePostStartHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLifecyclePostStartHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLifecyclePostStartHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2InitContainerLifecyclePostStartHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2InitContainerLifecyclePostStartHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2InitContainerLifecyclePostStartHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2InitContainerLifecyclePostStartHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerLifecyclePreStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "httpGet":
            suggest = "http_get"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLifecyclePreStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLifecyclePreStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLifecyclePreStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2InitContainerLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PodV2InitContainerLifecyclePreStopHttpGet'] = None):
        """
        :param 'PodV2InitContainerLifecyclePreStopExecArgs' exec_: The lifecycle post start of the CCI Pod container.
        :param 'PodV2InitContainerLifecyclePreStopHttpGetArgs' http_get: The lifecycle pre stop of the CCI Pod container.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2InitContainerLifecyclePreStopExec']:
        """
        The lifecycle post start of the CCI Pod container.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PodV2InitContainerLifecyclePreStopHttpGet']:
        """
        The lifecycle pre stop of the CCI Pod container.
        """
        return pulumi.get(self, "http_get")


@pulumi.output_type
class PodV2InitContainerLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2InitContainerLifecyclePreStopHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLifecyclePreStopHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLifecyclePreStopHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2InitContainerLifecyclePreStopHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2InitContainerLifecyclePreStopHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2InitContainerLifecyclePreStopHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2InitContainerLifecyclePreStopHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2InitContainerLivenessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2InitContainerLivenessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2InitContainerLivenessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2InitContainerLivenessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2InitContainerLivenessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2InitContainerLivenessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2InitContainerLivenessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2InitContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2InitContainerLivenessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2InitContainerLivenessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2InitContainerLivenessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2InitContainerLivenessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int container_port: Specifies the number of port to expose on the IP address of pod.
        :param _builtins.str name: Specifies the port name of the container.
        :param _builtins.str protocol: Specifies the protocol for container port.
        """
        pulumi.set(__self__, "container_port", container_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        """
        Specifies the number of port to expose on the IP address of pod.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the port name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol for container port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class PodV2InitContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2InitContainerReadinessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2InitContainerReadinessProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2InitContainerReadinessProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2InitContainerReadinessProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2InitContainerReadinessProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2InitContainerReadinessProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2InitContainerReadinessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2InitContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2InitContainerReadinessProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2InitContainerReadinessProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2InitContainerReadinessProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2InitContainerReadinessProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] limits: Specifies the limits of resource.
        :param Mapping[str, _builtins.str] requests: Specifies the requests of the resource.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the limits of resource.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the requests of the resource.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class PodV2InitContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "procMount":
            suggest = "proc_mount"
        elif key == "readOnlyRootFileSystem":
            suggest = "read_only_root_file_system"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: Optional['outputs.PodV2InitContainerSecurityContextCapabilities'] = None,
                 proc_mount: Optional[_builtins.str] = None,
                 read_only_root_file_system: Optional[_builtins.bool] = None,
                 run_as_group: Optional[_builtins.int] = None,
                 run_as_non_root: Optional[_builtins.bool] = None,
                 run_as_user: Optional[_builtins.int] = None):
        """
        :param 'PodV2InitContainerSecurityContextCapabilitiesArgs' capabilities: Specifies the capabilities of the security context.
        :param _builtins.str proc_mount: Specifies the denotes the type of proc mount to use for the containers.
        :param _builtins.bool read_only_root_file_system: Whether this container has a read-only root file system.
        :param _builtins.int run_as_group: The GID TO run the entrypoint of the container process.
        :param _builtins.bool run_as_non_root: The container must run as a non-root user.
        :param _builtins.int run_as_user: The UID to run the entrypoint of the container process.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_file_system is not None:
            pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PodV2InitContainerSecurityContextCapabilities']:
        """
        Specifies the capabilities of the security context.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[_builtins.str]:
        """
        Specifies the denotes the type of proc mount to use for the containers.
        """
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> Optional[_builtins.bool]:
        """
        Whether this container has a read-only root file system.
        """
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[_builtins.int]:
        """
        The GID TO run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[_builtins.bool]:
        """
        The container must run as a non-root user.
        """
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[_builtins.int]:
        """
        The UID to run the entrypoint of the container process.
        """
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class PodV2InitContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[_builtins.str]] = None,
                 drops: Optional[Sequence[_builtins.str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class PodV2InitContainerStartupProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGets":
            suggest = "http_gets"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerStartupProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerStartupProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerStartupProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.PodV2InitContainerStartupProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 http_gets: Optional[Sequence['outputs.PodV2InitContainerStartupProbeHttpGet']] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param 'PodV2InitContainerStartupProbeExecArgs' exec_: Specifies the exec.
        :param _builtins.int failure_threshold: Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param Sequence['PodV2InitContainerStartupProbeHttpGetArgs'] http_gets: Specifies the HTTP get.
        :param _builtins.int initial_delay_seconds: The number of seconds after the container has started before liveness probes are initialed.
        :param _builtins.int period_seconds: Specifies how often to perform the probe.
        :param _builtins.int success_threshold: The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PodV2InitContainerStartupProbeExec']:
        """
        Specifies the exec.
        """
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.PodV2InitContainerStartupProbeHttpGet']]:
        """
        Specifies the HTTP get.
        """
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        """
        The number of seconds after the container has started before liveness probes are initialed.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        """
        Specifies how often to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        """
        The minimum consecutive successes for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class PodV2InitContainerStartupProbeExec(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] commands: The command line to execute inside the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        The command line to execute inside the container.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class PodV2InitContainerStartupProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerStartupProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerStartupProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerStartupProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 http_headers: Optional[Sequence['outputs.PodV2InitContainerStartupProbeHttpGetHttpHeader']] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name.
        :param Sequence['PodV2InitContainerStartupProbeHttpGetHttpHeaderArgs'] http_headers: The custom headers to set in the request.
        :param _builtins.str path: The path to access on the HTTP server.
        :param _builtins.str port: The port to access on the HTTP server.
        :param _builtins.str scheme: The scheme to use for connecting to the host.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PodV2InitContainerStartupProbeHttpGetHttpHeader']]:
        """
        The custom headers to set in the request.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port to access on the HTTP server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        The scheme to use for connecting to the host.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PodV2InitContainerStartupProbeHttpGetHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the custom HTTP headers.
        :param _builtins.str value: The value of the custom HTTP headers.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom HTTP headers.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the custom HTTP headers.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2InitContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"
        elif key == "extendPathMode":
            suggest = "extend_path_mode"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2InitContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2InitContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2InitContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 extend_path_mode: Optional[_builtins.str] = None,
                 read_only: Optional[_builtins.bool] = None,
                 sub_path: Optional[_builtins.str] = None,
                 sub_path_expr: Optional[_builtins.str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if extend_path_mode is not None:
            pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class PodV2ReadinessGate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2ReadinessGate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2ReadinessGate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2ReadinessGate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_type: Optional[_builtins.str] = None):
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class PodV2SecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsGroup":
            suggest = "fs_group"
        elif key == "fsGroupChangePolicy":
            suggest = "fs_group_change_policy"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2SecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2SecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2SecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fs_group: Optional[_builtins.int] = None,
                 fs_group_change_policy: Optional[_builtins.str] = None,
                 run_as_group: Optional[_builtins.int] = None,
                 run_as_non_root: Optional[_builtins.bool] = None,
                 run_as_user: Optional[_builtins.int] = None,
                 supplemental_groups: Optional[Sequence[_builtins.str]] = None,
                 sysctls: Optional[Sequence['outputs.PodV2SecurityContextSysctl']] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @_builtins.property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "fs_group")

    @_builtins.property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fs_group_change_policy")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "run_as_user")

    @_builtins.property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "supplemental_groups")

    @_builtins.property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.PodV2SecurityContextSysctl']]:
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class PodV2SecurityContextSysctl(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PodV2Status(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2Status. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2Status.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2Status.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.PodV2StatusCondition']] = None,
                 observed_generation: Optional[_builtins.int] = None):
        """
        :param Sequence['PodV2StatusConditionArgs'] conditions: Tthe conditions of the CCI Pod.
        :param _builtins.int observed_generation: The observed generation of the CCI Pod.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.PodV2StatusCondition']]:
        """
        Tthe conditions of the CCI Pod.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[_builtins.int]:
        """
        The observed generation of the CCI Pod.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class PodV2StatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "lastUpdateTime":
            suggest = "last_update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2StatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2StatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2StatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[_builtins.str] = None,
                 last_update_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str last_transition_time: The last transition time of the CCI Pod conditions.
        :param _builtins.str last_update_time: The last update time of the CCI Pod conditions.
        :param _builtins.str message: The message of the CCI Pod conditions.
        :param _builtins.str reason: The reason of the CCI Pod conditions.
        :param _builtins.str status: Tthe status of the CCI Pod conditions.
        :param _builtins.str type: The type of the CCI Pod conditions.
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[_builtins.str]:
        """
        The last transition time of the CCI Pod conditions.
        """
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[_builtins.str]:
        """
        The last update time of the CCI Pod conditions.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The message of the CCI Pod conditions.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        """
        The reason of the CCI Pod conditions.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Tthe status of the CCI Pod conditions.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the CCI Pod conditions.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PodV2Volume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMap":
            suggest = "config_map"
        elif key == "persistentVolumeClaim":
            suggest = "persistent_volume_claim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2Volume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2Volume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2Volume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map: Optional['outputs.PodV2VolumeConfigMap'] = None,
                 name: Optional[_builtins.str] = None,
                 nfs: Optional['outputs.PodV2VolumeNfs'] = None,
                 persistent_volume_claim: Optional['outputs.PodV2VolumePersistentVolumeClaim'] = None,
                 projected: Optional['outputs.PodV2VolumeProjected'] = None,
                 secret: Optional['outputs.PodV2VolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.PodV2VolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.PodV2VolumeNfs']:
        return pulumi.get(self, "nfs")

    @_builtins.property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.PodV2VolumePersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @_builtins.property
    @pulumi.getter
    def projected(self) -> Optional['outputs.PodV2VolumeProjected']:
        return pulumi.get(self, "projected")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional['outputs.PodV2VolumeSecret']:
        return pulumi.get(self, "secret")


@pulumi.output_type
class PodV2VolumeConfigMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultMode":
            suggest = "default_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeConfigMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeConfigMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeConfigMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_mode: Optional[_builtins.int] = None,
                 items: Optional['outputs.PodV2VolumeConfigMapItems'] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional['outputs.PodV2VolumeConfigMapItems']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2VolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 path: _builtins.str,
                 mode: Optional[_builtins.int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class PodV2VolumeNfs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeNfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeNfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeNfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 server: _builtins.str,
                 read_only: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class PodV2VolumePersistentVolumeClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimName":
            suggest = "claim_name"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumePersistentVolumeClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumePersistentVolumeClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumePersistentVolumeClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 claim_name: _builtins.str,
                 read_only: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @_builtins.property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> _builtins.str:
        return pulumi.get(self, "claim_name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class PodV2VolumeProjected(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultMode":
            suggest = "default_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeProjected. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeProjected.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeProjected.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_mode: Optional[_builtins.int] = None,
                 sources: Optional[Sequence['outputs.PodV2VolumeProjectedSource']] = None):
        """
        :param _builtins.int default_mode: Specifies the rolling update config of the CCI Pod strategy.
        :param Sequence['PodV2VolumeProjectedSourceArgs'] sources: Specifies the type of the CCI Pod strategy.
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[_builtins.int]:
        """
        Specifies the rolling update config of the CCI Pod strategy.
        """
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.PodV2VolumeProjectedSource']]:
        """
        Specifies the type of the CCI Pod strategy.
        """
        return pulumi.get(self, "sources")


@pulumi.output_type
class PodV2VolumeProjectedSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMap":
            suggest = "config_map"
        elif key == "downwardApi":
            suggest = "downward_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeProjectedSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeProjectedSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeProjectedSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map: Optional['outputs.PodV2VolumeProjectedSourceConfigMap'] = None,
                 downward_api: Optional['outputs.PodV2VolumeProjectedSourceDownwardApi'] = None,
                 secret: Optional['outputs.PodV2VolumeProjectedSourceSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.PodV2VolumeProjectedSourceConfigMap']:
        return pulumi.get(self, "config_map")

    @_builtins.property
    @pulumi.getter(name="downwardApi")
    def downward_api(self) -> Optional['outputs.PodV2VolumeProjectedSourceDownwardApi']:
        return pulumi.get(self, "downward_api")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional['outputs.PodV2VolumeProjectedSourceSecret']:
        return pulumi.get(self, "secret")


@pulumi.output_type
class PodV2VolumeProjectedSourceConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PodV2VolumeProjectedSourceConfigMapItem']] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PodV2VolumeProjectedSourceConfigMapItem']]:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2VolumeProjectedSourceConfigMapItem(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 path: _builtins.str,
                 mode: Optional[_builtins.int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class PodV2VolumeProjectedSourceDownwardApi(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PodV2VolumeProjectedSourceDownwardApiItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PodV2VolumeProjectedSourceDownwardApiItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class PodV2VolumeProjectedSourceDownwardApiItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldRef":
            suggest = "field_ref"
        elif key == "resourceFileRef":
            suggest = "resource_file_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeProjectedSourceDownwardApiItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_ref: Optional['outputs.PodV2VolumeProjectedSourceDownwardApiItemFieldRef'] = None,
                 mode: Optional[_builtins.int] = None,
                 path: Optional[_builtins.str] = None,
                 resource_file_ref: Optional['outputs.PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef'] = None):
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if resource_file_ref is not None:
            pulumi.set(__self__, "resource_file_ref", resource_file_ref)

    @_builtins.property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PodV2VolumeProjectedSourceDownwardApiItemFieldRef']:
        return pulumi.get(self, "field_ref")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="resourceFileRef")
    def resource_file_ref(self) -> Optional['outputs.PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef']:
        return pulumi.get(self, "resource_file_ref")


@pulumi.output_type
class PodV2VolumeProjectedSourceDownwardApiItemFieldRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldPath":
            suggest = "field_path"
        elif key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeProjectedSourceDownwardApiItemFieldRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItemFieldRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItemFieldRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_path: _builtins.str,
                 api_version: Optional[_builtins.str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @_builtins.property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> _builtins.str:
        return pulumi.get(self, "field_path")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_version")


@pulumi.output_type
class PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeProjectedSourceDownwardApiItemResourceFileRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: _builtins.str,
                 container_name: Optional[_builtins.str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "container_name")


@pulumi.output_type
class PodV2VolumeProjectedSourceSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PodV2VolumeProjectedSourceSecretItem']] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PodV2VolumeProjectedSourceSecretItem']]:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "optional")


@pulumi.output_type
class PodV2VolumeProjectedSourceSecretItem(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 path: _builtins.str,
                 mode: Optional[_builtins.int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class PodV2VolumeSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultMode":
            suggest = "default_mode"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PodV2VolumeSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PodV2VolumeSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PodV2VolumeSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_mode: Optional[_builtins.int] = None,
                 items: Optional['outputs.PodV2VolumeSecretItems'] = None,
                 optional: Optional[_builtins.bool] = None,
                 secret_name: Optional[_builtins.str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional['outputs.PodV2VolumeSecretItems']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class PodV2VolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 path: _builtins.str,
                 mode: Optional[_builtins.int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class PoolBindingOwnerReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "blockOwnerDeletion":
            suggest = "block_owner_deletion"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolBindingOwnerReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolBindingOwnerReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolBindingOwnerReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str,
                 uid: _builtins.str,
                 block_owner_deletion: Optional[_builtins.bool] = None,
                 controller: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uid", uid)
        if block_owner_deletion is not None:
            pulumi.set(__self__, "block_owner_deletion", block_owner_deletion)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="blockOwnerDeletion")
    def block_owner_deletion(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "block_owner_deletion")

    @_builtins.property
    @pulumi.getter
    def controller(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "controller")


@pulumi.output_type
class PoolBindingPoolRef(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class PoolBindingTargetRef(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 group: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None):
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class PvcV2Resources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, _builtins.str]] = None,
                 requests: Optional[Mapping[str, _builtins.str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class PvcV2Selector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PvcV2Selector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PvcV2Selector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PvcV2Selector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PvcV2SelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, _builtins.str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PvcV2SelectorMatchExpression']]:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class PvcV2SelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ServiceV2Port(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appProtocol":
            suggest = "app_protocol"
        elif key == "targetPort":
            suggest = "target_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceV2Port. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceV2Port.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceV2Port.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: _builtins.int,
                 app_protocol: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 target_port: Optional[_builtins.int] = None):
        """
        :param _builtins.int port: The port.
        :param _builtins.str app_protocol: The app protocol.
        :param _builtins.str name: The name.
        :param _builtins.str protocol: The protocol.
        :param _builtins.int target_port: The target port.
        """
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[_builtins.str]:
        """
        The app protocol.
        """
        return pulumi.get(self, "app_protocol")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[_builtins.int]:
        """
        The target port.
        """
        return pulumi.get(self, "target_port")


@pulumi.output_type
class ServiceV2Status(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ServiceV2StatusCondition']] = None,
                 loadbalancers: Optional[Sequence['outputs.ServiceV2StatusLoadbalancer']] = None):
        """
        :param Sequence['ServiceV2StatusConditionArgs'] conditions: Tthe conditions of the CCI Service.
        :param Sequence['ServiceV2StatusLoadbalancerArgs'] loadbalancers: The loadbalancer of the CCI Service.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if loadbalancers is not None:
            pulumi.set(__self__, "loadbalancers", loadbalancers)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceV2StatusCondition']]:
        """
        Tthe conditions of the CCI Service.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Optional[Sequence['outputs.ServiceV2StatusLoadbalancer']]:
        """
        The loadbalancer of the CCI Service.
        """
        return pulumi.get(self, "loadbalancers")


@pulumi.output_type
class ServiceV2StatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observeGeneration":
            suggest = "observe_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceV2StatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceV2StatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceV2StatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 observe_generation: Optional[_builtins.str] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str last_transition_time: The last transition time.
        :param _builtins.str message: The message.
        :param _builtins.str observe_generation: The observe generation.
        :param _builtins.str reason: The reason.
        :param _builtins.str status: Tthe status.
        :param _builtins.str type: The type.
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observe_generation is not None:
            pulumi.set(__self__, "observe_generation", observe_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[_builtins.str]:
        """
        The last transition time.
        """
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="observeGeneration")
    def observe_generation(self) -> Optional[_builtins.str]:
        """
        The observe generation.
        """
        return pulumi.get(self, "observe_generation")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        """
        The reason.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Tthe status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceV2StatusLoadbalancer(dict):
    def __init__(__self__, *,
                 ingresses: Optional[Sequence['outputs.ServiceV2StatusLoadbalancerIngress']] = None):
        """
        :param Sequence['ServiceV2StatusLoadbalancerIngressArgs'] ingresses: The ingress of the loadbalancer.
        """
        if ingresses is not None:
            pulumi.set(__self__, "ingresses", ingresses)

    @_builtins.property
    @pulumi.getter
    def ingresses(self) -> Optional[Sequence['outputs.ServiceV2StatusLoadbalancerIngress']]:
        """
        The ingress of the loadbalancer.
        """
        return pulumi.get(self, "ingresses")


@pulumi.output_type
class ServiceV2StatusLoadbalancerIngress(dict):
    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None,
                 ports: Optional[Sequence['outputs.ServiceV2StatusLoadbalancerIngressPort']] = None):
        """
        :param _builtins.str ip: The IP of the loadbalancer.
        :param Sequence['ServiceV2StatusLoadbalancerIngressPortArgs'] ports: The ports of the loadbalancer.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        The IP of the loadbalancer.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceV2StatusLoadbalancerIngressPort']]:
        """
        The ports of the loadbalancer.
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class ServiceV2StatusLoadbalancerIngressPort(dict):
    def __init__(__self__, *,
                 error: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str error: The error.
        :param _builtins.int port: The port.
        :param _builtins.str protocol: The protocol.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def error(self) -> Optional[_builtins.str]:
        """
        The error.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetConfigMapsV2ConfigMapResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 binary_data: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 data: Mapping[str, _builtins.str],
                 immutable: _builtins.bool,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "binary_data", binary_data)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "immutable", immutable)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="binaryData")
    def binary_data(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "binary_data")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def data(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def immutable(self) -> _builtins.bool:
        return pulumi.get(self, "immutable")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetDeploymentsV2DeploymentResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 generation: _builtins.int,
                 min_ready_seconds: _builtins.int,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 progress_deadline_seconds: _builtins.int,
                 replicas: _builtins.int,
                 resource_version: _builtins.str,
                 selectors: Sequence['outputs.GetDeploymentsV2DeploymentSelectorResult'],
                 statuses: Sequence['outputs.GetDeploymentsV2DeploymentStatusResult'],
                 strategies: Sequence['outputs.GetDeploymentsV2DeploymentStrategyResult'],
                 templates: Sequence['outputs.GetDeploymentsV2DeploymentTemplateResult'],
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "progress_deadline_seconds", progress_deadline_seconds)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "selectors", selectors)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "strategies", strategies)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def generation(self) -> _builtins.int:
        return pulumi.get(self, "generation")

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> _builtins.int:
        return pulumi.get(self, "min_ready_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> _builtins.int:
        return pulumi.get(self, "progress_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> _builtins.int:
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetDeploymentsV2DeploymentSelectorResult']:
        return pulumi.get(self, "selectors")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetDeploymentsV2DeploymentStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def strategies(self) -> Sequence['outputs.GetDeploymentsV2DeploymentStrategyResult']:
        return pulumi.get(self, "strategies")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateResult']:
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetDeploymentsV2DeploymentSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetDeploymentsV2DeploymentSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetDeploymentsV2DeploymentSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsV2DeploymentStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetDeploymentsV2DeploymentStatusConditionResult'],
                 observed_generation: _builtins.int):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> _builtins.int:
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class GetDeploymentsV2DeploymentStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 last_update_time: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.str:
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsV2DeploymentStrategyResult(dict):
    def __init__(__self__, *,
                 rolling_update: Mapping[str, _builtins.str],
                 type: _builtins.str):
        pulumi.set(__self__, "rolling_update", rolling_update)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "rolling_update")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateResult(dict):
    def __init__(__self__, *,
                 metadatas: Sequence['outputs.GetDeploymentsV2DeploymentTemplateMetadataResult'],
                 specs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecResult']):
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "specs", specs)

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecResult']:
        return pulumi.get(self, "specs")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateMetadataResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "labels", labels)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecResult(dict):
    def __init__(__self__, *,
                 active_deadline_seconds: _builtins.int,
                 affinities: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityResult'],
                 containers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerResult'],
                 dns_policy: _builtins.str,
                 hostname: _builtins.str,
                 image_pull_secrets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecImagePullSecretResult'],
                 node_name: _builtins.str,
                 overhead: Mapping[str, _builtins.str],
                 restart_policy: _builtins.str,
                 scheduler_name: _builtins.str,
                 set_hostname_as_pqdn: _builtins.bool,
                 share_process_namespace: _builtins.bool,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        pulumi.set(__self__, "affinities", affinities)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "dns_policy", dns_policy)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "overhead", overhead)
        pulumi.set(__self__, "restart_policy", restart_policy)
        pulumi.set(__self__, "scheduler_name", scheduler_name)
        pulumi.set(__self__, "set_hostname_as_pqdn", set_hostname_as_pqdn)
        pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> _builtins.int:
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityResult']:
        return pulumi.get(self, "affinities")

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerResult']:
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> _builtins.str:
        return pulumi.get(self, "dns_policy")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecImagePullSecretResult']:
        return pulumi.get(self, "image_pull_secrets")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "overhead")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> _builtins.str:
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> _builtins.str:
        return pulumi.get(self, "scheduler_name")

    @_builtins.property
    @pulumi.getter(name="setHostnameAsPqdn")
    def set_hostname_as_pqdn(self) -> _builtins.bool:
        return pulumi.get(self, "set_hostname_as_pqdn")

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> _builtins.bool:
        return pulumi.get(self, "share_process_namespace")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityResult(dict):
    def __init__(__self__, *,
                 node_affinities: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityResult'],
                 pod_anti_affinities: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityResult']):
        pulumi.set(__self__, "node_affinities", node_affinities)
        pulumi.set(__self__, "pod_anti_affinities", pod_anti_affinities)

    @_builtins.property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityResult']:
        return pulumi.get(self, "node_affinities")

    @_builtins.property
    @pulumi.getter(name="podAntiAffinities")
    def pod_anti_affinities(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityResult']:
        return pulumi.get(self, "pod_anti_affinities")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityResult(dict):
    def __init__(__self__, *,
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityResult(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult'],
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 pod_affinity_terms: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult'],
                 weight: _builtins.int):
        pulumi.set(__self__, "pod_affinity_terms", pod_affinity_terms)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="podAffinityTerms")
    def pod_affinity_terms(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult']:
        return pulumi.get(self, "pod_affinity_terms")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult(dict):
    def __init__(__self__, *,
                 label_selector: 'outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult',
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selector", label_selector)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> 'outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult':
        return pulumi.get(self, "label_selector")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 label_selectors: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult'],
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selectors", label_selectors)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult']:
        return pulumi.get(self, "label_selectors")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str],
                 env_froms: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromResult'],
                 envs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvResult'],
                 image: _builtins.str,
                 lifecycles: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecycleResult'],
                 liveness_probes: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeResult'],
                 name: _builtins.str,
                 ports: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerPortResult'],
                 readiness_probes: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeResult'],
                 resources: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerResourceResult'],
                 security_contexts: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextResult'],
                 startup_probes: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeResult'],
                 stdin: _builtins.bool,
                 stdin_once: _builtins.bool,
                 termination_message_path: _builtins.str,
                 termination_message_policy: _builtins.str,
                 tty: _builtins.bool,
                 volume_mounts: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerVolumeMountResult'],
                 working_dir: _builtins.str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "env_froms", env_froms)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "lifecycles", lifecycles)
        pulumi.set(__self__, "liveness_probes", liveness_probes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "readiness_probes", readiness_probes)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "startup_probes", startup_probes)
        pulumi.set(__self__, "stdin", stdin)
        pulumi.set(__self__, "stdin_once", stdin_once)
        pulumi.set(__self__, "termination_message_path", termination_message_path)
        pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromResult']:
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvResult']:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecycleResult']:
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeResult']:
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerPortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeResult']:
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeResult']:
        return pulumi.get(self, "startup_probes")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> _builtins.bool:
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> _builtins.bool:
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> _builtins.bool:
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> _builtins.str:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromResult(dict):
    def __init__(__self__, *,
                 config_map_reves: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromConfigMapRefResult'],
                 prefix: _builtins.str,
                 secret_reves: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromSecretRefResult']):
        pulumi.set(__self__, "config_map_reves", config_map_reves)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secret_reves", secret_reves)

    @_builtins.property
    @pulumi.getter(name="configMapReves")
    def config_map_reves(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromConfigMapRefResult']:
        return pulumi.get(self, "config_map_reves")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretReves")
    def secret_reves(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromSecretRefResult']:
        return pulumi.get(self, "secret_reves")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromConfigMapRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerEnvFromSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartResult'],
                 pre_stops: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopResult']):
        pulumi.set(__self__, "post_starts", post_starts)
        pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartResult']:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopResult']:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartExecResult'],
                 http_gets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopExecResult'],
                 http_gets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextCapabilityResult'],
                 proc_mount: _builtins.str,
                 read_only_root_file_system: _builtins.bool,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "proc_mount", proc_mount)
        pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> _builtins.str:
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> _builtins.bool:
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerSecurityContextCapabilityResult(dict):
    def __init__(__self__, *,
                 adds: Sequence[_builtins.str],
                 drops: Sequence[_builtins.str]):
        pulumi.set(__self__, "adds", adds)
        pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 extend_path_mode: _builtins.str,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str,
                 sub_path_expr: _builtins.str):
        pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)
        pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> _builtins.str:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> _builtins.str:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class GetDeploymentsV2DeploymentTemplateSpecImagePullSecretResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetEventsV2EventResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 api_version: _builtins.str,
                 count: _builtins.int,
                 event_time: _builtins.str,
                 first_timestamp: _builtins.str,
                 involved_objects: Sequence['outputs.GetEventsV2EventInvolvedObjectResult'],
                 kind: _builtins.str,
                 last_timestamp: _builtins.str,
                 message: _builtins.str,
                 metadatas: Sequence['outputs.GetEventsV2EventMetadataResult'],
                 reason: _builtins.str,
                 reporting_component: _builtins.str,
                 reporting_instance: _builtins.str,
                 sources: Sequence['outputs.GetEventsV2EventSourceResult'],
                 type: _builtins.str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "event_time", event_time)
        pulumi.set(__self__, "first_timestamp", first_timestamp)
        pulumi.set(__self__, "involved_objects", involved_objects)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "last_timestamp", last_timestamp)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "reporting_component", reporting_component)
        pulumi.set(__self__, "reporting_instance", reporting_instance)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="eventTime")
    def event_time(self) -> _builtins.str:
        return pulumi.get(self, "event_time")

    @_builtins.property
    @pulumi.getter(name="firstTimestamp")
    def first_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "first_timestamp")

    @_builtins.property
    @pulumi.getter(name="involvedObjects")
    def involved_objects(self) -> Sequence['outputs.GetEventsV2EventInvolvedObjectResult']:
        return pulumi.get(self, "involved_objects")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="lastTimestamp")
    def last_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "last_timestamp")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetEventsV2EventMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="reportingComponent")
    def reporting_component(self) -> _builtins.str:
        return pulumi.get(self, "reporting_component")

    @_builtins.property
    @pulumi.getter(name="reportingInstance")
    def reporting_instance(self) -> _builtins.str:
        return pulumi.get(self, "reporting_instance")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetEventsV2EventSourceResult']:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventsV2EventInvolvedObjectResult(dict):
    def __init__(__self__, *,
                 field_path: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "field_path", field_path)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> _builtins.str:
        return pulumi.get(self, "field_path")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetEventsV2EventMetadataResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetEventsV2EventSourceResult(dict):
    def __init__(__self__, *,
                 component: _builtins.str,
                 host: _builtins.str):
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def component(self) -> _builtins.str:
        return pulumi.get(self, "component")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")


@pulumi.output_type
class GetHpasV2HpaResult(dict):
    def __init__(__self__, *,
                 behaviors: Sequence['outputs.GetHpasV2HpaBehaviorResult'],
                 creation_timestamp: _builtins.str,
                 max_replicas: _builtins.int,
                 metrics: Sequence['outputs.GetHpasV2HpaMetricResult'],
                 min_replicas: _builtins.int,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 scale_target_reves: Sequence['outputs.GetHpasV2HpaScaleTargetRefResult'],
                 statuses: Sequence['outputs.GetHpasV2HpaStatusResult'],
                 uid: _builtins.str):
        pulumi.set(__self__, "behaviors", behaviors)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "scale_target_reves", scale_target_reves)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def behaviors(self) -> Sequence['outputs.GetHpasV2HpaBehaviorResult']:
        return pulumi.get(self, "behaviors")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> _builtins.int:
        return pulumi.get(self, "max_replicas")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> _builtins.int:
        return pulumi.get(self, "min_replicas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="scaleTargetReves")
    def scale_target_reves(self) -> Sequence['outputs.GetHpasV2HpaScaleTargetRefResult']:
        return pulumi.get(self, "scale_target_reves")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetHpasV2HpaStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetHpasV2HpaBehaviorResult(dict):
    def __init__(__self__, *,
                 scale_downs: Sequence['outputs.GetHpasV2HpaBehaviorScaleDownResult'],
                 scale_ups: Sequence['outputs.GetHpasV2HpaBehaviorScaleUpResult']):
        pulumi.set(__self__, "scale_downs", scale_downs)
        pulumi.set(__self__, "scale_ups", scale_ups)

    @_builtins.property
    @pulumi.getter(name="scaleDowns")
    def scale_downs(self) -> Sequence['outputs.GetHpasV2HpaBehaviorScaleDownResult']:
        return pulumi.get(self, "scale_downs")

    @_builtins.property
    @pulumi.getter(name="scaleUps")
    def scale_ups(self) -> Sequence['outputs.GetHpasV2HpaBehaviorScaleUpResult']:
        return pulumi.get(self, "scale_ups")


@pulumi.output_type
class GetHpasV2HpaBehaviorScaleDownResult(dict):
    def __init__(__self__, *,
                 policies: Sequence['outputs.GetHpasV2HpaBehaviorScaleDownPolicyResult'],
                 select_policy: _builtins.str,
                 stabilization_window_seconds: _builtins.int):
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "select_policy", select_policy)
        pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetHpasV2HpaBehaviorScaleDownPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> _builtins.str:
        return pulumi.get(self, "select_policy")

    @_builtins.property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> _builtins.int:
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class GetHpasV2HpaBehaviorScaleDownPolicyResult(dict):
    def __init__(__self__, *,
                 period_seconds: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.int):
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaBehaviorScaleUpResult(dict):
    def __init__(__self__, *,
                 policies: Sequence['outputs.GetHpasV2HpaBehaviorScaleUpPolicyResult'],
                 select_policy: _builtins.str,
                 stabilization_window_seconds: _builtins.int):
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "select_policy", select_policy)
        pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetHpasV2HpaBehaviorScaleUpPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> _builtins.str:
        return pulumi.get(self, "select_policy")

    @_builtins.property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> _builtins.int:
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class GetHpasV2HpaBehaviorScaleUpPolicyResult(dict):
    def __init__(__self__, *,
                 period_seconds: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.int):
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaMetricResult(dict):
    def __init__(__self__, *,
                 container_resources: Sequence['outputs.GetHpasV2HpaMetricContainerResourceResult'],
                 externals: Sequence['outputs.GetHpasV2HpaMetricExternalResult'],
                 objects: Sequence['outputs.GetHpasV2HpaMetricObjectResult'],
                 pods: Sequence['outputs.GetHpasV2HpaMetricPodResult'],
                 resources: Sequence['outputs.GetHpasV2HpaMetricResourceResult'],
                 type: _builtins.str):
        pulumi.set(__self__, "container_resources", container_resources)
        pulumi.set(__self__, "externals", externals)
        pulumi.set(__self__, "objects", objects)
        pulumi.set(__self__, "pods", pods)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Sequence['outputs.GetHpasV2HpaMetricContainerResourceResult']:
        return pulumi.get(self, "container_resources")

    @_builtins.property
    @pulumi.getter
    def externals(self) -> Sequence['outputs.GetHpasV2HpaMetricExternalResult']:
        return pulumi.get(self, "externals")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectResult']:
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter
    def pods(self) -> Sequence['outputs.GetHpasV2HpaMetricPodResult']:
        return pulumi.get(self, "pods")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetHpasV2HpaMetricResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHpasV2HpaMetricContainerResourceResult(dict):
    def __init__(__self__, *,
                 container: _builtins.str,
                 name: _builtins.str,
                 targets: Sequence['outputs.GetHpasV2HpaMetricContainerResourceTargetResult']):
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def container(self) -> _builtins.str:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaMetricContainerResourceTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaMetricContainerResourceTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaMetricExternalResult(dict):
    def __init__(__self__, *,
                 metrics: Sequence['outputs.GetHpasV2HpaMetricExternalMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaMetricExternalTargetResult']):
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaMetricExternalMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaMetricExternalTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaMetricExternalMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaMetricExternalMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaMetricExternalMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaMetricExternalMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaMetricExternalMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaMetricExternalMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaMetricExternalMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaMetricExternalTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaMetricObjectResult(dict):
    def __init__(__self__, *,
                 described_objects: Sequence['outputs.GetHpasV2HpaMetricObjectDescribedObjectResult'],
                 metrics: Sequence['outputs.GetHpasV2HpaMetricObjectMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaMetricObjectTargetResult']):
        pulumi.set(__self__, "described_objects", described_objects)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter(name="describedObjects")
    def described_objects(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectDescribedObjectResult']:
        return pulumi.get(self, "described_objects")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaMetricObjectDescribedObjectResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHpasV2HpaMetricObjectMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaMetricObjectMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaMetricObjectMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaMetricObjectMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaMetricObjectMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaMetricObjectMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaMetricObjectTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaMetricPodResult(dict):
    def __init__(__self__, *,
                 metrics: Sequence['outputs.GetHpasV2HpaMetricPodMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaMetricPodTargetResult']):
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaMetricPodMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaMetricPodTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaMetricPodMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaMetricPodMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaMetricPodMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaMetricPodMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaMetricPodMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaMetricPodMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaMetricPodMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaMetricPodTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaMetricResourceResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 targets: Sequence['outputs.GetHpasV2HpaMetricResourceTargetResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaMetricResourceTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaMetricResourceTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaScaleTargetRefResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHpasV2HpaStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetHpasV2HpaStatusConditionResult'],
                 current_metrics: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResult'],
                 current_replicas: _builtins.int,
                 desired_replicas: _builtins.int,
                 last_scale_time: _builtins.str,
                 observed_generation: _builtins.int):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "current_metrics", current_metrics)
        pulumi.set(__self__, "current_replicas", current_replicas)
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "last_scale_time", last_scale_time)
        pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetHpasV2HpaStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="currentMetrics")
    def current_metrics(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResult']:
        return pulumi.get(self, "current_metrics")

    @_builtins.property
    @pulumi.getter(name="currentReplicas")
    def current_replicas(self) -> _builtins.int:
        return pulumi.get(self, "current_replicas")

    @_builtins.property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> _builtins.int:
        return pulumi.get(self, "desired_replicas")

    @_builtins.property
    @pulumi.getter(name="lastScaleTime")
    def last_scale_time(self) -> _builtins.str:
        return pulumi.get(self, "last_scale_time")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> _builtins.int:
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class GetHpasV2HpaStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricResult(dict):
    def __init__(__self__, *,
                 container_resources: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricContainerResourceResult'],
                 externals: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalResult'],
                 objects: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectResult'],
                 pods: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodResult'],
                 resources: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResourceResult'],
                 type: _builtins.str):
        pulumi.set(__self__, "container_resources", container_resources)
        pulumi.set(__self__, "externals", externals)
        pulumi.set(__self__, "objects", objects)
        pulumi.set(__self__, "pods", pods)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricContainerResourceResult']:
        return pulumi.get(self, "container_resources")

    @_builtins.property
    @pulumi.getter
    def externals(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalResult']:
        return pulumi.get(self, "externals")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectResult']:
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter
    def pods(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodResult']:
        return pulumi.get(self, "pods")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricContainerResourceResult(dict):
    def __init__(__self__, *,
                 container: _builtins.str,
                 name: _builtins.str,
                 targets: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricContainerResourceTargetResult']):
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def container(self) -> _builtins.str:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricContainerResourceTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricContainerResourceTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricExternalResult(dict):
    def __init__(__self__, *,
                 metrics: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalTargetResult']):
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricExternalMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricExternalMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricExternalTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectResult(dict):
    def __init__(__self__, *,
                 described_objects: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectDescribedObjectResult'],
                 metrics: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectTargetResult']):
        pulumi.set(__self__, "described_objects", described_objects)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter(name="describedObjects")
    def described_objects(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectDescribedObjectResult']:
        return pulumi.get(self, "described_objects")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectDescribedObjectResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricObjectTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricPodResult(dict):
    def __init__(__self__, *,
                 metrics: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricResult'],
                 targets: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodTargetResult']):
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricPodMetricResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 selectors: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricSelectorResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricSelectorResult']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricPodMetricSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricPodMetricSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricPodMetricSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricPodTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricResourceResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 targets: Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResourceTargetResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetHpasV2HpaStatusCurrentMetricResourceTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetHpasV2HpaStatusCurrentMetricResourceTargetResult(dict):
    def __init__(__self__, *,
                 average_utilization: _builtins.int,
                 average_value: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "average_utilization", average_utilization)
        pulumi.set(__self__, "average_value", average_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> _builtins.int:
        return pulumi.get(self, "average_utilization")

    @_builtins.property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "average_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 building_configs: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotBuildingConfigResult'],
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 image_snapshot_size: _builtins.int,
                 images: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotImageResult'],
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 registries: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotRegistryResult'],
                 resource_version: _builtins.str,
                 statuses: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotStatusResult'],
                 ttl_days_after_created: _builtins.int,
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "building_configs", building_configs)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "image_snapshot_size", image_snapshot_size)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registries", registries)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "ttl_days_after_created", ttl_days_after_created)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="buildingConfigs")
    def building_configs(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotBuildingConfigResult']:
        return pulumi.get(self, "building_configs")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter(name="imageSnapshotSize")
    def image_snapshot_size(self) -> _builtins.int:
        return pulumi.get(self, "image_snapshot_size")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotImageResult']:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def registries(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotRegistryResult']:
        return pulumi.get(self, "registries")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="ttlDaysAfterCreated")
    def ttl_days_after_created(self) -> _builtins.int:
        return pulumi.get(self, "ttl_days_after_created")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotBuildingConfigResult(dict):
    def __init__(__self__, *,
                 auto_create_eip: _builtins.bool,
                 auto_create_eip_attributes: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotBuildingConfigAutoCreateEipAttributeResult'],
                 eip_id: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "auto_create_eip", auto_create_eip)
        pulumi.set(__self__, "auto_create_eip_attributes", auto_create_eip_attributes)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter(name="autoCreateEip")
    def auto_create_eip(self) -> _builtins.bool:
        return pulumi.get(self, "auto_create_eip")

    @_builtins.property
    @pulumi.getter(name="autoCreateEipAttributes")
    def auto_create_eip_attributes(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotBuildingConfigAutoCreateEipAttributeResult']:
        return pulumi.get(self, "auto_create_eip_attributes")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> _builtins.str:
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotBuildingConfigAutoCreateEipAttributeResult(dict):
    def __init__(__self__, *,
                 bandwidth_charge_mode: _builtins.str,
                 bandwidth_id: _builtins.str,
                 bandwidth_size: _builtins.int,
                 ip_version: _builtins.int,
                 type: _builtins.str):
        pulumi.set(__self__, "bandwidth_charge_mode", bandwidth_charge_mode)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthChargeMode")
    def bandwidth_charge_mode(self) -> _builtins.str:
        return pulumi.get(self, "bandwidth_charge_mode")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotImageResult(dict):
    def __init__(__self__, *,
                 image: _builtins.str):
        pulumi.set(__self__, "image", image)

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotRegistryResult(dict):
    def __init__(__self__, *,
                 image_pull_secret: _builtins.str,
                 insecure_skip_verify: _builtins.bool,
                 plain_http: _builtins.bool,
                 server: _builtins.str):
        pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)
        pulumi.set(__self__, "plain_http", plain_http)
        pulumi.set(__self__, "server", server)

    @_builtins.property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> _builtins.str:
        return pulumi.get(self, "image_pull_secret")

    @_builtins.property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> _builtins.bool:
        return pulumi.get(self, "insecure_skip_verify")

    @_builtins.property
    @pulumi.getter(name="plainHttp")
    def plain_http(self) -> _builtins.bool:
        return pulumi.get(self, "plain_http")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotStatusResult(dict):
    def __init__(__self__, *,
                 expire_date_time: _builtins.str,
                 images: Sequence['outputs.GetImageSnapshotsV2ImageSnapshotStatusImageResult'],
                 last_updated_time: _builtins.str,
                 message: _builtins.str,
                 phase: _builtins.str,
                 reason: _builtins.str,
                 snapshot_id: _builtins.str,
                 snapshot_name: _builtins.str):
        pulumi.set(__self__, "expire_date_time", expire_date_time)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)

    @_builtins.property
    @pulumi.getter(name="expireDateTime")
    def expire_date_time(self) -> _builtins.str:
        return pulumi.get(self, "expire_date_time")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetImageSnapshotsV2ImageSnapshotStatusImageResult']:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> _builtins.str:
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> _builtins.str:
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> _builtins.str:
        return pulumi.get(self, "snapshot_name")


@pulumi.output_type
class GetImageSnapshotsV2ImageSnapshotStatusImageResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 image: _builtins.str,
                 size_bytes: _builtins.int):
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "size_bytes", size_bytes)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> _builtins.int:
        return pulumi.get(self, "size_bytes")


@pulumi.output_type
class GetNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 auto_expend_enabled: _builtins.bool,
                 container_network_enabled: _builtins.bool,
                 created_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 networks: Sequence['outputs.GetNamespacesNamespaceNetworkResult'],
                 rbac_enabled: _builtins.bool,
                 recycling_interval: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str,
                 warmup_pool_size: _builtins.int):
        """
        :param _builtins.bool auto_expend_enabled: Whether elastic scheduling is enabled.
        :param _builtins.bool container_network_enabled: Whether container network is enabled.
        :param _builtins.str created_at: The time when the namespace was created in UTC format, such as **2021-09-27T01:30:39Z**.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID in UUID format.
        :param _builtins.str id: The VPC ID in UUID format.
        :param _builtins.str name: Specifies th name of the specified CCI namespace.
               This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
               and must start and end with lowercase letters and digits.
        :param Sequence['GetNamespacesNamespaceNetworkArgs'] networks: The network information of the CCI namespace. The structure is documented below.
        :param _builtins.bool rbac_enabled: Whether Role-based access control is enabled.
               After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
               permission.
        :param _builtins.int recycling_interval: The IP address recycling interval in hour.
               The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
        :param _builtins.str status: The CCI namespace status.
        :param _builtins.str type: Specifies the CCI namespace type.
               The valid values are **general-computing** and **gpu-accelerated**.
        :param _builtins.int warmup_pool_size: The size of IP pool to warm-up.
        """
        pulumi.set(__self__, "auto_expend_enabled", auto_expend_enabled)
        pulumi.set(__self__, "container_network_enabled", container_network_enabled)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "rbac_enabled", rbac_enabled)
        pulumi.set(__self__, "recycling_interval", recycling_interval)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "warmup_pool_size", warmup_pool_size)

    @_builtins.property
    @pulumi.getter(name="autoExpendEnabled")
    def auto_expend_enabled(self) -> _builtins.bool:
        """
        Whether elastic scheduling is enabled.
        """
        return pulumi.get(self, "auto_expend_enabled")

    @_builtins.property
    @pulumi.getter(name="containerNetworkEnabled")
    def container_network_enabled(self) -> _builtins.bool:
        """
        Whether container network is enabled.
        """
        return pulumi.get(self, "container_network_enabled")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the namespace was created in UTC format, such as **2021-09-27T01:30:39Z**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID in UUID format.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The VPC ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies th name of the specified CCI namespace.
        This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
        and must start and end with lowercase letters and digits.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetNamespacesNamespaceNetworkResult']:
        """
        The network information of the CCI namespace. The structure is documented below.
        """
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter(name="rbacEnabled")
    def rbac_enabled(self) -> _builtins.bool:
        """
        Whether Role-based access control is enabled.
        After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
        permission.
        """
        return pulumi.get(self, "rbac_enabled")

    @_builtins.property
    @pulumi.getter(name="recyclingInterval")
    def recycling_interval(self) -> _builtins.int:
        """
        The IP address recycling interval in hour.
        The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
        """
        return pulumi.get(self, "recycling_interval")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The CCI namespace status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the CCI namespace type.
        The valid values are **general-computing** and **gpu-accelerated**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="warmupPoolSize")
    def warmup_pool_size(self) -> _builtins.int:
        """
        The size of IP pool to warm-up.
        """
        return pulumi.get(self, "warmup_pool_size")


@pulumi.output_type
class GetNamespacesNamespaceNetworkResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 security_group_id: _builtins.str,
                 vpcs: Sequence['outputs.GetNamespacesNamespaceNetworkVpcResult']):
        """
        :param _builtins.str name: Specifies th name of the specified CCI namespace.
               This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
               and must start and end with lowercase letters and digits.
        :param _builtins.str security_group_id: The default security group ID in UUID format.
        :param Sequence['GetNamespacesNamespaceNetworkVpcArgs'] vpcs: The network information of the VPC under the CCI network. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies th name of the specified CCI namespace.
        This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
        and must start and end with lowercase letters and digits.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The default security group ID in UUID format.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetNamespacesNamespaceNetworkVpcResult']:
        """
        The network information of the VPC under the CCI network. The structure is documented below.
        """
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetNamespacesNamespaceNetworkVpcResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 network_id: _builtins.str,
                 subnet_cidr: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str id: The VPC ID in UUID format.
        :param _builtins.str network_id: The network ID of the VPC subnet in UUID format.
        :param _builtins.str subnet_cidr: The subnet CIDR block.
        :param _builtins.str subnet_id: The VPC subnet ID in UUID format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The VPC ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        The network ID of the VPC subnet in UUID format.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> _builtins.str:
        """
        The subnet CIDR block.
        """
        return pulumi.get(self, "subnet_cidr")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The VPC subnet ID in UUID format.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNamespacesV2NamespaceResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 api_version: _builtins.str,
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 kind: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 resource_version: _builtins.str,
                 status: _builtins.str,
                 uid: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: The annotations of the namespace.
        :param _builtins.str api_version: The API version of the namespace.
        :param _builtins.str creation_timestamp: The creation timestamp of the namespace.
        :param Sequence[_builtins.str] finalizers: The finalizers of the namespace.
        :param _builtins.str kind: The kind of the namespace.
        :param Mapping[str, _builtins.str] labels: The labels of the namespace.
        :param _builtins.str name: The name of the namespace.
        :param _builtins.str resource_version: The resource version of the namespace.
        :param _builtins.str status: The status of the namespace.
        :param _builtins.str uid: The uid of the namespace.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The annotations of the namespace.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        """
        The API version of the namespace.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        """
        The creation timestamp of the namespace.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        """
        The finalizers of the namespace.
        """
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        The kind of the namespace.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        The labels of the namespace.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        """
        The resource version of the namespace.
        """
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the namespace.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        """
        The uid of the namespace.
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetNetworksV2NetworkResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 ip_families: Sequence[_builtins.str],
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 security_group_ids: Sequence[_builtins.str],
                 statuses: Sequence['outputs.GetNetworksV2NetworkStatusResult'],
                 subnets: Sequence['outputs.GetNetworksV2NetworkSubnetResult'],
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "ip_families", ip_families)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter(name="ipFamilies")
    def ip_families(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ip_families")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetNetworksV2NetworkStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetNetworksV2NetworkSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetNetworksV2NetworkStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetNetworksV2NetworkStatusConditionResult'],
                 status: _builtins.str,
                 subnet_attrs: Sequence['outputs.GetNetworksV2NetworkStatusSubnetAttrResult']):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_attrs", subnet_attrs)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetNetworksV2NetworkStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetAttrs")
    def subnet_attrs(self) -> Sequence['outputs.GetNetworksV2NetworkStatusSubnetAttrResult']:
        return pulumi.get(self, "subnet_attrs")


@pulumi.output_type
class GetNetworksV2NetworkStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworksV2NetworkStatusSubnetAttrResult(dict):
    def __init__(__self__, *,
                 network_id: _builtins.str,
                 subnet_v4_id: _builtins.str,
                 subnet_v6_id: _builtins.str):
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "subnet_v4_id", subnet_v4_id)
        pulumi.set(__self__, "subnet_v6_id", subnet_v6_id)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="subnetV4Id")
    def subnet_v4_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_v4_id")

    @_builtins.property
    @pulumi.getter(name="subnetV6Id")
    def subnet_v6_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_v6_id")


@pulumi.output_type
class GetNetworksV2NetworkSubnetResult(dict):
    def __init__(__self__, *,
                 subnet_id: _builtins.str):
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetPersistentVolumeClaimsV2PvcResult(dict):
    def __init__(__self__, *,
                 access_modes: Sequence[_builtins.str],
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 resources: Sequence['outputs.GetPersistentVolumeClaimsV2PvcResourceResult'],
                 selectors: Sequence['outputs.GetPersistentVolumeClaimsV2PvcSelectorResult'],
                 status: _builtins.str,
                 storage_class_name: _builtins.str,
                 uid: _builtins.str,
                 valume_name: _builtins.str,
                 volume_mode: _builtins.str):
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "selectors", selectors)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_class_name", storage_class_name)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "valume_name", valume_name)
        pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_modes")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPersistentVolumeClaimsV2PvcResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetPersistentVolumeClaimsV2PvcSelectorResult']:
        return pulumi.get(self, "selectors")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_class_name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="valumeName")
    def valume_name(self) -> _builtins.str:
        return pulumi.get(self, "valume_name")

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> _builtins.str:
        return pulumi.get(self, "volume_mode")


@pulumi.output_type
class GetPersistentVolumeClaimsV2PvcResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetPersistentVolumeClaimsV2PvcSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetPersistentVolumeClaimsV2PvcSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetPersistentVolumeClaimsV2PvcSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetPersistentVolumeClaimsV2PvcSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeResult(dict):
    def __init__(__self__, *,
                 access_modes: Sequence[_builtins.str],
                 annotations: Mapping[str, _builtins.str],
                 capacity: Mapping[str, _builtins.str],
                 claim_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeClaimRefResult'],
                 creation_timestamp: _builtins.str,
                 csis: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiResult'],
                 finalizers: Sequence[_builtins.str],
                 labels: Mapping[str, _builtins.str],
                 mount_options: Sequence[_builtins.str],
                 name: _builtins.str,
                 node_affinities: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityResult'],
                 reclaim_policy: _builtins.str,
                 resource_version: _builtins.str,
                 statuses: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeStatusResult'],
                 storage_class_name: _builtins.str,
                 uid: _builtins.str,
                 volume_mode: _builtins.str):
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "claim_reves", claim_reves)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "csis", csis)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "mount_options", mount_options)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_affinities", node_affinities)
        pulumi.set(__self__, "reclaim_policy", reclaim_policy)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "storage_class_name", storage_class_name)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_modes")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="claimReves")
    def claim_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeClaimRefResult']:
        return pulumi.get(self, "claim_reves")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def csis(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiResult']:
        return pulumi.get(self, "csis")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "mount_options")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityResult']:
        return pulumi.get(self, "node_affinities")

    @_builtins.property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> _builtins.str:
        return pulumi.get(self, "reclaim_policy")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_class_name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> _builtins.str:
        return pulumi.get(self, "volume_mode")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeClaimRefResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 field_path: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "field_path", field_path)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> _builtins.str:
        return pulumi.get(self, "field_path")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiResult(dict):
    def __init__(__self__, *,
                 controller_expand_secret_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiControllerExpandSecretRefResult'],
                 controller_publish_secret_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiControllerPublishSecretRefResult'],
                 driver: _builtins.str,
                 fs_type: _builtins.str,
                 node_expand_secret_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodeExpandSecretRefResult'],
                 node_publish_secret_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodePublishSecretRefResult'],
                 node_stage_secret_reves: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodeStageSecretRefResult'],
                 read_only: _builtins.bool,
                 volume_attributes: Mapping[str, _builtins.str],
                 volume_handle: _builtins.str):
        pulumi.set(__self__, "controller_expand_secret_reves", controller_expand_secret_reves)
        pulumi.set(__self__, "controller_publish_secret_reves", controller_publish_secret_reves)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "fs_type", fs_type)
        pulumi.set(__self__, "node_expand_secret_reves", node_expand_secret_reves)
        pulumi.set(__self__, "node_publish_secret_reves", node_publish_secret_reves)
        pulumi.set(__self__, "node_stage_secret_reves", node_stage_secret_reves)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "volume_attributes", volume_attributes)
        pulumi.set(__self__, "volume_handle", volume_handle)

    @_builtins.property
    @pulumi.getter(name="controllerExpandSecretReves")
    def controller_expand_secret_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiControllerExpandSecretRefResult']:
        return pulumi.get(self, "controller_expand_secret_reves")

    @_builtins.property
    @pulumi.getter(name="controllerPublishSecretReves")
    def controller_publish_secret_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiControllerPublishSecretRefResult']:
        return pulumi.get(self, "controller_publish_secret_reves")

    @_builtins.property
    @pulumi.getter
    def driver(self) -> _builtins.str:
        return pulumi.get(self, "driver")

    @_builtins.property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> _builtins.str:
        return pulumi.get(self, "fs_type")

    @_builtins.property
    @pulumi.getter(name="nodeExpandSecretReves")
    def node_expand_secret_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodeExpandSecretRefResult']:
        return pulumi.get(self, "node_expand_secret_reves")

    @_builtins.property
    @pulumi.getter(name="nodePublishSecretReves")
    def node_publish_secret_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodePublishSecretRefResult']:
        return pulumi.get(self, "node_publish_secret_reves")

    @_builtins.property
    @pulumi.getter(name="nodeStageSecretReves")
    def node_stage_secret_reves(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeCsiNodeStageSecretRefResult']:
        return pulumi.get(self, "node_stage_secret_reves")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "volume_attributes")

    @_builtins.property
    @pulumi.getter(name="volumeHandle")
    def volume_handle(self) -> _builtins.str:
        return pulumi.get(self, "volume_handle")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiControllerExpandSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiControllerPublishSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiNodeExpandSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiNodePublishSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeCsiNodeStageSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 namespace: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeNodeAffinityResult(dict):
    def __init__(__self__, *,
                 requireds: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredResult']):
        pulumi.set(__self__, "requireds", requireds)

    @_builtins.property
    @pulumi.getter
    def requireds(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredResult']:
        return pulumi.get(self, "requireds")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredResult(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermResult']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermResult']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermMatchExpressionResult']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeNodeAffinityRequiredNodeSelectorTermMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPersistentVolumesV2PersistentVolumeStatusResult(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 phase: _builtins.str,
                 reason: _builtins.str):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "reason", reason)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> _builtins.str:
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetPodsV2PodResult(dict):
    def __init__(__self__, *,
                 active_deadline_seconds: _builtins.int,
                 affinities: Sequence['outputs.GetPodsV2PodAffinityResult'],
                 annotations: Mapping[str, _builtins.str],
                 api_version: _builtins.str,
                 containers: Sequence['outputs.GetPodsV2PodContainerResult'],
                 creation_timestamp: _builtins.str,
                 dns_configs: Sequence['outputs.GetPodsV2PodDnsConfigResult'],
                 dns_policy: _builtins.str,
                 ephemeral_containers: Sequence['outputs.GetPodsV2PodEphemeralContainerResult'],
                 finalizers: Sequence[_builtins.str],
                 host_aliases: Sequence['outputs.GetPodsV2PodHostAliasResult'],
                 hostname: _builtins.str,
                 image_pull_secrets: Sequence['outputs.GetPodsV2PodImagePullSecretResult'],
                 init_containers: Sequence['outputs.GetPodsV2PodInitContainerResult'],
                 kind: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 node_name: _builtins.str,
                 overhead: Mapping[str, _builtins.str],
                 readiness_gates: Sequence['outputs.GetPodsV2PodReadinessGateResult'],
                 resource_version: _builtins.str,
                 restart_policy: _builtins.str,
                 scheduler_name: _builtins.str,
                 security_contexts: Sequence['outputs.GetPodsV2PodSecurityContextResult'],
                 set_hostname_as_fqdn: _builtins.bool,
                 share_process_namespace: _builtins.bool,
                 statuses: Sequence['outputs.GetPodsV2PodStatusResult'],
                 termination_grace_period_seconds: _builtins.int,
                 uid: _builtins.str,
                 volumes: Sequence['outputs.GetPodsV2PodVolumeResult']):
        pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        pulumi.set(__self__, "affinities", affinities)
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "dns_configs", dns_configs)
        pulumi.set(__self__, "dns_policy", dns_policy)
        pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "host_aliases", host_aliases)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        pulumi.set(__self__, "init_containers", init_containers)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "overhead", overhead)
        pulumi.set(__self__, "readiness_gates", readiness_gates)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "restart_policy", restart_policy)
        pulumi.set(__self__, "scheduler_name", scheduler_name)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "set_hostname_as_fqdn", set_hostname_as_fqdn)
        pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> _builtins.int:
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> Sequence['outputs.GetPodsV2PodAffinityResult']:
        return pulumi.get(self, "affinities")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetPodsV2PodContainerResult']:
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Sequence['outputs.GetPodsV2PodDnsConfigResult']:
        return pulumi.get(self, "dns_configs")

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> _builtins.str:
        return pulumi.get(self, "dns_policy")

    @_builtins.property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerResult']:
        return pulumi.get(self, "ephemeral_containers")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Sequence['outputs.GetPodsV2PodHostAliasResult']:
        return pulumi.get(self, "host_aliases")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Sequence['outputs.GetPodsV2PodImagePullSecretResult']:
        return pulumi.get(self, "image_pull_secrets")

    @_builtins.property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Sequence['outputs.GetPodsV2PodInitContainerResult']:
        return pulumi.get(self, "init_containers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "overhead")

    @_builtins.property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Sequence['outputs.GetPodsV2PodReadinessGateResult']:
        return pulumi.get(self, "readiness_gates")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> _builtins.str:
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> _builtins.str:
        return pulumi.get(self, "scheduler_name")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetPodsV2PodSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="setHostnameAsFqdn")
    def set_hostname_as_fqdn(self) -> _builtins.bool:
        return pulumi.get(self, "set_hostname_as_fqdn")

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> _builtins.bool:
        return pulumi.get(self, "share_process_namespace")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetPodsV2PodStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetPodsV2PodVolumeResult']:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetPodsV2PodAffinityResult(dict):
    def __init__(__self__, *,
                 node_affinities: Sequence['outputs.GetPodsV2PodAffinityNodeAffinityResult'],
                 pod_anti_affinities: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityResult']):
        pulumi.set(__self__, "node_affinities", node_affinities)
        pulumi.set(__self__, "pod_anti_affinities", pod_anti_affinities)

    @_builtins.property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Sequence['outputs.GetPodsV2PodAffinityNodeAffinityResult']:
        return pulumi.get(self, "node_affinities")

    @_builtins.property
    @pulumi.getter(name="podAntiAffinities")
    def pod_anti_affinities(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityResult']:
        return pulumi.get(self, "pod_anti_affinities")


@pulumi.output_type
class GetPodsV2PodAffinityNodeAffinityResult(dict):
    def __init__(__self__, *,
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class GetPodsV2PodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityResult(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult'],
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 pod_affinity_terms: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult'],
                 weight: _builtins.int):
        pulumi.set(__self__, "pod_affinity_terms", pod_affinity_terms)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="podAffinityTerms")
    def pod_affinity_terms(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult']:
        return pulumi.get(self, "pod_affinity_terms")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult(dict):
    def __init__(__self__, *,
                 label_selectors: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult'],
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selectors", label_selectors)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult']:
        return pulumi.get(self, "label_selectors")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 label_selectors: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult'],
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selectors", label_selectors)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult']:
        return pulumi.get(self, "label_selectors")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetPodsV2PodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPodsV2PodContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str],
                 env_froms: Sequence['outputs.GetPodsV2PodContainerEnvFromResult'],
                 envs: Sequence['outputs.GetPodsV2PodContainerEnvResult'],
                 image: _builtins.str,
                 lifecycles: Sequence['outputs.GetPodsV2PodContainerLifecycleResult'],
                 liveness_probes: Sequence['outputs.GetPodsV2PodContainerLivenessProbeResult'],
                 name: _builtins.str,
                 ports: Sequence['outputs.GetPodsV2PodContainerPortResult'],
                 readiness_probes: Sequence['outputs.GetPodsV2PodContainerReadinessProbeResult'],
                 resources: Sequence['outputs.GetPodsV2PodContainerResourceResult'],
                 security_contexts: Sequence['outputs.GetPodsV2PodContainerSecurityContextResult'],
                 startup_probes: Sequence['outputs.GetPodsV2PodContainerStartupProbeResult'],
                 stdin: _builtins.bool,
                 stdin_once: _builtins.bool,
                 termination_message_path: _builtins.str,
                 termination_message_policy: _builtins.str,
                 tty: _builtins.bool,
                 volume_mounts: Sequence['outputs.GetPodsV2PodContainerVolumeMountResult'],
                 working_dir: _builtins.str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "env_froms", env_froms)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "lifecycles", lifecycles)
        pulumi.set(__self__, "liveness_probes", liveness_probes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "readiness_probes", readiness_probes)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "startup_probes", startup_probes)
        pulumi.set(__self__, "stdin", stdin)
        pulumi.set(__self__, "stdin_once", stdin_once)
        pulumi.set(__self__, "termination_message_path", termination_message_path)
        pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Sequence['outputs.GetPodsV2PodContainerEnvFromResult']:
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetPodsV2PodContainerEnvResult']:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Sequence['outputs.GetPodsV2PodContainerLifecycleResult']:
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetPodsV2PodContainerLivenessProbeResult']:
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetPodsV2PodContainerPortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetPodsV2PodContainerReadinessProbeResult']:
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPodsV2PodContainerResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetPodsV2PodContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetPodsV2PodContainerStartupProbeResult']:
        return pulumi.get(self, "startup_probes")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> _builtins.bool:
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> _builtins.bool:
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> _builtins.bool:
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetPodsV2PodContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> _builtins.str:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class GetPodsV2PodContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerEnvFromResult(dict):
    def __init__(__self__, *,
                 config_map_reves: Sequence['outputs.GetPodsV2PodContainerEnvFromConfigMapRefResult'],
                 prefix: _builtins.str,
                 secret_reves: Sequence['outputs.GetPodsV2PodContainerEnvFromSecretRefResult']):
        pulumi.set(__self__, "config_map_reves", config_map_reves)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secret_reves", secret_reves)

    @_builtins.property
    @pulumi.getter(name="configMapReves")
    def config_map_reves(self) -> Sequence['outputs.GetPodsV2PodContainerEnvFromConfigMapRefResult']:
        return pulumi.get(self, "config_map_reves")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretReves")
    def secret_reves(self) -> Sequence['outputs.GetPodsV2PodContainerEnvFromSecretRefResult']:
        return pulumi.get(self, "secret_reves")


@pulumi.output_type
class GetPodsV2PodContainerEnvFromConfigMapRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodContainerEnvFromSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartResult'],
                 pre_stops: Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopResult']):
        pulumi.set(__self__, "post_starts", post_starts)
        pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartResult']:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopResult']:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePostStartHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePostStartHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePostStartHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePreStopHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodContainerLifecyclePreStopHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodContainerLifecyclePreStopHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodContainerLivenessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodContainerLivenessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodContainerLivenessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodContainerLivenessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodContainerLivenessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodContainerLivenessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodContainerLivenessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetPodsV2PodContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodContainerReadinessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodContainerReadinessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodContainerReadinessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodContainerReadinessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodContainerReadinessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodContainerReadinessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodContainerReadinessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetPodsV2PodContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetPodsV2PodContainerSecurityContextCapabilityResult'],
                 proc_mount: _builtins.str,
                 read_only_root_file_system: _builtins.bool,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "proc_mount", proc_mount)
        pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetPodsV2PodContainerSecurityContextCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> _builtins.str:
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> _builtins.bool:
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class GetPodsV2PodContainerSecurityContextCapabilityResult(dict):
    def __init__(__self__, *,
                 adds: Sequence[_builtins.str],
                 drops: Sequence[_builtins.str]):
        pulumi.set(__self__, "adds", adds)
        pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class GetPodsV2PodContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodContainerStartupProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodContainerStartupProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodContainerStartupProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodContainerStartupProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodContainerStartupProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodContainerStartupProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodContainerStartupProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodContainerStartupProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodContainerStartupProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 extend_path_mode: _builtins.str,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str,
                 sub_path_expr: _builtins.str):
        pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)
        pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> _builtins.str:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> _builtins.str:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class GetPodsV2PodDnsConfigResult(dict):
    def __init__(__self__, *,
                 nameservers: Sequence[_builtins.str],
                 options: Sequence['outputs.GetPodsV2PodDnsConfigOptionResult'],
                 searches: Sequence[_builtins.str]):
        pulumi.set(__self__, "nameservers", nameservers)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "searches", searches)

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "nameservers")

    @_builtins.property
    @pulumi.getter
    def options(self) -> Sequence['outputs.GetPodsV2PodDnsConfigOptionResult']:
        return pulumi.get(self, "options")

    @_builtins.property
    @pulumi.getter
    def searches(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "searches")


@pulumi.output_type
class GetPodsV2PodDnsConfigOptionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str],
                 env_froms: Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromResult'],
                 envs: Sequence['outputs.GetPodsV2PodEphemeralContainerEnvResult'],
                 image: _builtins.str,
                 lifecycles: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecycleResult'],
                 liveness_probes: Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeResult'],
                 name: _builtins.str,
                 ports: Sequence['outputs.GetPodsV2PodEphemeralContainerPortResult'],
                 readiness_probes: Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeResult'],
                 resources: Sequence['outputs.GetPodsV2PodEphemeralContainerResourceResult'],
                 security_contexts: Sequence['outputs.GetPodsV2PodEphemeralContainerSecurityContextResult'],
                 startup_probes: Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeResult'],
                 stdin: _builtins.bool,
                 stdin_once: _builtins.bool,
                 termination_message_path: _builtins.str,
                 termination_message_policy: _builtins.str,
                 tty: _builtins.bool,
                 volume_mounts: Sequence['outputs.GetPodsV2PodEphemeralContainerVolumeMountResult'],
                 working_dir: _builtins.str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "env_froms", env_froms)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "lifecycles", lifecycles)
        pulumi.set(__self__, "liveness_probes", liveness_probes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "readiness_probes", readiness_probes)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "startup_probes", startup_probes)
        pulumi.set(__self__, "stdin", stdin)
        pulumi.set(__self__, "stdin_once", stdin_once)
        pulumi.set(__self__, "termination_message_path", termination_message_path)
        pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromResult']:
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerEnvResult']:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecycleResult']:
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeResult']:
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerPortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeResult']:
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeResult']:
        return pulumi.get(self, "startup_probes")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> _builtins.bool:
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> _builtins.bool:
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> _builtins.bool:
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> _builtins.str:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerEnvFromResult(dict):
    def __init__(__self__, *,
                 config_map_reves: Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromConfigMapRefResult'],
                 prefix: _builtins.str,
                 secret_reves: Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromSecretRefResult']):
        pulumi.set(__self__, "config_map_reves", config_map_reves)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secret_reves", secret_reves)

    @_builtins.property
    @pulumi.getter(name="configMapReves")
    def config_map_reves(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromConfigMapRefResult']:
        return pulumi.get(self, "config_map_reves")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretReves")
    def secret_reves(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerEnvFromSecretRefResult']:
        return pulumi.get(self, "secret_reves")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerEnvFromConfigMapRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerEnvFromSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartResult'],
                 pre_stops: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopResult']):
        pulumi.set(__self__, "post_starts", post_starts)
        pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartResult']:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopResult']:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePostStartHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLifecyclePreStopHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerLivenessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerLivenessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerReadinessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerReadinessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetPodsV2PodEphemeralContainerSecurityContextCapabilityResult'],
                 proc_mount: _builtins.str,
                 read_only_root_file_system: _builtins.bool,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "proc_mount", proc_mount)
        pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerSecurityContextCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> _builtins.str:
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> _builtins.bool:
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerSecurityContextCapabilityResult(dict):
    def __init__(__self__, *,
                 adds: Sequence[_builtins.str],
                 drops: Sequence[_builtins.str]):
        pulumi.set(__self__, "adds", adds)
        pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerStartupProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerStartupProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodEphemeralContainerStartupProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerStartupProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodEphemeralContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 extend_path_mode: _builtins.str,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str,
                 sub_path_expr: _builtins.str):
        pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)
        pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> _builtins.str:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> _builtins.str:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class GetPodsV2PodHostAliasResult(dict):
    def __init__(__self__, *,
                 hostnames: Sequence[_builtins.str],
                 ip: _builtins.str):
        pulumi.set(__self__, "hostnames", hostnames)
        pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "hostnames")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetPodsV2PodImagePullSecretResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPodsV2PodInitContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str],
                 env_froms: Sequence['outputs.GetPodsV2PodInitContainerEnvFromResult'],
                 envs: Sequence['outputs.GetPodsV2PodInitContainerEnvResult'],
                 image: _builtins.str,
                 lifecycles: Sequence['outputs.GetPodsV2PodInitContainerLifecycleResult'],
                 liveness_probes: Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeResult'],
                 name: _builtins.str,
                 ports: Sequence['outputs.GetPodsV2PodInitContainerPortResult'],
                 readiness_probes: Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeResult'],
                 resources: Sequence['outputs.GetPodsV2PodInitContainerResourceResult'],
                 security_contexts: Sequence['outputs.GetPodsV2PodInitContainerSecurityContextResult'],
                 startup_probes: Sequence['outputs.GetPodsV2PodInitContainerStartupProbeResult'],
                 stdin: _builtins.bool,
                 stdin_once: _builtins.bool,
                 termination_message_path: _builtins.str,
                 termination_message_policy: _builtins.str,
                 tty: _builtins.bool,
                 volume_mounts: Sequence['outputs.GetPodsV2PodInitContainerVolumeMountResult'],
                 working_dir: _builtins.str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "env_froms", env_froms)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "lifecycles", lifecycles)
        pulumi.set(__self__, "liveness_probes", liveness_probes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "readiness_probes", readiness_probes)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "startup_probes", startup_probes)
        pulumi.set(__self__, "stdin", stdin)
        pulumi.set(__self__, "stdin_once", stdin_once)
        pulumi.set(__self__, "termination_message_path", termination_message_path)
        pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Sequence['outputs.GetPodsV2PodInitContainerEnvFromResult']:
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetPodsV2PodInitContainerEnvResult']:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecycleResult']:
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeResult']:
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetPodsV2PodInitContainerPortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeResult']:
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPodsV2PodInitContainerResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetPodsV2PodInitContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetPodsV2PodInitContainerStartupProbeResult']:
        return pulumi.get(self, "startup_probes")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> _builtins.bool:
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> _builtins.bool:
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> _builtins.bool:
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetPodsV2PodInitContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> _builtins.str:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class GetPodsV2PodInitContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerEnvFromResult(dict):
    def __init__(__self__, *,
                 config_map_reves: Sequence['outputs.GetPodsV2PodInitContainerEnvFromConfigMapRefResult'],
                 prefix: _builtins.str,
                 secret_reves: Sequence['outputs.GetPodsV2PodInitContainerEnvFromSecretRefResult']):
        pulumi.set(__self__, "config_map_reves", config_map_reves)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secret_reves", secret_reves)

    @_builtins.property
    @pulumi.getter(name="configMapReves")
    def config_map_reves(self) -> Sequence['outputs.GetPodsV2PodInitContainerEnvFromConfigMapRefResult']:
        return pulumi.get(self, "config_map_reves")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretReves")
    def secret_reves(self) -> Sequence['outputs.GetPodsV2PodInitContainerEnvFromSecretRefResult']:
        return pulumi.get(self, "secret_reves")


@pulumi.output_type
class GetPodsV2PodInitContainerEnvFromConfigMapRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodInitContainerEnvFromSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartResult'],
                 pre_stops: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopResult']):
        pulumi.set(__self__, "post_starts", post_starts)
        pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartResult']:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopResult']:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePostStartHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePostStartHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePostStartHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopExecResult'],
                 http_gets: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePreStopHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodInitContainerLifecyclePreStopHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodInitContainerLifecyclePreStopHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodInitContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodInitContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodInitContainerLivenessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodInitContainerLivenessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetPodsV2PodInitContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodInitContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodInitContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodInitContainerReadinessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodInitContainerReadinessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetPodsV2PodInitContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetPodsV2PodInitContainerSecurityContextCapabilityResult'],
                 proc_mount: _builtins.str,
                 read_only_root_file_system: _builtins.bool,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "proc_mount", proc_mount)
        pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetPodsV2PodInitContainerSecurityContextCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> _builtins.str:
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> _builtins.bool:
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class GetPodsV2PodInitContainerSecurityContextCapabilityResult(dict):
    def __init__(__self__, *,
                 adds: Sequence[_builtins.str],
                 drops: Sequence[_builtins.str]):
        pulumi.set(__self__, "adds", adds)
        pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class GetPodsV2PodInitContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetPodsV2PodInitContainerStartupProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetPodsV2PodInitContainerStartupProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetPodsV2PodInitContainerStartupProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetPodsV2PodInitContainerStartupProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetPodsV2PodInitContainerStartupProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetPodsV2PodInitContainerStartupProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetPodsV2PodInitContainerStartupProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetPodsV2PodInitContainerStartupProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetPodsV2PodInitContainerStartupProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodInitContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 extend_path_mode: _builtins.str,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str,
                 sub_path_expr: _builtins.str):
        pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)
        pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> _builtins.str:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> _builtins.str:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class GetPodsV2PodReadinessGateResult(dict):
    def __init__(__self__, *,
                 condition_type: _builtins.str):
        pulumi.set(__self__, "condition_type", condition_type)

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> _builtins.str:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetPodsV2PodSecurityContextResult(dict):
    def __init__(__self__, *,
                 fs_group: _builtins.int,
                 fs_group_change_policy: _builtins.str,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int,
                 supplemental_groups: Sequence[_builtins.str],
                 sysctls: Sequence['outputs.GetPodsV2PodSecurityContextSysctlResult']):
        pulumi.set(__self__, "fs_group", fs_group)
        pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)
        pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        pulumi.set(__self__, "sysctls", sysctls)

    @_builtins.property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> _builtins.int:
        return pulumi.get(self, "fs_group")

    @_builtins.property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> _builtins.str:
        return pulumi.get(self, "fs_group_change_policy")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")

    @_builtins.property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "supplemental_groups")

    @_builtins.property
    @pulumi.getter
    def sysctls(self) -> Sequence['outputs.GetPodsV2PodSecurityContextSysctlResult']:
        return pulumi.get(self, "sysctls")


@pulumi.output_type
class GetPodsV2PodSecurityContextSysctlResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPodsV2PodStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetPodsV2PodStatusConditionResult'],
                 observed_generation: _builtins.int):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "observed_generation", observed_generation)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetPodsV2PodStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> _builtins.int:
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class GetPodsV2PodStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 last_update_time: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.str:
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPodsV2PodVolumeResult(dict):
    def __init__(__self__, *,
                 config_maps: Sequence['outputs.GetPodsV2PodVolumeConfigMapResult'],
                 name: _builtins.str,
                 nfs: Sequence['outputs.GetPodsV2PodVolumeNfResult'],
                 persistent_volume_claims: Sequence['outputs.GetPodsV2PodVolumePersistentVolumeClaimResult'],
                 projecteds: Sequence['outputs.GetPodsV2PodVolumeProjectedResult'],
                 secrets: Sequence['outputs.GetPodsV2PodVolumeSecretResult']):
        pulumi.set(__self__, "config_maps", config_maps)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nfs", nfs)
        pulumi.set(__self__, "persistent_volume_claims", persistent_volume_claims)
        pulumi.set(__self__, "projecteds", projecteds)
        pulumi.set(__self__, "secrets", secrets)

    @_builtins.property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Sequence['outputs.GetPodsV2PodVolumeConfigMapResult']:
        return pulumi.get(self, "config_maps")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nfs(self) -> Sequence['outputs.GetPodsV2PodVolumeNfResult']:
        return pulumi.get(self, "nfs")

    @_builtins.property
    @pulumi.getter(name="persistentVolumeClaims")
    def persistent_volume_claims(self) -> Sequence['outputs.GetPodsV2PodVolumePersistentVolumeClaimResult']:
        return pulumi.get(self, "persistent_volume_claims")

    @_builtins.property
    @pulumi.getter
    def projecteds(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedResult']:
        return pulumi.get(self, "projecteds")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Sequence['outputs.GetPodsV2PodVolumeSecretResult']:
        return pulumi.get(self, "secrets")


@pulumi.output_type
class GetPodsV2PodVolumeConfigMapResult(dict):
    def __init__(__self__, *,
                 default_mode: _builtins.int,
                 items: Sequence['outputs.GetPodsV2PodVolumeConfigMapItemResult'],
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "default_mode", default_mode)
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> _builtins.int:
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPodsV2PodVolumeConfigMapItemResult']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodVolumeConfigMapItemResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 mode: _builtins.int,
                 path: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.int:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetPodsV2PodVolumeNfResult(dict):
    def __init__(__self__, *,
                 path: _builtins.str,
                 read_only: _builtins.bool,
                 server: _builtins.str):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "server", server)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")


@pulumi.output_type
class GetPodsV2PodVolumePersistentVolumeClaimResult(dict):
    def __init__(__self__, *,
                 claim_name: _builtins.str,
                 read_only: _builtins.bool):
        pulumi.set(__self__, "claim_name", claim_name)
        pulumi.set(__self__, "read_only", read_only)

    @_builtins.property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> _builtins.str:
        return pulumi.get(self, "claim_name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedResult(dict):
    def __init__(__self__, *,
                 default_mode: _builtins.int,
                 sources: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceResult']):
        pulumi.set(__self__, "default_mode", default_mode)
        pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> _builtins.int:
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceResult']:
        return pulumi.get(self, "sources")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceResult(dict):
    def __init__(__self__, *,
                 config_maps: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceConfigMapResult'],
                 downward_apis: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiResult'],
                 secrets: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceSecretResult']):
        pulumi.set(__self__, "config_maps", config_maps)
        pulumi.set(__self__, "downward_apis", downward_apis)
        pulumi.set(__self__, "secrets", secrets)

    @_builtins.property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceConfigMapResult']:
        return pulumi.get(self, "config_maps")

    @_builtins.property
    @pulumi.getter(name="downwardApis")
    def downward_apis(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiResult']:
        return pulumi.get(self, "downward_apis")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceSecretResult']:
        return pulumi.get(self, "secrets")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceConfigMapResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceConfigMapItemResult'],
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceConfigMapItemResult']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceConfigMapItemResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 mode: _builtins.int,
                 path: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.int:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceDownwardApiResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceDownwardApiItemResult(dict):
    def __init__(__self__, *,
                 field_reves: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemFieldRefResult'],
                 mode: _builtins.int,
                 path: _builtins.str,
                 resource_file_reves: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemResourceFileRefResult']):
        pulumi.set(__self__, "field_reves", field_reves)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "resource_file_reves", resource_file_reves)

    @_builtins.property
    @pulumi.getter(name="fieldReves")
    def field_reves(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemFieldRefResult']:
        return pulumi.get(self, "field_reves")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.int:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="resourceFileReves")
    def resource_file_reves(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceDownwardApiItemResourceFileRefResult']:
        return pulumi.get(self, "resource_file_reves")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceDownwardApiItemFieldRefResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 field_path: _builtins.str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "field_path", field_path)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> _builtins.str:
        return pulumi.get(self, "field_path")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceDownwardApiItemResourceFileRefResult(dict):
    def __init__(__self__, *,
                 container_name: _builtins.str,
                 resource: _builtins.str):
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "resource", resource)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> _builtins.str:
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        return pulumi.get(self, "resource")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceSecretResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPodsV2PodVolumeProjectedSourceSecretItemResult'],
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPodsV2PodVolumeProjectedSourceSecretItemResult']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetPodsV2PodVolumeProjectedSourceSecretItemResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 mode: _builtins.int,
                 path: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.int:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetPodsV2PodVolumeSecretResult(dict):
    def __init__(__self__, *,
                 default_mode: _builtins.int,
                 items: Sequence['outputs.GetPodsV2PodVolumeSecretItemResult'],
                 optional: _builtins.bool,
                 secret_name: _builtins.str):
        pulumi.set(__self__, "default_mode", default_mode)
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> _builtins.int:
        return pulumi.get(self, "default_mode")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPodsV2PodVolumeSecretItemResult']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class GetPodsV2PodVolumeSecretItemResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 mode: _builtins.int,
                 path: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.int:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 api_version: _builtins.str,
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 kind: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 min_ready_seconds: _builtins.int,
                 name: _builtins.str,
                 replicas: _builtins.int,
                 resource_version: _builtins.str,
                 selectors: Sequence['outputs.GetReplicaSetsV2ReplicaSetSelectorResult'],
                 statuses: Sequence['outputs.GetReplicaSetsV2ReplicaSetStatusResult'],
                 templates: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateResult'],
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "selectors", selectors)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> _builtins.int:
        return pulumi.get(self, "min_ready_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> _builtins.int:
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetSelectorResult']:
        return pulumi.get(self, "selectors")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateResult']:
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetReplicaSetsV2ReplicaSetSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetStatusResult(dict):
    def __init__(__self__, *,
                 available_replicas: _builtins.int,
                 conditions: Sequence['outputs.GetReplicaSetsV2ReplicaSetStatusConditionResult'],
                 fully_labeled_replicas: _builtins.int,
                 observed_generation: _builtins.int,
                 ready_replicas: _builtins.int,
                 replicas: _builtins.int):
        pulumi.set(__self__, "available_replicas", available_replicas)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "fully_labeled_replicas", fully_labeled_replicas)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "ready_replicas", ready_replicas)
        pulumi.set(__self__, "replicas", replicas)

    @_builtins.property
    @pulumi.getter(name="availableReplicas")
    def available_replicas(self) -> _builtins.int:
        return pulumi.get(self, "available_replicas")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="fullyLabeledReplicas")
    def fully_labeled_replicas(self) -> _builtins.int:
        return pulumi.get(self, "fully_labeled_replicas")

    @_builtins.property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> _builtins.int:
        return pulumi.get(self, "observed_generation")

    @_builtins.property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> _builtins.int:
        return pulumi.get(self, "ready_replicas")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> _builtins.int:
        return pulumi.get(self, "replicas")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateResult(dict):
    def __init__(__self__, *,
                 metadatas: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateMetadataResult'],
                 specs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecResult']):
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "specs", specs)

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecResult']:
        return pulumi.get(self, "specs")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateMetadataResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "labels", labels)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecResult(dict):
    def __init__(__self__, *,
                 active_deadline_seconds: _builtins.int,
                 affinities: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityResult'],
                 containers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerResult'],
                 dns_policy: _builtins.str,
                 hostname: _builtins.str,
                 image_pull_secrets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecImagePullSecretResult'],
                 node_name: _builtins.str,
                 overhead: Mapping[str, _builtins.str],
                 restart_policy: _builtins.str,
                 scheduler_name: _builtins.str,
                 set_hostname_as_pqdn: _builtins.bool,
                 share_process_namespace: _builtins.bool,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        pulumi.set(__self__, "affinities", affinities)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "dns_policy", dns_policy)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "overhead", overhead)
        pulumi.set(__self__, "restart_policy", restart_policy)
        pulumi.set(__self__, "scheduler_name", scheduler_name)
        pulumi.set(__self__, "set_hostname_as_pqdn", set_hostname_as_pqdn)
        pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> _builtins.int:
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityResult']:
        return pulumi.get(self, "affinities")

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerResult']:
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> _builtins.str:
        return pulumi.get(self, "dns_policy")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecImagePullSecretResult']:
        return pulumi.get(self, "image_pull_secrets")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "overhead")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> _builtins.str:
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> _builtins.str:
        return pulumi.get(self, "scheduler_name")

    @_builtins.property
    @pulumi.getter(name="setHostnameAsPqdn")
    def set_hostname_as_pqdn(self) -> _builtins.bool:
        return pulumi.get(self, "set_hostname_as_pqdn")

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> _builtins.bool:
        return pulumi.get(self, "share_process_namespace")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityResult(dict):
    def __init__(__self__, *,
                 node_affinities: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityResult'],
                 pod_anti_affinities: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityResult']):
        pulumi.set(__self__, "node_affinities", node_affinities)
        pulumi.set(__self__, "pod_anti_affinities", pod_anti_affinities)

    @_builtins.property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityResult']:
        return pulumi.get(self, "node_affinities")

    @_builtins.property
    @pulumi.getter(name="podAntiAffinities")
    def pod_anti_affinities(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityResult']:
        return pulumi.get(self, "pod_anti_affinities")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityResult(dict):
    def __init__(__self__, *,
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @_builtins.property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult']:
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityResult(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult'],
                 required_during_scheduling_ignored_during_executions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']):
        pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @_builtins.property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @_builtins.property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 pod_affinity_terms: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult'],
                 weight: _builtins.int):
        pulumi.set(__self__, "pod_affinity_terms", pod_affinity_terms)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="podAffinityTerms")
    def pod_affinity_terms(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult']:
        return pulumi.get(self, "pod_affinity_terms")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermResult(dict):
    def __init__(__self__, *,
                 label_selectors: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult'],
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selectors", label_selectors)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult']:
        return pulumi.get(self, "label_selectors")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionResult(dict):
    def __init__(__self__, *,
                 label_selectors: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult'],
                 namespaces: Sequence[_builtins.str],
                 topology_key: _builtins.str):
        pulumi.set(__self__, "label_selectors", label_selectors)
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "topology_key", topology_key)

    @_builtins.property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult']:
        return pulumi.get(self, "label_selectors")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> _builtins.str:
        return pulumi.get(self, "topology_key")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorResult(dict):
    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult'],
                 match_labels: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "match_expressions", match_expressions)
        pulumi.set(__self__, "match_labels", match_labels)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult']:
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str],
                 env_froms: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromResult'],
                 envs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvResult'],
                 image: _builtins.str,
                 lifecycles: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecycleResult'],
                 liveness_probes: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeResult'],
                 name: _builtins.str,
                 ports: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerPortResult'],
                 readiness_probes: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeResult'],
                 resources: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerResourceResult'],
                 security_contexts: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextResult'],
                 startup_probes: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeResult'],
                 stdin: _builtins.bool,
                 stdin_once: _builtins.bool,
                 termination_message_path: _builtins.str,
                 termination_message_policy: _builtins.str,
                 tty: _builtins.bool,
                 volume_mounts: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerVolumeMountResult'],
                 working_dir: _builtins.str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "env_froms", env_froms)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "lifecycles", lifecycles)
        pulumi.set(__self__, "liveness_probes", liveness_probes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "readiness_probes", readiness_probes)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "security_contexts", security_contexts)
        pulumi.set(__self__, "startup_probes", startup_probes)
        pulumi.set(__self__, "stdin", stdin)
        pulumi.set(__self__, "stdin_once", stdin_once)
        pulumi.set(__self__, "termination_message_path", termination_message_path)
        pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromResult']:
        return pulumi.get(self, "env_froms")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvResult']:
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecycleResult']:
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeResult']:
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerPortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeResult']:
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @_builtins.property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeResult']:
        return pulumi.get(self, "startup_probes")

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> _builtins.bool:
        return pulumi.get(self, "stdin")

    @_builtins.property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> _builtins.bool:
        return pulumi.get(self, "stdin_once")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_path")

    @_builtins.property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> _builtins.str:
        return pulumi.get(self, "termination_message_policy")

    @_builtins.property
    @pulumi.getter
    def tty(self) -> _builtins.bool:
        return pulumi.get(self, "tty")

    @_builtins.property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> _builtins.str:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromResult(dict):
    def __init__(__self__, *,
                 config_map_reves: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromConfigMapRefResult'],
                 prefix: _builtins.str,
                 secret_reves: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromSecretRefResult']):
        pulumi.set(__self__, "config_map_reves", config_map_reves)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secret_reves", secret_reves)

    @_builtins.property
    @pulumi.getter(name="configMapReves")
    def config_map_reves(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromConfigMapRefResult']:
        return pulumi.get(self, "config_map_reves")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="secretReves")
    def secret_reves(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromSecretRefResult']:
        return pulumi.get(self, "secret_reves")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromConfigMapRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerEnvFromSecretRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartResult'],
                 pre_stops: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopResult']):
        pulumi.set(__self__, "post_starts", post_starts)
        pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartResult']:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopResult']:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartExecResult'],
                 http_gets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopExecResult'],
                 http_gets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetResult']):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "http_gets", http_gets)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetResult']:
        return pulumi.get(self, "http_gets")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerLivenessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerReadinessProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Mapping[str, _builtins.str],
                 requests: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextCapabilityResult'],
                 proc_mount: _builtins.str,
                 read_only_root_file_system: _builtins.bool,
                 run_as_group: _builtins.int,
                 run_as_non_root: _builtins.bool,
                 run_as_user: _builtins.int):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "proc_mount", proc_mount)
        pulumi.set(__self__, "read_only_root_file_system", read_only_root_file_system)
        pulumi.set(__self__, "run_as_group", run_as_group)
        pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        pulumi.set(__self__, "run_as_user", run_as_user)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> _builtins.str:
        return pulumi.get(self, "proc_mount")

    @_builtins.property
    @pulumi.getter(name="readOnlyRootFileSystem")
    def read_only_root_file_system(self) -> _builtins.bool:
        return pulumi.get(self, "read_only_root_file_system")

    @_builtins.property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> _builtins.int:
        return pulumi.get(self, "run_as_group")

    @_builtins.property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> _builtins.bool:
        return pulumi.get(self, "run_as_non_root")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.int:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerSecurityContextCapabilityResult(dict):
    def __init__(__self__, *,
                 adds: Sequence[_builtins.str],
                 drops: Sequence[_builtins.str]):
        pulumi.set(__self__, "adds", adds)
        pulumi.set(__self__, "drops", drops)

    @_builtins.property
    @pulumi.getter
    def adds(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adds")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 execs: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeExecResult'],
                 failure_threshold: _builtins.int,
                 http_gets: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetResult'],
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 termination_grace_period_seconds: _builtins.int):
        pulumi.set(__self__, "execs", execs)
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "http_gets", http_gets)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetResult']:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 http_headers: Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 scheme: _builtins.str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult']:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerStartupProbeHttpGetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 extend_path_mode: _builtins.str,
                 mount_path: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str,
                 sub_path_expr: _builtins.str):
        pulumi.set(__self__, "extend_path_mode", extend_path_mode)
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)
        pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @_builtins.property
    @pulumi.getter(name="extendPathMode")
    def extend_path_mode(self) -> _builtins.str:
        return pulumi.get(self, "extend_path_mode")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        return pulumi.get(self, "sub_path")

    @_builtins.property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> _builtins.str:
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class GetReplicaSetsV2ReplicaSetTemplateSpecImagePullSecretResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetResourcesV2ResourceResult(dict):
    def __init__(__self__, *,
                 categories: Sequence[_builtins.str],
                 group: _builtins.str,
                 kind: _builtins.str,
                 name: _builtins.str,
                 namespaced: _builtins.bool,
                 short_names: Sequence[_builtins.str],
                 singular_name: _builtins.str,
                 storage_version_hash: _builtins.str,
                 verbs: Sequence[_builtins.str],
                 version: _builtins.str):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespaced", namespaced)
        pulumi.set(__self__, "short_names", short_names)
        pulumi.set(__self__, "singular_name", singular_name)
        pulumi.set(__self__, "storage_version_hash", storage_version_hash)
        pulumi.set(__self__, "verbs", verbs)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def categories(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "categories")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespaced(self) -> _builtins.bool:
        return pulumi.get(self, "namespaced")

    @_builtins.property
    @pulumi.getter(name="shortNames")
    def short_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "short_names")

    @_builtins.property
    @pulumi.getter(name="singularName")
    def singular_name(self) -> _builtins.str:
        return pulumi.get(self, "singular_name")

    @_builtins.property
    @pulumi.getter(name="storageVersionHash")
    def storage_version_hash(self) -> _builtins.str:
        return pulumi.get(self, "storage_version_hash")

    @_builtins.property
    @pulumi.getter
    def verbs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "verbs")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSecretsV2SecretResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 data: Mapping[str, _builtins.str],
                 immutable: _builtins.bool,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_version: _builtins.str,
                 string_data: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "immutable", immutable)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "string_data", string_data)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def data(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def immutable(self) -> _builtins.bool:
        return pulumi.get(self, "immutable")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="stringData")
    def string_data(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "string_data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetServicesV2ServiceResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 finalizers: Sequence[_builtins.str],
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 ports: Sequence['outputs.GetServicesV2ServicePortResult'],
                 resource_version: _builtins.str,
                 selector: Mapping[str, _builtins.str],
                 session_affinity: _builtins.str,
                 statuses: Sequence['outputs.GetServicesV2ServiceStatusResult'],
                 type: _builtins.str,
                 uid: _builtins.str):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "session_affinity", session_affinity)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetServicesV2ServicePortResult']:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "selector")

    @_builtins.property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> _builtins.str:
        return pulumi.get(self, "session_affinity")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetServicesV2ServiceStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetServicesV2ServicePortResult(dict):
    def __init__(__self__, *,
                 app_protocol: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 target_port: _builtins.int):
        pulumi.set(__self__, "app_protocol", app_protocol)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @_builtins.property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> _builtins.str:
        return pulumi.get(self, "app_protocol")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> _builtins.int:
        return pulumi.get(self, "target_port")


@pulumi.output_type
class GetServicesV2ServiceStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetServicesV2ServiceStatusConditionResult'],
                 loadbalancers: Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerResult']):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "loadbalancers", loadbalancers)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetServicesV2ServiceStatusConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerResult']:
        return pulumi.get(self, "loadbalancers")


@pulumi.output_type
class GetServicesV2ServiceStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: _builtins.str,
                 message: _builtins.str,
                 observe_generation: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "observe_generation", observe_generation)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="observeGeneration")
    def observe_generation(self) -> _builtins.str:
        return pulumi.get(self, "observe_generation")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServicesV2ServiceStatusLoadbalancerResult(dict):
    def __init__(__self__, *,
                 ingresses: Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerIngressResult']):
        pulumi.set(__self__, "ingresses", ingresses)

    @_builtins.property
    @pulumi.getter
    def ingresses(self) -> Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerIngressResult']:
        return pulumi.get(self, "ingresses")


@pulumi.output_type
class GetServicesV2ServiceStatusLoadbalancerIngressResult(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 ports: Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerIngressPortResult']):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetServicesV2ServiceStatusLoadbalancerIngressPortResult']:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetServicesV2ServiceStatusLoadbalancerIngressPortResult(dict):
    def __init__(__self__, *,
                 error: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str):
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def error(self) -> _builtins.str:
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetStorageClassesV2StorageClassResult(dict):
    def __init__(__self__, *,
                 allow_volume_expansion: _builtins.bool,
                 allowed_topologies: Sequence['outputs.GetStorageClassesV2StorageClassAllowedTopologyResult'],
                 annotations: Mapping[str, _builtins.str],
                 creation_timestamp: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 mount_options: Sequence[_builtins.str],
                 name: _builtins.str,
                 parameters: Mapping[str, _builtins.str],
                 provisioner: _builtins.str,
                 reclaim_policy: _builtins.str,
                 resource_version: _builtins.str,
                 uid: _builtins.str,
                 volume_binding_mode: _builtins.str):
        pulumi.set(__self__, "allow_volume_expansion", allow_volume_expansion)
        pulumi.set(__self__, "allowed_topologies", allowed_topologies)
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "mount_options", mount_options)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "provisioner", provisioner)
        pulumi.set(__self__, "reclaim_policy", reclaim_policy)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "volume_binding_mode", volume_binding_mode)

    @_builtins.property
    @pulumi.getter(name="allowVolumeExpansion")
    def allow_volume_expansion(self) -> _builtins.bool:
        return pulumi.get(self, "allow_volume_expansion")

    @_builtins.property
    @pulumi.getter(name="allowedTopologies")
    def allowed_topologies(self) -> Sequence['outputs.GetStorageClassesV2StorageClassAllowedTopologyResult']:
        return pulumi.get(self, "allowed_topologies")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "mount_options")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def provisioner(self) -> _builtins.str:
        return pulumi.get(self, "provisioner")

    @_builtins.property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> _builtins.str:
        return pulumi.get(self, "reclaim_policy")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.str:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="volumeBindingMode")
    def volume_binding_mode(self) -> _builtins.str:
        return pulumi.get(self, "volume_binding_mode")


@pulumi.output_type
class GetStorageClassesV2StorageClassAllowedTopologyResult(dict):
    def __init__(__self__, *,
                 match_label_expressions: Sequence['outputs.GetStorageClassesV2StorageClassAllowedTopologyMatchLabelExpressionResult']):
        pulumi.set(__self__, "match_label_expressions", match_label_expressions)

    @_builtins.property
    @pulumi.getter(name="matchLabelExpressions")
    def match_label_expressions(self) -> Sequence['outputs.GetStorageClassesV2StorageClassAllowedTopologyMatchLabelExpressionResult']:
        return pulumi.get(self, "match_label_expressions")


@pulumi.output_type
class GetStorageClassesV2StorageClassAllowedTopologyMatchLabelExpressionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


