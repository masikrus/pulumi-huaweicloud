# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeploymentsV2Result',
    'AwaitableGetDeploymentsV2Result',
    'get_deployments_v2',
    'get_deployments_v2_output',
]

@pulumi.output_type
class GetDeploymentsV2Result:
    """
    A collection of values returned by getDeploymentsV2.
    """
    def __init__(__self__, deployments=None, id=None, namespace=None, region=None):
        if deployments and not isinstance(deployments, list):
            raise TypeError("Expected argument 'deployments' to be a list")
        pulumi.set(__self__, "deployments", deployments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def deployments(self) -> Sequence['outputs.GetDeploymentsV2DeploymentResult']:
        return pulumi.get(self, "deployments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDeploymentsV2Result(GetDeploymentsV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentsV2Result(
            deployments=self.deployments,
            id=self.id,
            namespace=self.namespace,
            region=self.region)


def get_deployments_v2(namespace: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentsV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['namespace'] = namespace
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cci/getDeploymentsV2:getDeploymentsV2', __args__, opts=opts, typ=GetDeploymentsV2Result).value

    return AwaitableGetDeploymentsV2Result(
        deployments=pulumi.get(__ret__, 'deployments'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        region=pulumi.get(__ret__, 'region'))
def get_deployments_v2_output(namespace: Optional[pulumi.Input[_builtins.str]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeploymentsV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['namespace'] = namespace
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cci/getDeploymentsV2:getDeploymentsV2', __args__, opts=opts, typ=GetDeploymentsV2Result)
    return __ret__.apply(lambda __response__: GetDeploymentsV2Result(
        deployments=pulumi.get(__response__, 'deployments'),
        id=pulumi.get(__response__, 'id'),
        namespace=pulumi.get(__response__, 'namespace'),
        region=pulumi.get(__response__, 'region')))
