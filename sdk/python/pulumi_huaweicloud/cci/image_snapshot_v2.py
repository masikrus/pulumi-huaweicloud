# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageSnapshotV2Args', 'ImageSnapshotV2']

@pulumi.input_type
class ImageSnapshotV2Args:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 building_config: Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 image_snapshot_size: Optional[pulumi.Input[_builtins.int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]] = None,
                 ttl_days_after_created: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a ImageSnapshotV2 resource.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if building_config is not None:
            pulumi.set(__self__, "building_config", building_config)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if image_snapshot_size is not None:
            pulumi.set(__self__, "image_snapshot_size", image_snapshot_size)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if registries is not None:
            pulumi.set(__self__, "registries", registries)
        if ttl_days_after_created is not None:
            pulumi.set(__self__, "ttl_days_after_created", ttl_days_after_created)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="buildingConfig")
    def building_config(self) -> Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']]:
        return pulumi.get(self, "building_config")

    @building_config.setter
    def building_config(self, value: Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']]):
        pulumi.set(self, "building_config", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "finalizers", value)

    @_builtins.property
    @pulumi.getter(name="imageSnapshotSize")
    def image_snapshot_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "image_snapshot_size")

    @image_snapshot_size.setter
    def image_snapshot_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_snapshot_size", value)

    @_builtins.property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]]:
        return pulumi.get(self, "registries")

    @registries.setter
    def registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]]):
        pulumi.set(self, "registries", value)

    @_builtins.property
    @pulumi.getter(name="ttlDaysAfterCreated")
    def ttl_days_after_created(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "ttl_days_after_created")

    @ttl_days_after_created.setter
    def ttl_days_after_created(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl_days_after_created", value)


@pulumi.input_type
class _ImageSnapshotV2State:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 building_config: Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 image_snapshot_size: Optional[pulumi.Input[_builtins.int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2StatusArgs']]]] = None,
                 ttl_days_after_created: Optional[pulumi.Input[_builtins.int]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ImageSnapshotV2 resources.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if building_config is not None:
            pulumi.set(__self__, "building_config", building_config)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if image_snapshot_size is not None:
            pulumi.set(__self__, "image_snapshot_size", image_snapshot_size)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if registries is not None:
            pulumi.set(__self__, "registries", registries)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if ttl_days_after_created is not None:
            pulumi.set(__self__, "ttl_days_after_created", ttl_days_after_created)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="buildingConfig")
    def building_config(self) -> Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']]:
        return pulumi.get(self, "building_config")

    @building_config.setter
    def building_config(self, value: Optional[pulumi.Input['ImageSnapshotV2BuildingConfigArgs']]):
        pulumi.set(self, "building_config", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "finalizers", value)

    @_builtins.property
    @pulumi.getter(name="imageSnapshotSize")
    def image_snapshot_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "image_snapshot_size")

    @image_snapshot_size.setter
    def image_snapshot_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_snapshot_size", value)

    @_builtins.property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]]:
        return pulumi.get(self, "registries")

    @registries.setter
    def registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2RegistryArgs']]]]):
        pulumi.set(self, "registries", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2StatusArgs']]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotV2StatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter(name="ttlDaysAfterCreated")
    def ttl_days_after_created(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "ttl_days_after_created")

    @ttl_days_after_created.setter
    def ttl_days_after_created(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl_days_after_created", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)


@pulumi.type_token("huaweicloud:Cci/imageSnapshotV2:ImageSnapshotV2")
class ImageSnapshotV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 building_config: Optional[pulumi.Input[Union['ImageSnapshotV2BuildingConfigArgs', 'ImageSnapshotV2BuildingConfigArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 image_snapshot_size: Optional[pulumi.Input[_builtins.int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2ImageArgs', 'ImageSnapshotV2ImageArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2RegistryArgs', 'ImageSnapshotV2RegistryArgsDict']]]]] = None,
                 ttl_days_after_created: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Create a ImageSnapshotV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ImageSnapshotV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ImageSnapshotV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ImageSnapshotV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageSnapshotV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 building_config: Optional[pulumi.Input[Union['ImageSnapshotV2BuildingConfigArgs', 'ImageSnapshotV2BuildingConfigArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 image_snapshot_size: Optional[pulumi.Input[_builtins.int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2ImageArgs', 'ImageSnapshotV2ImageArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2RegistryArgs', 'ImageSnapshotV2RegistryArgsDict']]]]] = None,
                 ttl_days_after_created: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageSnapshotV2Args.__new__(ImageSnapshotV2Args)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["building_config"] = building_config
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["finalizers"] = finalizers
            __props__.__dict__["image_snapshot_size"] = image_snapshot_size
            __props__.__dict__["images"] = images
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["registries"] = registries
            __props__.__dict__["ttl_days_after_created"] = ttl_days_after_created
            __props__.__dict__["api_version"] = None
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
        super(ImageSnapshotV2, __self__).__init__(
            'huaweicloud:Cci/imageSnapshotV2:ImageSnapshotV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            building_config: Optional[pulumi.Input[Union['ImageSnapshotV2BuildingConfigArgs', 'ImageSnapshotV2BuildingConfigArgsDict']]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            image_snapshot_size: Optional[pulumi.Input[_builtins.int]] = None,
            images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2ImageArgs', 'ImageSnapshotV2ImageArgsDict']]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2RegistryArgs', 'ImageSnapshotV2RegistryArgsDict']]]]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotV2StatusArgs', 'ImageSnapshotV2StatusArgsDict']]]]] = None,
            ttl_days_after_created: Optional[pulumi.Input[_builtins.int]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None) -> 'ImageSnapshotV2':
        """
        Get an existing ImageSnapshotV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageSnapshotV2State.__new__(_ImageSnapshotV2State)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["building_config"] = building_config
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["finalizers"] = finalizers
        __props__.__dict__["image_snapshot_size"] = image_snapshot_size
        __props__.__dict__["images"] = images
        __props__.__dict__["kind"] = kind
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["registries"] = registries
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["ttl_days_after_created"] = ttl_days_after_created
        __props__.__dict__["uid"] = uid
        return ImageSnapshotV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="buildingConfig")
    def building_config(self) -> pulumi.Output['outputs.ImageSnapshotV2BuildingConfig']:
        return pulumi.get(self, "building_config")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter(name="imageSnapshotSize")
    def image_snapshot_size(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "image_snapshot_size")

    @_builtins.property
    @pulumi.getter
    def images(self) -> pulumi.Output[Sequence['outputs.ImageSnapshotV2Image']]:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def registries(self) -> pulumi.Output[Sequence['outputs.ImageSnapshotV2Registry']]:
        return pulumi.get(self, "registries")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.ImageSnapshotV2Status']]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="ttlDaysAfterCreated")
    def ttl_days_after_created(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "ttl_days_after_created")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "uid")

