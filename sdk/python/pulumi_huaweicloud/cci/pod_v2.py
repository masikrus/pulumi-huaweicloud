# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PodV2Args', 'PodV2']

@pulumi.input_type
class PodV2Args:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]],
                 namespace: pulumi.Input[_builtins.str],
                 active_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input['PodV2AffinityArgs']] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 dns_config: Optional[pulumi.Input['PodV2DnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_name: Optional[pulumi.Input[_builtins.str]] = None,
                 overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_name: Optional[pulumi.Input[_builtins.str]] = None,
                 security_context: Optional[pulumi.Input['PodV2SecurityContextArgs']] = None,
                 set_hostname_as_fqdn: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_process_namespace: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]] = None):
        """
        The set of arguments for constructing a PodV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]] containers: Specifies the container of the CCI Pod.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the CCI.
        :param pulumi.Input[_builtins.int] active_deadline_seconds: The active deadline seconds the pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the CCI Pod.
        :param pulumi.Input['PodV2DnsConfigArgs'] dns_config: Specifies The DNS config of the pod.
        :param pulumi.Input[_builtins.str] dns_policy: Specifies the DNS policy of the pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]] ephemeral_containers: Specifies the ephemeral container of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]] host_aliases: Specifies the host aliases of the CCI Pod.
        :param pulumi.Input[_builtins.str] hostname: Specifies the host name of the pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]] init_containers: Specifies the init container of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the CCI Pod.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CCI Pod.
        :param pulumi.Input[_builtins.str] node_name: Specifies the node name of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] overhead: Specifies the overhead of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]] readiness_gates: Specifies the readiness gates of the CCI Pod.
        :param pulumi.Input[_builtins.str] restart_policy: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] scheduler_name: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.bool] set_hostname_as_fqdn: whether the pod hostname is configured as the pod FQDN.
        :param pulumi.Input[_builtins.bool] share_process_namespace: Whether to share a single process namespace between all of containers in a pod.
        :param pulumi.Input[_builtins.int] termination_grace_period_seconds: The restart policy for all containers within the pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]] volumes: Specifies the volumes of the CCI Pod.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "namespace", namespace)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if set_hostname_as_fqdn is not None:
            pulumi.set(__self__, "set_hostname_as_fqdn", set_hostname_as_fqdn)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]]:
        """
        Specifies the container of the CCI Pod.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]]):
        pulumi.set(self, "containers", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace of the CCI.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The active deadline seconds the pod.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['PodV2AffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['PodV2AffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the annotations of the CCI Pod.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['PodV2DnsConfigArgs']]:
        """
        Specifies The DNS config of the pod.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['PodV2DnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DNS policy of the pod.
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_policy", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]]:
        """
        Specifies the ephemeral container of the CCI Pod.
        """
        return pulumi.get(self, "ephemeral_containers")

    @ephemeral_containers.setter
    def ephemeral_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]]):
        pulumi.set(self, "ephemeral_containers", value)

    @_builtins.property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]]:
        """
        Specifies the host aliases of the CCI Pod.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host name of the pod.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @_builtins.property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]]:
        """
        Specifies the init container of the CCI Pod.
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The labels of the CCI Pod.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the CCI Pod.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node name of the CCI Pod.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_name", value)

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the overhead of the CCI Pod.
        """
        return pulumi.get(self, "overhead")

    @overhead.setter
    def overhead(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "overhead", value)

    @_builtins.property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]]:
        """
        Specifies the readiness gates of the CCI Pod.
        """
        return pulumi.get(self, "readiness_gates")

    @readiness_gates.setter
    def readiness_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]]):
        pulumi.set(self, "readiness_gates", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_policy", value)

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduler_name", value)

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['PodV2SecurityContextArgs']]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['PodV2SecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @_builtins.property
    @pulumi.getter(name="setHostnameAsFqdn")
    def set_hostname_as_fqdn(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        whether the pod hostname is configured as the pod FQDN.
        """
        return pulumi.get(self, "set_hostname_as_fqdn")

    @set_hostname_as_fqdn.setter
    def set_hostname_as_fqdn(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "set_hostname_as_fqdn", value)

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to share a single process namespace between all of containers in a pod.
        """
        return pulumi.get(self, "share_process_namespace")

    @share_process_namespace.setter
    def share_process_namespace(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_process_namespace", value)

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]]:
        """
        Specifies the volumes of the CCI Pod.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class _PodV2State:
    def __init__(__self__, *,
                 active_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input['PodV2AffinityArgs']] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]]] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_config: Optional[pulumi.Input['PodV2DnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 node_name: Optional[pulumi.Input[_builtins.str]] = None,
                 overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_name: Optional[pulumi.Input[_builtins.str]] = None,
                 security_context: Optional[pulumi.Input['PodV2SecurityContextArgs']] = None,
                 set_hostname_as_fqdn: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_process_namespace: Optional[pulumi.Input[_builtins.bool]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2StatusArgs']]]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]] = None):
        """
        Input properties used for looking up and filtering PodV2 resources.
        :param pulumi.Input[_builtins.int] active_deadline_seconds: The active deadline seconds the pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the CCI Pod.
        :param pulumi.Input[_builtins.str] api_version: The API version of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]] containers: Specifies the container of the CCI Pod.
        :param pulumi.Input[_builtins.str] creation_timestamp: The creation timestamp of the CCI Pod.
        :param pulumi.Input['PodV2DnsConfigArgs'] dns_config: Specifies The DNS config of the pod.
        :param pulumi.Input[_builtins.str] dns_policy: Specifies the DNS policy of the pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]] ephemeral_containers: Specifies the ephemeral container of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] finalizers: The finalizers of the namespace.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]] host_aliases: Specifies the host aliases of the CCI Pod.
        :param pulumi.Input[_builtins.str] hostname: Specifies the host name of the pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]] init_containers: Specifies the init container of the CCI Pod.
        :param pulumi.Input[_builtins.str] kind: The kind of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the CCI Pod.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CCI Pod.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the CCI.
        :param pulumi.Input[_builtins.str] node_name: Specifies the node name of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] overhead: Specifies the overhead of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]] readiness_gates: Specifies the readiness gates of the CCI Pod.
        :param pulumi.Input[_builtins.str] resource_version: The resource version of the CCI Pod.
        :param pulumi.Input[_builtins.str] restart_policy: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] scheduler_name: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.bool] set_hostname_as_fqdn: whether the pod hostname is configured as the pod FQDN.
        :param pulumi.Input[_builtins.bool] share_process_namespace: Whether to share a single process namespace between all of containers in a pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2StatusArgs']]] statuses: The status of the CCI Pod.
        :param pulumi.Input[_builtins.int] termination_grace_period_seconds: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] uid: The uid of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]] volumes: Specifies the volumes of the CCI Pod.
        """
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if set_hostname_as_fqdn is not None:
            pulumi.set(__self__, "set_hostname_as_fqdn", set_hostname_as_fqdn)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The active deadline seconds the pod.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['PodV2AffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['PodV2AffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the annotations of the CCI Pod.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The API version of the CCI Pod.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]]]:
        """
        Specifies the container of the CCI Pod.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation timestamp of the CCI Pod.
        """
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['PodV2DnsConfigArgs']]:
        """
        Specifies The DNS config of the pod.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['PodV2DnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DNS policy of the pod.
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_policy", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]]:
        """
        Specifies the ephemeral container of the CCI Pod.
        """
        return pulumi.get(self, "ephemeral_containers")

    @ephemeral_containers.setter
    def ephemeral_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2EphemeralContainerArgs']]]]):
        pulumi.set(self, "ephemeral_containers", value)

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The finalizers of the namespace.
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "finalizers", value)

    @_builtins.property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]]:
        """
        Specifies the host aliases of the CCI Pod.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2HostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host name of the pod.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ImagePullSecretArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @_builtins.property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]]:
        """
        Specifies the init container of the CCI Pod.
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2InitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The kind of the CCI Pod.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The labels of the CCI Pod.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the CCI Pod.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace of the CCI.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node name of the CCI Pod.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_name", value)

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the overhead of the CCI Pod.
        """
        return pulumi.get(self, "overhead")

    @overhead.setter
    def overhead(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "overhead", value)

    @_builtins.property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]]:
        """
        Specifies the readiness gates of the CCI Pod.
        """
        return pulumi.get(self, "readiness_gates")

    @readiness_gates.setter
    def readiness_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2ReadinessGateArgs']]]]):
        pulumi.set(self, "readiness_gates", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource version of the CCI Pod.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_policy", value)

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduler_name", value)

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['PodV2SecurityContextArgs']]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['PodV2SecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @_builtins.property
    @pulumi.getter(name="setHostnameAsFqdn")
    def set_hostname_as_fqdn(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        whether the pod hostname is configured as the pod FQDN.
        """
        return pulumi.get(self, "set_hostname_as_fqdn")

    @set_hostname_as_fqdn.setter
    def set_hostname_as_fqdn(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "set_hostname_as_fqdn", value)

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to share a single process namespace between all of containers in a pod.
        """
        return pulumi.get(self, "share_process_namespace")

    @share_process_namespace.setter
    def share_process_namespace(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_process_namespace", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2StatusArgs']]]]:
        """
        The status of the CCI Pod.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2StatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The uid of the CCI Pod.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]]:
        """
        Specifies the volumes of the CCI Pod.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodV2VolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.type_token("huaweicloud:Cci/podV2:PodV2")
class PodV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input[Union['PodV2AffinityArgs', 'PodV2AffinityArgsDict']]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ContainerArgs', 'PodV2ContainerArgsDict']]]]] = None,
                 dns_config: Optional[pulumi.Input[Union['PodV2DnsConfigArgs', 'PodV2DnsConfigArgsDict']]] = None,
                 dns_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2EphemeralContainerArgs', 'PodV2EphemeralContainerArgsDict']]]]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2HostAliasArgs', 'PodV2HostAliasArgsDict']]]]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ImagePullSecretArgs', 'PodV2ImagePullSecretArgsDict']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2InitContainerArgs', 'PodV2InitContainerArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 node_name: Optional[pulumi.Input[_builtins.str]] = None,
                 overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ReadinessGateArgs', 'PodV2ReadinessGateArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_name: Optional[pulumi.Input[_builtins.str]] = None,
                 security_context: Optional[pulumi.Input[Union['PodV2SecurityContextArgs', 'PodV2SecurityContextArgsDict']]] = None,
                 set_hostname_as_fqdn: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_process_namespace: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2VolumeArgs', 'PodV2VolumeArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a PodV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] active_deadline_seconds: The active deadline seconds the pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2ContainerArgs', 'PodV2ContainerArgsDict']]]] containers: Specifies the container of the CCI Pod.
        :param pulumi.Input[Union['PodV2DnsConfigArgs', 'PodV2DnsConfigArgsDict']] dns_config: Specifies The DNS config of the pod.
        :param pulumi.Input[_builtins.str] dns_policy: Specifies the DNS policy of the pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2EphemeralContainerArgs', 'PodV2EphemeralContainerArgsDict']]]] ephemeral_containers: Specifies the ephemeral container of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2HostAliasArgs', 'PodV2HostAliasArgsDict']]]] host_aliases: Specifies the host aliases of the CCI Pod.
        :param pulumi.Input[_builtins.str] hostname: Specifies the host name of the pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2InitContainerArgs', 'PodV2InitContainerArgsDict']]]] init_containers: Specifies the init container of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the CCI Pod.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CCI Pod.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the CCI.
        :param pulumi.Input[_builtins.str] node_name: Specifies the node name of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] overhead: Specifies the overhead of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2ReadinessGateArgs', 'PodV2ReadinessGateArgsDict']]]] readiness_gates: Specifies the readiness gates of the CCI Pod.
        :param pulumi.Input[_builtins.str] restart_policy: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] scheduler_name: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.bool] set_hostname_as_fqdn: whether the pod hostname is configured as the pod FQDN.
        :param pulumi.Input[_builtins.bool] share_process_namespace: Whether to share a single process namespace between all of containers in a pod.
        :param pulumi.Input[_builtins.int] termination_grace_period_seconds: The restart policy for all containers within the pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2VolumeArgs', 'PodV2VolumeArgsDict']]]] volumes: Specifies the volumes of the CCI Pod.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PodV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PodV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PodV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PodV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input[Union['PodV2AffinityArgs', 'PodV2AffinityArgsDict']]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ContainerArgs', 'PodV2ContainerArgsDict']]]]] = None,
                 dns_config: Optional[pulumi.Input[Union['PodV2DnsConfigArgs', 'PodV2DnsConfigArgsDict']]] = None,
                 dns_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2EphemeralContainerArgs', 'PodV2EphemeralContainerArgsDict']]]]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2HostAliasArgs', 'PodV2HostAliasArgsDict']]]]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ImagePullSecretArgs', 'PodV2ImagePullSecretArgsDict']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2InitContainerArgs', 'PodV2InitContainerArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 node_name: Optional[pulumi.Input[_builtins.str]] = None,
                 overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ReadinessGateArgs', 'PodV2ReadinessGateArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_name: Optional[pulumi.Input[_builtins.str]] = None,
                 security_context: Optional[pulumi.Input[Union['PodV2SecurityContextArgs', 'PodV2SecurityContextArgsDict']]] = None,
                 set_hostname_as_fqdn: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_process_namespace: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2VolumeArgs', 'PodV2VolumeArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PodV2Args.__new__(PodV2Args)

            __props__.__dict__["active_deadline_seconds"] = active_deadline_seconds
            __props__.__dict__["affinity"] = affinity
            __props__.__dict__["annotations"] = annotations
            if containers is None and not opts.urn:
                raise TypeError("Missing required property 'containers'")
            __props__.__dict__["containers"] = containers
            __props__.__dict__["dns_config"] = dns_config
            __props__.__dict__["dns_policy"] = dns_policy
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["ephemeral_containers"] = ephemeral_containers
            __props__.__dict__["host_aliases"] = host_aliases
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["image_pull_secrets"] = image_pull_secrets
            __props__.__dict__["init_containers"] = init_containers
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["node_name"] = node_name
            __props__.__dict__["overhead"] = overhead
            __props__.__dict__["readiness_gates"] = readiness_gates
            __props__.__dict__["region"] = region
            __props__.__dict__["restart_policy"] = restart_policy
            __props__.__dict__["scheduler_name"] = scheduler_name
            __props__.__dict__["security_context"] = security_context
            __props__.__dict__["set_hostname_as_fqdn"] = set_hostname_as_fqdn
            __props__.__dict__["share_process_namespace"] = share_process_namespace
            __props__.__dict__["termination_grace_period_seconds"] = termination_grace_period_seconds
            __props__.__dict__["volumes"] = volumes
            __props__.__dict__["api_version"] = None
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["finalizers"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
        super(PodV2, __self__).__init__(
            'huaweicloud:Cci/podV2:PodV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_deadline_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            affinity: Optional[pulumi.Input[Union['PodV2AffinityArgs', 'PodV2AffinityArgsDict']]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ContainerArgs', 'PodV2ContainerArgsDict']]]]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            dns_config: Optional[pulumi.Input[Union['PodV2DnsConfigArgs', 'PodV2DnsConfigArgsDict']]] = None,
            dns_policy: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2EphemeralContainerArgs', 'PodV2EphemeralContainerArgsDict']]]]] = None,
            finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2HostAliasArgs', 'PodV2HostAliasArgsDict']]]]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ImagePullSecretArgs', 'PodV2ImagePullSecretArgsDict']]]]] = None,
            init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2InitContainerArgs', 'PodV2InitContainerArgsDict']]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            node_name: Optional[pulumi.Input[_builtins.str]] = None,
            overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2ReadinessGateArgs', 'PodV2ReadinessGateArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            restart_policy: Optional[pulumi.Input[_builtins.str]] = None,
            scheduler_name: Optional[pulumi.Input[_builtins.str]] = None,
            security_context: Optional[pulumi.Input[Union['PodV2SecurityContextArgs', 'PodV2SecurityContextArgsDict']]] = None,
            set_hostname_as_fqdn: Optional[pulumi.Input[_builtins.bool]] = None,
            share_process_namespace: Optional[pulumi.Input[_builtins.bool]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2StatusArgs', 'PodV2StatusArgsDict']]]]] = None,
            termination_grace_period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None,
            volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PodV2VolumeArgs', 'PodV2VolumeArgsDict']]]]] = None) -> 'PodV2':
        """
        Get an existing PodV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] active_deadline_seconds: The active deadline seconds the pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the CCI Pod.
        :param pulumi.Input[_builtins.str] api_version: The API version of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2ContainerArgs', 'PodV2ContainerArgsDict']]]] containers: Specifies the container of the CCI Pod.
        :param pulumi.Input[_builtins.str] creation_timestamp: The creation timestamp of the CCI Pod.
        :param pulumi.Input[Union['PodV2DnsConfigArgs', 'PodV2DnsConfigArgsDict']] dns_config: Specifies The DNS config of the pod.
        :param pulumi.Input[_builtins.str] dns_policy: Specifies the DNS policy of the pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2EphemeralContainerArgs', 'PodV2EphemeralContainerArgsDict']]]] ephemeral_containers: Specifies the ephemeral container of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] finalizers: The finalizers of the namespace.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2HostAliasArgs', 'PodV2HostAliasArgsDict']]]] host_aliases: Specifies the host aliases of the CCI Pod.
        :param pulumi.Input[_builtins.str] hostname: Specifies the host name of the pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2InitContainerArgs', 'PodV2InitContainerArgsDict']]]] init_containers: Specifies the init container of the CCI Pod.
        :param pulumi.Input[_builtins.str] kind: The kind of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the CCI Pod.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CCI Pod.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the CCI.
        :param pulumi.Input[_builtins.str] node_name: Specifies the node name of the CCI Pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] overhead: Specifies the overhead of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2ReadinessGateArgs', 'PodV2ReadinessGateArgsDict']]]] readiness_gates: Specifies the readiness gates of the CCI Pod.
        :param pulumi.Input[_builtins.str] resource_version: The resource version of the CCI Pod.
        :param pulumi.Input[_builtins.str] restart_policy: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] scheduler_name: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.bool] set_hostname_as_fqdn: whether the pod hostname is configured as the pod FQDN.
        :param pulumi.Input[_builtins.bool] share_process_namespace: Whether to share a single process namespace between all of containers in a pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2StatusArgs', 'PodV2StatusArgsDict']]]] statuses: The status of the CCI Pod.
        :param pulumi.Input[_builtins.int] termination_grace_period_seconds: The restart policy for all containers within the pod.
        :param pulumi.Input[_builtins.str] uid: The uid of the CCI Pod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PodV2VolumeArgs', 'PodV2VolumeArgsDict']]]] volumes: Specifies the volumes of the CCI Pod.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PodV2State.__new__(_PodV2State)

        __props__.__dict__["active_deadline_seconds"] = active_deadline_seconds
        __props__.__dict__["affinity"] = affinity
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["containers"] = containers
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["dns_config"] = dns_config
        __props__.__dict__["dns_policy"] = dns_policy
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["ephemeral_containers"] = ephemeral_containers
        __props__.__dict__["finalizers"] = finalizers
        __props__.__dict__["host_aliases"] = host_aliases
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["image_pull_secrets"] = image_pull_secrets
        __props__.__dict__["init_containers"] = init_containers
        __props__.__dict__["kind"] = kind
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["node_name"] = node_name
        __props__.__dict__["overhead"] = overhead
        __props__.__dict__["readiness_gates"] = readiness_gates
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["restart_policy"] = restart_policy
        __props__.__dict__["scheduler_name"] = scheduler_name
        __props__.__dict__["security_context"] = security_context
        __props__.__dict__["set_hostname_as_fqdn"] = set_hostname_as_fqdn
        __props__.__dict__["share_process_namespace"] = share_process_namespace
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["termination_grace_period_seconds"] = termination_grace_period_seconds
        __props__.__dict__["uid"] = uid
        __props__.__dict__["volumes"] = volumes
        return PodV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> pulumi.Output[_builtins.int]:
        """
        The active deadline seconds the pod.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> pulumi.Output['outputs.PodV2Affinity']:
        return pulumi.get(self, "affinity")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the annotations of the CCI Pod.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.str]:
        """
        The API version of the CCI Pod.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def containers(self) -> pulumi.Output[Sequence['outputs.PodV2Container']]:
        """
        Specifies the container of the CCI Pod.
        """
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        """
        The creation timestamp of the CCI Pod.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> pulumi.Output['outputs.PodV2DnsConfig']:
        """
        Specifies The DNS config of the pod.
        """
        return pulumi.get(self, "dns_config")

    @_builtins.property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DNS policy of the pod.
        """
        return pulumi.get(self, "dns_policy")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> pulumi.Output[Sequence['outputs.PodV2EphemeralContainer']]:
        """
        Specifies the ephemeral container of the CCI Pod.
        """
        return pulumi.get(self, "ephemeral_containers")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The finalizers of the namespace.
        """
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> pulumi.Output[Sequence['outputs.PodV2HostAlias']]:
        """
        Specifies the host aliases of the CCI Pod.
        """
        return pulumi.get(self, "host_aliases")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host name of the pod.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> pulumi.Output[Sequence['outputs.PodV2ImagePullSecret']]:
        return pulumi.get(self, "image_pull_secrets")

    @_builtins.property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> pulumi.Output[Sequence['outputs.PodV2InitContainer']]:
        """
        Specifies the init container of the CCI Pod.
        """
        return pulumi.get(self, "init_containers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        """
        The kind of the CCI Pod.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The labels of the CCI Pod.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the CCI Pod.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the namespace of the CCI.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the node name of the CCI Pod.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def overhead(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the overhead of the CCI Pod.
        """
        return pulumi.get(self, "overhead")

    @_builtins.property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> pulumi.Output[Sequence['outputs.PodV2ReadinessGate']]:
        """
        Specifies the readiness gates of the CCI Pod.
        """
        return pulumi.get(self, "readiness_gates")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        """
        The resource version of the CCI Pod.
        """
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> pulumi.Output[_builtins.str]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> pulumi.Output[_builtins.str]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "scheduler_name")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> pulumi.Output['outputs.PodV2SecurityContext']:
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter(name="setHostnameAsFqdn")
    def set_hostname_as_fqdn(self) -> pulumi.Output[_builtins.bool]:
        """
        whether the pod hostname is configured as the pod FQDN.
        """
        return pulumi.get(self, "set_hostname_as_fqdn")

    @_builtins.property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to share a single process namespace between all of containers in a pod.
        """
        return pulumi.get(self, "share_process_namespace")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.PodV2Status']]:
        """
        The status of the CCI Pod.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> pulumi.Output[_builtins.int]:
        """
        The restart policy for all containers within the pod.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        """
        The uid of the CCI Pod.
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Sequence['outputs.PodV2Volume']]:
        """
        Specifies the volumes of the CCI Pod.
        """
        return pulumi.get(self, "volumes")

