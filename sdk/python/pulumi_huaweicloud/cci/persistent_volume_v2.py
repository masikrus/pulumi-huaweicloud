# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PersistentVolumeV2Args', 'PersistentVolumeV2']

@pulumi.input_type
class PersistentVolumeV2Args:
    def __init__(__self__, *,
                 access_modes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 capacity: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 csi: pulumi.Input['PersistentVolumeV2CsiArgs'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 claim_ref: Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_affinity: Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']] = None,
                 reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PersistentVolumeV2 resource.
        """
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "csi", csi)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if claim_ref is not None:
            pulumi.set(__self__, "claim_ref", claim_ref)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "access_modes", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def csi(self) -> pulumi.Input['PersistentVolumeV2CsiArgs']:
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: pulumi.Input['PersistentVolumeV2CsiArgs']):
        pulumi.set(self, "csi", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="claimRef")
    def claim_ref(self) -> Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']]:
        return pulumi.get(self, "claim_ref")

    @claim_ref.setter
    def claim_ref(self, value: Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']]):
        pulumi.set(self, "claim_ref", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mount_options", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @_builtins.property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "reclaim_policy")

    @reclaim_policy.setter
    def reclaim_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reclaim_policy", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class_name", value)

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_mode", value)


@pulumi.input_type
class _PersistentVolumeV2State:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 capacity: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 claim_ref: Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 csi: Optional[pulumi.Input['PersistentVolumeV2CsiArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_affinity: Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']] = None,
                 reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['PersistentVolumeV2StatusArgs']]]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PersistentVolumeV2 resources.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if claim_ref is not None:
            pulumi.set(__self__, "claim_ref", claim_ref)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_modes", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="claimRef")
    def claim_ref(self) -> Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']]:
        return pulumi.get(self, "claim_ref")

    @claim_ref.setter
    def claim_ref(self, value: Optional[pulumi.Input['PersistentVolumeV2ClaimRefArgs']]):
        pulumi.set(self, "claim_ref", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['PersistentVolumeV2CsiArgs']]:
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['PersistentVolumeV2CsiArgs']]):
        pulumi.set(self, "csi", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "finalizers", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mount_options", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['PersistentVolumeV2NodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @_builtins.property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "reclaim_policy")

    @reclaim_policy.setter
    def reclaim_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reclaim_policy", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PersistentVolumeV2StatusArgs']]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PersistentVolumeV2StatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class_name", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_mode", value)


@pulumi.type_token("huaweicloud:Cci/persistentVolumeV2:PersistentVolumeV2")
class PersistentVolumeV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 capacity: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 claim_ref: Optional[pulumi.Input[Union['PersistentVolumeV2ClaimRefArgs', 'PersistentVolumeV2ClaimRefArgsDict']]] = None,
                 csi: Optional[pulumi.Input[Union['PersistentVolumeV2CsiArgs', 'PersistentVolumeV2CsiArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_affinity: Optional[pulumi.Input[Union['PersistentVolumeV2NodeAffinityArgs', 'PersistentVolumeV2NodeAffinityArgsDict']]] = None,
                 reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a PersistentVolumeV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PersistentVolumeV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PersistentVolumeV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PersistentVolumeV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PersistentVolumeV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 capacity: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 claim_ref: Optional[pulumi.Input[Union['PersistentVolumeV2ClaimRefArgs', 'PersistentVolumeV2ClaimRefArgsDict']]] = None,
                 csi: Optional[pulumi.Input[Union['PersistentVolumeV2CsiArgs', 'PersistentVolumeV2CsiArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_affinity: Optional[pulumi.Input[Union['PersistentVolumeV2NodeAffinityArgs', 'PersistentVolumeV2NodeAffinityArgsDict']]] = None,
                 reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PersistentVolumeV2Args.__new__(PersistentVolumeV2Args)

            if access_modes is None and not opts.urn:
                raise TypeError("Missing required property 'access_modes'")
            __props__.__dict__["access_modes"] = access_modes
            __props__.__dict__["annotations"] = annotations
            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["claim_ref"] = claim_ref
            if csi is None and not opts.urn:
                raise TypeError("Missing required property 'csi'")
            __props__.__dict__["csi"] = csi
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["labels"] = labels
            __props__.__dict__["mount_options"] = mount_options
            __props__.__dict__["name"] = name
            __props__.__dict__["node_affinity"] = node_affinity
            __props__.__dict__["reclaim_policy"] = reclaim_policy
            __props__.__dict__["region"] = region
            __props__.__dict__["storage_class_name"] = storage_class_name
            __props__.__dict__["volume_mode"] = volume_mode
            __props__.__dict__["api_version"] = None
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["finalizers"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
        super(PersistentVolumeV2, __self__).__init__(
            'huaweicloud:Cci/persistentVolumeV2:PersistentVolumeV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            capacity: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            claim_ref: Optional[pulumi.Input[Union['PersistentVolumeV2ClaimRefArgs', 'PersistentVolumeV2ClaimRefArgsDict']]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            csi: Optional[pulumi.Input[Union['PersistentVolumeV2CsiArgs', 'PersistentVolumeV2CsiArgsDict']]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            node_affinity: Optional[pulumi.Input[Union['PersistentVolumeV2NodeAffinityArgs', 'PersistentVolumeV2NodeAffinityArgsDict']]] = None,
            reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PersistentVolumeV2StatusArgs', 'PersistentVolumeV2StatusArgsDict']]]]] = None,
            storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None,
            volume_mode: Optional[pulumi.Input[_builtins.str]] = None) -> 'PersistentVolumeV2':
        """
        Get an existing PersistentVolumeV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PersistentVolumeV2State.__new__(_PersistentVolumeV2State)

        __props__.__dict__["access_modes"] = access_modes
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["claim_ref"] = claim_ref
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["csi"] = csi
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["finalizers"] = finalizers
        __props__.__dict__["kind"] = kind
        __props__.__dict__["labels"] = labels
        __props__.__dict__["mount_options"] = mount_options
        __props__.__dict__["name"] = name
        __props__.__dict__["node_affinity"] = node_affinity
        __props__.__dict__["reclaim_policy"] = reclaim_policy
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["storage_class_name"] = storage_class_name
        __props__.__dict__["uid"] = uid
        __props__.__dict__["volume_mode"] = volume_mode
        return PersistentVolumeV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "access_modes")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="claimRef")
    def claim_ref(self) -> pulumi.Output['outputs.PersistentVolumeV2ClaimRef']:
        return pulumi.get(self, "claim_ref")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def csi(self) -> pulumi.Output['outputs.PersistentVolumeV2Csi']:
        return pulumi.get(self, "csi")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "mount_options")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> pulumi.Output['outputs.PersistentVolumeV2NodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @_builtins.property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "reclaim_policy")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.PersistentVolumeV2Status']]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "storage_class_name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "volume_mode")

