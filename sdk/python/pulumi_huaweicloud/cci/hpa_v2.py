# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HpaV2Args', 'HpaV2']

@pulumi.input_type
class HpaV2Args:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[_builtins.int],
                 namespace: pulumi.Input[_builtins.str],
                 scale_target_ref: pulumi.Input['HpaV2ScaleTargetRefArgs'],
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 behavior: Optional[pulumi.Input['HpaV2BehaviorArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HpaV2 resource.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "scale_target_ref", scale_target_ref)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> pulumi.Input['HpaV2ScaleTargetRefArgs']:
        return pulumi.get(self, "scale_target_ref")

    @scale_target_ref.setter
    def scale_target_ref(self, value: pulumi.Input['HpaV2ScaleTargetRefArgs']):
        pulumi.set(self, "scale_target_ref", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input['HpaV2BehaviorArgs']]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input['HpaV2BehaviorArgs']]):
        pulumi.set(self, "behavior", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _HpaV2State:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 behavior: Optional[pulumi.Input['HpaV2BehaviorArgs']] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_target_ref: Optional[pulumi.Input['HpaV2ScaleTargetRefArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2StatusArgs']]]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering HpaV2 resources.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if scale_target_ref is not None:
            pulumi.set(__self__, "scale_target_ref", scale_target_ref)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input['HpaV2BehaviorArgs']]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input['HpaV2BehaviorArgs']]):
        pulumi.set(self, "behavior", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2MetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> Optional[pulumi.Input['HpaV2ScaleTargetRefArgs']]:
        return pulumi.get(self, "scale_target_ref")

    @scale_target_ref.setter
    def scale_target_ref(self, value: Optional[pulumi.Input['HpaV2ScaleTargetRefArgs']]):
        pulumi.set(self, "scale_target_ref", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2StatusArgs']]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpaV2StatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)


@pulumi.type_token("huaweicloud:Cci/hpaV2:HpaV2")
class HpaV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 behavior: Optional[pulumi.Input[Union['HpaV2BehaviorArgs', 'HpaV2BehaviorArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpaV2MetricArgs', 'HpaV2MetricArgsDict']]]]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_target_ref: Optional[pulumi.Input[Union['HpaV2ScaleTargetRefArgs', 'HpaV2ScaleTargetRefArgsDict']]] = None,
                 __props__=None):
        """
        Create a HpaV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HpaV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HpaV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HpaV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HpaV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 behavior: Optional[pulumi.Input[Union['HpaV2BehaviorArgs', 'HpaV2BehaviorArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpaV2MetricArgs', 'HpaV2MetricArgsDict']]]]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_target_ref: Optional[pulumi.Input[Union['HpaV2ScaleTargetRefArgs', 'HpaV2ScaleTargetRefArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HpaV2Args.__new__(HpaV2Args)

            __props__.__dict__["api_version"] = api_version
            __props__.__dict__["behavior"] = behavior
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["kind"] = kind
            if max_replicas is None and not opts.urn:
                raise TypeError("Missing required property 'max_replicas'")
            __props__.__dict__["max_replicas"] = max_replicas
            __props__.__dict__["metrics"] = metrics
            __props__.__dict__["min_replicas"] = min_replicas
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["region"] = region
            if scale_target_ref is None and not opts.urn:
                raise TypeError("Missing required property 'scale_target_ref'")
            __props__.__dict__["scale_target_ref"] = scale_target_ref
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
        super(HpaV2, __self__).__init__(
            'huaweicloud:Cci/hpaV2:HpaV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            behavior: Optional[pulumi.Input[Union['HpaV2BehaviorArgs', 'HpaV2BehaviorArgsDict']]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
            metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpaV2MetricArgs', 'HpaV2MetricArgsDict']]]]] = None,
            min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            scale_target_ref: Optional[pulumi.Input[Union['HpaV2ScaleTargetRefArgs', 'HpaV2ScaleTargetRefArgsDict']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpaV2StatusArgs', 'HpaV2StatusArgsDict']]]]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None) -> 'HpaV2':
        """
        Get an existing HpaV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HpaV2State.__new__(_HpaV2State)

        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["behavior"] = behavior
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["kind"] = kind
        __props__.__dict__["max_replicas"] = max_replicas
        __props__.__dict__["metrics"] = metrics
        __props__.__dict__["min_replicas"] = min_replicas
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["scale_target_ref"] = scale_target_ref
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["uid"] = uid
        return HpaV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def behavior(self) -> pulumi.Output['outputs.HpaV2Behavior']:
        return pulumi.get(self, "behavior")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "max_replicas")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> pulumi.Output[Sequence['outputs.HpaV2Metric']]:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "min_replicas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> pulumi.Output['outputs.HpaV2ScaleTargetRef']:
        return pulumi.get(self, "scale_target_ref")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.HpaV2Status']]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "uid")

