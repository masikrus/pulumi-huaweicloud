# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PvcV2Args', 'PvcV2']

@pulumi.input_type
class PvcV2Args:
    def __init__(__self__, *,
                 namespace: pulumi.Input[_builtins.str],
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input['PvcV2ResourcesArgs']] = None,
                 selector: Optional[pulumi.Input['PvcV2SelectorArgs']] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 valume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PvcV2 resource.
        :param pulumi.Input[_builtins.str] namespace: The name of the namespace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_modes: The access modes of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: The annotations of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the persistent volume claim.
        :param pulumi.Input[_builtins.str] name: The name of the persistent volume claim in the namespace.
        """
        pulumi.set(__self__, "namespace", namespace)
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if valume_name is not None:
            pulumi.set(__self__, "valume_name", valume_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The access modes of the persistent volume claim.
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_modes", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The annotations of the persistent volume claim.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The labels of the persistent volume claim.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the persistent volume claim in the namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['PvcV2ResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['PvcV2ResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['PvcV2SelectorArgs']]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['PvcV2SelectorArgs']]):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class_name", value)

    @_builtins.property
    @pulumi.getter(name="valumeName")
    def valume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "valume_name")

    @valume_name.setter
    def valume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valume_name", value)

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_mode", value)


@pulumi.input_type
class _PvcV2State:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_version: Optional[pulumi.Input[_builtins.str]] = None,
                 creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_version: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input['PvcV2ResourcesArgs']] = None,
                 selector: Optional[pulumi.Input['PvcV2SelectorArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None,
                 valume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PvcV2 resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_modes: The access modes of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: The annotations of the persistent volume claim.
        :param pulumi.Input[_builtins.str] api_version: The API version of the persistent volume claim.
        :param pulumi.Input[_builtins.str] creation_timestamp: The creation timestamp of the persistent volume claim.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] finalizers: The finalizers of the persistent volume claim.
        :param pulumi.Input[_builtins.str] kind: The kind of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the persistent volume claim.
        :param pulumi.Input[_builtins.str] name: The name of the persistent volume claim in the namespace.
        :param pulumi.Input[_builtins.str] namespace: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_version: The resource version of the persistent volume claim.
        :param pulumi.Input[_builtins.str] status: The status of the persistent volume claim.
        :param pulumi.Input[_builtins.str] uid: The uid of the persistent volume claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if valume_name is not None:
            pulumi.set(__self__, "valume_name", valume_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The access modes of the persistent volume claim.
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_modes", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The annotations of the persistent volume claim.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The API version of the persistent volume claim.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation timestamp of the persistent volume claim.
        """
        return pulumi.get(self, "creation_timestamp")

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The finalizers of the persistent volume claim.
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "finalizers", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The kind of the persistent volume claim.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The labels of the persistent volume claim.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the persistent volume claim in the namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource version of the persistent volume claim.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_version", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['PvcV2ResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['PvcV2ResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['PvcV2SelectorArgs']]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['PvcV2SelectorArgs']]):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the persistent volume claim.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class_name", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The uid of the persistent volume claim.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)

    @_builtins.property
    @pulumi.getter(name="valumeName")
    def valume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "valume_name")

    @valume_name.setter
    def valume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valume_name", value)

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_mode", value)


@pulumi.type_token("huaweicloud:Cci/pvcV2:PvcV2")
class PvcV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Union['PvcV2ResourcesArgs', 'PvcV2ResourcesArgsDict']]] = None,
                 selector: Optional[pulumi.Input[Union['PvcV2SelectorArgs', 'PvcV2SelectorArgsDict']]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 valume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a PvcV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_modes: The access modes of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: The annotations of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the persistent volume claim.
        :param pulumi.Input[_builtins.str] name: The name of the persistent volume claim in the namespace.
        :param pulumi.Input[_builtins.str] namespace: The name of the namespace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PvcV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PvcV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PvcV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PvcV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Union['PvcV2ResourcesArgs', 'PvcV2ResourcesArgsDict']]] = None,
                 selector: Optional[pulumi.Input[Union['PvcV2SelectorArgs', 'PvcV2SelectorArgsDict']]] = None,
                 storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 valume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PvcV2Args.__new__(PvcV2Args)

            __props__.__dict__["access_modes"] = access_modes
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["region"] = region
            __props__.__dict__["resources"] = resources
            __props__.__dict__["selector"] = selector
            __props__.__dict__["storage_class_name"] = storage_class_name
            __props__.__dict__["valume_name"] = valume_name
            __props__.__dict__["volume_mode"] = volume_mode
            __props__.__dict__["api_version"] = None
            __props__.__dict__["creation_timestamp"] = None
            __props__.__dict__["finalizers"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uid"] = None
        super(PvcV2, __self__).__init__(
            'huaweicloud:Cci/pvcV2:PvcV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_version: Optional[pulumi.Input[_builtins.str]] = None,
            creation_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_version: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Union['PvcV2ResourcesArgs', 'PvcV2ResourcesArgsDict']]] = None,
            selector: Optional[pulumi.Input[Union['PvcV2SelectorArgs', 'PvcV2SelectorArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            storage_class_name: Optional[pulumi.Input[_builtins.str]] = None,
            uid: Optional[pulumi.Input[_builtins.str]] = None,
            valume_name: Optional[pulumi.Input[_builtins.str]] = None,
            volume_mode: Optional[pulumi.Input[_builtins.str]] = None) -> 'PvcV2':
        """
        Get an existing PvcV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_modes: The access modes of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: The annotations of the persistent volume claim.
        :param pulumi.Input[_builtins.str] api_version: The API version of the persistent volume claim.
        :param pulumi.Input[_builtins.str] creation_timestamp: The creation timestamp of the persistent volume claim.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] finalizers: The finalizers of the persistent volume claim.
        :param pulumi.Input[_builtins.str] kind: The kind of the persistent volume claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: The labels of the persistent volume claim.
        :param pulumi.Input[_builtins.str] name: The name of the persistent volume claim in the namespace.
        :param pulumi.Input[_builtins.str] namespace: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_version: The resource version of the persistent volume claim.
        :param pulumi.Input[_builtins.str] status: The status of the persistent volume claim.
        :param pulumi.Input[_builtins.str] uid: The uid of the persistent volume claim.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PvcV2State.__new__(_PvcV2State)

        __props__.__dict__["access_modes"] = access_modes
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["creation_timestamp"] = creation_timestamp
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["finalizers"] = finalizers
        __props__.__dict__["kind"] = kind
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["resources"] = resources
        __props__.__dict__["selector"] = selector
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_class_name"] = storage_class_name
        __props__.__dict__["uid"] = uid
        __props__.__dict__["valume_name"] = valume_name
        __props__.__dict__["volume_mode"] = volume_mode
        return PvcV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The access modes of the persistent volume claim.
        """
        return pulumi.get(self, "access_modes")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The annotations of the persistent volume claim.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.str]:
        """
        The API version of the persistent volume claim.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> pulumi.Output[_builtins.str]:
        """
        The creation timestamp of the persistent volume claim.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def finalizers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The finalizers of the persistent volume claim.
        """
        return pulumi.get(self, "finalizers")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        """
        The kind of the persistent volume claim.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The labels of the persistent volume claim.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the persistent volume claim in the namespace.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[_builtins.str]:
        """
        The resource version of the persistent volume claim.
        """
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional['outputs.PvcV2Resources']]:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> pulumi.Output[Optional['outputs.PvcV2Selector']]:
        return pulumi.get(self, "selector")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the persistent volume claim.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "storage_class_name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> pulumi.Output[_builtins.str]:
        """
        The uid of the persistent volume claim.
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="valumeName")
    def valume_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "valume_name")

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "volume_mode")

