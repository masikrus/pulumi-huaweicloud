# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetIpgroupsResult',
    'AwaitableGetIpgroupsResult',
    'get_ipgroups',
    'get_ipgroups_output',
]

@pulumi.output_type
class GetIpgroupsResult:
    """
    A collection of values returned by getIpgroups.
    """
    def __init__(__self__, description=None, enterprise_project_id=None, id=None, ip_address=None, ipgroup_id=None, ipgroups=None, name=None, region=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if ipgroup_id and not isinstance(ipgroup_id, str):
            raise TypeError("Expected argument 'ipgroup_id' to be a str")
        pulumi.set(__self__, "ipgroup_id", ipgroup_id)
        if ipgroups and not isinstance(ipgroups, list):
            raise TypeError("Expected argument 'ipgroups' to be a list")
        pulumi.set(__self__, "ipgroups", ipgroups)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the IP address group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipgroupId")
    def ipgroup_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipgroup_id")

    @_builtins.property
    @pulumi.getter
    def ipgroups(self) -> Sequence['outputs.GetIpgroupsIpgroupResult']:
        """
        Lists the IP groups.
        The ipgroups structure is documented below.
        """
        return pulumi.get(self, "ipgroups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the IP address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetIpgroupsResult(GetIpgroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpgroupsResult(
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ip_address=self.ip_address,
            ipgroup_id=self.ipgroup_id,
            ipgroups=self.ipgroups,
            name=self.name,
            region=self.region)


def get_ipgroups(description: Optional[_builtins.str] = None,
                 enterprise_project_id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ipgroup_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpgroupsResult:
    """
    Use this data source to get the list of ELB IP groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ipgroup_name = config.require_object("ipgroupName")
    test = huaweicloud.DedicatedElb.get_ipgroups(name=ipgroup_name)
    ```


    :param _builtins.str description: Specifies the description of the IP address group.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str ip_address: Specifies the IP address of the IP address group.
    :param _builtins.str ipgroup_id: Specifies the ID of the IP address group.
    :param _builtins.str name: Specifies the name of the IP address group.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipAddress'] = ip_address
    __args__['ipgroupId'] = ipgroup_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getIpgroups:getIpgroups', __args__, opts=opts, typ=GetIpgroupsResult).value

    return AwaitableGetIpgroupsResult(
        description=pulumi.get(__ret__, 'description'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        ipgroup_id=pulumi.get(__ret__, 'ipgroup_id'),
        ipgroups=pulumi.get(__ret__, 'ipgroups'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_ipgroups_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        ipgroup_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpgroupsResult]:
    """
    Use this data source to get the list of ELB IP groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ipgroup_name = config.require_object("ipgroupName")
    test = huaweicloud.DedicatedElb.get_ipgroups(name=ipgroup_name)
    ```


    :param _builtins.str description: Specifies the description of the IP address group.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str ip_address: Specifies the IP address of the IP address group.
    :param _builtins.str ipgroup_id: Specifies the ID of the IP address group.
    :param _builtins.str name: Specifies the name of the IP address group.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipAddress'] = ip_address
    __args__['ipgroupId'] = ipgroup_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedElb/getIpgroups:getIpgroups', __args__, opts=opts, typ=GetIpgroupsResult)
    return __ret__.apply(lambda __response__: GetIpgroupsResult(
        description=pulumi.get(__response__, 'description'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        ipgroup_id=pulumi.get(__response__, 'ipgroup_id'),
        ipgroups=pulumi.get(__response__, 'ipgroups'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
