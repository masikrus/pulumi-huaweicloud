# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ActiveStandbyPoolHealthmonitor',
    'ActiveStandbyPoolMember',
    'ActiveStandbyPoolMemberReason',
    'ActiveStandbyPoolMemberStatus',
    'ActiveStandbyPoolQuicCidHashStrategy',
    'IpgroupIpList',
    'L7policyFixedResponseConfig',
    'L7policyFixedResponseConfigInsertHeadersConfig',
    'L7policyFixedResponseConfigInsertHeadersConfigConfig',
    'L7policyFixedResponseConfigRemoveHeadersConfig',
    'L7policyFixedResponseConfigRemoveHeadersConfigConfig',
    'L7policyFixedResponseConfigTrafficLimitConfig',
    'L7policyRedirectPoolsConfig',
    'L7policyRedirectPoolsExtendConfig',
    'L7policyRedirectPoolsExtendConfigInsertHeadersConfig',
    'L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig',
    'L7policyRedirectPoolsExtendConfigRemoveHeadersConfig',
    'L7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig',
    'L7policyRedirectPoolsExtendConfigRewriteUrlConfig',
    'L7policyRedirectPoolsExtendConfigTrafficLimitConfig',
    'L7policyRedirectPoolsStickySessionConfig',
    'L7policyRedirectUrlConfig',
    'L7policyRedirectUrlConfigInsertHeadersConfig',
    'L7policyRedirectUrlConfigInsertHeadersConfigConfig',
    'L7policyRedirectUrlConfigRemoveHeadersConfig',
    'L7policyRedirectUrlConfigRemoveHeadersConfigConfig',
    'L7ruleCondition',
    'ListenerPortRange',
    'MemberReason',
    'MemberStatus',
    'MemberStatusReason',
    'PoolPersistence',
    'SecurityPolicyListener',
    'GetActiveStandbyPoolsPoolResult',
    'GetActiveStandbyPoolsPoolHealthmonitorResult',
    'GetActiveStandbyPoolsPoolListenerResult',
    'GetActiveStandbyPoolsPoolLoadbalancerResult',
    'GetActiveStandbyPoolsPoolMemberResult',
    'GetActiveStandbyPoolsPoolMemberReasonResult',
    'GetActiveStandbyPoolsPoolMemberStatusResult',
    'GetActiveStandbyPoolsPoolQuicCidHashStrategyResult',
    'GetAllMembersMemberResult',
    'GetAllMembersMemberReasonResult',
    'GetAllMembersMemberStatusResult',
    'GetAllMembersMemberStatusReasonResult',
    'GetAvailabilityZonesAvailabilityZoneResult',
    'GetAvailabilityZonesAvailabilityZoneListResult',
    'GetFeatureConfigurationsConfigResult',
    'GetFlavorsFlavorResult',
    'GetIpgroupsIpgroupResult',
    'GetIpgroupsIpgroupIpListResult',
    'GetIpgroupsIpgroupListenerResult',
    'GetL7policiesL7policyResult',
    'GetL7policiesL7policyFixedResponseConfigResult',
    'GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigResult',
    'GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigConfigResult',
    'GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigResult',
    'GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigConfigResult',
    'GetL7policiesL7policyFixedResponseConfigTrafficLimitConfigResult',
    'GetL7policiesL7policyRedirectPoolsConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigRewriteUrlConfigResult',
    'GetL7policiesL7policyRedirectPoolsExtendConfigTrafficLimitConfigResult',
    'GetL7policiesL7policyRedirectPoolsStickySessionConfigResult',
    'GetL7policiesL7policyRedirectUrlConfigResult',
    'GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigResult',
    'GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigConfigResult',
    'GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigResult',
    'GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigConfigResult',
    'GetL7policiesL7policyRuleResult',
    'GetL7rulesL7ruleResult',
    'GetL7rulesL7ruleConditionResult',
    'GetListenersListenerResult',
    'GetListenersListenerIpgroupResult',
    'GetListenersListenerPortRangeResult',
    'GetListenersListenerQuicConfigResult',
    'GetLoadbalancerFeatureConfigurationsFeatureResult',
    'GetLoadbalancersLoadbalancerResult',
    'GetLoadbalancersLoadbalancerGlobalEipResult',
    'GetLoadbalancersLoadbalancerListenerResult',
    'GetLoadbalancersLoadbalancerPoolResult',
    'GetLoadbalancersLoadbalancerPublicipResult',
    'GetLogtanksLogtankResult',
    'GetMonitorsMonitorResult',
    'GetPoolsPoolResult',
    'GetPoolsPoolListenerResult',
    'GetPoolsPoolLoadbalancerResult',
    'GetPoolsPoolMemberResult',
    'GetPoolsPoolPersistenceResult',
    'GetPoolsPoolQuicCidHashStrategyResult',
    'GetSecurityPoliciesSecurityPolicyResult',
    'GetSecurityPoliciesSecurityPolicyListenerResult',
]

@pulumi.output_type
class ActiveStandbyPoolHealthmonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "expectedCodes":
            suggest = "expected_codes"
        elif key == "httpMethod":
            suggest = "http_method"
        elif key == "maxRetriesDown":
            suggest = "max_retries_down"
        elif key == "monitorPort":
            suggest = "monitor_port"
        elif key == "urlPath":
            suggest = "url_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveStandbyPoolHealthmonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveStandbyPoolHealthmonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveStandbyPoolHealthmonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay: _builtins.int,
                 max_retries: _builtins.int,
                 timeout: _builtins.int,
                 type: _builtins.str,
                 domain_name: Optional[_builtins.str] = None,
                 expected_codes: Optional[_builtins.str] = None,
                 http_method: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 max_retries_down: Optional[_builtins.int] = None,
                 monitor_port: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 url_path: Optional[_builtins.str] = None):
        """
        :param _builtins.int delay: Specifies the interval between health checks, in seconds. The value range is from
               `1` to `50`. Changing this parameter will create a new resource.
        :param _builtins.int max_retries: Specifies the number of consecutive health checks when the health check
               result of a backend server changes from **OFFLINE** to **ONLINE**. The value range is from `1` to `10`. Changing
               this parameter will create a new resource.
        :param _builtins.int timeout: Specifies the maximum time required for waiting for a response from the health
               check, in seconds. It is recommended that you set the value less than that of parameter `delay`. The value range is
               from `1` to `50`. Changing this parameter will create a new resource.
        :param _builtins.str type: Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
               **HTTP**, and **HTTPS**.
               + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str domain_name: Specifies the domain name that HTTP requests are sent to during the health
               check. The value can contain only digits, letters, hyphens (-), and periods (.) and must start with a digit or letter.
               The value is left blank by default, indicating that the virtual IP address of the load balancer is used as the
               destination address of HTTP requests. This parameter is available only when `type` is set to **HTTP**. The length
               range of value is from `1` to `100`. Changing this parameter will create a new resource.
        :param _builtins.str expected_codes: Specifies the expected HTTP status code. This parameter will take
               effect only when `type` is set to **HTTP** or **HTTPS**. The default value is 200. Multiple status codes can be
               queried in the format of expected_codes=xxx&expected_codes=xxx. The length range of value is from `1` to `64`.
               Value options:
               + A specific value, for example, **200**
               + A list of values that are separated with commas (,), for example, **200**, **202**
               + A value range, for example, **200-204**
               
               Changing this parameter will create a new resource.
        :param _builtins.str http_method: Specifies the HTTP method. The value can be **GET**, **HEAD**, **POST**.
               Default to **GET**. This parameter is available when `type` is set to **HTTP** or **HTTPS**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str id: The health check ID.
        :param _builtins.int max_retries_down: Specifies the number of consecutive health checks when the health check
               result of a backend server changes from ONLINE to OFFLINE. The value range is from `1` to `10`. Defaults to `3`.
               Changing this parameter will create a new resource.
        :param _builtins.int monitor_port: Specifies the port used for the health check. If this parameter is left
               blank, a port of the backend server will be used by default. The value range is from `1` to `65,535`. Changing this
               parameter will create a new resource.
        :param _builtins.str name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param _builtins.str url_path: Specifies the HTTP request path for the health check. The value must start
               with a slash (/), and the default value is /. The value can contain letters, digits, hyphens (-), slashes (/),
               periods (.), percentage signs (%), question marks (?), pound signs (#), ampersand signs (&), and the extended character
               set **_;~!()*[]@$^:',+**. The length range of value is from `1` to `80`. Changing this parameter will create a new
               resource.
               
               > **NOTE:** This parameter is available only when `type` is set to **HTTP** or **HTTPS**.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if expected_codes is not None:
            pulumi.set(__self__, "expected_codes", expected_codes)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_retries_down is not None:
            pulumi.set(__self__, "max_retries_down", max_retries_down)
        if monitor_port is not None:
            pulumi.set(__self__, "monitor_port", monitor_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> _builtins.int:
        """
        Specifies the interval between health checks, in seconds. The value range is from
        `1` to `50`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        Specifies the number of consecutive health checks when the health check
        result of a backend server changes from **OFFLINE** to **ONLINE**. The value range is from `1` to `10`. Changing
        this parameter will create a new resource.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Specifies the maximum time required for waiting for a response from the health
        check, in seconds. It is recommended that you set the value less than that of parameter `delay`. The value range is
        from `1` to `50`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
        **HTTP**, and **HTTPS**.
        + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        Specifies the domain name that HTTP requests are sent to during the health
        check. The value can contain only digits, letters, hyphens (-), and periods (.) and must start with a digit or letter.
        The value is left blank by default, indicating that the virtual IP address of the load balancer is used as the
        destination address of HTTP requests. This parameter is available only when `type` is set to **HTTP**. The length
        range of value is from `1` to `100`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> Optional[_builtins.str]:
        """
        Specifies the expected HTTP status code. This parameter will take
        effect only when `type` is set to **HTTP** or **HTTPS**. The default value is 200. Multiple status codes can be
        queried in the format of expected_codes=xxx&expected_codes=xxx. The length range of value is from `1` to `64`.
        Value options:
        + A specific value, for example, **200**
        + A list of values that are separated with commas (,), for example, **200**, **202**
        + A value range, for example, **200-204**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expected_codes")

    @_builtins.property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[_builtins.str]:
        """
        Specifies the HTTP method. The value can be **GET**, **HEAD**, **POST**.
        Default to **GET**. This parameter is available when `type` is set to **HTTP** or **HTTPS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "http_method")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxRetriesDown")
    def max_retries_down(self) -> Optional[_builtins.int]:
        """
        Specifies the number of consecutive health checks when the health check
        result of a backend server changes from ONLINE to OFFLINE. The value range is from `1` to `10`. Defaults to `3`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "max_retries_down")

    @_builtins.property
    @pulumi.getter(name="monitorPort")
    def monitor_port(self) -> Optional[_builtins.int]:
        """
        Specifies the port used for the health check. If this parameter is left
        blank, a port of the backend server will be used by default. The value range is from `1` to `65,535`. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "monitor_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the health check name. The length range of value is from `1` to `255`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[_builtins.str]:
        """
        Specifies the HTTP request path for the health check. The value must start
        with a slash (/), and the default value is /. The value can contain letters, digits, hyphens (-), slashes (/),
        periods (.), percentage signs (%), question marks (?), pound signs (#), ampersand signs (&), and the extended character
        set **_;~!()*[]@$^:',+**. The length range of value is from `1` to `80`. Changing this parameter will create a new
        resource.

        > **NOTE:** This parameter is available only when `type` is set to **HTTP** or **HTTPS**.
        """
        return pulumi.get(self, "url_path")


@pulumi.output_type
class ActiveStandbyPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "memberType":
            suggest = "member_type"
        elif key == "operatingStatus":
            suggest = "operating_status"
        elif key == "protocolPort":
            suggest = "protocol_port"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveStandbyPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveStandbyPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveStandbyPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: _builtins.str,
                 role: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.str] = None,
                 member_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 operating_status: Optional[_builtins.str] = None,
                 protocol_port: Optional[_builtins.int] = None,
                 reasons: Optional[Sequence['outputs.ActiveStandbyPoolMemberReason']] = None,
                 statuses: Optional[Sequence['outputs.ActiveStandbyPoolMemberStatus']] = None,
                 subnet_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Specifies the private IP address bound to the member.
               + If `subnet_id` is left blank, IP as a Backend is enabled. In this case, the IP address must be an **IPv4** address.
               + If `subnet_id` is not left blank, the IP address can be **IPv4** or **IPv6**. It must be in the subnet specified
               by `subnet_id` and can only be bound to the primary NIC of the backend server.
               
               Changing this parameter will create a new resource.
        :param _builtins.str role: Specifies the type of the member. Value options:
               + **master**: active backend server.
               + **slave**: standby backend server.
               
               Changing this parameter will create a new resource.
        :param _builtins.str id: The health check ID.
        :param _builtins.str instance_id: The ID of the ECS used as the member.
        :param _builtins.str ip_version: Specifies the IP address version supported by active-standby pool.
               The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        :param _builtins.str member_type: The type of the member.
        :param _builtins.str name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param _builtins.str operating_status: The health status of the backend server. The value can be:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        :param _builtins.int protocol_port: Specifies the port used by the member to receive requests. It is mandatory
               if `any_port_enable` is **false**, and it does not take effect if `any_port_enable` is set to **true**. The value range
               is from `1` to `65,535`. Changing this parameter will create a new resource.
        :param Sequence['ActiveStandbyPoolMemberReasonArgs'] reasons: Why health check fails.
               The reason structure is documented below.
        :param Sequence['ActiveStandbyPoolMemberStatusArgs'] statuses: The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
               status is not specified, operating_status of member takes precedence.
               The status structure is documented below.
        :param _builtins.str subnet_id: Specifies the ID of the IPv4 or IPv6 subnet where the member resides.
               + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
               + If this parameter is not passed, IP as a Backend has been enabled for the load balancer. In this case, IP as backend
               servers must use private IPv4 addresses, and the protocol of the active-standby pool must be **TCP**, **HTTP**, or
               **HTTPS**.
               
               Changing this parameter will create a new resource.
               
               <a name="ELB_healthmonitor"></a>
               The `healthmonitor` block supports:
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "role", role)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)
        if protocol_port is not None:
            pulumi.set(__self__, "protocol_port", protocol_port)
        if reasons is not None:
            pulumi.set(__self__, "reasons", reasons)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Specifies the private IP address bound to the member.
        + If `subnet_id` is left blank, IP as a Backend is enabled. In this case, the IP address must be an **IPv4** address.
        + If `subnet_id` is not left blank, the IP address can be **IPv4** or **IPv6**. It must be in the subnet specified
        by `subnet_id` and can only be bound to the primary NIC of the backend server.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Specifies the type of the member. Value options:
        + **master**: active backend server.
        + **slave**: standby backend server.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the ECS used as the member.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address version supported by active-standby pool.
        The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[_builtins.str]:
        """
        The type of the member.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the health check name. The length range of value is from `1` to `255`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[_builtins.str]:
        """
        The health status of the backend server. The value can be:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[_builtins.int]:
        """
        Specifies the port used by the member to receive requests. It is mandatory
        if `any_port_enable` is **false**, and it does not take effect if `any_port_enable` is set to **true**. The value range
        is from `1` to `65,535`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence['outputs.ActiveStandbyPoolMemberReason']]:
        """
        Why health check fails.
        The reason structure is documented below.
        """
        return pulumi.get(self, "reasons")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.ActiveStandbyPoolMemberStatus']]:
        """
        The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
        status is not specified, operating_status of member takes precedence.
        The status structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the IPv4 or IPv6 subnet where the member resides.
        + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
        + If this parameter is not passed, IP as a Backend has been enabled for the load balancer. In this case, IP as backend
        servers must use private IPv4 addresses, and the protocol of the active-standby pool must be **TCP**, **HTTP**, or
        **HTTPS**.

        Changing this parameter will create a new resource.

        <a name="ELB_healthmonitor"></a>
        The `healthmonitor` block supports:
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ActiveStandbyPoolMemberReason(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "healthcheckResponse":
            suggest = "healthcheck_response"
        elif key == "reasonCode":
            suggest = "reason_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveStandbyPoolMemberReason. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveStandbyPoolMemberReason.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveStandbyPoolMemberReason.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[_builtins.str] = None,
                 healthcheck_response: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None):
        """
        :param _builtins.str expected_response: The expected HTTP status code. This parameter will take effect only when `type` is set to **HTTP**,
               **HTTPS** or **GRPC**.
               + A specific status code. If `type` is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set
               to other values, the status code ranges from **200** to **599**.
               + A list of status codes that are separated with commas (,). A maximum of five status codes are supported.
               + A status code range. Different ranges are separated with commas (,). A maximum of five ranges are supported.
        :param _builtins.str healthcheck_response: The returned HTTP status code in the response. This parameter will take effect only when `type`
               is set to **HTTP**, **HTTPS** or **GRPC**.
               + A specific status code. If type is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set to
               other values, the status code ranges from **200** to **599**.
        :param _builtins.str reason_code: The code of the health check failures. The value can be:
               + **CONNECT_TIMEOUT**: The connection with the backend server times out during a health check.
               + **CONNECT_REFUSED**: The load balancer rejects connections with the backend server during a health check.
               + **CONNECT_FAILED**: The load balancer fails to establish connections with the backend server during a health check.
               + **CONNECT_INTERRUPT**: The load balancer is disconnected from the backend server during a health check.
               + **SSL_HANDSHAKE_ERROR**: The SSL handshakes with the backend server fail during a health check.
               + **RECV_RESPONSE_FAILED**: The load balancer fails to receive responses from the backend server during a health check.
               + **RECV_RESPONSE_TIMEOUT**: The load balancer does not receive responses from the backend server within the timeout
               duration during a health check.
               + **SEND_REQUEST_FAILED**: The load balancer fails to send a health check request to the backend server during a health
               check.
               + **SEND_REQUEST_TIMEOUT**: The load balancer fails to send a health check request to the backend server within the
               timeout duration.
               + **RESPONSE_FORMAT_ERROR**: The load balancer receives invalid responses from the backend server during a health check.
               + **RESPONSE_MISMATCH**: The response code received from the backend server is different from the preset code.
        """
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if healthcheck_response is not None:
            pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[_builtins.str]:
        """
        The expected HTTP status code. This parameter will take effect only when `type` is set to **HTTP**,
        **HTTPS** or **GRPC**.
        + A specific status code. If `type` is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set
        to other values, the status code ranges from **200** to **599**.
        + A list of status codes that are separated with commas (,). A maximum of five status codes are supported.
        + A status code range. Different ranges are separated with commas (,). A maximum of five ranges are supported.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> Optional[_builtins.str]:
        """
        The returned HTTP status code in the response. This parameter will take effect only when `type`
        is set to **HTTP**, **HTTPS** or **GRPC**.
        + A specific status code. If type is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set to
        other values, the status code ranges from **200** to **599**.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        """
        The code of the health check failures. The value can be:
        + **CONNECT_TIMEOUT**: The connection with the backend server times out during a health check.
        + **CONNECT_REFUSED**: The load balancer rejects connections with the backend server during a health check.
        + **CONNECT_FAILED**: The load balancer fails to establish connections with the backend server during a health check.
        + **CONNECT_INTERRUPT**: The load balancer is disconnected from the backend server during a health check.
        + **SSL_HANDSHAKE_ERROR**: The SSL handshakes with the backend server fail during a health check.
        + **RECV_RESPONSE_FAILED**: The load balancer fails to receive responses from the backend server during a health check.
        + **RECV_RESPONSE_TIMEOUT**: The load balancer does not receive responses from the backend server within the timeout
        duration during a health check.
        + **SEND_REQUEST_FAILED**: The load balancer fails to send a health check request to the backend server during a health
        check.
        + **SEND_REQUEST_TIMEOUT**: The load balancer fails to send a health check request to the backend server within the
        timeout duration.
        + **RESPONSE_FORMAT_ERROR**: The load balancer receives invalid responses from the backend server during a health check.
        + **RESPONSE_MISMATCH**: The response code received from the backend server is different from the preset code.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class ActiveStandbyPoolMemberStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "operatingStatus":
            suggest = "operating_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveStandbyPoolMemberStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveStandbyPoolMemberStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveStandbyPoolMemberStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: Optional[_builtins.str] = None,
                 operating_status: Optional[_builtins.str] = None):
        """
        :param _builtins.str listener_id: Specifies the ID of the listener with which the active-standby pool is
               associated. Changing this parameter will create a new resource.
               
               > **NOTE:** At least one of `loadbalancer_id`, `listener_id`, `type` must be specified.
        :param _builtins.str operating_status: The health status of the backend server. The value can be:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the listener with which the active-standby pool is
        associated. Changing this parameter will create a new resource.

        > **NOTE:** At least one of `loadbalancer_id`, `listener_id`, `type` must be specified.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[_builtins.str]:
        """
        The health status of the backend server. The value can be:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")


@pulumi.output_type
class ActiveStandbyPoolQuicCidHashStrategy(dict):
    def __init__(__self__, *,
                 len: Optional[_builtins.int] = None,
                 offset: Optional[_builtins.int] = None):
        """
        :param _builtins.int len: The length of the hash factor in the connection ID, in byte. This parameter is valid only when `lb_algorithm`
               is **QUIC_CID**. Value range: **1** to **20**.
        :param _builtins.int offset: The start position in the connection ID as the hash factor, in byte. This parameter is valid only when
               `lb_algorithm` is **QUIC_CID**. Value range: **0** to **19**.
        """
        if len is not None:
            pulumi.set(__self__, "len", len)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @_builtins.property
    @pulumi.getter
    def len(self) -> Optional[_builtins.int]:
        """
        The length of the hash factor in the connection ID, in byte. This parameter is valid only when `lb_algorithm`
        is **QUIC_CID**. Value range: **1** to **20**.
        """
        return pulumi.get(self, "len")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.int]:
        """
        The start position in the connection ID as the hash factor, in byte. This parameter is valid only when
        `lb_algorithm` is **QUIC_CID**. Value range: **0** to **19**.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class IpgroupIpList(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: IP address or CIDR block.
        :param _builtins.str description: Human-readable description for the ip.
        """
        pulumi.set(__self__, "ip", ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        IP address or CIDR block.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Human-readable description for the ip.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class L7policyFixedResponseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyFixedResponseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyFixedResponseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyFixedResponseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: _builtins.str,
                 content_type: Optional[_builtins.str] = None,
                 insert_headers_config: Optional['outputs.L7policyFixedResponseConfigInsertHeadersConfig'] = None,
                 message_body: Optional[_builtins.str] = None,
                 remove_headers_config: Optional['outputs.L7policyFixedResponseConfigRemoveHeadersConfig'] = None,
                 traffic_limit_config: Optional['outputs.L7policyFixedResponseConfigTrafficLimitConfig'] = None):
        """
        :param _builtins.str status_code: The fixed HTTP status code configured in the forwarding rule. The value can be
               any integer in the range of **200–299**, **400–499**, or **500–599**.
        :param _builtins.str content_type: The format of the response body. Value options: **text/plain**, **text/css**,
               **text/html**, **application/javascript**, or **application/json**. Defaults to: **text/plain**.
        :param 'L7policyFixedResponseConfigInsertHeadersConfigArgs' insert_headers_config: The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param _builtins.str message_body: The content of the response message body.
        :param 'L7policyFixedResponseConfigRemoveHeadersConfigArgs' remove_headers_config: The header parameters to be removed.
               The remove_headers_config structure is documented below.
        :param 'L7policyFixedResponseConfigTrafficLimitConfigArgs' traffic_limit_config: The traffic limit config of the policy.
               The traffic_limit_config structure is documented below.
               
               <a name="insert_headers_config_object"></a>
               The `insert_headers_config` block supports:
        """
        pulumi.set(__self__, "status_code", status_code)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The fixed HTTP status code configured in the forwarding rule. The value can be
        any integer in the range of **200–299**, **400–499**, or **500–599**.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[_builtins.str]:
        """
        The format of the response body. Value options: **text/plain**, **text/css**,
        **text/html**, **application/javascript**, or **application/json**. Defaults to: **text/plain**.
        """
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.L7policyFixedResponseConfigInsertHeadersConfig']:
        """
        The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[_builtins.str]:
        """
        The content of the response message body.
        """
        return pulumi.get(self, "message_body")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.L7policyFixedResponseConfigRemoveHeadersConfig']:
        """
        The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_config")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.L7policyFixedResponseConfigTrafficLimitConfig']:
        """
        The traffic limit config of the policy.
        The traffic_limit_config structure is documented below.

        <a name="insert_headers_config_object"></a>
        The `insert_headers_config` block supports:
        """
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class L7policyFixedResponseConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyFixedResponseConfigInsertHeadersConfigConfig']):
        """
        :param Sequence['L7policyFixedResponseConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyFixedResponseConfigInsertHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyFixedResponseConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyFixedResponseConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        :param _builtins.str value: The value of the parameter. The value can contain `1` to `128`, only printable
               characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
               cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
               **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.
               
               <a name="remove_headers_config_object"></a>
               The `remove_headers_config` block supports:
        :param _builtins.str value_type: The value type of the parameter. Value options: **USER_DEFINED**,
               **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter. The value can contain `1` to `128`, only printable
        characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
        cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
        **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.

        <a name="remove_headers_config_object"></a>
        The `remove_headers_config` block supports:
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter. Value options: **USER_DEFINED**,
        **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class L7policyFixedResponseConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyFixedResponseConfigRemoveHeadersConfigConfig']):
        """
        :param Sequence['L7policyFixedResponseConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyFixedResponseConfigRemoveHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyFixedResponseConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class L7policyFixedResponseConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyFixedResponseConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[_builtins.int] = None,
                 per_source_ip_qps: Optional[_builtins.int] = None,
                 qps: Optional[_builtins.int] = None):
        """
        :param _builtins.int burst: The qps buffer.  
               The valid value is range form `0` to `100,000`. When qps exceeds the limit, 503 will not be
               returned, and requests that allow local burst size increases are supported.
        :param _builtins.int per_source_ip_qps: The single source qps of the policy.  
               The valid value is range form `0` to `100,000`, `0` indicates no limit.
               If the value of `qps` is not `0`, then the value of `per_source_ip_qps` must less than the value of `qps`.
               If the `protocol` of the listener that the policy associated with is **QUIC**, then `per_source_ip_qps` is not
               supported, the value should be `0` or empty.
        :param _builtins.int qps: The overall qps of the policy.  
               The valid value is range form `0` to `100,000`, `0` indicates no limit.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[_builtins.int]:
        """
        The qps buffer.  
        The valid value is range form `0` to `100,000`. When qps exceeds the limit, 503 will not be
        returned, and requests that allow local burst size increases are supported.
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[_builtins.int]:
        """
        The single source qps of the policy.  
        The valid value is range form `0` to `100,000`, `0` indicates no limit.
        If the value of `qps` is not `0`, then the value of `per_source_ip_qps` must less than the value of `qps`.
        If the `protocol` of the listener that the policy associated with is **QUIC**, then `per_source_ip_qps` is not
        supported, the value should be `0` or empty.
        """
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> Optional[_builtins.int]:
        """
        The overall qps of the policy.  
        The valid value is range form `0` to `100,000`, `0` indicates no limit.
        """
        return pulumi.get(self, "qps")


@pulumi.output_type
class L7policyRedirectPoolsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolId":
            suggest = "pool_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectPoolsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectPoolsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectPoolsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_id: _builtins.str,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str pool_id: The ID of the backend server group.
        :param _builtins.int weight: The weight of the backend server group.
               
               <a name="redirect_pools_sticky_session_config_object"></a>
               The `redirect_pools_sticky_session_config` block supports:
        """
        pulumi.set(__self__, "pool_id", pool_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        The ID of the backend server group.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        The weight of the backend server group.

        <a name="redirect_pools_sticky_session_config_object"></a>
        The `redirect_pools_sticky_session_config` block supports:
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "rewriteUrlConfig":
            suggest = "rewrite_url_config"
        elif key == "rewriteUrlEnabled":
            suggest = "rewrite_url_enabled"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectPoolsExtendConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insert_headers_config: Optional['outputs.L7policyRedirectPoolsExtendConfigInsertHeadersConfig'] = None,
                 remove_headers_config: Optional['outputs.L7policyRedirectPoolsExtendConfigRemoveHeadersConfig'] = None,
                 rewrite_url_config: Optional['outputs.L7policyRedirectPoolsExtendConfigRewriteUrlConfig'] = None,
                 rewrite_url_enabled: Optional[_builtins.bool] = None,
                 traffic_limit_config: Optional['outputs.L7policyRedirectPoolsExtendConfigTrafficLimitConfig'] = None):
        """
        :param 'L7policyRedirectPoolsExtendConfigInsertHeadersConfigArgs' insert_headers_config: The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param 'L7policyRedirectPoolsExtendConfigRemoveHeadersConfigArgs' remove_headers_config: The header parameters to be removed.
               The remove_headers_config structure is documented below.
        :param 'L7policyRedirectPoolsExtendConfigRewriteUrlConfigArgs' rewrite_url_config: The rewrite url config. This parameter is mandatory when `rewrite_url_enabled`
               is set to **true**.
               The rewrite_url_config structure is documented below.
        :param _builtins.bool rewrite_url_enabled: Whether the rewrite url is enabled.
        :param 'L7policyRedirectPoolsExtendConfigTrafficLimitConfigArgs' traffic_limit_config: The traffic limit config of the policy.
               The traffic_limit_config structure is documented below.
               
               <a name="insert_headers_config_object"></a>
               The `insert_headers_config` block supports:
        """
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if rewrite_url_config is not None:
            pulumi.set(__self__, "rewrite_url_config", rewrite_url_config)
        if rewrite_url_enabled is not None:
            pulumi.set(__self__, "rewrite_url_enabled", rewrite_url_enabled)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.L7policyRedirectPoolsExtendConfigInsertHeadersConfig']:
        """
        The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.L7policyRedirectPoolsExtendConfigRemoveHeadersConfig']:
        """
        The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_config")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlConfig")
    def rewrite_url_config(self) -> Optional['outputs.L7policyRedirectPoolsExtendConfigRewriteUrlConfig']:
        """
        The rewrite url config. This parameter is mandatory when `rewrite_url_enabled`
        is set to **true**.
        The rewrite_url_config structure is documented below.
        """
        return pulumi.get(self, "rewrite_url_config")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlEnabled")
    def rewrite_url_enabled(self) -> Optional[_builtins.bool]:
        """
        Whether the rewrite url is enabled.
        """
        return pulumi.get(self, "rewrite_url_enabled")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.L7policyRedirectPoolsExtendConfigTrafficLimitConfig']:
        """
        The traffic limit config of the policy.
        The traffic_limit_config structure is documented below.

        <a name="insert_headers_config_object"></a>
        The `insert_headers_config` block supports:
        """
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']):
        """
        :param Sequence['L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        :param _builtins.str value: The value of the parameter. The value can contain `1` to `128`, only printable
               characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
               cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
               **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.
               
               <a name="remove_headers_config_object"></a>
               The `remove_headers_config` block supports:
        :param _builtins.str value_type: The value type of the parameter. Value options: **USER_DEFINED**,
               **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter. The value can contain `1` to `128`, only printable
        characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
        cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
        **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.

        <a name="remove_headers_config_object"></a>
        The `remove_headers_config` block supports:
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter. Value options: **USER_DEFINED**,
        **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']):
        """
        :param Sequence['L7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigRewriteUrlConfig(dict):
    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 query: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host name that requests are redirected to. The value can contain only letters,
               digits, hyphens (-), and periods (.) and must start with a letter or digit. Defaults to **${host}**, indicating
               that the host of the request will be used.
        :param _builtins.str path: The path that requests are redirected to. The value can contain only letters, digits,
               and special characters _~';@^- %#&$.*+?,=!:|/()[]{} and must start with a slash (/).
               Defaults to **${path}**, indicating that the path of the request will be used.
        :param _builtins.str query: The query string set in the URL for redirection. The value is case-sensitive and can
               contain only letters, digits, and special characters !$&'()*+,-./:;=?@^_\\`. Defaults to **${query}**, indicating that
               the query string of the request will be used.
               For example, in the URL `https://www.xxx.com:8080/elb?type=loadbalancer`, **${query}** indicates **type=loadbalancer**.
               If this parameter is set to **${query}&name=my_name**, the URL will be redirected to
               URL `https://www.xxx.com:8080/elb?type=loadbalancer&name=my_name`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name that requests are redirected to. The value can contain only letters,
        digits, hyphens (-), and periods (.) and must start with a letter or digit. Defaults to **${host}**, indicating
        that the host of the request will be used.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path that requests are redirected to. The value can contain only letters, digits,
        and special characters _~';@^- %#&$.*+?,=!:|/()[]{} and must start with a slash (/).
        Defaults to **${path}**, indicating that the path of the request will be used.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[_builtins.str]:
        """
        The query string set in the URL for redirection. The value is case-sensitive and can
        contain only letters, digits, and special characters !$&'()*+,-./:;=?@^_\\`. Defaults to **${query}**, indicating that
        the query string of the request will be used.
        For example, in the URL `https://www.xxx.com:8080/elb?type=loadbalancer`, **${query}** indicates **type=loadbalancer**.
        If this parameter is set to **${query}&name=my_name**, the URL will be redirected to
        URL `https://www.xxx.com:8080/elb?type=loadbalancer&name=my_name`.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class L7policyRedirectPoolsExtendConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectPoolsExtendConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[_builtins.int] = None,
                 per_source_ip_qps: Optional[_builtins.int] = None,
                 qps: Optional[_builtins.int] = None):
        """
        :param _builtins.int burst: The qps buffer.  
               The valid value is range form `0` to `100,000`. When qps exceeds the limit, 503 will not be
               returned, and requests that allow local burst size increases are supported.
        :param _builtins.int per_source_ip_qps: The single source qps of the policy.  
               The valid value is range form `0` to `100,000`, `0` indicates no limit.
               If the value of `qps` is not `0`, then the value of `per_source_ip_qps` must less than the value of `qps`.
               If the `protocol` of the listener that the policy associated with is **QUIC**, then `per_source_ip_qps` is not
               supported, the value should be `0` or empty.
        :param _builtins.int qps: The overall qps of the policy.  
               The valid value is range form `0` to `100,000`, `0` indicates no limit.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[_builtins.int]:
        """
        The qps buffer.  
        The valid value is range form `0` to `100,000`. When qps exceeds the limit, 503 will not be
        returned, and requests that allow local burst size increases are supported.
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[_builtins.int]:
        """
        The single source qps of the policy.  
        The valid value is range form `0` to `100,000`, `0` indicates no limit.
        If the value of `qps` is not `0`, then the value of `per_source_ip_qps` must less than the value of `qps`.
        If the `protocol` of the listener that the policy associated with is **QUIC**, then `per_source_ip_qps` is not
        supported, the value should be `0` or empty.
        """
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> Optional[_builtins.int]:
        """
        The overall qps of the policy.  
        The valid value is range form `0` to `100,000`, `0` indicates no limit.
        """
        return pulumi.get(self, "qps")


@pulumi.output_type
class L7policyRedirectPoolsStickySessionConfig(dict):
    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.bool enable: Whether enable config session persistence between backend server groups.
        :param _builtins.int timeout: The timeout of the session persistence.
               
               <a name="redirect_pools_extend_config_object"></a>
               The `redirect_pools_extend_config` block supports:
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Whether enable config session persistence between backend server groups.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        The timeout of the session persistence.

        <a name="redirect_pools_extend_config_object"></a>
        The `redirect_pools_extend_config` block supports:
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class L7policyRedirectUrlConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectUrlConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectUrlConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectUrlConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: _builtins.str,
                 host: Optional[_builtins.str] = None,
                 insert_headers_config: Optional['outputs.L7policyRedirectUrlConfigInsertHeadersConfig'] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 query: Optional[_builtins.str] = None,
                 remove_headers_config: Optional['outputs.L7policyRedirectUrlConfigRemoveHeadersConfig'] = None):
        """
        :param _builtins.str status_code: The fixed HTTP status code configured in the forwarding rule. The value can be
               any integer in the range of **200–299**, **400–499**, or **500–599**.
        :param _builtins.str host: The host name that requests are redirected to. The value can contain only letters,
               digits, hyphens (-), and periods (.) and must start with a letter or digit. Defaults to **${host}**, indicating
               that the host of the request will be used.
        :param 'L7policyRedirectUrlConfigInsertHeadersConfigArgs' insert_headers_config: The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param _builtins.str path: The path that requests are redirected to. The value can contain only letters, digits,
               and special characters _~';@^- %#&$.*+?,=!:|/()[]{} and must start with a slash (/).
               Defaults to **${path}**, indicating that the path of the request will be used.
        :param _builtins.str port: The  port that requests are redirected to. Defaults to **${port}**, indicating that
               the port of the request will be used.
        :param _builtins.str protocol: The protocol for redirection. Value options: **HTTP**, **HTTPS**, **${protocol}**.
               Defaults to **${protocol}**, indicating that the path of the request will be used.
        :param _builtins.str query: The query string set in the URL for redirection. The value is case-sensitive and can
               contain only letters, digits, and special characters !$&'()*+,-./:;=?@^_\\`. Defaults to **${query}**, indicating that
               the query string of the request will be used.
               For example, in the URL `https://www.xxx.com:8080/elb?type=loadbalancer`, **${query}** indicates **type=loadbalancer**.
               If this parameter is set to **${query}&name=my_name**, the URL will be redirected to
               URL `https://www.xxx.com:8080/elb?type=loadbalancer&name=my_name`.
        :param 'L7policyRedirectUrlConfigRemoveHeadersConfigArgs' remove_headers_config: The header parameters to be removed.
               The remove_headers_config structure is documented below.
        """
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The fixed HTTP status code configured in the forwarding rule. The value can be
        any integer in the range of **200–299**, **400–499**, or **500–599**.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host name that requests are redirected to. The value can contain only letters,
        digits, hyphens (-), and periods (.) and must start with a letter or digit. Defaults to **${host}**, indicating
        that the host of the request will be used.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.L7policyRedirectUrlConfigInsertHeadersConfig']:
        """
        The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path that requests are redirected to. The value can contain only letters, digits,
        and special characters _~';@^- %#&$.*+?,=!:|/()[]{} and must start with a slash (/).
        Defaults to **${path}**, indicating that the path of the request will be used.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The  port that requests are redirected to. Defaults to **${port}**, indicating that
        the port of the request will be used.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol for redirection. Value options: **HTTP**, **HTTPS**, **${protocol}**.
        Defaults to **${protocol}**, indicating that the path of the request will be used.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[_builtins.str]:
        """
        The query string set in the URL for redirection. The value is case-sensitive and can
        contain only letters, digits, and special characters !$&'()*+,-./:;=?@^_\\`. Defaults to **${query}**, indicating that
        the query string of the request will be used.
        For example, in the URL `https://www.xxx.com:8080/elb?type=loadbalancer`, **${query}** indicates **type=loadbalancer**.
        If this parameter is set to **${query}&name=my_name**, the URL will be redirected to
        URL `https://www.xxx.com:8080/elb?type=loadbalancer&name=my_name`.
        """
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.L7policyRedirectUrlConfigRemoveHeadersConfig']:
        """
        The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_config")


@pulumi.output_type
class L7policyRedirectUrlConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyRedirectUrlConfigInsertHeadersConfigConfig']):
        """
        :param Sequence['L7policyRedirectUrlConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyRedirectUrlConfigInsertHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyRedirectUrlConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L7policyRedirectUrlConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        :param _builtins.str value: The value of the parameter. The value can contain `1` to `128`, only printable
               characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
               cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
               **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.
               
               <a name="remove_headers_config_object"></a>
               The `remove_headers_config` block supports:
        :param _builtins.str value_type: The value type of the parameter. Value options: **USER_DEFINED**,
               **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter. The value can contain `1` to `128`, only printable
        characters in the range of ASCII code value 32<=ch<=127, asterisks (*) and question marks (?) are allowed, and it
        cannot start or end with a space characters. If the value of `value_type` is **SYSTEM_DEFINED**, the value options is:
        **CLIENT-PORT**, **CLIENT-IP**, **ELB-PROTOCOL**, **ELB-ID**, **ELB-PORT**, **ELB-EIP**, **ELB-VIP**.

        <a name="remove_headers_config_object"></a>
        The `remove_headers_config` block supports:
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter. Value options: **USER_DEFINED**,
        **REFERENCE_HEADER**, **SYSTEM_DEFINED**.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class L7policyRedirectUrlConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.L7policyRedirectUrlConfigRemoveHeadersConfigConfig']):
        """
        :param Sequence['L7policyRedirectUrlConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
               
               <a name="remove_header_configs_object"></a>
               The `remove_header_configs` block supports:
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.L7policyRedirectUrlConfigRemoveHeadersConfigConfig']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.

        <a name="remove_header_configs_object"></a>
        The `remove_header_configs` block supports:
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class L7policyRedirectUrlConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header. The value can contain `1` to `40`
               characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
               **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
               **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
               **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
               **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
               **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.
               
               <a name="traffic_limit_config_object"></a>
               The `traffic_limit_config` block supports:
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header. The value can contain `1` to `40`
        characters, only a-z, digits, hyphens (-) and underscore (_) are allowed, and it can not be the following characters:
        **connection**, **upgrade**, **content-length**, **transfer-encoding**, **keep-alive**, **te**, **host**, **cookie**,
        **remoteip**, **authority**, **x-forwarded-host**, **x-forwarded-for**, **x-forwarded-for-port**,
        **x-forwarded-tls-certificate-id**, **x-forwarded-tls-protocol**, **x-forwarded-tls-cipher**, **x-forwarded-elb-ip**,
        **x-forwarded-port**, **x-forwarded-elb-id**, **x-forwarded-elb-vip**, **x-real-ip**, **x-forwarded-proto**,
        **x-nuwa-trace-ne-in**, **x-nuwa-trace-ne-out**.

        <a name="traffic_limit_config_object"></a>
        The `traffic_limit_config` block supports:
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class L7ruleCondition(dict):
    def __init__(__self__, *,
                 value: _builtins.str,
                 key: Optional[_builtins.str] = None):
        """
        :param _builtins.str value: Specifies the value of the match item.
               + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
               letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
               If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
               + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
               `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
               slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
               + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
               characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
               An asterisk can match zero or more characters, and a question mark can match 1 character.
               + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
               and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
               backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
               and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
               more characters, and a question mark can match 1 character.
               + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
               **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
               + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
               **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.
               
               > **NOTE:** All values in the conditions list in the same rule must be unique.
        :param _builtins.str key: Specifies the key of match item.
               + If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, this parameter is left blank.
               + If `type` is set to **HEADER**, it indicates the name of the HTTP header parameter. It can contain 1 to 40
               characters, including letters, digits, hyphens (-), and underscores (_).
               + If `type` is set to **QUERY_STRING**, it indicates the name of the query parameter. It is case-sensitive and can
               contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>), backslashes (),
               double quotation marks (" "), pound signs (#), ampersands (&), vertical bars (|), percent signs (%), and tildes (~)
               are not supported.
               
               > **NOTE:** All keys in the conditions list in the same rule must be the same.
        """
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match item.
        + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
        letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
        If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
        + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
        `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
        slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
        + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
        characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
        An asterisk can match zero or more characters, and a question mark can match 1 character.
        + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
        and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
        backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
        and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
        more characters, and a question mark can match 1 character.
        + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
        **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
        + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
        **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.

        > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of match item.
        + If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, this parameter is left blank.
        + If `type` is set to **HEADER**, it indicates the name of the HTTP header parameter. It can contain 1 to 40
        characters, including letters, digits, hyphens (-), and underscores (_).
        + If `type` is set to **QUERY_STRING**, it indicates the name of the query parameter. It is case-sensitive and can
        contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>), backslashes (),
        double quotation marks (" "), pound signs (#), ampersands (&), vertical bars (|), percent signs (%), and tildes (~)
        are not supported.

        > **NOTE:** All keys in the conditions list in the same rule must be the same.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ListenerPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: _builtins.int,
                 start_port: _builtins.int):
        """
        :param _builtins.int end_port: Specifies the end port. Changing this creates a new listener.
        :param _builtins.int start_port: Specifies the start port. Changing this creates a new listener.
        """
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @_builtins.property
    @pulumi.getter(name="endPort")
    def end_port(self) -> _builtins.int:
        """
        Specifies the end port. Changing this creates a new listener.
        """
        return pulumi.get(self, "end_port")

    @_builtins.property
    @pulumi.getter(name="startPort")
    def start_port(self) -> _builtins.int:
        """
        Specifies the start port. Changing this creates a new listener.
        """
        return pulumi.get(self, "start_port")


@pulumi.output_type
class MemberReason(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "healthcheckResponse":
            suggest = "healthcheck_response"
        elif key == "reasonCode":
            suggest = "reason_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MemberReason. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MemberReason.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MemberReason.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[_builtins.str] = None,
                 healthcheck_response: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None):
        """
        :param _builtins.str expected_response: The code of the health check failures.
        :param _builtins.str healthcheck_response: The expected HTTP status code.
        :param _builtins.str reason_code: The returned HTTP status code in the response.
        """
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if healthcheck_response is not None:
            pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[_builtins.str]:
        """
        The code of the health check failures.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> Optional[_builtins.str]:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        """
        The returned HTTP status code in the response.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class MemberStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "operatingStatus":
            suggest = "operating_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MemberStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MemberStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MemberStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: Optional[_builtins.str] = None,
                 operating_status: Optional[_builtins.str] = None,
                 reasons: Optional[Sequence['outputs.MemberStatusReason']] = None):
        """
        :param _builtins.str listener_id: The listener ID.
        :param _builtins.str operating_status: The health status of the backend server.
        :param Sequence['MemberStatusReasonArgs'] reasons: Why health check fails.
               The reason structure is documented below.
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)
        if reasons is not None:
            pulumi.set(__self__, "reasons", reasons)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.str]:
        """
        The listener ID.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[_builtins.str]:
        """
        The health status of the backend server.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence['outputs.MemberStatusReason']]:
        """
        Why health check fails.
        The reason structure is documented below.
        """
        return pulumi.get(self, "reasons")


@pulumi.output_type
class MemberStatusReason(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "healthcheckResponse":
            suggest = "healthcheck_response"
        elif key == "reasonCode":
            suggest = "reason_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MemberStatusReason. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MemberStatusReason.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MemberStatusReason.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[_builtins.str] = None,
                 healthcheck_response: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None):
        """
        :param _builtins.str expected_response: The code of the health check failures.
        :param _builtins.str healthcheck_response: The expected HTTP status code.
        :param _builtins.str reason_code: The returned HTTP status code in the response.
        """
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if healthcheck_response is not None:
            pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[_builtins.str]:
        """
        The code of the health check failures.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> Optional[_builtins.str]:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        """
        The returned HTTP status code in the response.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class PoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Specifies the sticky session type. Value options: **SOURCE_IP**,
               **HTTP_COOKIE**, and **APP_COOKIE**.
               
               > **NOTE:** 1. If the protocol of the backend server group is **TCP** or **UDP**, only **SOURCE_IP** takes effect.
               <br/> 2. If the protocol of the backend server group is **HTTP** or **HTTPS**, the value can only be **HTTP_COOKIE**.
               <br/> 3. If the backend server group protocol is **QUIC**, sticky session must be enabled with type set to
               **SOURCE_IP**.
        :param _builtins.str cookie_name: Specifies the cookie name. The value can contain only letters, digits,
               hyphens (-), underscores (_), and periods (.). It is required if `type` of `persistence` is set to **APP_COOKIE**.
        :param _builtins.int timeout: Specifies the sticky session timeout duration in minutes. This parameter is
               invalid when `type` is set to **APP_COOKIE**. The value range varies depending on the protocol of the backend server
               group:
               + When the protocol of the backend server group is **TCP** or **UDP**, the value ranges from `1` to `60`, and
               defaults to `1`.
               + When the protocol of the backend server group is **HTTP** or **HTTPS**, the value ranges from `1` to `1,440`,
               and defaults to `1,440`.
        """
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the sticky session type. Value options: **SOURCE_IP**,
        **HTTP_COOKIE**, and **APP_COOKIE**.

        > **NOTE:** 1. If the protocol of the backend server group is **TCP** or **UDP**, only **SOURCE_IP** takes effect.
        <br/> 2. If the protocol of the backend server group is **HTTP** or **HTTPS**, the value can only be **HTTP_COOKIE**.
        <br/> 3. If the backend server group protocol is **QUIC**, sticky session must be enabled with type set to
        **SOURCE_IP**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        Specifies the cookie name. The value can contain only letters, digits,
        hyphens (-), underscores (_), and periods (.). It is required if `type` of `persistence` is set to **APP_COOKIE**.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the sticky session timeout duration in minutes. This parameter is
        invalid when `type` is set to **APP_COOKIE**. The value range varies depending on the protocol of the backend server
        group:
        + When the protocol of the backend server group is **TCP** or **UDP**, the value ranges from `1` to `60`, and
        defaults to `1`.
        + When the protocol of the backend server group is **HTTP** or **HTTPS**, the value ranges from `1` to `1,440`,
        and defaults to `1,440`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SecurityPolicyListener(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The listener id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The listener id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetActiveStandbyPoolsPoolResult(dict):
    def __init__(__self__, *,
                 any_port_enable: _builtins.bool,
                 connection_drain_enabled: _builtins.bool,
                 connection_drain_timeout: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 healthmonitors: Sequence['outputs.GetActiveStandbyPoolsPoolHealthmonitorResult'],
                 id: _builtins.str,
                 ip_version: _builtins.str,
                 lb_algorithm: _builtins.str,
                 listeners: Sequence['outputs.GetActiveStandbyPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetActiveStandbyPoolsPoolLoadbalancerResult'],
                 members: Sequence['outputs.GetActiveStandbyPoolsPoolMemberResult'],
                 name: _builtins.str,
                 protocol: _builtins.str,
                 quic_cid_hash_strategies: Sequence['outputs.GetActiveStandbyPoolsPoolQuicCidHashStrategyResult'],
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.bool any_port_enable: Whether to enable Forward to same Port for a pool.
        :param _builtins.bool connection_drain_enabled: Whether to enable delayed logout.
        :param _builtins.int connection_drain_timeout: The timeout of the delayed logout in seconds.
        :param _builtins.str created_at: The time when the backend server group was created.
        :param _builtins.str description: Specifies supplementary information about the active-standby pool.
        :param _builtins.str enterprise_project_id: The ID of the enterprise project.
        :param Sequence['GetActiveStandbyPoolsPoolHealthmonitorArgs'] healthmonitors: The health check configured for the active-standby pool.
               The healthmonitor structure is documented below.
        :param _builtins.str id: The health check ID.
        :param _builtins.str ip_version: Specifies the IP address version supported by the pool.
        :param _builtins.str lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route requests
               to backend servers in the associated pool. Value options:
               + **ROUND_ROBIN**: weighted round robin.
               + **LEAST_CONNECTIONS**: weighted least connections.
               + **SOURCE_IP**: source IP hash.
               + **QUIC_CID**: connection ID.
        :param Sequence['GetActiveStandbyPoolsPoolListenerArgs'] listeners: The IDs of the listeners with which the active-standby pool is associated.
               The listeners structure is documented below.
        :param Sequence['GetActiveStandbyPoolsPoolLoadbalancerArgs'] loadbalancers: The IDs of the load balancers with which the active-standby pool is associated.
               The loadbalancers structure is documented below.
        :param Sequence['GetActiveStandbyPoolsPoolMemberArgs'] members: The backend servers in the active-standby pool.
               The members structure is documented below.
        :param _builtins.str name: Specifies the name of the active-standby pool.
        :param _builtins.str protocol: Specifies the protocol used by the active-standby pool to receive requests from the
               load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
        :param Sequence['GetActiveStandbyPoolsPoolQuicCidHashStrategyArgs'] quic_cid_hash_strategies: The multi-path distribution configuration based on destination connection IDs.
               The quic_cid_hash_strategy structure is documented below.
        :param _builtins.str type: Specifies the type of the active-standby pool.
               The valid values are as follows:
               + **instance**: Any type of backend servers can be added.
               + **ip**: Only IP as backend servers can be added.
               
               If the `type` is empty, any type of backend servers can be added.
        :param _builtins.str updated_at: The time when the backend server group was updated.
        :param _builtins.str vpc_id: Specifies the ID of the VPC where the active-standby pool works.
        """
        pulumi.set(__self__, "any_port_enable", any_port_enable)
        pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "healthmonitors", healthmonitors)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "quic_cid_hash_strategies", quic_cid_hash_strategies)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> _builtins.bool:
        """
        Whether to enable Forward to same Port for a pool.
        """
        return pulumi.get(self, "any_port_enable")

    @_builtins.property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> _builtins.bool:
        """
        Whether to enable delayed logout.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> _builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the backend server group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies supplementary information about the active-standby pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def healthmonitors(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolHealthmonitorResult']:
        """
        The health check configured for the active-standby pool.
        The healthmonitor structure is documented below.
        """
        return pulumi.get(self, "healthmonitors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Specifies the IP address version supported by the pool.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> _builtins.str:
        """
        Specifies the load balancing algorithm used by the load balancer to route requests
        to backend servers in the associated pool. Value options:
        + **ROUND_ROBIN**: weighted round robin.
        + **LEAST_CONNECTIONS**: weighted least connections.
        + **SOURCE_IP**: source IP hash.
        + **QUIC_CID**: connection ID.
        """
        return pulumi.get(self, "lb_algorithm")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolListenerResult']:
        """
        The IDs of the listeners with which the active-standby pool is associated.
        The listeners structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolLoadbalancerResult']:
        """
        The IDs of the load balancers with which the active-standby pool is associated.
        The loadbalancers structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolMemberResult']:
        """
        The backend servers in the active-standby pool.
        The members structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the active-standby pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol used by the active-standby pool to receive requests from the
        load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="quicCidHashStrategies")
    def quic_cid_hash_strategies(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolQuicCidHashStrategyResult']:
        """
        The multi-path distribution configuration based on destination connection IDs.
        The quic_cid_hash_strategy structure is documented below.
        """
        return pulumi.get(self, "quic_cid_hash_strategies")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the active-standby pool.
        The valid values are as follows:
        + **instance**: Any type of backend servers can be added.
        + **ip**: Only IP as backend servers can be added.

        If the `type` is empty, any type of backend servers can be added.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the backend server group was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC where the active-standby pool works.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetActiveStandbyPoolsPoolHealthmonitorResult(dict):
    def __init__(__self__, *,
                 delay: _builtins.int,
                 domain_name: _builtins.str,
                 expected_codes: _builtins.str,
                 http_method: _builtins.str,
                 id: _builtins.str,
                 max_retries: _builtins.int,
                 max_retries_down: _builtins.int,
                 monitor_port: _builtins.int,
                 name: _builtins.str,
                 timeout: _builtins.int,
                 type: _builtins.str,
                 url_path: _builtins.str):
        """
        :param _builtins.int delay: The interval between health checks, in seconds.
        :param _builtins.str domain_name: The domain name that HTTP requests are sent to during the health check.
        :param _builtins.str expected_codes: The expected HTTP status code.
        :param _builtins.str http_method: The HTTP method.
        :param _builtins.str id: The health check ID.
        :param _builtins.int max_retries: The number of consecutive health checks when the health check result of a backend server changes from
               **OFFLINE** to **ONLINE**.
        :param _builtins.int max_retries_down: The number of consecutive health checks when the health check result of a backend server changes
               from **ONLINE** to **OFFLINE**.
        :param _builtins.int monitor_port: The port used for the health check.
        :param _builtins.str name: Specifies the name of the active-standby pool.
        :param _builtins.int timeout: The maximum time required for waiting for a response from the health check, in seconds.
        :param _builtins.str type: Specifies the type of the active-standby pool.
               The valid values are as follows:
               + **instance**: Any type of backend servers can be added.
               + **ip**: Only IP as backend servers can be added.
               
               If the `type` is empty, any type of backend servers can be added.
        :param _builtins.str url_path: The HTTP request path for the health check.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "expected_codes", expected_codes)
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "max_retries_down", max_retries_down)
        pulumi.set(__self__, "monitor_port", monitor_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_path", url_path)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> _builtins.int:
        """
        The interval between health checks, in seconds.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name that HTTP requests are sent to during the health check.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> _builtins.str:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "expected_codes")

    @_builtins.property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> _builtins.str:
        """
        The HTTP method.
        """
        return pulumi.get(self, "http_method")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        The number of consecutive health checks when the health check result of a backend server changes from
        **OFFLINE** to **ONLINE**.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter(name="maxRetriesDown")
    def max_retries_down(self) -> _builtins.int:
        """
        The number of consecutive health checks when the health check result of a backend server changes
        from **ONLINE** to **OFFLINE**.
        """
        return pulumi.get(self, "max_retries_down")

    @_builtins.property
    @pulumi.getter(name="monitorPort")
    def monitor_port(self) -> _builtins.int:
        """
        The port used for the health check.
        """
        return pulumi.get(self, "monitor_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the active-standby pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The maximum time required for waiting for a response from the health check, in seconds.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the active-standby pool.
        The valid values are as follows:
        + **instance**: Any type of backend servers can be added.
        + **ip**: Only IP as backend servers can be added.

        If the `type` is empty, any type of backend servers can be added.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> _builtins.str:
        """
        The HTTP request path for the health check.
        """
        return pulumi.get(self, "url_path")


@pulumi.output_type
class GetActiveStandbyPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The health check ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetActiveStandbyPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The health check ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetActiveStandbyPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 ip_version: _builtins.str,
                 member_type: _builtins.str,
                 name: _builtins.str,
                 operating_status: _builtins.str,
                 protocol_port: _builtins.int,
                 reasons: Sequence['outputs.GetActiveStandbyPoolsPoolMemberReasonResult'],
                 role: _builtins.str,
                 statuses: Sequence['outputs.GetActiveStandbyPoolsPoolMemberStatusResult'],
                 subnet_id: _builtins.str):
        """
        :param _builtins.str address: The private IP address bound to the member.
        :param _builtins.str id: The health check ID.
        :param _builtins.str instance_id: The ID of the ECS used as the member.
        :param _builtins.str ip_version: Specifies the IP address version supported by the pool.
        :param _builtins.str member_type: The type of the member.
        :param _builtins.str name: Specifies the name of the active-standby pool.
        :param _builtins.str operating_status: The health status of the backend server. The value can be:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        :param _builtins.int protocol_port: The port used by the member to receive requests.
        :param Sequence['GetActiveStandbyPoolsPoolMemberReasonArgs'] reasons: Why health check fails.
               The reason structure is documented below.
        :param _builtins.str role: The active-standby status of the member.
        :param Sequence['GetActiveStandbyPoolsPoolMemberStatusArgs'] statuses: The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
               status is not specified, operating_status of member takes precedence.
               The status structure is documented below.
        :param _builtins.str subnet_id: The ID of the IPv4 or IPv6 subnet where the member resides.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "reasons", reasons)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        The private IP address bound to the member.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the ECS used as the member.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Specifies the IP address version supported by the pool.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> _builtins.str:
        """
        The type of the member.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the active-standby pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        The health status of the backend server. The value can be:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> _builtins.int:
        """
        The port used by the member to receive requests.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolMemberReasonResult']:
        """
        Why health check fails.
        The reason structure is documented below.
        """
        return pulumi.get(self, "reasons")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The active-standby status of the member.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolMemberStatusResult']:
        """
        The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
        status is not specified, operating_status of member takes precedence.
        The status structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the IPv4 or IPv6 subnet where the member resides.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetActiveStandbyPoolsPoolMemberReasonResult(dict):
    def __init__(__self__, *,
                 expected_response: _builtins.str,
                 healthcheck_response: _builtins.str,
                 reason_code: _builtins.str):
        """
        :param _builtins.str expected_response: The expected HTTP status code. This parameter will take effect only when `type` is set to **HTTP**,
               **HTTPS** or **GRPC**.
               + A specific status code. If `type` is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set
               to other values, the status code ranges from **200** to **599**.
               + A list of status codes that are separated with commas (,). A maximum of five status codes are supported.
               + A status code range. Different ranges are separated with commas (,). A maximum of five ranges are supported.
        :param _builtins.str healthcheck_response: The returned HTTP status code in the response. This parameter will take effect only when `type`
               is set to **HTTP**, **HTTPS** or **GRPC**.
               + A specific status code. If type is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set to
               other values, the status code ranges from **200** to **599**.
        :param _builtins.str reason_code: The code of the health check failures. The value can be:
               + **CONNECT_TIMEOUT**: The connection with the backend server times out during a health check.
               + **CONNECT_REFUSED**: The load balancer rejects connections with the backend server during a health check.
               + **CONNECT_FAILED**: The load balancer fails to establish connections with the backend server during a health check.
               + **CONNECT_INTERRUPT**: The load balancer is disconnected from the backend server during a health check.
               + **SSL_HANDSHAKE_ERROR**: The SSL handshakes with the backend server fail during a health check.
               + **RECV_RESPONSE_FAILED**: The load balancer fails to receive responses from the backend server during a health check.
               + **RECV_RESPONSE_TIMEOUT**: The load balancer does not receive responses from the backend server within the timeout
               duration during a health check.
               + **SEND_REQUEST_FAILED**: The load balancer fails to send a health check request to the backend server during a health
               check.
               + **SEND_REQUEST_TIMEOUT**: The load balancer fails to send a health check request to the backend server within the
               timeout duration.
               + **RESPONSE_FORMAT_ERROR**: The load balancer receives invalid responses from the backend server during a health check.
               + **RESPONSE_MISMATCH**: The response code received from the backend server is different from the preset code.
        """
        pulumi.set(__self__, "expected_response", expected_response)
        pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> _builtins.str:
        """
        The expected HTTP status code. This parameter will take effect only when `type` is set to **HTTP**,
        **HTTPS** or **GRPC**.
        + A specific status code. If `type` is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set
        to other values, the status code ranges from **200** to **599**.
        + A list of status codes that are separated with commas (,). A maximum of five status codes are supported.
        + A status code range. Different ranges are separated with commas (,). A maximum of five ranges are supported.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> _builtins.str:
        """
        The returned HTTP status code in the response. This parameter will take effect only when `type`
        is set to **HTTP**, **HTTPS** or **GRPC**.
        + A specific status code. If type is set to **GRPC**, the status code ranges from **0** to **99**. If `type` is set to
        other values, the status code ranges from **200** to **599**.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> _builtins.str:
        """
        The code of the health check failures. The value can be:
        + **CONNECT_TIMEOUT**: The connection with the backend server times out during a health check.
        + **CONNECT_REFUSED**: The load balancer rejects connections with the backend server during a health check.
        + **CONNECT_FAILED**: The load balancer fails to establish connections with the backend server during a health check.
        + **CONNECT_INTERRUPT**: The load balancer is disconnected from the backend server during a health check.
        + **SSL_HANDSHAKE_ERROR**: The SSL handshakes with the backend server fail during a health check.
        + **RECV_RESPONSE_FAILED**: The load balancer fails to receive responses from the backend server during a health check.
        + **RECV_RESPONSE_TIMEOUT**: The load balancer does not receive responses from the backend server within the timeout
        duration during a health check.
        + **SEND_REQUEST_FAILED**: The load balancer fails to send a health check request to the backend server during a health
        check.
        + **SEND_REQUEST_TIMEOUT**: The load balancer fails to send a health check request to the backend server within the
        timeout duration.
        + **RESPONSE_FORMAT_ERROR**: The load balancer receives invalid responses from the backend server during a health check.
        + **RESPONSE_MISMATCH**: The response code received from the backend server is different from the preset code.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class GetActiveStandbyPoolsPoolMemberStatusResult(dict):
    def __init__(__self__, *,
                 listener_id: _builtins.str,
                 operating_status: _builtins.str):
        """
        :param _builtins.str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
        :param _builtins.str operating_status: The health status of the backend server. The value can be:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "operating_status", operating_status)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        """
        Specifies the ID of the listener to which the forwarding policy is added.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        The health status of the backend server. The value can be:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")


@pulumi.output_type
class GetActiveStandbyPoolsPoolQuicCidHashStrategyResult(dict):
    def __init__(__self__, *,
                 len: _builtins.int,
                 offset: _builtins.int):
        """
        :param _builtins.int len: The length of the hash factor in the connection ID, in byte.
        :param _builtins.int offset: The start position in the connection ID as the hash factor, in byte.
        """
        pulumi.set(__self__, "len", len)
        pulumi.set(__self__, "offset", offset)

    @_builtins.property
    @pulumi.getter
    def len(self) -> _builtins.int:
        """
        The length of the hash factor in the connection ID, in byte.
        """
        return pulumi.get(self, "len")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.int:
        """
        The start position in the connection ID as the hash factor, in byte.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetAllMembersMemberResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 ip_version: _builtins.str,
                 loadbalancer_id: _builtins.str,
                 member_type: _builtins.str,
                 name: _builtins.str,
                 operating_status: _builtins.str,
                 pool_id: _builtins.str,
                 project_id: _builtins.str,
                 protocol_port: _builtins.int,
                 reasons: Sequence['outputs.GetAllMembersMemberReasonResult'],
                 statuses: Sequence['outputs.GetAllMembersMemberStatusResult'],
                 subnet_cidr_id: _builtins.str,
                 updated_at: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str address: Specifies the IP address of the backend server.
               Multiple IP addresses can be queried.
        :param _builtins.str created_at: Indicates the time when a backend server was added.
        :param _builtins.str id: Indicates the backend server ID.
        :param _builtins.str instance_id: Indicates the ID of the instance associated with the backend server.
        :param _builtins.str ip_version: Specifies the IP address version supported by the backend server group.
               The value can be **v4** or **v6**.
               Multiple versions can be queried.
        :param _builtins.str loadbalancer_id: Specifies the ID of the load balancer with which the load balancer is associated.
               Multiple IDs can be queried.
        :param _builtins.str member_type: Indicates the type of the backend server.
        :param _builtins.str name: Specifies the backend server name.
               Multiple IDs can be queried.
        :param _builtins.str operating_status: Specifies the operating status of the backend server.
               Value options:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
               Multiple statuses can be queried.
        :param _builtins.str pool_id: Specifies the ID of the backend server group to which the backend server belongs.
               Multiple IDs can be queried.
        :param _builtins.str project_id: Indicates the ID of the project where the backend server is used.
        :param _builtins.int protocol_port: Specifies the port used by the backend servers.
               Multiple ports can be queried.
        :param Sequence['GetAllMembersMemberReasonArgs'] reasons: Indicates why health check fails.
        :param Sequence['GetAllMembersMemberStatusArgs'] statuses: Indicates the health status of the backend server.
        :param _builtins.str subnet_cidr_id: Specifies the ID of the subnet where the backend server works.
               Multiple IDs can be queried.
        :param _builtins.str updated_at: Indicates the time when a backend server was updated.
        :param _builtins.int weight: Specifies the weight of the backend server.
               Multiple weights can be queried.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "reasons", reasons)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "subnet_cidr_id", subnet_cidr_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Specifies the IP address of the backend server.
        Multiple IP addresses can be queried.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time when a backend server was added.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the backend server ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the ID of the instance associated with the backend server.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Specifies the IP address version supported by the backend server group.
        The value can be **v4** or **v6**.
        Multiple versions can be queried.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> _builtins.str:
        """
        Specifies the ID of the load balancer with which the load balancer is associated.
        Multiple IDs can be queried.
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> _builtins.str:
        """
        Indicates the type of the backend server.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend server name.
        Multiple IDs can be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        Specifies the operating status of the backend server.
        Value options:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        Multiple statuses can be queried.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        Specifies the ID of the backend server group to which the backend server belongs.
        Multiple IDs can be queried.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the ID of the project where the backend server is used.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> _builtins.int:
        """
        Specifies the port used by the backend servers.
        Multiple ports can be queried.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Sequence['outputs.GetAllMembersMemberReasonResult']:
        """
        Indicates why health check fails.
        """
        return pulumi.get(self, "reasons")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetAllMembersMemberStatusResult']:
        """
        Indicates the health status of the backend server.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="subnetCidrId")
    def subnet_cidr_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet where the backend server works.
        Multiple IDs can be queried.
        """
        return pulumi.get(self, "subnet_cidr_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the time when a backend server was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight of the backend server.
        Multiple weights can be queried.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAllMembersMemberReasonResult(dict):
    def __init__(__self__, *,
                 expected_response: _builtins.str,
                 healthcheck_response: _builtins.str,
                 reason_code: _builtins.str):
        """
        :param _builtins.str expected_response: Indicates the expected HTTP status code.
        :param _builtins.str healthcheck_response: Indicates the returned HTTP status code in the response.
        :param _builtins.str reason_code: Indicates the code of the health check failures.
        """
        pulumi.set(__self__, "expected_response", expected_response)
        pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> _builtins.str:
        """
        Indicates the expected HTTP status code.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> _builtins.str:
        """
        Indicates the returned HTTP status code in the response.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> _builtins.str:
        """
        Indicates the code of the health check failures.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class GetAllMembersMemberStatusResult(dict):
    def __init__(__self__, *,
                 listener_id: _builtins.str,
                 operating_status: _builtins.str,
                 reasons: Sequence['outputs.GetAllMembersMemberStatusReasonResult']):
        """
        :param _builtins.str listener_id: Indicates the listener ID.
        :param _builtins.str operating_status: Specifies the operating status of the backend server.
               Value options:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
               Multiple statuses can be queried.
        :param Sequence['GetAllMembersMemberStatusReasonArgs'] reasons: Indicates why health check fails.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "reasons", reasons)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        """
        Indicates the listener ID.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        Specifies the operating status of the backend server.
        Value options:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        Multiple statuses can be queried.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Sequence['outputs.GetAllMembersMemberStatusReasonResult']:
        """
        Indicates why health check fails.
        """
        return pulumi.get(self, "reasons")


@pulumi.output_type
class GetAllMembersMemberStatusReasonResult(dict):
    def __init__(__self__, *,
                 expected_response: _builtins.str,
                 healthcheck_response: _builtins.str,
                 reason_code: _builtins.str):
        """
        :param _builtins.str expected_response: Indicates the expected HTTP status code.
        :param _builtins.str healthcheck_response: Indicates the returned HTTP status code in the response.
        :param _builtins.str reason_code: Indicates the code of the health check failures.
        """
        pulumi.set(__self__, "expected_response", expected_response)
        pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> _builtins.str:
        """
        Indicates the expected HTTP status code.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> _builtins.str:
        """
        Indicates the returned HTTP status code in the response.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> _builtins.str:
        """
        Indicates the code of the health check failures.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 lists: Sequence['outputs.GetAvailabilityZonesAvailabilityZoneListResult']):
        """
        :param Sequence['GetAvailabilityZonesAvailabilityZoneListArgs'] lists: Indicates the AZs list.
               The list structure is documented below.
        """
        pulumi.set(__self__, "lists", lists)

    @_builtins.property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetAvailabilityZonesAvailabilityZoneListResult']:
        """
        Indicates the AZs list.
        The list structure is documented below.
        """
        return pulumi.get(self, "lists")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneListResult(dict):
    def __init__(__self__, *,
                 category: _builtins.int,
                 code: _builtins.str,
                 protocols: Sequence[_builtins.str],
                 public_border_group: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.int category: Indicates the AZ code. The value can be:
               + **0**: indicates center.
               + **21**: indicates homezone.
        :param _builtins.str code: Indicates the AZ code.
        :param Sequence[_builtins.str] protocols: Indicates the type of the flavor that is not sold out. The value can be:
               + **L4**: indicates the flavor at Layer 4 (flavor for network load balancing).
               + **L7**: indicates the flavor at Layer 7 (flavor for application load balancing).
        :param _builtins.str public_border_group: Specifies the public border group.
        :param _builtins.str state: Indicates the AZ status. The value can only be **ACTIVE**.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.int:
        """
        Indicates the AZ code. The value can be:
        + **0**: indicates center.
        + **21**: indicates homezone.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the AZ code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.str]:
        """
        Indicates the type of the flavor that is not sold out. The value can be:
        + **L4**: indicates the flavor at Layer 4 (flavor for network load balancing).
        + **L7**: indicates the flavor at Layer 7 (flavor for application load balancing).
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the public border group.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the AZ status. The value can only be **ACTIVE**.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFeatureConfigurationsConfigResult(dict):
    def __init__(__self__, *,
                 caller: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 feature: _builtins.str,
                 id: _builtins.str,
                 service: _builtins.str,
                 switch: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str caller: Indicates the configuration creator.
        :param _builtins.str created_at: Indicates the creation time.
        :param _builtins.str description: Indicates the feature configuration description.
        :param _builtins.str feature: Specifies the feature name.
        :param _builtins.str id: Indicates the ID of the configuration.
        :param _builtins.str service: Indicates the service. The value is fixed at **ELB**.
        :param _builtins.bool switch: Indicates whether to enable feature configuration.
               The value can be:
               + **true**: The feature configuration has taken effect.
               + **false**: The feature configuration does not take effect.
        :param _builtins.str type: Indicates the type of the feature configuration value.
        :param _builtins.str updated_at: Indicates the update time.
        :param _builtins.str value: Indicates the feature configuration value.
               For example, the value **true** or **false** indicates that the feature is enabled or disabled.
               The feature value of the quota is an integer, indicating that the quota is limited.
        """
        pulumi.set(__self__, "caller", caller)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "switch", switch)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def caller(self) -> _builtins.str:
        """
        Indicates the configuration creator.
        """
        return pulumi.get(self, "caller")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the feature configuration description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def feature(self) -> _builtins.str:
        """
        Specifies the feature name.
        """
        return pulumi.get(self, "feature")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Indicates the service. The value is fixed at **ELB**.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def switch(self) -> _builtins.bool:
        """
        Indicates whether to enable feature configuration.
        The value can be:
        + **true**: The feature configuration has taken effect.
        + **false**: The feature configuration does not take effect.
        """
        return pulumi.get(self, "switch")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the feature configuration value.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the feature configuration value.
        For example, the value **true** or **false** indicates that the feature is enabled or disabled.
        The feature value of the quota is an integer, indicating that the quota is limited.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 category: _builtins.int,
                 cps: _builtins.int,
                 flavor_sold_out: _builtins.bool,
                 https_cps: _builtins.int,
                 id: _builtins.str,
                 lcu: _builtins.int,
                 max_connections: _builtins.int,
                 name: _builtins.str,
                 public_border_group: _builtins.str,
                 qps: _builtins.int,
                 shared: _builtins.bool,
                 type: _builtins.str):
        """
        :param _builtins.int bandwidth: Specifies the bandwidth size(Mbit/s) in the flavor.
        :param _builtins.int category: Specifies the category.
        :param _builtins.int cps: Specifies the cps in the flavor.
        :param _builtins.bool flavor_sold_out: Specifies whether the flavor is available.
               + **true**: indicates the flavor is unavailable.
               + **false**: indicates the flavor is available.
        :param _builtins.int https_cps: Indicates the number of new HTTPS connections.
        :param _builtins.str id: Indicates the ID of the flavor.
        :param _builtins.int lcu: Indicates the number of LCUs in the flavor.
        :param _builtins.int max_connections: Specifies the maximum connections in the flavor.
        :param _builtins.str name: Specifies the flavor name.
        :param _builtins.str public_border_group: Specifies the public border group.
        :param _builtins.int qps: Specifies the qps in the L7 flavor.
        :param _builtins.bool shared: Specifies whether the flavor is available to all users. Value options:
               + **true**: indicates that the flavor is available to all users.
               + **false**: indicates that the flavor is available only to a specific user.
        :param _builtins.str type: Specifies the flavor type. Values options:
               + **L4**: indicates Layer-4 flavor.
               + **L7**: indicates Layer-7 flavor.
               + **L4_elastic**: indicates minimum Layer-4 flavor for elastic scaling.
               + **L7_elastic**: indicates minimum Layer-7 flavor for elastic scaling.
               + **L4_elastic_max**: indicates maximum Layer-4 flavor for elastic scaling.
               + **L7_elastic_max**: indicates maximum Layer-7 flavor for elastic scaling
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cps", cps)
        pulumi.set(__self__, "flavor_sold_out", flavor_sold_out)
        pulumi.set(__self__, "https_cps", https_cps)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lcu", lcu)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "shared", shared)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Specifies the bandwidth size(Mbit/s) in the flavor.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.int:
        """
        Specifies the category.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def cps(self) -> _builtins.int:
        """
        Specifies the cps in the flavor.
        """
        return pulumi.get(self, "cps")

    @_builtins.property
    @pulumi.getter(name="flavorSoldOut")
    def flavor_sold_out(self) -> _builtins.bool:
        """
        Specifies whether the flavor is available.
        + **true**: indicates the flavor is unavailable.
        + **false**: indicates the flavor is available.
        """
        return pulumi.get(self, "flavor_sold_out")

    @_builtins.property
    @pulumi.getter(name="httpsCps")
    def https_cps(self) -> _builtins.int:
        """
        Indicates the number of new HTTPS connections.
        """
        return pulumi.get(self, "https_cps")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lcu(self) -> _builtins.int:
        """
        Indicates the number of LCUs in the flavor.
        """
        return pulumi.get(self, "lcu")

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> _builtins.int:
        """
        Specifies the maximum connections in the flavor.
        """
        return pulumi.get(self, "max_connections")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the flavor name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the public border group.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.int:
        """
        Specifies the qps in the L7 flavor.
        """
        return pulumi.get(self, "qps")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> _builtins.bool:
        """
        Specifies whether the flavor is available to all users. Value options:
        + **true**: indicates that the flavor is available to all users.
        + **false**: indicates that the flavor is available only to a specific user.
        """
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the flavor type. Values options:
        + **L4**: indicates Layer-4 flavor.
        + **L7**: indicates Layer-7 flavor.
        + **L4_elastic**: indicates minimum Layer-4 flavor for elastic scaling.
        + **L7_elastic**: indicates minimum Layer-7 flavor for elastic scaling.
        + **L4_elastic_max**: indicates maximum Layer-4 flavor for elastic scaling.
        + **L7_elastic_max**: indicates maximum Layer-7 flavor for elastic scaling
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpgroupsIpgroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 ip_lists: Sequence['outputs.GetIpgroupsIpgroupIpListResult'],
                 listeners: Sequence['outputs.GetIpgroupsIpgroupListenerResult'],
                 name: _builtins.str,
                 project_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The time when the IP address group was created.
        :param _builtins.str description: Specifies the description of the IP address group.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str id: The listener ID.
        :param Sequence['GetIpgroupsIpgroupIpListArgs'] ip_lists: The IP addresses or CIDR blocks in the IP address group. The ip_list structure is
               documented below.
        :param Sequence['GetIpgroupsIpgroupListenerArgs'] listeners: The IDs of listeners with which the IP address group is associated. The listeners
               structure is documented below.
        :param _builtins.str name: Specifies the name of the IP address group.
        :param _builtins.str project_id: The project ID of the IP address group.
        :param _builtins.str updated_at: The time when the IP address group was updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the IP address group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the IP address group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence['outputs.GetIpgroupsIpgroupIpListResult']:
        """
        The IP addresses or CIDR blocks in the IP address group. The ip_list structure is
        documented below.
        """
        return pulumi.get(self, "ip_lists")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetIpgroupsIpgroupListenerResult']:
        """
        The IDs of listeners with which the IP address group is associated. The listeners
        structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the IP address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the IP address group.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the IP address group was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetIpgroupsIpgroupIpListResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 ip: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the IP address group.
        :param _builtins.str ip: The IP addresses.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the IP address group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP addresses.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetIpgroupsIpgroupListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetL7policiesL7policyResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 fixed_response_configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigResult'],
                 id: _builtins.str,
                 listener_id: _builtins.str,
                 name: _builtins.str,
                 priority: _builtins.int,
                 provisioning_status: _builtins.str,
                 redirect_listener_id: _builtins.str,
                 redirect_pool_id: _builtins.str,
                 redirect_pools_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsConfigResult'],
                 redirect_pools_extend_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigResult'],
                 redirect_pools_sticky_session_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsStickySessionConfigResult'],
                 redirect_url_configs: Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigResult'],
                 rules: Sequence['outputs.GetL7policiesL7policyRuleResult'],
                 updated_at: _builtins.str):
        """
        :param _builtins.str action: Specifies the requests are forwarded. The value can be one of the following:
               + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
               + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
               + **REDIRECT_TO_URL**: Requests are redirected to another URL.
               + **FIXED_RESPONSE**: A fixed response body is returned.
        :param _builtins.str created_at: The time when the forwarding policy was created.
        :param _builtins.str description: Specifies the supplementary information about the forwarding policy.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param Sequence['GetL7policiesL7policyFixedResponseConfigArgs'] fixed_response_configs: The configuration of the page that will be returned.
               The fixed_response_config structure is documented below.
        :param _builtins.str id: The forwarding rule ID.
        :param _builtins.str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
        :param _builtins.str name: Specifies the forwarding policy name.
        :param _builtins.int priority: Specifies the forwarding policy priority.
        :param _builtins.str provisioning_status: Specifies the provisioning status of the forwarding policy.
        :param _builtins.str redirect_listener_id: Specifies the ID of the listener to which requests are redirected.
        :param _builtins.str redirect_pool_id: Specifies the ID of the backend server group to which requests will be forwarded.
        :param Sequence['GetL7policiesL7policyRedirectPoolsConfigArgs'] redirect_pools_configs: The list of the backend server groups to which traffic is forwarded.
               The redirect_pools_config structure is documented below.
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigArgs'] redirect_pools_extend_configs: The backend server group that the requests are forwarded to.
               The redirect_pools_extend_config structure is documented below.
        :param Sequence['GetL7policiesL7policyRedirectPoolsStickySessionConfigArgs'] redirect_pools_sticky_session_configs: The session persistence between backend server groups which associated with
               the policy.
               The redirect_pools_sticky_session_config structure is documented
               below.
        :param Sequence['GetL7policiesL7policyRedirectUrlConfigArgs'] redirect_url_configs: The URL to which requests are forwarded.
               The redirect_url_config structure is documented below.
        :param Sequence['GetL7policiesL7policyRuleArgs'] rules: The forwarding rules in the forwarding policy.
               The rules structure is documented below.
        :param _builtins.str updated_at: The time when the forwarding policy was updated.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "fixed_response_configs", fixed_response_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        pulumi.set(__self__, "redirect_listener_id", redirect_listener_id)
        pulumi.set(__self__, "redirect_pool_id", redirect_pool_id)
        pulumi.set(__self__, "redirect_pools_configs", redirect_pools_configs)
        pulumi.set(__self__, "redirect_pools_extend_configs", redirect_pools_extend_configs)
        pulumi.set(__self__, "redirect_pools_sticky_session_configs", redirect_pools_sticky_session_configs)
        pulumi.set(__self__, "redirect_url_configs", redirect_url_configs)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Specifies the requests are forwarded. The value can be one of the following:
        + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
        + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
        + **REDIRECT_TO_URL**: Requests are redirected to another URL.
        + **FIXED_RESPONSE**: A fixed response body is returned.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the forwarding policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the supplementary information about the forwarding policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fixedResponseConfigs")
    def fixed_response_configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigResult']:
        """
        The configuration of the page that will be returned.
        The fixed_response_config structure is documented below.
        """
        return pulumi.get(self, "fixed_response_configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The forwarding rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        """
        Specifies the ID of the listener to which the forwarding policy is added.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the forwarding policy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Specifies the forwarding policy priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        """
        Specifies the provisioning status of the forwarding policy.
        """
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="redirectListenerId")
    def redirect_listener_id(self) -> _builtins.str:
        """
        Specifies the ID of the listener to which requests are redirected.
        """
        return pulumi.get(self, "redirect_listener_id")

    @_builtins.property
    @pulumi.getter(name="redirectPoolId")
    def redirect_pool_id(self) -> _builtins.str:
        """
        Specifies the ID of the backend server group to which requests will be forwarded.
        """
        return pulumi.get(self, "redirect_pool_id")

    @_builtins.property
    @pulumi.getter(name="redirectPoolsConfigs")
    def redirect_pools_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsConfigResult']:
        """
        The list of the backend server groups to which traffic is forwarded.
        The redirect_pools_config structure is documented below.
        """
        return pulumi.get(self, "redirect_pools_configs")

    @_builtins.property
    @pulumi.getter(name="redirectPoolsExtendConfigs")
    def redirect_pools_extend_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigResult']:
        """
        The backend server group that the requests are forwarded to.
        The redirect_pools_extend_config structure is documented below.
        """
        return pulumi.get(self, "redirect_pools_extend_configs")

    @_builtins.property
    @pulumi.getter(name="redirectPoolsStickySessionConfigs")
    def redirect_pools_sticky_session_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsStickySessionConfigResult']:
        """
        The session persistence between backend server groups which associated with
        the policy.
        The redirect_pools_sticky_session_config structure is documented
        below.
        """
        return pulumi.get(self, "redirect_pools_sticky_session_configs")

    @_builtins.property
    @pulumi.getter(name="redirectUrlConfigs")
    def redirect_url_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigResult']:
        """
        The URL to which requests are forwarded.
        The redirect_url_config structure is documented below.
        """
        return pulumi.get(self, "redirect_url_configs")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetL7policiesL7policyRuleResult']:
        """
        The forwarding rules in the forwarding policy.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the forwarding policy was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigResult(dict):
    def __init__(__self__, *,
                 content_type: _builtins.str,
                 insert_headers_configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigResult'],
                 message_body: _builtins.str,
                 remove_headers_configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigResult'],
                 status_code: _builtins.str,
                 traffic_limit_configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigTrafficLimitConfigResult']):
        """
        :param _builtins.str content_type: The format of the response body.
        :param Sequence['GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigArgs'] insert_headers_configs: (Optional, List) The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param _builtins.str message_body: The content of the response message body.
        :param Sequence['GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigArgs'] remove_headers_configs: (Optional, List) The header parameters to be removed.
               The remove_headers_config structure is documented below.
        :param _builtins.str status_code: The HTTP status code configured in the forwarding policy.
        :param Sequence['GetL7policiesL7policyFixedResponseConfigTrafficLimitConfigArgs'] traffic_limit_configs: (Optional, List) The traffic limit config of the policy.
               The traffic_limit_config structure is documented below.
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "insert_headers_configs", insert_headers_configs)
        pulumi.set(__self__, "message_body", message_body)
        pulumi.set(__self__, "remove_headers_configs", remove_headers_configs)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "traffic_limit_configs", traffic_limit_configs)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        """
        The format of the response body.
        """
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfigs")
    def insert_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_configs")

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> _builtins.str:
        """
        The content of the response message body.
        """
        return pulumi.get(self, "message_body")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfigs")
    def remove_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_configs")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The HTTP status code configured in the forwarding policy.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfigs")
    def traffic_limit_configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigTrafficLimitConfigResult']:
        """
        (Optional, List) The traffic limit config of the policy.
        The traffic_limit_config structure is documented below.
        """
        return pulumi.get(self, "traffic_limit_configs")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigInsertHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        :param _builtins.str value: The value of the parameter.
        :param _builtins.str value_type: The value type of the parameter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigRemoveHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetL7policiesL7policyFixedResponseConfigTrafficLimitConfigResult(dict):
    def __init__(__self__, *,
                 burst: _builtins.int,
                 per_source_ip_qps: _builtins.int,
                 qps: _builtins.int):
        """
        :param _builtins.int burst: (The qps buffer.
        :param _builtins.int per_source_ip_qps: The single source qps of the policy.
        :param _builtins.int qps: The overall qps of the policy.
        """
        pulumi.set(__self__, "burst", burst)
        pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> _builtins.int:
        """
        (The qps buffer.
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> _builtins.int:
        """
        The single source qps of the policy.
        """
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.int:
        """
        The overall qps of the policy.
        """
        return pulumi.get(self, "qps")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsConfigResult(dict):
    def __init__(__self__, *,
                 pool_id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str pool_id: The ID of the backend server group.
        :param _builtins.int weight: The weight of the backend server group.
        """
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        The ID of the backend server group.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        The weight of the backend server group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigResult(dict):
    def __init__(__self__, *,
                 insert_headers_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigResult'],
                 remove_headers_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigResult'],
                 rewrite_url_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRewriteUrlConfigResult'],
                 rewrite_url_enabled: _builtins.bool,
                 traffic_limit_configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigTrafficLimitConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigArgs'] insert_headers_configs: (Optional, List) The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigArgs'] remove_headers_configs: (Optional, List) The header parameters to be removed.
               The remove_headers_config structure is documented below.
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigRewriteUrlConfigArgs'] rewrite_url_configs: The URL for the backend server group that requests are forwarded to.
               The rewrite_url_config structure is documented below.
        :param _builtins.bool rewrite_url_enabled: Whether to enable URL redirection.
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigTrafficLimitConfigArgs'] traffic_limit_configs: (Optional, List) The traffic limit config of the policy.
               The traffic_limit_config structure is documented below.
        """
        pulumi.set(__self__, "insert_headers_configs", insert_headers_configs)
        pulumi.set(__self__, "remove_headers_configs", remove_headers_configs)
        pulumi.set(__self__, "rewrite_url_configs", rewrite_url_configs)
        pulumi.set(__self__, "rewrite_url_enabled", rewrite_url_enabled)
        pulumi.set(__self__, "traffic_limit_configs", traffic_limit_configs)

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfigs")
    def insert_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_configs")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfigs")
    def remove_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_configs")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlConfigs")
    def rewrite_url_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRewriteUrlConfigResult']:
        """
        The URL for the backend server group that requests are forwarded to.
        The rewrite_url_config structure is documented below.
        """
        return pulumi.get(self, "rewrite_url_configs")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlEnabled")
    def rewrite_url_enabled(self) -> _builtins.bool:
        """
        Whether to enable URL redirection.
        """
        return pulumi.get(self, "rewrite_url_enabled")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfigs")
    def traffic_limit_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigTrafficLimitConfigResult']:
        """
        (Optional, List) The traffic limit config of the policy.
        The traffic_limit_config structure is documented below.
        """
        return pulumi.get(self, "traffic_limit_configs")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        :param _builtins.str value: The value of the parameter.
        :param _builtins.str value_type: The value type of the parameter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigRewriteUrlConfigResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 path: _builtins.str,
                 query: _builtins.str):
        """
        :param _builtins.str host: The url host.
        :param _builtins.str path: The URL path.
        :param _builtins.str query: The URL query character string.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "query", query)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The url host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def query(self) -> _builtins.str:
        """
        The URL query character string.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsExtendConfigTrafficLimitConfigResult(dict):
    def __init__(__self__, *,
                 burst: _builtins.int,
                 per_source_ip_qps: _builtins.int,
                 qps: _builtins.int):
        """
        :param _builtins.int burst: (The qps buffer.
        :param _builtins.int per_source_ip_qps: The single source qps of the policy.
        :param _builtins.int qps: The overall qps of the policy.
        """
        pulumi.set(__self__, "burst", burst)
        pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> _builtins.int:
        """
        (The qps buffer.
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> _builtins.int:
        """
        The single source qps of the policy.
        """
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.int:
        """
        The overall qps of the policy.
        """
        return pulumi.get(self, "qps")


@pulumi.output_type
class GetL7policiesL7policyRedirectPoolsStickySessionConfigResult(dict):
    def __init__(__self__, *,
                 enable: _builtins.bool,
                 timeout: _builtins.int):
        """
        :param _builtins.bool enable: Whether enable config session persistence between backend server groups.
        :param _builtins.int timeout: The timeout of the session persistence.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Whether enable config session persistence between backend server groups.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout of the session persistence.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetL7policiesL7policyRedirectUrlConfigResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 insert_headers_configs: Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigResult'],
                 path: _builtins.str,
                 port: _builtins.str,
                 protocol: _builtins.str,
                 query: _builtins.str,
                 remove_headers_configs: Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigResult'],
                 status_code: _builtins.str):
        """
        :param _builtins.str host: The url host.
        :param Sequence['GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigArgs'] insert_headers_configs: (Optional, List) The header parameters to be added.
               The insert_headers_config structure is documented below.
        :param _builtins.str path: The URL path.
        :param _builtins.str port: The port that requests are redirected to.
        :param _builtins.str protocol: The protocol for redirection.The value can be **HTTP**, **HTTPS**, or **${protocol}**.
        :param _builtins.str query: The URL query character string.
        :param Sequence['GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigArgs'] remove_headers_configs: (Optional, List) The header parameters to be removed.
               The remove_headers_config structure is documented below.
        :param _builtins.str status_code: The HTTP status code configured in the forwarding policy.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "insert_headers_configs", insert_headers_configs)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "remove_headers_configs", remove_headers_configs)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The url host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfigs")
    def insert_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be added.
        The insert_headers_config structure is documented below.
        """
        return pulumi.get(self, "insert_headers_configs")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port that requests are redirected to.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol for redirection.The value can be **HTTP**, **HTTPS**, or **${protocol}**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def query(self) -> _builtins.str:
        """
        The URL query character string.
        """
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfigs")
    def remove_headers_configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigResult']:
        """
        (Optional, List) The header parameters to be removed.
        The remove_headers_config structure is documented below.
        """
        return pulumi.get(self, "remove_headers_configs")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The HTTP status code configured in the forwarding policy.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyRedirectUrlConfigInsertHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        :param _builtins.str value: The value of the parameter.
        :param _builtins.str value_type: The value type of the parameter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The value type of the parameter.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigConfigResult']):
        """
        :param Sequence['GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigConfigArgs'] configs: The list of request header parameters to be removed.
               The remove_header_configs structure is documented below.
        """
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigConfigResult']:
        """
        The list of request header parameters to be removed.
        The remove_header_configs structure is documented below.
        """
        return pulumi.get(self, "configs")


@pulumi.output_type
class GetL7policiesL7policyRedirectUrlConfigRemoveHeadersConfigConfigResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        """
        :param _builtins.str key: The parameter name of the removed request header.
        """
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The parameter name of the removed request header.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetL7policiesL7policyRuleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The forwarding rule ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The forwarding rule ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetL7rulesL7ruleResult(dict):
    def __init__(__self__, *,
                 compare_type: _builtins.str,
                 conditions: Sequence['outputs.GetL7rulesL7ruleConditionResult'],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str compare_type: Specifies how requests are matched with the domain names or URL. Values options:
               **EQUAL_TO**, **REGEX**, **STARTS_WITH**.
        :param Sequence['GetL7rulesL7ruleConditionArgs'] conditions: The matching conditions of the forwarding rule. The conditions structure is
               documented below.
        :param _builtins.str created_at: The time when the forwarding rule was created.
        :param _builtins.str id: The ID of the forwarding policy.
        :param _builtins.str type: Specifies the match type. Value options: **HOST_NAME**, **PATH**, **METHOD**, **HEADER**,
               **QUERY_STRING**, **SOURCE_IP**, **COOKIE**.
        :param _builtins.str updated_at: The time when the forwarding rule was updated.
        :param _builtins.str value: Specifies the value of the match content.
        """
        pulumi.set(__self__, "compare_type", compare_type)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> _builtins.str:
        """
        Specifies how requests are matched with the domain names or URL. Values options:
        **EQUAL_TO**, **REGEX**, **STARTS_WITH**.
        """
        return pulumi.get(self, "compare_type")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetL7rulesL7ruleConditionResult']:
        """
        The matching conditions of the forwarding rule. The conditions structure is
        documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the forwarding rule was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the forwarding policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the match type. Value options: **HOST_NAME**, **PATH**, **METHOD**, **HEADER**,
        **QUERY_STRING**, **SOURCE_IP**, **COOKIE**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the forwarding rule was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match content.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetL7rulesL7ruleConditionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of match item.
        :param _builtins.str value: Specifies the value of the match content.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of match item.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match content.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetListenersListenerResult(dict):
    def __init__(__self__, *,
                 advanced_forwarding_enabled: _builtins.bool,
                 ca_certificate: _builtins.str,
                 cps: _builtins.int,
                 created_at: _builtins.str,
                 default_pool_id: _builtins.str,
                 description: _builtins.str,
                 enable_member_retry: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 forward_eip: _builtins.bool,
                 forward_elb: _builtins.bool,
                 forward_host: _builtins.bool,
                 forward_port: _builtins.bool,
                 forward_proto: _builtins.bool,
                 forward_request_port: _builtins.bool,
                 forward_tls_certificate: _builtins.bool,
                 forward_tls_cipher: _builtins.bool,
                 forward_tls_protocol: _builtins.bool,
                 gzip_enable: _builtins.bool,
                 http2_enable: _builtins.bool,
                 id: _builtins.str,
                 idle_timeout: _builtins.int,
                 ipgroups: Sequence['outputs.GetListenersListenerIpgroupResult'],
                 loadbalancer_id: _builtins.str,
                 max_connection: _builtins.int,
                 name: _builtins.str,
                 port_ranges: Sequence['outputs.GetListenersListenerPortRangeResult'],
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 protocol: _builtins.str,
                 protocol_port: _builtins.int,
                 proxy_protocol_enable: _builtins.bool,
                 quic_configs: Sequence['outputs.GetListenersListenerQuicConfigResult'],
                 real_ip: _builtins.bool,
                 request_timeout: _builtins.int,
                 response_timeout: _builtins.int,
                 security_policy_id: _builtins.str,
                 server_certificate: _builtins.str,
                 sni_certificates: Sequence[_builtins.str],
                 sni_match_algo: _builtins.str,
                 ssl_early_data_enable: _builtins.bool,
                 tags: Mapping[str, _builtins.str],
                 tls_ciphers_policy: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.bool advanced_forwarding_enabled: Specifies whether the advanced forwarding is enabled. Value options:
               **true**, **false**.
        :param _builtins.str ca_certificate: Specifies the ID of the CA certificate used by the listener.
        :param _builtins.int cps: The maximum number of new connections that a listener can handle per second.
        :param _builtins.str created_at: The creation time of the listener.
        :param _builtins.str default_pool_id: Specifies the ID of the default pool with which the listener is associated.
        :param _builtins.str description: Specifies the description of the ELB listener.
        :param _builtins.bool enable_member_retry: Specifies whether the health check retries for backend servers is enabled.
               Value options: **true**, **false**.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.bool forward_eip: Whether to transparently transmit the load balancer EIP to backend servers.
        :param _builtins.bool forward_elb: Whether to transfer the load balancer ID to backend servers through the HTTP header of the packet.
        :param _builtins.bool forward_host: Whether to rewrite the X-Forwarded-Host header.
        :param _builtins.bool forward_port: Whether to transparently transmit the listening port of the load balancer to backend servers.
        :param _builtins.bool forward_proto: Whether to transfer the listener protocol of the load balancer to backend servers through the HTTP
               header of the packet.
        :param _builtins.bool forward_request_port: Whether to transparently transmit the source port of the client to backend servers.
        :param _builtins.bool forward_tls_certificate: Whether to transfer the certificate ID of the load balancer to backend servers through the
               HTTP header of the packet.
        :param _builtins.bool forward_tls_cipher: Whether to transfer the algorithm suite of the load balancer to backend servers through the HTTP
               header of the packet.
        :param _builtins.bool forward_tls_protocol: Whether to transfer the algorithm protocol of the load balancer to backend servers through the
               HTTP header of the packet.
        :param _builtins.bool gzip_enable: Whether the gzip compression for a load balancer is enabled.
        :param _builtins.bool http2_enable: Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
        :param _builtins.str id: The listener ID.
        :param _builtins.int idle_timeout: Specifies the idle timeout for the listener.
        :param Sequence['GetListenersListenerIpgroupArgs'] ipgroups: The IP address group associated with the listener.
               The ipgroup structure is documented below.
        :param _builtins.str loadbalancer_id: Specifies the ID of the load balancer that the listener is added to.
        :param _builtins.int max_connection: The maximum number of concurrent connections that a listener can handle per second.
        :param _builtins.str name: Specifies the name of the ELB listener.
        :param Sequence['GetListenersListenerPortRangeArgs'] port_ranges: The port range, including the start and end port numbers.
               The port_ranges structure is documented below.
        :param _builtins.str protection_reason: The reason for update protection.
        :param _builtins.str protection_status: Specifies the protection status.
        :param _builtins.str protocol: Specifies the protocol of the ELB listener. Value options:
               **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
        :param _builtins.int protocol_port: Specifies the port used by the listener.
        :param _builtins.bool proxy_protocol_enable: Specifies whether the proxy protocol option to pass the source IP addresses
               of the clients to backend servers is enabled. Value options: **true**, **false**.
        :param Sequence['GetListenersListenerQuicConfigArgs'] quic_configs: The QUIC configuration for the current listener.
               The quic_config structure is documented below.
        :param _builtins.bool real_ip: Whether to transfer the source IP address of the client to backend servers through the HTTP header of the
               packet.
        :param _builtins.int request_timeout: Specifies the request timeout for the listener. Value range: **1** to **300**.
        :param _builtins.int response_timeout: Specifies the response timeout for the listener.
        :param _builtins.str security_policy_id: The ID of the custom security policy.
        :param _builtins.str server_certificate: Specifies the ID of the server certificate used by the listener.
        :param Sequence[_builtins.str] sni_certificates: The IDs of SNI certificates (server certificates with domain names) used by the listener.
        :param _builtins.str sni_match_algo: How wildcard domain name matches with the SNI certificates used by the listener.
        :param _builtins.bool ssl_early_data_enable: Specifies whether the 0-RTT capability is enabled. Value options: **true**,
               **false**.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the listener.
        :param _builtins.str tls_ciphers_policy: Specifies the TLS cipher policy for the listener.
        :param _builtins.str updated_at: The update time of the listener.
        """
        pulumi.set(__self__, "advanced_forwarding_enabled", advanced_forwarding_enabled)
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "cps", cps)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_pool_id", default_pool_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_member_retry", enable_member_retry)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "forward_eip", forward_eip)
        pulumi.set(__self__, "forward_elb", forward_elb)
        pulumi.set(__self__, "forward_host", forward_host)
        pulumi.set(__self__, "forward_port", forward_port)
        pulumi.set(__self__, "forward_proto", forward_proto)
        pulumi.set(__self__, "forward_request_port", forward_request_port)
        pulumi.set(__self__, "forward_tls_certificate", forward_tls_certificate)
        pulumi.set(__self__, "forward_tls_cipher", forward_tls_cipher)
        pulumi.set(__self__, "forward_tls_protocol", forward_tls_protocol)
        pulumi.set(__self__, "gzip_enable", gzip_enable)
        pulumi.set(__self__, "http2_enable", http2_enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        pulumi.set(__self__, "ipgroups", ipgroups)
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "max_connection", max_connection)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "proxy_protocol_enable", proxy_protocol_enable)
        pulumi.set(__self__, "quic_configs", quic_configs)
        pulumi.set(__self__, "real_ip", real_ip)
        pulumi.set(__self__, "request_timeout", request_timeout)
        pulumi.set(__self__, "response_timeout", response_timeout)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "server_certificate", server_certificate)
        pulumi.set(__self__, "sni_certificates", sni_certificates)
        pulumi.set(__self__, "sni_match_algo", sni_match_algo)
        pulumi.set(__self__, "ssl_early_data_enable", ssl_early_data_enable)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tls_ciphers_policy", tls_ciphers_policy)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="advancedForwardingEnabled")
    def advanced_forwarding_enabled(self) -> _builtins.bool:
        """
        Specifies whether the advanced forwarding is enabled. Value options:
        **true**, **false**.
        """
        return pulumi.get(self, "advanced_forwarding_enabled")

    @_builtins.property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> _builtins.str:
        """
        Specifies the ID of the CA certificate used by the listener.
        """
        return pulumi.get(self, "ca_certificate")

    @_builtins.property
    @pulumi.getter
    def cps(self) -> _builtins.int:
        """
        The maximum number of new connections that a listener can handle per second.
        """
        return pulumi.get(self, "cps")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the listener.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> _builtins.str:
        """
        Specifies the ID of the default pool with which the listener is associated.
        """
        return pulumi.get(self, "default_pool_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the ELB listener.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableMemberRetry")
    def enable_member_retry(self) -> _builtins.bool:
        """
        Specifies whether the health check retries for backend servers is enabled.
        Value options: **true**, **false**.
        """
        return pulumi.get(self, "enable_member_retry")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="forwardEip")
    def forward_eip(self) -> _builtins.bool:
        """
        Whether to transparently transmit the load balancer EIP to backend servers.
        """
        return pulumi.get(self, "forward_eip")

    @_builtins.property
    @pulumi.getter(name="forwardElb")
    def forward_elb(self) -> _builtins.bool:
        """
        Whether to transfer the load balancer ID to backend servers through the HTTP header of the packet.
        """
        return pulumi.get(self, "forward_elb")

    @_builtins.property
    @pulumi.getter(name="forwardHost")
    def forward_host(self) -> _builtins.bool:
        """
        Whether to rewrite the X-Forwarded-Host header.
        """
        return pulumi.get(self, "forward_host")

    @_builtins.property
    @pulumi.getter(name="forwardPort")
    def forward_port(self) -> _builtins.bool:
        """
        Whether to transparently transmit the listening port of the load balancer to backend servers.
        """
        return pulumi.get(self, "forward_port")

    @_builtins.property
    @pulumi.getter(name="forwardProto")
    def forward_proto(self) -> _builtins.bool:
        """
        Whether to transfer the listener protocol of the load balancer to backend servers through the HTTP
        header of the packet.
        """
        return pulumi.get(self, "forward_proto")

    @_builtins.property
    @pulumi.getter(name="forwardRequestPort")
    def forward_request_port(self) -> _builtins.bool:
        """
        Whether to transparently transmit the source port of the client to backend servers.
        """
        return pulumi.get(self, "forward_request_port")

    @_builtins.property
    @pulumi.getter(name="forwardTlsCertificate")
    def forward_tls_certificate(self) -> _builtins.bool:
        """
        Whether to transfer the certificate ID of the load balancer to backend servers through the
        HTTP header of the packet.
        """
        return pulumi.get(self, "forward_tls_certificate")

    @_builtins.property
    @pulumi.getter(name="forwardTlsCipher")
    def forward_tls_cipher(self) -> _builtins.bool:
        """
        Whether to transfer the algorithm suite of the load balancer to backend servers through the HTTP
        header of the packet.
        """
        return pulumi.get(self, "forward_tls_cipher")

    @_builtins.property
    @pulumi.getter(name="forwardTlsProtocol")
    def forward_tls_protocol(self) -> _builtins.bool:
        """
        Whether to transfer the algorithm protocol of the load balancer to backend servers through the
        HTTP header of the packet.
        """
        return pulumi.get(self, "forward_tls_protocol")

    @_builtins.property
    @pulumi.getter(name="gzipEnable")
    def gzip_enable(self) -> _builtins.bool:
        """
        Whether the gzip compression for a load balancer is enabled.
        """
        return pulumi.get(self, "gzip_enable")

    @_builtins.property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> _builtins.bool:
        """
        Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
        """
        return pulumi.get(self, "http2_enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> _builtins.int:
        """
        Specifies the idle timeout for the listener.
        """
        return pulumi.get(self, "idle_timeout")

    @_builtins.property
    @pulumi.getter
    def ipgroups(self) -> Sequence['outputs.GetListenersListenerIpgroupResult']:
        """
        The IP address group associated with the listener.
        The ipgroup structure is documented below.
        """
        return pulumi.get(self, "ipgroups")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> _builtins.str:
        """
        Specifies the ID of the load balancer that the listener is added to.
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> _builtins.int:
        """
        The maximum number of concurrent connections that a listener can handle per second.
        """
        return pulumi.get(self, "max_connection")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ELB listener.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetListenersListenerPortRangeResult']:
        """
        The port range, including the start and end port numbers.
        The port_ranges structure is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason for update protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        Specifies the protection status.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the ELB listener. Value options:
        **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> _builtins.int:
        """
        Specifies the port used by the listener.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter(name="proxyProtocolEnable")
    def proxy_protocol_enable(self) -> _builtins.bool:
        """
        Specifies whether the proxy protocol option to pass the source IP addresses
        of the clients to backend servers is enabled. Value options: **true**, **false**.
        """
        return pulumi.get(self, "proxy_protocol_enable")

    @_builtins.property
    @pulumi.getter(name="quicConfigs")
    def quic_configs(self) -> Sequence['outputs.GetListenersListenerQuicConfigResult']:
        """
        The QUIC configuration for the current listener.
        The quic_config structure is documented below.
        """
        return pulumi.get(self, "quic_configs")

    @_builtins.property
    @pulumi.getter(name="realIp")
    def real_ip(self) -> _builtins.bool:
        """
        Whether to transfer the source IP address of the client to backend servers through the HTTP header of the
        packet.
        """
        return pulumi.get(self, "real_ip")

    @_builtins.property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> _builtins.int:
        """
        Specifies the request timeout for the listener. Value range: **1** to **300**.
        """
        return pulumi.get(self, "request_timeout")

    @_builtins.property
    @pulumi.getter(name="responseTimeout")
    def response_timeout(self) -> _builtins.int:
        """
        Specifies the response timeout for the listener.
        """
        return pulumi.get(self, "response_timeout")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        The ID of the custom security policy.
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> _builtins.str:
        """
        Specifies the ID of the server certificate used by the listener.
        """
        return pulumi.get(self, "server_certificate")

    @_builtins.property
    @pulumi.getter(name="sniCertificates")
    def sni_certificates(self) -> Sequence[_builtins.str]:
        """
        The IDs of SNI certificates (server certificates with domain names) used by the listener.
        """
        return pulumi.get(self, "sni_certificates")

    @_builtins.property
    @pulumi.getter(name="sniMatchAlgo")
    def sni_match_algo(self) -> _builtins.str:
        """
        How wildcard domain name matches with the SNI certificates used by the listener.
        """
        return pulumi.get(self, "sni_match_algo")

    @_builtins.property
    @pulumi.getter(name="sslEarlyDataEnable")
    def ssl_early_data_enable(self) -> _builtins.bool:
        """
        Specifies whether the 0-RTT capability is enabled. Value options: **true**,
        **false**.
        """
        return pulumi.get(self, "ssl_early_data_enable")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the listener.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tlsCiphersPolicy")
    def tls_ciphers_policy(self) -> _builtins.str:
        """
        Specifies the TLS cipher policy for the listener.
        """
        return pulumi.get(self, "tls_ciphers_policy")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the listener.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetListenersListenerIpgroupResult(dict):
    def __init__(__self__, *,
                 enable_ipgroup: _builtins.bool,
                 ipgroup_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.bool enable_ipgroup: Whether access control is enabled.
        :param _builtins.str ipgroup_id: The ID of the IP address group associated with the listener.
        :param _builtins.str type: How access to the listener is controlled.
        """
        pulumi.set(__self__, "enable_ipgroup", enable_ipgroup)
        pulumi.set(__self__, "ipgroup_id", ipgroup_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="enableIpgroup")
    def enable_ipgroup(self) -> _builtins.bool:
        """
        Whether access control is enabled.
        """
        return pulumi.get(self, "enable_ipgroup")

    @_builtins.property
    @pulumi.getter(name="ipgroupId")
    def ipgroup_id(self) -> _builtins.str:
        """
        The ID of the IP address group associated with the listener.
        """
        return pulumi.get(self, "ipgroup_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        How access to the listener is controlled.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetListenersListenerPortRangeResult(dict):
    def __init__(__self__, *,
                 end_port: _builtins.int,
                 start_port: _builtins.int):
        """
        :param _builtins.int end_port: The end port.
        :param _builtins.int start_port: The start port.
        """
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @_builtins.property
    @pulumi.getter(name="endPort")
    def end_port(self) -> _builtins.int:
        """
        The end port.
        """
        return pulumi.get(self, "end_port")

    @_builtins.property
    @pulumi.getter(name="startPort")
    def start_port(self) -> _builtins.int:
        """
        The start port.
        """
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetListenersListenerQuicConfigResult(dict):
    def __init__(__self__, *,
                 enable_quic_upgrade: _builtins.bool,
                 quic_listener_id: _builtins.str):
        """
        :param _builtins.bool enable_quic_upgrade: Whether to enable QUIC upgrade.
        :param _builtins.str quic_listener_id: The ID of the QUIC listener.
        """
        pulumi.set(__self__, "enable_quic_upgrade", enable_quic_upgrade)
        pulumi.set(__self__, "quic_listener_id", quic_listener_id)

    @_builtins.property
    @pulumi.getter(name="enableQuicUpgrade")
    def enable_quic_upgrade(self) -> _builtins.bool:
        """
        Whether to enable QUIC upgrade.
        """
        return pulumi.get(self, "enable_quic_upgrade")

    @_builtins.property
    @pulumi.getter(name="quicListenerId")
    def quic_listener_id(self) -> _builtins.str:
        """
        The ID of the QUIC listener.
        """
        return pulumi.get(self, "quic_listener_id")


@pulumi.output_type
class GetLoadbalancerFeatureConfigurationsFeatureResult(dict):
    def __init__(__self__, *,
                 feature: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str feature: Specifies the feature name.
        :param _builtins.str type: Specifies the type of the feature configuration value.
        :param _builtins.str value: Specifies the feature value.
               For example, the value **true** or **false** indicates that the feature is enabled or disabled.
               The feature value of the quota is an integer, indicating that the quota is limited.
        """
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def feature(self) -> _builtins.str:
        """
        Specifies the feature name.
        """
        return pulumi.get(self, "feature")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the feature configuration value.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the feature value.
        For example, the value **true** or **false** indicates that the feature is enabled or disabled.
        The feature value of the quota is an integer, indicating that the quota is limited.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadbalancersLoadbalancerResult(dict):
    def __init__(__self__, *,
                 autoscaling_enabled: _builtins.bool,
                 availability_zones: Sequence[_builtins.str],
                 backend_subnets: Sequence[_builtins.str],
                 billing_info: _builtins.str,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 cross_vpc_backend: _builtins.bool,
                 deletion_protection_enable: _builtins.bool,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 frozen_scene: _builtins.str,
                 global_eips: Sequence['outputs.GetLoadbalancersLoadbalancerGlobalEipResult'],
                 gw_flavor_id: _builtins.str,
                 id: _builtins.str,
                 ipv4_address: _builtins.str,
                 ipv4_port_id: _builtins.str,
                 ipv4_subnet_id: _builtins.str,
                 ipv6_address: _builtins.str,
                 ipv6_network_id: _builtins.str,
                 ipv6_vip_port_id: _builtins.str,
                 l4_flavor_id: _builtins.str,
                 l7_flavor_id: _builtins.str,
                 listeners: Sequence['outputs.GetLoadbalancersLoadbalancerListenerResult'],
                 loadbalancer_type: _builtins.str,
                 log_group_id: _builtins.str,
                 log_topic_id: _builtins.str,
                 min_l7_flavor_id: _builtins.str,
                 name: _builtins.str,
                 operating_status: _builtins.str,
                 pools: Sequence['outputs.GetLoadbalancersLoadbalancerPoolResult'],
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 provisioning_status: _builtins.str,
                 public_border_group: _builtins.str,
                 publicips: Sequence['outputs.GetLoadbalancersLoadbalancerPublicipResult'],
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str,
                 waf_failure_action: _builtins.str):
        """
        :param _builtins.bool autoscaling_enabled: Whether the current load balancer enables elastic expansion.
        :param Sequence[_builtins.str] availability_zones: Specifies the list of AZ where the load balancer is created.
        :param Sequence[_builtins.str] backend_subnets: Lists the IDs of subnets on the downstream plane.
        :param _builtins.str billing_info: Specifies the provides resource billing information.
        :param _builtins.str charge_mode: The charge mode when of the load balancer.
        :param _builtins.str created_at: The time when the load balancer was created.
        :param _builtins.bool cross_vpc_backend: Whether to enable IP as a Backend Server.
        :param _builtins.bool deletion_protection_enable: Specifies whether the deletion protection is enabled. Value options:
               **true**, **false**.
        :param _builtins.str description: Specifies the description of the ELB load balancer.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str frozen_scene: The scenario where the load balancer is frozen.
        :param Sequence['GetLoadbalancersLoadbalancerGlobalEipArgs'] global_eips: Specifies the global EIPs bound to the load balancer. It can be queried by different
               conditions:
               + If `global_eip_id` is used as the query condition, the format is **global_eip_id=xxx**
               + If `global_eip_address` is used as the query condition, the format is **global_eip_address=xxx**
               + If `ip_version` is used as the query condition, the format is **ip_version=xxx**
        :param _builtins.str gw_flavor_id: The flavor ID of the gateway load balancer.
        :param _builtins.str id: The pool ID.
        :param _builtins.str ipv4_address: Specifies the private IPv4 address bound to the load balancer.
        :param _builtins.str ipv4_port_id: Specifies the ID of the port bound to the private IPv4 address of the load balancer.
        :param _builtins.str ipv4_subnet_id: Specifies the ID of the IPv4 subnet where the load balancer resides.
        :param _builtins.str ipv6_address: Specifies the IPv6 address bound to the load balancer.
        :param _builtins.str ipv6_network_id: Specifies the ID of the port bound to the IPv6 address of the load balancer.
        :param _builtins.str ipv6_vip_port_id: Specifies the ID of the port bound to the IPv6 address of the load balancer.
        :param _builtins.str l4_flavor_id: Specifies the ID of a flavor at Layer 4.
        :param _builtins.str l7_flavor_id: Specifies the ID of a flavor at Layer 7.
        :param Sequence['GetLoadbalancersLoadbalancerListenerArgs'] listeners: The list of listeners added to the load balancer.
               The listeners structure is documented below.
        :param _builtins.str loadbalancer_type: The type of the load balancer.
        :param _builtins.str log_group_id: Specifies the ID of the log group that is associated with the load balancer.
        :param _builtins.str log_topic_id: Specifies the ID of the log topic that is associated with the load balancer.
        :param _builtins.str min_l7_flavor_id: The minimum seven-layer specification ID (specification type L7_elastic) for elastic expansion
               and contraction
        :param _builtins.str name: Specifies the name of the ELB load balancer.
        :param _builtins.str operating_status: Specifies the operating status of the load balancer. Value options:
               + **ONLINE**: indicates that the load balancer is running normally.
               + **FROZEN**: indicates that the load balancer is frozen.
        :param Sequence['GetLoadbalancersLoadbalancerPoolArgs'] pools: The list of pools associated with the load balancer.
               The pools structure is documented below.
        :param _builtins.str protection_reason: The reason for update protection.
        :param _builtins.str protection_status: Specifies the protection status. Value options:
               + **nonProtection**: The load balancer is not protected.
               + **consoleProtection**: Modification Protection is enabled on the console.
        :param _builtins.str provisioning_status: Specifies the provisioning status of the load balancer. Value options:
               + **ACTIVE**: The load balancer is successfully provisioned.
               + **PENDING_DELETE**: The load balancer is being deleted.
        :param _builtins.str public_border_group: The AZ group to which the load balancer belongs.
        :param Sequence['GetLoadbalancersLoadbalancerPublicipArgs'] publicips: Specifies the EIPs bound to the load balancer. It can be queried by different conditions:
               + If `publicip_id` is used as the query condition, the format is **publicip_id=xxx**
               + If `publicip_address` is used as the query condition, the format is **publicip_address=xxx**
               + If `ip_version` is used as the query condition, the format is **ip_version=xxx**
        :param _builtins.str type: Specifies whether the load balancer is a dedicated load balancer, Value options:
               **dedicated**, **share**.
        :param _builtins.str updated_at: The time when the load balancer was updated.
        :param _builtins.str vpc_id: Specifies the ID of the VPC where the load balancer resides.
        :param _builtins.str waf_failure_action: The traffic distributing policies when the WAF is faulty.
        """
        pulumi.set(__self__, "autoscaling_enabled", autoscaling_enabled)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "backend_subnets", backend_subnets)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "cross_vpc_backend", cross_vpc_backend)
        pulumi.set(__self__, "deletion_protection_enable", deletion_protection_enable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "frozen_scene", frozen_scene)
        pulumi.set(__self__, "global_eips", global_eips)
        pulumi.set(__self__, "gw_flavor_id", gw_flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_port_id", ipv4_port_id)
        pulumi.set(__self__, "ipv4_subnet_id", ipv4_subnet_id)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_network_id", ipv6_network_id)
        pulumi.set(__self__, "ipv6_vip_port_id", ipv6_vip_port_id)
        pulumi.set(__self__, "l4_flavor_id", l4_flavor_id)
        pulumi.set(__self__, "l7_flavor_id", l7_flavor_id)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancer_type", loadbalancer_type)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_topic_id", log_topic_id)
        pulumi.set(__self__, "min_l7_flavor_id", min_l7_flavor_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "pools", pools)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "publicips", publicips)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "waf_failure_action", waf_failure_action)

    @_builtins.property
    @pulumi.getter(name="autoscalingEnabled")
    def autoscaling_enabled(self) -> _builtins.bool:
        """
        Whether the current load balancer enables elastic expansion.
        """
        return pulumi.get(self, "autoscaling_enabled")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of AZ where the load balancer is created.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="backendSubnets")
    def backend_subnets(self) -> Sequence[_builtins.str]:
        """
        Lists the IDs of subnets on the downstream plane.
        """
        return pulumi.get(self, "backend_subnets")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        Specifies the provides resource billing information.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charge mode when of the load balancer.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the load balancer was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crossVpcBackend")
    def cross_vpc_backend(self) -> _builtins.bool:
        """
        Whether to enable IP as a Backend Server.
        """
        return pulumi.get(self, "cross_vpc_backend")

    @_builtins.property
    @pulumi.getter(name="deletionProtectionEnable")
    def deletion_protection_enable(self) -> _builtins.bool:
        """
        Specifies whether the deletion protection is enabled. Value options:
        **true**, **false**.
        """
        return pulumi.get(self, "deletion_protection_enable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the ELB load balancer.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="frozenScene")
    def frozen_scene(self) -> _builtins.str:
        """
        The scenario where the load balancer is frozen.
        """
        return pulumi.get(self, "frozen_scene")

    @_builtins.property
    @pulumi.getter(name="globalEips")
    def global_eips(self) -> Sequence['outputs.GetLoadbalancersLoadbalancerGlobalEipResult']:
        """
        Specifies the global EIPs bound to the load balancer. It can be queried by different
        conditions:
        + If `global_eip_id` is used as the query condition, the format is **global_eip_id=xxx**
        + If `global_eip_address` is used as the query condition, the format is **global_eip_address=xxx**
        + If `ip_version` is used as the query condition, the format is **ip_version=xxx**
        """
        return pulumi.get(self, "global_eips")

    @_builtins.property
    @pulumi.getter(name="gwFlavorId")
    def gw_flavor_id(self) -> _builtins.str:
        """
        The flavor ID of the gateway load balancer.
        """
        return pulumi.get(self, "gw_flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The pool ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Specifies the private IPv4 address bound to the load balancer.
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4PortId")
    def ipv4_port_id(self) -> _builtins.str:
        """
        Specifies the ID of the port bound to the private IPv4 address of the load balancer.
        """
        return pulumi.get(self, "ipv4_port_id")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the IPv4 subnet where the load balancer resides.
        """
        return pulumi.get(self, "ipv4_subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        Specifies the IPv6 address bound to the load balancer.
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6NetworkId")
    def ipv6_network_id(self) -> _builtins.str:
        """
        Specifies the ID of the port bound to the IPv6 address of the load balancer.
        """
        return pulumi.get(self, "ipv6_network_id")

    @_builtins.property
    @pulumi.getter(name="ipv6VipPortId")
    def ipv6_vip_port_id(self) -> _builtins.str:
        """
        Specifies the ID of the port bound to the IPv6 address of the load balancer.
        """
        return pulumi.get(self, "ipv6_vip_port_id")

    @_builtins.property
    @pulumi.getter(name="l4FlavorId")
    def l4_flavor_id(self) -> _builtins.str:
        """
        Specifies the ID of a flavor at Layer 4.
        """
        return pulumi.get(self, "l4_flavor_id")

    @_builtins.property
    @pulumi.getter(name="l7FlavorId")
    def l7_flavor_id(self) -> _builtins.str:
        """
        Specifies the ID of a flavor at Layer 7.
        """
        return pulumi.get(self, "l7_flavor_id")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLoadbalancersLoadbalancerListenerResult']:
        """
        The list of listeners added to the load balancer.
        The listeners structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter(name="loadbalancerType")
    def loadbalancer_type(self) -> _builtins.str:
        """
        The type of the load balancer.
        """
        return pulumi.get(self, "loadbalancer_type")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the log group that is associated with the load balancer.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> _builtins.str:
        """
        Specifies the ID of the log topic that is associated with the load balancer.
        """
        return pulumi.get(self, "log_topic_id")

    @_builtins.property
    @pulumi.getter(name="minL7FlavorId")
    def min_l7_flavor_id(self) -> _builtins.str:
        """
        The minimum seven-layer specification ID (specification type L7_elastic) for elastic expansion
        and contraction
        """
        return pulumi.get(self, "min_l7_flavor_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ELB load balancer.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        Specifies the operating status of the load balancer. Value options:
        + **ONLINE**: indicates that the load balancer is running normally.
        + **FROZEN**: indicates that the load balancer is frozen.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def pools(self) -> Sequence['outputs.GetLoadbalancersLoadbalancerPoolResult']:
        """
        The list of pools associated with the load balancer.
        The pools structure is documented below.
        """
        return pulumi.get(self, "pools")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason for update protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        Specifies the protection status. Value options:
        + **nonProtection**: The load balancer is not protected.
        + **consoleProtection**: Modification Protection is enabled on the console.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        """
        Specifies the provisioning status of the load balancer. Value options:
        + **ACTIVE**: The load balancer is successfully provisioned.
        + **PENDING_DELETE**: The load balancer is being deleted.
        """
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        The AZ group to which the load balancer belongs.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def publicips(self) -> Sequence['outputs.GetLoadbalancersLoadbalancerPublicipResult']:
        """
        Specifies the EIPs bound to the load balancer. It can be queried by different conditions:
        + If `publicip_id` is used as the query condition, the format is **publicip_id=xxx**
        + If `publicip_address` is used as the query condition, the format is **publicip_address=xxx**
        + If `ip_version` is used as the query condition, the format is **ip_version=xxx**
        """
        return pulumi.get(self, "publicips")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies whether the load balancer is a dedicated load balancer, Value options:
        **dedicated**, **share**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the load balancer was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC where the load balancer resides.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="wafFailureAction")
    def waf_failure_action(self) -> _builtins.str:
        """
        The traffic distributing policies when the WAF is faulty.
        """
        return pulumi.get(self, "waf_failure_action")


@pulumi.output_type
class GetLoadbalancersLoadbalancerGlobalEipResult(dict):
    def __init__(__self__, *,
                 global_eip_address: _builtins.str,
                 global_eip_id: _builtins.str,
                 ip_version: _builtins.int):
        """
        :param _builtins.str global_eip_address: The global EIP address
        :param _builtins.str global_eip_id: The ID of the global EIP.
        :param _builtins.int ip_version: The IP version.
        """
        pulumi.set(__self__, "global_eip_address", global_eip_address)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        pulumi.set(__self__, "ip_version", ip_version)

    @_builtins.property
    @pulumi.getter(name="globalEipAddress")
    def global_eip_address(self) -> _builtins.str:
        """
        The global EIP address
        """
        return pulumi.get(self, "global_eip_address")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> _builtins.str:
        """
        The ID of the global EIP.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class GetLoadbalancersLoadbalancerListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The pool ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The pool ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLoadbalancersLoadbalancerPoolResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The pool ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The pool ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLoadbalancersLoadbalancerPublicipResult(dict):
    def __init__(__self__, *,
                 ip_version: _builtins.int,
                 publicip_address: _builtins.str,
                 publicip_id: _builtins.str):
        """
        :param _builtins.int ip_version: The IP version.
        :param _builtins.str publicip_address: The IP address.
        :param _builtins.str publicip_id: The EIP ID.
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "publicip_address", publicip_address)
        pulumi.set(__self__, "publicip_id", publicip_id)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="publicipAddress")
    def publicip_address(self) -> _builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "publicip_address")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> _builtins.str:
        """
        The EIP ID.
        """
        return pulumi.get(self, "publicip_id")


@pulumi.output_type
class GetLogtanksLogtankResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 loadbalancer_id: _builtins.str,
                 log_group_id: _builtins.str,
                 log_topic_id: _builtins.str):
        """
        :param _builtins.str id: The log ID.
        :param _builtins.str loadbalancer_id: Specifies the ID of a load balancer
        :param _builtins.str log_group_id: Specifies the log group ID.
        :param _builtins.str log_topic_id: Specifies the log topic ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_topic_id", log_topic_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The log ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> _builtins.str:
        """
        Specifies the ID of a load balancer
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        Specifies the log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> _builtins.str:
        """
        Specifies the log topic ID.
        """
        return pulumi.get(self, "log_topic_id")


@pulumi.output_type
class GetMonitorsMonitorResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 domain_name: _builtins.str,
                 http_method: _builtins.str,
                 id: _builtins.str,
                 interval: _builtins.int,
                 max_retries: _builtins.int,
                 max_retries_down: _builtins.int,
                 name: _builtins.str,
                 pool_id: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 status_code: _builtins.str,
                 timeout: _builtins.int,
                 updated_at: _builtins.str,
                 url_path: _builtins.str):
        """
        :param _builtins.str created_at: The time when the health check was configured.
        :param _builtins.str domain_name: Specifies the domain name to which HTTP requests are sent during the health check.
               The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
        :param _builtins.str http_method: Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
        :param _builtins.str id: The health check ID.
        :param _builtins.int interval: Specifies the interval between health checks, in seconds.  
               The value ranges from `1` to `50`.
        :param _builtins.int max_retries: Specifies the number of consecutive health checks when the health check result of a
               backend server changes from **OFFLINE** to **ONLINE**.
        :param _builtins.int max_retries_down: Specifies the number of consecutive health checks when the health check result of
               a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
        :param _builtins.str name: Specifies the health check name.
        :param _builtins.str pool_id: Specifies the ID of backend server groups for which the health check is configured.
        :param _builtins.int port: Specifies the port used for the health check.
        :param _builtins.str protocol: Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
               **HTTP**, **HTTPS**, **GRPC** or **TLS**.
        :param _builtins.str status_code: Specifies the expected HTTP status code. This parameter will take effect only when
               type is set to **HTTP** or **HTTPS**.Value options:
               + A specific value, for example, **200**
               + A list of values that are separated with commas (,), for example, **200**, **202**
               + A value range, for example, **200**-**204**
        :param _builtins.int timeout: Specifies the maximum time required for waiting for a response from the health check, in
               seconds.
        :param _builtins.str updated_at: The time when the health check was updated.
        :param _builtins.str url_path: Specifies the HTTP request path for the health check. The value must start with a slash
               (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "max_retries_down", max_retries_down)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url_path", url_path)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the health check was configured.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Specifies the domain name to which HTTP requests are sent during the health check.
        The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> _builtins.str:
        """
        Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
        """
        return pulumi.get(self, "http_method")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The health check ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Specifies the interval between health checks, in seconds.  
        The value ranges from `1` to `50`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        Specifies the number of consecutive health checks when the health check result of a
        backend server changes from **OFFLINE** to **ONLINE**.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter(name="maxRetriesDown")
    def max_retries_down(self) -> _builtins.int:
        """
        Specifies the number of consecutive health checks when the health check result of
        a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
        """
        return pulumi.get(self, "max_retries_down")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the health check name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        Specifies the ID of backend server groups for which the health check is configured.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port used for the health check.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
        **HTTP**, **HTTPS**, **GRPC** or **TLS**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        Specifies the expected HTTP status code. This parameter will take effect only when
        type is set to **HTTP** or **HTTPS**.Value options:
        + A specific value, for example, **200**
        + A list of values that are separated with commas (,), for example, **200**, **202**
        + A value range, for example, **200**-**204**
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Specifies the maximum time required for waiting for a response from the health check, in
        seconds.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the health check was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> _builtins.str:
        """
        Specifies the HTTP request path for the health check. The value must start with a slash
        (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
        """
        return pulumi.get(self, "url_path")


@pulumi.output_type
class GetPoolsPoolResult(dict):
    def __init__(__self__, *,
                 any_port_enable: _builtins.bool,
                 connection_drain_enabled: _builtins.bool,
                 connection_drain_timeout: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 healthmonitor_id: _builtins.str,
                 id: _builtins.str,
                 ip_version: _builtins.str,
                 lb_method: _builtins.str,
                 listeners: Sequence['outputs.GetPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetPoolsPoolLoadbalancerResult'],
                 member_deletion_protection_enable: _builtins.bool,
                 members: Sequence['outputs.GetPoolsPoolMemberResult'],
                 minimum_healthy_member_count: _builtins.int,
                 name: _builtins.str,
                 persistences: Sequence['outputs.GetPoolsPoolPersistenceResult'],
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 protocol: _builtins.str,
                 public_border_group: _builtins.str,
                 quic_cid_hash_strategies: Sequence['outputs.GetPoolsPoolQuicCidHashStrategyResult'],
                 slow_start_duration: _builtins.int,
                 slow_start_enabled: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.bool any_port_enable: Specifies whether forward to same port for a backend server group is enabled.
               Value options:
               + **false**: Disable this option.
               + **true**: Enable this option.
        :param _builtins.bool connection_drain_enabled: Whether to enable delayed logout.
        :param _builtins.int connection_drain_timeout: The timeout of the delayed logout in seconds.
        :param _builtins.str created_at: The time when the backend server group was created
        :param _builtins.str description: Specifies the description of the ELB pool.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project.
        :param _builtins.str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
        :param _builtins.str id: The listener, loadbalancer or member ID.
        :param _builtins.str ip_version: Specifies the IP address version supported by the backend server group.
        :param _builtins.str lb_method: Specifies the method of the ELB pool. Value options: **ROUND_ROBIN**,
               **LEAST_CONNECTIONS**, **SOURCE_IP** or **QUIC_CID**.
        :param Sequence['GetPoolsPoolListenerArgs'] listeners: The listener list. The object structure is documented below.
        :param Sequence['GetPoolsPoolLoadbalancerArgs'] loadbalancers: The loadbalancer list. The object structure is documented below.
        :param _builtins.bool member_deletion_protection_enable: Specifies whether deletion protection is enabled. Value options:
               + **false**: Disable this option.
               + **true**: Enable this option.
        :param Sequence['GetPoolsPoolMemberArgs'] members: The member list. The object structure is documented below.
        :param _builtins.int minimum_healthy_member_count: The minimum healthy member count.
        :param _builtins.str name: Specifies the name of the ELB pool.
        :param Sequence['GetPoolsPoolPersistenceArgs'] persistences: Indicates whether connections in the same session will be processed by the same pool member or not.
               The object structure is documented below.
        :param _builtins.str protection_reason: The reason for update protection.
        :param _builtins.str protection_status: Specifies the protection status for update.
               Value options: **nonProtection**, **consoleProtection**.
        :param _builtins.str protocol: Specifies the protocol of the ELB pool. Value options: **TCP**, **UDP**, **HTTP**,
               **HTTPS**, **QUIC**, **GRPC** or **TLS**.
        :param _builtins.str public_border_group: Specifies the public border group.
        :param Sequence['GetPoolsPoolQuicCidHashStrategyArgs'] quic_cid_hash_strategies: The multi-path forwarding policy based on destination connection IDs.
               The quic_cid_hash_strategy structure is documented below.
        :param _builtins.int slow_start_duration: The slow start duration, in seconds.
        :param _builtins.bool slow_start_enabled: Whether to enable slow start.
        :param _builtins.str type: Specifies the type of the backend server group. Value options: **instance**, **ip**.
        :param _builtins.str updated_at: The time when the backend server group was updated.
        :param _builtins.str vpc_id: Specifies the ID of the VPC where the backend server group works.
        """
        pulumi.set(__self__, "any_port_enable", any_port_enable)
        pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "member_deletion_protection_enable", member_deletion_protection_enable)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "minimum_healthy_member_count", minimum_healthy_member_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "quic_cid_hash_strategies", quic_cid_hash_strategies)
        pulumi.set(__self__, "slow_start_duration", slow_start_duration)
        pulumi.set(__self__, "slow_start_enabled", slow_start_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> _builtins.bool:
        """
        Specifies whether forward to same port for a backend server group is enabled.
        Value options:
        + **false**: Disable this option.
        + **true**: Enable this option.
        """
        return pulumi.get(self, "any_port_enable")

    @_builtins.property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> _builtins.bool:
        """
        Whether to enable delayed logout.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> _builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the backend server group was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the ELB pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> _builtins.str:
        """
        Specifies the health monitor ID of the ELB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Specifies the IP address version supported by the backend server group.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> _builtins.str:
        """
        Specifies the method of the ELB pool. Value options: **ROUND_ROBIN**,
        **LEAST_CONNECTIONS**, **SOURCE_IP** or **QUIC_CID**.
        """
        return pulumi.get(self, "lb_method")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetPoolsPoolListenerResult']:
        """
        The listener list. The object structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetPoolsPoolLoadbalancerResult']:
        """
        The loadbalancer list. The object structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter(name="memberDeletionProtectionEnable")
    def member_deletion_protection_enable(self) -> _builtins.bool:
        """
        Specifies whether deletion protection is enabled. Value options:
        + **false**: Disable this option.
        + **true**: Enable this option.
        """
        return pulumi.get(self, "member_deletion_protection_enable")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetPoolsPoolMemberResult']:
        """
        The member list. The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter(name="minimumHealthyMemberCount")
    def minimum_healthy_member_count(self) -> _builtins.int:
        """
        The minimum healthy member count.
        """
        return pulumi.get(self, "minimum_healthy_member_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ELB pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetPoolsPoolPersistenceResult']:
        """
        Indicates whether connections in the same session will be processed by the same pool member or not.
        The object structure is documented below.
        """
        return pulumi.get(self, "persistences")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason for update protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        Specifies the protection status for update.
        Value options: **nonProtection**, **consoleProtection**.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the ELB pool. Value options: **TCP**, **UDP**, **HTTP**,
        **HTTPS**, **QUIC**, **GRPC** or **TLS**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the public border group.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="quicCidHashStrategies")
    def quic_cid_hash_strategies(self) -> Sequence['outputs.GetPoolsPoolQuicCidHashStrategyResult']:
        """
        The multi-path forwarding policy based on destination connection IDs.
        The quic_cid_hash_strategy structure is documented below.
        """
        return pulumi.get(self, "quic_cid_hash_strategies")

    @_builtins.property
    @pulumi.getter(name="slowStartDuration")
    def slow_start_duration(self) -> _builtins.int:
        """
        The slow start duration, in seconds.
        """
        return pulumi.get(self, "slow_start_duration")

    @_builtins.property
    @pulumi.getter(name="slowStartEnabled")
    def slow_start_enabled(self) -> _builtins.bool:
        """
        Whether to enable slow start.
        """
        return pulumi.get(self, "slow_start_enabled")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the backend server group. Value options: **instance**, **ip**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the backend server group was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC where the backend server group works.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 timeout: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param _builtins.int timeout: The stickiness duration, in minutes.
        :param _builtins.str type: Specifies the type of the backend server group. Value options: **instance**, **ip**.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The stickiness duration, in minutes.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the backend server group. Value options: **instance**, **ip**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPoolsPoolQuicCidHashStrategyResult(dict):
    def __init__(__self__, *,
                 len: _builtins.int,
                 offset: _builtins.int):
        """
        :param _builtins.int len: The length of the hash factor in the connection ID, in byte.
        :param _builtins.int offset: The start position in the connection ID as the hash factor, in byte.
        """
        pulumi.set(__self__, "len", len)
        pulumi.set(__self__, "offset", offset)

    @_builtins.property
    @pulumi.getter
    def len(self) -> _builtins.int:
        """
        The length of the hash factor in the connection ID, in byte.
        """
        return pulumi.get(self, "len")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.int:
        """
        The start position in the connection ID as the hash factor, in byte.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyResult(dict):
    def __init__(__self__, *,
                 ciphers: Sequence[_builtins.str],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 listeners: Sequence['outputs.GetSecurityPoliciesSecurityPolicyListenerResult'],
                 name: _builtins.str,
                 protocols: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence[_builtins.str] ciphers: The cipher suites supported by the security policy.
        :param _builtins.str created_at: The time when the custom security policy was created.
        :param _builtins.str description: Specifies the description of the security policy.
        :param _builtins.str id: The listener ID.
        :param Sequence['GetSecurityPoliciesSecurityPolicyListenerArgs'] listeners: The IDs of listeners with which the security policy is associated.
               The listeners structure is documented below.
        :param _builtins.str name: Specifies the name of the security policy.
        :param Sequence[_builtins.str] protocols: The TLS protocols supported by the security policy.
        :param _builtins.str type: Specifies the type of the security policy. Value options: **system**, **custom**.
        :param _builtins.str updated_at: The time when the custom security policy was updated.
        """
        pulumi.set(__self__, "ciphers", ciphers)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def ciphers(self) -> Sequence[_builtins.str]:
        """
        The cipher suites supported by the security policy.
        """
        return pulumi.get(self, "ciphers")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the custom security policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the security policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetSecurityPoliciesSecurityPolicyListenerResult']:
        """
        The IDs of listeners with which the security policy is associated.
        The listeners structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the security policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.str]:
        """
        The TLS protocols supported by the security policy.
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the security policy. Value options: **system**, **custom**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the custom security policy was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")


