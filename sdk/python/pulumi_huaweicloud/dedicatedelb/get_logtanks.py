# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogtanksResult',
    'AwaitableGetLogtanksResult',
    'get_logtanks',
    'get_logtanks_output',
]

@pulumi.output_type
class GetLogtanksResult:
    """
    A collection of values returned by getLogtanks.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, loadbalancer_id=None, log_group_id=None, log_topic_id=None, logtank_id=None, logtanks=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if log_group_id and not isinstance(log_group_id, str):
            raise TypeError("Expected argument 'log_group_id' to be a str")
        pulumi.set(__self__, "log_group_id", log_group_id)
        if log_topic_id and not isinstance(log_topic_id, str):
            raise TypeError("Expected argument 'log_topic_id' to be a str")
        pulumi.set(__self__, "log_topic_id", log_topic_id)
        if logtank_id and not isinstance(logtank_id, str):
            raise TypeError("Expected argument 'logtank_id' to be a str")
        pulumi.set(__self__, "logtank_id", logtank_id)
        if logtanks and not isinstance(logtanks, list):
            raise TypeError("Expected argument 'logtanks' to be a list")
        pulumi.set(__self__, "logtanks", logtanks)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[_builtins.str]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[_builtins.str]:
        """
        The log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[_builtins.str]:
        """
        The log topic ID.
        """
        return pulumi.get(self, "log_topic_id")

    @_builtins.property
    @pulumi.getter(name="logtankId")
    def logtank_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "logtank_id")

    @_builtins.property
    @pulumi.getter
    def logtanks(self) -> Sequence['outputs.GetLogtanksLogtankResult']:
        """
        Lists the logtanks.
        The logtanks structure is documented below.
        """
        return pulumi.get(self, "logtanks")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetLogtanksResult(GetLogtanksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogtanksResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            loadbalancer_id=self.loadbalancer_id,
            log_group_id=self.log_group_id,
            log_topic_id=self.log_topic_id,
            logtank_id=self.logtank_id,
            logtanks=self.logtanks,
            region=self.region)


def get_logtanks(enterprise_project_id: Optional[_builtins.str] = None,
                 loadbalancer_id: Optional[_builtins.str] = None,
                 log_group_id: Optional[_builtins.str] = None,
                 log_topic_id: Optional[_builtins.str] = None,
                 logtank_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogtanksResult:
    """
    Use this data source to get the list of ELB logtanks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    logtank_id = config.require_object("logtankId")
    test = huaweicloud.DedicatedElb.get_logtanks(logtank_id=logtank_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str loadbalancer_id: Specifies the ID of a load balancer
    :param _builtins.str log_group_id: Specifies the log group ID.
    :param _builtins.str log_topic_id: Specifies the log topic ID.
    :param _builtins.str logtank_id: Specifies the ID of the log tank.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['logGroupId'] = log_group_id
    __args__['logTopicId'] = log_topic_id
    __args__['logtankId'] = logtank_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getLogtanks:getLogtanks', __args__, opts=opts, typ=GetLogtanksResult).value

    return AwaitableGetLogtanksResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        loadbalancer_id=pulumi.get(__ret__, 'loadbalancer_id'),
        log_group_id=pulumi.get(__ret__, 'log_group_id'),
        log_topic_id=pulumi.get(__ret__, 'log_topic_id'),
        logtank_id=pulumi.get(__ret__, 'logtank_id'),
        logtanks=pulumi.get(__ret__, 'logtanks'),
        region=pulumi.get(__ret__, 'region'))
def get_logtanks_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        loadbalancer_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        log_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        log_topic_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        logtank_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogtanksResult]:
    """
    Use this data source to get the list of ELB logtanks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    logtank_id = config.require_object("logtankId")
    test = huaweicloud.DedicatedElb.get_logtanks(logtank_id=logtank_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str loadbalancer_id: Specifies the ID of a load balancer
    :param _builtins.str log_group_id: Specifies the log group ID.
    :param _builtins.str log_topic_id: Specifies the log topic ID.
    :param _builtins.str logtank_id: Specifies the ID of the log tank.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['logGroupId'] = log_group_id
    __args__['logTopicId'] = log_topic_id
    __args__['logtankId'] = logtank_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DedicatedElb/getLogtanks:getLogtanks', __args__, opts=opts, typ=GetLogtanksResult)
    return __ret__.apply(lambda __response__: GetLogtanksResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        loadbalancer_id=pulumi.get(__response__, 'loadbalancer_id'),
        log_group_id=pulumi.get(__response__, 'log_group_id'),
        log_topic_id=pulumi.get(__response__, 'log_topic_id'),
        logtank_id=pulumi.get(__response__, 'logtank_id'),
        logtanks=pulumi.get(__response__, 'logtanks'),
        region=pulumi.get(__response__, 'region')))
