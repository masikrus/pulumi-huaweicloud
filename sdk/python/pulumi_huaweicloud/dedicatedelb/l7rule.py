# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['L7ruleArgs', 'L7rule']

@pulumi.input_type
class L7ruleArgs:
    def __init__(__self__, *,
                 compare_type: pulumi.Input[_builtins.str],
                 l7policy_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a L7rule resource.
        :param pulumi.Input[_builtins.str] compare_type: Specifies how requests are matched with the forwarding rule. Value options:
               + **EQUAL_TO**: Exact match.
               + **REGEX**: Regular expression match.
               + **STARTS_WITH**: Prefix match.
               
               Instructions for use:
               + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
               characters.
               + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
               + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
               + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
               marks (?) can be used as wildcard characters.
        :param pulumi.Input[_builtins.str] l7policy_id: Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] type: Specifies the L7 Rule type. Value options:
               + **HOST_NAME**: A domain name will be used for matching.
               + **PATH**: A URL will be used for matching.
               + **METHOD**: An HTTP request method will be used for matching.
               + **HEADER**: The request header will be used for matching.
               + **QUERY_STRING**: A query string will be used for matching.
               + **SOURCE_IP**: The source IP address will be used for matching.
               + **COOKIE**: The cookie will be used for matching.
               
               Changing this creates a new L7 Rule.
               
               > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
               be created for each type.
        :param pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]] conditions: Specifies the matching conditions of the forwarding rule. This parameter is available
               only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
               not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
               must be the same, whereas each value must be unique.
               The condition structure is documented below.
               
               <a name="conditions"></a>
               The `condition` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the L7 Rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match item.
               + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
               letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
               If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
               + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
               `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
               slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
               + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
               characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
               An asterisk can match zero or more characters, and a question mark can match 1 character.
               + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
               and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
               backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
               and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
               more characters, and a question mark can match 1 character.
               + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
               **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
               + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
               **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.
               
               > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        pulumi.set(__self__, "compare_type", compare_type)
        pulumi.set(__self__, "l7policy_id", l7policy_id)
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies how requests are matched with the forwarding rule. Value options:
        + **EQUAL_TO**: Exact match.
        + **REGEX**: Regular expression match.
        + **STARTS_WITH**: Prefix match.

        Instructions for use:
        + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
        characters.
        + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
        + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
        + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
        marks (?) can be used as wildcard characters.
        """
        return pulumi.get(self, "compare_type")

    @compare_type.setter
    def compare_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "compare_type", value)

    @_builtins.property
    @pulumi.getter(name="l7policyId")
    def l7policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "l7policy_id")

    @l7policy_id.setter
    def l7policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "l7policy_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the L7 Rule type. Value options:
        + **HOST_NAME**: A domain name will be used for matching.
        + **PATH**: A URL will be used for matching.
        + **METHOD**: An HTTP request method will be used for matching.
        + **HEADER**: The request header will be used for matching.
        + **QUERY_STRING**: A query string will be used for matching.
        + **SOURCE_IP**: The source IP address will be used for matching.
        + **COOKIE**: The cookie will be used for matching.

        Changing this creates a new L7 Rule.

        > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
        be created for each type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]]:
        """
        Specifies the matching conditions of the forwarding rule. This parameter is available
        only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
        not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
        must be the same, whereas each value must be unique.
        The condition structure is documented below.

        <a name="conditions"></a>
        The `condition` block supports:
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the L7 Rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the match item.
        + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
        letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
        If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
        + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
        `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
        slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
        + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
        characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
        An asterisk can match zero or more characters, and a question mark can match 1 character.
        + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
        and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
        backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
        and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
        more characters, and a question mark can match 1 character.
        + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
        **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
        + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
        **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.

        > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _L7ruleState:
    def __init__(__self__, *,
                 compare_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 l7policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering L7rule resources.
        :param pulumi.Input[_builtins.str] compare_type: Specifies how requests are matched with the forwarding rule. Value options:
               + **EQUAL_TO**: Exact match.
               + **REGEX**: Regular expression match.
               + **STARTS_WITH**: Prefix match.
               
               Instructions for use:
               + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
               characters.
               + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
               + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
               + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
               marks (?) can be used as wildcard characters.
        :param pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]] conditions: Specifies the matching conditions of the forwarding rule. This parameter is available
               only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
               not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
               must be the same, whereas each value must be unique.
               The condition structure is documented below.
               
               <a name="conditions"></a>
               The `condition` block supports:
        :param pulumi.Input[_builtins.str] created_at: The create time of the L7 Rule.
        :param pulumi.Input[_builtins.str] l7policy_id: Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] region: The region in which to create the L7 Rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] type: Specifies the L7 Rule type. Value options:
               + **HOST_NAME**: A domain name will be used for matching.
               + **PATH**: A URL will be used for matching.
               + **METHOD**: An HTTP request method will be used for matching.
               + **HEADER**: The request header will be used for matching.
               + **QUERY_STRING**: A query string will be used for matching.
               + **SOURCE_IP**: The source IP address will be used for matching.
               + **COOKIE**: The cookie will be used for matching.
               
               Changing this creates a new L7 Rule.
               
               > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
               be created for each type.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the L7 Rule.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match item.
               + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
               letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
               If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
               + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
               `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
               slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
               + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
               characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
               An asterisk can match zero or more characters, and a question mark can match 1 character.
               + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
               and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
               backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
               and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
               more characters, and a question mark can match 1 character.
               + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
               **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
               + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
               **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.
               
               > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        if compare_type is not None:
            pulumi.set(__self__, "compare_type", compare_type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if l7policy_id is not None:
            pulumi.set(__self__, "l7policy_id", l7policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies how requests are matched with the forwarding rule. Value options:
        + **EQUAL_TO**: Exact match.
        + **REGEX**: Regular expression match.
        + **STARTS_WITH**: Prefix match.

        Instructions for use:
        + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
        characters.
        + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
        + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
        + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
        marks (?) can be used as wildcard characters.
        """
        return pulumi.get(self, "compare_type")

    @compare_type.setter
    def compare_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compare_type", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]]:
        """
        Specifies the matching conditions of the forwarding rule. This parameter is available
        only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
        not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
        must be the same, whereas each value must be unique.
        The condition structure is documented below.

        <a name="conditions"></a>
        The `condition` block supports:
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['L7ruleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the L7 Rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="l7policyId")
    def l7policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "l7policy_id")

    @l7policy_id.setter
    def l7policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "l7policy_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the L7 Rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the L7 Rule type. Value options:
        + **HOST_NAME**: A domain name will be used for matching.
        + **PATH**: A URL will be used for matching.
        + **METHOD**: An HTTP request method will be used for matching.
        + **HEADER**: The request header will be used for matching.
        + **QUERY_STRING**: A query string will be used for matching.
        + **SOURCE_IP**: The source IP address will be used for matching.
        + **COOKIE**: The cookie will be used for matching.

        Changing this creates a new L7 Rule.

        > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
        be created for each type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the L7 Rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the match item.
        + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
        letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
        If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
        + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
        `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
        slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
        + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
        characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
        An asterisk can match zero or more characters, and a question mark can match 1 character.
        + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
        and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
        backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
        and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
        more characters, and a question mark can match 1 character.
        + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
        **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
        + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
        **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.

        > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:DedicatedElb/l7rule:L7rule")
class L7rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compare_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['L7ruleConditionArgs', 'L7ruleConditionArgsDict']]]]] = None,
                 l7policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an ELB L7 Rule resource within HuaweiCloud.

        ## Example Usage

        ### Create by value

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="PATH",
            compare_type="EQUAL_TO",
            value="/api")
        ```

        ### Create by conditions and type is HOST_NAME

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="HOST_NAME",
            compare_type="EQUAL_TO",
            conditions=[{
                "value": "test.com",
            }])
        ```

        ### Create by conditions and type is HEADER

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="HEADER",
            compare_type="EQUAL_TO",
            conditions=[{
                "key": "testKey",
                "value": "testValue",
            }])
        ```

        ### Create by conditions and type is SOURCE_IP

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="SOURCE_IP",
            compare_type="EQUAL_TO",
            conditions=[{
                "value": "192.168.0.2/32",
            }])
        ```

        ## Import

        ELB L7 rule can be imported using the `l7policy_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedElb/l7rule:L7rule rule_1 <l7policy_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compare_type: Specifies how requests are matched with the forwarding rule. Value options:
               + **EQUAL_TO**: Exact match.
               + **REGEX**: Regular expression match.
               + **STARTS_WITH**: Prefix match.
               
               Instructions for use:
               + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
               characters.
               + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
               + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
               + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
               marks (?) can be used as wildcard characters.
        :param pulumi.Input[Sequence[pulumi.Input[Union['L7ruleConditionArgs', 'L7ruleConditionArgsDict']]]] conditions: Specifies the matching conditions of the forwarding rule. This parameter is available
               only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
               not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
               must be the same, whereas each value must be unique.
               The condition structure is documented below.
               
               <a name="conditions"></a>
               The `condition` block supports:
        :param pulumi.Input[_builtins.str] l7policy_id: Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] region: The region in which to create the L7 Rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] type: Specifies the L7 Rule type. Value options:
               + **HOST_NAME**: A domain name will be used for matching.
               + **PATH**: A URL will be used for matching.
               + **METHOD**: An HTTP request method will be used for matching.
               + **HEADER**: The request header will be used for matching.
               + **QUERY_STRING**: A query string will be used for matching.
               + **SOURCE_IP**: The source IP address will be used for matching.
               + **COOKIE**: The cookie will be used for matching.
               
               Changing this creates a new L7 Rule.
               
               > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
               be created for each type.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match item.
               + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
               letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
               If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
               + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
               `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
               slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
               + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
               characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
               An asterisk can match zero or more characters, and a question mark can match 1 character.
               + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
               and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
               backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
               and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
               more characters, and a question mark can match 1 character.
               + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
               **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
               + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
               **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.
               
               > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L7ruleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an ELB L7 Rule resource within HuaweiCloud.

        ## Example Usage

        ### Create by value

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="PATH",
            compare_type="EQUAL_TO",
            value="/api")
        ```

        ### Create by conditions and type is HOST_NAME

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="HOST_NAME",
            compare_type="EQUAL_TO",
            conditions=[{
                "value": "test.com",
            }])
        ```

        ### Create by conditions and type is HEADER

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="HEADER",
            compare_type="EQUAL_TO",
            conditions=[{
                "key": "testKey",
                "value": "testValue",
            }])
        ```

        ### Create by conditions and type is SOURCE_IP

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        l7policy_id = config.require_object("l7policyId")
        l7rule1 = huaweicloud.dedicatedelb.L7rule("l7rule_1",
            l7policy_id=l7policy_id,
            type="SOURCE_IP",
            compare_type="EQUAL_TO",
            conditions=[{
                "value": "192.168.0.2/32",
            }])
        ```

        ## Import

        ELB L7 rule can be imported using the `l7policy_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DedicatedElb/l7rule:L7rule rule_1 <l7policy_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param L7ruleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L7ruleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compare_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['L7ruleConditionArgs', 'L7ruleConditionArgsDict']]]]] = None,
                 l7policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L7ruleArgs.__new__(L7ruleArgs)

            if compare_type is None and not opts.urn:
                raise TypeError("Missing required property 'compare_type'")
            __props__.__dict__["compare_type"] = compare_type
            __props__.__dict__["conditions"] = conditions
            if l7policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'l7policy_id'")
            __props__.__dict__["l7policy_id"] = l7policy_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["value"] = value
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(L7rule, __self__).__init__(
            'huaweicloud:DedicatedElb/l7rule:L7rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compare_type: Optional[pulumi.Input[_builtins.str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['L7ruleConditionArgs', 'L7ruleConditionArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            l7policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'L7rule':
        """
        Get an existing L7rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compare_type: Specifies how requests are matched with the forwarding rule. Value options:
               + **EQUAL_TO**: Exact match.
               + **REGEX**: Regular expression match.
               + **STARTS_WITH**: Prefix match.
               
               Instructions for use:
               + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
               characters.
               + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
               + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
               + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
               marks (?) can be used as wildcard characters.
        :param pulumi.Input[Sequence[pulumi.Input[Union['L7ruleConditionArgs', 'L7ruleConditionArgsDict']]]] conditions: Specifies the matching conditions of the forwarding rule. This parameter is available
               only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
               not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
               must be the same, whereas each value must be unique.
               The condition structure is documented below.
               
               <a name="conditions"></a>
               The `condition` block supports:
        :param pulumi.Input[_builtins.str] created_at: The create time of the L7 Rule.
        :param pulumi.Input[_builtins.str] l7policy_id: Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] region: The region in which to create the L7 Rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new L7 Rule.
        :param pulumi.Input[_builtins.str] type: Specifies the L7 Rule type. Value options:
               + **HOST_NAME**: A domain name will be used for matching.
               + **PATH**: A URL will be used for matching.
               + **METHOD**: An HTTP request method will be used for matching.
               + **HEADER**: The request header will be used for matching.
               + **QUERY_STRING**: A query string will be used for matching.
               + **SOURCE_IP**: The source IP address will be used for matching.
               + **COOKIE**: The cookie will be used for matching.
               
               Changing this creates a new L7 Rule.
               
               > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
               be created for each type.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the L7 Rule.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match item.
               + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
               letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
               If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
               + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
               `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
               slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
               + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
               characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
               An asterisk can match zero or more characters, and a question mark can match 1 character.
               + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
               and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
               backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
               and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
               more characters, and a question mark can match 1 character.
               + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
               **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
               + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
               **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.
               
               > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _L7ruleState.__new__(_L7ruleState)

        __props__.__dict__["compare_type"] = compare_type
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["l7policy_id"] = l7policy_id
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        return L7rule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies how requests are matched with the forwarding rule. Value options:
        + **EQUAL_TO**: Exact match.
        + **REGEX**: Regular expression match.
        + **STARTS_WITH**: Prefix match.

        Instructions for use:
        + If `type` is set to **HOST_NAME**, the value can only be **EQUAL_TO**, and asterisks (*) can be used as wildcard
        characters.
        + If `type` is set to **PATH**, the value can be **REGEX**, **STARTS_WITH**, or **EQUAL_TO**.
        + If `type` is set to **METHOD** or **SOURCE_IP**, the value can only be **EQUAL_TO**.
        + If `type` is set to **HEADER** or **QUERY_STRING**, the value can only be **EQUAL_TO**, asterisks (*) and question
        marks (?) can be used as wildcard characters.
        """
        return pulumi.get(self, "compare_type")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.L7ruleCondition']]:
        """
        Specifies the matching conditions of the forwarding rule. This parameter is available
        only when `advanced_forwarding_enabled` of the listener is set to **true**. If it is specified, parameter `value` will
        not take effect, and the value will contain all conditions configured for the forwarding rule. The keys in the list
        must be the same, whereas each value must be unique.
        The condition structure is documented below.

        <a name="conditions"></a>
        The `condition` block supports:
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the L7 Rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="l7policyId")
    def l7policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the L7 Policy. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "l7policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the L7 Rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new L7 Rule.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the L7 Rule type. Value options:
        + **HOST_NAME**: A domain name will be used for matching.
        + **PATH**: A URL will be used for matching.
        + **METHOD**: An HTTP request method will be used for matching.
        + **HEADER**: The request header will be used for matching.
        + **QUERY_STRING**: A query string will be used for matching.
        + **SOURCE_IP**: The source IP address will be used for matching.
        + **COOKIE**: The cookie will be used for matching.

        Changing this creates a new L7 Rule.

        > **NOTE:** If `type` is set to **HOST_NAME**, **PATH**, **METHOD**, or **SOURCE_IP**, only one forwarding rule can
        be created for each type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the L7 Rule.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the value of the match item.
        + If `type` is set to **HOST_NAME**, it indicates the domain name, which can contain 1 to 128 characters, including
        letters, digits, hyphens (-), periods (.), and asterisks (), and must start with a letter, digit, or asterisk ().
        If you want to use a wildcard domain name, enter an asterisk (*) as the leftmost label of the domain name.
        + If `type` is set to **PATH**, it indicates the request path, which can contain 1 to 128 characters. If
        `compare_type` is set to **STARTS_WITH** or **EQUAL_TO** for the forwarding rule, the value must start with a
        slash (/) and can contain only letters, digits, and special characters _~';@^-%#&$.*+?,=!:|/()[]{}.
        + If `type` is set to **HEADER**, it indicates the value of the HTTP header parameter. The value can contain 1 to 128
        characters. Asterisks (*) and question marks (?)are allowed, but spaces and double quotation marks are not allowed.
        An asterisk can match zero or more characters, and a question mark can match 1 character.
        + If `type` is set to **QUERY_STRING**, it indicates the value of the query parameter. The value is case-sensitive
        and can contain 1 to 128 characters. Spaces, square brackets ([]), curly brackets ({}), angle brackets (<>),
        backslashes (), double quotation marks (""), pound signs (#), ampersands (&), vertical bars (|), percent signs (%),
        and tildes (~) are not supported. Asterisks (*)and question marks (?) are allowed. An asterisk can match zero or
        more characters, and a question mark can match 1 character.
        + If `type` is set to **METHOD**, it indicates the HTTP method. The value can be **GET**, **PUT**, **POST**,
        **DELETE**, **PATCH**, **HEAD**, or **OPTIONS**.
        + If `type` is set to **SOURCE_IP**, it indicates the source IP address of the request. The value is an **IPv4** or
        **IPv6** CIDR block, for example, 192.168.0.2/32 or 2049::49/64.

        > **NOTE:** All values in the conditions list in the same rule must be unique.
        """
        return pulumi.get(self, "value")

