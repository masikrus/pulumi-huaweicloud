# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceHostPropertyArgs',
    'InstanceHostPropertyArgsDict',
    'InstanceHostPropertyAvailableInstanceCapacityArgs',
    'InstanceHostPropertyAvailableInstanceCapacityArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceHostPropertyArgsDict(TypedDict):
        available_instance_capacities: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyAvailableInstanceCapacityArgsDict']]]]
        """
        Indicates the flavors of ECSs placed on the dedicated host.
        The available_instance_capacities structure is documented below.
        """
        cores: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the number of physical cores on the dedicated host.
        """
        host_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the type of the dedicated host.
        """
        host_type_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of the dedicated host type.
        """
        memory: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the size of physical memory on the dedicated host.
        """
        sockets: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the number of physical sockets on the dedicated host.
        """
        vcpus: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the number of vCPUs on the dedicated host.
        """
elif False:
    InstanceHostPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceHostPropertyArgs:
    def __init__(__self__, *,
                 available_instance_capacities: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyAvailableInstanceCapacityArgs']]]] = None,
                 cores: Optional[pulumi.Input[_builtins.int]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type_name: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.int]] = None,
                 sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyAvailableInstanceCapacityArgs']]] available_instance_capacities: Indicates the flavors of ECSs placed on the dedicated host.
               The available_instance_capacities structure is documented below.
        :param pulumi.Input[_builtins.int] cores: Indicates the number of physical cores on the dedicated host.
        :param pulumi.Input[_builtins.str] host_type: Specifies the type of the dedicated host.
        :param pulumi.Input[_builtins.str] host_type_name: Indicates the name of the dedicated host type.
        :param pulumi.Input[_builtins.int] memory: Indicates the size of physical memory on the dedicated host.
        :param pulumi.Input[_builtins.int] sockets: Indicates the number of physical sockets on the dedicated host.
        :param pulumi.Input[_builtins.int] vcpus: Indicates the number of vCPUs on the dedicated host.
        """
        if available_instance_capacities is not None:
            pulumi.set(__self__, "available_instance_capacities", available_instance_capacities)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if host_type_name is not None:
            pulumi.set(__self__, "host_type_name", host_type_name)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availableInstanceCapacities")
    def available_instance_capacities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyAvailableInstanceCapacityArgs']]]]:
        """
        Indicates the flavors of ECSs placed on the dedicated host.
        The available_instance_capacities structure is documented below.
        """
        return pulumi.get(self, "available_instance_capacities")

    @available_instance_capacities.setter
    def available_instance_capacities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyAvailableInstanceCapacityArgs']]]]):
        pulumi.set(self, "available_instance_capacities", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of physical cores on the dedicated host.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_type", value)

    @_builtins.property
    @pulumi.getter(name="hostTypeName")
    def host_type_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of the dedicated host type.
        """
        return pulumi.get(self, "host_type_name")

    @host_type_name.setter
    def host_type_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_type_name", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the size of physical memory on the dedicated host.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of physical sockets on the dedicated host.
        """
        return pulumi.get(self, "sockets")

    @sockets.setter
    def sockets(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sockets", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of vCPUs on the dedicated host.
        """
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vcpus", value)


if not MYPY:
    class InstanceHostPropertyAvailableInstanceCapacityArgsDict(TypedDict):
        flavor: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the specifications of ECSs that can be created.
        """
elif False:
    InstanceHostPropertyAvailableInstanceCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceHostPropertyAvailableInstanceCapacityArgs:
    def __init__(__self__, *,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] flavor: Indicates the specifications of ECSs that can be created.
        """
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the specifications of ECSs that can be created.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)


