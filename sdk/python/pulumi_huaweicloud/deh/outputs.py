# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceHostProperty',
    'InstanceHostPropertyAvailableInstanceCapacity',
    'GetInstancesDedicatedHostResult',
    'GetInstancesDedicatedHostHostPropertyResult',
    'GetInstancesDedicatedHostHostPropertyAvailableInstanceCapacityResult',
    'GetTypesDedicatedHostTypeResult',
]

@pulumi.output_type
class InstanceHostProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableInstanceCapacities":
            suggest = "available_instance_capacities"
        elif key == "hostType":
            suggest = "host_type"
        elif key == "hostTypeName":
            suggest = "host_type_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceHostProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceHostProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceHostProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available_instance_capacities: Optional[Sequence['outputs.InstanceHostPropertyAvailableInstanceCapacity']] = None,
                 cores: Optional[_builtins.int] = None,
                 host_type: Optional[_builtins.str] = None,
                 host_type_name: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.int] = None,
                 sockets: Optional[_builtins.int] = None,
                 vcpus: Optional[_builtins.int] = None):
        """
        :param Sequence['InstanceHostPropertyAvailableInstanceCapacityArgs'] available_instance_capacities: Indicates the flavors of ECSs placed on the dedicated host.
               The available_instance_capacities structure is documented below.
        :param _builtins.int cores: Indicates the number of physical cores on the dedicated host.
        :param _builtins.str host_type: Specifies the type of the dedicated host.
        :param _builtins.str host_type_name: Indicates the name of the dedicated host type.
        :param _builtins.int memory: Indicates the size of physical memory on the dedicated host.
        :param _builtins.int sockets: Indicates the number of physical sockets on the dedicated host.
        :param _builtins.int vcpus: Indicates the number of vCPUs on the dedicated host.
        """
        if available_instance_capacities is not None:
            pulumi.set(__self__, "available_instance_capacities", available_instance_capacities)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if host_type_name is not None:
            pulumi.set(__self__, "host_type_name", host_type_name)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availableInstanceCapacities")
    def available_instance_capacities(self) -> Optional[Sequence['outputs.InstanceHostPropertyAvailableInstanceCapacity']]:
        """
        Indicates the flavors of ECSs placed on the dedicated host.
        The available_instance_capacities structure is documented below.
        """
        return pulumi.get(self, "available_instance_capacities")

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[_builtins.int]:
        """
        Indicates the number of physical cores on the dedicated host.
        """
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter(name="hostTypeName")
    def host_type_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the dedicated host type.
        """
        return pulumi.get(self, "host_type_name")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.int]:
        """
        Indicates the size of physical memory on the dedicated host.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> Optional[_builtins.int]:
        """
        Indicates the number of physical sockets on the dedicated host.
        """
        return pulumi.get(self, "sockets")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.int]:
        """
        Indicates the number of vCPUs on the dedicated host.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class InstanceHostPropertyAvailableInstanceCapacity(dict):
    def __init__(__self__, *,
                 flavor: Optional[_builtins.str] = None):
        """
        :param _builtins.str flavor: Indicates the specifications of ECSs that can be created.
        """
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[_builtins.str]:
        """
        Indicates the specifications of ECSs that can be created.
        """
        return pulumi.get(self, "flavor")


@pulumi.output_type
class GetInstancesDedicatedHostResult(dict):
    def __init__(__self__, *,
                 allocated_at: _builtins.str,
                 auto_placement: _builtins.str,
                 availability_zone: _builtins.str,
                 available_memory: _builtins.int,
                 available_vcpus: _builtins.int,
                 dedicated_host_id: _builtins.str,
                 host_properties: Sequence['outputs.GetInstancesDedicatedHostHostPropertyResult'],
                 instance_total: _builtins.int,
                 instance_uuids: Sequence[_builtins.str],
                 name: _builtins.str,
                 state: _builtins.str,
                 sys_tags: Mapping[str, _builtins.str],
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str allocated_at: Indicates the time when the dedicated host is allocated.
        :param _builtins.str auto_placement: Indicates whether to allow an ECS to be placed on any available dedicated host
               if its dedicated host ID is not specified during its creation.
        :param _builtins.str availability_zone: Specifies the AZ to which the dedicated host belongs.
        :param _builtins.int available_memory: Indicates the available memory size of the dedicated host.
        :param _builtins.int available_vcpus: Indicates the number of available vCPUs for the dedicated host.
        :param _builtins.str dedicated_host_id: Specifies the ID of the dedicated host.
        :param Sequence['GetInstancesDedicatedHostHostPropertyArgs'] host_properties: Indicates the properties of the dedicated host.
        :param _builtins.int instance_total: Indicates the total number of ECSs on the dedicated host.
        :param Sequence[_builtins.str] instance_uuids: Indicates the UUIDs of the ECSs running on the dedicated host.
        :param _builtins.str name: Specifies the name of the dedicated host.
        :param _builtins.str state: Specifies the status of the dedicated host.
               Value options: **available**, **fault** or **released**.
        :param Mapping[str, _builtins.str] sys_tags: Indicates the system tags of the dedicated host.
        :param Mapping[str, _builtins.str] tags: Specifies the tags of the dedicated host.
        """
        pulumi.set(__self__, "allocated_at", allocated_at)
        pulumi.set(__self__, "auto_placement", auto_placement)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "available_memory", available_memory)
        pulumi.set(__self__, "available_vcpus", available_vcpus)
        pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        pulumi.set(__self__, "host_properties", host_properties)
        pulumi.set(__self__, "instance_total", instance_total)
        pulumi.set(__self__, "instance_uuids", instance_uuids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sys_tags", sys_tags)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="allocatedAt")
    def allocated_at(self) -> _builtins.str:
        """
        Indicates the time when the dedicated host is allocated.
        """
        return pulumi.get(self, "allocated_at")

    @_builtins.property
    @pulumi.getter(name="autoPlacement")
    def auto_placement(self) -> _builtins.str:
        """
        Indicates whether to allow an ECS to be placed on any available dedicated host
        if its dedicated host ID is not specified during its creation.
        """
        return pulumi.get(self, "auto_placement")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the AZ to which the dedicated host belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> _builtins.int:
        """
        Indicates the available memory size of the dedicated host.
        """
        return pulumi.get(self, "available_memory")

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> _builtins.int:
        """
        Indicates the number of available vCPUs for the dedicated host.
        """
        return pulumi.get(self, "available_vcpus")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> _builtins.str:
        """
        Specifies the ID of the dedicated host.
        """
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="hostProperties")
    def host_properties(self) -> Sequence['outputs.GetInstancesDedicatedHostHostPropertyResult']:
        """
        Indicates the properties of the dedicated host.
        """
        return pulumi.get(self, "host_properties")

    @_builtins.property
    @pulumi.getter(name="instanceTotal")
    def instance_total(self) -> _builtins.int:
        """
        Indicates the total number of ECSs on the dedicated host.
        """
        return pulumi.get(self, "instance_total")

    @_builtins.property
    @pulumi.getter(name="instanceUuids")
    def instance_uuids(self) -> Sequence[_builtins.str]:
        """
        Indicates the UUIDs of the ECSs running on the dedicated host.
        """
        return pulumi.get(self, "instance_uuids")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the dedicated host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the status of the dedicated host.
        Value options: **available**, **fault** or **released**.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the system tags of the dedicated host.
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags of the dedicated host.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInstancesDedicatedHostHostPropertyResult(dict):
    def __init__(__self__, *,
                 available_instance_capacities: Sequence['outputs.GetInstancesDedicatedHostHostPropertyAvailableInstanceCapacityResult'],
                 cores: _builtins.int,
                 host_type: _builtins.str,
                 host_type_name: _builtins.str,
                 memory: _builtins.int,
                 sockets: _builtins.int,
                 vcpus: _builtins.int):
        """
        :param Sequence['GetInstancesDedicatedHostHostPropertyAvailableInstanceCapacityArgs'] available_instance_capacities: Indicates the flavors of ECSs placed on the dedicated host.
        :param _builtins.int cores: Indicates the number of physical cores on the dedicated host.
        :param _builtins.str host_type: Specifies the type of the dedicated host.
        :param _builtins.str host_type_name: Specifies the name of the dedicated host type.
        :param _builtins.int memory: Indicates the size of physical memory on the dedicated host.
        :param _builtins.int sockets: Indicates the number of physical sockets on the dedicated host.
        :param _builtins.int vcpus: Indicates the number of vCPUs on the dedicated host.
        """
        pulumi.set(__self__, "available_instance_capacities", available_instance_capacities)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "host_type_name", host_type_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "sockets", sockets)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availableInstanceCapacities")
    def available_instance_capacities(self) -> Sequence['outputs.GetInstancesDedicatedHostHostPropertyAvailableInstanceCapacityResult']:
        """
        Indicates the flavors of ECSs placed on the dedicated host.
        """
        return pulumi.get(self, "available_instance_capacities")

    @_builtins.property
    @pulumi.getter
    def cores(self) -> _builtins.int:
        """
        Indicates the number of physical cores on the dedicated host.
        """
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> _builtins.str:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter(name="hostTypeName")
    def host_type_name(self) -> _builtins.str:
        """
        Specifies the name of the dedicated host type.
        """
        return pulumi.get(self, "host_type_name")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Indicates the size of physical memory on the dedicated host.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> _builtins.int:
        """
        Indicates the number of physical sockets on the dedicated host.
        """
        return pulumi.get(self, "sockets")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Indicates the number of vCPUs on the dedicated host.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstancesDedicatedHostHostPropertyAvailableInstanceCapacityResult(dict):
    def __init__(__self__, *,
                 flavor: _builtins.str):
        """
        :param _builtins.str flavor: Specifies the flavor ID.
        """
        pulumi.set(__self__, "flavor", flavor)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Specifies the flavor ID.
        """
        return pulumi.get(self, "flavor")


@pulumi.output_type
class GetTypesDedicatedHostTypeResult(dict):
    def __init__(__self__, *,
                 host_type: _builtins.str,
                 host_type_name: _builtins.str):
        """
        :param _builtins.str host_type: Indicates the DeH type.
        :param _builtins.str host_type_name: Indicates the name of the DeH type.
        """
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "host_type_name", host_type_name)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> _builtins.str:
        """
        Indicates the DeH type.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter(name="hostTypeName")
    def host_type_name(self) -> _builtins.str:
        """
        Indicates the name of the DeH type.
        """
        return pulumi.get(self, "host_type_name")


