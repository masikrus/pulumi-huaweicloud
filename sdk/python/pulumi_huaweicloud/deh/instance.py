# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[_builtins.str],
                 host_type: pulumi.Input[_builtins.str],
                 auto_placement: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the AZ to which the dedicated host belongs.
        :param pulumi.Input[_builtins.str] host_type: Specifies the type of the dedicated host.
        :param pulumi.Input[_builtins.str] auto_placement: Specifies whether to allow an ECS to be placed on any available dedicated host if
               its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the dedicated host. Value options:
               **prePaid**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the metadata of the dedicated host.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
               cannot start or end with spaces.
        :param pulumi.Input[_builtins.str] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit. Value options: **month** and
               **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the dedicated host.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "host_type", host_type)
        if auto_placement is not None:
            pulumi.set(__self__, "auto_placement", auto_placement)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AZ to which the dedicated host belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_type", value)

    @_builtins.property
    @pulumi.getter(name="autoPlacement")
    def auto_placement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to allow an ECS to be placed on any available dedicated host if
        its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        """
        return pulumi.get(self, "auto_placement")

    @auto_placement.setter
    def auto_placement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_placement", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the dedicated host. Value options:
        **prePaid**.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the metadata of the dedicated host.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
        cannot start or end with spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit. Value options: **month** and
        **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the dedicated host.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 allocated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_placement: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 available_memory: Optional[pulumi.Input[_builtins.int]] = None,
                 available_vcpus: Optional[pulumi.Input[_builtins.int]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_properties: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyArgs']]]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_total: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_uuids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] allocated_at: Indicates the time when the dedicated host is allocated.
        :param pulumi.Input[_builtins.str] auto_placement: Specifies whether to allow an ECS to be placed on any available dedicated host if
               its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the AZ to which the dedicated host belongs.
        :param pulumi.Input[_builtins.int] available_memory: Indicates the available memory size of dedicated host.
        :param pulumi.Input[_builtins.int] available_vcpus: Indicates the number of available vCPUs of dedicated host.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the dedicated host. Value options:
               **prePaid**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyArgs']]] host_properties: Indicates the properties of the dedicated host.
               The host_properties structure is documented below.
        :param pulumi.Input[_builtins.str] host_type: Specifies the type of the dedicated host.
        :param pulumi.Input[_builtins.int] instance_total: Indicates the total number of ECSs on the dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_uuids: Indicates the UUIDs of the ECSs running on the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the metadata of the dedicated host.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
               cannot start or end with spaces.
        :param pulumi.Input[_builtins.str] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit. Value options: **month** and
               **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Indicates the status of the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] sys_tags: Indicates the system tags of the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the dedicated host.
        """
        if allocated_at is not None:
            pulumi.set(__self__, "allocated_at", allocated_at)
        if auto_placement is not None:
            pulumi.set(__self__, "auto_placement", auto_placement)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if available_memory is not None:
            pulumi.set(__self__, "available_memory", available_memory)
        if available_vcpus is not None:
            pulumi.set(__self__, "available_vcpus", available_vcpus)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_properties is not None:
            pulumi.set(__self__, "host_properties", host_properties)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if instance_total is not None:
            pulumi.set(__self__, "instance_total", instance_total)
        if instance_uuids is not None:
            pulumi.set(__self__, "instance_uuids", instance_uuids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sys_tags is not None:
            pulumi.set(__self__, "sys_tags", sys_tags)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="allocatedAt")
    def allocated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the dedicated host is allocated.
        """
        return pulumi.get(self, "allocated_at")

    @allocated_at.setter
    def allocated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allocated_at", value)

    @_builtins.property
    @pulumi.getter(name="autoPlacement")
    def auto_placement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to allow an ECS to be placed on any available dedicated host if
        its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        """
        return pulumi.get(self, "auto_placement")

    @auto_placement.setter
    def auto_placement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_placement", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ to which the dedicated host belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the available memory size of dedicated host.
        """
        return pulumi.get(self, "available_memory")

    @available_memory.setter
    def available_memory(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "available_memory", value)

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of available vCPUs of dedicated host.
        """
        return pulumi.get(self, "available_vcpus")

    @available_vcpus.setter
    def available_vcpus(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "available_vcpus", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the dedicated host. Value options:
        **prePaid**.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="hostProperties")
    def host_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyArgs']]]]:
        """
        Indicates the properties of the dedicated host.
        The host_properties structure is documented below.
        """
        return pulumi.get(self, "host_properties")

    @host_properties.setter
    def host_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHostPropertyArgs']]]]):
        pulumi.set(self, "host_properties", value)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceTotal")
    def instance_total(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of ECSs on the dedicated host.
        """
        return pulumi.get(self, "instance_total")

    @instance_total.setter
    def instance_total(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_total", value)

    @_builtins.property
    @pulumi.getter(name="instanceUuids")
    def instance_uuids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the UUIDs of the ECSs running on the dedicated host.
        """
        return pulumi.get(self, "instance_uuids")

    @instance_uuids.setter
    def instance_uuids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_uuids", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the metadata of the dedicated host.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
        cannot start or end with spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit. Value options: **month** and
        **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the dedicated host.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Indicates the system tags of the dedicated host.
        """
        return pulumi.get(self, "sys_tags")

    @sys_tags.setter
    def sys_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sys_tags", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the dedicated host.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:deh/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_placement: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a DEH instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        availability_zone = config.require_object("availabilityZone")
        name = config.require_object("name")
        host_type = config.require_object("hostType")
        test = huaweicloud.deh.Instance("test",
            availability_zone=availability_zone,
            name="deh_name",
            host_type=host_type)
        ```

        ## Import

        The DEH instance can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:deh/instance:Instance test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `period_unit`,`period`, `auto_renew` and

        `enterprise_project_id`. It is generally recommended running `pulumi preview` after importing a DEH instance. You can

        then decide if changes should be applied to the DEH instance, or the resource definition should be updated to align with

        the mesh. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_deh_instance" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              period_unit, period, auto_renew, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_placement: Specifies whether to allow an ECS to be placed on any available dedicated host if
               its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the AZ to which the dedicated host belongs.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the dedicated host. Value options:
               **prePaid**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] host_type: Specifies the type of the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the metadata of the dedicated host.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
               cannot start or end with spaces.
        :param pulumi.Input[_builtins.str] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit. Value options: **month** and
               **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the dedicated host.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DEH instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        availability_zone = config.require_object("availabilityZone")
        name = config.require_object("name")
        host_type = config.require_object("hostType")
        test = huaweicloud.deh.Instance("test",
            availability_zone=availability_zone,
            name="deh_name",
            host_type=host_type)
        ```

        ## Import

        The DEH instance can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:deh/instance:Instance test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `period_unit`,`period`, `auto_renew` and

        `enterprise_project_id`. It is generally recommended running `pulumi preview` after importing a DEH instance. You can

        then decide if changes should be applied to the DEH instance, or the resource definition should be updated to align with

        the mesh. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_deh_instance" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              period_unit, period, auto_renew, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_placement: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_placement"] = auto_placement
            __props__.__dict__["auto_renew"] = auto_renew
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if host_type is None and not opts.urn:
                raise TypeError("Missing required property 'host_type'")
            __props__.__dict__["host_type"] = host_type
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["allocated_at"] = None
            __props__.__dict__["available_memory"] = None
            __props__.__dict__["available_vcpus"] = None
            __props__.__dict__["host_properties"] = None
            __props__.__dict__["instance_total"] = None
            __props__.__dict__["instance_uuids"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["sys_tags"] = None
        super(Instance, __self__).__init__(
            'huaweicloud:deh/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocated_at: Optional[pulumi.Input[_builtins.str]] = None,
            auto_placement: Optional[pulumi.Input[_builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            available_memory: Optional[pulumi.Input[_builtins.int]] = None,
            available_vcpus: Optional[pulumi.Input[_builtins.int]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_properties: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceHostPropertyArgs', 'InstanceHostPropertyArgsDict']]]]] = None,
            host_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_total: Optional[pulumi.Input[_builtins.int]] = None,
            instance_uuids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.str]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            sys_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allocated_at: Indicates the time when the dedicated host is allocated.
        :param pulumi.Input[_builtins.str] auto_placement: Specifies whether to allow an ECS to be placed on any available dedicated host if
               its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the AZ to which the dedicated host belongs.
        :param pulumi.Input[_builtins.int] available_memory: Indicates the available memory size of dedicated host.
        :param pulumi.Input[_builtins.int] available_vcpus: Indicates the number of available vCPUs of dedicated host.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the dedicated host. Value options:
               **prePaid**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceHostPropertyArgs', 'InstanceHostPropertyArgsDict']]]] host_properties: Indicates the properties of the dedicated host.
               The host_properties structure is documented below.
        :param pulumi.Input[_builtins.str] host_type: Specifies the type of the dedicated host.
        :param pulumi.Input[_builtins.int] instance_total: Indicates the total number of ECSs on the dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_uuids: Indicates the UUIDs of the ECSs running on the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the metadata of the dedicated host.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
               cannot start or end with spaces.
        :param pulumi.Input[_builtins.str] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit. Value options: **month** and
               **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Indicates the status of the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] sys_tags: Indicates the system tags of the dedicated host.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the dedicated host.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["allocated_at"] = allocated_at
        __props__.__dict__["auto_placement"] = auto_placement
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["available_memory"] = available_memory
        __props__.__dict__["available_vcpus"] = available_vcpus
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["host_properties"] = host_properties
        __props__.__dict__["host_type"] = host_type
        __props__.__dict__["instance_total"] = instance_total
        __props__.__dict__["instance_uuids"] = instance_uuids
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["state"] = state
        __props__.__dict__["sys_tags"] = sys_tags
        __props__.__dict__["tags"] = tags
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allocatedAt")
    def allocated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the dedicated host is allocated.
        """
        return pulumi.get(self, "allocated_at")

    @_builtins.property
    @pulumi.getter(name="autoPlacement")
    def auto_placement(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to allow an ECS to be placed on any available dedicated host if
        its dedicated host ID is not specified during its creation. Value options: **on** and **off**.
        """
        return pulumi.get(self, "auto_placement")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Value options: **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AZ to which the dedicated host belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the available memory size of dedicated host.
        """
        return pulumi.get(self, "available_memory")

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of available vCPUs of dedicated host.
        """
        return pulumi.get(self, "available_vcpus")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the dedicated host. Value options:
        **prePaid**.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostProperties")
    def host_properties(self) -> pulumi.Output[Sequence['outputs.InstanceHostProperty']]:
        """
        Indicates the properties of the dedicated host.
        The host_properties structure is documented below.
        """
        return pulumi.get(self, "host_properties")

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter(name="instanceTotal")
    def instance_total(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of ECSs on the dedicated host.
        """
        return pulumi.get(self, "instance_total")

    @_builtins.property
    @pulumi.getter(name="instanceUuids")
    def instance_uuids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the UUIDs of the ECSs running on the dedicated host.
        """
        return pulumi.get(self, "instance_uuids")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the metadata of the dedicated host.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the dedicated host. It can contain a maximum of 255 characters and
        cannot start or end with spaces.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period unit. Value options: **month** and
        **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the dedicated host.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Indicates the system tags of the dedicated host.
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the dedicated host.
        """
        return pulumi.get(self, "tags")

