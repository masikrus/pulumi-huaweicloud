# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, availability_zone=None, dedicated_host_id=None, dedicated_hosts=None, flavor=None, host_type=None, host_type_name=None, id=None, instance_uuid=None, name=None, region=None, state=None, tags=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if dedicated_host_id and not isinstance(dedicated_host_id, str):
            raise TypeError("Expected argument 'dedicated_host_id' to be a str")
        pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if dedicated_hosts and not isinstance(dedicated_hosts, list):
            raise TypeError("Expected argument 'dedicated_hosts' to be a list")
        pulumi.set(__self__, "dedicated_hosts", dedicated_hosts)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if host_type and not isinstance(host_type, str):
            raise TypeError("Expected argument 'host_type' to be a str")
        pulumi.set(__self__, "host_type", host_type)
        if host_type_name and not isinstance(host_type_name, str):
            raise TypeError("Expected argument 'host_type_name' to be a str")
        pulumi.set(__self__, "host_type_name", host_type_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_uuid and not isinstance(instance_uuid, str):
            raise TypeError("Expected argument 'instance_uuid' to be a str")
        pulumi.set(__self__, "instance_uuid", instance_uuid)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        Indicates the AZ to which the dedicated host belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the dedicated host.
        """
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedHosts")
    def dedicated_hosts(self) -> Sequence['outputs.GetInstancesDedicatedHostResult']:
        """
        Indicates the list of dedicated hosts.
        """
        return pulumi.get(self, "dedicated_hosts")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[_builtins.str]:
        """
        Indicates the specifications of ECSs that can be created.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[_builtins.str]:
        """
        Indicates the type of the dedicated host.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter(name="hostTypeName")
    def host_type_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the dedicated host type.
        """
        return pulumi.get(self, "host_type_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceUuid")
    def instance_uuid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_uuid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the dedicated host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the dedicated host.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        Indicates the tags of the dedicated host.
        """
        return pulumi.get(self, "tags")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            availability_zone=self.availability_zone,
            dedicated_host_id=self.dedicated_host_id,
            dedicated_hosts=self.dedicated_hosts,
            flavor=self.flavor,
            host_type=self.host_type,
            host_type_name=self.host_type_name,
            id=self.id,
            instance_uuid=self.instance_uuid,
            name=self.name,
            region=self.region,
            state=self.state,
            tags=self.tags)


def get_instances(availability_zone: Optional[_builtins.str] = None,
                  dedicated_host_id: Optional[_builtins.str] = None,
                  flavor: Optional[_builtins.str] = None,
                  host_type: Optional[_builtins.str] = None,
                  host_type_name: Optional[_builtins.str] = None,
                  instance_uuid: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  state: Optional[_builtins.str] = None,
                  tags: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to get the list of dedicated host instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.deh.get_instances()
    ```


    :param _builtins.str availability_zone: Specifies the AZ to which the dedicated host belongs.
    :param _builtins.str dedicated_host_id: Specifies the ID of the dedicated host.
    :param _builtins.str flavor: Specifies the flavor ID.
    :param _builtins.str host_type: Specifies the type of the dedicated host.
    :param _builtins.str host_type_name: Specifies the name of the dedicated host type.
    :param _builtins.str instance_uuid: Specifies the ID of the ECS on the dedicated host.
    :param _builtins.str name: Specifies the name of the dedicated host.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the status of the dedicated host.
           Value options: **available**, **fault** or **released**.
    :param _builtins.str tags: Specifies the tags of the dedicated host.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedHostId'] = dedicated_host_id
    __args__['flavor'] = flavor
    __args__['hostType'] = host_type
    __args__['hostTypeName'] = host_type_name
    __args__['instanceUuid'] = instance_uuid
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:deh/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        dedicated_host_id=pulumi.get(__ret__, 'dedicated_host_id'),
        dedicated_hosts=pulumi.get(__ret__, 'dedicated_hosts'),
        flavor=pulumi.get(__ret__, 'flavor'),
        host_type=pulumi.get(__ret__, 'host_type'),
        host_type_name=pulumi.get(__ret__, 'host_type_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_uuid=pulumi.get(__ret__, 'instance_uuid'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'))
def get_instances_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         dedicated_host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         flavor: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         host_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         host_type_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         instance_uuid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to get the list of dedicated host instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.deh.get_instances()
    ```


    :param _builtins.str availability_zone: Specifies the AZ to which the dedicated host belongs.
    :param _builtins.str dedicated_host_id: Specifies the ID of the dedicated host.
    :param _builtins.str flavor: Specifies the flavor ID.
    :param _builtins.str host_type: Specifies the type of the dedicated host.
    :param _builtins.str host_type_name: Specifies the name of the dedicated host type.
    :param _builtins.str instance_uuid: Specifies the ID of the ECS on the dedicated host.
    :param _builtins.str name: Specifies the name of the dedicated host.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the status of the dedicated host.
           Value options: **available**, **fault** or **released**.
    :param _builtins.str tags: Specifies the tags of the dedicated host.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedHostId'] = dedicated_host_id
    __args__['flavor'] = flavor
    __args__['hostType'] = host_type
    __args__['hostTypeName'] = host_type_name
    __args__['instanceUuid'] = instance_uuid
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:deh/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult)
    return __ret__.apply(lambda __response__: GetInstancesResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        dedicated_host_id=pulumi.get(__response__, 'dedicated_host_id'),
        dedicated_hosts=pulumi.get(__response__, 'dedicated_hosts'),
        flavor=pulumi.get(__response__, 'flavor'),
        host_type=pulumi.get(__response__, 'host_type'),
        host_type_name=pulumi.get(__response__, 'host_type_name'),
        id=pulumi.get(__response__, 'id'),
        instance_uuid=pulumi.get(__response__, 'instance_uuid'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags')))
