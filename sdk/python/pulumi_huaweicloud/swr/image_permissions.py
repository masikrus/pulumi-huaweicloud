# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImagePermissionsArgs', 'ImagePermissions']

@pulumi.input_type
class ImagePermissionsArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[_builtins.str],
                 repository: pulumi.Input[_builtins.str],
                 users: pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ImagePermissions resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]] users: Specifies the users to access to the image (repository).
               The User structure is documented below.
               
               <a name="SwrImagePermissions_User"></a>
               The `User` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "users", users)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]]:
        """
        Specifies the users to access to the image (repository).
        The User structure is documented below.

        <a name="SwrImagePermissions_User"></a>
        The `User` block supports:
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]]):
        pulumi.set(self, "users", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ImagePermissionsState:
    def __init__(__self__, *,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 self_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsSelfPermissionArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering ImagePermissions resources.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ImagePermissionsSelfPermissionArgs']]] self_permissions: Indicates the permission information of current user.
               The SelfPermission structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]] users: Specifies the users to access to the image (repository).
               The User structure is documented below.
               
               <a name="SwrImagePermissions_User"></a>
               The `User` block supports:
        """
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if self_permissions is not None:
            pulumi.set(__self__, "self_permissions", self_permissions)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="selfPermissions")
    def self_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsSelfPermissionArgs']]]]:
        """
        Indicates the permission information of current user.
        The SelfPermission structure is documented below.
        """
        return pulumi.get(self, "self_permissions")

    @self_permissions.setter
    def self_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsSelfPermissionArgs']]]]):
        pulumi.set(self, "self_permissions", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]]]:
        """
        Specifies the users to access to the image (repository).
        The User structure is documented below.

        <a name="SwrImagePermissions_User"></a>
        The `User` block supports:
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("huaweicloud:Swr/imagePermissions:ImagePermissions")
class ImagePermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsUserArgs', 'ImagePermissionsUserArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a SWR image permissions within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        test = huaweicloud.swr.ImagePermissions("test",
            organization=organization_name,
            repository=repository_name,
            users=[
                {
                    "user_name": "test_user1",
                    "user_id": "5fc95b3e8fac4bce97e0e0cc8d4a3324",
                    "permission": "Manage",
                },
                {
                    "user_id": "8854a3426de744d7a5bcb27a171ebfb6",
                    "permission": "Read",
                },
            ])
        ```

        ## Import

        The SWR image permissions can be imported using the organization name and repository name separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imagePermissions:ImagePermissions test <organization_name>/<repository_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsUserArgs', 'ImagePermissionsUserArgsDict']]]] users: Specifies the users to access to the image (repository).
               The User structure is documented below.
               
               <a name="SwrImagePermissions_User"></a>
               The `User` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImagePermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SWR image permissions within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        test = huaweicloud.swr.ImagePermissions("test",
            organization=organization_name,
            repository=repository_name,
            users=[
                {
                    "user_name": "test_user1",
                    "user_id": "5fc95b3e8fac4bce97e0e0cc8d4a3324",
                    "permission": "Manage",
                },
                {
                    "user_id": "8854a3426de744d7a5bcb27a171ebfb6",
                    "permission": "Read",
                },
            ])
        ```

        ## Import

        The SWR image permissions can be imported using the organization name and repository name separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imagePermissions:ImagePermissions test <organization_name>/<repository_name>
        ```

        :param str resource_name: The name of the resource.
        :param ImagePermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImagePermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsUserArgs', 'ImagePermissionsUserArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImagePermissionsArgs.__new__(ImagePermissionsArgs)

            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["region"] = region
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            if users is None and not opts.urn:
                raise TypeError("Missing required property 'users'")
            __props__.__dict__["users"] = users
            __props__.__dict__["self_permissions"] = None
        super(ImagePermissions, __self__).__init__(
            'huaweicloud:Swr/imagePermissions:ImagePermissions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repository: Optional[pulumi.Input[_builtins.str]] = None,
            self_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsSelfPermissionArgs', 'ImagePermissionsSelfPermissionArgsDict']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsUserArgs', 'ImagePermissionsUserArgsDict']]]]] = None) -> 'ImagePermissions':
        """
        Get an existing ImagePermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsSelfPermissionArgs', 'ImagePermissionsSelfPermissionArgsDict']]]] self_permissions: Indicates the permission information of current user.
               The SelfPermission structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsUserArgs', 'ImagePermissionsUserArgsDict']]]] users: Specifies the users to access to the image (repository).
               The User structure is documented below.
               
               <a name="SwrImagePermissions_User"></a>
               The `User` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImagePermissionsState.__new__(_ImagePermissionsState)

        __props__.__dict__["organization"] = organization
        __props__.__dict__["region"] = region
        __props__.__dict__["repository"] = repository
        __props__.__dict__["self_permissions"] = self_permissions
        __props__.__dict__["users"] = users
        return ImagePermissions(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="selfPermissions")
    def self_permissions(self) -> pulumi.Output[Sequence['outputs.ImagePermissionsSelfPermission']]:
        """
        Indicates the permission information of current user.
        The SelfPermission structure is documented below.
        """
        return pulumi.get(self, "self_permissions")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.ImagePermissionsUser']]:
        """
        Specifies the users to access to the image (repository).
        The User structure is documented below.

        <a name="SwrImagePermissions_User"></a>
        The `User` block supports:
        """
        return pulumi.get(self, "users")

