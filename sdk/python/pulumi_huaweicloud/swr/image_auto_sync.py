# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ImageAutoSyncArgs', 'ImageAutoSync']

@pulumi.input_type
class ImageAutoSyncArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[_builtins.str],
                 repository: pulumi.Input[_builtins.str],
                 target_organization: pulumi.Input[_builtins.str],
                 target_region: pulumi.Input[_builtins.str],
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ImageAutoSync resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_organization: Specifies the target organization name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_region: Specifies the target region name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] override: Specifies whether to overwrite.
               Default to **false**, which indicates not to overwrite
               any nonidentical image that has the same name in the target organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "target_organization", target_organization)
        pulumi.set(__self__, "target_region", target_region)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="targetOrganization")
    def target_organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target organization name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_organization")

    @target_organization.setter
    def target_organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_organization", value)

    @_builtins.property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target region name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_region")

    @target_region.setter
    def target_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_region", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to overwrite.
        Default to **false**, which indicates not to overwrite
        any nonidentical image that has the same name in the target organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ImageAutoSyncState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 target_organization: Optional[pulumi.Input[_builtins.str]] = None,
                 target_region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ImageAutoSync resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] override: Specifies whether to overwrite.
               Default to **false**, which indicates not to overwrite
               any nonidentical image that has the same name in the target organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_organization: Specifies the target organization name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_region: Specifies the target region name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if target_organization is not None:
            pulumi.set(__self__, "target_organization", target_organization)
        if target_region is not None:
            pulumi.set(__self__, "target_region", target_region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to overwrite.
        Default to **false**, which indicates not to overwrite
        any nonidentical image that has the same name in the target organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="targetOrganization")
    def target_organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target organization name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_organization")

    @target_organization.setter
    def target_organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_organization", value)

    @_builtins.property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target region name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_region")

    @target_region.setter
    def target_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Swr/imageAutoSync:ImageAutoSync")
class ImageAutoSync(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 target_organization: Optional[pulumi.Input[_builtins.str]] = None,
                 target_region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SWR image auto sync within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        test = huaweicloud.swr.ImageAutoSync("test",
            organization=organization_name,
            repository=repository_name,
            target_region="cn-north-4",
            target_organization="target_org_name")
        ```

        ## Import

        The SWR image auto sync can be imported using the organization name, repository name,

        target region and target organization separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imageAutoSync:ImageAutoSync test <organization_name>/<repository_name>/<target_region>/<target_organization>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] override: Specifies whether to overwrite.
               Default to **false**, which indicates not to overwrite
               any nonidentical image that has the same name in the target organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_organization: Specifies the target organization name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_region: Specifies the target region name.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageAutoSyncArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SWR image auto sync within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        test = huaweicloud.swr.ImageAutoSync("test",
            organization=organization_name,
            repository=repository_name,
            target_region="cn-north-4",
            target_organization="target_org_name")
        ```

        ## Import

        The SWR image auto sync can be imported using the organization name, repository name,

        target region and target organization separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imageAutoSync:ImageAutoSync test <organization_name>/<repository_name>/<target_region>/<target_organization>
        ```

        :param str resource_name: The name of the resource.
        :param ImageAutoSyncArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageAutoSyncArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 target_organization: Optional[pulumi.Input[_builtins.str]] = None,
                 target_region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageAutoSyncArgs.__new__(ImageAutoSyncArgs)

            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["override"] = override
            __props__.__dict__["region"] = region
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            if target_organization is None and not opts.urn:
                raise TypeError("Missing required property 'target_organization'")
            __props__.__dict__["target_organization"] = target_organization
            if target_region is None and not opts.urn:
                raise TypeError("Missing required property 'target_region'")
            __props__.__dict__["target_region"] = target_region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(ImageAutoSync, __self__).__init__(
            'huaweicloud:Swr/imageAutoSync:ImageAutoSync',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            organization: Optional[pulumi.Input[_builtins.str]] = None,
            override: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repository: Optional[pulumi.Input[_builtins.str]] = None,
            target_organization: Optional[pulumi.Input[_builtins.str]] = None,
            target_region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'ImageAutoSync':
        """
        Get an existing ImageAutoSync resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] override: Specifies whether to overwrite.
               Default to **false**, which indicates not to overwrite
               any nonidentical image that has the same name in the target organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_organization: Specifies the target organization name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_region: Specifies the target region name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageAutoSyncState.__new__(_ImageAutoSyncState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["organization"] = organization
        __props__.__dict__["override"] = override
        __props__.__dict__["region"] = region
        __props__.__dict__["repository"] = repository
        __props__.__dict__["target_organization"] = target_organization
        __props__.__dict__["target_region"] = target_region
        __props__.__dict__["updated_at"] = updated_at
        return ImageAutoSync(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def override(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to overwrite.
        Default to **false**, which indicates not to overwrite
        any nonidentical image that has the same name in the target organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="targetOrganization")
    def target_organization(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target organization name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_organization")

    @_builtins.property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target region name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

