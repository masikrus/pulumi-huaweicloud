# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetImageTriggersResult',
    'AwaitableGetImageTriggersResult',
    'get_image_triggers',
    'get_image_triggers_output',
]

@pulumi.output_type
class GetImageTriggersResult:
    """
    A collection of values returned by getImageTriggers.
    """
    def __init__(__self__, cluster_name=None, condition_type=None, enabled=None, id=None, name=None, organization=None, region=None, repository=None, triggers=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if condition_type and not isinstance(condition_type, str):
            raise TypeError("Expected argument 'condition_type' to be a str")
        pulumi.set(__self__, "condition_type", condition_type)
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The name of the cluster in CCE.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[_builtins.str]:
        """
        The trigger condition type.
        """
        return pulumi.get(self, "condition_type")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether to enable the trigger.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The trigger name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetImageTriggersTriggerResult']:
        """
        All triggers that match the filter parameters.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")


class AwaitableGetImageTriggersResult(GetImageTriggersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageTriggersResult(
            cluster_name=self.cluster_name,
            condition_type=self.condition_type,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            organization=self.organization,
            region=self.region,
            repository=self.repository,
            triggers=self.triggers)


def get_image_triggers(cluster_name: Optional[_builtins.str] = None,
                       condition_type: Optional[_builtins.str] = None,
                       enabled: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       organization: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       repository: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageTriggersResult:
    """
    Use this data source to get the list of SWR image triggers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    organization = config.require_object("organization")
    repository = config.require_object("repository")
    test = huaweicloud.Swr.get_image_triggers(organization=organization,
        repository=repository)
    ```


    :param _builtins.str cluster_name: Specifies the name of the triggered cluster in CCE.
    :param _builtins.str condition_type: Specifies the trigger condition type.
           The valid values are **all**, **tag**, **regular**.
    :param _builtins.str enabled: Specifies whether to enable the trigger.
           The valid values are **true** and **false**.
    :param _builtins.str name: Specifies the name of the image trigger.
    :param _builtins.str organization: Specifies the name of the organization.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str repository: Specifies the name of the repository.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['conditionType'] = condition_type
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['organization'] = organization
    __args__['region'] = region
    __args__['repository'] = repository
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Swr/getImageTriggers:getImageTriggers', __args__, opts=opts, typ=GetImageTriggersResult).value

    return AwaitableGetImageTriggersResult(
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        condition_type=pulumi.get(__ret__, 'condition_type'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        region=pulumi.get(__ret__, 'region'),
        repository=pulumi.get(__ret__, 'repository'),
        triggers=pulumi.get(__ret__, 'triggers'))
def get_image_triggers_output(cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              condition_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              organization: Optional[pulumi.Input[_builtins.str]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              repository: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetImageTriggersResult]:
    """
    Use this data source to get the list of SWR image triggers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    organization = config.require_object("organization")
    repository = config.require_object("repository")
    test = huaweicloud.Swr.get_image_triggers(organization=organization,
        repository=repository)
    ```


    :param _builtins.str cluster_name: Specifies the name of the triggered cluster in CCE.
    :param _builtins.str condition_type: Specifies the trigger condition type.
           The valid values are **all**, **tag**, **regular**.
    :param _builtins.str enabled: Specifies whether to enable the trigger.
           The valid values are **true** and **false**.
    :param _builtins.str name: Specifies the name of the image trigger.
    :param _builtins.str organization: Specifies the name of the organization.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str repository: Specifies the name of the repository.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['conditionType'] = condition_type
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['organization'] = organization
    __args__['region'] = region
    __args__['repository'] = repository
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Swr/getImageTriggers:getImageTriggers', __args__, opts=opts, typ=GetImageTriggersResult)
    return __ret__.apply(lambda __response__: GetImageTriggersResult(
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        condition_type=pulumi.get(__response__, 'condition_type'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        region=pulumi.get(__response__, 'region'),
        repository=pulumi.get(__response__, 'repository'),
        triggers=pulumi.get(__response__, 'triggers')))
