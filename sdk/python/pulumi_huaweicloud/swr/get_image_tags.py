# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetImageTagsResult',
    'AwaitableGetImageTagsResult',
    'get_image_tags',
    'get_image_tags_output',
]

@pulumi.output_type
class GetImageTagsResult:
    """
    A collection of values returned by getImageTags.
    """
    def __init__(__self__, digest=None, id=None, image_tags=None, name=None, organization=None, region=None, repository=None):
        if digest and not isinstance(digest, str):
            raise TypeError("Expected argument 'digest' to be a str")
        pulumi.set(__self__, "digest", digest)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_tags and not isinstance(image_tags, list):
            raise TypeError("Expected argument 'image_tags' to be a list")
        pulumi.set(__self__, "image_tags", image_tags)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        The hash value of the image tag.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageTags")
    def image_tags(self) -> Sequence['outputs.GetImageTagsImageTagResult']:
        """
        All image tags that match the filter parameters.
        The image_tags structure is documented below.
        """
        return pulumi.get(self, "image_tags")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the image tag.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        return pulumi.get(self, "repository")


class AwaitableGetImageTagsResult(GetImageTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageTagsResult(
            digest=self.digest,
            id=self.id,
            image_tags=self.image_tags,
            name=self.name,
            organization=self.organization,
            region=self.region,
            repository=self.repository)


def get_image_tags(digest: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   organization: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   repository: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageTagsResult:
    """
    Use this data source to get the list of SWR image tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    organization = config.require_object("organization")
    repository = config.require_object("repository")
    test = huaweicloud.Swr.get_image_tags(organization=organization,
        repository=repository)
    ```


    :param _builtins.str digest: Specify the hash value of the image tag.
    :param _builtins.str name: Specifies the name of the image tag.
    :param _builtins.str organization: Specifies the name of the organization.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str repository: Specifies the name of the repository.
    """
    __args__ = dict()
    __args__['digest'] = digest
    __args__['name'] = name
    __args__['organization'] = organization
    __args__['region'] = region
    __args__['repository'] = repository
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Swr/getImageTags:getImageTags', __args__, opts=opts, typ=GetImageTagsResult).value

    return AwaitableGetImageTagsResult(
        digest=pulumi.get(__ret__, 'digest'),
        id=pulumi.get(__ret__, 'id'),
        image_tags=pulumi.get(__ret__, 'image_tags'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        region=pulumi.get(__ret__, 'region'),
        repository=pulumi.get(__ret__, 'repository'))
def get_image_tags_output(digest: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          organization: Optional[pulumi.Input[_builtins.str]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          repository: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetImageTagsResult]:
    """
    Use this data source to get the list of SWR image tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    organization = config.require_object("organization")
    repository = config.require_object("repository")
    test = huaweicloud.Swr.get_image_tags(organization=organization,
        repository=repository)
    ```


    :param _builtins.str digest: Specify the hash value of the image tag.
    :param _builtins.str name: Specifies the name of the image tag.
    :param _builtins.str organization: Specifies the name of the organization.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str repository: Specifies the name of the repository.
    """
    __args__ = dict()
    __args__['digest'] = digest
    __args__['name'] = name
    __args__['organization'] = organization
    __args__['region'] = region
    __args__['repository'] = repository
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Swr/getImageTags:getImageTags', __args__, opts=opts, typ=GetImageTagsResult)
    return __ret__.apply(lambda __response__: GetImageTagsResult(
        digest=pulumi.get(__response__, 'digest'),
        id=pulumi.get(__response__, 'id'),
        image_tags=pulumi.get(__response__, 'image_tags'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        region=pulumi.get(__response__, 'region'),
        repository=pulumi.get(__response__, 'repository')))
