# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ImagePermissionsSelfPermission',
    'ImagePermissionsUser',
    'ImageRetentionPolicyTagSelector',
    'OrganizationPermissionsSelfPermission',
    'OrganizationPermissionsUser',
    'GetDomainResourceReportsReportResult',
    'GetImageRetentionHistoriesRecordResult',
    'GetImageRetentionPoliciesRetentionPolicyResult',
    'GetImageRetentionPoliciesRetentionPolicyRuleResult',
    'GetImageRetentionPoliciesRetentionPolicyRuleTagSelectorResult',
    'GetImageTagsImageTagResult',
    'GetImageTriggersTriggerResult',
    'GetImageTriggersTriggerHistoryResult',
    'GetOrganizationsOrganizationResult',
    'GetQuotasQuotaResult',
    'GetRepositoriesRepositoryResult',
    'GetSharedAccountsSharedAccountResult',
    'GetSharedRepositoriesRepositoryResult',
]

@pulumi.output_type
class ImagePermissionsSelfPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImagePermissionsSelfPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImagePermissionsSelfPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImagePermissionsSelfPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: Specifies the user permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param _builtins.str user_id: Specifies the ID of the existing HuaweiCloud user.
        :param _builtins.str user_name: Specifies the name of the existing HuaweiCloud user.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[_builtins.str]:
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ImagePermissionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImagePermissionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImagePermissionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImagePermissionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: _builtins.str,
                 user_id: _builtins.str,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: Specifies the user permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param _builtins.str user_id: Specifies the ID of the existing HuaweiCloud user.
        :param _builtins.str user_name: Specifies the name of the existing HuaweiCloud user.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ImageRetentionPolicyTagSelector(dict):
    def __init__(__self__, *,
                 kind: Optional[_builtins.str] = None,
                 pattern: Optional[_builtins.str] = None):
        """
        :param _builtins.str kind: Specifies the Matching rule. Value options: **label**, **regexp**.
        :param _builtins.str pattern: Specifies the Matching pattern.
               + If kind is set to `label`, set this parameter to specific image tags.
               + If kind is set to `regexp`, set this parameter to a regular expression.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        """
        Specifies the Matching rule. Value options: **label**, **regexp**.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        """
        Specifies the Matching pattern.
        + If kind is set to `label`, set this parameter to specific image tags.
        + If kind is set to `regexp`, set this parameter to a regular expression.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class OrganizationPermissionsSelfPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationPermissionsSelfPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationPermissionsSelfPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationPermissionsSelfPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: The permission of current user.
        :param _builtins.str user_id: The ID of current user.
        :param _builtins.str user_name: The name of current user.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[_builtins.str]:
        """
        The permission of current user.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The ID of current user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The name of current user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class OrganizationPermissionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationPermissionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationPermissionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationPermissionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: _builtins.str,
                 user_id: _builtins.str,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: Specifies the permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param _builtins.str user_id: Specifies the ID of the existing HuaweiCloud user.
        :param _builtins.str user_name: Specifies the name of the existing HuaweiCloud user.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        Specifies the permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDomainResourceReportsReportResult(dict):
    def __init__(__self__, *,
                 date: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str date: The date of the domain resource report.
        :param _builtins.float value: The value of the domain resource report.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def date(self) -> _builtins.str:
        """
        The date of the domain resource report.
        """
        return pulumi.get(self, "date")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The value of the domain resource report.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageRetentionHistoriesRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.int,
                 organization: _builtins.str,
                 repository: _builtins.str,
                 retention_id: _builtins.int,
                 rule_type: _builtins.str,
                 tag: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.int id: The ID of the image retention history record.
        :param _builtins.str organization: Specifies the name of the organization.
        :param _builtins.str repository: Specifies the image repository name.
        :param _builtins.int retention_id: The image retention policy ID.
        :param _builtins.str rule_type: The image retention rule type.
        :param _builtins.str tag: The image tag.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "retention_id", retention_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        The ID of the image retention history record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the name of the organization.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        """
        Specifies the image repository name.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="retentionId")
    def retention_id(self) -> _builtins.int:
        """
        The image retention policy ID.
        """
        return pulumi.get(self, "retention_id")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> _builtins.str:
        """
        The image retention rule type.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        The image tag.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetImageRetentionPoliciesRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 algorithm: _builtins.str,
                 id: _builtins.int,
                 rules: Sequence['outputs.GetImageRetentionPoliciesRetentionPolicyRuleResult'],
                 scope: _builtins.str):
        """
        :param _builtins.str algorithm: The image retention policy matching rule.
        :param _builtins.int id: The image retention policy ID.
        :param Sequence['GetImageRetentionPoliciesRetentionPolicyRuleArgs'] rules: The rules of the image retention policy.
               The rules structure is documented below.
        :param _builtins.str scope: The reserved field.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> _builtins.str:
        """
        The image retention policy matching rule.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        The image retention policy ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetImageRetentionPoliciesRetentionPolicyRuleResult']:
        """
        The rules of the image retention policy.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        The reserved field.
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetImageRetentionPoliciesRetentionPolicyRuleResult(dict):
    def __init__(__self__, *,
                 params: _builtins.str,
                 tag_selectors: Sequence['outputs.GetImageRetentionPoliciesRetentionPolicyRuleTagSelectorResult'],
                 template: _builtins.str):
        """
        :param _builtins.str params: The params of matching template.
               + If `template` is **date_rule**, the `params` will be **{"days": "xxx"}**.
               + If `template` is **tag_rule**, the `params` will be **{"num": "xxx"}**.
        :param Sequence['GetImageRetentionPoliciesRetentionPolicyRuleTagSelectorArgs'] tag_selectors: The exception images.
               The tag_selectors structure is documented below.
        :param _builtins.str template: The template of the image retention policy. The value can be **date_rule** and **tag_rule**.
        """
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "tag_selectors", tag_selectors)
        pulumi.set(__self__, "template", template)

    @_builtins.property
    @pulumi.getter
    def params(self) -> _builtins.str:
        """
        The params of matching template.
        + If `template` is **date_rule**, the `params` will be **{"days": "xxx"}**.
        + If `template` is **tag_rule**, the `params` will be **{"num": "xxx"}**.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter(name="tagSelectors")
    def tag_selectors(self) -> Sequence['outputs.GetImageRetentionPoliciesRetentionPolicyRuleTagSelectorResult']:
        """
        The exception images.
        The tag_selectors structure is documented below.
        """
        return pulumi.get(self, "tag_selectors")

    @_builtins.property
    @pulumi.getter
    def template(self) -> _builtins.str:
        """
        The template of the image retention policy. The value can be **date_rule** and **tag_rule**.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class GetImageRetentionPoliciesRetentionPolicyRuleTagSelectorResult(dict):
    def __init__(__self__, *,
                 kind: _builtins.str,
                 pattern: _builtins.str):
        """
        :param _builtins.str kind: The matching kind. The value can be **label** or **regexp**.
        :param _builtins.str pattern: The pattern of the matching kind.
               + If `kind` is **label**, this parameter will be the image tag.
               + If `kind` is **regexp**, this parameter will be a regular expression.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        The matching kind. The value can be **label** or **regexp**.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        The pattern of the matching kind.
        + If `kind` is **label**, this parameter will be the image tag.
        + If `kind` is **regexp**, this parameter will be a regular expression.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetImageTagsImageTagResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 deleted_at: _builtins.str,
                 digest: _builtins.str,
                 docker_schema: _builtins.int,
                 image_id: _builtins.str,
                 internal_path: _builtins.str,
                 is_trusted: _builtins.bool,
                 manifest: _builtins.str,
                 name: _builtins.str,
                 path: _builtins.str,
                 scanned: _builtins.bool,
                 size: _builtins.int,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the image tag.
        :param _builtins.str deleted_at: The delete time of the image tag.
        :param _builtins.str digest: Specify the hash value of the image tag.
        :param _builtins.int docker_schema: The docker protocol used by the image tag.
        :param _builtins.str image_id: The ID of the image.
        :param _builtins.str internal_path: The intra-cluster image address for docker pull.
        :param _builtins.bool is_trusted: Whether the image version is trusted.
        :param _builtins.str manifest: The manifest of the image tag.
        :param _builtins.str name: Specifies the name of the image tag.
        :param _builtins.str path: The image address for docker pull.
        :param _builtins.bool scanned: Whether the image version is scanned.
        :param _builtins.int size: The size of the image tag in byte.
        :param _builtins.str type: The type of the image tag.
        :param _builtins.str updated_at: The update time of the image tag.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "docker_schema", docker_schema)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "internal_path", internal_path)
        pulumi.set(__self__, "is_trusted", is_trusted)
        pulumi.set(__self__, "manifest", manifest)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "scanned", scanned)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the image tag.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        The delete time of the image tag.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        Specify the hash value of the image tag.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="dockerSchema")
    def docker_schema(self) -> _builtins.int:
        """
        The docker protocol used by the image tag.
        """
        return pulumi.get(self, "docker_schema")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the image.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="internalPath")
    def internal_path(self) -> _builtins.str:
        """
        The intra-cluster image address for docker pull.
        """
        return pulumi.get(self, "internal_path")

    @_builtins.property
    @pulumi.getter(name="isTrusted")
    def is_trusted(self) -> _builtins.bool:
        """
        Whether the image version is trusted.
        """
        return pulumi.get(self, "is_trusted")

    @_builtins.property
    @pulumi.getter
    def manifest(self) -> _builtins.str:
        """
        The manifest of the image tag.
        """
        return pulumi.get(self, "manifest")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the image tag.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The image address for docker pull.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def scanned(self) -> _builtins.bool:
        """
        Whether the image version is scanned.
        """
        return pulumi.get(self, "scanned")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image tag in byte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the image tag.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the image tag.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetImageTriggersTriggerResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 condition_type: _builtins.str,
                 condition_value: _builtins.str,
                 container: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 enabled: _builtins.str,
                 histories: Sequence['outputs.GetImageTriggersTriggerHistoryResult'],
                 name: _builtins.str,
                 namespace: _builtins.str,
                 type: _builtins.str,
                 workload_name: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str action: The trigger action.
        :param _builtins.str cluster_id: The ID of the cluster in CCE.
        :param _builtins.str cluster_name: Specifies the name of the triggered cluster in CCE.
        :param _builtins.str condition_type: Specifies the trigger condition type.
               The valid values are **all**, **tag**, **regular**.
        :param _builtins.str condition_value: The trigger condition value.
        :param _builtins.str container: The name of the container to be updated.
        :param _builtins.str created_at: The creation time of the trigger.
        :param _builtins.str created_by: The creator name of the trigger.
        :param _builtins.str enabled: Specifies whether to enable the trigger.
               The valid values are **true** and **false**.
        :param Sequence['GetImageTriggersTriggerHistoryArgs'] histories: All histories of the trigger.
               The histories structure is documented below.
        :param _builtins.str name: Specifies the name of the image trigger.
        :param _builtins.str namespace: The namespace where the application is located.
        :param _builtins.str type: The trigger type.
        :param _builtins.str workload_name: The name of the application.
        :param _builtins.str workload_type: The type of the application.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "condition_value", condition_value)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "histories", histories)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workload_name", workload_name)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The trigger action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The ID of the cluster in CCE.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the name of the triggered cluster in CCE.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> _builtins.str:
        """
        Specifies the trigger condition type.
        The valid values are **all**, **tag**, **regular**.
        """
        return pulumi.get(self, "condition_type")

    @_builtins.property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> _builtins.str:
        """
        The trigger condition value.
        """
        return pulumi.get(self, "condition_value")

    @_builtins.property
    @pulumi.getter
    def container(self) -> _builtins.str:
        """
        The name of the container to be updated.
        """
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the trigger.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator name of the trigger.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.str:
        """
        Specifies whether to enable the trigger.
        The valid values are **true** and **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetImageTriggersTriggerHistoryResult']:
        """
        All histories of the trigger.
        The histories structure is documented below.
        """
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the image trigger.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace where the application is located.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The trigger type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> _builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "workload_name")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of the application.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetImageTriggersTriggerHistoryResult(dict):
    def __init__(__self__, *,
                 detail: _builtins.str,
                 result: _builtins.str,
                 tag: _builtins.str):
        """
        :param _builtins.str detail: The triggered detail.
        :param _builtins.str result: The triggered result.
        :param _builtins.str tag: The triggered image tag.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        The triggered detail.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        """
        The triggered result.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        The triggered image tag.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetOrganizationsOrganizationResult(dict):
    def __init__(__self__, *,
                 access_user_count: _builtins.int,
                 creator: _builtins.str,
                 id: _builtins.int,
                 name: _builtins.str,
                 permission: _builtins.str,
                 repo_count: _builtins.int):
        """
        :param _builtins.int access_user_count: The number of users with permissions in this organization.
        :param _builtins.str creator: The creator of the organization.
        :param _builtins.int id: The ID of the organization.
        :param _builtins.str name: Specifies the name of the organization.
        :param _builtins.str permission: The permission of organization.
        :param _builtins.int repo_count: The number of images in this organization.
        """
        pulumi.set(__self__, "access_user_count", access_user_count)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "repo_count", repo_count)

    @_builtins.property
    @pulumi.getter(name="accessUserCount")
    def access_user_count(self) -> _builtins.int:
        """
        The number of users with permissions in this organization.
        """
        return pulumi.get(self, "access_user_count")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator of the organization.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        The ID of the organization.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the organization.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        The permission of organization.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="repoCount")
    def repo_count(self) -> _builtins.int:
        """
        The number of images in this organization.
        """
        return pulumi.get(self, "repo_count")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 quota_key: _builtins.str,
                 quota_limit: _builtins.int,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str quota_key: The quota type.
        :param _builtins.int quota_limit: The quota limit.
        :param _builtins.str unit: The quota unit.
        :param _builtins.int used: The used quota.
        """
        pulumi.set(__self__, "quota_key", quota_key)
        pulumi.set(__self__, "quota_limit", quota_limit)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="quotaKey")
    def quota_key(self) -> _builtins.str:
        """
        The quota type.
        """
        return pulumi.get(self, "quota_key")

    @_builtins.property
    @pulumi.getter(name="quotaLimit")
    def quota_limit(self) -> _builtins.int:
        """
        The quota limit.
        """
        return pulumi.get(self, "quota_limit")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The quota unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetRepositoriesRepositoryResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 internal_path: _builtins.str,
                 is_public: _builtins.bool,
                 name: _builtins.str,
                 num_download: _builtins.int,
                 num_images: _builtins.int,
                 organization: _builtins.str,
                 path: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.bool,
                 tags: Sequence[_builtins.str],
                 total_range: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param _builtins.str category: Specifies the category of the repository. The value can be **app_server**,
               **linux**, **framework_app**, **database**, **lang**, **other**, **windows**, **arm**.
        :param _builtins.str created_at: The creation time of the repository.
        :param _builtins.str description: The description of the repository.
        :param _builtins.str internal_path: The intra-cluster image address for docker pull.
        :param _builtins.bool is_public: Specifies whether the repository is public. Default is false.
               + **true** - Indicates the repository is public.
               + **false** - Indicates the repository is private.
        :param _builtins.str name: Specifies the name of the repository.
        :param _builtins.int num_download: The number of downloads from the repository.
        :param _builtins.int num_images: The number of images in the repository.
        :param _builtins.str organization: Specifies the name of the organization (namespace) the repository belongs.
        :param _builtins.str path: The image address for docker pull.
        :param _builtins.int size: The size of the repository in byte.
        :param _builtins.bool status: Whether this repository is shared with others.
        :param Sequence[_builtins.str] tags: Image tag list of the repository.
        :param _builtins.int total_range: The total number of the repository.
        :param _builtins.str updated_at: The update time of the repository.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "internal_path", internal_path)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_download", num_download)
        pulumi.set(__self__, "num_images", num_images)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "total_range", total_range)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category of the repository. The value can be **app_server**,
        **linux**, **framework_app**, **database**, **lang**, **other**, **windows**, **arm**.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the repository.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the repository.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="internalPath")
    def internal_path(self) -> _builtins.str:
        """
        The intra-cluster image address for docker pull.
        """
        return pulumi.get(self, "internal_path")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> _builtins.bool:
        """
        Specifies whether the repository is public. Default is false.
        + **true** - Indicates the repository is public.
        + **false** - Indicates the repository is private.
        """
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the repository.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numDownload")
    def num_download(self) -> _builtins.int:
        """
        The number of downloads from the repository.
        """
        return pulumi.get(self, "num_download")

    @_builtins.property
    @pulumi.getter(name="numImages")
    def num_images(self) -> _builtins.int:
        """
        The number of images in the repository.
        """
        return pulumi.get(self, "num_images")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the name of the organization (namespace) the repository belongs.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The image address for docker pull.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the repository in byte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.bool:
        """
        Whether this repository is shared with others.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Image tag list of the repository.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalRange")
    def total_range(self) -> _builtins.int:
        """
        The total number of the repository.
        """
        return pulumi.get(self, "total_range")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the repository.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSharedAccountsSharedAccountResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 creator_id: _builtins.str,
                 deadline: _builtins.str,
                 description: _builtins.str,
                 organization: _builtins.str,
                 permit: _builtins.str,
                 repository: _builtins.str,
                 shared_account: _builtins.str,
                 status: _builtins.bool,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str created_by: The name of the creator.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str deadline: The expiration time.
        :param _builtins.str description: The description.
        :param _builtins.str organization: Specifies the name of the organization to which the repository belongs.
        :param _builtins.str permit: The permissions of the shared account.
        :param _builtins.str repository: Specifies the name of the repository.
        :param _builtins.str shared_account: The shared account name.
        :param _builtins.bool status: Whether the sharing account is valid.
        :param _builtins.str updated_at: The update time.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "permit", permit)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "shared_account", shared_account)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The name of the creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def deadline(self) -> _builtins.str:
        """
        The expiration time.
        """
        return pulumi.get(self, "deadline")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the name of the organization to which the repository belongs.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def permit(self) -> _builtins.str:
        """
        The permissions of the shared account.
        """
        return pulumi.get(self, "permit")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        """
        Specifies the name of the repository.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="sharedAccount")
    def shared_account(self) -> _builtins.str:
        """
        The shared account name.
        """
        return pulumi.get(self, "shared_account")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.bool:
        """
        Whether the sharing account is valid.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSharedRepositoriesRepositoryResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_name: _builtins.str,
                 internal_path: _builtins.str,
                 is_public: _builtins.bool,
                 name: _builtins.str,
                 num_download: _builtins.int,
                 num_images: _builtins.int,
                 organization: _builtins.str,
                 path: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.bool,
                 tags: Sequence[_builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str category: The category of the repository.
        :param _builtins.str created_at: The creation time of the repository.
        :param _builtins.str description: The description of the repository.
        :param _builtins.str domain_name: Specifies the account name of the repository owner.
        :param _builtins.str internal_path: The intra-cluster image address for docker pull.
        :param _builtins.bool is_public: Whether the repository is public.
        :param _builtins.str name: Specifies the name of the repository.
        :param _builtins.int num_download: The number of downloads from the repository.
        :param _builtins.int num_images: The number of images in the repository.
        :param _builtins.str organization: Specifies the name of the organization (namespace) the repository belongs.
        :param _builtins.str path: The image address for docker pull.
        :param _builtins.int size: The size of the repository in byte.
        :param _builtins.bool status: Whether the repository sharing has expired.
        :param Sequence[_builtins.str] tags: Image tag list of the repository.
        :param _builtins.str updated_at: The update time of the repository.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "internal_path", internal_path)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_download", num_download)
        pulumi.set(__self__, "num_images", num_images)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The category of the repository.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the repository.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the repository.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Specifies the account name of the repository owner.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="internalPath")
    def internal_path(self) -> _builtins.str:
        """
        The intra-cluster image address for docker pull.
        """
        return pulumi.get(self, "internal_path")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> _builtins.bool:
        """
        Whether the repository is public.
        """
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the repository.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numDownload")
    def num_download(self) -> _builtins.int:
        """
        The number of downloads from the repository.
        """
        return pulumi.get(self, "num_download")

    @_builtins.property
    @pulumi.getter(name="numImages")
    def num_images(self) -> _builtins.int:
        """
        The number of images in the repository.
        """
        return pulumi.get(self, "num_images")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the name of the organization (namespace) the repository belongs.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The image address for docker pull.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the repository in byte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.bool:
        """
        Whether the repository sharing has expired.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Image tag list of the repository.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the repository.
        """
        return pulumi.get(self, "updated_at")


