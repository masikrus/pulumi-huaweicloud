# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ImagePermissionsSelfPermissionArgs',
    'ImagePermissionsSelfPermissionArgsDict',
    'ImagePermissionsUserArgs',
    'ImagePermissionsUserArgsDict',
    'ImageRetentionPolicyTagSelectorArgs',
    'ImageRetentionPolicyTagSelectorArgsDict',
    'OrganizationPermissionsSelfPermissionArgs',
    'OrganizationPermissionsSelfPermissionArgsDict',
    'OrganizationPermissionsUserArgs',
    'OrganizationPermissionsUserArgsDict',
]

MYPY = False

if not MYPY:
    class ImagePermissionsSelfPermissionArgsDict(TypedDict):
        permission: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the existing HuaweiCloud user.
        """
elif False:
    ImagePermissionsSelfPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImagePermissionsSelfPermissionArgs:
    def __init__(__self__, *,
                 permission: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] permission: Specifies the user permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param pulumi.Input[_builtins.str] user_id: Specifies the ID of the existing HuaweiCloud user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the name of the existing HuaweiCloud user.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class ImagePermissionsUserArgsDict(TypedDict):
        permission: pulumi.Input[_builtins.str]
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        user_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the existing HuaweiCloud user.
        """
elif False:
    ImagePermissionsUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImagePermissionsUserArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[_builtins.str],
                 user_id: pulumi.Input[_builtins.str],
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] permission: Specifies the user permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param pulumi.Input[_builtins.str] user_id: Specifies the ID of the existing HuaweiCloud user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the name of the existing HuaweiCloud user.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class ImageRetentionPolicyTagSelectorArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Matching rule. Value options: **label**, **regexp**.
        """
        pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Matching pattern.
        + If kind is set to `label`, set this parameter to specific image tags.
        + If kind is set to `regexp`, set this parameter to a regular expression.
        """
elif False:
    ImageRetentionPolicyTagSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageRetentionPolicyTagSelectorArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] kind: Specifies the Matching rule. Value options: **label**, **regexp**.
        :param pulumi.Input[_builtins.str] pattern: Specifies the Matching pattern.
               + If kind is set to `label`, set this parameter to specific image tags.
               + If kind is set to `regexp`, set this parameter to a regular expression.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Matching rule. Value options: **label**, **regexp**.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Matching pattern.
        + If kind is set to `label`, set this parameter to specific image tags.
        + If kind is set to `regexp`, set this parameter to a regular expression.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class OrganizationPermissionsSelfPermissionArgsDict(TypedDict):
        permission: NotRequired[pulumi.Input[_builtins.str]]
        """
        The permission of current user.
        """
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of current user.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of current user.
        """
elif False:
    OrganizationPermissionsSelfPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationPermissionsSelfPermissionArgs:
    def __init__(__self__, *,
                 permission: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] permission: The permission of current user.
        :param pulumi.Input[_builtins.str] user_id: The ID of current user.
        :param pulumi.Input[_builtins.str] user_name: The name of current user.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The permission of current user.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of current user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of current user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class OrganizationPermissionsUserArgsDict(TypedDict):
        permission: pulumi.Input[_builtins.str]
        """
        Specifies the permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        user_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the existing HuaweiCloud user.
        """
elif False:
    OrganizationPermissionsUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationPermissionsUserArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[_builtins.str],
                 user_id: pulumi.Input[_builtins.str],
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] permission: Specifies the permission of the existing HuaweiCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param pulumi.Input[_builtins.str] user_id: Specifies the ID of the existing HuaweiCloud user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the name of the existing HuaweiCloud user.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the permission of the existing HuaweiCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the existing HuaweiCloud user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


