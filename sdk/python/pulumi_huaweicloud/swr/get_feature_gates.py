# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetFeatureGatesResult',
    'AwaitableGetFeatureGatesResult',
    'get_feature_gates',
    'get_feature_gates_output',
]

@pulumi.output_type
class GetFeatureGatesResult:
    """
    A collection of values returned by getFeatureGates.
    """
    def __init__(__self__, enable_cci_service=None, enable_experience=None, enable_hss_service=None, enable_image_label=None, enable_image_scan=None, enable_image_sync=None, enable_pipeline=None, enable_sm3=None, id=None, region=None):
        if enable_cci_service and not isinstance(enable_cci_service, bool):
            raise TypeError("Expected argument 'enable_cci_service' to be a bool")
        pulumi.set(__self__, "enable_cci_service", enable_cci_service)
        if enable_experience and not isinstance(enable_experience, bool):
            raise TypeError("Expected argument 'enable_experience' to be a bool")
        pulumi.set(__self__, "enable_experience", enable_experience)
        if enable_hss_service and not isinstance(enable_hss_service, bool):
            raise TypeError("Expected argument 'enable_hss_service' to be a bool")
        pulumi.set(__self__, "enable_hss_service", enable_hss_service)
        if enable_image_label and not isinstance(enable_image_label, bool):
            raise TypeError("Expected argument 'enable_image_label' to be a bool")
        pulumi.set(__self__, "enable_image_label", enable_image_label)
        if enable_image_scan and not isinstance(enable_image_scan, bool):
            raise TypeError("Expected argument 'enable_image_scan' to be a bool")
        pulumi.set(__self__, "enable_image_scan", enable_image_scan)
        if enable_image_sync and not isinstance(enable_image_sync, bool):
            raise TypeError("Expected argument 'enable_image_sync' to be a bool")
        pulumi.set(__self__, "enable_image_sync", enable_image_sync)
        if enable_pipeline and not isinstance(enable_pipeline, bool):
            raise TypeError("Expected argument 'enable_pipeline' to be a bool")
        pulumi.set(__self__, "enable_pipeline", enable_pipeline)
        if enable_sm3 and not isinstance(enable_sm3, bool):
            raise TypeError("Expected argument 'enable_sm3' to be a bool")
        pulumi.set(__self__, "enable_sm3", enable_sm3)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enableCciService")
    def enable_cci_service(self) -> _builtins.bool:
        """
        Whether interconnection with CCI is enabled.
        """
        return pulumi.get(self, "enable_cci_service")

    @_builtins.property
    @pulumi.getter(name="enableExperience")
    def enable_experience(self) -> _builtins.bool:
        """
        Whether the experience center is enabled.
        """
        return pulumi.get(self, "enable_experience")

    @_builtins.property
    @pulumi.getter(name="enableHssService")
    def enable_hss_service(self) -> _builtins.bool:
        """
        Whether interconnection with HSS is enabled.
        """
        return pulumi.get(self, "enable_hss_service")

    @_builtins.property
    @pulumi.getter(name="enableImageLabel")
    def enable_image_label(self) -> _builtins.bool:
        """
        Whether image tagging is enabled.
        """
        return pulumi.get(self, "enable_image_label")

    @_builtins.property
    @pulumi.getter(name="enableImageScan")
    def enable_image_scan(self) -> _builtins.bool:
        """
        Whether image scanning is enabled.
        """
        return pulumi.get(self, "enable_image_scan")

    @_builtins.property
    @pulumi.getter(name="enableImageSync")
    def enable_image_sync(self) -> _builtins.bool:
        """
        Whether image synchronization is enabled.
        """
        return pulumi.get(self, "enable_image_sync")

    @_builtins.property
    @pulumi.getter(name="enablePipeline")
    def enable_pipeline(self) -> _builtins.bool:
        """
        Whether pipeline is enabled.
        """
        return pulumi.get(self, "enable_pipeline")

    @_builtins.property
    @pulumi.getter(name="enableSm3")
    def enable_sm3(self) -> _builtins.bool:
        """
        Whether SM algorithms are enabled.
        """
        return pulumi.get(self, "enable_sm3")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetFeatureGatesResult(GetFeatureGatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureGatesResult(
            enable_cci_service=self.enable_cci_service,
            enable_experience=self.enable_experience,
            enable_hss_service=self.enable_hss_service,
            enable_image_label=self.enable_image_label,
            enable_image_scan=self.enable_image_scan,
            enable_image_sync=self.enable_image_sync,
            enable_pipeline=self.enable_pipeline,
            enable_sm3=self.enable_sm3,
            id=self.id,
            region=self.region)


def get_feature_gates(region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureGatesResult:
    """
    Use this data source to get the list of SWR feature gates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Swr.get_feature_gates()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Swr/getFeatureGates:getFeatureGates', __args__, opts=opts, typ=GetFeatureGatesResult).value

    return AwaitableGetFeatureGatesResult(
        enable_cci_service=pulumi.get(__ret__, 'enable_cci_service'),
        enable_experience=pulumi.get(__ret__, 'enable_experience'),
        enable_hss_service=pulumi.get(__ret__, 'enable_hss_service'),
        enable_image_label=pulumi.get(__ret__, 'enable_image_label'),
        enable_image_scan=pulumi.get(__ret__, 'enable_image_scan'),
        enable_image_sync=pulumi.get(__ret__, 'enable_image_sync'),
        enable_pipeline=pulumi.get(__ret__, 'enable_pipeline'),
        enable_sm3=pulumi.get(__ret__, 'enable_sm3'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_feature_gates_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFeatureGatesResult]:
    """
    Use this data source to get the list of SWR feature gates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Swr.get_feature_gates()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Swr/getFeatureGates:getFeatureGates', __args__, opts=opts, typ=GetFeatureGatesResult)
    return __ret__.apply(lambda __response__: GetFeatureGatesResult(
        enable_cci_service=pulumi.get(__response__, 'enable_cci_service'),
        enable_experience=pulumi.get(__response__, 'enable_experience'),
        enable_hss_service=pulumi.get(__response__, 'enable_hss_service'),
        enable_image_label=pulumi.get(__response__, 'enable_image_label'),
        enable_image_scan=pulumi.get(__response__, 'enable_image_scan'),
        enable_image_sync=pulumi.get(__response__, 'enable_image_sync'),
        enable_pipeline=pulumi.get(__response__, 'enable_pipeline'),
        enable_sm3=pulumi.get(__response__, 'enable_sm3'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
