# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ImageTriggerArgs', 'ImageTrigger']

@pulumi.input_type
class ImageTriggerArgs:
    def __init__(__self__, *,
                 condition_type: pulumi.Input[_builtins.str],
                 condition_value: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 organization: pulumi.Input[_builtins.str],
                 repository: pulumi.Input[_builtins.str],
                 workload_name: pulumi.Input[_builtins.str],
                 workload_type: pulumi.Input[_builtins.str],
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ImageTrigger resource.
        :param pulumi.Input[_builtins.str] condition_type: Specifies the trigger condition type.
               Value options **all**, **tag**, **regular**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_value: Specifies the trigger condition value. Value options:
               + When condition_type is set to `all`, set this parameter to `.*`.
               + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
               + When condition_type is set to `regular`, set this parameter to a regular expression.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace where the application is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_name: Specifies the name of the application.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_type: Specifies the type of the application.
               Value options: **deployments**, **statefulsets**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
               It is required when type is set to `cce`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container: Specifies the name of the container to be updated.
               By default, all containers using this image are updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enabled: Specifies whether to enable the trigger.
               Value options **true**, **false**. Default to **true**
        :param pulumi.Input[_builtins.str] name: Specifies the trigger name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the trigger type.
               Value options **cce**, **cci**. Default to **cce**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "condition_value", condition_value)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "workload_name", workload_name)
        pulumi.set(__self__, "workload_type", workload_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger condition type.
        Value options **all**, **tag**, **regular**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition_type", value)

    @_builtins.property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger condition value. Value options:
        + When condition_type is set to `all`, set this parameter to `.*`.
        + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
        + When condition_type is set to `regular`, set this parameter to a regular expression.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_value")

    @condition_value.setter
    def condition_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition_value", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace where the application is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the application.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_name")

    @workload_name.setter
    def workload_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workload_name", value)

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the application.
        Value options: **deployments**, **statefulsets**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workload_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the cluster.
        It is required when type is set to `cce`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container to be updated.
        By default, all containers using this image are updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable the trigger.
        Value options **true**, **false**. Default to **true**
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger type.
        Value options **cce**, **cci**. Default to **cce**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ImageTriggerState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_value: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ImageTrigger resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
               It is required when type is set to `cce`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_type: Specifies the trigger condition type.
               Value options **all**, **tag**, **regular**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_value: Specifies the trigger condition value. Value options:
               + When condition_type is set to `all`, set this parameter to `.*`.
               + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
               + When condition_type is set to `regular`, set this parameter to a regular expression.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container: Specifies the name of the container to be updated.
               By default, all containers using this image are updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name of the trigger.
        :param pulumi.Input[_builtins.str] enabled: Specifies whether to enable the trigger.
               Value options **true**, **false**. Default to **true**
        :param pulumi.Input[_builtins.str] name: Specifies the trigger name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace where the application is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the trigger type.
               Value options **cce**, **cci**. Default to **cce**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_name: Specifies the name of the application.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_type: Specifies the type of the application.
               Value options: **deployments**, **statefulsets**.
               
               Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)
        if condition_value is not None:
            pulumi.set(__self__, "condition_value", condition_value)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator_name is not None:
            pulumi.set(__self__, "creator_name", creator_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workload_name is not None:
            pulumi.set(__self__, "workload_name", workload_name)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the cluster.
        It is required when type is set to `cce`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger condition type.
        Value options **all**, **tag**, **regular**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition_type", value)

    @_builtins.property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger condition value. Value options:
        + When condition_type is set to `all`, set this parameter to `.*`.
        + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
        + When condition_type is set to `regular`, set this parameter to a regular expression.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_value")

    @condition_value.setter
    def condition_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition_value", value)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container to be updated.
        By default, all containers using this image are updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator name of the trigger.
        """
        return pulumi.get(self, "creator_name")

    @creator_name.setter
    def creator_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable the trigger.
        Value options **true**, **false**. Default to **true**
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace where the application is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger type.
        Value options **cce**, **cci**. Default to **cce**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_name")

    @workload_name.setter
    def workload_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_name", value)

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the application.
        Value options: **deployments**, **statefulsets**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_type", value)


@pulumi.type_token("huaweicloud:Swr/imageTrigger:ImageTrigger")
class ImageTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_value: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SWR image trigger within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        cluster_id = config.require_object("clusterId")
        namespace = config.require_object("namespace")
        name = config.require_object("name")
        test = huaweicloud.swr.ImageTrigger("test",
            organization=organization_name,
            repository=repository_name,
            workload_type="deployments",
            workload_name="test_name",
            cluster_id=cluster_id,
            namespace=namespace,
            condition_value=".*",
            enabled="true",
            name=name,
            condition_type="all")
        ```

        ## Import

        The swr image trigger can be imported using the organization name, repository name

        and trigger name separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imageTrigger:ImageTrigger test <organization_name>/<repository_name>/<trigger_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
               It is required when type is set to `cce`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_type: Specifies the trigger condition type.
               Value options **all**, **tag**, **regular**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_value: Specifies the trigger condition value. Value options:
               + When condition_type is set to `all`, set this parameter to `.*`.
               + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
               + When condition_type is set to `regular`, set this parameter to a regular expression.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container: Specifies the name of the container to be updated.
               By default, all containers using this image are updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enabled: Specifies whether to enable the trigger.
               Value options **true**, **false**. Default to **true**
        :param pulumi.Input[_builtins.str] name: Specifies the trigger name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace where the application is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the trigger type.
               Value options **cce**, **cci**. Default to **cce**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_name: Specifies the name of the application.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_type: Specifies the type of the application.
               Value options: **deployments**, **statefulsets**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SWR image trigger within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_name = config.require_object("organizationName")
        repository_name = config.require_object("repositoryName")
        cluster_id = config.require_object("clusterId")
        namespace = config.require_object("namespace")
        name = config.require_object("name")
        test = huaweicloud.swr.ImageTrigger("test",
            organization=organization_name,
            repository=repository_name,
            workload_type="deployments",
            workload_name="test_name",
            cluster_id=cluster_id,
            namespace=namespace,
            condition_value=".*",
            enabled="true",
            name=name,
            condition_type="all")
        ```

        ## Import

        The swr image trigger can be imported using the organization name, repository name

        and trigger name separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Swr/imageTrigger:ImageTrigger test <organization_name>/<repository_name>/<trigger_name>
        ```

        :param str resource_name: The name of the resource.
        :param ImageTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_value: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageTriggerArgs.__new__(ImageTriggerArgs)

            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cluster_name"] = cluster_name
            if condition_type is None and not opts.urn:
                raise TypeError("Missing required property 'condition_type'")
            __props__.__dict__["condition_type"] = condition_type
            if condition_value is None and not opts.urn:
                raise TypeError("Missing required property 'condition_value'")
            __props__.__dict__["condition_value"] = condition_value
            __props__.__dict__["container"] = container
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["region"] = region
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["type"] = type
            if workload_name is None and not opts.urn:
                raise TypeError("Missing required property 'workload_name'")
            __props__.__dict__["workload_name"] = workload_name
            if workload_type is None and not opts.urn:
                raise TypeError("Missing required property 'workload_type'")
            __props__.__dict__["workload_type"] = workload_type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator_name"] = None
        super(ImageTrigger, __self__).__init__(
            'huaweicloud:Swr/imageTrigger:ImageTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            condition_type: Optional[pulumi.Input[_builtins.str]] = None,
            condition_value: Optional[pulumi.Input[_builtins.str]] = None,
            container: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator_name: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            organization: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repository: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workload_name: Optional[pulumi.Input[_builtins.str]] = None,
            workload_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ImageTrigger':
        """
        Get an existing ImageTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
               It is required when type is set to `cce`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_type: Specifies the trigger condition type.
               Value options **all**, **tag**, **regular**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] condition_value: Specifies the trigger condition value. Value options:
               + When condition_type is set to `all`, set this parameter to `.*`.
               + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
               + When condition_type is set to `regular`, set this parameter to a regular expression.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container: Specifies the name of the container to be updated.
               By default, all containers using this image are updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name of the trigger.
        :param pulumi.Input[_builtins.str] enabled: Specifies whether to enable the trigger.
               Value options **true**, **false**. Default to **true**
        :param pulumi.Input[_builtins.str] name: Specifies the trigger name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace where the application is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the name of the organization.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repository: Specifies the name of the repository.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the trigger type.
               Value options **cce**, **cci**. Default to **cce**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_name: Specifies the name of the application.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workload_type: Specifies the type of the application.
               Value options: **deployments**, **statefulsets**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageTriggerState.__new__(_ImageTriggerState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["condition_type"] = condition_type
        __props__.__dict__["condition_value"] = condition_value
        __props__.__dict__["container"] = container
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator_name"] = creator_name
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["organization"] = organization
        __props__.__dict__["region"] = region
        __props__.__dict__["repository"] = repository
        __props__.__dict__["type"] = type
        __props__.__dict__["workload_name"] = workload_name
        __props__.__dict__["workload_type"] = workload_type
        return ImageTrigger(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the cluster.
        It is required when type is set to `cce`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger condition type.
        Value options **all**, **tag**, **regular**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_type")

    @_builtins.property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger condition value. Value options:
        + When condition_type is set to `all`, set this parameter to `.*`.
        + When condition_type is set to `tag`, set this parameter to specific image tags separated by semicolons (;).
        + When condition_type is set to `regular`, set this parameter to a regular expression.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "condition_value")

    @_builtins.property
    @pulumi.getter
    def container(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the container to be updated.
        By default, all containers using this image are updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator name of the trigger.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to enable the trigger.
        Value options **true**, **false**. Default to **true**
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the namespace where the application is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the organization.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the repository.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger type.
        Value options **cce**, **cci**. Default to **cce**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the application.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_name")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the application.
        Value options: **deployments**, **statefulsets**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workload_type")

