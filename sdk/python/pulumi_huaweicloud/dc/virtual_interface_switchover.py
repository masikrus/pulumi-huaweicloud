# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VirtualInterfaceSwitchoverArgs', 'VirtualInterfaceSwitchover']

@pulumi.input_type
class VirtualInterfaceSwitchoverArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VirtualInterfaceSwitchover resource.
        :param pulumi.Input[_builtins.str] operation: Specifies whether to perform a switchover test.
               Value options: **shutdown** and **undo_shutdown**.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource on which the switchover test is to
               be performed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource on which the switchover test is
               to be performed. Defaults to **virtual_interface**.
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "resource_id", resource_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether to perform a switchover test.
        Value options: **shutdown** and **undo_shutdown**.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the resource on which the switchover test is to
        be performed.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the resource on which the switchover test is
        to be performed. Defaults to **virtual_interface**.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _VirtualInterfaceSwitchoverState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_status: Optional[pulumi.Input[_builtins.str]] = None,
                 operation: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VirtualInterfaceSwitchover resources.
        :param pulumi.Input[_builtins.str] end_time: Indicates the end time of the switchover test.
        :param pulumi.Input[_builtins.str] operate_status: Indicates the status of the switchover test.
        :param pulumi.Input[_builtins.str] operation: Specifies whether to perform a switchover test.
               Value options: **shutdown** and **undo_shutdown**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource on which the switchover test is to
               be performed.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource on which the switchover test is
               to be performed. Defaults to **virtual_interface**.
        :param pulumi.Input[_builtins.str] start_time: Indicates the start time of the switchover test.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if operate_status is not None:
            pulumi.set(__self__, "operate_status", operate_status)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the end time of the switchover test.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="operateStatus")
    def operate_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the switchover test.
        """
        return pulumi.get(self, "operate_status")

    @operate_status.setter
    def operate_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operate_status", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to perform a switchover test.
        Value options: **shutdown** and **undo_shutdown**.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource on which the switchover test is to
        be performed.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the resource on which the switchover test is
        to be performed. Defaults to **virtual_interface**.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the start time of the switchover test.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.type_token("huaweicloud:dc/virtualInterfaceSwitchover:VirtualInterfaceSwitchover")
class VirtualInterfaceSwitchover(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 operation: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC virtual interface switchover resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_id = config.require_object("resourceId")
        test = huaweicloud.dc.VirtualInterfaceSwitchover("test",
            resource_id=resource_id,
            operation="shutdown")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] operation: Specifies whether to perform a switchover test.
               Value options: **shutdown** and **undo_shutdown**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource on which the switchover test is to
               be performed.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource on which the switchover test is
               to be performed. Defaults to **virtual_interface**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualInterfaceSwitchoverArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC virtual interface switchover resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_id = config.require_object("resourceId")
        test = huaweicloud.dc.VirtualInterfaceSwitchover("test",
            resource_id=resource_id,
            operation="shutdown")
        ```

        :param str resource_name: The name of the resource.
        :param VirtualInterfaceSwitchoverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualInterfaceSwitchoverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 operation: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualInterfaceSwitchoverArgs.__new__(VirtualInterfaceSwitchoverArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if operation is None and not opts.urn:
                raise TypeError("Missing required property 'operation'")
            __props__.__dict__["operation"] = operation
            __props__.__dict__["region"] = region
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["end_time"] = None
            __props__.__dict__["operate_status"] = None
            __props__.__dict__["start_time"] = None
        super(VirtualInterfaceSwitchover, __self__).__init__(
            'huaweicloud:dc/virtualInterfaceSwitchover:VirtualInterfaceSwitchover',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            operate_status: Optional[pulumi.Input[_builtins.str]] = None,
            operation: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'VirtualInterfaceSwitchover':
        """
        Get an existing VirtualInterfaceSwitchover resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] end_time: Indicates the end time of the switchover test.
        :param pulumi.Input[_builtins.str] operate_status: Indicates the status of the switchover test.
        :param pulumi.Input[_builtins.str] operation: Specifies whether to perform a switchover test.
               Value options: **shutdown** and **undo_shutdown**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource on which the switchover test is to
               be performed.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource on which the switchover test is
               to be performed. Defaults to **virtual_interface**.
        :param pulumi.Input[_builtins.str] start_time: Indicates the start time of the switchover test.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualInterfaceSwitchoverState.__new__(_VirtualInterfaceSwitchoverState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["operate_status"] = operate_status
        __props__.__dict__["operation"] = operation
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["start_time"] = start_time
        return VirtualInterfaceSwitchover(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the end time of the switchover test.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="operateStatus")
    def operate_status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the switchover test.
        """
        return pulumi.get(self, "operate_status")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to perform a switchover test.
        Value options: **shutdown** and **undo_shutdown**.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the resource on which the switchover test is to
        be performed.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the resource on which the switchover test is
        to be performed. Defaults to **virtual_interface**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the start time of the switchover test.
        """
        return pulumi.get(self, "start_time")

