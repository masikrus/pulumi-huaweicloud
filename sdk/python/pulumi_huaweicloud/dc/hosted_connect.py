# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['HostedConnectArgs', 'HostedConnect']

@pulumi.input_type
class HostedConnectArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[_builtins.int],
                 hosting_id: pulumi.Input[_builtins.str],
                 resource_tenant_id: pulumi.Input[_builtins.str],
                 vlan: pulumi.Input[_builtins.int],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_location: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HostedConnect resource.
        :param pulumi.Input[_builtins.int] bandwidth: The bandwidth size of the hosted connect in Mbit/s.
        :param pulumi.Input[_builtins.str] hosting_id: The ID of the operations connection on which the hosted connect is created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_tenant_id: The tenant ID for whom a hosted connect is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] vlan: The VLAN allocated to the hosted connect.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the hosted connect.
        :param pulumi.Input[_builtins.str] name: The name of the hosted connect.
        :param pulumi.Input[_builtins.str] peer_location: The location of the on-premises facility at the other end of the connection.  
               Specific to the street or data center name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "hosting_id", hosting_id)
        pulumi.set(__self__, "resource_tenant_id", resource_tenant_id)
        pulumi.set(__self__, "vlan", vlan)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_location is not None:
            pulumi.set(__self__, "peer_location", peer_location)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[_builtins.int]:
        """
        The bandwidth size of the hosted connect in Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the operations connection on which the hosted connect is created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hosting_id")

    @hosting_id.setter
    def hosting_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hosting_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The tenant ID for whom a hosted connect is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_tenant_id")

    @resource_tenant_id.setter
    def resource_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[_builtins.int]:
        """
        The VLAN allocated to the hosted connect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "vlan", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the hosted connect.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the hosted connect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location of the on-premises facility at the other end of the connection.  
        Specific to the street or data center name.
        """
        return pulumi.get(self, "peer_location")

    @peer_location.setter
    def peer_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_location", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _HostedConnectState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_location: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering HostedConnect resources.
        :param pulumi.Input[_builtins.int] bandwidth: The bandwidth size of the hosted connect in Mbit/s.
        :param pulumi.Input[_builtins.str] description: The description of the hosted connect.
        :param pulumi.Input[_builtins.str] hosting_id: The ID of the operations connection on which the hosted connect is created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the hosted connect.
        :param pulumi.Input[_builtins.str] peer_location: The location of the on-premises facility at the other end of the connection.  
               Specific to the street or data center name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_tenant_id: The tenant ID for whom a hosted connect is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the hosted connect.  
               The options are as follows:
               + **BUILD**: The hosted connect has been created.
               + **ACTIVE**: The associated virtual gateway is normal.
               + **DOWN**: The port used by the hosted connect is down, indicating that there may be line faults.
               + **ERROR**: The associated virtual gateway is abnormal.
               + **PENDING_DELETE**: The hosted connect is being deleted.
               + **PENDING_UPDATE**: The hosted connect is being updated.
               + **PENDING_CREATE**: The hosted connect is being created.
        :param pulumi.Input[_builtins.int] vlan: The VLAN allocated to the hosted connect.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hosting_id is not None:
            pulumi.set(__self__, "hosting_id", hosting_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_location is not None:
            pulumi.set(__self__, "peer_location", peer_location)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_tenant_id is not None:
            pulumi.set(__self__, "resource_tenant_id", resource_tenant_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The bandwidth size of the hosted connect in Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the hosted connect.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the operations connection on which the hosted connect is created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hosting_id")

    @hosting_id.setter
    def hosting_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hosting_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the hosted connect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location of the on-premises facility at the other end of the connection.  
        Specific to the street or data center name.
        """
        return pulumi.get(self, "peer_location")

    @peer_location.setter
    def peer_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_location", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The tenant ID for whom a hosted connect is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_tenant_id")

    @resource_tenant_id.setter
    def resource_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the hosted connect.  
        The options are as follows:
        + **BUILD**: The hosted connect has been created.
        + **ACTIVE**: The associated virtual gateway is normal.
        + **DOWN**: The port used by the hosted connect is down, indicating that there may be line faults.
        + **ERROR**: The associated virtual gateway is abnormal.
        + **PENDING_DELETE**: The hosted connect is being deleted.
        + **PENDING_UPDATE**: The hosted connect is being updated.
        + **PENDING_CREATE**: The hosted connect is being created.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The VLAN allocated to the hosted connect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("huaweicloud:dc/hostedConnect:HostedConnect")
class HostedConnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_location: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a hosted connection resource within HuaweiCloud.

        > The creator **must** have the partner qualification and have an operations connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_tenant_id = config.require_object("resourceTenantId")
        hosting_id = config.require_object("hostingId")
        test = huaweicloud.dc.HostedConnect("test",
            name="demo",
            description="This is a demo",
            resource_tenant_id=resource_tenant_id,
            hosting_id=hosting_id,
            vlan=441,
            bandwidth=10)
        ```

        ## Import

        The hosted connect can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/hostedConnect:HostedConnect test ac0fe389-02f5-4463-9647-58bbb3d21fed
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth: The bandwidth size of the hosted connect in Mbit/s.
        :param pulumi.Input[_builtins.str] description: The description of the hosted connect.
        :param pulumi.Input[_builtins.str] hosting_id: The ID of the operations connection on which the hosted connect is created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the hosted connect.
        :param pulumi.Input[_builtins.str] peer_location: The location of the on-premises facility at the other end of the connection.  
               Specific to the street or data center name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_tenant_id: The tenant ID for whom a hosted connect is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] vlan: The VLAN allocated to the hosted connect.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostedConnectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a hosted connection resource within HuaweiCloud.

        > The creator **must** have the partner qualification and have an operations connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_tenant_id = config.require_object("resourceTenantId")
        hosting_id = config.require_object("hostingId")
        test = huaweicloud.dc.HostedConnect("test",
            name="demo",
            description="This is a demo",
            resource_tenant_id=resource_tenant_id,
            hosting_id=hosting_id,
            vlan=441,
            bandwidth=10)
        ```

        ## Import

        The hosted connect can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/hostedConnect:HostedConnect test ac0fe389-02f5-4463-9647-58bbb3d21fed
        ```

        :param str resource_name: The name of the resource.
        :param HostedConnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostedConnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_location: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostedConnectArgs.__new__(HostedConnectArgs)

            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["description"] = description
            if hosting_id is None and not opts.urn:
                raise TypeError("Missing required property 'hosting_id'")
            __props__.__dict__["hosting_id"] = hosting_id
            __props__.__dict__["name"] = name
            __props__.__dict__["peer_location"] = peer_location
            __props__.__dict__["region"] = region
            if resource_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_tenant_id'")
            __props__.__dict__["resource_tenant_id"] = resource_tenant_id
            if vlan is None and not opts.urn:
                raise TypeError("Missing required property 'vlan'")
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["status"] = None
        super(HostedConnect, __self__).__init__(
            'huaweicloud:dc/hostedConnect:HostedConnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            hosting_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peer_location: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            vlan: Optional[pulumi.Input[_builtins.int]] = None) -> 'HostedConnect':
        """
        Get an existing HostedConnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] bandwidth: The bandwidth size of the hosted connect in Mbit/s.
        :param pulumi.Input[_builtins.str] description: The description of the hosted connect.
        :param pulumi.Input[_builtins.str] hosting_id: The ID of the operations connection on which the hosted connect is created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the hosted connect.
        :param pulumi.Input[_builtins.str] peer_location: The location of the on-premises facility at the other end of the connection.  
               Specific to the street or data center name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_tenant_id: The tenant ID for whom a hosted connect is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the hosted connect.  
               The options are as follows:
               + **BUILD**: The hosted connect has been created.
               + **ACTIVE**: The associated virtual gateway is normal.
               + **DOWN**: The port used by the hosted connect is down, indicating that there may be line faults.
               + **ERROR**: The associated virtual gateway is abnormal.
               + **PENDING_DELETE**: The hosted connect is being deleted.
               + **PENDING_UPDATE**: The hosted connect is being updated.
               + **PENDING_CREATE**: The hosted connect is being created.
        :param pulumi.Input[_builtins.int] vlan: The VLAN allocated to the hosted connect.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostedConnectState.__new__(_HostedConnectState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["description"] = description
        __props__.__dict__["hosting_id"] = hosting_id
        __props__.__dict__["name"] = name
        __props__.__dict__["peer_location"] = peer_location
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_tenant_id"] = resource_tenant_id
        __props__.__dict__["status"] = status
        __props__.__dict__["vlan"] = vlan
        return HostedConnect(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.int]:
        """
        The bandwidth size of the hosted connect in Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the hosted connect.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the operations connection on which the hosted connect is created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hosting_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the hosted connect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> pulumi.Output[_builtins.str]:
        """
        The location of the on-premises facility at the other end of the connection.  
        Specific to the street or data center name.
        """
        return pulumi.get(self, "peer_location")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The tenant ID for whom a hosted connect is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_tenant_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the hosted connect.  
        The options are as follows:
        + **BUILD**: The hosted connect has been created.
        + **ACTIVE**: The associated virtual gateway is normal.
        + **DOWN**: The port used by the hosted connect is down, indicating that there may be line faults.
        + **ERROR**: The associated virtual gateway is abnormal.
        + **PENDING_DELETE**: The hosted connect is being deleted.
        + **PENDING_UPDATE**: The hosted connect is being updated.
        + **PENDING_CREATE**: The hosted connect is being created.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[_builtins.int]:
        """
        The VLAN allocated to the hosted connect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vlan")

