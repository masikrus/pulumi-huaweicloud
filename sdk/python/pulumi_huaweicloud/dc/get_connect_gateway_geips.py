# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectGatewayGeipsResult',
    'AwaitableGetConnectGatewayGeipsResult',
    'get_connect_gateway_geips',
    'get_connect_gateway_geips_output',
]

@pulumi.output_type
class GetConnectGatewayGeipsResult:
    """
    A collection of values returned by getConnectGatewayGeips.
    """
    def __init__(__self__, connect_gateway_id=None, global_eip_ids=None, global_eip_segment_ids=None, global_eips=None, id=None, region=None, sort_dirs=None, sort_key=None, statuses=None):
        if connect_gateway_id and not isinstance(connect_gateway_id, str):
            raise TypeError("Expected argument 'connect_gateway_id' to be a str")
        pulumi.set(__self__, "connect_gateway_id", connect_gateway_id)
        if global_eip_ids and not isinstance(global_eip_ids, list):
            raise TypeError("Expected argument 'global_eip_ids' to be a list")
        pulumi.set(__self__, "global_eip_ids", global_eip_ids)
        if global_eip_segment_ids and not isinstance(global_eip_segment_ids, list):
            raise TypeError("Expected argument 'global_eip_segment_ids' to be a list")
        pulumi.set(__self__, "global_eip_segment_ids", global_eip_segment_ids)
        if global_eips and not isinstance(global_eips, list):
            raise TypeError("Expected argument 'global_eips' to be a list")
        pulumi.set(__self__, "global_eips", global_eips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dirs and not isinstance(sort_dirs, list):
            raise TypeError("Expected argument 'sort_dirs' to be a list")
        pulumi.set(__self__, "sort_dirs", sort_dirs)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter(name="connectGatewayId")
    def connect_gateway_id(self) -> _builtins.str:
        return pulumi.get(self, "connect_gateway_id")

    @_builtins.property
    @pulumi.getter(name="globalEipIds")
    def global_eip_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the global EIP ID.
        """
        return pulumi.get(self, "global_eip_ids")

    @_builtins.property
    @pulumi.getter(name="globalEipSegmentIds")
    def global_eip_segment_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the ID of the global EIP range.
        """
        return pulumi.get(self, "global_eip_segment_ids")

    @_builtins.property
    @pulumi.getter(name="globalEips")
    def global_eips(self) -> Sequence['outputs.GetConnectGatewayGeipsGlobalEipResult']:
        """
        Indicates the list of the bound global EIPs.
        """
        return pulumi.get(self, "global_eips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDirs")
    def sort_dirs(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "sort_dirs")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates whether the global EIP has been bound.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetConnectGatewayGeipsResult(GetConnectGatewayGeipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectGatewayGeipsResult(
            connect_gateway_id=self.connect_gateway_id,
            global_eip_ids=self.global_eip_ids,
            global_eip_segment_ids=self.global_eip_segment_ids,
            global_eips=self.global_eips,
            id=self.id,
            region=self.region,
            sort_dirs=self.sort_dirs,
            sort_key=self.sort_key,
            statuses=self.statuses)


def get_connect_gateway_geips(connect_gateway_id: Optional[_builtins.str] = None,
                              global_eip_ids: Optional[Sequence[_builtins.str]] = None,
                              global_eip_segment_ids: Optional[Sequence[_builtins.str]] = None,
                              region: Optional[_builtins.str] = None,
                              sort_dirs: Optional[Sequence[_builtins.str]] = None,
                              sort_key: Optional[_builtins.str] = None,
                              statuses: Optional[Sequence[_builtins.str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectGatewayGeipsResult:
    """
    Use this data source to get the list of global EIPs bound to a connect gateway.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connect_gateway_id = config.require_object("connectGatewayId")
    test = huaweicloud.dc.get_connect_gateway_geips(connect_gateway_id=connect_gateway_id)
    ```


    :param _builtins.str connect_gateway_id: Specifies the DC connect gateway ID.
    :param Sequence[_builtins.str] global_eip_ids: Specifies the global EIP ID.
    :param Sequence[_builtins.str] global_eip_segment_ids: Specifies the ID of the global EIP range.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] sort_dirs: Specifies the sorting order of returned results.
           Value options: **asc (default)** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field.
    :param Sequence[_builtins.str] statuses: Specifies the status by which instances are queried.
    """
    __args__ = dict()
    __args__['connectGatewayId'] = connect_gateway_id
    __args__['globalEipIds'] = global_eip_ids
    __args__['globalEipSegmentIds'] = global_eip_segment_ids
    __args__['region'] = region
    __args__['sortDirs'] = sort_dirs
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getConnectGatewayGeips:getConnectGatewayGeips', __args__, opts=opts, typ=GetConnectGatewayGeipsResult).value

    return AwaitableGetConnectGatewayGeipsResult(
        connect_gateway_id=pulumi.get(__ret__, 'connect_gateway_id'),
        global_eip_ids=pulumi.get(__ret__, 'global_eip_ids'),
        global_eip_segment_ids=pulumi.get(__ret__, 'global_eip_segment_ids'),
        global_eips=pulumi.get(__ret__, 'global_eips'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        sort_dirs=pulumi.get(__ret__, 'sort_dirs'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_connect_gateway_geips_output(connect_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     global_eip_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     global_eip_segment_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     sort_dirs: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectGatewayGeipsResult]:
    """
    Use this data source to get the list of global EIPs bound to a connect gateway.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connect_gateway_id = config.require_object("connectGatewayId")
    test = huaweicloud.dc.get_connect_gateway_geips(connect_gateway_id=connect_gateway_id)
    ```


    :param _builtins.str connect_gateway_id: Specifies the DC connect gateway ID.
    :param Sequence[_builtins.str] global_eip_ids: Specifies the global EIP ID.
    :param Sequence[_builtins.str] global_eip_segment_ids: Specifies the ID of the global EIP range.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] sort_dirs: Specifies the sorting order of returned results.
           Value options: **asc (default)** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field.
    :param Sequence[_builtins.str] statuses: Specifies the status by which instances are queried.
    """
    __args__ = dict()
    __args__['connectGatewayId'] = connect_gateway_id
    __args__['globalEipIds'] = global_eip_ids
    __args__['globalEipSegmentIds'] = global_eip_segment_ids
    __args__['region'] = region
    __args__['sortDirs'] = sort_dirs
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getConnectGatewayGeips:getConnectGatewayGeips', __args__, opts=opts, typ=GetConnectGatewayGeipsResult)
    return __ret__.apply(lambda __response__: GetConnectGatewayGeipsResult(
        connect_gateway_id=pulumi.get(__response__, 'connect_gateway_id'),
        global_eip_ids=pulumi.get(__response__, 'global_eip_ids'),
        global_eip_segment_ids=pulumi.get(__response__, 'global_eip_segment_ids'),
        global_eips=pulumi.get(__response__, 'global_eips'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        sort_dirs=pulumi.get(__response__, 'sort_dirs'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        statuses=pulumi.get(__response__, 'statuses')))
