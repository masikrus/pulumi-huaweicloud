# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GlobalGatewayLocaleArgs',
    'GlobalGatewayLocaleArgsDict',
    'GlobalGatewayPeerLinkBandwidthInfoArgs',
    'GlobalGatewayPeerLinkBandwidthInfoArgsDict',
    'GlobalGatewayPeerLinkPeerSiteArgs',
    'GlobalGatewayPeerLinkPeerSiteArgsDict',
    'VirtualInterfaceExtendAttributeArgs',
    'VirtualInterfaceExtendAttributeArgsDict',
    'VirtualInterfaceVifPeerArgs',
    'VirtualInterfaceVifPeerArgsDict',
    'GetResourcesByTagsMatchArgs',
    'GetResourcesByTagsMatchArgsDict',
    'GetResourcesByTagsNotTagArgs',
    'GetResourcesByTagsNotTagArgsDict',
    'GetResourcesByTagsNotTagsAnyArgs',
    'GetResourcesByTagsNotTagsAnyArgsDict',
    'GetResourcesByTagsSysTagArgs',
    'GetResourcesByTagsSysTagArgsDict',
    'GetResourcesByTagsTagArgs',
    'GetResourcesByTagsTagArgsDict',
    'GetResourcesByTagsTagsAnyArgs',
    'GetResourcesByTagsTagsAnyArgsDict',
]

MYPY = False

if not MYPY:
    class GlobalGatewayLocaleArgsDict(TypedDict):
        en_us: NotRequired[pulumi.Input[_builtins.str]]
        """
        The region name in English.
        """
        zh_cn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The region name in Chinese.
        """
elif False:
    GlobalGatewayLocaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GlobalGatewayLocaleArgs:
    def __init__(__self__, *,
                 en_us: Optional[pulumi.Input[_builtins.str]] = None,
                 zh_cn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] en_us: The region name in English.
        :param pulumi.Input[_builtins.str] zh_cn: The region name in Chinese.
        """
        if en_us is not None:
            pulumi.set(__self__, "en_us", en_us)
        if zh_cn is not None:
            pulumi.set(__self__, "zh_cn", zh_cn)

    @_builtins.property
    @pulumi.getter(name="enUs")
    def en_us(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region name in English.
        """
        return pulumi.get(self, "en_us")

    @en_us.setter
    def en_us(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_us", value)

    @_builtins.property
    @pulumi.getter(name="zhCn")
    def zh_cn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region name in Chinese.
        """
        return pulumi.get(self, "zh_cn")

    @zh_cn.setter
    def zh_cn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zh_cn", value)


if not MYPY:
    class GlobalGatewayPeerLinkBandwidthInfoArgsDict(TypedDict):
        bandwidth_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        The bandwidth size.
        """
        gcb_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The global connection bandwidth ID.
        """
elif False:
    GlobalGatewayPeerLinkBandwidthInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GlobalGatewayPeerLinkBandwidthInfoArgs:
    def __init__(__self__, *,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 gcb_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] bandwidth_size: The bandwidth size.
        :param pulumi.Input[_builtins.str] gcb_id: The global connection bandwidth ID.
        """
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if gcb_id is not None:
            pulumi.set(__self__, "gcb_id", gcb_id)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")

    @gcb_id.setter
    def gcb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gcb_id", value)


if not MYPY:
    class GlobalGatewayPeerLinkPeerSiteArgsDict(TypedDict):
        gateway_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of enterprise router (ER) that the global DC gateway
        is attached to.
        """
        project_id: pulumi.Input[_builtins.str]
        """
        Specifies the project ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        region_id: pulumi.Input[_builtins.str]
        """
        Specifies the region ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        link_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The connection ID of the peer gateway at the peer site.
        """
        site_code: NotRequired[pulumi.Input[_builtins.str]]
        """
        The site information of the global DC gateway.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the peer gateway.
        """
elif False:
    GlobalGatewayPeerLinkPeerSiteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GlobalGatewayPeerLinkPeerSiteArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str],
                 link_id: Optional[pulumi.Input[_builtins.str]] = None,
                 site_code: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the ID of enterprise router (ER) that the global DC gateway
               is attached to.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID of the enterprise router (ER) that the global
               DC gateway is attached to.
        :param pulumi.Input[_builtins.str] region_id: Specifies the region ID of the enterprise router (ER) that the global
               DC gateway is attached to.
        :param pulumi.Input[_builtins.str] link_id: The connection ID of the peer gateway at the peer site.
        :param pulumi.Input[_builtins.str] site_code: The site information of the global DC gateway.
        :param pulumi.Input[_builtins.str] type: The type of the peer gateway.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        if link_id is not None:
            pulumi.set(__self__, "link_id", link_id)
        if site_code is not None:
            pulumi.set(__self__, "site_code", site_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of enterprise router (ER) that the global DC gateway
        is attached to.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the project ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="linkId")
    def link_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The connection ID of the peer gateway at the peer site.
        """
        return pulumi.get(self, "link_id")

    @link_id.setter
    def link_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_id", value)

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The site information of the global DC gateway.
        """
        return pulumi.get(self, "site_code")

    @site_code.setter
    def site_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_code", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the peer gateway.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class VirtualInterfaceExtendAttributeArgsDict(TypedDict):
        detect_multiplier: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of detection retries.
        """
        ha_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability detection mode.
        """
        ha_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability detection type of the virtual interface.
        """
        local_disclaim: NotRequired[pulumi.Input[_builtins.int]]
        """
        The local identifier of the static BFD session.
        """
        min_rx_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The interval for receiving detection packets.
        """
        min_tx_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The interval for sending detection packets.
        """
        remote_disclaim: NotRequired[pulumi.Input[_builtins.int]]
        """
        The remote identifier of the static BFD session.
        """
elif False:
    VirtualInterfaceExtendAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualInterfaceExtendAttributeArgs:
    def __init__(__self__, *,
                 detect_multiplier: Optional[pulumi.Input[_builtins.int]] = None,
                 ha_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ha_type: Optional[pulumi.Input[_builtins.str]] = None,
                 local_disclaim: Optional[pulumi.Input[_builtins.int]] = None,
                 min_rx_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 min_tx_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_disclaim: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] detect_multiplier: The number of detection retries.
        :param pulumi.Input[_builtins.str] ha_mode: The availability detection mode.
        :param pulumi.Input[_builtins.str] ha_type: The availability detection type of the virtual interface.
        :param pulumi.Input[_builtins.int] local_disclaim: The local identifier of the static BFD session.
        :param pulumi.Input[_builtins.int] min_rx_interval: The interval for receiving detection packets.
        :param pulumi.Input[_builtins.int] min_tx_interval: The interval for sending detection packets.
        :param pulumi.Input[_builtins.int] remote_disclaim: The remote identifier of the static BFD session.
        """
        if detect_multiplier is not None:
            pulumi.set(__self__, "detect_multiplier", detect_multiplier)
        if ha_mode is not None:
            pulumi.set(__self__, "ha_mode", ha_mode)
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if local_disclaim is not None:
            pulumi.set(__self__, "local_disclaim", local_disclaim)
        if min_rx_interval is not None:
            pulumi.set(__self__, "min_rx_interval", min_rx_interval)
        if min_tx_interval is not None:
            pulumi.set(__self__, "min_tx_interval", min_tx_interval)
        if remote_disclaim is not None:
            pulumi.set(__self__, "remote_disclaim", remote_disclaim)

    @_builtins.property
    @pulumi.getter(name="detectMultiplier")
    def detect_multiplier(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of detection retries.
        """
        return pulumi.get(self, "detect_multiplier")

    @detect_multiplier.setter
    def detect_multiplier(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "detect_multiplier", value)

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability detection mode.
        """
        return pulumi.get(self, "ha_mode")

    @ha_mode.setter
    def ha_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ha_mode", value)

    @_builtins.property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability detection type of the virtual interface.
        """
        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ha_type", value)

    @_builtins.property
    @pulumi.getter(name="localDisclaim")
    def local_disclaim(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The local identifier of the static BFD session.
        """
        return pulumi.get(self, "local_disclaim")

    @local_disclaim.setter
    def local_disclaim(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_disclaim", value)

    @_builtins.property
    @pulumi.getter(name="minRxInterval")
    def min_rx_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The interval for receiving detection packets.
        """
        return pulumi.get(self, "min_rx_interval")

    @min_rx_interval.setter
    def min_rx_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_rx_interval", value)

    @_builtins.property
    @pulumi.getter(name="minTxInterval")
    def min_tx_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The interval for sending detection packets.
        """
        return pulumi.get(self, "min_tx_interval")

    @min_tx_interval.setter
    def min_tx_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_tx_interval", value)

    @_builtins.property
    @pulumi.getter(name="remoteDisclaim")
    def remote_disclaim(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The remote identifier of the static BFD session.
        """
        return pulumi.get(self, "remote_disclaim")

    @remote_disclaim.setter
    def remote_disclaim(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_disclaim", value)


if not MYPY:
    class VirtualInterfaceVifPeerArgsDict(TypedDict):
        address_family: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        bgp_asn: NotRequired[pulumi.Input[_builtins.int]]
        """
        The ASN of the BGP peer.
        """
        bgp_md5: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        bgp_route_limit: NotRequired[pulumi.Input[_builtins.int]]
        """
        The BGP route configuration.
        """
        bgp_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
        routing, the status is null.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        device_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        enable_bfd: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        enable_nqa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The VIF peer resource ID.
        """
        local_gateway_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The address of the virtual interface peer used on the cloud.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        receive_route_num: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
        this parameter is meaningless and the value is **-1**.
        """
        remote_ep_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        remote_gateway_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The address of the virtual interface peer used in the on-premises data center.
        """
        route_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        service_ep_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the virtual interface peer.
        """
        vif_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the virtual interface corresponding to the virtual interface peer.
        """
elif False:
    VirtualInterfaceVifPeerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualInterfaceVifPeerArgs:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_route_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_status: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 receive_route_num: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 remote_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 vif_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bgp_asn: The ASN of the BGP peer.
        :param pulumi.Input[_builtins.str] bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bgp_route_limit: The BGP route configuration.
        :param pulumi.Input[_builtins.str] bgp_status: The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
               routing, the status is null.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device that the virtual interface peer belongs to.
        :param pulumi.Input[_builtins.bool] enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param pulumi.Input[_builtins.str] id: The VIF peer resource ID.
        :param pulumi.Input[_builtins.str] local_gateway_ip: The address of the virtual interface peer used on the cloud.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.int] receive_route_num: The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
               this parameter is meaningless and the value is **-1**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param pulumi.Input[_builtins.str] remote_gateway_ip: The address of the virtual interface peer used in the on-premises data center.
        :param pulumi.Input[_builtins.str] route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param pulumi.Input[_builtins.str] status: The status of the virtual interface peer.
        :param pulumi.Input[_builtins.str] vif_id: The ID of the virtual interface corresponding to the virtual interface peer.
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_md5 is not None:
            pulumi.set(__self__, "bgp_md5", bgp_md5)
        if bgp_route_limit is not None:
            pulumi.set(__self__, "bgp_route_limit", bgp_route_limit)
        if bgp_status is not None:
            pulumi.set(__self__, "bgp_status", bgp_status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if enable_bfd is not None:
            pulumi.set(__self__, "enable_bfd", enable_bfd)
        if enable_nqa is not None:
            pulumi.set(__self__, "enable_nqa", enable_nqa)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_gateway_ip is not None:
            pulumi.set(__self__, "local_gateway_ip", local_gateway_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_route_num is not None:
            pulumi.set(__self__, "receive_route_num", receive_route_num)
        if remote_ep_groups is not None:
            pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        if remote_gateway_ip is not None:
            pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if service_ep_groups is not None:
            pulumi.set(__self__, "service_ep_groups", service_ep_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vif_id is not None:
            pulumi.set(__self__, "vif_id", vif_id)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The ASN of the BGP peer.
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "bgp_md5")

    @bgp_md5.setter
    def bgp_md5(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_md5", value)

    @_builtins.property
    @pulumi.getter(name="bgpRouteLimit")
    def bgp_route_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The BGP route configuration.
        """
        return pulumi.get(self, "bgp_route_limit")

    @bgp_route_limit.setter
    def bgp_route_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_route_limit", value)

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
        routing, the status is null.
        """
        return pulumi.get(self, "bgp_status")

    @bgp_status.setter
    def bgp_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_status", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        return pulumi.get(self, "enable_bfd")

    @enable_bfd.setter
    def enable_bfd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_bfd", value)

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        return pulumi.get(self, "enable_nqa")

    @enable_nqa.setter
    def enable_nqa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_nqa", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VIF peer resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The address of the virtual interface peer used on the cloud.
        """
        return pulumi.get(self, "local_gateway_ip")

    @local_gateway_ip.setter
    def local_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_ip", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="receiveRouteNum")
    def receive_route_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
        this parameter is meaningless and the value is **-1**.
        """
        return pulumi.get(self, "receive_route_num")

    @receive_route_num.setter
    def receive_route_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "receive_route_num", value)

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        return pulumi.get(self, "remote_ep_groups")

    @remote_ep_groups.setter
    def remote_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "remote_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The address of the virtual interface peer used in the on-premises data center.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @remote_gateway_ip.setter
    def remote_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="serviceEpGroups")
    def service_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        return pulumi.get(self, "service_ep_groups")

    @service_ep_groups.setter
    def service_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_ep_groups", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the virtual interface peer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="vifId")
    def vif_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the virtual interface corresponding to the virtual interface peer.
        """
        return pulumi.get(self, "vif_id")

    @vif_id.setter
    def vif_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vif_id", value)


if not MYPY:
    class GetResourcesByTagsMatchArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        value: _builtins.str
        """
        Specifies the tag value.

        <a name="tags_struct"></a>
        The `tags`, `not_tags`, `tags_any`, `not_tags_any` and `sys_tags` block supports:
        """
elif False:
    GetResourcesByTagsMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsMatchArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param _builtins.str value: Specifies the tag value.
               
               <a name="tags_struct"></a>
               The `tags`, `not_tags`, `tags_any`, `not_tags_any` and `sys_tags` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the tag value.

        <a name="tags_struct"></a>
        The `tags`, `not_tags`, `tags_any`, `not_tags_any` and `sys_tags` block supports:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetResourcesByTagsNotTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the values of the tag.
        """
elif False:
    GetResourcesByTagsNotTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsNotTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetResourcesByTagsNotTagsAnyArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the values of the tag.
        """
elif False:
    GetResourcesByTagsNotTagsAnyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsNotTagsAnyArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetResourcesByTagsSysTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the values of the tag.
        """
elif False:
    GetResourcesByTagsSysTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsSysTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetResourcesByTagsTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the values of the tag.
        """
elif False:
    GetResourcesByTagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetResourcesByTagsTagsAnyArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the tag.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the values of the tag.
        """
elif False:
    GetResourcesByTagsTagsAnyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesByTagsTagsAnyArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


