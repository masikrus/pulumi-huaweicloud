# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostedConnectsResult',
    'AwaitableGetHostedConnectsResult',
    'get_hosted_connects',
    'get_hosted_connects_output',
]

@pulumi.output_type
class GetHostedConnectsResult:
    """
    A collection of values returned by getHostedConnects.
    """
    def __init__(__self__, hosted_connect_ids=None, hosted_connects=None, hosting_ids=None, id=None, names=None, region=None, sort_dirs=None, sort_key=None):
        if hosted_connect_ids and not isinstance(hosted_connect_ids, list):
            raise TypeError("Expected argument 'hosted_connect_ids' to be a list")
        pulumi.set(__self__, "hosted_connect_ids", hosted_connect_ids)
        if hosted_connects and not isinstance(hosted_connects, list):
            raise TypeError("Expected argument 'hosted_connects' to be a list")
        pulumi.set(__self__, "hosted_connects", hosted_connects)
        if hosting_ids and not isinstance(hosting_ids, list):
            raise TypeError("Expected argument 'hosting_ids' to be a list")
        pulumi.set(__self__, "hosting_ids", hosting_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dirs and not isinstance(sort_dirs, list):
            raise TypeError("Expected argument 'sort_dirs' to be a list")
        pulumi.set(__self__, "sort_dirs", sort_dirs)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)

    @_builtins.property
    @pulumi.getter(name="hostedConnectIds")
    def hosted_connect_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "hosted_connect_ids")

    @_builtins.property
    @pulumi.getter(name="hostedConnects")
    def hosted_connects(self) -> Sequence['outputs.GetHostedConnectsHostedConnectResult']:
        """
        Indicates the list of hosted connects.
        The hosted_connects structure is documented below.
        """
        return pulumi.get(self, "hosted_connects")

    @_builtins.property
    @pulumi.getter(name="hostingIds")
    def hosting_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the hosting direct connect ID.
        """
        return pulumi.get(self, "hosting_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the hosted connect name.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDirs")
    def sort_dirs(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "sort_dirs")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")


class AwaitableGetHostedConnectsResult(GetHostedConnectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostedConnectsResult(
            hosted_connect_ids=self.hosted_connect_ids,
            hosted_connects=self.hosted_connects,
            hosting_ids=self.hosting_ids,
            id=self.id,
            names=self.names,
            region=self.region,
            sort_dirs=self.sort_dirs,
            sort_key=self.sort_key)


def get_hosted_connects(hosted_connect_ids: Optional[Sequence[_builtins.str]] = None,
                        hosting_ids: Optional[Sequence[_builtins.str]] = None,
                        names: Optional[Sequence[_builtins.str]] = None,
                        region: Optional[_builtins.str] = None,
                        sort_dirs: Optional[Sequence[_builtins.str]] = None,
                        sort_key: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostedConnectsResult:
    """
    Use this data source to get a list of hosted connects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_hosted_connects()
    ```


    :param Sequence[_builtins.str] hosted_connect_ids: Specifies the hosted connect IDs.
    :param Sequence[_builtins.str] hosting_ids: Specifies the hosting direct connect IDs to which the hosted connects belong.
    :param Sequence[_builtins.str] names: Specifies the hosted connect names.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] sort_dirs: Specifies the sorting order of returned results.
    :param _builtins.str sort_key: Specifies the sorting field.
    """
    __args__ = dict()
    __args__['hostedConnectIds'] = hosted_connect_ids
    __args__['hostingIds'] = hosting_ids
    __args__['names'] = names
    __args__['region'] = region
    __args__['sortDirs'] = sort_dirs
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getHostedConnects:getHostedConnects', __args__, opts=opts, typ=GetHostedConnectsResult).value

    return AwaitableGetHostedConnectsResult(
        hosted_connect_ids=pulumi.get(__ret__, 'hosted_connect_ids'),
        hosted_connects=pulumi.get(__ret__, 'hosted_connects'),
        hosting_ids=pulumi.get(__ret__, 'hosting_ids'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'),
        sort_dirs=pulumi.get(__ret__, 'sort_dirs'),
        sort_key=pulumi.get(__ret__, 'sort_key'))
def get_hosted_connects_output(hosted_connect_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               hosting_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               sort_dirs: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostedConnectsResult]:
    """
    Use this data source to get a list of hosted connects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_hosted_connects()
    ```


    :param Sequence[_builtins.str] hosted_connect_ids: Specifies the hosted connect IDs.
    :param Sequence[_builtins.str] hosting_ids: Specifies the hosting direct connect IDs to which the hosted connects belong.
    :param Sequence[_builtins.str] names: Specifies the hosted connect names.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] sort_dirs: Specifies the sorting order of returned results.
    :param _builtins.str sort_key: Specifies the sorting field.
    """
    __args__ = dict()
    __args__['hostedConnectIds'] = hosted_connect_ids
    __args__['hostingIds'] = hosting_ids
    __args__['names'] = names
    __args__['region'] = region
    __args__['sortDirs'] = sort_dirs
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getHostedConnects:getHostedConnects', __args__, opts=opts, typ=GetHostedConnectsResult)
    return __ret__.apply(lambda __response__: GetHostedConnectsResult(
        hosted_connect_ids=pulumi.get(__response__, 'hosted_connect_ids'),
        hosted_connects=pulumi.get(__response__, 'hosted_connects'),
        hosting_ids=pulumi.get(__response__, 'hosting_ids'),
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region'),
        sort_dirs=pulumi.get(__response__, 'sort_dirs'),
        sort_key=pulumi.get(__response__, 'sort_key')))
