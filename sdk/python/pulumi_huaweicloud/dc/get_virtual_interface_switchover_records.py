# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualInterfaceSwitchoverRecordsResult',
    'AwaitableGetVirtualInterfaceSwitchoverRecordsResult',
    'get_virtual_interface_switchover_records',
    'get_virtual_interface_switchover_records_output',
]

@pulumi.output_type
class GetVirtualInterfaceSwitchoverRecordsResult:
    """
    A collection of values returned by getVirtualInterfaceSwitchoverRecords.
    """
    def __init__(__self__, id=None, region=None, resource_ids=None, switchover_test_records=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_ids and not isinstance(resource_ids, list):
            raise TypeError("Expected argument 'resource_ids' to be a list")
        pulumi.set(__self__, "resource_ids", resource_ids)
        if switchover_test_records and not isinstance(switchover_test_records, list):
            raise TypeError("Expected argument 'switchover_test_records' to be a list")
        pulumi.set(__self__, "switchover_test_records", switchover_test_records)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the ID of the resource on which the switchover test is to be performed.
        """
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="switchoverTestRecords")
    def switchover_test_records(self) -> Sequence['outputs.GetVirtualInterfaceSwitchoverRecordsSwitchoverTestRecordResult']:
        """
        Indicates the list of the switchover test records.
        """
        return pulumi.get(self, "switchover_test_records")


class AwaitableGetVirtualInterfaceSwitchoverRecordsResult(GetVirtualInterfaceSwitchoverRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualInterfaceSwitchoverRecordsResult(
            id=self.id,
            region=self.region,
            resource_ids=self.resource_ids,
            switchover_test_records=self.switchover_test_records)


def get_virtual_interface_switchover_records(region: Optional[_builtins.str] = None,
                                             resource_ids: Optional[Sequence[_builtins.str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualInterfaceSwitchoverRecordsResult:
    """
    Use this data source to get the list of DC virtual interface switchover test records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_virtual_interface_switchover_records()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] resource_ids: Specifies the resource ID used for querying switchover test records.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceIds'] = resource_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getVirtualInterfaceSwitchoverRecords:getVirtualInterfaceSwitchoverRecords', __args__, opts=opts, typ=GetVirtualInterfaceSwitchoverRecordsResult).value

    return AwaitableGetVirtualInterfaceSwitchoverRecordsResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resource_ids=pulumi.get(__ret__, 'resource_ids'),
        switchover_test_records=pulumi.get(__ret__, 'switchover_test_records'))
def get_virtual_interface_switchover_records_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    resource_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualInterfaceSwitchoverRecordsResult]:
    """
    Use this data source to get the list of DC virtual interface switchover test records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_virtual_interface_switchover_records()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] resource_ids: Specifies the resource ID used for querying switchover test records.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceIds'] = resource_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getVirtualInterfaceSwitchoverRecords:getVirtualInterfaceSwitchoverRecords', __args__, opts=opts, typ=GetVirtualInterfaceSwitchoverRecordsResult)
    return __ret__.apply(lambda __response__: GetVirtualInterfaceSwitchoverRecordsResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resource_ids=pulumi.get(__response__, 'resource_ids'),
        switchover_test_records=pulumi.get(__response__, 'switchover_test_records')))
