# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GlobalGatewayLocale',
    'GlobalGatewayPeerLinkBandwidthInfo',
    'GlobalGatewayPeerLinkPeerSite',
    'VirtualInterfaceExtendAttribute',
    'VirtualInterfaceVifPeer',
    'GetConnectGatewayGeipsGlobalEipResult',
    'GetConnectGatewaysConnectGatewayResult',
    'GetConnectionsDirectConnectResult',
    'GetGlobalGatewayPeerLinksPeerLinkResult',
    'GetGlobalGatewayPeerLinksPeerLinkBandwidthInfoResult',
    'GetGlobalGatewayPeerLinksPeerLinkPeerSiteResult',
    'GetGlobalGatewayRouteTablesGdgwRoutetableResult',
    'GetGlobalGatewaysGatewayResult',
    'GetGlobalGatewaysGatewayLocaleResult',
    'GetHostedConnectsHostedConnectResult',
    'GetQuotasQuotaResult',
    'GetResourcesByTagsMatchResult',
    'GetResourcesByTagsNotTagResult',
    'GetResourcesByTagsNotTagsAnyResult',
    'GetResourcesByTagsResourceResult',
    'GetResourcesByTagsSysTagResult',
    'GetResourcesByTagsTagResult',
    'GetResourcesByTagsTagsAnyResult',
    'GetTagsTagResult',
    'GetVirtualGatewaysVirtualGatewayResult',
    'GetVirtualInterfaceSwitchoverRecordsSwitchoverTestRecordResult',
    'GetVirtualInterfacesVirtualInterfaceResult',
    'GetVirtualInterfacesVirtualInterfaceVifPeerResult',
]

@pulumi.output_type
class GlobalGatewayLocale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enUs":
            suggest = "en_us"
        elif key == "zhCn":
            suggest = "zh_cn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalGatewayLocale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalGatewayLocale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalGatewayLocale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 en_us: Optional[_builtins.str] = None,
                 zh_cn: Optional[_builtins.str] = None):
        """
        :param _builtins.str en_us: The region name in English.
        :param _builtins.str zh_cn: The region name in Chinese.
        """
        if en_us is not None:
            pulumi.set(__self__, "en_us", en_us)
        if zh_cn is not None:
            pulumi.set(__self__, "zh_cn", zh_cn)

    @_builtins.property
    @pulumi.getter(name="enUs")
    def en_us(self) -> Optional[_builtins.str]:
        """
        The region name in English.
        """
        return pulumi.get(self, "en_us")

    @_builtins.property
    @pulumi.getter(name="zhCn")
    def zh_cn(self) -> Optional[_builtins.str]:
        """
        The region name in Chinese.
        """
        return pulumi.get(self, "zh_cn")


@pulumi.output_type
class GlobalGatewayPeerLinkBandwidthInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "gcbId":
            suggest = "gcb_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalGatewayPeerLinkBandwidthInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalGatewayPeerLinkBandwidthInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalGatewayPeerLinkBandwidthInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_size: Optional[_builtins.int] = None,
                 gcb_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int bandwidth_size: The bandwidth size.
        :param _builtins.str gcb_id: The global connection bandwidth ID.
        """
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if gcb_id is not None:
            pulumi.set(__self__, "gcb_id", gcb_id)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[_builtins.str]:
        """
        The global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")


@pulumi.output_type
class GlobalGatewayPeerLinkPeerSite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayId":
            suggest = "gateway_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"
        elif key == "linkId":
            suggest = "link_id"
        elif key == "siteCode":
            suggest = "site_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalGatewayPeerLinkPeerSite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalGatewayPeerLinkPeerSite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalGatewayPeerLinkPeerSite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 link_id: Optional[_builtins.str] = None,
                 site_code: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str gateway_id: Specifies the ID of enterprise router (ER) that the global DC gateway
               is attached to.
        :param _builtins.str project_id: Specifies the project ID of the enterprise router (ER) that the global
               DC gateway is attached to.
        :param _builtins.str region_id: Specifies the region ID of the enterprise router (ER) that the global
               DC gateway is attached to.
        :param _builtins.str link_id: The connection ID of the peer gateway at the peer site.
        :param _builtins.str site_code: The site information of the global DC gateway.
        :param _builtins.str type: The type of the peer gateway.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        if link_id is not None:
            pulumi.set(__self__, "link_id", link_id)
        if site_code is not None:
            pulumi.set(__self__, "site_code", site_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of enterprise router (ER) that the global DC gateway
        is attached to.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Specifies the project ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region ID of the enterprise router (ER) that the global
        DC gateway is attached to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="linkId")
    def link_id(self) -> Optional[_builtins.str]:
        """
        The connection ID of the peer gateway at the peer site.
        """
        return pulumi.get(self, "link_id")

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> Optional[_builtins.str]:
        """
        The site information of the global DC gateway.
        """
        return pulumi.get(self, "site_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the peer gateway.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualInterfaceExtendAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectMultiplier":
            suggest = "detect_multiplier"
        elif key == "haMode":
            suggest = "ha_mode"
        elif key == "haType":
            suggest = "ha_type"
        elif key == "localDisclaim":
            suggest = "local_disclaim"
        elif key == "minRxInterval":
            suggest = "min_rx_interval"
        elif key == "minTxInterval":
            suggest = "min_tx_interval"
        elif key == "remoteDisclaim":
            suggest = "remote_disclaim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualInterfaceExtendAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualInterfaceExtendAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualInterfaceExtendAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detect_multiplier: Optional[_builtins.int] = None,
                 ha_mode: Optional[_builtins.str] = None,
                 ha_type: Optional[_builtins.str] = None,
                 local_disclaim: Optional[_builtins.int] = None,
                 min_rx_interval: Optional[_builtins.int] = None,
                 min_tx_interval: Optional[_builtins.int] = None,
                 remote_disclaim: Optional[_builtins.int] = None):
        """
        :param _builtins.int detect_multiplier: The number of detection retries.
        :param _builtins.str ha_mode: The availability detection mode.
        :param _builtins.str ha_type: The availability detection type of the virtual interface.
        :param _builtins.int local_disclaim: The local identifier of the static BFD session.
        :param _builtins.int min_rx_interval: The interval for receiving detection packets.
        :param _builtins.int min_tx_interval: The interval for sending detection packets.
        :param _builtins.int remote_disclaim: The remote identifier of the static BFD session.
        """
        if detect_multiplier is not None:
            pulumi.set(__self__, "detect_multiplier", detect_multiplier)
        if ha_mode is not None:
            pulumi.set(__self__, "ha_mode", ha_mode)
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if local_disclaim is not None:
            pulumi.set(__self__, "local_disclaim", local_disclaim)
        if min_rx_interval is not None:
            pulumi.set(__self__, "min_rx_interval", min_rx_interval)
        if min_tx_interval is not None:
            pulumi.set(__self__, "min_tx_interval", min_tx_interval)
        if remote_disclaim is not None:
            pulumi.set(__self__, "remote_disclaim", remote_disclaim)

    @_builtins.property
    @pulumi.getter(name="detectMultiplier")
    def detect_multiplier(self) -> Optional[_builtins.int]:
        """
        The number of detection retries.
        """
        return pulumi.get(self, "detect_multiplier")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> Optional[_builtins.str]:
        """
        The availability detection mode.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[_builtins.str]:
        """
        The availability detection type of the virtual interface.
        """
        return pulumi.get(self, "ha_type")

    @_builtins.property
    @pulumi.getter(name="localDisclaim")
    def local_disclaim(self) -> Optional[_builtins.int]:
        """
        The local identifier of the static BFD session.
        """
        return pulumi.get(self, "local_disclaim")

    @_builtins.property
    @pulumi.getter(name="minRxInterval")
    def min_rx_interval(self) -> Optional[_builtins.int]:
        """
        The interval for receiving detection packets.
        """
        return pulumi.get(self, "min_rx_interval")

    @_builtins.property
    @pulumi.getter(name="minTxInterval")
    def min_tx_interval(self) -> Optional[_builtins.int]:
        """
        The interval for sending detection packets.
        """
        return pulumi.get(self, "min_tx_interval")

    @_builtins.property
    @pulumi.getter(name="remoteDisclaim")
    def remote_disclaim(self) -> Optional[_builtins.int]:
        """
        The remote identifier of the static BFD session.
        """
        return pulumi.get(self, "remote_disclaim")


@pulumi.output_type
class VirtualInterfaceVifPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamily":
            suggest = "address_family"
        elif key == "bgpAsn":
            suggest = "bgp_asn"
        elif key == "bgpMd5":
            suggest = "bgp_md5"
        elif key == "bgpRouteLimit":
            suggest = "bgp_route_limit"
        elif key == "bgpStatus":
            suggest = "bgp_status"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "enableBfd":
            suggest = "enable_bfd"
        elif key == "enableNqa":
            suggest = "enable_nqa"
        elif key == "localGatewayIp":
            suggest = "local_gateway_ip"
        elif key == "receiveRouteNum":
            suggest = "receive_route_num"
        elif key == "remoteEpGroups":
            suggest = "remote_ep_groups"
        elif key == "remoteGatewayIp":
            suggest = "remote_gateway_ip"
        elif key == "routeMode":
            suggest = "route_mode"
        elif key == "serviceEpGroups":
            suggest = "service_ep_groups"
        elif key == "vifId":
            suggest = "vif_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualInterfaceVifPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualInterfaceVifPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualInterfaceVifPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_family: Optional[_builtins.str] = None,
                 bgp_asn: Optional[_builtins.int] = None,
                 bgp_md5: Optional[_builtins.str] = None,
                 bgp_route_limit: Optional[_builtins.int] = None,
                 bgp_status: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 device_id: Optional[_builtins.str] = None,
                 enable_bfd: Optional[_builtins.bool] = None,
                 enable_nqa: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 local_gateway_ip: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 receive_route_num: Optional[_builtins.int] = None,
                 remote_ep_groups: Optional[Sequence[_builtins.str]] = None,
                 remote_gateway_ip: Optional[_builtins.str] = None,
                 route_mode: Optional[_builtins.str] = None,
                 service_ep_groups: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.str] = None,
                 vif_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param _builtins.int bgp_asn: The ASN of the BGP peer.
        :param _builtins.str bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param _builtins.int bgp_route_limit: The BGP route configuration.
        :param _builtins.str bgp_status: The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
               routing, the status is null.
        :param _builtins.str description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param _builtins.str device_id: The ID of the device that the virtual interface peer belongs to.
        :param _builtins.bool enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param _builtins.bool enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param _builtins.str id: The VIF peer resource ID.
        :param _builtins.str local_gateway_ip: The address of the virtual interface peer used on the cloud.
        :param _builtins.str name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param _builtins.int receive_route_num: The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
               this parameter is meaningless and the value is **-1**.
        :param Sequence[_builtins.str] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param _builtins.str remote_gateway_ip: The address of the virtual interface peer used in the on-premises data center.
        :param _builtins.str route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param Sequence[_builtins.str] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param _builtins.str status: The status of the virtual interface peer.
        :param _builtins.str vif_id: The ID of the virtual interface corresponding to the virtual interface peer.
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_md5 is not None:
            pulumi.set(__self__, "bgp_md5", bgp_md5)
        if bgp_route_limit is not None:
            pulumi.set(__self__, "bgp_route_limit", bgp_route_limit)
        if bgp_status is not None:
            pulumi.set(__self__, "bgp_status", bgp_status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if enable_bfd is not None:
            pulumi.set(__self__, "enable_bfd", enable_bfd)
        if enable_nqa is not None:
            pulumi.set(__self__, "enable_nqa", enable_nqa)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_gateway_ip is not None:
            pulumi.set(__self__, "local_gateway_ip", local_gateway_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_route_num is not None:
            pulumi.set(__self__, "receive_route_num", receive_route_num)
        if remote_ep_groups is not None:
            pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        if remote_gateway_ip is not None:
            pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if service_ep_groups is not None:
            pulumi.set(__self__, "service_ep_groups", service_ep_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vif_id is not None:
            pulumi.set(__self__, "vif_id", vif_id)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[_builtins.str]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[_builtins.int]:
        """
        The ASN of the BGP peer.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> Optional[_builtins.str]:
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "bgp_md5")

    @_builtins.property
    @pulumi.getter(name="bgpRouteLimit")
    def bgp_route_limit(self) -> Optional[_builtins.int]:
        """
        The BGP route configuration.
        """
        return pulumi.get(self, "bgp_route_limit")

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> Optional[_builtins.str]:
        """
        The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
        routing, the status is null.
        """
        return pulumi.get(self, "bgp_status")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[_builtins.str]:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        return pulumi.get(self, "enable_bfd")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The VIF peer resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> Optional[_builtins.str]:
        """
        The address of the virtual interface peer used on the cloud.
        """
        return pulumi.get(self, "local_gateway_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="receiveRouteNum")
    def receive_route_num(self) -> Optional[_builtins.int]:
        """
        The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
        this parameter is meaningless and the value is **-1**.
        """
        return pulumi.get(self, "receive_route_num")

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        return pulumi.get(self, "remote_ep_groups")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> Optional[_builtins.str]:
        """
        The address of the virtual interface peer used in the on-premises data center.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="serviceEpGroups")
    def service_ep_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        return pulumi.get(self, "service_ep_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the virtual interface peer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vifId")
    def vif_id(self) -> Optional[_builtins.str]:
        """
        The ID of the virtual interface corresponding to the virtual interface peer.
        """
        return pulumi.get(self, "vif_id")


@pulumi.output_type
class GetConnectGatewayGeipsGlobalEipResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 cidr: _builtins.str,
                 created_time: _builtins.str,
                 error_message: _builtins.str,
                 gcb_id: _builtins.str,
                 global_eip_id: _builtins.str,
                 global_eip_segment_id: _builtins.str,
                 ie_vtep_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str address_family: Indicates the address family of the global EIP.
        :param _builtins.str cidr: Indicates the global EIP and its subnet mask.
        :param _builtins.str created_time: Indicates the time when the global EIP was bound.
        :param _builtins.str error_message: Indicates the cause of the failure to bind the global EIP.
        :param _builtins.str gcb_id: Indicates the global connection bandwidth ID.
        :param _builtins.str global_eip_id: Specifies the global EIP ID.
        :param _builtins.str global_eip_segment_id: Specifies the ID of the global EIP range.
        :param _builtins.str ie_vtep_ip: Indicates the VTEP IP address of the CloudPond cluster.
        :param _builtins.str status: Specifies the status by which instances are queried.
        :param _builtins.str type: Indicates the global EIP type.
               The value can be **IP_ADDRESS** or **IP_SEGMENT**.
        """
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "gcb_id", gcb_id)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        pulumi.set(__self__, "global_eip_segment_id", global_eip_segment_id)
        pulumi.set(__self__, "ie_vtep_ip", ie_vtep_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        Indicates the address family of the global EIP.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Indicates the global EIP and its subnet mask.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        Indicates the time when the global EIP was bound.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        Indicates the cause of the failure to bind the global EIP.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> _builtins.str:
        """
        Indicates the global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> _builtins.str:
        """
        Specifies the global EIP ID.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter(name="globalEipSegmentId")
    def global_eip_segment_id(self) -> _builtins.str:
        """
        Specifies the ID of the global EIP range.
        """
        return pulumi.get(self, "global_eip_segment_id")

    @_builtins.property
    @pulumi.getter(name="ieVtepIp")
    def ie_vtep_ip(self) -> _builtins.str:
        """
        Indicates the VTEP IP address of the CloudPond cluster.
        """
        return pulumi.get(self, "ie_vtep_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status by which instances are queried.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the global EIP type.
        The value can be **IP_ADDRESS** or **IP_SEGMENT**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectGatewaysConnectGatewayResult(dict):
    def __init__(__self__, *,
                 access_site: _builtins.str,
                 address_family: _builtins.str,
                 bgp_asn: _builtins.int,
                 created_time: _builtins.str,
                 current_geip_count: _builtins.int,
                 description: _builtins.str,
                 gateway_site: _builtins.str,
                 gcb_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_time: _builtins.str):
        """
        :param _builtins.str access_site: Indicates the access site of the connect gateway.
        :param _builtins.str address_family: Indicates the address family.
               The value can be:
               **ipv4**: Only IPv4 is supported.
               **dual**: IPv4 and IPv6 are supported.
        :param _builtins.int bgp_asn: Indicates the BGP ASN.
        :param _builtins.str created_time: Indicates the time when the connect gateway was created.
        :param _builtins.int current_geip_count: Indicates the number of global EIPs bound to the connect gateway.
        :param _builtins.str description: Indicates the description of the DC connect gateway.
        :param _builtins.str gateway_site: Indicates the gateway location.
        :param _builtins.str gcb_id: Indicates the global connection bandwidth ID.
        :param _builtins.str id: Indicates the ID of the connect gateway.
        :param _builtins.str name: Specifies the names of the DC connect gateway.
        :param _builtins.str status: Indicates the dc connect gateway status.
               **DOWN**: The DC connect gateway is not in use or the associated device goes down.
               **ACTIVE**: The DC connect gateway is normal.
               **ERROR**: The DC connect gateway is abnormal.
        :param _builtins.str updated_time: Indicates the time when the connect gateway was updated.
        """
        pulumi.set(__self__, "access_site", access_site)
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "current_geip_count", current_geip_count)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gateway_site", gateway_site)
        pulumi.set(__self__, "gcb_id", gcb_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> _builtins.str:
        """
        Indicates the access site of the connect gateway.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        Indicates the address family.
        The value can be:
        **ipv4**: Only IPv4 is supported.
        **dual**: IPv4 and IPv6 are supported.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        Indicates the BGP ASN.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        Indicates the time when the connect gateway was created.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="currentGeipCount")
    def current_geip_count(self) -> _builtins.int:
        """
        Indicates the number of global EIPs bound to the connect gateway.
        """
        return pulumi.get(self, "current_geip_count")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the DC connect gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gatewaySite")
    def gateway_site(self) -> _builtins.str:
        """
        Indicates the gateway location.
        """
        return pulumi.get(self, "gateway_site")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> _builtins.str:
        """
        Indicates the global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the connect gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the names of the DC connect gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the dc connect gateway status.
        **DOWN**: The DC connect gateway is not in use or the associated device goes down.
        **ACTIVE**: The DC connect gateway is normal.
        **ERROR**: The DC connect gateway is abnormal.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        Indicates the time when the connect gateway was updated.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetConnectionsDirectConnectResult(dict):
    def __init__(__self__, *,
                 apply_time: _builtins.str,
                 bandwidth: _builtins.int,
                 change_mode: _builtins.int,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 device_id: _builtins.str,
                 email: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 hosting_id: _builtins.str,
                 id: _builtins.str,
                 ies_id: _builtins.str,
                 lag_id: _builtins.str,
                 location: _builtins.str,
                 modified_bandwidth: _builtins.int,
                 name: _builtins.str,
                 onestopdc_status: _builtins.str,
                 peer_location: _builtins.str,
                 peer_port_type: _builtins.str,
                 peer_provider: _builtins.str,
                 port_type: _builtins.str,
                 provider: _builtins.str,
                 provider_status: _builtins.str,
                 public_border_group: _builtins.str,
                 ratio95peak: _builtins.int,
                 status: _builtins.str,
                 support_features: Sequence[_builtins.str],
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 vgw_type: _builtins.str,
                 vlan: _builtins.int):
        """
        :param _builtins.str apply_time: The application time of the connection, in RFC3339 format.
        :param _builtins.int bandwidth: The connection bandwidth, in Mbit/s.
        :param _builtins.int change_mode: The status of a renewal change.
        :param _builtins.str charge_mode: The billing mode.
               The value can be **prepayment**, **bandwidth**, or **traffic**.
        :param _builtins.str created_at: The creation time of the connection, in RFC3339 format.
        :param _builtins.str description: The description of the connection.
        :param _builtins.str device_id: The ID of the device connected to the connection.
        :param _builtins.str email: The customer email information.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the connections belong.
        :param _builtins.str hosting_id: Specifies operations connection ID by which hosted connections are filtered.
        :param _builtins.str id: The ID of the connection.
        :param _builtins.str ies_id: The ID of an IES edge site.
        :param _builtins.str lag_id: The ID of the LAG to which the connection belongs.
        :param _builtins.str location: The access location information of the DC.
        :param _builtins.int modified_bandwidth: The new bandwidth after the line bandwidth is changed.
        :param _builtins.str name: Specifies the name of the connection.
        :param _builtins.str onestopdc_status: The status of a full-service connection.
        :param _builtins.str peer_location: The location of the on-premises facility at the other end of the connection.
        :param _builtins.str peer_port_type: The peer port type.
        :param _builtins.str peer_provider: The carrier connected to the connection.
        :param _builtins.str port_type: Specifies the type of the port used by the connection.
               The value can be **1G**, **10G**, **40G**, or **100G**.
        :param _builtins.str provider: The line carrier of the connection.
        :param _builtins.str provider_status: The status of the carrier's leased line.
               The value can be **ACTIVE** or **DOWN**.
        :param _builtins.str public_border_group: The public border group of the AZ, indicating whether the site is a HomeZones site.
        :param _builtins.int ratio95peak: The percentage of the minimum bandwidth for 95th percentile billing.
        :param _builtins.str status: Specifies the status of the connection.
               The valid values are as follows:
               + **ACTIVE**: The connection is in the normal state.
               + **DOWN**: The port for the connection is in the down state, which may cause line faults.
               + **BUILD**: Operations related to the connection are being performed.
               + **ERROR**: The connection configuration is incorrect. Contact customer service to rectify the fault.
               + **PENDING_DELETE**: The connection is being deleted.
               + **DELETED**: The connection has been deleted.
               + **APPLY**: A request for a connection is submitted.
               + **DENY**: A site survey is rejected because the customer fails to meet the requirements.
               + **PENDING_PAY**: The order for the connection is to be paid.
               + **PAID**: The order for the connection has been paid.
               + **PENDING_SURVEY**: A site survey is required for the connection.
        :param Sequence[_builtins.str] support_features: Lists the features supported by the connection.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the connection.
        :param _builtins.str type: Specifies the type of the connection.
               The value can be **standard** (a standard connection), **hosting** (an operations connection) or
               **hosted** (a hosted connection).
        :param _builtins.str vgw_type: The gateway type of the DC.
               The default value is **default**.
        :param _builtins.int vlan: The VLAN allocated to the hosted connection.
        """
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "change_mode", change_mode)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "hosting_id", hosting_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ies_id", ies_id)
        pulumi.set(__self__, "lag_id", lag_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "modified_bandwidth", modified_bandwidth)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "onestopdc_status", onestopdc_status)
        pulumi.set(__self__, "peer_location", peer_location)
        pulumi.set(__self__, "peer_port_type", peer_port_type)
        pulumi.set(__self__, "peer_provider", peer_provider)
        pulumi.set(__self__, "port_type", port_type)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "provider_status", provider_status)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "ratio95peak", ratio95peak)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vgw_type", vgw_type)
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> _builtins.str:
        """
        The application time of the connection, in RFC3339 format.
        """
        return pulumi.get(self, "apply_time")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        The connection bandwidth, in Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="changeMode")
    def change_mode(self) -> _builtins.int:
        """
        The status of a renewal change.
        """
        return pulumi.get(self, "change_mode")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The billing mode.
        The value can be **prepayment**, **bandwidth**, or **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the connection, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        The ID of the device connected to the connection.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        The customer email information.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the connections belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> _builtins.str:
        """
        Specifies operations connection ID by which hosted connections are filtered.
        """
        return pulumi.get(self, "hosting_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="iesId")
    def ies_id(self) -> _builtins.str:
        """
        The ID of an IES edge site.
        """
        return pulumi.get(self, "ies_id")

    @_builtins.property
    @pulumi.getter(name="lagId")
    def lag_id(self) -> _builtins.str:
        """
        The ID of the LAG to which the connection belongs.
        """
        return pulumi.get(self, "lag_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The access location information of the DC.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="modifiedBandwidth")
    def modified_bandwidth(self) -> _builtins.int:
        """
        The new bandwidth after the line bandwidth is changed.
        """
        return pulumi.get(self, "modified_bandwidth")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the connection.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onestopdcStatus")
    def onestopdc_status(self) -> _builtins.str:
        """
        The status of a full-service connection.
        """
        return pulumi.get(self, "onestopdc_status")

    @_builtins.property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> _builtins.str:
        """
        The location of the on-premises facility at the other end of the connection.
        """
        return pulumi.get(self, "peer_location")

    @_builtins.property
    @pulumi.getter(name="peerPortType")
    def peer_port_type(self) -> _builtins.str:
        """
        The peer port type.
        """
        return pulumi.get(self, "peer_port_type")

    @_builtins.property
    @pulumi.getter(name="peerProvider")
    def peer_provider(self) -> _builtins.str:
        """
        The carrier connected to the connection.
        """
        return pulumi.get(self, "peer_provider")

    @_builtins.property
    @pulumi.getter(name="portType")
    def port_type(self) -> _builtins.str:
        """
        Specifies the type of the port used by the connection.
        The value can be **1G**, **10G**, **40G**, or **100G**.
        """
        return pulumi.get(self, "port_type")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        The line carrier of the connection.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> _builtins.str:
        """
        The status of the carrier's leased line.
        The value can be **ACTIVE** or **DOWN**.
        """
        return pulumi.get(self, "provider_status")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        The public border group of the AZ, indicating whether the site is a HomeZones site.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def ratio95peak(self) -> _builtins.int:
        """
        The percentage of the minimum bandwidth for 95th percentile billing.
        """
        return pulumi.get(self, "ratio95peak")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the connection.
        The valid values are as follows:
        + **ACTIVE**: The connection is in the normal state.
        + **DOWN**: The port for the connection is in the down state, which may cause line faults.
        + **BUILD**: Operations related to the connection are being performed.
        + **ERROR**: The connection configuration is incorrect. Contact customer service to rectify the fault.
        + **PENDING_DELETE**: The connection is being deleted.
        + **DELETED**: The connection has been deleted.
        + **APPLY**: A request for a connection is submitted.
        + **DENY**: A site survey is rejected because the customer fails to meet the requirements.
        + **PENDING_PAY**: The order for the connection is to be paid.
        + **PAID**: The order for the connection has been paid.
        + **PENDING_SURVEY**: A site survey is required for the connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence[_builtins.str]:
        """
        Lists the features supported by the connection.
        """
        return pulumi.get(self, "support_features")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the connection.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the connection.
        The value can be **standard** (a standard connection), **hosting** (an operations connection) or
        **hosted** (a hosted connection).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vgwType")
    def vgw_type(self) -> _builtins.str:
        """
        The gateway type of the DC.
        The default value is **default**.
        """
        return pulumi.get(self, "vgw_type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.int:
        """
        The VLAN allocated to the hosted connection.
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetGlobalGatewayPeerLinksPeerLinkResult(dict):
    def __init__(__self__, *,
                 bandwidth_infos: Sequence['outputs.GetGlobalGatewayPeerLinksPeerLinkBandwidthInfoResult'],
                 create_owner: _builtins.str,
                 created_time: _builtins.str,
                 description: _builtins.str,
                 global_dc_gateway_id: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 peer_sites: Sequence['outputs.GetGlobalGatewayPeerLinksPeerLinkPeerSiteResult'],
                 reason: _builtins.str,
                 status: _builtins.str,
                 updated_time: _builtins.str):
        """
        :param Sequence['GetGlobalGatewayPeerLinksPeerLinkBandwidthInfoArgs'] bandwidth_infos: The bandwidth information.
               The bandwidth_info structure is documented below.
        :param _builtins.str create_owner: The cloud service where the peer link is used. This attribute values include:
               + **cc**: Cloud Connect.
               + **dc**: Direct Connect.
        :param _builtins.str created_time: The time when the peer link was added.
        :param _builtins.str description: The description of the peer link.
        :param _builtins.str global_dc_gateway_id: Specifies the global DC gateway ID.
        :param _builtins.str id: The peer link ID.
        :param _builtins.str instance_id: The ID of the instance associated with the peer link.
        :param _builtins.str name: The name of the peer link.
        :param Sequence['GetGlobalGatewayPeerLinksPeerLinkPeerSiteArgs'] peer_sites: The bandwidth information.
               The peer_site structure is documented below.
        :param _builtins.str reason: The cause of the failure to add the peer link.
        :param _builtins.str status: The status of the peer link. This attribute values include:
               + **PENDING_CREATE**: The peer link is being created.
               + **PENDING_UPDATE**: The peer link is being updated.
               + **ACTIVE**: The peer link is available.
               + **ERROR**: An error occurred.
        :param _builtins.str updated_time: The time when the peer link was updated.
        """
        pulumi.set(__self__, "bandwidth_infos", bandwidth_infos)
        pulumi.set(__self__, "create_owner", create_owner)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_dc_gateway_id", global_dc_gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_sites", peer_sites)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="bandwidthInfos")
    def bandwidth_infos(self) -> Sequence['outputs.GetGlobalGatewayPeerLinksPeerLinkBandwidthInfoResult']:
        """
        The bandwidth information.
        The bandwidth_info structure is documented below.
        """
        return pulumi.get(self, "bandwidth_infos")

    @_builtins.property
    @pulumi.getter(name="createOwner")
    def create_owner(self) -> _builtins.str:
        """
        The cloud service where the peer link is used. This attribute values include:
        + **cc**: Cloud Connect.
        + **dc**: Direct Connect.
        """
        return pulumi.get(self, "create_owner")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The time when the peer link was added.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer link.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="globalDcGatewayId")
    def global_dc_gateway_id(self) -> _builtins.str:
        """
        Specifies the global DC gateway ID.
        """
        return pulumi.get(self, "global_dc_gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The peer link ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the instance associated with the peer link.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the peer link.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerSites")
    def peer_sites(self) -> Sequence['outputs.GetGlobalGatewayPeerLinksPeerLinkPeerSiteResult']:
        """
        The bandwidth information.
        The peer_site structure is documented below.
        """
        return pulumi.get(self, "peer_sites")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        The cause of the failure to add the peer link.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the peer link. This attribute values include:
        + **PENDING_CREATE**: The peer link is being created.
        + **PENDING_UPDATE**: The peer link is being updated.
        + **ACTIVE**: The peer link is available.
        + **ERROR**: An error occurred.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        The time when the peer link was updated.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetGlobalGatewayPeerLinksPeerLinkBandwidthInfoResult(dict):
    def __init__(__self__, *,
                 bandwidth_size: _builtins.int,
                 gcb_id: _builtins.str):
        """
        :param _builtins.int bandwidth_size: The bandwidth size.
        :param _builtins.str gcb_id: The global connection bandwidth ID.
        """
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "gcb_id", gcb_id)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> _builtins.str:
        """
        The global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")


@pulumi.output_type
class GetGlobalGatewayPeerLinksPeerLinkPeerSiteResult(dict):
    def __init__(__self__, *,
                 gateway_id: _builtins.str,
                 link_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 site_code: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str gateway_id: The ID of enterprise router that the global DC gateway is attached to.
        :param _builtins.str link_id: The connection ID of the peer gateway at the peer site.
               For example, if the peer gateway is an enterprise router, this attribute means attachment ID.
               If the peer gateway is a global DC gateway, this attribute means the peer link ID.
        :param _builtins.str project_id: The project ID of the enterprise router that the global DC gateway is attached to.
        :param _builtins.str region_id: The region ID of the enterprise router that the global DC gateway is attached to.
        :param _builtins.str site_code: The site information of the global DC gateway.
        :param _builtins.str type: The type of the peer gateway. This attribute values include:
               + **ER**: Enterprise router.
               + **GDGW**: Global DC gateway.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "link_id", link_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "site_code", site_code)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        The ID of enterprise router that the global DC gateway is attached to.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="linkId")
    def link_id(self) -> _builtins.str:
        """
        The connection ID of the peer gateway at the peer site.
        For example, if the peer gateway is an enterprise router, this attribute means attachment ID.
        If the peer gateway is a global DC gateway, this attribute means the peer link ID.
        """
        return pulumi.get(self, "link_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the enterprise router that the global DC gateway is attached to.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID of the enterprise router that the global DC gateway is attached to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="siteCode")
    def site_code(self) -> _builtins.str:
        """
        The site information of the global DC gateway.
        """
        return pulumi.get(self, "site_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the peer gateway. This attribute values include:
        + **ER**: Enterprise router.
        + **GDGW**: Global DC gateway.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGlobalGatewayRouteTablesGdgwRoutetableResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 description: _builtins.str,
                 destination: _builtins.str,
                 gateway_id: _builtins.str,
                 id: _builtins.str,
                 nexthop: _builtins.str,
                 obtain_mode: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str address_family: Specifies the address families to filter the routes.
        :param _builtins.str description: Indicates the route description.
        :param _builtins.str destination: Specifies the destination addresses to filter the routes.
        :param _builtins.str gateway_id: Indicates the gateway ID.
        :param _builtins.str id: Indicates the route ID.
        :param _builtins.str nexthop: Specifies the nexthop IDs to filter the routes.
        :param _builtins.str obtain_mode: Indicates the route type. The value can be:
               + **customized**: default route.
               + **specific**: custom route.
               + **bgp**: dynamic route.
        :param _builtins.str status: Indicates the route status. The value can be:
               + **ACTIVE**: issued normally.
               + **ERROR**: failed to issue.
               + **PENDING_CREATE**: to be issued.
        :param _builtins.str type: Indicates the nexthop type. The value can be:
               + **vif_peer**: virtual interface peer.
               + **gdgw**: global gateway.
        """
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "obtain_mode", obtain_mode)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        Specifies the address families to filter the routes.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the route description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the destination addresses to filter the routes.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Indicates the gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the route ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        Specifies the nexthop IDs to filter the routes.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter(name="obtainMode")
    def obtain_mode(self) -> _builtins.str:
        """
        Indicates the route type. The value can be:
        + **customized**: default route.
        + **specific**: custom route.
        + **bgp**: dynamic route.
        """
        return pulumi.get(self, "obtain_mode")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the route status. The value can be:
        + **ACTIVE**: issued normally.
        + **ERROR**: failed to issue.
        + **PENDING_CREATE**: to be issued.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the nexthop type. The value can be:
        + **vif_peer**: virtual interface peer.
        + **gdgw**: global gateway.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGlobalGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 available_peer_link_count: _builtins.int,
                 bgp_asn: _builtins.int,
                 created_time: _builtins.str,
                 current_peer_link_count: _builtins.int,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 global_center_network_id: _builtins.str,
                 id: _builtins.str,
                 locales: Sequence['outputs.GetGlobalGatewaysGatewayLocaleResult'],
                 location_name: _builtins.str,
                 name: _builtins.str,
                 reason: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_time: _builtins.str):
        """
        :param _builtins.str address_family: The IP address family of the global DC gateway.
               + **ipv4**: Only IPv4 is supported.
               + **dual**: Both IPv4 and IPv6 are supported.
        :param _builtins.int available_peer_link_count: The number of peer links that can be created for a global DC gateway.
        :param _builtins.int bgp_asn: The BGP ASN of the global DC gateway.
        :param _builtins.str created_time: The time when the global DC gateway was created.
        :param _builtins.int current_peer_link_count: The number of peer links allowed on a global DC gateway, indicating the number of
               enterprise routers that the global DC gateway can be attached to.
        :param _builtins.str description: The description of the global DC gateway.
        :param _builtins.str enterprise_project_id: The enterprise project ID that the global DC gateway belongs to.
        :param _builtins.str global_center_network_id: The ID of the central network that the global DC gateway is added to.
        :param _builtins.str id: The global DC gateway ID.
        :param Sequence['GetGlobalGatewaysGatewayLocaleArgs'] locales: The locale address description information.
        :param _builtins.str location_name: The location where the underlying device of the global DC gateway is deployed.
        :param _builtins.str name: The name of the global DC gateway.
        :param _builtins.str reason: The cause of the failure to create the global DC gateway.
        :param _builtins.str status: The status of the global DC gateway.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the DC global gateway.
        :param _builtins.str updated_time: The time when the global DC gateway was updated.
        """
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "available_peer_link_count", available_peer_link_count)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "current_peer_link_count", current_peer_link_count)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "global_center_network_id", global_center_network_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locales", locales)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        The IP address family of the global DC gateway.
        + **ipv4**: Only IPv4 is supported.
        + **dual**: Both IPv4 and IPv6 are supported.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter(name="availablePeerLinkCount")
    def available_peer_link_count(self) -> _builtins.int:
        """
        The number of peer links that can be created for a global DC gateway.
        """
        return pulumi.get(self, "available_peer_link_count")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        The BGP ASN of the global DC gateway.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The time when the global DC gateway was created.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="currentPeerLinkCount")
    def current_peer_link_count(self) -> _builtins.int:
        """
        The number of peer links allowed on a global DC gateway, indicating the number of
        enterprise routers that the global DC gateway can be attached to.
        """
        return pulumi.get(self, "current_peer_link_count")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the global DC gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID that the global DC gateway belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="globalCenterNetworkId")
    def global_center_network_id(self) -> _builtins.str:
        """
        The ID of the central network that the global DC gateway is added to.
        """
        return pulumi.get(self, "global_center_network_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The global DC gateway ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locales(self) -> Sequence['outputs.GetGlobalGatewaysGatewayLocaleResult']:
        """
        The locale address description information.
        """
        return pulumi.get(self, "locales")

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> _builtins.str:
        """
        The location where the underlying device of the global DC gateway is deployed.
        """
        return pulumi.get(self, "location_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the global DC gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        The cause of the failure to create the global DC gateway.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the global DC gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the DC global gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        The time when the global DC gateway was updated.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetGlobalGatewaysGatewayLocaleResult(dict):
    def __init__(__self__, *,
                 en_us: _builtins.str,
                 zh_cn: _builtins.str):
        """
        :param _builtins.str en_us: The region name in English.
        :param _builtins.str zh_cn: The region name in Chinese.
        """
        pulumi.set(__self__, "en_us", en_us)
        pulumi.set(__self__, "zh_cn", zh_cn)

    @_builtins.property
    @pulumi.getter(name="enUs")
    def en_us(self) -> _builtins.str:
        """
        The region name in English.
        """
        return pulumi.get(self, "en_us")

    @_builtins.property
    @pulumi.getter(name="zhCn")
    def zh_cn(self) -> _builtins.str:
        """
        The region name in Chinese.
        """
        return pulumi.get(self, "zh_cn")


@pulumi.output_type
class GetHostedConnectsHostedConnectResult(dict):
    def __init__(__self__, *,
                 apply_time: _builtins.str,
                 bandwidth: _builtins.int,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 hosting_id: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 peer_location: _builtins.str,
                 port_type: _builtins.str,
                 provider: _builtins.str,
                 provider_status: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 vlan: _builtins.int):
        """
        :param _builtins.str apply_time: Indicates the time when the hosted connect was applied.
        :param _builtins.int bandwidth: Indicates the bandwidth of the hosted connect in Mbit/s.
        :param _builtins.str create_time: Indicates the time when the hosted connect was created.
        :param _builtins.str description: Indicates the hosted connect description.
        :param _builtins.str hosting_id: Specifies the hosting direct connect IDs to which the hosted connects belong.
        :param _builtins.str id: Indicates the hosted connect ID.
        :param _builtins.str location: Indicates the location of the hosted connect.
        :param _builtins.str name: Specifies the hosted connect names.
        :param _builtins.str peer_location: Indicates the peer location of the hosted connect.
        :param _builtins.str port_type: Indicates the port type of the hosted connect.
        :param _builtins.str provider: Indicates the provider of the hosted connect.
        :param _builtins.str provider_status: Indicates the provider status of the hosted connect.
        :param _builtins.str status: Indicates the status of the hosted connect.
        :param _builtins.str type: Indicates the type of the hosted connect.
        :param _builtins.int vlan: Indicates the VLAN allocated to the hosted connect.
        """
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hosting_id", hosting_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_location", peer_location)
        pulumi.set(__self__, "port_type", port_type)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "provider_status", provider_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> _builtins.str:
        """
        Indicates the time when the hosted connect was applied.
        """
        return pulumi.get(self, "apply_time")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Indicates the bandwidth of the hosted connect in Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the time when the hosted connect was created.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the hosted connect description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> _builtins.str:
        """
        Specifies the hosting direct connect IDs to which the hosted connects belong.
        """
        return pulumi.get(self, "hosting_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the hosted connect ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Indicates the location of the hosted connect.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the hosted connect names.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> _builtins.str:
        """
        Indicates the peer location of the hosted connect.
        """
        return pulumi.get(self, "peer_location")

    @_builtins.property
    @pulumi.getter(name="portType")
    def port_type(self) -> _builtins.str:
        """
        Indicates the port type of the hosted connect.
        """
        return pulumi.get(self, "port_type")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        Indicates the provider of the hosted connect.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> _builtins.str:
        """
        Indicates the provider status of the hosted connect.
        """
        return pulumi.get(self, "provider_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the hosted connect.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the hosted connect.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.int:
        """
        Indicates the VLAN allocated to the hosted connect.
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The number of available quotas. The value **-1** indicates no quota limit.
        :param _builtins.str type: Specifies the quota type.
               The valid values are as follows:
               + **physicalConnect**: Quotas and usage for the connection.
               + **virtualInterface**: Quotas and usage for the virtual interface.
               + **connectGateway**: Quotas and usage for the connection gateway.
               + **geip**: Quotas and usage for the GEIP that each tenant can be associated.
               + **globalDcGateway**: Quotas and usage for the global DC gateway.
               + **peerLinkPerGdgw**: Quotas and usage for the peer links established with a global DC gateway.
               + **localGateway**: Quotas and usage for the local gateway.
        :param _builtins.int used: The number of used quotas.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The number of available quotas. The value **-1** indicates no quota limit.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the quota type.
        The valid values are as follows:
        + **physicalConnect**: Quotas and usage for the connection.
        + **virtualInterface**: Quotas and usage for the virtual interface.
        + **connectGateway**: Quotas and usage for the connection gateway.
        + **geip**: Quotas and usage for the GEIP that each tenant can be associated.
        + **globalDcGateway**: Quotas and usage for the global DC gateway.
        + **peerLinkPerGdgw**: Quotas and usage for the peer links established with a global DC gateway.
        + **localGateway**: Quotas and usage for the local gateway.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of used quotas.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourcesByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param _builtins.str value: Specifies the tag value.
               
               <a name="tags_struct"></a>
               The `tags`, `not_tags`, `tags_any`, `not_tags_any` and `sys_tags` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the tag value.

        <a name="tags_struct"></a>
        The `tags`, `not_tags`, `tags_any`, `not_tags_any` and `sys_tags` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourcesByTagsNotTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesByTagsNotTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 sys_tags: Mapping[str, _builtins.str],
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str resource_detail: Indicates the provides details about the resource.
        :param _builtins.str resource_id: Indicates the resource ID.
        :param _builtins.str resource_name: Indicates the resource name.
        :param Mapping[str, _builtins.str] sys_tags: Specifies the system tags. Only users with the op_service permission can use this parameter
               to filter resources. Only one tag structure is contained when this API is called by Tag Management Service (TMS). The
               key is **_sys_enterprise_project_id**, and the value is the enterprise project ID list. Currently, each key can contain
               only one value. 0 indicates the default enterprise project. sys_tags and tenant tag filtering conditions
               (`without_any_tag`, `tags`, `tags_any`, `not_tags`, and `not_tags_any`) cannot be used at the same time.
               The sys_tags structure is documented below.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        :param Mapping[str, _builtins.str] tags: Specifies the tags. A maximum of 10 keys can be queried at a time, and each key can contain
               a maximum of 10 values. The structure body must be included. The tag key cannot be left blank or be an empty string.
               Each tag key must be unique, and each tag value of a tag must also be unique. Resources identified by different keys
               are in AND relationship, and values in one tag are in OR relationship. If no tag filtering criteria is specified, full
               data is returned.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "sys_tags", sys_tags)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        Indicates the provides details about the resource.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the system tags. Only users with the op_service permission can use this parameter
        to filter resources. Only one tag structure is contained when this API is called by Tag Management Service (TMS). The
        key is **_sys_enterprise_project_id**, and the value is the enterprise project ID list. Currently, each key can contain
        only one value. 0 indicates the default enterprise project. sys_tags and tenant tag filtering conditions
        (`without_any_tag`, `tags`, `tags_any`, `not_tags`, and `not_tags_any`) cannot be used at the same time.
        The sys_tags structure is documented below.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags. A maximum of 10 keys can be queried at a time, and each key can contain
        a maximum of 10 values. The structure body must be included. The tag key cannot be left blank or be an empty string.
        Each tag key must be unique, and each tag value of a tag must also be unique. Resources identified by different keys
        are in AND relationship, and values in one tag are in OR relationship. If no tag filtering criteria is specified, full
        data is returned.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourcesByTagsSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesByTagsTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the tag.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 asn: _builtins.int,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 local_ep_groups: Sequence[_builtins.str],
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.int asn: Indicates the local BGP ASN of the virtual gateway.
        :param _builtins.str description: Indicates the virtual gateway description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str id: The virtual gateway ID.
        :param Sequence[_builtins.str] local_ep_groups: Indicates the IPv4 subnets connected by the virtual gateway.
        :param _builtins.str name: Specifies the name of the virtual gateway.
        :param _builtins.str status: Indicates the virtual gateway status.
        :param _builtins.str type: Indicates the virtual gateway type.
        :param _builtins.str vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_ep_groups", local_ep_groups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.int:
        """
        Indicates the local BGP ASN of the virtual gateway.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the virtual gateway description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The virtual gateway ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localEpGroups")
    def local_ep_groups(self) -> Sequence[_builtins.str]:
        """
        Indicates the IPv4 subnets connected by the virtual gateway.
        """
        return pulumi.get(self, "local_ep_groups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the virtual gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the virtual gateway status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the virtual gateway type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC connected to the virtual gateway.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVirtualInterfaceSwitchoverRecordsSwitchoverTestRecordResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 operate_status: _builtins.str,
                 operation: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 start_time: _builtins.str):
        """
        :param _builtins.str end_time: Indicates the end time of the switchover test.
        :param _builtins.str id: Indicates the unique ID of the switchover test record.
        :param _builtins.str operate_status: Indicates the switchover test status.
               The value can be:
               + **STARTING**: indicates the initial status.
               + **INPROGRESS**: The configuration is being delivered.
               + **COMPLETE**: The configuration is delivered.
               + **ERROR**: The configuration fails to be delivered.
        :param _builtins.str operation: Indicates whether to perform a switchover test.
               The value can be: **shutdown** and **undo_shutdown**.
        :param _builtins.str resource_id: Specifies the resource ID used for querying switchover test records.
        :param _builtins.str resource_type: Indicates the type of the resource on which the switchover test is to be performed.
        :param _builtins.str start_time: Indicates the start time of the switchover test.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operate_status", operate_status)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time of the switchover test.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the unique ID of the switchover test record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="operateStatus")
    def operate_status(self) -> _builtins.str:
        """
        Indicates the switchover test status.
        The value can be:
        + **STARTING**: indicates the initial status.
        + **INPROGRESS**: The configuration is being delivered.
        + **COMPLETE**: The configuration is delivered.
        + **ERROR**: The configuration fails to be delivered.
        """
        return pulumi.get(self, "operate_status")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        Indicates whether to perform a switchover test.
        The value can be: **shutdown** and **undo_shutdown**.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID used for querying switchover test records.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the type of the resource on which the switchover test is to be performed.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of the switchover test.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetVirtualInterfacesVirtualInterfaceResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 asn: _builtins.int,
                 bandwidth: _builtins.int,
                 bgp_md5: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 device_id: _builtins.str,
                 direct_connect_id: _builtins.str,
                 enable_bfd: _builtins.bool,
                 enable_nqa: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 lag_id: _builtins.str,
                 local_gateway_v4_ip: _builtins.str,
                 local_gateway_v6_ip: _builtins.str,
                 name: _builtins.str,
                 remote_ep_groups: Sequence[_builtins.str],
                 remote_gateway_v4_ip: _builtins.str,
                 remote_gateway_v6_ip: _builtins.str,
                 route_mode: _builtins.str,
                 service_type: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 vgw_id: _builtins.str,
                 vif_peers: Sequence['outputs.GetVirtualInterfacesVirtualInterfaceVifPeerResult'],
                 vlan: _builtins.int):
        """
        :param _builtins.str address_family: The address family type of the virtual interface, which can be **IPv4** or **IPv6**.
        :param _builtins.int asn: The (ASN) number for the local BGP.
        :param _builtins.int bandwidth: The bandwidth of the virtual interface.
        :param _builtins.str bgp_md5: The MD5 password of the BGP peer.
        :param _builtins.str created_at: The create time of the virtual interface.
        :param _builtins.str description: The description of the virtual interface peer.
        :param _builtins.str device_id: The ID of the device that the virtual interface peer belongs to.
        :param _builtins.str direct_connect_id: Specifies the ID of the direct connection associated with the virtual interface.
        :param _builtins.bool enable_bfd: Whether to enable BFD.
        :param _builtins.bool enable_nqa: Whether to enable NQA.
        :param _builtins.str enterprise_project_id: Indicates the ID of the enterprise project
               that the virtual interface belongs to.
        :param _builtins.str id: The VIF peer resource ID.
        :param _builtins.str lag_id: The link aggregation group ID associated with vif of the virtual interface.
        :param _builtins.str local_gateway_v4_ip: The cloud side gateway IPv4 interface address of the virtual interface.
        :param _builtins.str local_gateway_v6_ip: The cloud side gateway IPv6 interface address of the virtual interface.
        :param _builtins.str name: Specifies the name of the virtual interface.
        :param Sequence[_builtins.str] remote_ep_groups: The remote subnet list, which records the CIDR blocks used in the on-premises data center.
        :param _builtins.str remote_gateway_v4_ip: The customer side gateway IPv4 interface address of the virtual interface.
        :param _builtins.str remote_gateway_v6_ip: The customer side gateway IPv6 interface address of the virtual interface.
        :param _builtins.str route_mode: The routing mode, which can be **static** or **bgp**.
        :param _builtins.str service_type: The type of access gateway with the virtual interface.
        :param _builtins.str status: Specifies the status of the virtual interface.
        :param _builtins.str type: The type of the virtual interface.
        :param _builtins.str vgw_id: Specifies the ID of the virtual gateway for the virtual interface.
        :param Sequence['GetVirtualInterfacesVirtualInterfaceVifPeerArgs'] vif_peers: The peer information of the virtual interface.
               The vif_peers structure is documented below.
        :param _builtins.int vlan: The VLAN connected to the user gateway of the virtual interface.
        """
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bgp_md5", bgp_md5)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "direct_connect_id", direct_connect_id)
        pulumi.set(__self__, "enable_bfd", enable_bfd)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lag_id", lag_id)
        pulumi.set(__self__, "local_gateway_v4_ip", local_gateway_v4_ip)
        pulumi.set(__self__, "local_gateway_v6_ip", local_gateway_v6_ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        pulumi.set(__self__, "remote_gateway_v4_ip", remote_gateway_v4_ip)
        pulumi.set(__self__, "remote_gateway_v6_ip", remote_gateway_v6_ip)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vgw_id", vgw_id)
        pulumi.set(__self__, "vif_peers", vif_peers)
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        The address family type of the virtual interface, which can be **IPv4** or **IPv6**.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.int:
        """
        The (ASN) number for the local BGP.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        The bandwidth of the virtual interface.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> _builtins.str:
        """
        The MD5 password of the BGP peer.
        """
        return pulumi.get(self, "bgp_md5")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the virtual interface.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the virtual interface peer.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="directConnectId")
    def direct_connect_id(self) -> _builtins.str:
        """
        Specifies the ID of the direct connection associated with the virtual interface.
        """
        return pulumi.get(self, "direct_connect_id")

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> _builtins.bool:
        """
        Whether to enable BFD.
        """
        return pulumi.get(self, "enable_bfd")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> _builtins.bool:
        """
        Whether to enable NQA.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the ID of the enterprise project
        that the virtual interface belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The VIF peer resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lagId")
    def lag_id(self) -> _builtins.str:
        """
        The link aggregation group ID associated with vif of the virtual interface.
        """
        return pulumi.get(self, "lag_id")

    @_builtins.property
    @pulumi.getter(name="localGatewayV4Ip")
    def local_gateway_v4_ip(self) -> _builtins.str:
        """
        The cloud side gateway IPv4 interface address of the virtual interface.
        """
        return pulumi.get(self, "local_gateway_v4_ip")

    @_builtins.property
    @pulumi.getter(name="localGatewayV6Ip")
    def local_gateway_v6_ip(self) -> _builtins.str:
        """
        The cloud side gateway IPv6 interface address of the virtual interface.
        """
        return pulumi.get(self, "local_gateway_v6_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the virtual interface.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> Sequence[_builtins.str]:
        """
        The remote subnet list, which records the CIDR blocks used in the on-premises data center.
        """
        return pulumi.get(self, "remote_ep_groups")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV4Ip")
    def remote_gateway_v4_ip(self) -> _builtins.str:
        """
        The customer side gateway IPv4 interface address of the virtual interface.
        """
        return pulumi.get(self, "remote_gateway_v4_ip")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV6Ip")
    def remote_gateway_v6_ip(self) -> _builtins.str:
        """
        The customer side gateway IPv6 interface address of the virtual interface.
        """
        return pulumi.get(self, "remote_gateway_v6_ip")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.str:
        """
        The routing mode, which can be **static** or **bgp**.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The type of access gateway with the virtual interface.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the virtual interface.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the virtual interface.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vgwId")
    def vgw_id(self) -> _builtins.str:
        """
        Specifies the ID of the virtual gateway for the virtual interface.
        """
        return pulumi.get(self, "vgw_id")

    @_builtins.property
    @pulumi.getter(name="vifPeers")
    def vif_peers(self) -> Sequence['outputs.GetVirtualInterfacesVirtualInterfaceVifPeerResult']:
        """
        The peer information of the virtual interface.
        The vif_peers structure is documented below.
        """
        return pulumi.get(self, "vif_peers")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.int:
        """
        The VLAN connected to the user gateway of the virtual interface.
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetVirtualInterfacesVirtualInterfaceVifPeerResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 bgp_asn: _builtins.int,
                 bgp_md5: _builtins.str,
                 bgp_route_limit: _builtins.int,
                 bgp_status: _builtins.str,
                 description: _builtins.str,
                 device_id: _builtins.str,
                 enable_bfd: _builtins.bool,
                 enable_nqa: _builtins.bool,
                 id: _builtins.str,
                 local_gateway_ip: _builtins.str,
                 name: _builtins.str,
                 receive_route_num: _builtins.int,
                 remote_ep_groups: Sequence[_builtins.str],
                 remote_gateway_ip: _builtins.str,
                 route_mode: _builtins.str,
                 status: _builtins.str,
                 vif_id: _builtins.str):
        """
        :param _builtins.str address_family: The address family type of the virtual interface, which can be **IPv4** or **IPv6**.
        :param _builtins.int bgp_asn: The ASN of the BGP peer.
        :param _builtins.str bgp_md5: The MD5 password of the BGP peer.
        :param _builtins.int bgp_route_limit: The BGP route configuration.
        :param _builtins.str bgp_status: The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
               routing, the status is null.
        :param _builtins.str description: The description of the virtual interface peer.
        :param _builtins.str device_id: The ID of the device that the virtual interface peer belongs to.
        :param _builtins.bool enable_bfd: Whether to enable BFD.
        :param _builtins.bool enable_nqa: Whether to enable NQA.
        :param _builtins.str id: The VIF peer resource ID.
        :param _builtins.str local_gateway_ip: The address of the virtual interface peer used on the cloud.
        :param _builtins.str name: Specifies the name of the virtual interface.
        :param _builtins.int receive_route_num: The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
               this parameter is meaningless and the value is **-1**.
        :param Sequence[_builtins.str] remote_ep_groups: The remote subnet list, which records the CIDR blocks used in the on-premises data center.
        :param _builtins.str remote_gateway_ip: The address of the virtual interface peer used in the on-premises data center.
        :param _builtins.str route_mode: The routing mode, which can be **static** or **bgp**.
        :param _builtins.str status: Specifies the status of the virtual interface.
        :param _builtins.str vif_id: The ID of the virtual interface corresponding to the virtual interface peer.
        """
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "bgp_md5", bgp_md5)
        pulumi.set(__self__, "bgp_route_limit", bgp_route_limit)
        pulumi.set(__self__, "bgp_status", bgp_status)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "enable_bfd", enable_bfd)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_gateway_ip", local_gateway_ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "receive_route_num", receive_route_num)
        pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vif_id", vif_id)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        """
        The address family type of the virtual interface, which can be **IPv4** or **IPv6**.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        The ASN of the BGP peer.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> _builtins.str:
        """
        The MD5 password of the BGP peer.
        """
        return pulumi.get(self, "bgp_md5")

    @_builtins.property
    @pulumi.getter(name="bgpRouteLimit")
    def bgp_route_limit(self) -> _builtins.int:
        """
        The BGP route configuration.
        """
        return pulumi.get(self, "bgp_route_limit")

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> _builtins.str:
        """
        The BGP protocol status of the virtual interface peer. If the virtual interface peer uses **static**
        routing, the status is null.
        """
        return pulumi.get(self, "bgp_status")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the virtual interface peer.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> _builtins.bool:
        """
        Whether to enable BFD.
        """
        return pulumi.get(self, "enable_bfd")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> _builtins.bool:
        """
        Whether to enable NQA.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The VIF peer resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> _builtins.str:
        """
        The address of the virtual interface peer used on the cloud.
        """
        return pulumi.get(self, "local_gateway_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the virtual interface.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="receiveRouteNum")
    def receive_route_num(self) -> _builtins.int:
        """
        The number of received BGP routes if **bgp** routing is used. If **static** routing is used,
        this parameter is meaningless and the value is **-1**.
        """
        return pulumi.get(self, "receive_route_num")

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> Sequence[_builtins.str]:
        """
        The remote subnet list, which records the CIDR blocks used in the on-premises data center.
        """
        return pulumi.get(self, "remote_ep_groups")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> _builtins.str:
        """
        The address of the virtual interface peer used in the on-premises data center.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.str:
        """
        The routing mode, which can be **static** or **bgp**.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the virtual interface.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vifId")
    def vif_id(self) -> _builtins.str:
        """
        The ID of the virtual interface corresponding to the virtual interface peer.
        """
        return pulumi.get(self, "vif_id")


