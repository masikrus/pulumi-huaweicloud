# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['GlobalGatewayRouteTableArgs', 'GlobalGatewayRouteTable']

@pulumi.input_type
class GlobalGatewayRouteTableArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[_builtins.str],
                 gdgw_id: pulumi.Input[_builtins.str],
                 nexthop: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a GlobalGatewayRouteTable resource.
        :param pulumi.Input[_builtins.str] destination: Specifies the subnet the route is destined for.
        :param pulumi.Input[_builtins.str] gdgw_id: Specifies the global DC gateway ID.
        :param pulumi.Input[_builtins.str] nexthop: Specifies the next hop ID.
        :param pulumi.Input[_builtins.str] type: Specifies the next hop type. Value options:
               + **vif_peer**: virtual interface peer
               + **gdgw**: global DC gateway
        :param pulumi.Input[_builtins.str] description: Specifies the description of the route.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "gdgw_id", gdgw_id)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subnet the route is destined for.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="gdgwId")
    def gdgw_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the global DC gateway ID.
        """
        return pulumi.get(self, "gdgw_id")

    @gdgw_id.setter
    def gdgw_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gdgw_id", value)

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the next hop ID.
        """
        return pulumi.get(self, "nexthop")

    @nexthop.setter
    def nexthop(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "nexthop", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the next hop type. Value options:
        + **vif_peer**: virtual interface peer
        + **gdgw**: global DC gateway
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the route.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _GlobalGatewayRouteTableState:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 gdgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nexthop: Optional[pulumi.Input[_builtins.str]] = None,
                 obtain_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering GlobalGatewayRouteTable resources.
        :param pulumi.Input[_builtins.str] address_family: Indicates the address family.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the route.
        :param pulumi.Input[_builtins.str] destination: Specifies the subnet the route is destined for.
        :param pulumi.Input[_builtins.str] gdgw_id: Specifies the global DC gateway ID.
        :param pulumi.Input[_builtins.str] nexthop: Specifies the next hop ID.
        :param pulumi.Input[_builtins.str] obtain_mode: Indicates the route type.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the route status.
        :param pulumi.Input[_builtins.str] type: Specifies the next hop type. Value options:
               + **vif_peer**: virtual interface peer
               + **gdgw**: global DC gateway
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if gdgw_id is not None:
            pulumi.set(__self__, "gdgw_id", gdgw_id)
        if nexthop is not None:
            pulumi.set(__self__, "nexthop", nexthop)
        if obtain_mode is not None:
            pulumi.set(__self__, "obtain_mode", obtain_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the address family.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the route.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet the route is destined for.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="gdgwId")
    def gdgw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global DC gateway ID.
        """
        return pulumi.get(self, "gdgw_id")

    @gdgw_id.setter
    def gdgw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gdgw_id", value)

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the next hop ID.
        """
        return pulumi.get(self, "nexthop")

    @nexthop.setter
    def nexthop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nexthop", value)

    @_builtins.property
    @pulumi.getter(name="obtainMode")
    def obtain_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the route type.
        """
        return pulumi.get(self, "obtain_mode")

    @obtain_mode.setter
    def obtain_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obtain_mode", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the route status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the next hop type. Value options:
        + **vif_peer**: virtual interface peer
        + **gdgw**: global DC gateway
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:dc/globalGatewayRouteTable:GlobalGatewayRouteTable")
class GlobalGatewayRouteTable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 gdgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nexthop: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC global gateway route table resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gdgw_id = config.require_object("gdgwId")
        nexthop = config.require_object("nexthop")
        test = huaweicloud.dc.GlobalGatewayRouteTable("test",
            gdgw_id=gdgw_id,
            type="vif_peer",
            destination="2.2.2.0/30",
            nexthop=nexthop)
        ```

        ## Import

        The DC connect gateway resource can be imported using the `gdgw_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/globalGatewayRouteTable:GlobalGatewayRouteTable test <gdgw_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the route.
        :param pulumi.Input[_builtins.str] destination: Specifies the subnet the route is destined for.
        :param pulumi.Input[_builtins.str] gdgw_id: Specifies the global DC gateway ID.
        :param pulumi.Input[_builtins.str] nexthop: Specifies the next hop ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the next hop type. Value options:
               + **vif_peer**: virtual interface peer
               + **gdgw**: global DC gateway
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalGatewayRouteTableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC global gateway route table resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gdgw_id = config.require_object("gdgwId")
        nexthop = config.require_object("nexthop")
        test = huaweicloud.dc.GlobalGatewayRouteTable("test",
            gdgw_id=gdgw_id,
            type="vif_peer",
            destination="2.2.2.0/30",
            nexthop=nexthop)
        ```

        ## Import

        The DC connect gateway resource can be imported using the `gdgw_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/globalGatewayRouteTable:GlobalGatewayRouteTable test <gdgw_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param GlobalGatewayRouteTableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalGatewayRouteTableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 gdgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nexthop: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalGatewayRouteTableArgs.__new__(GlobalGatewayRouteTableArgs)

            __props__.__dict__["description"] = description
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if gdgw_id is None and not opts.urn:
                raise TypeError("Missing required property 'gdgw_id'")
            __props__.__dict__["gdgw_id"] = gdgw_id
            if nexthop is None and not opts.urn:
                raise TypeError("Missing required property 'nexthop'")
            __props__.__dict__["nexthop"] = nexthop
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["address_family"] = None
            __props__.__dict__["obtain_mode"] = None
            __props__.__dict__["status"] = None
        super(GlobalGatewayRouteTable, __self__).__init__(
            'huaweicloud:dc/globalGatewayRouteTable:GlobalGatewayRouteTable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_family: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            gdgw_id: Optional[pulumi.Input[_builtins.str]] = None,
            nexthop: Optional[pulumi.Input[_builtins.str]] = None,
            obtain_mode: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'GlobalGatewayRouteTable':
        """
        Get an existing GlobalGatewayRouteTable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address_family: Indicates the address family.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the route.
        :param pulumi.Input[_builtins.str] destination: Specifies the subnet the route is destined for.
        :param pulumi.Input[_builtins.str] gdgw_id: Specifies the global DC gateway ID.
        :param pulumi.Input[_builtins.str] nexthop: Specifies the next hop ID.
        :param pulumi.Input[_builtins.str] obtain_mode: Indicates the route type.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the route status.
        :param pulumi.Input[_builtins.str] type: Specifies the next hop type. Value options:
               + **vif_peer**: virtual interface peer
               + **gdgw**: global DC gateway
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalGatewayRouteTableState.__new__(_GlobalGatewayRouteTableState)

        __props__.__dict__["address_family"] = address_family
        __props__.__dict__["description"] = description
        __props__.__dict__["destination"] = destination
        __props__.__dict__["gdgw_id"] = gdgw_id
        __props__.__dict__["nexthop"] = nexthop
        __props__.__dict__["obtain_mode"] = obtain_mode
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return GlobalGatewayRouteTable(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the address family.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the route.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet the route is destined for.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="gdgwId")
    def gdgw_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global DC gateway ID.
        """
        return pulumi.get(self, "gdgw_id")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the next hop ID.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter(name="obtainMode")
    def obtain_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the route type.
        """
        return pulumi.get(self, "obtain_mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the route status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the next hop type. Value options:
        + **vif_peer**: virtual interface peer
        + **gdgw**: global DC gateway
        """
        return pulumi.get(self, "type")

