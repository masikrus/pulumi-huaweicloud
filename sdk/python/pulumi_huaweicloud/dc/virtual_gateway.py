# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VirtualGatewayArgs', 'VirtualGateway']

@pulumi.input_type
class VirtualGatewayArgs:
    def __init__(__self__, *,
                 local_ep_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 vpc_id: pulumi.Input[_builtins.str],
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a VirtualGateway resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_ep_groups: Specifies the list of IPv4 subnets from the virtual gateway to access cloud
               services, which is usually the CIDR block of the VPC.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual gateway.
               The valid value is range from `1` to `4,294,967,295`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual gateway.
               The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               gateway belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual gateway.
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual gateway.
        """
        pulumi.set(__self__, "local_ep_groups", local_ep_groups)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="localEpGroups")
    def local_ep_groups(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of IPv4 subnets from the virtual gateway to access cloud
        services, which is usually the CIDR block of the VPC.
        """
        return pulumi.get(self, "local_ep_groups")

    @local_ep_groups.setter
    def local_ep_groups(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "local_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the VPC connected to the virtual gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the local BGP ASN of the virtual gateway.
        The valid value is range from `1` to `4,294,967,295`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the virtual gateway.
        The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the virtual
        gateway belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the virtual gateway.
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the virtual gateway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _VirtualGatewayState:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VirtualGateway resources.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual gateway.
               The valid value is range from `1` to `4,294,967,295`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual gateway.
               The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               gateway belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_ep_groups: Specifies the list of IPv4 subnets from the virtual gateway to access cloud
               services, which is usually the CIDR block of the VPC.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual gateway.
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the virtual gateway.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual gateway.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
               Changing this will create a new resource.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if local_ep_groups is not None:
            pulumi.set(__self__, "local_ep_groups", local_ep_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the local BGP ASN of the virtual gateway.
        The valid value is range from `1` to `4,294,967,295`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the virtual gateway.
        The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the virtual
        gateway belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="localEpGroups")
    def local_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IPv4 subnets from the virtual gateway to access cloud
        services, which is usually the CIDR block of the VPC.
        """
        return pulumi.get(self, "local_ep_groups")

    @local_ep_groups.setter
    def local_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "local_ep_groups", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the virtual gateway.
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the virtual gateway.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the virtual gateway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the VPC connected to the virtual gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:dc/virtualGateway:VirtualGateway")
class VirtualGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a virtual gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        vpc_cidr = config.require_object("vpcCidr")
        gateway_name = config.require_object("gatewayName")
        test = huaweicloud.dc.VirtualGateway("test",
            vpc_id=vpc_id,
            name=gateway_name,
            local_ep_groups=[vpc_cidr])
        ```

        ## Import

        Virtual gateways can be imported using their `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:dc/virtualGateway:VirtualGateway test f6f36e69-d980-4b0a-a33d-b9b125b3896c
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual gateway.
               The valid value is range from `1` to `4,294,967,295`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual gateway.
               The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               gateway belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_ep_groups: Specifies the list of IPv4 subnets from the virtual gateway to access cloud
               services, which is usually the CIDR block of the VPC.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual gateway.
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual gateway.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a virtual gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        vpc_cidr = config.require_object("vpcCidr")
        gateway_name = config.require_object("gatewayName")
        test = huaweicloud.dc.VirtualGateway("test",
            vpc_id=vpc_id,
            name=gateway_name,
            local_ep_groups=[vpc_cidr])
        ```

        ## Import

        Virtual gateways can be imported using their `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:dc/virtualGateway:VirtualGateway test f6f36e69-d980-4b0a-a33d-b9b125b3896c
        ```

        :param str resource_name: The name of the resource.
        :param VirtualGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualGatewayArgs.__new__(VirtualGatewayArgs)

            __props__.__dict__["asn"] = asn
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if local_ep_groups is None and not opts.urn:
                raise TypeError("Missing required property 'local_ep_groups'")
            __props__.__dict__["local_ep_groups"] = local_ep_groups
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["status"] = None
        super(VirtualGateway, __self__).__init__(
            'huaweicloud:dc/virtualGateway:VirtualGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asn: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            local_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VirtualGateway':
        """
        Get an existing VirtualGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual gateway.
               The valid value is range from `1` to `4,294,967,295`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual gateway.
               The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               gateway belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_ep_groups: Specifies the list of IPv4 subnets from the virtual gateway to access cloud
               services, which is usually the CIDR block of the VPC.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual gateway.
               The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual gateway is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the virtual gateway.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual gateway.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualGatewayState.__new__(_VirtualGatewayState)

        __props__.__dict__["asn"] = asn
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["local_ep_groups"] = local_ep_groups
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return VirtualGateway(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the local BGP ASN of the virtual gateway.
        The valid value is range from `1` to `4,294,967,295`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the virtual gateway.
        The description contain a maximum of 128 characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the virtual
        gateway belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="localEpGroups")
    def local_ep_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of IPv4 subnets from the virtual gateway to access cloud
        services, which is usually the CIDR block of the VPC.
        """
        return pulumi.get(self, "local_ep_groups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the virtual gateway.
        The valid length is limited from `3` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the virtual gateway is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the virtual gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the virtual gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the VPC connected to the virtual gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

