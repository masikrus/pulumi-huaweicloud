# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ConnectGatewayGeipAssociateArgs', 'ConnectGatewayGeipAssociate']

@pulumi.input_type
class ConnectGatewayGeipAssociateArgs:
    def __init__(__self__, *,
                 connect_gateway_id: pulumi.Input[_builtins.str],
                 global_eip_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ConnectGatewayGeipAssociate resource.
        :param pulumi.Input[_builtins.str] connect_gateway_id: Specifies the DC connect gateway ID.
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
               **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        pulumi.set(__self__, "connect_gateway_id", connect_gateway_id)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="connectGatewayId")
    def connect_gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DC connect gateway ID.
        """
        return pulumi.get(self, "connect_gateway_id")

    @connect_gateway_id.setter
    def connect_gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connect_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the global EIP ID.
        """
        return pulumi.get(self, "global_eip_id")

    @global_eip_id.setter
    def global_eip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "global_eip_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
        **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ConnectGatewayGeipAssociateState:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 global_eip_segment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ie_vtep_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectGatewayGeipAssociate resources.
        :param pulumi.Input[_builtins.str] address_family: Indicates the address family of the global EIP.
        :param pulumi.Input[_builtins.str] cidr: Indicates the global EIP and its subnet mask.
        :param pulumi.Input[_builtins.str] connect_gateway_id: Specifies the DC connect gateway ID.
        :param pulumi.Input[_builtins.str] created_time: Indicates the time when the global EIP was bound.
        :param pulumi.Input[_builtins.str] error_message: Indicates the cause of the failure to bind the global EIP.
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
        :param pulumi.Input[_builtins.str] global_eip_segment_id: Indicates the ID of the global EIP range.
        :param pulumi.Input[_builtins.str] ie_vtep_ip: Indicates the VTEP IP address of the CloudPond cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates whether the global EIP has been bound.
        :param pulumi.Input[_builtins.str] type: Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
               **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if connect_gateway_id is not None:
            pulumi.set(__self__, "connect_gateway_id", connect_gateway_id)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if global_eip_id is not None:
            pulumi.set(__self__, "global_eip_id", global_eip_id)
        if global_eip_segment_id is not None:
            pulumi.set(__self__, "global_eip_segment_id", global_eip_segment_id)
        if ie_vtep_ip is not None:
            pulumi.set(__self__, "ie_vtep_ip", ie_vtep_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the address family of the global EIP.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the global EIP and its subnet mask.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="connectGatewayId")
    def connect_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DC connect gateway ID.
        """
        return pulumi.get(self, "connect_gateway_id")

    @connect_gateway_id.setter
    def connect_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the global EIP was bound.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the cause of the failure to bind the global EIP.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_message", value)

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global EIP ID.
        """
        return pulumi.get(self, "global_eip_id")

    @global_eip_id.setter
    def global_eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_eip_id", value)

    @_builtins.property
    @pulumi.getter(name="globalEipSegmentId")
    def global_eip_segment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the global EIP range.
        """
        return pulumi.get(self, "global_eip_segment_id")

    @global_eip_segment_id.setter
    def global_eip_segment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_eip_segment_id", value)

    @_builtins.property
    @pulumi.getter(name="ieVtepIp")
    def ie_vtep_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the VTEP IP address of the CloudPond cluster.
        """
        return pulumi.get(self, "ie_vtep_ip")

    @ie_vtep_ip.setter
    def ie_vtep_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ie_vtep_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates whether the global EIP has been bound.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
        **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:dc/connectGatewayGeipAssociate:ConnectGatewayGeipAssociate")
class ConnectGatewayGeipAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC connect gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connect_gateway_id = config.require_object("connectGatewayId")
        global_eip_id = config.require_object("globalEipId")
        test = huaweicloud.dc.ConnectGatewayGeipAssociate("test",
            connect_gateway_id=connect_gateway_id,
            global_eip_id=global_eip_id,
            type="IP_ADDRESS")
        ```

        ## Import

        The DC connect gateway global EIP associate resource can be imported using the `connect_gateway_id` and `global_eip_id`,

        separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/connectGatewayGeipAssociate:ConnectGatewayGeipAssociate test <connect_gateway_id>/<global_eip_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connect_gateway_id: Specifies the DC connect gateway ID.
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
               **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectGatewayGeipAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC connect gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connect_gateway_id = config.require_object("connectGatewayId")
        global_eip_id = config.require_object("globalEipId")
        test = huaweicloud.dc.ConnectGatewayGeipAssociate("test",
            connect_gateway_id=connect_gateway_id,
            global_eip_id=global_eip_id,
            type="IP_ADDRESS")
        ```

        ## Import

        The DC connect gateway global EIP associate resource can be imported using the `connect_gateway_id` and `global_eip_id`,

        separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/connectGatewayGeipAssociate:ConnectGatewayGeipAssociate test <connect_gateway_id>/<global_eip_id>
        ```

        :param str resource_name: The name of the resource.
        :param ConnectGatewayGeipAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectGatewayGeipAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectGatewayGeipAssociateArgs.__new__(ConnectGatewayGeipAssociateArgs)

            if connect_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'connect_gateway_id'")
            __props__.__dict__["connect_gateway_id"] = connect_gateway_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if global_eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'global_eip_id'")
            __props__.__dict__["global_eip_id"] = global_eip_id
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["address_family"] = None
            __props__.__dict__["cidr"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["error_message"] = None
            __props__.__dict__["global_eip_segment_id"] = None
            __props__.__dict__["ie_vtep_ip"] = None
            __props__.__dict__["status"] = None
        super(ConnectGatewayGeipAssociate, __self__).__init__(
            'huaweicloud:dc/connectGatewayGeipAssociate:ConnectGatewayGeipAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_family: Optional[pulumi.Input[_builtins.str]] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            connect_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            error_message: Optional[pulumi.Input[_builtins.str]] = None,
            global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            global_eip_segment_id: Optional[pulumi.Input[_builtins.str]] = None,
            ie_vtep_ip: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectGatewayGeipAssociate':
        """
        Get an existing ConnectGatewayGeipAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address_family: Indicates the address family of the global EIP.
        :param pulumi.Input[_builtins.str] cidr: Indicates the global EIP and its subnet mask.
        :param pulumi.Input[_builtins.str] connect_gateway_id: Specifies the DC connect gateway ID.
        :param pulumi.Input[_builtins.str] created_time: Indicates the time when the global EIP was bound.
        :param pulumi.Input[_builtins.str] error_message: Indicates the cause of the failure to bind the global EIP.
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
        :param pulumi.Input[_builtins.str] global_eip_segment_id: Indicates the ID of the global EIP range.
        :param pulumi.Input[_builtins.str] ie_vtep_ip: Indicates the VTEP IP address of the CloudPond cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates whether the global EIP has been bound.
        :param pulumi.Input[_builtins.str] type: Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
               **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectGatewayGeipAssociateState.__new__(_ConnectGatewayGeipAssociateState)

        __props__.__dict__["address_family"] = address_family
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["connect_gateway_id"] = connect_gateway_id
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["global_eip_id"] = global_eip_id
        __props__.__dict__["global_eip_segment_id"] = global_eip_segment_id
        __props__.__dict__["ie_vtep_ip"] = ie_vtep_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return ConnectGatewayGeipAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the address family of the global EIP.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the global EIP and its subnet mask.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="connectGatewayId")
    def connect_gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DC connect gateway ID.
        """
        return pulumi.get(self, "connect_gateway_id")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the global EIP was bound.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the cause of the failure to bind the global EIP.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global EIP ID.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter(name="globalEipSegmentId")
    def global_eip_segment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the global EIP range.
        """
        return pulumi.get(self, "global_eip_segment_id")

    @_builtins.property
    @pulumi.getter(name="ieVtepIp")
    def ie_vtep_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the VTEP IP address of the CloudPond cluster.
        """
        return pulumi.get(self, "ie_vtep_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates whether the global EIP has been bound.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet type of the global EIP. Value options: **IP_ADDRESS**,
        **IP_SEGMENT**. Defaults to **IP_ADDRESS**.
        """
        return pulumi.get(self, "type")

