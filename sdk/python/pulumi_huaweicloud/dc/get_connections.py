# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionsResult',
    'AwaitableGetConnectionsResult',
    'get_connections',
    'get_connections_output',
]

@pulumi.output_type
class GetConnectionsResult:
    """
    A collection of values returned by getConnections.
    """
    def __init__(__self__, connection_id=None, direct_connects=None, enterprise_project_id=None, hosting_id=None, id=None, name=None, port_type=None, region=None, status=None, type=None):
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if direct_connects and not isinstance(direct_connects, list):
            raise TypeError("Expected argument 'direct_connects' to be a list")
        pulumi.set(__self__, "direct_connects", direct_connects)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if hosting_id and not isinstance(hosting_id, str):
            raise TypeError("Expected argument 'hosting_id' to be a str")
        pulumi.set(__self__, "hosting_id", hosting_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port_type and not isinstance(port_type, str):
            raise TypeError("Expected argument 'port_type' to be a str")
        pulumi.set(__self__, "port_type", port_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="directConnects")
    def direct_connects(self) -> Sequence['outputs.GetConnectionsDirectConnectResult']:
        """
        All connections that match the filter parameters.
        """
        return pulumi.get(self, "direct_connects")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the connection belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostingId")
    def hosting_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operations connection on which the hosted connection is created.
        """
        return pulumi.get(self, "hosting_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the connection.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[_builtins.str]:
        """
        The type of the port used by the connection.
        """
        return pulumi.get(self, "port_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the connection.
        """
        return pulumi.get(self, "type")


class AwaitableGetConnectionsResult(GetConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionsResult(
            connection_id=self.connection_id,
            direct_connects=self.direct_connects,
            enterprise_project_id=self.enterprise_project_id,
            hosting_id=self.hosting_id,
            id=self.id,
            name=self.name,
            port_type=self.port_type,
            region=self.region,
            status=self.status,
            type=self.type)


def get_connections(connection_id: Optional[_builtins.str] = None,
                    enterprise_project_id: Optional[_builtins.str] = None,
                    hosting_id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    port_type: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    status: Optional[_builtins.str] = None,
                    type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionsResult:
    """
    Use this data source to get the list of connections.


    :param _builtins.str connection_id: Specifies the ID of the connection.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the connections belong.
    :param _builtins.str hosting_id: Specifies operations connection ID by which hosted connections are filtered.
    :param _builtins.str name: Specifies the name of the connection.
    :param _builtins.str port_type: Specifies the type of the port used by the connection.
           The value can be **1G**, **10G**, **40G**, or **100G**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the connection.
           The valid values are as follows:
           + **ACTIVE**: The connection is in the normal state.
           + **DOWN**: The port for the connection is in the down state, which may cause line faults.
           + **BUILD**: Operations related to the connection are being performed.
           + **ERROR**: The connection configuration is incorrect. Contact customer service to rectify the fault.
           + **PENDING_DELETE**: The connection is being deleted.
           + **DELETED**: The connection has been deleted.
           + **APPLY**: A request for a connection is submitted.
           + **DENY**: A site survey is rejected because the customer fails to meet the requirements.
           + **PENDING_PAY**: The order for the connection is to be paid.
           + **PAID**: The order for the connection has been paid.
           + **PENDING_SURVEY**: A site survey is required for the connection.
    :param _builtins.str type: Specifies the type of the connection.
           The value can be **standard** (a standard connection), **hosting** (an operations connection) or
           **hosted** (a hosted connection).
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostingId'] = hosting_id
    __args__['name'] = name
    __args__['portType'] = port_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getConnections:getConnections', __args__, opts=opts, typ=GetConnectionsResult).value

    return AwaitableGetConnectionsResult(
        connection_id=pulumi.get(__ret__, 'connection_id'),
        direct_connects=pulumi.get(__ret__, 'direct_connects'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        hosting_id=pulumi.get(__ret__, 'hosting_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        port_type=pulumi.get(__ret__, 'port_type'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_connections_output(connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           hosting_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           port_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionsResult]:
    """
    Use this data source to get the list of connections.


    :param _builtins.str connection_id: Specifies the ID of the connection.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the connections belong.
    :param _builtins.str hosting_id: Specifies operations connection ID by which hosted connections are filtered.
    :param _builtins.str name: Specifies the name of the connection.
    :param _builtins.str port_type: Specifies the type of the port used by the connection.
           The value can be **1G**, **10G**, **40G**, or **100G**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the connection.
           The valid values are as follows:
           + **ACTIVE**: The connection is in the normal state.
           + **DOWN**: The port for the connection is in the down state, which may cause line faults.
           + **BUILD**: Operations related to the connection are being performed.
           + **ERROR**: The connection configuration is incorrect. Contact customer service to rectify the fault.
           + **PENDING_DELETE**: The connection is being deleted.
           + **DELETED**: The connection has been deleted.
           + **APPLY**: A request for a connection is submitted.
           + **DENY**: A site survey is rejected because the customer fails to meet the requirements.
           + **PENDING_PAY**: The order for the connection is to be paid.
           + **PAID**: The order for the connection has been paid.
           + **PENDING_SURVEY**: A site survey is required for the connection.
    :param _builtins.str type: Specifies the type of the connection.
           The value can be **standard** (a standard connection), **hosting** (an operations connection) or
           **hosted** (a hosted connection).
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostingId'] = hosting_id
    __args__['name'] = name
    __args__['portType'] = port_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getConnections:getConnections', __args__, opts=opts, typ=GetConnectionsResult)
    return __ret__.apply(lambda __response__: GetConnectionsResult(
        connection_id=pulumi.get(__response__, 'connection_id'),
        direct_connects=pulumi.get(__response__, 'direct_connects'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        hosting_id=pulumi.get(__response__, 'hosting_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        port_type=pulumi.get(__response__, 'port_type'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
