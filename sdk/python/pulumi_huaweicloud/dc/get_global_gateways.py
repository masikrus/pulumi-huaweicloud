# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalGatewaysResult',
    'AwaitableGetGlobalGatewaysResult',
    'get_global_gateways',
    'get_global_gateways_output',
]

@pulumi.output_type
class GetGlobalGatewaysResult:
    """
    A collection of values returned by getGlobalGateways.
    """
    def __init__(__self__, cloud_connection_ids=None, enterprise_project_ids=None, fields=None, gateways=None, global_center_network_ids=None, global_gateway_ids=None, id=None, names=None, region=None, site_network_ids=None, sort_dir=None, sort_key=None, statuses=None):
        if cloud_connection_ids and not isinstance(cloud_connection_ids, list):
            raise TypeError("Expected argument 'cloud_connection_ids' to be a list")
        pulumi.set(__self__, "cloud_connection_ids", cloud_connection_ids)
        if enterprise_project_ids and not isinstance(enterprise_project_ids, list):
            raise TypeError("Expected argument 'enterprise_project_ids' to be a list")
        pulumi.set(__self__, "enterprise_project_ids", enterprise_project_ids)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        pulumi.set(__self__, "gateways", gateways)
        if global_center_network_ids and not isinstance(global_center_network_ids, list):
            raise TypeError("Expected argument 'global_center_network_ids' to be a list")
        pulumi.set(__self__, "global_center_network_ids", global_center_network_ids)
        if global_gateway_ids and not isinstance(global_gateway_ids, list):
            raise TypeError("Expected argument 'global_gateway_ids' to be a list")
        pulumi.set(__self__, "global_gateway_ids", global_gateway_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if site_network_ids and not isinstance(site_network_ids, list):
            raise TypeError("Expected argument 'site_network_ids' to be a list")
        pulumi.set(__self__, "site_network_ids", site_network_ids)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionIds")
    def cloud_connection_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "cloud_connection_ids")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectIds")
    def enterprise_project_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_ids")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def gateways(self) -> Sequence['outputs.GetGlobalGatewaysGatewayResult']:
        """
        The list of the global DC gateways.
        """
        return pulumi.get(self, "gateways")

    @_builtins.property
    @pulumi.getter(name="globalCenterNetworkIds")
    def global_center_network_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "global_center_network_ids")

    @_builtins.property
    @pulumi.getter(name="globalGatewayIds")
    def global_gateway_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "global_gateway_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="siteNetworkIds")
    def site_network_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "site_network_ids")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "statuses")


class AwaitableGetGlobalGatewaysResult(GetGlobalGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalGatewaysResult(
            cloud_connection_ids=self.cloud_connection_ids,
            enterprise_project_ids=self.enterprise_project_ids,
            fields=self.fields,
            gateways=self.gateways,
            global_center_network_ids=self.global_center_network_ids,
            global_gateway_ids=self.global_gateway_ids,
            id=self.id,
            names=self.names,
            region=self.region,
            site_network_ids=self.site_network_ids,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            statuses=self.statuses)


def get_global_gateways(cloud_connection_ids: Optional[Sequence[_builtins.str]] = None,
                        enterprise_project_ids: Optional[Sequence[_builtins.str]] = None,
                        fields: Optional[Sequence[_builtins.str]] = None,
                        global_center_network_ids: Optional[Sequence[_builtins.str]] = None,
                        global_gateway_ids: Optional[Sequence[_builtins.str]] = None,
                        names: Optional[Sequence[_builtins.str]] = None,
                        region: Optional[_builtins.str] = None,
                        site_network_ids: Optional[Sequence[_builtins.str]] = None,
                        sort_dir: Optional[_builtins.str] = None,
                        sort_key: Optional[_builtins.str] = None,
                        statuses: Optional[Sequence[_builtins.str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalGatewaysResult:
    """
    Use this data source to get the list of DC global gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_global_gateways()
    ```


    :param Sequence[_builtins.str] cloud_connection_ids: Specifies the cloud connection IDs.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project IDs for querying instances.
    :param Sequence[_builtins.str] fields: Specifies the list of fields to be displayed. If omitted, all fields will be queried.
    :param Sequence[_builtins.str] global_center_network_ids: Specifies the central network IDs.
    :param Sequence[_builtins.str] global_gateway_ids: Specifies the resource IDs for querying instances.
    :param Sequence[_builtins.str] names: Specifies the resource names for querying instances.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] site_network_ids: Specifies the site network IDs.
    :param _builtins.str sort_dir: Specifies the sorting order of returned results.
           There are two options: **asc** (default) and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field. Defaults to **id**.
    :param Sequence[_builtins.str] statuses: Specifies the statuses by which instances are filtered.
    """
    __args__ = dict()
    __args__['cloudConnectionIds'] = cloud_connection_ids
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['fields'] = fields
    __args__['globalCenterNetworkIds'] = global_center_network_ids
    __args__['globalGatewayIds'] = global_gateway_ids
    __args__['names'] = names
    __args__['region'] = region
    __args__['siteNetworkIds'] = site_network_ids
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getGlobalGateways:getGlobalGateways', __args__, opts=opts, typ=GetGlobalGatewaysResult).value

    return AwaitableGetGlobalGatewaysResult(
        cloud_connection_ids=pulumi.get(__ret__, 'cloud_connection_ids'),
        enterprise_project_ids=pulumi.get(__ret__, 'enterprise_project_ids'),
        fields=pulumi.get(__ret__, 'fields'),
        gateways=pulumi.get(__ret__, 'gateways'),
        global_center_network_ids=pulumi.get(__ret__, 'global_center_network_ids'),
        global_gateway_ids=pulumi.get(__ret__, 'global_gateway_ids'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'),
        site_network_ids=pulumi.get(__ret__, 'site_network_ids'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_global_gateways_output(cloud_connection_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               enterprise_project_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               fields: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               global_center_network_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               global_gateway_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               site_network_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalGatewaysResult]:
    """
    Use this data source to get the list of DC global gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_global_gateways()
    ```


    :param Sequence[_builtins.str] cloud_connection_ids: Specifies the cloud connection IDs.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project IDs for querying instances.
    :param Sequence[_builtins.str] fields: Specifies the list of fields to be displayed. If omitted, all fields will be queried.
    :param Sequence[_builtins.str] global_center_network_ids: Specifies the central network IDs.
    :param Sequence[_builtins.str] global_gateway_ids: Specifies the resource IDs for querying instances.
    :param Sequence[_builtins.str] names: Specifies the resource names for querying instances.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] site_network_ids: Specifies the site network IDs.
    :param _builtins.str sort_dir: Specifies the sorting order of returned results.
           There are two options: **asc** (default) and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field. Defaults to **id**.
    :param Sequence[_builtins.str] statuses: Specifies the statuses by which instances are filtered.
    """
    __args__ = dict()
    __args__['cloudConnectionIds'] = cloud_connection_ids
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['fields'] = fields
    __args__['globalCenterNetworkIds'] = global_center_network_ids
    __args__['globalGatewayIds'] = global_gateway_ids
    __args__['names'] = names
    __args__['region'] = region
    __args__['siteNetworkIds'] = site_network_ids
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getGlobalGateways:getGlobalGateways', __args__, opts=opts, typ=GetGlobalGatewaysResult)
    return __ret__.apply(lambda __response__: GetGlobalGatewaysResult(
        cloud_connection_ids=pulumi.get(__response__, 'cloud_connection_ids'),
        enterprise_project_ids=pulumi.get(__response__, 'enterprise_project_ids'),
        fields=pulumi.get(__response__, 'fields'),
        gateways=pulumi.get(__response__, 'gateways'),
        global_center_network_ids=pulumi.get(__response__, 'global_center_network_ids'),
        global_gateway_ids=pulumi.get(__response__, 'global_gateway_ids'),
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region'),
        site_network_ids=pulumi.get(__response__, 'site_network_ids'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        statuses=pulumi.get(__response__, 'statuses')))
