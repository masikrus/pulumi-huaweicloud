# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ConnectGatewayArgs', 'ConnectGateway']

@pulumi.input_type
class ConnectGatewayArgs:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ConnectGateway resource.
        :param pulumi.Input[_builtins.str] address_family: Specifies the IP address family of the DC connect gateway. Value options:
               + **ipv4**: Only IPv4 is supported.
               + **dual**: Both IPv4 and IPv6 are supported.
               
               Defaults to **ipv4**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DC connect gateway.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DC connect gateway.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address family of the DC connect gateway. Value options:
        + **ipv4**: Only IPv4 is supported.
        + **dual**: Both IPv4 and IPv6 are supported.

        Defaults to **ipv4**.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the DC connect gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DC connect gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ConnectGatewayState:
    def __init__(__self__, *,
                 access_site: Optional[pulumi.Input[_builtins.str]] = None,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.int]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 current_geip_count: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_site: Optional[pulumi.Input[_builtins.str]] = None,
                 gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectGateway resources.
        :param pulumi.Input[_builtins.str] access_site: Indicates the access site of the connect gateway.
        :param pulumi.Input[_builtins.str] address_family: Specifies the IP address family of the DC connect gateway. Value options:
               + **ipv4**: Only IPv4 is supported.
               + **dual**: Both IPv4 and IPv6 are supported.
               
               Defaults to **ipv4**.
        :param pulumi.Input[_builtins.int] bgp_asn: Indicates the BGP ASN.
        :param pulumi.Input[_builtins.str] created_time: Indicates the time when the connect gateway was created.
        :param pulumi.Input[_builtins.int] current_geip_count: Indicates the number of global EIPs bound to the connect gateway.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DC connect gateway.
        :param pulumi.Input[_builtins.str] gateway_site: Indicates the gateway location.
        :param pulumi.Input[_builtins.str] gcb_id: Indicates the global connection bandwidth ID.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DC connect gateway.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the DC connect gateway.
        :param pulumi.Input[_builtins.str] updated_time: Indicates the time when the connect gateway was updated.
        """
        if access_site is not None:
            pulumi.set(__self__, "access_site", access_site)
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if current_geip_count is not None:
            pulumi.set(__self__, "current_geip_count", current_geip_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_site is not None:
            pulumi.set(__self__, "gateway_site", gateway_site)
        if gcb_id is not None:
            pulumi.set(__self__, "gcb_id", gcb_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the access site of the connect gateway.
        """
        return pulumi.get(self, "access_site")

    @access_site.setter
    def access_site(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_site", value)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address family of the DC connect gateway. Value options:
        + **ipv4**: Only IPv4 is supported.
        + **dual**: Both IPv4 and IPv6 are supported.

        Defaults to **ipv4**.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the BGP ASN.
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the connect gateway was created.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="currentGeipCount")
    def current_geip_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of global EIPs bound to the connect gateway.
        """
        return pulumi.get(self, "current_geip_count")

    @current_geip_count.setter
    def current_geip_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "current_geip_count", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the DC connect gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="gatewaySite")
    def gateway_site(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the gateway location.
        """
        return pulumi.get(self, "gateway_site")

    @gateway_site.setter
    def gateway_site(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_site", value)

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")

    @gcb_id.setter
    def gcb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gcb_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DC connect gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the DC connect gateway.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the connect gateway was updated.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.type_token("huaweicloud:dc/connectGateway:ConnectGateway")
class ConnectGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC connect gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.dc.ConnectGateway("test",
            name="test_connect_gateway_name",
            description="test description",
            address_family="ipv4")
        ```

        ## Import

        The DC connect gateway resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/connectGateway:ConnectGateway test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address_family: Specifies the IP address family of the DC connect gateway. Value options:
               + **ipv4**: Only IPv4 is supported.
               + **dual**: Both IPv4 and IPv6 are supported.
               
               Defaults to **ipv4**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DC connect gateway.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DC connect gateway.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConnectGatewayArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC connect gateway resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.dc.ConnectGateway("test",
            name="test_connect_gateway_name",
            description="test description",
            address_family="ipv4")
        ```

        ## Import

        The DC connect gateway resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/connectGateway:ConnectGateway test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ConnectGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectGatewayArgs.__new__(ConnectGatewayArgs)

            __props__.__dict__["address_family"] = address_family
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["access_site"] = None
            __props__.__dict__["bgp_asn"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["current_geip_count"] = None
            __props__.__dict__["gateway_site"] = None
            __props__.__dict__["gcb_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_time"] = None
        super(ConnectGateway, __self__).__init__(
            'huaweicloud:dc/connectGateway:ConnectGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_site: Optional[pulumi.Input[_builtins.str]] = None,
            address_family: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_asn: Optional[pulumi.Input[_builtins.int]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            current_geip_count: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_site: Optional[pulumi.Input[_builtins.str]] = None,
            gcb_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectGateway':
        """
        Get an existing ConnectGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_site: Indicates the access site of the connect gateway.
        :param pulumi.Input[_builtins.str] address_family: Specifies the IP address family of the DC connect gateway. Value options:
               + **ipv4**: Only IPv4 is supported.
               + **dual**: Both IPv4 and IPv6 are supported.
               
               Defaults to **ipv4**.
        :param pulumi.Input[_builtins.int] bgp_asn: Indicates the BGP ASN.
        :param pulumi.Input[_builtins.str] created_time: Indicates the time when the connect gateway was created.
        :param pulumi.Input[_builtins.int] current_geip_count: Indicates the number of global EIPs bound to the connect gateway.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DC connect gateway.
        :param pulumi.Input[_builtins.str] gateway_site: Indicates the gateway location.
        :param pulumi.Input[_builtins.str] gcb_id: Indicates the global connection bandwidth ID.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DC connect gateway.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the DC connect gateway.
        :param pulumi.Input[_builtins.str] updated_time: Indicates the time when the connect gateway was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectGatewayState.__new__(_ConnectGatewayState)

        __props__.__dict__["access_site"] = access_site
        __props__.__dict__["address_family"] = address_family
        __props__.__dict__["bgp_asn"] = bgp_asn
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["current_geip_count"] = current_geip_count
        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_site"] = gateway_site
        __props__.__dict__["gcb_id"] = gcb_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_time"] = updated_time
        return ConnectGateway(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the access site of the connect gateway.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IP address family of the DC connect gateway. Value options:
        + **ipv4**: Only IPv4 is supported.
        + **dual**: Both IPv4 and IPv6 are supported.

        Defaults to **ipv4**.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the BGP ASN.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the connect gateway was created.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="currentGeipCount")
    def current_geip_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of global EIPs bound to the connect gateway.
        """
        return pulumi.get(self, "current_geip_count")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the DC connect gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gatewaySite")
    def gateway_site(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the gateway location.
        """
        return pulumi.get(self, "gateway_site")

    @_builtins.property
    @pulumi.getter(name="gcbId")
    def gcb_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the global connection bandwidth ID.
        """
        return pulumi.get(self, "gcb_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the DC connect gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the DC connect gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the connect gateway was updated.
        """
        return pulumi.get(self, "updated_time")

