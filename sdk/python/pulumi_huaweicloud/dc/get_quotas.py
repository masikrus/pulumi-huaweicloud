# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetQuotasResult',
    'AwaitableGetQuotasResult',
    'get_quotas',
    'get_quotas_output',
]

@pulumi.output_type
class GetQuotasResult:
    """
    A collection of values returned by getQuotas.
    """
    def __init__(__self__, id=None, quotas=None, region=None, types=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetQuotasQuotaResult']:
        """
        The list of the DC resource quotas.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Optional[Sequence[_builtins.str]]:
        """
        The quota type.
        """
        return pulumi.get(self, "types")


class AwaitableGetQuotasResult(GetQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQuotasResult(
            id=self.id,
            quotas=self.quotas,
            region=self.region,
            types=self.types)


def get_quotas(region: Optional[_builtins.str] = None,
               types: Optional[Sequence[_builtins.str]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQuotasResult:
    """
    Use this data source to get a list of the DC resource quotas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    type = config.require_object("type")
    test = huaweicloud.dc.get_quotas(types=type)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] types: Specifies the quota type.
           The valid values are as follows:
           + **physicalConnect**: Quotas and usage for the connection.
           + **virtualInterface**: Quotas and usage for the virtual interface.
           + **connectGateway**: Quotas and usage for the connection gateway.
           + **geip**: Quotas and usage for the GEIP that each tenant can be associated.
           + **globalDcGateway**: Quotas and usage for the global DC gateway.
           + **peerLinkPerGdgw**: Quotas and usage for the peer links established with a global DC gateway.
           + **localGateway**: Quotas and usage for the local gateway.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['types'] = types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getQuotas:getQuotas', __args__, opts=opts, typ=GetQuotasResult).value

    return AwaitableGetQuotasResult(
        id=pulumi.get(__ret__, 'id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'),
        types=pulumi.get(__ret__, 'types'))
def get_quotas_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQuotasResult]:
    """
    Use this data source to get a list of the DC resource quotas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    type = config.require_object("type")
    test = huaweicloud.dc.get_quotas(types=type)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] types: Specifies the quota type.
           The valid values are as follows:
           + **physicalConnect**: Quotas and usage for the connection.
           + **virtualInterface**: Quotas and usage for the virtual interface.
           + **connectGateway**: Quotas and usage for the connection gateway.
           + **geip**: Quotas and usage for the GEIP that each tenant can be associated.
           + **globalDcGateway**: Quotas and usage for the global DC gateway.
           + **peerLinkPerGdgw**: Quotas and usage for the peer links established with a global DC gateway.
           + **localGateway**: Quotas and usage for the local gateway.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['types'] = types
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getQuotas:getQuotas', __args__, opts=opts, typ=GetQuotasResult)
    return __ret__.apply(lambda __response__: GetQuotasResult(
        id=pulumi.get(__response__, 'id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region'),
        types=pulumi.get(__response__, 'types')))
