# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalGatewayRouteTablesResult',
    'AwaitableGetGlobalGatewayRouteTablesResult',
    'get_global_gateway_route_tables',
    'get_global_gateway_route_tables_output',
]

@pulumi.output_type
class GetGlobalGatewayRouteTablesResult:
    """
    A collection of values returned by getGlobalGatewayRouteTables.
    """
    def __init__(__self__, address_families=None, destinations=None, gdgw_id=None, gdgw_routetables=None, id=None, nexthops=None, region=None):
        if address_families and not isinstance(address_families, list):
            raise TypeError("Expected argument 'address_families' to be a list")
        pulumi.set(__self__, "address_families", address_families)
        if destinations and not isinstance(destinations, list):
            raise TypeError("Expected argument 'destinations' to be a list")
        pulumi.set(__self__, "destinations", destinations)
        if gdgw_id and not isinstance(gdgw_id, str):
            raise TypeError("Expected argument 'gdgw_id' to be a str")
        pulumi.set(__self__, "gdgw_id", gdgw_id)
        if gdgw_routetables and not isinstance(gdgw_routetables, list):
            raise TypeError("Expected argument 'gdgw_routetables' to be a list")
        pulumi.set(__self__, "gdgw_routetables", gdgw_routetables)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nexthops and not isinstance(nexthops, list):
            raise TypeError("Expected argument 'nexthops' to be a list")
        pulumi.set(__self__, "nexthops", nexthops)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the address family.
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the route subnet.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter(name="gdgwId")
    def gdgw_id(self) -> _builtins.str:
        return pulumi.get(self, "gdgw_id")

    @_builtins.property
    @pulumi.getter(name="gdgwRoutetables")
    def gdgw_routetables(self) -> Sequence['outputs.GetGlobalGatewayRouteTablesGdgwRoutetableResult']:
        """
        Indicates the list of global gateway route tables.
        The gdgw_routetables structure is documented below.
        """
        return pulumi.get(self, "gdgw_routetables")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nexthops(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the nexthop ID.
        """
        return pulumi.get(self, "nexthops")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetGlobalGatewayRouteTablesResult(GetGlobalGatewayRouteTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalGatewayRouteTablesResult(
            address_families=self.address_families,
            destinations=self.destinations,
            gdgw_id=self.gdgw_id,
            gdgw_routetables=self.gdgw_routetables,
            id=self.id,
            nexthops=self.nexthops,
            region=self.region)


def get_global_gateway_route_tables(address_families: Optional[Sequence[_builtins.str]] = None,
                                    destinations: Optional[Sequence[_builtins.str]] = None,
                                    gdgw_id: Optional[_builtins.str] = None,
                                    nexthops: Optional[Sequence[_builtins.str]] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalGatewayRouteTablesResult:
    """
    Use this data source to get a list of DC global gateway route tables.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gdgw_id = config.require_object("gdgwId")
    test = huaweicloud.dc.get_global_gateway_route_tables(gdgw_id=gdgw_id)
    ```


    :param Sequence[_builtins.str] address_families: Specifies the address families to filter the routes.
    :param Sequence[_builtins.str] destinations: Specifies the destination addresses to filter the routes.
    :param _builtins.str gdgw_id: Specifies the global gateway ID.
    :param Sequence[_builtins.str] nexthops: Specifies the nexthop IDs to filter the routes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['addressFamilies'] = address_families
    __args__['destinations'] = destinations
    __args__['gdgwId'] = gdgw_id
    __args__['nexthops'] = nexthops
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getGlobalGatewayRouteTables:getGlobalGatewayRouteTables', __args__, opts=opts, typ=GetGlobalGatewayRouteTablesResult).value

    return AwaitableGetGlobalGatewayRouteTablesResult(
        address_families=pulumi.get(__ret__, 'address_families'),
        destinations=pulumi.get(__ret__, 'destinations'),
        gdgw_id=pulumi.get(__ret__, 'gdgw_id'),
        gdgw_routetables=pulumi.get(__ret__, 'gdgw_routetables'),
        id=pulumi.get(__ret__, 'id'),
        nexthops=pulumi.get(__ret__, 'nexthops'),
        region=pulumi.get(__ret__, 'region'))
def get_global_gateway_route_tables_output(address_families: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                           destinations: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                           gdgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           nexthops: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalGatewayRouteTablesResult]:
    """
    Use this data source to get a list of DC global gateway route tables.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gdgw_id = config.require_object("gdgwId")
    test = huaweicloud.dc.get_global_gateway_route_tables(gdgw_id=gdgw_id)
    ```


    :param Sequence[_builtins.str] address_families: Specifies the address families to filter the routes.
    :param Sequence[_builtins.str] destinations: Specifies the destination addresses to filter the routes.
    :param _builtins.str gdgw_id: Specifies the global gateway ID.
    :param Sequence[_builtins.str] nexthops: Specifies the nexthop IDs to filter the routes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['addressFamilies'] = address_families
    __args__['destinations'] = destinations
    __args__['gdgwId'] = gdgw_id
    __args__['nexthops'] = nexthops
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getGlobalGatewayRouteTables:getGlobalGatewayRouteTables', __args__, opts=opts, typ=GetGlobalGatewayRouteTablesResult)
    return __ret__.apply(lambda __response__: GetGlobalGatewayRouteTablesResult(
        address_families=pulumi.get(__response__, 'address_families'),
        destinations=pulumi.get(__response__, 'destinations'),
        gdgw_id=pulumi.get(__response__, 'gdgw_id'),
        gdgw_routetables=pulumi.get(__response__, 'gdgw_routetables'),
        id=pulumi.get(__response__, 'id'),
        nexthops=pulumi.get(__response__, 'nexthops'),
        region=pulumi.get(__response__, 'region')))
