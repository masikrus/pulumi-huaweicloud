# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualInterfaceArgs', 'VirtualInterface']

@pulumi.input_type
class VirtualInterfaceArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[_builtins.int],
                 direct_connect_id: pulumi.Input[_builtins.str],
                 remote_ep_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 route_mode: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 vlan: pulumi.Input[_builtins.int],
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vgw_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VirtualInterface resource.
        :param pulumi.Input[_builtins.int] bandwidth: Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
               The size range depends on the direct connection.
        :param pulumi.Input[_builtins.str] direct_connect_id: Specifies the ID of the direct connection associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param pulumi.Input[_builtins.str] route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the virtual interface.
               The valid value is **private**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] vlan: Specifies the customer VLAN to be connected.
               The valid value is range from `0` to `3,999`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual interface.
               The valid value is range from `1` to `4,294,967,295`, except `64,512`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.bool] enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               interface belongs. This field is valid only when `resource_tenant_id` is not specified.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the ID of the gateway associated with the virtual
               interface (the ID of the global DC gateway).
               This field is required when `service_type` is set to **GDGW**.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lag_id: Specifies the ID of the link aggregation group (LAG) associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] priority: The priority of a virtual interface. The value can be **normal** or **low**.
               If the priorities are the same, the virtual interfaces work in load balancing mode.
               If the priorities are different, the virtual interfaces work in active/standby pairs.
               Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
               This option is only supported by virtual interfaces that use BGP routing.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual interface is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] remote_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] remote_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
               
               > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
               must be in the same subnet.
        :param pulumi.Input[_builtins.str] resource_tenant_id: Specifies the project ID of another tenant in the same region
               which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
               created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
               Changing this will create a new resource.
               
               > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
               <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
               virtual interface request and the virtual interface takes effect.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param pulumi.Input[_builtins.str] service_type: Specifies the service type of the virtual interface.
               The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
               Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual interface.
        :param pulumi.Input[_builtins.str] vgw_id: Specifies the ID of the virtual gateway to which the virtual interface is
               connected.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "direct_connect_id", direct_connect_id)
        pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan", vlan)
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if bgp_md5 is not None:
            pulumi.set(__self__, "bgp_md5", bgp_md5)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_bfd is not None:
            pulumi.set(__self__, "enable_bfd", enable_bfd)
        if enable_nqa is not None:
            pulumi.set(__self__, "enable_nqa", enable_nqa)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if lag_id is not None:
            pulumi.set(__self__, "lag_id", lag_id)
        if local_gateway_v4_ip is not None:
            pulumi.set(__self__, "local_gateway_v4_ip", local_gateway_v4_ip)
        if local_gateway_v6_ip is not None:
            pulumi.set(__self__, "local_gateway_v6_ip", local_gateway_v6_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_gateway_v4_ip is not None:
            pulumi.set(__self__, "remote_gateway_v4_ip", remote_gateway_v4_ip)
        if remote_gateway_v6_ip is not None:
            pulumi.set(__self__, "remote_gateway_v6_ip", remote_gateway_v6_ip)
        if resource_tenant_id is not None:
            pulumi.set(__self__, "resource_tenant_id", resource_tenant_id)
        if service_ep_groups is not None:
            pulumi.set(__self__, "service_ep_groups", service_ep_groups)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vgw_id is not None:
            pulumi.set(__self__, "vgw_id", vgw_id)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
        The size range depends on the direct connection.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="directConnectId")
    def direct_connect_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the direct connection associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "direct_connect_id")

    @direct_connect_id.setter
    def direct_connect_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direct_connect_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        return pulumi.get(self, "remote_ep_groups")

    @remote_ep_groups.setter
    def remote_ep_groups(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "remote_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the virtual interface.
        The valid value is **private**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the customer VLAN to be connected.
        The valid value is range from `0` to `3,999`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "vlan", value)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the local BGP ASN of the virtual interface.
        The valid value is range from `1` to `4,294,967,295`, except `64,512`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "bgp_md5")

    @bgp_md5.setter
    def bgp_md5(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_md5", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        return pulumi.get(self, "enable_bfd")

    @enable_bfd.setter
    def enable_bfd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_bfd", value)

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        return pulumi.get(self, "enable_nqa")

    @enable_nqa.setter
    def enable_nqa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_nqa", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the virtual
        interface belongs. This field is valid only when `resource_tenant_id` is not specified.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the gateway associated with the virtual
        interface (the ID of the global DC gateway).
        This field is required when `service_type` is set to **GDGW**.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="lagId")
    def lag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the link aggregation group (LAG) associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lag_id")

    @lag_id.setter
    def lag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lag_id", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayV4Ip")
    def local_gateway_v4_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v4_ip")

    @local_gateway_v4_ip.setter
    def local_gateway_v4_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_v4_ip", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayV6Ip")
    def local_gateway_v6_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v6_ip")

    @local_gateway_v6_ip.setter
    def local_gateway_v6_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_v6_ip", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The priority of a virtual interface. The value can be **normal** or **low**.
        If the priorities are the same, the virtual interfaces work in load balancing mode.
        If the priorities are different, the virtual interfaces work in active/standby pairs.
        Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
        This option is only supported by virtual interfaces that use BGP routing.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual interface is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV4Ip")
    def remote_gateway_v4_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "remote_gateway_v4_ip")

    @remote_gateway_v4_ip.setter
    def remote_gateway_v4_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_v4_ip", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV6Ip")
    def remote_gateway_v6_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.

        > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
        must be in the same subnet.
        """
        return pulumi.get(self, "remote_gateway_v6_ip")

    @remote_gateway_v6_ip.setter
    def remote_gateway_v6_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_v6_ip", value)

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID of another tenant in the same region
        which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
        created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
        Changing this will create a new resource.

        > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
        <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
        virtual interface request and the virtual interface takes effect.
        """
        return pulumi.get(self, "resource_tenant_id")

    @resource_tenant_id.setter
    def resource_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceEpGroups")
    def service_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        return pulumi.get(self, "service_ep_groups")

    @service_ep_groups.setter
    def service_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the virtual interface.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vgwId")
    def vgw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the virtual gateway to which the virtual interface is
        connected.
        """
        return pulumi.get(self, "vgw_id")

    @vgw_id.setter
    def vgw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vgw_id", value)


@pulumi.input_type
class _VirtualInterfaceState:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_route_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 direct_connect_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceExtendAttributeArgs']]]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 rate_limit: Optional[pulumi.Input[_builtins.bool]] = None,
                 reason: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 remote_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vif_peers: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceVifPeerArgs']]]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering VirtualInterface resources.
        :param pulumi.Input[_builtins.str] address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual interface.
               The valid value is range from `1` to `4,294,967,295`, except `64,512`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth: Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
               The size range depends on the direct connection.
        :param pulumi.Input[_builtins.str] bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bgp_route_limit: The BGP route configuration.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the virtual interface.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device that the virtual interface peer belongs to.
        :param pulumi.Input[_builtins.str] direct_connect_id: Specifies the ID of the direct connection associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               interface belongs. This field is valid only when `resource_tenant_id` is not specified.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceExtendAttributeArgs']]] extend_attributes: The extended parameter information.
               The extend_attribute structure is documented below.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the ID of the gateway associated with the virtual
               interface (the ID of the global DC gateway).
               This field is required when `service_type` is set to **GDGW**.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] ies_id: The edge site ID.
        :param pulumi.Input[_builtins.str] lag_id: Specifies the ID of the link aggregation group (LAG) associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lgw_id: The ID of the local gateway, which is used in IES scenarios.
        :param pulumi.Input[_builtins.str] local_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] priority: The priority of a virtual interface. The value can be **normal** or **low**.
               If the priorities are the same, the virtual interfaces work in load balancing mode.
               If the priorities are different, the virtual interfaces work in active/standby pairs.
               Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
               This option is only supported by virtual interfaces that use BGP routing.
        :param pulumi.Input[_builtins.bool] rate_limit: Whether rate limiting is enabled on a virtual interface.
        :param pulumi.Input[_builtins.str] reason: The error information if the status of a line is Error.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual interface is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param pulumi.Input[_builtins.str] remote_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] remote_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
               
               > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
               must be in the same subnet.
        :param pulumi.Input[_builtins.str] resource_tenant_id: Specifies the project ID of another tenant in the same region
               which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
               created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
               Changing this will create a new resource.
               
               > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
               <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
               virtual interface request and the virtual interface takes effect.
        :param pulumi.Input[_builtins.int] route_limit: The remote subnet route configurations of the virtual interface.
        :param pulumi.Input[_builtins.str] route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param pulumi.Input[_builtins.str] service_type: Specifies the service type of the virtual interface.
               The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the virtual interface peer.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual interface.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the virtual interface.
               The valid value is **private**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the virtual interface.
        :param pulumi.Input[_builtins.str] vgw_id: Specifies the ID of the virtual gateway to which the virtual interface is
               connected.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceVifPeerArgs']]] vif_peers: The peer information of the virtual interface.
               The vif_peers structure is documented below.
        :param pulumi.Input[_builtins.int] vlan: Specifies the customer VLAN to be connected.
               The valid value is range from `0` to `3,999`.
               Changing this will create a new resource.
        """
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bgp_md5 is not None:
            pulumi.set(__self__, "bgp_md5", bgp_md5)
        if bgp_route_limit is not None:
            pulumi.set(__self__, "bgp_route_limit", bgp_route_limit)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if direct_connect_id is not None:
            pulumi.set(__self__, "direct_connect_id", direct_connect_id)
        if enable_bfd is not None:
            pulumi.set(__self__, "enable_bfd", enable_bfd)
        if enable_nqa is not None:
            pulumi.set(__self__, "enable_nqa", enable_nqa)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extend_attributes is not None:
            pulumi.set(__self__, "extend_attributes", extend_attributes)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if ies_id is not None:
            pulumi.set(__self__, "ies_id", ies_id)
        if lag_id is not None:
            pulumi.set(__self__, "lag_id", lag_id)
        if lgw_id is not None:
            pulumi.set(__self__, "lgw_id", lgw_id)
        if local_gateway_v4_ip is not None:
            pulumi.set(__self__, "local_gateway_v4_ip", local_gateway_v4_ip)
        if local_gateway_v6_ip is not None:
            pulumi.set(__self__, "local_gateway_v6_ip", local_gateway_v6_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_ep_groups is not None:
            pulumi.set(__self__, "remote_ep_groups", remote_ep_groups)
        if remote_gateway_v4_ip is not None:
            pulumi.set(__self__, "remote_gateway_v4_ip", remote_gateway_v4_ip)
        if remote_gateway_v6_ip is not None:
            pulumi.set(__self__, "remote_gateway_v6_ip", remote_gateway_v6_ip)
        if resource_tenant_id is not None:
            pulumi.set(__self__, "resource_tenant_id", resource_tenant_id)
        if route_limit is not None:
            pulumi.set(__self__, "route_limit", route_limit)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if service_ep_groups is not None:
            pulumi.set(__self__, "service_ep_groups", service_ep_groups)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vgw_id is not None:
            pulumi.set(__self__, "vgw_id", vgw_id)
        if vif_peers is not None:
            pulumi.set(__self__, "vif_peers", vif_peers)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the local BGP ASN of the virtual interface.
        The valid value is range from `1` to `4,294,967,295`, except `64,512`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
        The size range depends on the direct connection.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "bgp_md5")

    @bgp_md5.setter
    def bgp_md5(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_md5", value)

    @_builtins.property
    @pulumi.getter(name="bgpRouteLimit")
    def bgp_route_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The BGP route configuration.
        """
        return pulumi.get(self, "bgp_route_limit")

    @bgp_route_limit.setter
    def bgp_route_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_route_limit", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the virtual interface.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="directConnectId")
    def direct_connect_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the direct connection associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "direct_connect_id")

    @direct_connect_id.setter
    def direct_connect_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direct_connect_id", value)

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        return pulumi.get(self, "enable_bfd")

    @enable_bfd.setter
    def enable_bfd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_bfd", value)

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        return pulumi.get(self, "enable_nqa")

    @enable_nqa.setter
    def enable_nqa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_nqa", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the virtual
        interface belongs. This field is valid only when `resource_tenant_id` is not specified.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extendAttributes")
    def extend_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceExtendAttributeArgs']]]]:
        """
        The extended parameter information.
        The extend_attribute structure is documented below.
        """
        return pulumi.get(self, "extend_attributes")

    @extend_attributes.setter
    def extend_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceExtendAttributeArgs']]]]):
        pulumi.set(self, "extend_attributes", value)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the gateway associated with the virtual
        interface (the ID of the global DC gateway).
        This field is required when `service_type` is set to **GDGW**.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="iesId")
    def ies_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The edge site ID.
        """
        return pulumi.get(self, "ies_id")

    @ies_id.setter
    def ies_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ies_id", value)

    @_builtins.property
    @pulumi.getter(name="lagId")
    def lag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the link aggregation group (LAG) associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lag_id")

    @lag_id.setter
    def lag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lag_id", value)

    @_builtins.property
    @pulumi.getter(name="lgwId")
    def lgw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the local gateway, which is used in IES scenarios.
        """
        return pulumi.get(self, "lgw_id")

    @lgw_id.setter
    def lgw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lgw_id", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayV4Ip")
    def local_gateway_v4_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v4_ip")

    @local_gateway_v4_ip.setter
    def local_gateway_v4_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_v4_ip", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayV6Ip")
    def local_gateway_v6_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v6_ip")

    @local_gateway_v6_ip.setter
    def local_gateway_v6_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_v6_ip", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The priority of a virtual interface. The value can be **normal** or **low**.
        If the priorities are the same, the virtual interfaces work in load balancing mode.
        If the priorities are different, the virtual interfaces work in active/standby pairs.
        Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
        This option is only supported by virtual interfaces that use BGP routing.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether rate limiting is enabled on a virtual interface.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rate_limit", value)

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The error information if the status of a line is Error.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reason", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the virtual interface is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        return pulumi.get(self, "remote_ep_groups")

    @remote_ep_groups.setter
    def remote_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "remote_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV4Ip")
    def remote_gateway_v4_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "remote_gateway_v4_ip")

    @remote_gateway_v4_ip.setter
    def remote_gateway_v4_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_v4_ip", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV6Ip")
    def remote_gateway_v6_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.

        > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
        must be in the same subnet.
        """
        return pulumi.get(self, "remote_gateway_v6_ip")

    @remote_gateway_v6_ip.setter
    def remote_gateway_v6_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_v6_ip", value)

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID of another tenant in the same region
        which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
        created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
        Changing this will create a new resource.

        > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
        <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
        virtual interface request and the virtual interface takes effect.
        """
        return pulumi.get(self, "resource_tenant_id")

    @resource_tenant_id.setter
    def resource_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="routeLimit")
    def route_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The remote subnet route configurations of the virtual interface.
        """
        return pulumi.get(self, "route_limit")

    @route_limit.setter
    def route_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "route_limit", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="serviceEpGroups")
    def service_ep_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        return pulumi.get(self, "service_ep_groups")

    @service_ep_groups.setter
    def service_ep_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_ep_groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the virtual interface peer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the virtual interface.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the virtual interface.
        The valid value is **private**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the virtual interface.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vgwId")
    def vgw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the virtual gateway to which the virtual interface is
        connected.
        """
        return pulumi.get(self, "vgw_id")

    @vgw_id.setter
    def vgw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vgw_id", value)

    @_builtins.property
    @pulumi.getter(name="vifPeers")
    def vif_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceVifPeerArgs']]]]:
        """
        The peer information of the virtual interface.
        The vif_peers structure is documented below.
        """
        return pulumi.get(self, "vif_peers")

    @vif_peers.setter
    def vif_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualInterfaceVifPeerArgs']]]]):
        pulumi.set(self, "vif_peers", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the customer VLAN to be connected.
        The valid value is range from `0` to `3,999`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("huaweicloud:dc/virtualInterface:VirtualInterface")
class VirtualInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 direct_connect_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 remote_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a virtual interface resource within HuaweiCloud.

        ## Example Usage

        ### Create a DC virtual interface with VGW service type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        direct_connect_id = config.require_object("directConnectId")
        vgw_id = config.require_object("vgwId")
        interface_name = config.require_object("interfaceName")
        test = huaweicloud.dc.VirtualInterface("test",
            direct_connect_id=direct_connect_id,
            vgw_id=vgw_id,
            name=interface_name,
            type="private",
            route_mode="static",
            vlan=522,
            bandwidth=5,
            remote_ep_groups=["1.1.1.0/30"],
            address_family="ipv4",
            local_gateway_v4_ip="1.1.1.1/30",
            remote_gateway_v4_ip="1.1.1.2/30")
        ```

        ### Create a DC virtual interface with GDGW service type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        direct_connect_id = config.require_object("directConnectId")
        interface_name = config.require_object("interfaceName")
        gateway_id = config.require_object("gatewayId")
        test = huaweicloud.dc.VirtualInterface("test",
            direct_connect_id=direct_connect_id,
            name=interface_name,
            type="private",
            route_mode="static",
            vlan=76,
            bandwidth=5,
            service_type="GDGW",
            gateway_id=gateway_id,
            remote_ep_groups=["1.1.1.0/30"],
            address_family="ipv4",
            local_gateway_v4_ip="1.1.1.1/30",
            remote_gateway_v4_ip="1.1.1.2/30")
        ```

        ## Import

        Virtual interfaces can be imported using their `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:dc/virtualInterface:VirtualInterface test 5bb22e82-5b07-4845-bd1b-b064eca92e0a
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `resource_tenant_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        bash

        resource "huaweicloud_dc_virtual_interface" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              resource_tenant_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual interface.
               The valid value is range from `1` to `4,294,967,295`, except `64,512`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth: Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
               The size range depends on the direct connection.
        :param pulumi.Input[_builtins.str] bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] direct_connect_id: Specifies the ID of the direct connection associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               interface belongs. This field is valid only when `resource_tenant_id` is not specified.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the ID of the gateway associated with the virtual
               interface (the ID of the global DC gateway).
               This field is required when `service_type` is set to **GDGW**.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lag_id: Specifies the ID of the link aggregation group (LAG) associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] priority: The priority of a virtual interface. The value can be **normal** or **low**.
               If the priorities are the same, the virtual interfaces work in load balancing mode.
               If the priorities are different, the virtual interfaces work in active/standby pairs.
               Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
               This option is only supported by virtual interfaces that use BGP routing.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual interface is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param pulumi.Input[_builtins.str] remote_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] remote_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
               
               > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
               must be in the same subnet.
        :param pulumi.Input[_builtins.str] resource_tenant_id: Specifies the project ID of another tenant in the same region
               which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
               created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
               Changing this will create a new resource.
               
               > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
               <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
               virtual interface request and the virtual interface takes effect.
        :param pulumi.Input[_builtins.str] route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param pulumi.Input[_builtins.str] service_type: Specifies the service type of the virtual interface.
               The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
               Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual interface.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the virtual interface.
               The valid value is **private**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] vgw_id: Specifies the ID of the virtual gateway to which the virtual interface is
               connected.
        :param pulumi.Input[_builtins.int] vlan: Specifies the customer VLAN to be connected.
               The valid value is range from `0` to `3,999`.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a virtual interface resource within HuaweiCloud.

        ## Example Usage

        ### Create a DC virtual interface with VGW service type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        direct_connect_id = config.require_object("directConnectId")
        vgw_id = config.require_object("vgwId")
        interface_name = config.require_object("interfaceName")
        test = huaweicloud.dc.VirtualInterface("test",
            direct_connect_id=direct_connect_id,
            vgw_id=vgw_id,
            name=interface_name,
            type="private",
            route_mode="static",
            vlan=522,
            bandwidth=5,
            remote_ep_groups=["1.1.1.0/30"],
            address_family="ipv4",
            local_gateway_v4_ip="1.1.1.1/30",
            remote_gateway_v4_ip="1.1.1.2/30")
        ```

        ### Create a DC virtual interface with GDGW service type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        direct_connect_id = config.require_object("directConnectId")
        interface_name = config.require_object("interfaceName")
        gateway_id = config.require_object("gatewayId")
        test = huaweicloud.dc.VirtualInterface("test",
            direct_connect_id=direct_connect_id,
            name=interface_name,
            type="private",
            route_mode="static",
            vlan=76,
            bandwidth=5,
            service_type="GDGW",
            gateway_id=gateway_id,
            remote_ep_groups=["1.1.1.0/30"],
            address_family="ipv4",
            local_gateway_v4_ip="1.1.1.1/30",
            remote_gateway_v4_ip="1.1.1.2/30")
        ```

        ## Import

        Virtual interfaces can be imported using their `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:dc/virtualInterface:VirtualInterface test 5bb22e82-5b07-4845-bd1b-b064eca92e0a
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `resource_tenant_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        bash

        resource "huaweicloud_dc_virtual_interface" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              resource_tenant_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param VirtualInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family: Optional[pulumi.Input[_builtins.str]] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 direct_connect_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 remote_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualInterfaceArgs.__new__(VirtualInterfaceArgs)

            __props__.__dict__["address_family"] = address_family
            __props__.__dict__["asn"] = asn
            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["bgp_md5"] = bgp_md5
            __props__.__dict__["description"] = description
            if direct_connect_id is None and not opts.urn:
                raise TypeError("Missing required property 'direct_connect_id'")
            __props__.__dict__["direct_connect_id"] = direct_connect_id
            __props__.__dict__["enable_bfd"] = enable_bfd
            __props__.__dict__["enable_nqa"] = enable_nqa
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["lag_id"] = lag_id
            __props__.__dict__["local_gateway_v4_ip"] = local_gateway_v4_ip
            __props__.__dict__["local_gateway_v6_ip"] = local_gateway_v6_ip
            __props__.__dict__["name"] = name
            __props__.__dict__["priority"] = priority
            __props__.__dict__["region"] = region
            if remote_ep_groups is None and not opts.urn:
                raise TypeError("Missing required property 'remote_ep_groups'")
            __props__.__dict__["remote_ep_groups"] = remote_ep_groups
            __props__.__dict__["remote_gateway_v4_ip"] = remote_gateway_v4_ip
            __props__.__dict__["remote_gateway_v6_ip"] = remote_gateway_v6_ip
            __props__.__dict__["resource_tenant_id"] = resource_tenant_id
            if route_mode is None and not opts.urn:
                raise TypeError("Missing required property 'route_mode'")
            __props__.__dict__["route_mode"] = route_mode
            __props__.__dict__["service_ep_groups"] = service_ep_groups
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vgw_id"] = vgw_id
            if vlan is None and not opts.urn:
                raise TypeError("Missing required property 'vlan'")
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["bgp_route_limit"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["device_id"] = None
            __props__.__dict__["extend_attributes"] = None
            __props__.__dict__["ies_id"] = None
            __props__.__dict__["lgw_id"] = None
            __props__.__dict__["rate_limit"] = None
            __props__.__dict__["reason"] = None
            __props__.__dict__["route_limit"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["vif_peers"] = None
        super(VirtualInterface, __self__).__init__(
            'huaweicloud:dc/virtualInterface:VirtualInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_family: Optional[pulumi.Input[_builtins.str]] = None,
            asn: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            bgp_md5: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_route_limit: Optional[pulumi.Input[_builtins.int]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            direct_connect_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_bfd: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_nqa: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            extend_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VirtualInterfaceExtendAttributeArgs', 'VirtualInterfaceExtendAttributeArgsDict']]]]] = None,
            gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            ies_id: Optional[pulumi.Input[_builtins.str]] = None,
            lag_id: Optional[pulumi.Input[_builtins.str]] = None,
            lgw_id: Optional[pulumi.Input[_builtins.str]] = None,
            local_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
            local_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.str]] = None,
            rate_limit: Optional[pulumi.Input[_builtins.bool]] = None,
            reason: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remote_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            remote_gateway_v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
            remote_gateway_v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
            resource_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            route_limit: Optional[pulumi.Input[_builtins.int]] = None,
            route_mode: Optional[pulumi.Input[_builtins.str]] = None,
            service_ep_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
            vif_peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VirtualInterfaceVifPeerArgs', 'VirtualInterfaceVifPeerArgsDict']]]]] = None,
            vlan: Optional[pulumi.Input[_builtins.int]] = None) -> 'VirtualInterface':
        """
        Get an existing VirtualInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address_family: Specifies the service type of the virtual interface.
               The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] asn: Specifies the local BGP ASN of the virtual interface.
               The valid value is range from `1` to `4,294,967,295`, except `64,512`.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth: Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
               The size range depends on the direct connection.
        :param pulumi.Input[_builtins.str] bgp_md5: Specifies the (MD5) password for the local BGP.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] bgp_route_limit: The BGP route configuration.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the virtual interface.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the virtual interface.
               The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
               Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device that the virtual interface peer belongs to.
        :param pulumi.Input[_builtins.str] direct_connect_id: Specifies the ID of the direct connection associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_bfd: Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] enable_nqa: Specifies whether to enable the Network Quality Analysis (NQA) function.
               Defaults to `false`.
               
               > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the virtual
               interface belongs. This field is valid only when `resource_tenant_id` is not specified.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VirtualInterfaceExtendAttributeArgs', 'VirtualInterfaceExtendAttributeArgsDict']]]] extend_attributes: The extended parameter information.
               The extend_attribute structure is documented below.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the ID of the gateway associated with the virtual
               interface (the ID of the global DC gateway).
               This field is required when `service_type` is set to **GDGW**.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] ies_id: The edge site ID.
        :param pulumi.Input[_builtins.str] lag_id: Specifies the ID of the link aggregation group (LAG) associated with the
               virtual interface.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lgw_id: The ID of the local gateway, which is used in IES scenarios.
        :param pulumi.Input[_builtins.str] local_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] local_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in cloud
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the virtual interface.
               The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
               and dots (.) are allowed.
               The Chinese characters must be in **UTF-8** or **Unicode** format.
        :param pulumi.Input[_builtins.str] priority: The priority of a virtual interface. The value can be **normal** or **low**.
               If the priorities are the same, the virtual interfaces work in load balancing mode.
               If the priorities are different, the virtual interfaces work in active/standby pairs.
               Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
               This option is only supported by virtual interfaces that use BGP routing.
        :param pulumi.Input[_builtins.bool] rate_limit: Whether rate limiting is enabled on a virtual interface.
        :param pulumi.Input[_builtins.str] reason: The error information if the status of a line is Error.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the virtual interface is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] remote_ep_groups: Specifies the CIDR list of remote subnets.
               A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
               `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
               `remote_gateway_v6_ip`) must exist in the list.
        :param pulumi.Input[_builtins.str] remote_gateway_v4_ip: Specifies the IPv4 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv4**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] remote_gateway_v6_ip: Specifies the IPv6 address of the virtual interface in client
               side. This parameter is mandatory if `address_family` is set to **ipv6**.
               Changing this will create a new resource.
               
               > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
               must be in the same subnet.
        :param pulumi.Input[_builtins.str] resource_tenant_id: Specifies the project ID of another tenant in the same region
               which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
               created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
               Changing this will create a new resource.
               
               > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
               <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
               virtual interface request and the virtual interface takes effect.
        :param pulumi.Input[_builtins.int] route_limit: The remote subnet route configurations of the virtual interface.
        :param pulumi.Input[_builtins.str] route_mode: Specifies the route mode of the virtual interface.
               The valid values are **static** and **bgp**.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_ep_groups: Specifies the subnets that access Internet services through a connection.
               This field is required in public network connections.
        :param pulumi.Input[_builtins.str] service_type: Specifies the service type of the virtual interface.
               The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the virtual interface peer.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the virtual interface.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the virtual interface.
               The valid value is **private**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the virtual interface.
        :param pulumi.Input[_builtins.str] vgw_id: Specifies the ID of the virtual gateway to which the virtual interface is
               connected.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VirtualInterfaceVifPeerArgs', 'VirtualInterfaceVifPeerArgsDict']]]] vif_peers: The peer information of the virtual interface.
               The vif_peers structure is documented below.
        :param pulumi.Input[_builtins.int] vlan: Specifies the customer VLAN to be connected.
               The valid value is range from `0` to `3,999`.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualInterfaceState.__new__(_VirtualInterfaceState)

        __props__.__dict__["address_family"] = address_family
        __props__.__dict__["asn"] = asn
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["bgp_md5"] = bgp_md5
        __props__.__dict__["bgp_route_limit"] = bgp_route_limit
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["direct_connect_id"] = direct_connect_id
        __props__.__dict__["enable_bfd"] = enable_bfd
        __props__.__dict__["enable_nqa"] = enable_nqa
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["extend_attributes"] = extend_attributes
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["ies_id"] = ies_id
        __props__.__dict__["lag_id"] = lag_id
        __props__.__dict__["lgw_id"] = lgw_id
        __props__.__dict__["local_gateway_v4_ip"] = local_gateway_v4_ip
        __props__.__dict__["local_gateway_v6_ip"] = local_gateway_v6_ip
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["rate_limit"] = rate_limit
        __props__.__dict__["reason"] = reason
        __props__.__dict__["region"] = region
        __props__.__dict__["remote_ep_groups"] = remote_ep_groups
        __props__.__dict__["remote_gateway_v4_ip"] = remote_gateway_v4_ip
        __props__.__dict__["remote_gateway_v6_ip"] = remote_gateway_v6_ip
        __props__.__dict__["resource_tenant_id"] = resource_tenant_id
        __props__.__dict__["route_limit"] = route_limit
        __props__.__dict__["route_mode"] = route_mode
        __props__.__dict__["service_ep_groups"] = service_ep_groups
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vgw_id"] = vgw_id
        __props__.__dict__["vif_peers"] = vif_peers
        __props__.__dict__["vlan"] = vlan
        return VirtualInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **ipv4** and **ipv6**. Defaults to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def asn(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the local BGP ASN of the virtual interface.
        The valid value is range from `1` to `4,294,967,295`, except `64,512`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the bandwidth of the virtual interface. The unit is Mbit/s.
        The size range depends on the direct connection.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bgpMd5")
    def bgp_md5(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the (MD5) password for the local BGP.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "bgp_md5")

    @_builtins.property
    @pulumi.getter(name="bgpRouteLimit")
    def bgp_route_limit(self) -> pulumi.Output[_builtins.int]:
        """
        The BGP route configuration.
        """
        return pulumi.get(self, "bgp_route_limit")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the virtual interface.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the virtual interface.
        The description contain a maximum of `128` characters and the angle brackets (< and >) are not allowed.
        Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the device that the virtual interface peer belongs to.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="directConnectId")
    def direct_connect_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the direct connection associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "direct_connect_id")

    @_builtins.property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable the Bidirectional Forwarding Detection (BFD) function.
        Defaults to `false`.
        """
        return pulumi.get(self, "enable_bfd")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable the Network Quality Analysis (NQA) function.
        Defaults to `false`.

        > The values of parameter `enable_bfd` and `enable_nqa` cannot be `true` at the same time.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the virtual
        interface belongs. This field is valid only when `resource_tenant_id` is not specified.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extendAttributes")
    def extend_attributes(self) -> pulumi.Output[Sequence['outputs.VirtualInterfaceExtendAttribute']]:
        """
        The extended parameter information.
        The extend_attribute structure is documented below.
        """
        return pulumi.get(self, "extend_attributes")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the gateway associated with the virtual
        interface (the ID of the global DC gateway).
        This field is required when `service_type` is set to **GDGW**.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="iesId")
    def ies_id(self) -> pulumi.Output[_builtins.str]:
        """
        The edge site ID.
        """
        return pulumi.get(self, "ies_id")

    @_builtins.property
    @pulumi.getter(name="lagId")
    def lag_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the link aggregation group (LAG) associated with the
        virtual interface.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lag_id")

    @_builtins.property
    @pulumi.getter(name="lgwId")
    def lgw_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the local gateway, which is used in IES scenarios.
        """
        return pulumi.get(self, "lgw_id")

    @_builtins.property
    @pulumi.getter(name="localGatewayV4Ip")
    def local_gateway_v4_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v4_ip")

    @_builtins.property
    @pulumi.getter(name="localGatewayV6Ip")
    def local_gateway_v6_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in cloud
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "local_gateway_v6_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the virtual interface.
        The valid length is limited from `1` to `64`, only chinese and english letters, digits, hyphens (-), underscores (_)
        and dots (.) are allowed.
        The Chinese characters must be in **UTF-8** or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.str]:
        """
        The priority of a virtual interface. The value can be **normal** or **low**.
        If the priorities are the same, the virtual interfaces work in load balancing mode.
        If the priorities are different, the virtual interfaces work in active/standby pairs.
        Outbound traffic is preferentially forwarded to the normal virtual interface with a higher priority.
        This option is only supported by virtual interfaces that use BGP routing.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether rate limiting is enabled on a virtual interface.
        """
        return pulumi.get(self, "rate_limit")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> pulumi.Output[_builtins.str]:
        """
        The error information if the status of a line is Error.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the virtual interface is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remoteEpGroups")
    def remote_ep_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the CIDR list of remote subnets.
        A CIDR that contains CIDRs of local subnet (corresponding to the parameter `local_gateway_v4_ip` or
        `local_gateway_v6_ip`) and remote subnet (corresponding to the parameter `remote_gateway_v4_ip` or
        `remote_gateway_v6_ip`) must exist in the list.
        """
        return pulumi.get(self, "remote_ep_groups")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV4Ip")
    def remote_gateway_v4_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IPv4 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv4**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "remote_gateway_v4_ip")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayV6Ip")
    def remote_gateway_v6_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IPv6 address of the virtual interface in client
        side. This parameter is mandatory if `address_family` is set to **ipv6**.
        Changing this will create a new resource.

        > The CIDRs of `local_gateway_v4_ip` and `remote_gateway_v4_ip` (or `local_gateway_v6_ip` and `remote_gateway_v6_ip`)
        must be in the same subnet.
        """
        return pulumi.get(self, "remote_gateway_v6_ip")

    @_builtins.property
    @pulumi.getter(name="resourceTenantId")
    def resource_tenant_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the project ID of another tenant in the same region
        which is used to create virtual interface across tenant. After the across tenant virtual interface is successfully
        created, the target tenant needs to accept the virtual interface request for the virtual interface to take effect.
        Changing this will create a new resource.

        > 1. When `resource_tenant_id` is specified, `vgw_id` must be the target tenant virtual gateway id.
        <br/>2. When `resource_tenant_id` is specified, the tags can only be configured after the target tenant accepts the
        virtual interface request and the virtual interface takes effect.
        """
        return pulumi.get(self, "resource_tenant_id")

    @_builtins.property
    @pulumi.getter(name="routeLimit")
    def route_limit(self) -> pulumi.Output[_builtins.int]:
        """
        The remote subnet route configurations of the virtual interface.
        """
        return pulumi.get(self, "route_limit")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the route mode of the virtual interface.
        The valid values are **static** and **bgp**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="serviceEpGroups")
    def service_ep_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the subnets that access Internet services through a connection.
        This field is required in public network connections.
        """
        return pulumi.get(self, "service_ep_groups")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the service type of the virtual interface.
        The valid values are **VGW**, **GDGW** and **LGW**. The default value is **VGW**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the virtual interface peer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the virtual interface.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the virtual interface.
        The valid value is **private**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the virtual interface.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vgwId")
    def vgw_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the virtual gateway to which the virtual interface is
        connected.
        """
        return pulumi.get(self, "vgw_id")

    @_builtins.property
    @pulumi.getter(name="vifPeers")
    def vif_peers(self) -> pulumi.Output[Sequence['outputs.VirtualInterfaceVifPeer']]:
        """
        The peer information of the virtual interface.
        The vif_peers structure is documented below.
        """
        return pulumi.get(self, "vif_peers")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the customer VLAN to be connected.
        The valid value is range from `0` to `3,999`.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vlan")

