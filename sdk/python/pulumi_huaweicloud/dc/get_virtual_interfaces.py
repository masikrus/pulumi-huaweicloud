# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualInterfacesResult',
    'AwaitableGetVirtualInterfacesResult',
    'get_virtual_interfaces',
    'get_virtual_interfaces_output',
]

@pulumi.output_type
class GetVirtualInterfacesResult:
    """
    A collection of values returned by getVirtualInterfaces.
    """
    def __init__(__self__, direct_connect_id=None, enterprise_project_id=None, id=None, name=None, region=None, status=None, vgw_id=None, virtual_interface_id=None, virtual_interfaces=None):
        if direct_connect_id and not isinstance(direct_connect_id, str):
            raise TypeError("Expected argument 'direct_connect_id' to be a str")
        pulumi.set(__self__, "direct_connect_id", direct_connect_id)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vgw_id and not isinstance(vgw_id, str):
            raise TypeError("Expected argument 'vgw_id' to be a str")
        pulumi.set(__self__, "vgw_id", vgw_id)
        if virtual_interface_id and not isinstance(virtual_interface_id, str):
            raise TypeError("Expected argument 'virtual_interface_id' to be a str")
        pulumi.set(__self__, "virtual_interface_id", virtual_interface_id)
        if virtual_interfaces and not isinstance(virtual_interfaces, list):
            raise TypeError("Expected argument 'virtual_interfaces' to be a list")
        pulumi.set(__self__, "virtual_interfaces", virtual_interfaces)

    @_builtins.property
    @pulumi.getter(name="directConnectId")
    def direct_connect_id(self) -> Optional[_builtins.str]:
        """
        The ID of the direct connection associated with the virtual interface.
        """
        return pulumi.get(self, "direct_connect_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project that the virtual interface belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the virtual interface peer.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the virtual interface peer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vgwId")
    def vgw_id(self) -> Optional[_builtins.str]:
        """
        The ID of the virtual gateway for the virtual interface.
        """
        return pulumi.get(self, "vgw_id")

    @_builtins.property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "virtual_interface_id")

    @_builtins.property
    @pulumi.getter(name="virtualInterfaces")
    def virtual_interfaces(self) -> Sequence['outputs.GetVirtualInterfacesVirtualInterfaceResult']:
        """
        Indicates the virtual interfaces list.
        The virtual_interfaces structure is documented below.
        """
        return pulumi.get(self, "virtual_interfaces")


class AwaitableGetVirtualInterfacesResult(GetVirtualInterfacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualInterfacesResult(
            direct_connect_id=self.direct_connect_id,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            vgw_id=self.vgw_id,
            virtual_interface_id=self.virtual_interface_id,
            virtual_interfaces=self.virtual_interfaces)


def get_virtual_interfaces(direct_connect_id: Optional[_builtins.str] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           vgw_id: Optional[_builtins.str] = None,
                           virtual_interface_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualInterfacesResult:
    """
    Use this data source to get the list of DC virtual interfaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    direct_connect_id = config.require_object("directConnectId")
    test = huaweicloud.dc.get_virtual_interfaces(direct_connect_id=direct_connect_id)
    ```


    :param _builtins.str direct_connect_id: Specifies the ID of the direct connection associated with the virtual interface.
    :param _builtins.str enterprise_project_id: Indicates the ID of the enterprise project
           that the virtual interface belongs to.
    :param _builtins.str name: Specifies the name of the virtual interface.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the virtual interface.
    :param _builtins.str vgw_id: Specifies the ID of the virtual gateway for the virtual interface.
    :param _builtins.str virtual_interface_id: Specifies the ID of the virtual interface.
    """
    __args__ = dict()
    __args__['directConnectId'] = direct_connect_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['vgwId'] = vgw_id
    __args__['virtualInterfaceId'] = virtual_interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getVirtualInterfaces:getVirtualInterfaces', __args__, opts=opts, typ=GetVirtualInterfacesResult).value

    return AwaitableGetVirtualInterfacesResult(
        direct_connect_id=pulumi.get(__ret__, 'direct_connect_id'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        vgw_id=pulumi.get(__ret__, 'vgw_id'),
        virtual_interface_id=pulumi.get(__ret__, 'virtual_interface_id'),
        virtual_interfaces=pulumi.get(__ret__, 'virtual_interfaces'))
def get_virtual_interfaces_output(direct_connect_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  vgw_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  virtual_interface_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualInterfacesResult]:
    """
    Use this data source to get the list of DC virtual interfaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    direct_connect_id = config.require_object("directConnectId")
    test = huaweicloud.dc.get_virtual_interfaces(direct_connect_id=direct_connect_id)
    ```


    :param _builtins.str direct_connect_id: Specifies the ID of the direct connection associated with the virtual interface.
    :param _builtins.str enterprise_project_id: Indicates the ID of the enterprise project
           that the virtual interface belongs to.
    :param _builtins.str name: Specifies the name of the virtual interface.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the virtual interface.
    :param _builtins.str vgw_id: Specifies the ID of the virtual gateway for the virtual interface.
    :param _builtins.str virtual_interface_id: Specifies the ID of the virtual interface.
    """
    __args__ = dict()
    __args__['directConnectId'] = direct_connect_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['vgwId'] = vgw_id
    __args__['virtualInterfaceId'] = virtual_interface_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getVirtualInterfaces:getVirtualInterfaces', __args__, opts=opts, typ=GetVirtualInterfacesResult)
    return __ret__.apply(lambda __response__: GetVirtualInterfacesResult(
        direct_connect_id=pulumi.get(__response__, 'direct_connect_id'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        vgw_id=pulumi.get(__response__, 'vgw_id'),
        virtual_interface_id=pulumi.get(__response__, 'virtual_interface_id'),
        virtual_interfaces=pulumi.get(__response__, 'virtual_interfaces')))
