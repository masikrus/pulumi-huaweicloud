# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VirtualInterfaceAccepterArgs', 'VirtualInterfaceAccepter']

@pulumi.input_type
class VirtualInterfaceAccepterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 virtual_interface_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VirtualInterfaceAccepter resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action on virtual interfaces created by other tenants.
               Valid values are **ACCEPTED** and **REJECTED**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] virtual_interface_id: Specifies the virtual interface ID created by other tenants.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
               
               > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "virtual_interface_id", virtual_interface_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action on virtual interfaces created by other tenants.
        Valid values are **ACCEPTED** and **REJECTED**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the virtual interface ID created by other tenants.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "virtual_interface_id")

    @virtual_interface_id.setter
    def virtual_interface_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "virtual_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.

        > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VirtualInterfaceAccepterState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_interface_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VirtualInterfaceAccepter resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action on virtual interfaces created by other tenants.
               Valid values are **ACCEPTED** and **REJECTED**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
               
               > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        :param pulumi.Input[_builtins.str] virtual_interface_id: Specifies the virtual interface ID created by other tenants.
               
               Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if virtual_interface_id is not None:
            pulumi.set(__self__, "virtual_interface_id", virtual_interface_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action on virtual interfaces created by other tenants.
        Valid values are **ACCEPTED** and **REJECTED**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.

        > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the virtual interface ID created by other tenants.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "virtual_interface_id")

    @virtual_interface_id.setter
    def virtual_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_interface_id", value)


@pulumi.type_token("huaweicloud:dc/virtualInterfaceAccepter:VirtualInterfaceAccepter")
class VirtualInterfaceAccepter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC virtual interface accepter resource within HuaweiCloud.

        > **NOTE:** Deleting a resource does not change the current receive operation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        virtual_interface_id = config.require_object("virtualInterfaceId")
        test = huaweicloud.dc.VirtualInterfaceAccepter("test",
            virtual_interface_id=virtual_interface_id,
            action="ACCEPTED")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action on virtual interfaces created by other tenants.
               Valid values are **ACCEPTED** and **REJECTED**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
               
               > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        :param pulumi.Input[_builtins.str] virtual_interface_id: Specifies the virtual interface ID created by other tenants.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualInterfaceAccepterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC virtual interface accepter resource within HuaweiCloud.

        > **NOTE:** Deleting a resource does not change the current receive operation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        virtual_interface_id = config.require_object("virtualInterfaceId")
        test = huaweicloud.dc.VirtualInterfaceAccepter("test",
            virtual_interface_id=virtual_interface_id,
            action="ACCEPTED")
        ```

        :param str resource_name: The name of the resource.
        :param VirtualInterfaceAccepterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualInterfaceAccepterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualInterfaceAccepterArgs.__new__(VirtualInterfaceAccepterArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["region"] = region
            if virtual_interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_interface_id'")
            __props__.__dict__["virtual_interface_id"] = virtual_interface_id
        super(VirtualInterfaceAccepter, __self__).__init__(
            'huaweicloud:dc/virtualInterfaceAccepter:VirtualInterfaceAccepter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_interface_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VirtualInterfaceAccepter':
        """
        Get an existing VirtualInterfaceAccepter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action on virtual interfaces created by other tenants.
               Valid values are **ACCEPTED** and **REJECTED**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
               
               > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        :param pulumi.Input[_builtins.str] virtual_interface_id: Specifies the virtual interface ID created by other tenants.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualInterfaceAccepterState.__new__(_VirtualInterfaceAccepterState)

        __props__.__dict__["action"] = action
        __props__.__dict__["region"] = region
        __props__.__dict__["virtual_interface_id"] = virtual_interface_id
        return VirtualInterfaceAccepter(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action on virtual interfaces created by other tenants.
        Valid values are **ACCEPTED** and **REJECTED**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.

        > The region needs to be consistent with the region where the virtual interface created by other tenants is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the virtual interface ID created by other tenants.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "virtual_interface_id")

