# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalGatewayPeerLinkArgs', 'GlobalGatewayPeerLink']

@pulumi.input_type
class GlobalGatewayPeerLinkArgs:
    def __init__(__self__, *,
                 global_dc_gateway_id: pulumi.Input[_builtins.str],
                 peer_site: pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a GlobalGatewayPeerLink resource.
        :param pulumi.Input[_builtins.str] global_dc_gateway_id: Specifies the global DC gateway ID.
               
               > It is required that the gateway has created a virtual interface.
        :param pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs'] peer_site: Specifies the site of the peer link.
               Currently, only one site information can be configured.
               The peer_site structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global DC gateway peer link.
               
               <a name="peer_link_peer_site"></a>
               The `peer_site` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global DC gateway peer link.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "global_dc_gateway_id", global_dc_gateway_id)
        pulumi.set(__self__, "peer_site", peer_site)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="globalDcGatewayId")
    def global_dc_gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the global DC gateway ID.

        > It is required that the gateway has created a virtual interface.
        """
        return pulumi.get(self, "global_dc_gateway_id")

    @global_dc_gateway_id.setter
    def global_dc_gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "global_dc_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="peerSite")
    def peer_site(self) -> pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs']:
        """
        Specifies the site of the peer link.
        Currently, only one site information can be configured.
        The peer_site structure is documented below.
        """
        return pulumi.get(self, "peer_site")

    @peer_site.setter
    def peer_site(self, value: pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs']):
        pulumi.set(self, "peer_site", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the global DC gateway peer link.

        <a name="peer_link_peer_site"></a>
        The `peer_site` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the global DC gateway peer link.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _GlobalGatewayPeerLinkState:
    def __init__(__self__, *,
                 bandwidth_infos: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalGatewayPeerLinkBandwidthInfoArgs']]]] = None,
                 create_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 global_dc_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_site: Optional[pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs']] = None,
                 reason: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering GlobalGatewayPeerLink resources.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalGatewayPeerLinkBandwidthInfoArgs']]] bandwidth_infos: The bandwidth information.
               The bandwidth_info structure is documented below.
        :param pulumi.Input[_builtins.str] create_owner: The cloud service where the peer link is used. This attribute values include:
               + **cc**: Cloud Connect.
               + **dc**: Direct Connect.
        :param pulumi.Input[_builtins.str] created_time: The time when the peer link was added.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global DC gateway peer link.
               
               <a name="peer_link_peer_site"></a>
               The `peer_site` block supports:
        :param pulumi.Input[_builtins.str] global_dc_gateway_id: Specifies the global DC gateway ID.
               
               > It is required that the gateway has created a virtual interface.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the instance associated with the peer link.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global DC gateway peer link.
        :param pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs'] peer_site: Specifies the site of the peer link.
               Currently, only one site information can be configured.
               The peer_site structure is documented below.
        :param pulumi.Input[_builtins.str] reason: The cause of the failure to add the peer link.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: The status of the peer link. This attribute values include:
               + **PENDING_CREATE**: The peer link is being created.
               + **PENDING_UPDATE**: The peer link is being updated.
               + **ACTIVE**: The peer link is available.
               + **ERROR**: An error occurred.
        :param pulumi.Input[_builtins.str] updated_time: The time when the peer link was updated.
        """
        if bandwidth_infos is not None:
            pulumi.set(__self__, "bandwidth_infos", bandwidth_infos)
        if create_owner is not None:
            pulumi.set(__self__, "create_owner", create_owner)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if global_dc_gateway_id is not None:
            pulumi.set(__self__, "global_dc_gateway_id", global_dc_gateway_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_site is not None:
            pulumi.set(__self__, "peer_site", peer_site)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="bandwidthInfos")
    def bandwidth_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalGatewayPeerLinkBandwidthInfoArgs']]]]:
        """
        The bandwidth information.
        The bandwidth_info structure is documented below.
        """
        return pulumi.get(self, "bandwidth_infos")

    @bandwidth_infos.setter
    def bandwidth_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalGatewayPeerLinkBandwidthInfoArgs']]]]):
        pulumi.set(self, "bandwidth_infos", value)

    @_builtins.property
    @pulumi.getter(name="createOwner")
    def create_owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud service where the peer link is used. This attribute values include:
        + **cc**: Cloud Connect.
        + **dc**: Direct Connect.
        """
        return pulumi.get(self, "create_owner")

    @create_owner.setter
    def create_owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_owner", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the peer link was added.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the global DC gateway peer link.

        <a name="peer_link_peer_site"></a>
        The `peer_site` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="globalDcGatewayId")
    def global_dc_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global DC gateway ID.

        > It is required that the gateway has created a virtual interface.
        """
        return pulumi.get(self, "global_dc_gateway_id")

    @global_dc_gateway_id.setter
    def global_dc_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_dc_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the instance associated with the peer link.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the global DC gateway peer link.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerSite")
    def peer_site(self) -> Optional[pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs']]:
        """
        Specifies the site of the peer link.
        Currently, only one site information can be configured.
        The peer_site structure is documented below.
        """
        return pulumi.get(self, "peer_site")

    @peer_site.setter
    def peer_site(self, value: Optional[pulumi.Input['GlobalGatewayPeerLinkPeerSiteArgs']]):
        pulumi.set(self, "peer_site", value)

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cause of the failure to add the peer link.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reason", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the peer link. This attribute values include:
        + **PENDING_CREATE**: The peer link is being created.
        + **PENDING_UPDATE**: The peer link is being updated.
        + **ACTIVE**: The peer link is available.
        + **ERROR**: An error occurred.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the peer link was updated.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.type_token("huaweicloud:dc/globalGatewayPeerLink:GlobalGatewayPeerLink")
class GlobalGatewayPeerLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 global_dc_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_site: Optional[pulumi.Input[Union['GlobalGatewayPeerLinkPeerSiteArgs', 'GlobalGatewayPeerLinkPeerSiteArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DC global gateway peer link resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        global_dc_gateway_id = config.require_object("globalDcGatewayId")
        gateway_id = config.require_object("gatewayId")
        project_id = config.require_object("projectId")
        region_id = config.require_object("regionId")
        test = huaweicloud.dc.GlobalGatewayPeerLink("test",
            name=name,
            global_dc_gateway_id=global_dc_gateway_id,
            description="test description",
            peer_site={
                "gateway_id": gateway_id,
                "project_id": project_id,
                "region_id": region_id,
            })
        ```

        ## Import

        The DC global gateway peer link resource can be imported using the `global_dc_gateway_id` and `id`,

        separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/globalGatewayPeerLink:GlobalGatewayPeerLink test <global_dc_gateway_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global DC gateway peer link.
               
               <a name="peer_link_peer_site"></a>
               The `peer_site` block supports:
        :param pulumi.Input[_builtins.str] global_dc_gateway_id: Specifies the global DC gateway ID.
               
               > It is required that the gateway has created a virtual interface.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global DC gateway peer link.
        :param pulumi.Input[Union['GlobalGatewayPeerLinkPeerSiteArgs', 'GlobalGatewayPeerLinkPeerSiteArgsDict']] peer_site: Specifies the site of the peer link.
               Currently, only one site information can be configured.
               The peer_site structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalGatewayPeerLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DC global gateway peer link resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        global_dc_gateway_id = config.require_object("globalDcGatewayId")
        gateway_id = config.require_object("gatewayId")
        project_id = config.require_object("projectId")
        region_id = config.require_object("regionId")
        test = huaweicloud.dc.GlobalGatewayPeerLink("test",
            name=name,
            global_dc_gateway_id=global_dc_gateway_id,
            description="test description",
            peer_site={
                "gateway_id": gateway_id,
                "project_id": project_id,
                "region_id": region_id,
            })
        ```

        ## Import

        The DC global gateway peer link resource can be imported using the `global_dc_gateway_id` and `id`,

        separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dc/globalGatewayPeerLink:GlobalGatewayPeerLink test <global_dc_gateway_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param GlobalGatewayPeerLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalGatewayPeerLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 global_dc_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_site: Optional[pulumi.Input[Union['GlobalGatewayPeerLinkPeerSiteArgs', 'GlobalGatewayPeerLinkPeerSiteArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalGatewayPeerLinkArgs.__new__(GlobalGatewayPeerLinkArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            if global_dc_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'global_dc_gateway_id'")
            __props__.__dict__["global_dc_gateway_id"] = global_dc_gateway_id
            __props__.__dict__["name"] = name
            if peer_site is None and not opts.urn:
                raise TypeError("Missing required property 'peer_site'")
            __props__.__dict__["peer_site"] = peer_site
            __props__.__dict__["region"] = region
            __props__.__dict__["bandwidth_infos"] = None
            __props__.__dict__["create_owner"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["reason"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_time"] = None
        super(GlobalGatewayPeerLink, __self__).__init__(
            'huaweicloud:dc/globalGatewayPeerLink:GlobalGatewayPeerLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GlobalGatewayPeerLinkBandwidthInfoArgs', 'GlobalGatewayPeerLinkBandwidthInfoArgsDict']]]]] = None,
            create_owner: Optional[pulumi.Input[_builtins.str]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            global_dc_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peer_site: Optional[pulumi.Input[Union['GlobalGatewayPeerLinkPeerSiteArgs', 'GlobalGatewayPeerLinkPeerSiteArgsDict']]] = None,
            reason: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'GlobalGatewayPeerLink':
        """
        Get an existing GlobalGatewayPeerLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GlobalGatewayPeerLinkBandwidthInfoArgs', 'GlobalGatewayPeerLinkBandwidthInfoArgsDict']]]] bandwidth_infos: The bandwidth information.
               The bandwidth_info structure is documented below.
        :param pulumi.Input[_builtins.str] create_owner: The cloud service where the peer link is used. This attribute values include:
               + **cc**: Cloud Connect.
               + **dc**: Direct Connect.
        :param pulumi.Input[_builtins.str] created_time: The time when the peer link was added.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global DC gateway peer link.
               
               <a name="peer_link_peer_site"></a>
               The `peer_site` block supports:
        :param pulumi.Input[_builtins.str] global_dc_gateway_id: Specifies the global DC gateway ID.
               
               > It is required that the gateway has created a virtual interface.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the instance associated with the peer link.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global DC gateway peer link.
        :param pulumi.Input[Union['GlobalGatewayPeerLinkPeerSiteArgs', 'GlobalGatewayPeerLinkPeerSiteArgsDict']] peer_site: Specifies the site of the peer link.
               Currently, only one site information can be configured.
               The peer_site structure is documented below.
        :param pulumi.Input[_builtins.str] reason: The cause of the failure to add the peer link.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: The status of the peer link. This attribute values include:
               + **PENDING_CREATE**: The peer link is being created.
               + **PENDING_UPDATE**: The peer link is being updated.
               + **ACTIVE**: The peer link is available.
               + **ERROR**: An error occurred.
        :param pulumi.Input[_builtins.str] updated_time: The time when the peer link was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalGatewayPeerLinkState.__new__(_GlobalGatewayPeerLinkState)

        __props__.__dict__["bandwidth_infos"] = bandwidth_infos
        __props__.__dict__["create_owner"] = create_owner
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["global_dc_gateway_id"] = global_dc_gateway_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["peer_site"] = peer_site
        __props__.__dict__["reason"] = reason
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_time"] = updated_time
        return GlobalGatewayPeerLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bandwidthInfos")
    def bandwidth_infos(self) -> pulumi.Output[Sequence['outputs.GlobalGatewayPeerLinkBandwidthInfo']]:
        """
        The bandwidth information.
        The bandwidth_info structure is documented below.
        """
        return pulumi.get(self, "bandwidth_infos")

    @_builtins.property
    @pulumi.getter(name="createOwner")
    def create_owner(self) -> pulumi.Output[_builtins.str]:
        """
        The cloud service where the peer link is used. This attribute values include:
        + **cc**: Cloud Connect.
        + **dc**: Direct Connect.
        """
        return pulumi.get(self, "create_owner")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the peer link was added.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the global DC gateway peer link.

        <a name="peer_link_peer_site"></a>
        The `peer_site` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="globalDcGatewayId")
    def global_dc_gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global DC gateway ID.

        > It is required that the gateway has created a virtual interface.
        """
        return pulumi.get(self, "global_dc_gateway_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the instance associated with the peer link.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the global DC gateway peer link.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerSite")
    def peer_site(self) -> pulumi.Output['outputs.GlobalGatewayPeerLinkPeerSite']:
        """
        Specifies the site of the peer link.
        Currently, only one site information can be configured.
        The peer_site structure is documented below.
        """
        return pulumi.get(self, "peer_site")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> pulumi.Output[_builtins.str]:
        """
        The cause of the failure to add the peer link.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the peer link. This attribute values include:
        + **PENDING_CREATE**: The peer link is being created.
        + **PENDING_UPDATE**: The peer link is being updated.
        + **ACTIVE**: The peer link is available.
        + **ERROR**: An error occurred.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the peer link was updated.
        """
        return pulumi.get(self, "updated_time")

