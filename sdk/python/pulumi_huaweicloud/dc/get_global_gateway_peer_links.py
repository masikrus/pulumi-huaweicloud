# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGlobalGatewayPeerLinksResult',
    'AwaitableGetGlobalGatewayPeerLinksResult',
    'get_global_gateway_peer_links',
    'get_global_gateway_peer_links_output',
]

@pulumi.output_type
class GetGlobalGatewayPeerLinksResult:
    """
    A collection of values returned by getGlobalGatewayPeerLinks.
    """
    def __init__(__self__, fields=None, global_dc_gateway_id=None, id=None, names=None, peer_link_ids=None, peer_links=None, region=None, sort_dir=None, sort_key=None):
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if global_dc_gateway_id and not isinstance(global_dc_gateway_id, str):
            raise TypeError("Expected argument 'global_dc_gateway_id' to be a str")
        pulumi.set(__self__, "global_dc_gateway_id", global_dc_gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if peer_link_ids and not isinstance(peer_link_ids, list):
            raise TypeError("Expected argument 'peer_link_ids' to be a list")
        pulumi.set(__self__, "peer_link_ids", peer_link_ids)
        if peer_links and not isinstance(peer_links, list):
            raise TypeError("Expected argument 'peer_links' to be a list")
        pulumi.set(__self__, "peer_links", peer_links)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter(name="globalDcGatewayId")
    def global_dc_gateway_id(self) -> _builtins.str:
        """
        The ID of the global DC gateway that the peer link is added for.
        """
        return pulumi.get(self, "global_dc_gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="peerLinkIds")
    def peer_link_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "peer_link_ids")

    @_builtins.property
    @pulumi.getter(name="peerLinks")
    def peer_links(self) -> Sequence['outputs.GetGlobalGatewayPeerLinksPeerLinkResult']:
        """
        The list of the peer links.
        """
        return pulumi.get(self, "peer_links")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")


class AwaitableGetGlobalGatewayPeerLinksResult(GetGlobalGatewayPeerLinksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalGatewayPeerLinksResult(
            fields=self.fields,
            global_dc_gateway_id=self.global_dc_gateway_id,
            id=self.id,
            names=self.names,
            peer_link_ids=self.peer_link_ids,
            peer_links=self.peer_links,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key)


def get_global_gateway_peer_links(fields: Optional[Sequence[_builtins.str]] = None,
                                  global_dc_gateway_id: Optional[_builtins.str] = None,
                                  names: Optional[Sequence[_builtins.str]] = None,
                                  peer_link_ids: Optional[Sequence[_builtins.str]] = None,
                                  region: Optional[_builtins.str] = None,
                                  sort_dir: Optional[_builtins.str] = None,
                                  sort_key: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalGatewayPeerLinksResult:
    """
    Use this data source to get the list of DC global gateway peer links.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    global_dc_gateway_id = config.require_object("globalDcGatewayId")
    test = huaweicloud.dc.get_global_gateway_peer_links(global_dc_gateway_id=global_dc_gateway_id)
    ```


    :param Sequence[_builtins.str] fields: Specifies the list of fields to be displayed. If omitted, all fields will be queried.
    :param _builtins.str global_dc_gateway_id: Specifies the global DC gateway ID.
    :param Sequence[_builtins.str] names: Specifies the resource names for querying instances.
    :param Sequence[_builtins.str] peer_link_ids: Specifies the resource IDs for querying instances.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting order of returned results.
           There are two options: **asc** (default) and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field. Defaults to **id**.
    """
    __args__ = dict()
    __args__['fields'] = fields
    __args__['globalDcGatewayId'] = global_dc_gateway_id
    __args__['names'] = names
    __args__['peerLinkIds'] = peer_link_ids
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getGlobalGatewayPeerLinks:getGlobalGatewayPeerLinks', __args__, opts=opts, typ=GetGlobalGatewayPeerLinksResult).value

    return AwaitableGetGlobalGatewayPeerLinksResult(
        fields=pulumi.get(__ret__, 'fields'),
        global_dc_gateway_id=pulumi.get(__ret__, 'global_dc_gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        peer_link_ids=pulumi.get(__ret__, 'peer_link_ids'),
        peer_links=pulumi.get(__ret__, 'peer_links'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'))
def get_global_gateway_peer_links_output(fields: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                         global_dc_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                         peer_link_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalGatewayPeerLinksResult]:
    """
    Use this data source to get the list of DC global gateway peer links.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    global_dc_gateway_id = config.require_object("globalDcGatewayId")
    test = huaweicloud.dc.get_global_gateway_peer_links(global_dc_gateway_id=global_dc_gateway_id)
    ```


    :param Sequence[_builtins.str] fields: Specifies the list of fields to be displayed. If omitted, all fields will be queried.
    :param _builtins.str global_dc_gateway_id: Specifies the global DC gateway ID.
    :param Sequence[_builtins.str] names: Specifies the resource names for querying instances.
    :param Sequence[_builtins.str] peer_link_ids: Specifies the resource IDs for querying instances.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting order of returned results.
           There are two options: **asc** (default) and **desc**.
    :param _builtins.str sort_key: Specifies the sorting field. Defaults to **id**.
    """
    __args__ = dict()
    __args__['fields'] = fields
    __args__['globalDcGatewayId'] = global_dc_gateway_id
    __args__['names'] = names
    __args__['peerLinkIds'] = peer_link_ids
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getGlobalGatewayPeerLinks:getGlobalGatewayPeerLinks', __args__, opts=opts, typ=GetGlobalGatewayPeerLinksResult)
    return __ret__.apply(lambda __response__: GetGlobalGatewayPeerLinksResult(
        fields=pulumi.get(__response__, 'fields'),
        global_dc_gateway_id=pulumi.get(__response__, 'global_dc_gateway_id'),
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        peer_link_ids=pulumi.get(__response__, 'peer_link_ids'),
        peer_links=pulumi.get(__response__, 'peer_links'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key')))
