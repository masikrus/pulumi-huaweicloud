# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVirtualGatewaysResult',
    'AwaitableGetVirtualGatewaysResult',
    'get_virtual_gateways',
    'get_virtual_gateways_output',
]

@pulumi.output_type
class GetVirtualGatewaysResult:
    """
    A collection of values returned by getVirtualGateways.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, region=None, virtual_gateway_id=None, virtual_gateways=None, vpc_id=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if virtual_gateway_id and not isinstance(virtual_gateway_id, str):
            raise TypeError("Expected argument 'virtual_gateway_id' to be a str")
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)
        if virtual_gateways and not isinstance(virtual_gateways, list):
            raise TypeError("Expected argument 'virtual_gateways' to be a list")
        pulumi.set(__self__, "virtual_gateways", virtual_gateways)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the enterprise project that the virtual gateway belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the virtual gateway name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "virtual_gateway_id")

    @_builtins.property
    @pulumi.getter(name="virtualGateways")
    def virtual_gateways(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayResult']:
        """
        Indicates the virtual gateways list.
        The virtual_gateways structure is documented below.
        """
        return pulumi.get(self, "virtual_gateways")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the VPC connected by the virtual gateway.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetVirtualGatewaysResult(GetVirtualGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualGatewaysResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            virtual_gateway_id=self.virtual_gateway_id,
            virtual_gateways=self.virtual_gateways,
            vpc_id=self.vpc_id)


def get_virtual_gateways(enterprise_project_id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         virtual_gateway_id: Optional[_builtins.str] = None,
                         vpc_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualGatewaysResult:
    """
    Use this data source to get the list of DC virtual gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_virtual_gateways(name="test")
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the name of the virtual gateway.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str virtual_gateway_id: Specifies the ID of the virtual gateway.
    :param _builtins.str vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['virtualGatewayId'] = virtual_gateway_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dc/getVirtualGateways:getVirtualGateways', __args__, opts=opts, typ=GetVirtualGatewaysResult).value

    return AwaitableGetVirtualGatewaysResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        virtual_gateway_id=pulumi.get(__ret__, 'virtual_gateway_id'),
        virtual_gateways=pulumi.get(__ret__, 'virtual_gateways'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_virtual_gateways_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                virtual_gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualGatewaysResult]:
    """
    Use this data source to get the list of DC virtual gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dc.get_virtual_gateways(name="test")
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the name of the virtual gateway.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str virtual_gateway_id: Specifies the ID of the virtual gateway.
    :param _builtins.str vpc_id: Specifies the ID of the VPC connected to the virtual gateway.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['virtualGatewayId'] = virtual_gateway_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dc/getVirtualGateways:getVirtualGateways', __args__, opts=opts, typ=GetVirtualGatewaysResult)
    return __ret__.apply(lambda __response__: GetVirtualGatewaysResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        virtual_gateway_id=pulumi.get(__response__, 'virtual_gateway_id'),
        virtual_gateways=pulumi.get(__response__, 'virtual_gateways'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
