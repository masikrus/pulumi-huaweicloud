# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppFlavorsResult',
    'AwaitableGetAppFlavorsResult',
    'get_app_flavors',
    'get_app_flavors_output',
]

@pulumi.output_type
class GetAppFlavorsResult:
    """
    A collection of values returned by getAppFlavors.
    """
    def __init__(__self__, architecture=None, availability_zone=None, charge_mode=None, flavor_id=None, flavors=None, id=None, os_type=None, product_id=None, region=None):
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if flavor_id and not isinstance(flavor_id, str):
            raise TypeError("Expected argument 'flavor_id' to be a str")
        pulumi.set(__self__, "flavor_id", flavor_id)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[_builtins.str]:
        """
        The flavor architecture of app flavors that matched filter parameters.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of app flavors that matched filter parameters.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetAppFlavorsFlavorResult']:
        """
        The list of app flavors that matched filter parameters.  
        The flavors structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[_builtins.str]:
        """
        The product ID of app flavors that matched filter parameters.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAppFlavorsResult(GetAppFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppFlavorsResult(
            architecture=self.architecture,
            availability_zone=self.availability_zone,
            charge_mode=self.charge_mode,
            flavor_id=self.flavor_id,
            flavors=self.flavors,
            id=self.id,
            os_type=self.os_type,
            product_id=self.product_id,
            region=self.region)


def get_app_flavors(architecture: Optional[_builtins.str] = None,
                    availability_zone: Optional[_builtins.str] = None,
                    charge_mode: Optional[_builtins.str] = None,
                    flavor_id: Optional[_builtins.str] = None,
                    os_type: Optional[_builtins.str] = None,
                    product_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppFlavorsResult:
    """
    Use this data source to get flavor list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.Workspace.get_app_flavors(product_id=product_id)
    ```


    :param _builtins.str architecture: Specifies the architecture type used to filter the app flavor list. The valid
           values are **x86** and **arm**.
    :param _builtins.str availability_zone: Specifies the availability zone used to filter the app flavor list.
    :param _builtins.str charge_mode: Specifies the charge mode used to filter the app flavor list.
           + **1**. The billing method is pre-paid.
           + **0**. The billing method is post-paid.
    :param _builtins.str flavor_id: Specifies the flavor ID used to filter the app flavor list.
    :param _builtins.str os_type: Specifies the operating system type used to filter the app flavor list. The valid
           value is **Windows**.
    :param _builtins.str product_id: Specifies the product ID used to filter the app flavor list.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['architecture'] = architecture
    __args__['availabilityZone'] = availability_zone
    __args__['chargeMode'] = charge_mode
    __args__['flavorId'] = flavor_id
    __args__['osType'] = os_type
    __args__['productId'] = product_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppFlavors:getAppFlavors', __args__, opts=opts, typ=GetAppFlavorsResult).value

    return AwaitableGetAppFlavorsResult(
        architecture=pulumi.get(__ret__, 'architecture'),
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        flavor_id=pulumi.get(__ret__, 'flavor_id'),
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        os_type=pulumi.get(__ret__, 'os_type'),
        product_id=pulumi.get(__ret__, 'product_id'),
        region=pulumi.get(__ret__, 'region'))
def get_app_flavors_output(architecture: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           flavor_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           product_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppFlavorsResult]:
    """
    Use this data source to get flavor list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.Workspace.get_app_flavors(product_id=product_id)
    ```


    :param _builtins.str architecture: Specifies the architecture type used to filter the app flavor list. The valid
           values are **x86** and **arm**.
    :param _builtins.str availability_zone: Specifies the availability zone used to filter the app flavor list.
    :param _builtins.str charge_mode: Specifies the charge mode used to filter the app flavor list.
           + **1**. The billing method is pre-paid.
           + **0**. The billing method is post-paid.
    :param _builtins.str flavor_id: Specifies the flavor ID used to filter the app flavor list.
    :param _builtins.str os_type: Specifies the operating system type used to filter the app flavor list. The valid
           value is **Windows**.
    :param _builtins.str product_id: Specifies the product ID used to filter the app flavor list.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['architecture'] = architecture
    __args__['availabilityZone'] = availability_zone
    __args__['chargeMode'] = charge_mode
    __args__['flavorId'] = flavor_id
    __args__['osType'] = os_type
    __args__['productId'] = product_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppFlavors:getAppFlavors', __args__, opts=opts, typ=GetAppFlavorsResult)
    return __ret__.apply(lambda __response__: GetAppFlavorsResult(
        architecture=pulumi.get(__response__, 'architecture'),
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        flavor_id=pulumi.get(__response__, 'flavor_id'),
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        os_type=pulumi.get(__response__, 'os_type'),
        product_id=pulumi.get(__response__, 'product_id'),
        region=pulumi.get(__response__, 'region')))
