# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUsersResult',
    'AwaitableGetUsersResult',
    'get_users',
    'get_users_output',
]

@pulumi.output_type
class GetUsersResult:
    """
    A collection of values returned by getUsers.
    """
    def __init__(__self__, active_type=None, description=None, enterprise_project_id=None, group_name=None, id=None, is_query_total_desktops=None, region=None, user_name=None, users=None):
        if active_type and not isinstance(active_type, str):
            raise TypeError("Expected argument 'active_type' to be a str")
        pulumi.set(__self__, "active_type", active_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_query_total_desktops and not isinstance(is_query_total_desktops, bool):
            raise TypeError("Expected argument 'is_query_total_desktops' to be a bool")
        pulumi.set(__self__, "is_query_total_desktops", is_query_total_desktops)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="activeType")
    def active_type(self) -> Optional[_builtins.str]:
        """
        The activation type of the user.
        """
        return pulumi.get(self, "active_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the user.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isQueryTotalDesktops")
    def is_query_total_desktops(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_query_total_desktops")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The name of user.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetUsersUserResult']:
        """
        The list of users that matched filter parameters.  
        The users structure is documented below.
        """
        return pulumi.get(self, "users")


class AwaitableGetUsersResult(GetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsersResult(
            active_type=self.active_type,
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            group_name=self.group_name,
            id=self.id,
            is_query_total_desktops=self.is_query_total_desktops,
            region=self.region,
            user_name=self.user_name,
            users=self.users)


def get_users(active_type: Optional[_builtins.str] = None,
              description: Optional[_builtins.str] = None,
              enterprise_project_id: Optional[_builtins.str] = None,
              group_name: Optional[_builtins.str] = None,
              is_query_total_desktops: Optional[_builtins.bool] = None,
              region: Optional[_builtins.str] = None,
              user_name: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsersResult:
    """
    Use this data source to query the Workspace users under a specified region within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_users()
    ```

    ### Filter by user name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    user_name = config.require_object("userName")
    test = huaweicloud.Workspace.get_users(user_name=user_name)
    ```


    :param _builtins.str active_type: Specifies the activation type of the user.  
           The valid values are as follows:
           + **USER_ACTIVATE**
           + **ADMIN_ACTIVATE**
    :param _builtins.str description: Specifies the user description for fuzzy matching.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project.
    :param _builtins.str group_name: Specifies the user group name for exact matching.
    :param _builtins.bool is_query_total_desktops: Specifies whether to query the number of desktops bound to the user.  
           The default value is **true**.
    :param _builtins.str region: Specifies the region where the users are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str user_name: Specifies the user name to be queried.
    """
    __args__ = dict()
    __args__['activeType'] = active_type
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['isQueryTotalDesktops'] = is_query_total_desktops
    __args__['region'] = region
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult).value

    return AwaitableGetUsersResult(
        active_type=pulumi.get(__ret__, 'active_type'),
        description=pulumi.get(__ret__, 'description'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        is_query_total_desktops=pulumi.get(__ret__, 'is_query_total_desktops'),
        region=pulumi.get(__ret__, 'region'),
        user_name=pulumi.get(__ret__, 'user_name'),
        users=pulumi.get(__ret__, 'users'))
def get_users_output(active_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     is_query_total_desktops: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUsersResult]:
    """
    Use this data source to query the Workspace users under a specified region within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_users()
    ```

    ### Filter by user name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    user_name = config.require_object("userName")
    test = huaweicloud.Workspace.get_users(user_name=user_name)
    ```


    :param _builtins.str active_type: Specifies the activation type of the user.  
           The valid values are as follows:
           + **USER_ACTIVATE**
           + **ADMIN_ACTIVATE**
    :param _builtins.str description: Specifies the user description for fuzzy matching.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project.
    :param _builtins.str group_name: Specifies the user group name for exact matching.
    :param _builtins.bool is_query_total_desktops: Specifies whether to query the number of desktops bound to the user.  
           The default value is **true**.
    :param _builtins.str region: Specifies the region where the users are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str user_name: Specifies the user name to be queried.
    """
    __args__ = dict()
    __args__['activeType'] = active_type
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['isQueryTotalDesktops'] = is_query_total_desktops
    __args__['region'] = region
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult)
    return __ret__.apply(lambda __response__: GetUsersResult(
        active_type=pulumi.get(__response__, 'active_type'),
        description=pulumi.get(__response__, 'description'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        id=pulumi.get(__response__, 'id'),
        is_query_total_desktops=pulumi.get(__response__, 'is_query_total_desktops'),
        region=pulumi.get(__response__, 'region'),
        user_name=pulumi.get(__response__, 'user_name'),
        users=pulumi.get(__response__, 'users')))
