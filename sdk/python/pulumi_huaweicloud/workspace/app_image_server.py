# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppImageServerArgs', 'AppImageServer']

@pulumi.input_type
class AppImageServerArgs:
    def __init__(__self__, *,
                 authorize_accounts: pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]],
                 flavor_id: pulumi.Input[_builtins.str],
                 image_id: pulumi.Input[_builtins.str],
                 image_type: pulumi.Input[_builtins.str],
                 root_volume: pulumi.Input['AppImageServerRootVolumeArgs'],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 attach_apps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_associated_resources: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input['AppImageServerRoutePolicyArgs']] = None,
                 scheduler_hints: Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AppImageServer resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]] authorize_accounts: Specifies the list of the management accounts for creating the image.
               Changing this creates a new resource.
               The authorize_accounts structure is documented below.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the basic image ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_type: Specifies the basic image type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input['AppImageServerRootVolumeArgs'] root_volume: Specifies the system disk configuration of the image server.
               Changing this creates a new resource.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_apps: The list of the warehouse apps.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the image server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image server.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the image
               server belong. Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] image_source_product_id: Specifies the basic image product ID of the image server.
               Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.bool] is_delete_associated_resources: Specifies whether to delete resources associated with this image server
               after deleting it, defaults to **false**.
               
               > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
               and application group resources, but the image product related resources will be retained.
               
               <a name="app_image_server_authorize_accounts"></a>
               The `authorize_accounts` block supports:
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the image server.
               Changing this creates a new resource.
               + **false**: Multi-session mode (default value).
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image server.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed and cannot contain spaces.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               Changing this creates a new resource.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppImageServerRoutePolicyArgs'] route_policy: Specifies the session scheduling policy of the server associated with
               the image server. Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input['AppImageServerSchedulerHintsArgs'] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the specification code of the basic image to which the image
               server belongs. Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image server.
               Supports up to `20` tags.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "authorize_accounts", authorize_accounts)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "root_volume", root_volume)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if attach_apps is not None:
            pulumi.set(__self__, "attach_apps", attach_apps)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extra_session_size is not None:
            pulumi.set(__self__, "extra_session_size", extra_session_size)
        if extra_session_type is not None:
            pulumi.set(__self__, "extra_session_type", extra_session_type)
        if image_source_product_id is not None:
            pulumi.set(__self__, "image_source_product_id", image_source_product_id)
        if is_delete_associated_resources is not None:
            pulumi.set(__self__, "is_delete_associated_resources", is_delete_associated_resources)
        if is_vdi is not None:
            pulumi.set(__self__, "is_vdi", is_vdi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if spec_code is not None:
            pulumi.set(__self__, "spec_code", spec_code)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="authorizeAccounts")
    def authorize_accounts(self) -> pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]]:
        """
        Specifies the list of the management accounts for creating the image.
        Changing this creates a new resource.
        The authorize_accounts structure is documented below.
        """
        return pulumi.get(self, "authorize_accounts")

    @authorize_accounts.setter
    def authorize_accounts(self, value: pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]]):
        pulumi.set(self, "authorize_accounts", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the basic image ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the basic image type of the image server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Input['AppImageServerRootVolumeArgs']:
        """
        Specifies the system disk configuration of the image server.
        Changing this creates a new resource.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: pulumi.Input['AppImageServerRootVolumeArgs']):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subnet ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the VPC ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="attachApps")
    def attach_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of the warehouse apps.
        """
        return pulumi.get(self, "attach_apps")

    @attach_apps.setter
    def attach_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "attach_apps", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the image server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image server.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the image
        server belong. Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @extra_session_size.setter
    def extra_session_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "extra_session_size", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional session type.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @extra_session_type.setter
    def extra_session_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extra_session_type", value)

    @_builtins.property
    @pulumi.getter(name="imageSourceProductId")
    def image_source_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic image product ID of the image server.
        Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_source_product_id")

    @image_source_product_id.setter
    def image_source_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_source_product_id", value)

    @_builtins.property
    @pulumi.getter(name="isDeleteAssociatedResources")
    def is_delete_associated_resources(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete resources associated with this image server
        after deleting it, defaults to **false**.

        > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
        and application group resources, but the image product related resources will be retained.

        <a name="app_image_server_authorize_accounts"></a>
        The `authorize_accounts` block supports:
        """
        return pulumi.get(self, "is_delete_associated_resources")

    @is_delete_associated_resources.setter
    def is_delete_associated_resources(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_delete_associated_resources", value)

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the session mode of the image server.
        Changing this creates a new resource.
        + **false**: Multi-session mode (default value).
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        """
        return pulumi.get(self, "is_vdi")

    @is_vdi.setter
    def is_vdi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vdi", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image server.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed and cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        Changing this creates a new resource.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input['AppImageServerRoutePolicyArgs']]:
        """
        Specifies the session scheduling policy of the server associated with
        the image server. Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input['AppImageServerRoutePolicyArgs']]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the specification code of the basic image to which the image
        server belongs. Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image server.
        Supports up to `20` tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppImageServerState:
    def __init__(__self__, *,
                 attach_apps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 authorize_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_associated_resources: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input['AppImageServerRootVolumeArgs']] = None,
                 route_policy: Optional[pulumi.Input['AppImageServerRoutePolicyArgs']] = None,
                 scheduler_hints: Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppImageServer resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_apps: The list of the warehouse apps.
        :param pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]] authorize_accounts: Specifies the list of the management accounts for creating the image.
               Changing this creates a new resource.
               The authorize_accounts structure is documented below.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the image server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the image server, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image server.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the image
               server belong. Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the basic image ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_source_product_id: Specifies the basic image product ID of the image server.
               Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the basic image type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[_builtins.bool] is_delete_associated_resources: Specifies whether to delete resources associated with this image server
               after deleting it, defaults to **false**.
               
               > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
               and application group resources, but the image product related resources will be retained.
               
               <a name="app_image_server_authorize_accounts"></a>
               The `authorize_accounts` block supports:
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the image server.
               Changing this creates a new resource.
               + **false**: Multi-session mode (default value).
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image server.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed and cannot contain spaces.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               Changing this creates a new resource.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppImageServerRootVolumeArgs'] root_volume: Specifies the system disk configuration of the image server.
               Changing this creates a new resource.
               The root_volume structure is documented below.
        :param pulumi.Input['AppImageServerRoutePolicyArgs'] route_policy: Specifies the session scheduling policy of the server associated with
               the image server. Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input['AppImageServerSchedulerHintsArgs'] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the specification code of the basic image to which the image
               server belongs. Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image server.
               Supports up to `20` tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        if attach_apps is not None:
            pulumi.set(__self__, "attach_apps", attach_apps)
        if authorize_accounts is not None:
            pulumi.set(__self__, "authorize_accounts", authorize_accounts)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extra_session_size is not None:
            pulumi.set(__self__, "extra_session_size", extra_session_size)
        if extra_session_type is not None:
            pulumi.set(__self__, "extra_session_type", extra_session_type)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_source_product_id is not None:
            pulumi.set(__self__, "image_source_product_id", image_source_product_id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if is_delete_associated_resources is not None:
            pulumi.set(__self__, "is_delete_associated_resources", is_delete_associated_resources)
        if is_vdi is not None:
            pulumi.set(__self__, "is_vdi", is_vdi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if spec_code is not None:
            pulumi.set(__self__, "spec_code", spec_code)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="attachApps")
    def attach_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of the warehouse apps.
        """
        return pulumi.get(self, "attach_apps")

    @attach_apps.setter
    def attach_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "attach_apps", value)

    @_builtins.property
    @pulumi.getter(name="authorizeAccounts")
    def authorize_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]]]:
        """
        Specifies the list of the management accounts for creating the image.
        Changing this creates a new resource.
        The authorize_accounts structure is documented below.
        """
        return pulumi.get(self, "authorize_accounts")

    @authorize_accounts.setter
    def authorize_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppImageServerAuthorizeAccountArgs']]]]):
        pulumi.set(self, "authorize_accounts", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the image server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the image server, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image server.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the image
        server belong. Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @extra_session_size.setter
    def extra_session_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "extra_session_size", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional session type.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @extra_session_type.setter
    def extra_session_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extra_session_type", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic image ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageSourceProductId")
    def image_source_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic image product ID of the image server.
        Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_source_product_id")

    @image_source_product_id.setter
    def image_source_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_source_product_id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic image type of the image server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="isDeleteAssociatedResources")
    def is_delete_associated_resources(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete resources associated with this image server
        after deleting it, defaults to **false**.

        > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
        and application group resources, but the image product related resources will be retained.

        <a name="app_image_server_authorize_accounts"></a>
        The `authorize_accounts` block supports:
        """
        return pulumi.get(self, "is_delete_associated_resources")

    @is_delete_associated_resources.setter
    def is_delete_associated_resources(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_delete_associated_resources", value)

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the session mode of the image server.
        Changing this creates a new resource.
        + **false**: Multi-session mode (default value).
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        """
        return pulumi.get(self, "is_vdi")

    @is_vdi.setter
    def is_vdi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vdi", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image server.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed and cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        Changing this creates a new resource.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['AppImageServerRootVolumeArgs']]:
        """
        Specifies the system disk configuration of the image server.
        Changing this creates a new resource.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['AppImageServerRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input['AppImageServerRoutePolicyArgs']]:
        """
        Specifies the session scheduling policy of the server associated with
        the image server. Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input['AppImageServerRoutePolicyArgs']]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input['AppImageServerSchedulerHintsArgs']]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the specification code of the basic image to which the image
        server belongs. Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image server.
        Supports up to `20` tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Workspace/appImageServer:AppImageServer")
class AppImageServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_apps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 authorize_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppImageServerAuthorizeAccountArgs', 'AppImageServerAuthorizeAccountArgsDict']]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_associated_resources: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['AppImageServerRootVolumeArgs', 'AppImageServerRootVolumeArgsDict']]] = None,
                 route_policy: Optional[pulumi.Input[Union['AppImageServerRoutePolicyArgs', 'AppImageServerRoutePolicyArgsDict']]] = None,
                 scheduler_hints: Optional[pulumi.Input[Union['AppImageServerSchedulerHintsArgs', 'AppImageServerSchedulerHintsArgsDict']]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an image server resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_server_name = config.require_object("imageServerName")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        image_id = config.require_object("imageId")
        image_spec_code = config.require_object("imageSpecCode")
        image_source_product_id = config.require_object("imageSourceProductId")
        user_name = config.require_object("userName")
        test = huaweicloud.workspace.AppImageServer("test",
            name=image_server_name,
            flavor_id=flavor_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            image_id=image_id,
            image_type="gold",
            spec_code=image_spec_code,
            image_source_product_id=image_source_product_id,
            is_vdi=True,
            authorize_accounts=[{
                "account": user_name,
                "type": "USER",
            }],
            root_volume={
                "type": "SAS",
                "size": 80,
            },
            is_delete_associated_resources=True)
        ```

        ## Import

        The image server resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appImageServer:AppImageServer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `flavor_id`, `vpc_id`, `subnet_id`, `root_volume`, `image_source_product_id`, `is_vdi`,

        `availability_zone`, `ou_name`, `extra_session_type`, `extra_session_size`, `route_policy`, `scheduler_hints`, `tags`,

        `enterprise_project_id`,  `is_delete_associated_resources`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_image_server" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              flavor_id, vpc_id, subnet_id, root_volume, image_source_product_id, is_vdi, availability_zone, ou_name, extra_session_type,
            
              extra_session_size, route_policy, scheduler_hints, tags, enterprise_project_id, is_delete_associated_resources,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_apps: The list of the warehouse apps.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppImageServerAuthorizeAccountArgs', 'AppImageServerAuthorizeAccountArgsDict']]]] authorize_accounts: Specifies the list of the management accounts for creating the image.
               Changing this creates a new resource.
               The authorize_accounts structure is documented below.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the image server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image server.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the image
               server belong. Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the basic image ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_source_product_id: Specifies the basic image product ID of the image server.
               Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the basic image type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[_builtins.bool] is_delete_associated_resources: Specifies whether to delete resources associated with this image server
               after deleting it, defaults to **false**.
               
               > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
               and application group resources, but the image product related resources will be retained.
               
               <a name="app_image_server_authorize_accounts"></a>
               The `authorize_accounts` block supports:
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the image server.
               Changing this creates a new resource.
               + **false**: Multi-session mode (default value).
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image server.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed and cannot contain spaces.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               Changing this creates a new resource.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppImageServerRootVolumeArgs', 'AppImageServerRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the image server.
               Changing this creates a new resource.
               The root_volume structure is documented below.
        :param pulumi.Input[Union['AppImageServerRoutePolicyArgs', 'AppImageServerRoutePolicyArgsDict']] route_policy: Specifies the session scheduling policy of the server associated with
               the image server. Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[Union['AppImageServerSchedulerHintsArgs', 'AppImageServerSchedulerHintsArgsDict']] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the specification code of the basic image to which the image
               server belongs. Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image server.
               Supports up to `20` tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppImageServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an image server resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_server_name = config.require_object("imageServerName")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        image_id = config.require_object("imageId")
        image_spec_code = config.require_object("imageSpecCode")
        image_source_product_id = config.require_object("imageSourceProductId")
        user_name = config.require_object("userName")
        test = huaweicloud.workspace.AppImageServer("test",
            name=image_server_name,
            flavor_id=flavor_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            image_id=image_id,
            image_type="gold",
            spec_code=image_spec_code,
            image_source_product_id=image_source_product_id,
            is_vdi=True,
            authorize_accounts=[{
                "account": user_name,
                "type": "USER",
            }],
            root_volume={
                "type": "SAS",
                "size": 80,
            },
            is_delete_associated_resources=True)
        ```

        ## Import

        The image server resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appImageServer:AppImageServer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `flavor_id`, `vpc_id`, `subnet_id`, `root_volume`, `image_source_product_id`, `is_vdi`,

        `availability_zone`, `ou_name`, `extra_session_type`, `extra_session_size`, `route_policy`, `scheduler_hints`, `tags`,

        `enterprise_project_id`,  `is_delete_associated_resources`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_image_server" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              flavor_id, vpc_id, subnet_id, root_volume, image_source_product_id, is_vdi, availability_zone, ou_name, extra_session_type,
            
              extra_session_size, route_policy, scheduler_hints, tags, enterprise_project_id, is_delete_associated_resources,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AppImageServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppImageServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_apps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 authorize_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppImageServerAuthorizeAccountArgs', 'AppImageServerAuthorizeAccountArgsDict']]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_associated_resources: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['AppImageServerRootVolumeArgs', 'AppImageServerRootVolumeArgsDict']]] = None,
                 route_policy: Optional[pulumi.Input[Union['AppImageServerRoutePolicyArgs', 'AppImageServerRoutePolicyArgsDict']]] = None,
                 scheduler_hints: Optional[pulumi.Input[Union['AppImageServerSchedulerHintsArgs', 'AppImageServerSchedulerHintsArgsDict']]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppImageServerArgs.__new__(AppImageServerArgs)

            __props__.__dict__["attach_apps"] = attach_apps
            if authorize_accounts is None and not opts.urn:
                raise TypeError("Missing required property 'authorize_accounts'")
            __props__.__dict__["authorize_accounts"] = authorize_accounts
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["extra_session_size"] = extra_session_size
            __props__.__dict__["extra_session_type"] = extra_session_type
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["image_source_product_id"] = image_source_product_id
            if image_type is None and not opts.urn:
                raise TypeError("Missing required property 'image_type'")
            __props__.__dict__["image_type"] = image_type
            __props__.__dict__["is_delete_associated_resources"] = is_delete_associated_resources
            __props__.__dict__["is_vdi"] = is_vdi
            __props__.__dict__["name"] = name
            __props__.__dict__["ou_name"] = ou_name
            __props__.__dict__["region"] = region
            if root_volume is None and not opts.urn:
                raise TypeError("Missing required property 'root_volume'")
            __props__.__dict__["root_volume"] = root_volume
            __props__.__dict__["route_policy"] = route_policy
            __props__.__dict__["scheduler_hints"] = scheduler_hints
            __props__.__dict__["spec_code"] = spec_code
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
        super(AppImageServer, __self__).__init__(
            'huaweicloud:Workspace/appImageServer:AppImageServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attach_apps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            authorize_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppImageServerAuthorizeAccountArgs', 'AppImageServerAuthorizeAccountArgsDict']]]]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
            extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_source_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_delete_associated_resources: Optional[pulumi.Input[_builtins.bool]] = None,
            is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ou_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume: Optional[pulumi.Input[Union['AppImageServerRootVolumeArgs', 'AppImageServerRootVolumeArgsDict']]] = None,
            route_policy: Optional[pulumi.Input[Union['AppImageServerRoutePolicyArgs', 'AppImageServerRoutePolicyArgsDict']]] = None,
            scheduler_hints: Optional[pulumi.Input[Union['AppImageServerSchedulerHintsArgs', 'AppImageServerSchedulerHintsArgsDict']]] = None,
            spec_code: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppImageServer':
        """
        Get an existing AppImageServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_apps: The list of the warehouse apps.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppImageServerAuthorizeAccountArgs', 'AppImageServerAuthorizeAccountArgsDict']]]] authorize_accounts: Specifies the list of the management accounts for creating the image.
               Changing this creates a new resource.
               The authorize_accounts structure is documented below.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the image server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the image server, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image server.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the image
               server belong. Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               Changing this creates a new resource.
               This parameter is available only when the `is_vdi` parameter is set to **false**.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the basic image ID of the image server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_source_product_id: Specifies the basic image product ID of the image server.
               Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the basic image type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[_builtins.bool] is_delete_associated_resources: Specifies whether to delete resources associated with this image server
               after deleting it, defaults to **false**.
               
               > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
               and application group resources, but the image product related resources will be retained.
               
               <a name="app_image_server_authorize_accounts"></a>
               The `authorize_accounts` block supports:
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the image server.
               Changing this creates a new resource.
               + **false**: Multi-session mode (default value).
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image server.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed and cannot contain spaces.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               Changing this creates a new resource.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppImageServerRootVolumeArgs', 'AppImageServerRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the image server.
               Changing this creates a new resource.
               The root_volume structure is documented below.
        :param pulumi.Input[Union['AppImageServerRoutePolicyArgs', 'AppImageServerRoutePolicyArgsDict']] route_policy: Specifies the session scheduling policy of the server associated with
               the image server. Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[Union['AppImageServerSchedulerHintsArgs', 'AppImageServerSchedulerHintsArgsDict']] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the specification code of the basic image to which the image
               server belongs. Changing this creates a new resource.
               This parameter is required when the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image server.
               Supports up to `20` tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the image server belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppImageServerState.__new__(_AppImageServerState)

        __props__.__dict__["attach_apps"] = attach_apps
        __props__.__dict__["authorize_accounts"] = authorize_accounts
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["extra_session_size"] = extra_session_size
        __props__.__dict__["extra_session_type"] = extra_session_type
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_source_product_id"] = image_source_product_id
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["is_delete_associated_resources"] = is_delete_associated_resources
        __props__.__dict__["is_vdi"] = is_vdi
        __props__.__dict__["name"] = name
        __props__.__dict__["ou_name"] = ou_name
        __props__.__dict__["region"] = region
        __props__.__dict__["root_volume"] = root_volume
        __props__.__dict__["route_policy"] = route_policy
        __props__.__dict__["scheduler_hints"] = scheduler_hints
        __props__.__dict__["spec_code"] = spec_code
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return AppImageServer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="attachApps")
    def attach_apps(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of the warehouse apps.
        """
        return pulumi.get(self, "attach_apps")

    @_builtins.property
    @pulumi.getter(name="authorizeAccounts")
    def authorize_accounts(self) -> pulumi.Output[Sequence['outputs.AppImageServerAuthorizeAccount']]:
        """
        Specifies the list of the management accounts for creating the image.
        Changing this creates a new resource.
        The authorize_accounts structure is documented below.
        """
        return pulumi.get(self, "authorize_accounts")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the availability zone of the image server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the image server, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the image server.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the enterprise project to which the image
        server belong. Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the additional session type.
        Changing this creates a new resource.
        This parameter is available only when the `is_vdi` parameter is set to **false**.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the basic image ID of the image server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageSourceProductId")
    def image_source_product_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the basic image product ID of the image server.
        Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_source_product_id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the basic image type of the image server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="isDeleteAssociatedResources")
    def is_delete_associated_resources(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete resources associated with this image server
        after deleting it, defaults to **false**.

        > If this parameter is set to **true**, deleting the resource will also delete the associated server group, server
        and application group resources, but the image product related resources will be retained.

        <a name="app_image_server_authorize_accounts"></a>
        The `authorize_accounts` block supports:
        """
        return pulumi.get(self, "is_delete_associated_resources")

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the session mode of the image server.
        Changing this creates a new resource.
        + **false**: Multi-session mode (default value).
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        """
        return pulumi.get(self, "is_vdi")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the image server.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed and cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        Changing this creates a new resource.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Output['outputs.AppImageServerRootVolume']:
        """
        Specifies the system disk configuration of the image server.
        Changing this creates a new resource.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> pulumi.Output[Optional['outputs.AppImageServerRoutePolicy']]:
        """
        Specifies the session scheduling policy of the server associated with
        the image server. Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> pulumi.Output[Optional['outputs.AppImageServerSchedulerHints']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the specification code of the basic image to which the image
        server belongs. Changing this creates a new resource.
        This parameter is required when the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the image server.
        Supports up to `20` tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID to which the image server belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

