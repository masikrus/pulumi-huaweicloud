# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyGroupsResult',
    'AwaitableGetPolicyGroupsResult',
    'get_policy_groups',
    'get_policy_groups_output',
]

@pulumi.output_type
class GetPolicyGroupsResult:
    """
    A collection of values returned by getPolicyGroups.
    """
    def __init__(__self__, description=None, id=None, policy_group_id=None, policy_group_name=None, policy_groups=None, priority=None, region=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_group_id and not isinstance(policy_group_id, str):
            raise TypeError("Expected argument 'policy_group_id' to be a str")
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        if policy_group_name and not isinstance(policy_group_name, str):
            raise TypeError("Expected argument 'policy_group_name' to be a str")
        pulumi.set(__self__, "policy_group_name", policy_group_name)
        if policy_groups and not isinstance(policy_groups, list):
            raise TypeError("Expected argument 'policy_groups' to be a list")
        pulumi.set(__self__, "policy_groups", policy_groups)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the policy group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the policy group.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="policyGroupName")
    def policy_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the policy group.
        """
        return pulumi.get(self, "policy_group_name")

    @_builtins.property
    @pulumi.getter(name="policyGroups")
    def policy_groups(self) -> Sequence['outputs.GetPolicyGroupsPolicyGroupResult']:
        """
        The list of policy groups that match the filter parameters.  
        The policy_groups structure is documented below.
        """
        return pulumi.get(self, "policy_groups")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        The priority of the policy group.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPolicyGroupsResult(GetPolicyGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyGroupsResult(
            description=self.description,
            id=self.id,
            policy_group_id=self.policy_group_id,
            policy_group_name=self.policy_group_name,
            policy_groups=self.policy_groups,
            priority=self.priority,
            region=self.region)


def get_policy_groups(description: Optional[_builtins.str] = None,
                      policy_group_id: Optional[_builtins.str] = None,
                      policy_group_name: Optional[_builtins.str] = None,
                      priority: Optional[_builtins.int] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyGroupsResult:
    """
    Use this data source to get the list of Workspace policy groups within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_policy_groups()
    ```

    ### Filter policy groups by priority

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_priority = config.require_object("policyPriority")
    test = huaweicloud.Workspace.get_policy_groups(priority=policy_priority)
    ```

    ### Filter policy groups by name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_group_name = config.require_object("policyGroupName")
    test = huaweicloud.Workspace.get_policy_groups(policy_group_name=policy_group_name)
    ```


    :param _builtins.str description: Specifies the description of the policy group.  
           The description support fuzzy match.
    :param _builtins.str policy_group_id: Specifies the ID of the policy group.
    :param _builtins.str policy_group_name: Specifies the name of the policy group.  
           The name support fuzzy match.
    :param _builtins.int priority: Specifies the priority of the policy group.  
           Defaults to **0**.
    :param _builtins.str region: Specifies the region in which to query the data source.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['policyGroupId'] = policy_group_id
    __args__['policyGroupName'] = policy_group_name
    __args__['priority'] = priority
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getPolicyGroups:getPolicyGroups', __args__, opts=opts, typ=GetPolicyGroupsResult).value

    return AwaitableGetPolicyGroupsResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        policy_group_id=pulumi.get(__ret__, 'policy_group_id'),
        policy_group_name=pulumi.get(__ret__, 'policy_group_name'),
        policy_groups=pulumi.get(__ret__, 'policy_groups'),
        priority=pulumi.get(__ret__, 'priority'),
        region=pulumi.get(__ret__, 'region'))
def get_policy_groups_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             policy_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             policy_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             priority: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyGroupsResult]:
    """
    Use this data source to get the list of Workspace policy groups within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_policy_groups()
    ```

    ### Filter policy groups by priority

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_priority = config.require_object("policyPriority")
    test = huaweicloud.Workspace.get_policy_groups(priority=policy_priority)
    ```

    ### Filter policy groups by name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_group_name = config.require_object("policyGroupName")
    test = huaweicloud.Workspace.get_policy_groups(policy_group_name=policy_group_name)
    ```


    :param _builtins.str description: Specifies the description of the policy group.  
           The description support fuzzy match.
    :param _builtins.str policy_group_id: Specifies the ID of the policy group.
    :param _builtins.str policy_group_name: Specifies the name of the policy group.  
           The name support fuzzy match.
    :param _builtins.int priority: Specifies the priority of the policy group.  
           Defaults to **0**.
    :param _builtins.str region: Specifies the region in which to query the data source.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['policyGroupId'] = policy_group_id
    __args__['policyGroupName'] = policy_group_name
    __args__['priority'] = priority
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getPolicyGroups:getPolicyGroups', __args__, opts=opts, typ=GetPolicyGroupsResult)
    return __ret__.apply(lambda __response__: GetPolicyGroupsResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        policy_group_id=pulumi.get(__response__, 'policy_group_id'),
        policy_group_name=pulumi.get(__response__, 'policy_group_name'),
        policy_groups=pulumi.get(__response__, 'policy_groups'),
        priority=pulumi.get(__response__, 'priority'),
        region=pulumi.get(__response__, 'region')))
