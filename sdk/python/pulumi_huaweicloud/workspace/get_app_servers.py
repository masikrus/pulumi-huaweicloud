# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppServersResult',
    'AwaitableGetAppServersResult',
    'get_app_servers',
    'get_app_servers_output',
]

@pulumi.output_type
class GetAppServersResult:
    """
    A collection of values returned by getAppServers.
    """
    def __init__(__self__, id=None, ip_addr=None, machine_name=None, maintain_status=None, region=None, scaling_auto_create=None, server_group_id=None, server_id=None, server_name=None, servers=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addr and not isinstance(ip_addr, str):
            raise TypeError("Expected argument 'ip_addr' to be a str")
        pulumi.set(__self__, "ip_addr", ip_addr)
        if machine_name and not isinstance(machine_name, str):
            raise TypeError("Expected argument 'machine_name' to be a str")
        pulumi.set(__self__, "machine_name", machine_name)
        if maintain_status and not isinstance(maintain_status, bool):
            raise TypeError("Expected argument 'maintain_status' to be a bool")
        pulumi.set(__self__, "maintain_status", maintain_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_auto_create and not isinstance(scaling_auto_create, bool):
            raise TypeError("Expected argument 'scaling_auto_create' to be a bool")
        pulumi.set(__self__, "scaling_auto_create", scaling_auto_create)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if server_name and not isinstance(server_name, str):
            raise TypeError("Expected argument 'server_name' to be a str")
        pulumi.set(__self__, "server_name", server_name)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddr")
    def ip_addr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_addr")

    @_builtins.property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> Optional[_builtins.str]:
        """
        The machine name of the server group that matched filter parameters.
        """
        return pulumi.get(self, "machine_name")

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> Optional[_builtins.bool]:
        """
        The maintenance status of the server group that matched filter parameters.
        """
        return pulumi.get(self, "maintain_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingAutoCreate")
    def scaling_auto_create(self) -> Optional[_builtins.bool]:
        """
        Whether the server is created by auto-scaling.
        """
        return pulumi.get(self, "scaling_auto_create")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the server group that matched filter parameters.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetAppServersServerResult']:
        """
        The list of servers that matched filter parameters.  
        The servers structure is documented below.
        """
        return pulumi.get(self, "servers")


class AwaitableGetAppServersResult(GetAppServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppServersResult(
            id=self.id,
            ip_addr=self.ip_addr,
            machine_name=self.machine_name,
            maintain_status=self.maintain_status,
            region=self.region,
            scaling_auto_create=self.scaling_auto_create,
            server_group_id=self.server_group_id,
            server_id=self.server_id,
            server_name=self.server_name,
            servers=self.servers)


def get_app_servers(ip_addr: Optional[_builtins.str] = None,
                    machine_name: Optional[_builtins.str] = None,
                    maintain_status: Optional[_builtins.bool] = None,
                    region: Optional[_builtins.str] = None,
                    scaling_auto_create: Optional[_builtins.bool] = None,
                    server_group_id: Optional[_builtins.str] = None,
                    server_id: Optional[_builtins.str] = None,
                    server_name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppServersResult:
    """
    Use this data source to get server list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_id = config.require_object("serverGroupId")
    test = huaweicloud.Workspace.get_app_servers(server_group_id=server_group_id)
    ```


    :param _builtins.str ip_addr: Specifies the IP address of the server.
    :param _builtins.str machine_name: Specifies the machine name of the server.
    :param _builtins.bool maintain_status: Specifies whether the server is in maintenance status.
           + **true** : Instances in maintenance state.
           + **false**: Instances in non-maintenance state.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.bool scaling_auto_create: Specifies whether the server is created by auto-scaling.
           + **true** : Created through elastic scaling.
           + **false**: Not created through elastic scaling.
    :param _builtins.str server_group_id: Specifies the ID of the server group.
    :param _builtins.str server_id: Specifies the ID of the server.
    :param _builtins.str server_name: Specifies the name of the server.
    """
    __args__ = dict()
    __args__['ipAddr'] = ip_addr
    __args__['machineName'] = machine_name
    __args__['maintainStatus'] = maintain_status
    __args__['region'] = region
    __args__['scalingAutoCreate'] = scaling_auto_create
    __args__['serverGroupId'] = server_group_id
    __args__['serverId'] = server_id
    __args__['serverName'] = server_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppServers:getAppServers', __args__, opts=opts, typ=GetAppServersResult).value

    return AwaitableGetAppServersResult(
        id=pulumi.get(__ret__, 'id'),
        ip_addr=pulumi.get(__ret__, 'ip_addr'),
        machine_name=pulumi.get(__ret__, 'machine_name'),
        maintain_status=pulumi.get(__ret__, 'maintain_status'),
        region=pulumi.get(__ret__, 'region'),
        scaling_auto_create=pulumi.get(__ret__, 'scaling_auto_create'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'),
        server_id=pulumi.get(__ret__, 'server_id'),
        server_name=pulumi.get(__ret__, 'server_name'),
        servers=pulumi.get(__ret__, 'servers'))
def get_app_servers_output(ip_addr: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           machine_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           maintain_status: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_auto_create: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           server_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           server_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           server_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppServersResult]:
    """
    Use this data source to get server list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_id = config.require_object("serverGroupId")
    test = huaweicloud.Workspace.get_app_servers(server_group_id=server_group_id)
    ```


    :param _builtins.str ip_addr: Specifies the IP address of the server.
    :param _builtins.str machine_name: Specifies the machine name of the server.
    :param _builtins.bool maintain_status: Specifies whether the server is in maintenance status.
           + **true** : Instances in maintenance state.
           + **false**: Instances in non-maintenance state.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.bool scaling_auto_create: Specifies whether the server is created by auto-scaling.
           + **true** : Created through elastic scaling.
           + **false**: Not created through elastic scaling.
    :param _builtins.str server_group_id: Specifies the ID of the server group.
    :param _builtins.str server_id: Specifies the ID of the server.
    :param _builtins.str server_name: Specifies the name of the server.
    """
    __args__ = dict()
    __args__['ipAddr'] = ip_addr
    __args__['machineName'] = machine_name
    __args__['maintainStatus'] = maintain_status
    __args__['region'] = region
    __args__['scalingAutoCreate'] = scaling_auto_create
    __args__['serverGroupId'] = server_group_id
    __args__['serverId'] = server_id
    __args__['serverName'] = server_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppServers:getAppServers', __args__, opts=opts, typ=GetAppServersResult)
    return __ret__.apply(lambda __response__: GetAppServersResult(
        id=pulumi.get(__response__, 'id'),
        ip_addr=pulumi.get(__response__, 'ip_addr'),
        machine_name=pulumi.get(__response__, 'machine_name'),
        maintain_status=pulumi.get(__response__, 'maintain_status'),
        region=pulumi.get(__response__, 'region'),
        scaling_auto_create=pulumi.get(__response__, 'scaling_auto_create'),
        server_group_id=pulumi.get(__response__, 'server_group_id'),
        server_id=pulumi.get(__response__, 'server_id'),
        server_name=pulumi.get(__response__, 'server_name'),
        servers=pulumi.get(__response__, 'servers')))
