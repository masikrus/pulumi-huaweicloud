# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDesktopRemoteConsoleResult',
    'AwaitableGetDesktopRemoteConsoleResult',
    'get_desktop_remote_console',
    'get_desktop_remote_console_output',
]

@pulumi.output_type
class GetDesktopRemoteConsoleResult:
    """
    A collection of values returned by getDesktopRemoteConsole.
    """
    def __init__(__self__, desktop_id=None, id=None, region=None, remote_consoles=None):
        if desktop_id and not isinstance(desktop_id, str):
            raise TypeError("Expected argument 'desktop_id' to be a str")
        pulumi.set(__self__, "desktop_id", desktop_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remote_consoles and not isinstance(remote_consoles, list):
            raise TypeError("Expected argument 'remote_consoles' to be a list")
        pulumi.set(__self__, "remote_consoles", remote_consoles)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> _builtins.str:
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remoteConsoles")
    def remote_consoles(self) -> Sequence['outputs.GetDesktopRemoteConsoleRemoteConsoleResult']:
        """
        The remote console information.  
        The remote_console structure is documented below.
        """
        return pulumi.get(self, "remote_consoles")


class AwaitableGetDesktopRemoteConsoleResult(GetDesktopRemoteConsoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDesktopRemoteConsoleResult(
            desktop_id=self.desktop_id,
            id=self.id,
            region=self.region,
            remote_consoles=self.remote_consoles)


def get_desktop_remote_console(desktop_id: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDesktopRemoteConsoleResult:
    """
    Use this data source to get the remote console information of a Workspace desktop within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_id = config.require_object("desktopId")
    test = huaweicloud.Workspace.get_desktop_remote_console(desktop_id=desktop_id)
    ```


    :param _builtins.str desktop_id: Specifies the ID of the desktop.
    :param _builtins.str region: Specifies the region where the desktop is located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['desktopId'] = desktop_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getDesktopRemoteConsole:getDesktopRemoteConsole', __args__, opts=opts, typ=GetDesktopRemoteConsoleResult).value

    return AwaitableGetDesktopRemoteConsoleResult(
        desktop_id=pulumi.get(__ret__, 'desktop_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        remote_consoles=pulumi.get(__ret__, 'remote_consoles'))
def get_desktop_remote_console_output(desktop_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDesktopRemoteConsoleResult]:
    """
    Use this data source to get the remote console information of a Workspace desktop within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_id = config.require_object("desktopId")
    test = huaweicloud.Workspace.get_desktop_remote_console(desktop_id=desktop_id)
    ```


    :param _builtins.str desktop_id: Specifies the ID of the desktop.
    :param _builtins.str region: Specifies the region where the desktop is located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['desktopId'] = desktop_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getDesktopRemoteConsole:getDesktopRemoteConsole', __args__, opts=opts, typ=GetDesktopRemoteConsoleResult)
    return __ret__.apply(lambda __response__: GetDesktopRemoteConsoleResult(
        desktop_id=pulumi.get(__response__, 'desktop_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        remote_consoles=pulumi.get(__response__, 'remote_consoles')))
