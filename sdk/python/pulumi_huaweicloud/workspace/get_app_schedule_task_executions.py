# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppScheduleTaskExecutionsResult',
    'AwaitableGetAppScheduleTaskExecutionsResult',
    'get_app_schedule_task_executions',
    'get_app_schedule_task_executions_output',
]

@pulumi.output_type
class GetAppScheduleTaskExecutionsResult:
    """
    A collection of values returned by getAppScheduleTaskExecutions.
    """
    def __init__(__self__, executions=None, id=None, region=None, task_id=None):
        if executions and not isinstance(executions, list):
            raise TypeError("Expected argument 'executions' to be a list")
        pulumi.set(__self__, "executions", executions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def executions(self) -> Sequence['outputs.GetAppScheduleTaskExecutionsExecutionResult']:
        """
        The list of schedule task executions.
        The executions structure is documented below.
        """
        return pulumi.get(self, "executions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        The ID of the schedule task.
        """
        return pulumi.get(self, "task_id")


class AwaitableGetAppScheduleTaskExecutionsResult(GetAppScheduleTaskExecutionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppScheduleTaskExecutionsResult(
            executions=self.executions,
            id=self.id,
            region=self.region,
            task_id=self.task_id)


def get_app_schedule_task_executions(region: Optional[_builtins.str] = None,
                                     task_id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppScheduleTaskExecutionsResult:
    """
    Use this data source to get execution list under specified schedule task within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Workspace.get_app_schedule_task_executions(task_id=task_id)
    ```


    :param _builtins.str region: Specifies the region where the schedule task is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Specifies the ID of the schedule task.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppScheduleTaskExecutions:getAppScheduleTaskExecutions', __args__, opts=opts, typ=GetAppScheduleTaskExecutionsResult).value

    return AwaitableGetAppScheduleTaskExecutionsResult(
        executions=pulumi.get(__ret__, 'executions'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_app_schedule_task_executions_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            task_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppScheduleTaskExecutionsResult]:
    """
    Use this data source to get execution list under specified schedule task within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Workspace.get_app_schedule_task_executions(task_id=task_id)
    ```


    :param _builtins.str region: Specifies the region where the schedule task is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Specifies the ID of the schedule task.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppScheduleTaskExecutions:getAppScheduleTaskExecutions', __args__, opts=opts, typ=GetAppScheduleTaskExecutionsResult)
    return __ret__.apply(lambda __response__: GetAppScheduleTaskExecutionsResult(
        executions=pulumi.get(__response__, 'executions'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        task_id=pulumi.get(__response__, 'task_id')))
