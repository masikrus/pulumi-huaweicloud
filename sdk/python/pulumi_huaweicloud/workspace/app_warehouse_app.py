# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppWarehouseAppArgs', 'AppWarehouseApp']

@pulumi.input_type
class AppWarehouseAppArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[_builtins.str],
                 file_store_path: pulumi.Input[_builtins.str],
                 os_type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 version_name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppWarehouseApp resource.
        :param pulumi.Input[_builtins.str] category: The category of the application.
        :param pulumi.Input[_builtins.str] file_store_path: The storage path of the OBS bucket where the application is located.
        :param pulumi.Input[_builtins.str] os_type: The operating system type of the application.
        :param pulumi.Input[_builtins.str] version: The version of the application.
        :param pulumi.Input[_builtins.str] version_name: The version name of the application.
        :param pulumi.Input[_builtins.str] description: The description of the application.
        :param pulumi.Input[_builtins.str] icon: The icon of the application.
        :param pulumi.Input[_builtins.str] name: The name of the application.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "file_store_path", file_store_path)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_name", version_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        The category of the application.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="fileStorePath")
    def file_store_path(self) -> pulumi.Input[_builtins.str]:
        """
        The storage path of the OBS bucket where the application is located.
        """
        return pulumi.get(self, "file_store_path")

    @file_store_path.setter
    def file_store_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_store_path", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        The operating system type of the application.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        The version of the application.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> pulumi.Input[_builtins.str]:
        """
        The version name of the application.
        """
        return pulumi.get(self, "version_name")

    @version_name.setter
    def version_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The icon of the application.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppWarehouseAppState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_store_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppWarehouseApp resources.
        :param pulumi.Input[_builtins.str] category: The category of the application.
        :param pulumi.Input[_builtins.str] description: The description of the application.
        :param pulumi.Input[_builtins.str] file_store_path: The storage path of the OBS bucket where the application is located.
        :param pulumi.Input[_builtins.str] icon: The icon of the application.
        :param pulumi.Input[_builtins.str] name: The name of the application.
        :param pulumi.Input[_builtins.str] os_type: The operating system type of the application.
        :param pulumi.Input[_builtins.str] record_id: The record ID of the application.
        :param pulumi.Input[_builtins.str] version: The version of the application.
        :param pulumi.Input[_builtins.str] version_name: The version name of the application.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_store_path is not None:
            pulumi.set(__self__, "file_store_path", file_store_path)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The category of the application.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="fileStorePath")
    def file_store_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The storage path of the OBS bucket where the application is located.
        """
        return pulumi.get(self, "file_store_path")

    @file_store_path.setter
    def file_store_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_store_path", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The icon of the application.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system type of the application.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The record ID of the application.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the application.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version name of the application.
        """
        return pulumi.get(self, "version_name")

    @version_name.setter
    def version_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_name", value)


@pulumi.type_token("huaweicloud:Workspace/appWarehouseApp:AppWarehouseApp")
class AppWarehouseApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_store_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppWarehouseApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] category: The category of the application.
        :param pulumi.Input[_builtins.str] description: The description of the application.
        :param pulumi.Input[_builtins.str] file_store_path: The storage path of the OBS bucket where the application is located.
        :param pulumi.Input[_builtins.str] icon: The icon of the application.
        :param pulumi.Input[_builtins.str] name: The name of the application.
        :param pulumi.Input[_builtins.str] os_type: The operating system type of the application.
        :param pulumi.Input[_builtins.str] version: The version of the application.
        :param pulumi.Input[_builtins.str] version_name: The version name of the application.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppWarehouseAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppWarehouseApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppWarehouseAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppWarehouseAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_store_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppWarehouseAppArgs.__new__(AppWarehouseAppArgs)

            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["description"] = description
            if file_store_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_store_path'")
            __props__.__dict__["file_store_path"] = file_store_path
            __props__.__dict__["icon"] = icon
            __props__.__dict__["name"] = name
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["region"] = region
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if version_name is None and not opts.urn:
                raise TypeError("Missing required property 'version_name'")
            __props__.__dict__["version_name"] = version_name
            __props__.__dict__["record_id"] = None
        super(AppWarehouseApp, __self__).__init__(
            'huaweicloud:Workspace/appWarehouseApp:AppWarehouseApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            file_store_path: Optional[pulumi.Input[_builtins.str]] = None,
            icon: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            record_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppWarehouseApp':
        """
        Get an existing AppWarehouseApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] category: The category of the application.
        :param pulumi.Input[_builtins.str] description: The description of the application.
        :param pulumi.Input[_builtins.str] file_store_path: The storage path of the OBS bucket where the application is located.
        :param pulumi.Input[_builtins.str] icon: The icon of the application.
        :param pulumi.Input[_builtins.str] name: The name of the application.
        :param pulumi.Input[_builtins.str] os_type: The operating system type of the application.
        :param pulumi.Input[_builtins.str] record_id: The record ID of the application.
        :param pulumi.Input[_builtins.str] version: The version of the application.
        :param pulumi.Input[_builtins.str] version_name: The version name of the application.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppWarehouseAppState.__new__(_AppWarehouseAppState)

        __props__.__dict__["category"] = category
        __props__.__dict__["description"] = description
        __props__.__dict__["file_store_path"] = file_store_path
        __props__.__dict__["icon"] = icon
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["record_id"] = record_id
        __props__.__dict__["region"] = region
        __props__.__dict__["version"] = version
        __props__.__dict__["version_name"] = version_name
        return AppWarehouseApp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[_builtins.str]:
        """
        The category of the application.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileStorePath")
    def file_store_path(self) -> pulumi.Output[_builtins.str]:
        """
        The storage path of the OBS bucket where the application is located.
        """
        return pulumi.get(self, "file_store_path")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The icon of the application.
        """
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        The operating system type of the application.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Output[_builtins.str]:
        """
        The record ID of the application.
        """
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the application.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> pulumi.Output[_builtins.str]:
        """
        The version name of the application.
        """
        return pulumi.get(self, "version_name")

