# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppScheduleTasksResult',
    'AwaitableGetAppScheduleTasksResult',
    'get_app_schedule_tasks',
    'get_app_schedule_tasks_output',
]

@pulumi.output_type
class GetAppScheduleTasksResult:
    """
    A collection of values returned by getAppScheduleTasks.
    """
    def __init__(__self__, id=None, region=None, task_name=None, task_type=None, tasks=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[_builtins.str]:
        """
        The name of the schedule task.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[_builtins.str]:
        """
        The type of the schedule task.
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetAppScheduleTasksTaskResult']:
        """
        All schedule tasks that match the filter parameters.  
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetAppScheduleTasksResult(GetAppScheduleTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppScheduleTasksResult(
            id=self.id,
            region=self.region,
            task_name=self.task_name,
            task_type=self.task_type,
            tasks=self.tasks)


def get_app_schedule_tasks(region: Optional[_builtins.str] = None,
                           task_name: Optional[_builtins.str] = None,
                           task_type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppScheduleTasksResult:
    """
    Use this data source to get the schedule task list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ### Query all schedule tasks

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_schedule_tasks()
    ```

    ### Query schedule task by specified name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_name = config.require_object("taskName")
    test = huaweicloud.Workspace.get_app_schedule_tasks(task_name=task_name)
    ```


    :param _builtins.str region: Specifies the region where the schedule tasks are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str task_name: Specifies the name of the schedule task.
    :param _builtins.str task_type: Specifies the type of the schedule task.  
           The valid values are as follows:
           + **RESTART_SERVER**
           + **START_SERVER**
           + **STOP_SERVER**
           + **REINSTALL_OS**
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['taskName'] = task_name
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppScheduleTasks:getAppScheduleTasks', __args__, opts=opts, typ=GetAppScheduleTasksResult).value

    return AwaitableGetAppScheduleTasksResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        task_name=pulumi.get(__ret__, 'task_name'),
        task_type=pulumi.get(__ret__, 'task_type'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_app_schedule_tasks_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  task_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  task_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppScheduleTasksResult]:
    """
    Use this data source to get the schedule task list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ### Query all schedule tasks

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_schedule_tasks()
    ```

    ### Query schedule task by specified name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_name = config.require_object("taskName")
    test = huaweicloud.Workspace.get_app_schedule_tasks(task_name=task_name)
    ```


    :param _builtins.str region: Specifies the region where the schedule tasks are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str task_name: Specifies the name of the schedule task.
    :param _builtins.str task_type: Specifies the type of the schedule task.  
           The valid values are as follows:
           + **RESTART_SERVER**
           + **START_SERVER**
           + **STOP_SERVER**
           + **REINSTALL_OS**
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['taskName'] = task_name
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppScheduleTasks:getAppScheduleTasks', __args__, opts=opts, typ=GetAppScheduleTasksResult)
    return __ret__.apply(lambda __response__: GetAppScheduleTasksResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        task_name=pulumi.get(__response__, 'task_name'),
        task_type=pulumi.get(__response__, 'task_type'),
        tasks=pulumi.get(__response__, 'tasks')))
