# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppScheduleTaskArgs', 'AppScheduleTask']

@pulumi.input_type
class AppScheduleTaskArgs:
    def __init__(__self__, *,
                 scheduled_time: pulumi.Input[_builtins.str],
                 scheduled_type: pulumi.Input[_builtins.str],
                 target_infos: pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]],
                 task_name: pulumi.Input[_builtins.str],
                 task_type: pulumi.Input[_builtins.str],
                 date_list: Optional[pulumi.Input[_builtins.str]] = None,
                 day_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 month_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_task_policy: Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']] = None,
                 scheduled_date: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 week_list: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppScheduleTask resource.
        :param pulumi.Input[_builtins.str] scheduled_time: Specifies the execution time of the schedule task.  
               The format is `HH:mm:ss`.
        :param pulumi.Input[_builtins.str] scheduled_type: Specifies the execution cycle of the schedule task.  
               The valid values are as follows:
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]] target_infos: Specifies the target object list of the schedule task.  
               The target_infos structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the schedule task.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] task_type: Specifies the type of the schedule task.  
               The valid values are as follows:
               + **RESTART_SERVER**: Restart servers.
               + **START_SERVER**: Start servers.
               + **STOP_SERVER**: Stop servers.
               + **REINSTALL_OS**: Reinstall operating system.
        :param pulumi.Input[_builtins.str] date_list: Specifies the days of month of the schedule task.  
               The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
               `L` can only be used alone, and cannot be used together with other values.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.int] day_interval: Specifies the execution interval of the scheduled task, in day.
               The valid value ranges from `1` to `31`.
               This parameter is **required** when `scheduled_type` is set to **DAY**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the schedule task.
        :param pulumi.Input[_builtins.str] expire_time: Specifies the expiration time of the schedule task, in UTC format.
        :param pulumi.Input[_builtins.bool] is_enable: Specifies whether to enable the schedule task.
               Defaults to **true**.
               
               <a name="app_schedule_task_target_infos"></a>
               The `target_infos` block supports:
        :param pulumi.Input[_builtins.str] month_list: Specifies the months of the schedule task.  
               The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the schedule task is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs'] schedule_task_policy: Specifies the policy of the schedule task.
               The schedule_task_policy structure is documented below.
        :param pulumi.Input[_builtins.str] scheduled_date: Specifies the fixed date of the schedule task.  
               The format is `YYYY-MM-dd`.
               This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone of the schedule task.  
               Defaults to **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] week_list: Specifies the days of week of the schedule task.  
               The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
               `1` means Sunday, `2` means Monday, and so on.
               This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        pulumi.set(__self__, "scheduled_type", scheduled_type)
        pulumi.set(__self__, "target_infos", target_infos)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_type", task_type)
        if date_list is not None:
            pulumi.set(__self__, "date_list", date_list)
        if day_interval is not None:
            pulumi.set(__self__, "day_interval", day_interval)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if is_enable is not None:
            pulumi.set(__self__, "is_enable", is_enable)
        if month_list is not None:
            pulumi.set(__self__, "month_list", month_list)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule_task_policy is not None:
            pulumi.set(__self__, "schedule_task_policy", schedule_task_policy)
        if scheduled_date is not None:
            pulumi.set(__self__, "scheduled_date", scheduled_date)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if week_list is not None:
            pulumi.set(__self__, "week_list", week_list)

    @_builtins.property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the execution time of the schedule task.  
        The format is `HH:mm:ss`.
        """
        return pulumi.get(self, "scheduled_time")

    @scheduled_time.setter
    def scheduled_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheduled_time", value)

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the execution cycle of the schedule task.  
        The valid values are as follows:
        + **FIXED_TIME**
        + **DAY**
        + **WEEK**
        + **MONTH**
        """
        return pulumi.get(self, "scheduled_type")

    @scheduled_type.setter
    def scheduled_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheduled_type", value)

    @_builtins.property
    @pulumi.getter(name="targetInfos")
    def target_infos(self) -> pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]]:
        """
        Specifies the target object list of the schedule task.  
        The target_infos structure is documented below.
        """
        return pulumi.get(self, "target_infos")

    @target_infos.setter
    def target_infos(self, value: pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]]):
        pulumi.set(self, "target_infos", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the schedule task.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the schedule task.  
        The valid values are as follows:
        + **RESTART_SERVER**: Restart servers.
        + **START_SERVER**: Start servers.
        + **STOP_SERVER**: Stop servers.
        + **REINSTALL_OS**: Reinstall operating system.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_type", value)

    @_builtins.property
    @pulumi.getter(name="dateList")
    def date_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the days of month of the schedule task.  
        The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
        `L` can only be used alone, and cannot be used together with other values.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "date_list")

    @date_list.setter
    def date_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_list", value)

    @_builtins.property
    @pulumi.getter(name="dayInterval")
    def day_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the execution interval of the scheduled task, in day.
        The valid value ranges from `1` to `31`.
        This parameter is **required** when `scheduled_type` is set to **DAY**.
        """
        return pulumi.get(self, "day_interval")

    @day_interval.setter
    def day_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "day_interval", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the schedule task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expiration time of the schedule task, in UTC format.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter(name="isEnable")
    def is_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the schedule task.
        Defaults to **true**.

        <a name="app_schedule_task_target_infos"></a>
        The `target_infos` block supports:
        """
        return pulumi.get(self, "is_enable")

    @is_enable.setter
    def is_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_enable", value)

    @_builtins.property
    @pulumi.getter(name="monthList")
    def month_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the months of the schedule task.  
        The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "month_list")

    @month_list.setter
    def month_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "month_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the schedule task is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scheduleTaskPolicy")
    def schedule_task_policy(self) -> Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']]:
        """
        Specifies the policy of the schedule task.
        The schedule_task_policy structure is documented below.
        """
        return pulumi.get(self, "schedule_task_policy")

    @schedule_task_policy.setter
    def schedule_task_policy(self, value: Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']]):
        pulumi.set(self, "schedule_task_policy", value)

    @_builtins.property
    @pulumi.getter(name="scheduledDate")
    def scheduled_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the fixed date of the schedule task.  
        The format is `YYYY-MM-dd`.
        This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        """
        return pulumi.get(self, "scheduled_date")

    @scheduled_date.setter
    def scheduled_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_date", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone of the schedule task.  
        Defaults to **Asia/Shanghai**.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter(name="weekList")
    def week_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the days of week of the schedule task.  
        The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
        `1` means Sunday, `2` means Monday, and so on.
        This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        return pulumi.get(self, "week_list")

    @week_list.setter
    def week_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "week_list", value)


@pulumi.input_type
class _AppScheduleTaskState:
    def __init__(__self__, *,
                 date_list: Optional[pulumi.Input[_builtins.str]] = None,
                 day_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 month_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_task_policy: Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']] = None,
                 scheduled_date: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_time: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_infos: Optional[pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 week_list: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppScheduleTask resources.
        :param pulumi.Input[_builtins.str] date_list: Specifies the days of month of the schedule task.  
               The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
               `L` can only be used alone, and cannot be used together with other values.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.int] day_interval: Specifies the execution interval of the scheduled task, in day.
               The valid value ranges from `1` to `31`.
               This parameter is **required** when `scheduled_type` is set to **DAY**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the schedule task.
        :param pulumi.Input[_builtins.str] expire_time: Specifies the expiration time of the schedule task, in UTC format.
        :param pulumi.Input[_builtins.bool] is_enable: Specifies whether to enable the schedule task.
               Defaults to **true**.
               
               <a name="app_schedule_task_target_infos"></a>
               The `target_infos` block supports:
        :param pulumi.Input[_builtins.str] month_list: Specifies the months of the schedule task.  
               The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the schedule task is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs'] schedule_task_policy: Specifies the policy of the schedule task.
               The schedule_task_policy structure is documented below.
        :param pulumi.Input[_builtins.str] scheduled_date: Specifies the fixed date of the schedule task.  
               The format is `YYYY-MM-dd`.
               This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        :param pulumi.Input[_builtins.str] scheduled_time: Specifies the execution time of the schedule task.  
               The format is `HH:mm:ss`.
        :param pulumi.Input[_builtins.str] scheduled_type: Specifies the execution cycle of the schedule task.  
               The valid values are as follows:
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]] target_infos: Specifies the target object list of the schedule task.  
               The target_infos structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the schedule task.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] task_type: Specifies the type of the schedule task.  
               The valid values are as follows:
               + **RESTART_SERVER**: Restart servers.
               + **START_SERVER**: Start servers.
               + **STOP_SERVER**: Stop servers.
               + **REINSTALL_OS**: Reinstall operating system.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone of the schedule task.  
               Defaults to **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] week_list: Specifies the days of week of the schedule task.  
               The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
               `1` means Sunday, `2` means Monday, and so on.
               This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        if date_list is not None:
            pulumi.set(__self__, "date_list", date_list)
        if day_interval is not None:
            pulumi.set(__self__, "day_interval", day_interval)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if is_enable is not None:
            pulumi.set(__self__, "is_enable", is_enable)
        if month_list is not None:
            pulumi.set(__self__, "month_list", month_list)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule_task_policy is not None:
            pulumi.set(__self__, "schedule_task_policy", schedule_task_policy)
        if scheduled_date is not None:
            pulumi.set(__self__, "scheduled_date", scheduled_date)
        if scheduled_time is not None:
            pulumi.set(__self__, "scheduled_time", scheduled_time)
        if scheduled_type is not None:
            pulumi.set(__self__, "scheduled_type", scheduled_type)
        if target_infos is not None:
            pulumi.set(__self__, "target_infos", target_infos)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if week_list is not None:
            pulumi.set(__self__, "week_list", week_list)

    @_builtins.property
    @pulumi.getter(name="dateList")
    def date_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the days of month of the schedule task.  
        The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
        `L` can only be used alone, and cannot be used together with other values.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "date_list")

    @date_list.setter
    def date_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_list", value)

    @_builtins.property
    @pulumi.getter(name="dayInterval")
    def day_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the execution interval of the scheduled task, in day.
        The valid value ranges from `1` to `31`.
        This parameter is **required** when `scheduled_type` is set to **DAY**.
        """
        return pulumi.get(self, "day_interval")

    @day_interval.setter
    def day_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "day_interval", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the schedule task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expiration time of the schedule task, in UTC format.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter(name="isEnable")
    def is_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the schedule task.
        Defaults to **true**.

        <a name="app_schedule_task_target_infos"></a>
        The `target_infos` block supports:
        """
        return pulumi.get(self, "is_enable")

    @is_enable.setter
    def is_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_enable", value)

    @_builtins.property
    @pulumi.getter(name="monthList")
    def month_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the months of the schedule task.  
        The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "month_list")

    @month_list.setter
    def month_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "month_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the schedule task is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scheduleTaskPolicy")
    def schedule_task_policy(self) -> Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']]:
        """
        Specifies the policy of the schedule task.
        The schedule_task_policy structure is documented below.
        """
        return pulumi.get(self, "schedule_task_policy")

    @schedule_task_policy.setter
    def schedule_task_policy(self, value: Optional[pulumi.Input['AppScheduleTaskScheduleTaskPolicyArgs']]):
        pulumi.set(self, "schedule_task_policy", value)

    @_builtins.property
    @pulumi.getter(name="scheduledDate")
    def scheduled_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the fixed date of the schedule task.  
        The format is `YYYY-MM-dd`.
        This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        """
        return pulumi.get(self, "scheduled_date")

    @scheduled_date.setter
    def scheduled_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_date", value)

    @_builtins.property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution time of the schedule task.  
        The format is `HH:mm:ss`.
        """
        return pulumi.get(self, "scheduled_time")

    @scheduled_time.setter
    def scheduled_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_time", value)

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution cycle of the schedule task.  
        The valid values are as follows:
        + **FIXED_TIME**
        + **DAY**
        + **WEEK**
        + **MONTH**
        """
        return pulumi.get(self, "scheduled_type")

    @scheduled_type.setter
    def scheduled_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_type", value)

    @_builtins.property
    @pulumi.getter(name="targetInfos")
    def target_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]]]:
        """
        Specifies the target object list of the schedule task.  
        The target_infos structure is documented below.
        """
        return pulumi.get(self, "target_infos")

    @target_infos.setter
    def target_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppScheduleTaskTargetInfoArgs']]]]):
        pulumi.set(self, "target_infos", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the schedule task.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the schedule task.  
        The valid values are as follows:
        + **RESTART_SERVER**: Restart servers.
        + **START_SERVER**: Start servers.
        + **STOP_SERVER**: Stop servers.
        + **REINSTALL_OS**: Reinstall operating system.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_type", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone of the schedule task.  
        Defaults to **Asia/Shanghai**.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter(name="weekList")
    def week_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the days of week of the schedule task.  
        The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
        `1` means Sunday, `2` means Monday, and so on.
        This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        return pulumi.get(self, "week_list")

    @week_list.setter
    def week_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "week_list", value)


@pulumi.type_token("huaweicloud:Workspace/appScheduleTask:AppScheduleTask")
class AppScheduleTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date_list: Optional[pulumi.Input[_builtins.str]] = None,
                 day_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 month_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_task_policy: Optional[pulumi.Input[Union['AppScheduleTaskScheduleTaskPolicyArgs', 'AppScheduleTaskScheduleTaskPolicyArgsDict']]] = None,
                 scheduled_date: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_time: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppScheduleTaskTargetInfoArgs', 'AppScheduleTaskTargetInfoArgsDict']]]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 week_list: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a workspace APP schedule task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        schedule_task_name = config.require_object("scheduleTaskName")
        scheduled_time = config.require_object("scheduledTime")
        target_objects = config.require_object("targetObjects")
        test = huaweicloud.workspace.AppScheduleTask("test",
            target_infos=[{
                "target_type": entry["value"]["targetType"],
                "target_id": entry["value"]["targetId"],
            } for entry in [{"key": k, "value": v} for k, v in target_objects]],
            task_name=schedule_task_name,
            task_type="STOP_SERVER",
            scheduled_type="WEEK",
            week_list="1,3",
            scheduled_time=scheduled_time,
            time_zone="Asia/Shanghai")
        ```

        ## Import

        Schedule tasks can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appScheduleTask:AppScheduleTask test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] date_list: Specifies the days of month of the schedule task.  
               The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
               `L` can only be used alone, and cannot be used together with other values.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.int] day_interval: Specifies the execution interval of the scheduled task, in day.
               The valid value ranges from `1` to `31`.
               This parameter is **required** when `scheduled_type` is set to **DAY**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the schedule task.
        :param pulumi.Input[_builtins.str] expire_time: Specifies the expiration time of the schedule task, in UTC format.
        :param pulumi.Input[_builtins.bool] is_enable: Specifies whether to enable the schedule task.
               Defaults to **true**.
               
               <a name="app_schedule_task_target_infos"></a>
               The `target_infos` block supports:
        :param pulumi.Input[_builtins.str] month_list: Specifies the months of the schedule task.  
               The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the schedule task is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AppScheduleTaskScheduleTaskPolicyArgs', 'AppScheduleTaskScheduleTaskPolicyArgsDict']] schedule_task_policy: Specifies the policy of the schedule task.
               The schedule_task_policy structure is documented below.
        :param pulumi.Input[_builtins.str] scheduled_date: Specifies the fixed date of the schedule task.  
               The format is `YYYY-MM-dd`.
               This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        :param pulumi.Input[_builtins.str] scheduled_time: Specifies the execution time of the schedule task.  
               The format is `HH:mm:ss`.
        :param pulumi.Input[_builtins.str] scheduled_type: Specifies the execution cycle of the schedule task.  
               The valid values are as follows:
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppScheduleTaskTargetInfoArgs', 'AppScheduleTaskTargetInfoArgsDict']]]] target_infos: Specifies the target object list of the schedule task.  
               The target_infos structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the schedule task.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] task_type: Specifies the type of the schedule task.  
               The valid values are as follows:
               + **RESTART_SERVER**: Restart servers.
               + **START_SERVER**: Start servers.
               + **STOP_SERVER**: Stop servers.
               + **REINSTALL_OS**: Reinstall operating system.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone of the schedule task.  
               Defaults to **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] week_list: Specifies the days of week of the schedule task.  
               The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
               `1` means Sunday, `2` means Monday, and so on.
               This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppScheduleTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a workspace APP schedule task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        schedule_task_name = config.require_object("scheduleTaskName")
        scheduled_time = config.require_object("scheduledTime")
        target_objects = config.require_object("targetObjects")
        test = huaweicloud.workspace.AppScheduleTask("test",
            target_infos=[{
                "target_type": entry["value"]["targetType"],
                "target_id": entry["value"]["targetId"],
            } for entry in [{"key": k, "value": v} for k, v in target_objects]],
            task_name=schedule_task_name,
            task_type="STOP_SERVER",
            scheduled_type="WEEK",
            week_list="1,3",
            scheduled_time=scheduled_time,
            time_zone="Asia/Shanghai")
        ```

        ## Import

        Schedule tasks can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appScheduleTask:AppScheduleTask test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AppScheduleTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppScheduleTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date_list: Optional[pulumi.Input[_builtins.str]] = None,
                 day_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 month_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_task_policy: Optional[pulumi.Input[Union['AppScheduleTaskScheduleTaskPolicyArgs', 'AppScheduleTaskScheduleTaskPolicyArgsDict']]] = None,
                 scheduled_date: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_time: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppScheduleTaskTargetInfoArgs', 'AppScheduleTaskTargetInfoArgsDict']]]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 week_list: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppScheduleTaskArgs.__new__(AppScheduleTaskArgs)

            __props__.__dict__["date_list"] = date_list
            __props__.__dict__["day_interval"] = day_interval
            __props__.__dict__["description"] = description
            __props__.__dict__["expire_time"] = expire_time
            __props__.__dict__["is_enable"] = is_enable
            __props__.__dict__["month_list"] = month_list
            __props__.__dict__["region"] = region
            __props__.__dict__["schedule_task_policy"] = schedule_task_policy
            __props__.__dict__["scheduled_date"] = scheduled_date
            if scheduled_time is None and not opts.urn:
                raise TypeError("Missing required property 'scheduled_time'")
            __props__.__dict__["scheduled_time"] = scheduled_time
            if scheduled_type is None and not opts.urn:
                raise TypeError("Missing required property 'scheduled_type'")
            __props__.__dict__["scheduled_type"] = scheduled_type
            if target_infos is None and not opts.urn:
                raise TypeError("Missing required property 'target_infos'")
            __props__.__dict__["target_infos"] = target_infos
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["week_list"] = week_list
        super(AppScheduleTask, __self__).__init__(
            'huaweicloud:Workspace/appScheduleTask:AppScheduleTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            date_list: Optional[pulumi.Input[_builtins.str]] = None,
            day_interval: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            expire_time: Optional[pulumi.Input[_builtins.str]] = None,
            is_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            month_list: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schedule_task_policy: Optional[pulumi.Input[Union['AppScheduleTaskScheduleTaskPolicyArgs', 'AppScheduleTaskScheduleTaskPolicyArgsDict']]] = None,
            scheduled_date: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_time: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_type: Optional[pulumi.Input[_builtins.str]] = None,
            target_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppScheduleTaskTargetInfoArgs', 'AppScheduleTaskTargetInfoArgsDict']]]]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_type: Optional[pulumi.Input[_builtins.str]] = None,
            time_zone: Optional[pulumi.Input[_builtins.str]] = None,
            week_list: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppScheduleTask':
        """
        Get an existing AppScheduleTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] date_list: Specifies the days of month of the schedule task.  
               The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
               `L` can only be used alone, and cannot be used together with other values.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.int] day_interval: Specifies the execution interval of the scheduled task, in day.
               The valid value ranges from `1` to `31`.
               This parameter is **required** when `scheduled_type` is set to **DAY**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the schedule task.
        :param pulumi.Input[_builtins.str] expire_time: Specifies the expiration time of the schedule task, in UTC format.
        :param pulumi.Input[_builtins.bool] is_enable: Specifies whether to enable the schedule task.
               Defaults to **true**.
               
               <a name="app_schedule_task_target_infos"></a>
               The `target_infos` block supports:
        :param pulumi.Input[_builtins.str] month_list: Specifies the months of the schedule task.  
               The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
               This parameter is **required** when `scheduled_type` is set to **MONTH**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the schedule task is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AppScheduleTaskScheduleTaskPolicyArgs', 'AppScheduleTaskScheduleTaskPolicyArgsDict']] schedule_task_policy: Specifies the policy of the schedule task.
               The schedule_task_policy structure is documented below.
        :param pulumi.Input[_builtins.str] scheduled_date: Specifies the fixed date of the schedule task.  
               The format is `YYYY-MM-dd`.
               This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        :param pulumi.Input[_builtins.str] scheduled_time: Specifies the execution time of the schedule task.  
               The format is `HH:mm:ss`.
        :param pulumi.Input[_builtins.str] scheduled_type: Specifies the execution cycle of the schedule task.  
               The valid values are as follows:
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppScheduleTaskTargetInfoArgs', 'AppScheduleTaskTargetInfoArgsDict']]]] target_infos: Specifies the target object list of the schedule task.  
               The target_infos structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the schedule task.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] task_type: Specifies the type of the schedule task.  
               The valid values are as follows:
               + **RESTART_SERVER**: Restart servers.
               + **START_SERVER**: Start servers.
               + **STOP_SERVER**: Stop servers.
               + **REINSTALL_OS**: Reinstall operating system.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone of the schedule task.  
               Defaults to **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] week_list: Specifies the days of week of the schedule task.  
               The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
               `1` means Sunday, `2` means Monday, and so on.
               This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppScheduleTaskState.__new__(_AppScheduleTaskState)

        __props__.__dict__["date_list"] = date_list
        __props__.__dict__["day_interval"] = day_interval
        __props__.__dict__["description"] = description
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["is_enable"] = is_enable
        __props__.__dict__["month_list"] = month_list
        __props__.__dict__["region"] = region
        __props__.__dict__["schedule_task_policy"] = schedule_task_policy
        __props__.__dict__["scheduled_date"] = scheduled_date
        __props__.__dict__["scheduled_time"] = scheduled_time
        __props__.__dict__["scheduled_type"] = scheduled_type
        __props__.__dict__["target_infos"] = target_infos
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["week_list"] = week_list
        return AppScheduleTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dateList")
    def date_list(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the days of month of the schedule task.  
        The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
        `L` can only be used alone, and cannot be used together with other values.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "date_list")

    @_builtins.property
    @pulumi.getter(name="dayInterval")
    def day_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the execution interval of the scheduled task, in day.
        The valid value ranges from `1` to `31`.
        This parameter is **required** when `scheduled_type` is set to **DAY**.
        """
        return pulumi.get(self, "day_interval")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the schedule task.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the expiration time of the schedule task, in UTC format.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="isEnable")
    def is_enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable the schedule task.
        Defaults to **true**.

        <a name="app_schedule_task_target_infos"></a>
        The `target_infos` block supports:
        """
        return pulumi.get(self, "is_enable")

    @_builtins.property
    @pulumi.getter(name="monthList")
    def month_list(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the months of the schedule task.  
        The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
        This parameter is **required** when `scheduled_type` is set to **MONTH**.
        """
        return pulumi.get(self, "month_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the schedule task is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scheduleTaskPolicy")
    def schedule_task_policy(self) -> pulumi.Output[Optional['outputs.AppScheduleTaskScheduleTaskPolicy']]:
        """
        Specifies the policy of the schedule task.
        The schedule_task_policy structure is documented below.
        """
        return pulumi.get(self, "schedule_task_policy")

    @_builtins.property
    @pulumi.getter(name="scheduledDate")
    def scheduled_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the fixed date of the schedule task.  
        The format is `YYYY-MM-dd`.
        This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
        """
        return pulumi.get(self, "scheduled_date")

    @_builtins.property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution time of the schedule task.  
        The format is `HH:mm:ss`.
        """
        return pulumi.get(self, "scheduled_time")

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution cycle of the schedule task.  
        The valid values are as follows:
        + **FIXED_TIME**
        + **DAY**
        + **WEEK**
        + **MONTH**
        """
        return pulumi.get(self, "scheduled_type")

    @_builtins.property
    @pulumi.getter(name="targetInfos")
    def target_infos(self) -> pulumi.Output[Sequence['outputs.AppScheduleTaskTargetInfo']]:
        """
        Specifies the target object list of the schedule task.  
        The target_infos structure is documented below.
        """
        return pulumi.get(self, "target_infos")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the schedule task.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the schedule task.  
        The valid values are as follows:
        + **RESTART_SERVER**: Restart servers.
        + **START_SERVER**: Start servers.
        + **STOP_SERVER**: Stop servers.
        + **REINSTALL_OS**: Reinstall operating system.
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the time zone of the schedule task.  
        Defaults to **Asia/Shanghai**.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="weekList")
    def week_list(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the days of week of the schedule task.  
        The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
        `1` means Sunday, `2` means Monday, and so on.
        This parameter is **required** when `scheduled_type` is set to **WEEK**.
        """
        return pulumi.get(self, "week_list")

