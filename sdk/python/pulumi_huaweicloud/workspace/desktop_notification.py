# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DesktopNotificationArgs', 'DesktopNotification']

@pulumi.input_type
class DesktopNotificationArgs:
    def __init__(__self__, *,
                 desktop_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 notifications: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DesktopNotification resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] desktop_ids: Specifies the list of desktop IDs.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "desktop_ids", desktop_ids)
        pulumi.set(__self__, "notifications", notifications)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="desktopIds")
    def desktop_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of desktop IDs.
        """
        return pulumi.get(self, "desktop_ids")

    @desktop_ids.setter
    def desktop_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "desktop_ids", value)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the message want to dispatch.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktop is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DesktopNotificationState:
    def __init__(__self__, *,
                 desktop_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DesktopNotification resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] desktop_ids: Specifies the list of desktop IDs.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of notification dispatch task.  
               The valid values are as follows:
               + **SUCCESS**
               + **FAIL**
        """
        if desktop_ids is not None:
            pulumi.set(__self__, "desktop_ids", desktop_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="desktopIds")
    def desktop_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of desktop IDs.
        """
        return pulumi.get(self, "desktop_ids")

    @desktop_ids.setter
    def desktop_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "desktop_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message want to dispatch.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktop is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of notification dispatch task.  
        The valid values are as follows:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Workspace/desktopNotification:DesktopNotification")
class DesktopNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 desktop_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to dispatch desktop message within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch desktop message. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_ids = config.require_object("desktopIds")
        test = huaweicloud.workspace.DesktopNotification("test",
            desktop_ids=desktop_ids,
            notifications="terraform test")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] desktop_ids: Specifies the list of desktop IDs.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DesktopNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to dispatch desktop message within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch desktop message. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_ids = config.require_object("desktopIds")
        test = huaweicloud.workspace.DesktopNotification("test",
            desktop_ids=desktop_ids,
            notifications="terraform test")
        ```

        :param str resource_name: The name of the resource.
        :param DesktopNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DesktopNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 desktop_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DesktopNotificationArgs.__new__(DesktopNotificationArgs)

            if desktop_ids is None and not opts.urn:
                raise TypeError("Missing required property 'desktop_ids'")
            __props__.__dict__["desktop_ids"] = desktop_ids
            __props__.__dict__["enable_force_new"] = enable_force_new
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
        super(DesktopNotification, __self__).__init__(
            'huaweicloud:Workspace/desktopNotification:DesktopNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            desktop_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            notifications: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'DesktopNotification':
        """
        Get an existing DesktopNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] desktop_ids: Specifies the list of desktop IDs.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of notification dispatch task.  
               The valid values are as follows:
               + **SUCCESS**
               + **FAIL**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DesktopNotificationState.__new__(_DesktopNotificationState)

        __props__.__dict__["desktop_ids"] = desktop_ids
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return DesktopNotification(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="desktopIds")
    def desktop_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of desktop IDs.
        """
        return pulumi.get(self, "desktop_ids")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message want to dispatch.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the desktop is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of notification dispatch task.  
        The valid values are as follows:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

