# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EipAssociateArgs', 'EipAssociate']

@pulumi.input_type
class EipAssociateArgs:
    def __init__(__self__, *,
                 desktop_id: pulumi.Input[_builtins.str],
                 eip_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EipAssociate resource.
        :param pulumi.Input[_builtins.str] desktop_id: Specifies the desktop ID. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID to associate. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to associate the EIP. If omitted, the provider-level
               region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "desktop_id", desktop_id)
        pulumi.set(__self__, "eip_id", eip_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the desktop ID. Changing this will create a new resource.
        """
        return pulumi.get(self, "desktop_id")

    @desktop_id.setter
    def desktop_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "desktop_id", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the EIP ID to associate. Changing this will create a new resource.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to associate the EIP. If omitted, the provider-level
        region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EipAssociateState:
    def __init__(__self__, *,
                 desktop_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EipAssociate resources.
        :param pulumi.Input[_builtins.str] desktop_id: Specifies the desktop ID. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID to associate. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID to which the EIP associated.
        :param pulumi.Input[_builtins.str] public_ip: The IP address of the EIP.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to associate the EIP. If omitted, the provider-level
               region will be used. Changing this will create a new resource.
        """
        if desktop_id is not None:
            pulumi.set(__self__, "desktop_id", desktop_id)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the desktop ID. Changing this will create a new resource.
        """
        return pulumi.get(self, "desktop_id")

    @desktop_id.setter
    def desktop_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "desktop_id", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the EIP ID to associate. Changing this will create a new resource.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project ID to which the EIP associated.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address of the EIP.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to associate the EIP. If omitted, the provider-level
        region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Workspace/eipAssociate:EipAssociate")
class EipAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 desktop_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to associate an EIP to a specified desktop within HuaweiCloud.

        ## Example Usage

        ### Associate with an EIP ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_id = config.require_object("desktopId")
        eip_id = config.require_object("eipId")
        test = huaweicloud.workspace.EipAssociate("test",
            desktop_id=desktop_id,
            eip_id=eip_id)
        ```

        ## Import

        EIP association can be imported using the `desktop_id` and associated `eip_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/eipAssociate:EipAssociate test <desktop_id>/<eip_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] desktop_id: Specifies the desktop ID. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID to associate. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to associate the EIP. If omitted, the provider-level
               region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EipAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to associate an EIP to a specified desktop within HuaweiCloud.

        ## Example Usage

        ### Associate with an EIP ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_id = config.require_object("desktopId")
        eip_id = config.require_object("eipId")
        test = huaweicloud.workspace.EipAssociate("test",
            desktop_id=desktop_id,
            eip_id=eip_id)
        ```

        ## Import

        EIP association can be imported using the `desktop_id` and associated `eip_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/eipAssociate:EipAssociate test <desktop_id>/<eip_id>
        ```

        :param str resource_name: The name of the resource.
        :param EipAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EipAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 desktop_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EipAssociateArgs.__new__(EipAssociateArgs)

            if desktop_id is None and not opts.urn:
                raise TypeError("Missing required property 'desktop_id'")
            __props__.__dict__["desktop_id"] = desktop_id
            if eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'eip_id'")
            __props__.__dict__["eip_id"] = eip_id
            __props__.__dict__["region"] = region
            __props__.__dict__["enterprise_project_id"] = None
            __props__.__dict__["public_ip"] = None
        super(EipAssociate, __self__).__init__(
            'huaweicloud:Workspace/eipAssociate:EipAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            desktop_id: Optional[pulumi.Input[_builtins.str]] = None,
            eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'EipAssociate':
        """
        Get an existing EipAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] desktop_id: Specifies the desktop ID. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID to associate. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID to which the EIP associated.
        :param pulumi.Input[_builtins.str] public_ip: The IP address of the EIP.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to associate the EIP. If omitted, the provider-level
               region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EipAssociateState.__new__(_EipAssociateState)

        __props__.__dict__["desktop_id"] = desktop_id
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        return EipAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the desktop ID. Changing this will create a new resource.
        """
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the EIP ID to associate. Changing this will create a new resource.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project ID to which the EIP associated.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The IP address of the EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to associate the EIP. If omitted, the provider-level
        region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

