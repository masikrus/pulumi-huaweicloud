# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppGroupAuthorizationArgs', 'AppGroupAuthorization']

@pulumi.input_type
class AppGroupAuthorizationArgs:
    def __init__(__self__, *,
                 accounts: pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]],
                 app_group_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppGroupAuthorization resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]] accounts: Specifies the list of the accounts to be authorized. The maximum length is `50`.
               Changing this creates a new resource.
               The accounts structure is documented below.
               
               > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
               will be authorized successfully.
               
               <a name="app_group_auth_accounts"></a>
               The `accounts` block supports:
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the ID of the application group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "app_group_id", app_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]]:
        """
        Specifies the list of the accounts to be authorized. The maximum length is `50`.
        Changing this creates a new resource.
        The accounts structure is documented below.

        > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
        will be authorized successfully.

        <a name="app_group_auth_accounts"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @app_group_id.setter
    def app_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppGroupAuthorizationState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]]] = None,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppGroupAuthorization resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]] accounts: Specifies the list of the accounts to be authorized. The maximum length is `50`.
               Changing this creates a new resource.
               The accounts structure is documented below.
               
               > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
               will be authorized successfully.
               
               <a name="app_group_auth_accounts"></a>
               The `accounts` block supports:
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the ID of the application group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if app_group_id is not None:
            pulumi.set(__self__, "app_group_id", app_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]]]:
        """
        Specifies the list of the accounts to be authorized. The maximum length is `50`.
        Changing this creates a new resource.
        The accounts structure is documented below.

        > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
        will be authorized successfully.

        <a name="app_group_auth_accounts"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppGroupAuthorizationAccountArgs']]]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @app_group_id.setter
    def app_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Workspace/appGroupAuthorization:AppGroupAuthorization")
class AppGroupAuthorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppGroupAuthorizationAccountArgs', 'AppGroupAuthorizationAccountArgsDict']]]]] = None,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an APP group authorization resource within HuaweiCloud.

        > Deleting this resource will revoke authorization for the users or user groups.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        app_group_id = config.require_object("appGroupId")
        user_groups = config.require_object("userGroups")
        test = huaweicloud.workspace.AppGroupAuthorization("test",
            accounts=[{
                "id": entry["value"]["id"],
                "account": entry["value"]["name"],
                "type": "USER_GROUP",
            } for entry in [{"key": k, "value": v} for k, v in user_groups]],
            app_group_id=app_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppGroupAuthorizationAccountArgs', 'AppGroupAuthorizationAccountArgsDict']]]] accounts: Specifies the list of the accounts to be authorized. The maximum length is `50`.
               Changing this creates a new resource.
               The accounts structure is documented below.
               
               > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
               will be authorized successfully.
               
               <a name="app_group_auth_accounts"></a>
               The `accounts` block supports:
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the ID of the application group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppGroupAuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an APP group authorization resource within HuaweiCloud.

        > Deleting this resource will revoke authorization for the users or user groups.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        app_group_id = config.require_object("appGroupId")
        user_groups = config.require_object("userGroups")
        test = huaweicloud.workspace.AppGroupAuthorization("test",
            accounts=[{
                "id": entry["value"]["id"],
                "account": entry["value"]["name"],
                "type": "USER_GROUP",
            } for entry in [{"key": k, "value": v} for k, v in user_groups]],
            app_group_id=app_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param AppGroupAuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppGroupAuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppGroupAuthorizationAccountArgs', 'AppGroupAuthorizationAccountArgsDict']]]]] = None,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppGroupAuthorizationArgs.__new__(AppGroupAuthorizationArgs)

            if accounts is None and not opts.urn:
                raise TypeError("Missing required property 'accounts'")
            __props__.__dict__["accounts"] = accounts
            if app_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_group_id'")
            __props__.__dict__["app_group_id"] = app_group_id
            __props__.__dict__["region"] = region
        super(AppGroupAuthorization, __self__).__init__(
            'huaweicloud:Workspace/appGroupAuthorization:AppGroupAuthorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppGroupAuthorizationAccountArgs', 'AppGroupAuthorizationAccountArgsDict']]]]] = None,
            app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppGroupAuthorization':
        """
        Get an existing AppGroupAuthorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppGroupAuthorizationAccountArgs', 'AppGroupAuthorizationAccountArgsDict']]]] accounts: Specifies the list of the accounts to be authorized. The maximum length is `50`.
               Changing this creates a new resource.
               The accounts structure is documented below.
               
               > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
               will be authorized successfully.
               
               <a name="app_group_auth_accounts"></a>
               The `accounts` block supports:
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the ID of the application group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppGroupAuthorizationState.__new__(_AppGroupAuthorizationState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["app_group_id"] = app_group_id
        __props__.__dict__["region"] = region
        return AppGroupAuthorization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Sequence['outputs.AppGroupAuthorizationAccount']]:
        """
        Specifies the list of the accounts to be authorized. The maximum length is `50`.
        Changing this creates a new resource.
        The accounts structure is documented below.

        > If the parameter contains non-existent objects, the resource creation will fail, but the remaining existing objects
        will be authorized successfully.

        <a name="app_group_auth_accounts"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

