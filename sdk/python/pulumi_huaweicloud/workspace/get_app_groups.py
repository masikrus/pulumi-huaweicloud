# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppGroupsResult',
    'AwaitableGetAppGroupsResult',
    'get_app_groups',
    'get_app_groups_output',
]

@pulumi.output_type
class GetAppGroupsResult:
    """
    A collection of values returned by getAppGroups.
    """
    def __init__(__self__, group_id=None, groups=None, id=None, name=None, region=None, server_group_id=None, type=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetAppGroupsGroupResult']:
        """
        All application groups that match the filter parameters.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the application group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[_builtins.str]:
        """
        The server group ID associated with the application group.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the application group.
        """
        return pulumi.get(self, "type")


class AwaitableGetAppGroupsResult(GetAppGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppGroupsResult(
            group_id=self.group_id,
            groups=self.groups,
            id=self.id,
            name=self.name,
            region=self.region,
            server_group_id=self.server_group_id,
            type=self.type)


def get_app_groups(group_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   server_group_id: Optional[_builtins.str] = None,
                   type: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppGroupsResult:
    """
    Use this data source to get the list of application groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_groups()
    ```


    :param _builtins.str group_id: Specifies the ID of the application group.
    :param _builtins.str name: Specifies the name of the application group.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the server group ID associated with the application group.
    :param _builtins.str type: Specifies the type of the application group.  
           The valid values are as follows:
           + **COMMON_APP**
           + **SESSION_DESKTOP_APP**
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppGroups:getAppGroups', __args__, opts=opts, typ=GetAppGroupsResult).value

    return AwaitableGetAppGroupsResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'),
        type=pulumi.get(__ret__, 'type'))
def get_app_groups_output(group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          server_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppGroupsResult]:
    """
    Use this data source to get the list of application groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_groups()
    ```


    :param _builtins.str group_id: Specifies the ID of the application group.
    :param _builtins.str name: Specifies the name of the application group.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the server group ID associated with the application group.
    :param _builtins.str type: Specifies the type of the application group.  
           The valid values are as follows:
           + **COMMON_APP**
           + **SESSION_DESKTOP_APP**
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppGroups:getAppGroups', __args__, opts=opts, typ=GetAppGroupsResult)
    return __ret__.apply(lambda __response__: GetAppGroupsResult(
        group_id=pulumi.get(__response__, 'group_id'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        server_group_id=pulumi.get(__response__, 'server_group_id'),
        type=pulumi.get(__response__, 'type')))
