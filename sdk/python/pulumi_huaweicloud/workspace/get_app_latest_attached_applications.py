# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppLatestAttachedApplicationsResult',
    'AwaitableGetAppLatestAttachedApplicationsResult',
    'get_app_latest_attached_applications',
    'get_app_latest_attached_applications_output',
]

@pulumi.output_type
class GetAppLatestAttachedApplicationsResult:
    """
    A collection of values returned by getAppLatestAttachedApplications.
    """
    def __init__(__self__, applications=None, id=None, region=None, server_id=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetAppLatestAttachedApplicationsApplicationResult']:
        """
        The list of latest attached applications.
        The applications structure is documented below.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        return pulumi.get(self, "server_id")


class AwaitableGetAppLatestAttachedApplicationsResult(GetAppLatestAttachedApplicationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppLatestAttachedApplicationsResult(
            applications=self.applications,
            id=self.id,
            region=self.region,
            server_id=self.server_id)


def get_app_latest_attached_applications(region: Optional[_builtins.str] = None,
                                         server_id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppLatestAttachedApplicationsResult:
    """
    Use this data source to get the latest application list attached to the Workspace APP image server within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Workspace.get_app_latest_attached_applications(server_id=server_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.  
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the ID of the image server instance.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppLatestAttachedApplications:getAppLatestAttachedApplications', __args__, opts=opts, typ=GetAppLatestAttachedApplicationsResult).value

    return AwaitableGetAppLatestAttachedApplicationsResult(
        applications=pulumi.get(__ret__, 'applications'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        server_id=pulumi.get(__ret__, 'server_id'))
def get_app_latest_attached_applications_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                server_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppLatestAttachedApplicationsResult]:
    """
    Use this data source to get the latest application list attached to the Workspace APP image server within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Workspace.get_app_latest_attached_applications(server_id=server_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.  
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the ID of the image server instance.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppLatestAttachedApplications:getAppLatestAttachedApplications', __args__, opts=opts, typ=GetAppLatestAttachedApplicationsResult)
    return __ret__.apply(lambda __response__: GetAppLatestAttachedApplicationsResult(
        applications=pulumi.get(__response__, 'applications'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        server_id=pulumi.get(__response__, 'server_id')))
