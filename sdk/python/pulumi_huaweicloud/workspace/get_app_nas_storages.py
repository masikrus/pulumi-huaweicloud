# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppNasStoragesResult',
    'AwaitableGetAppNasStoragesResult',
    'get_app_nas_storages',
    'get_app_nas_storages_output',
]

@pulumi.output_type
class GetAppNasStoragesResult:
    """
    A collection of values returned by getAppNasStorages.
    """
    def __init__(__self__, id=None, name=None, region=None, storage_id=None, storages=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if storage_id and not isinstance(storage_id, str):
            raise TypeError("Expected argument 'storage_id' to be a str")
        pulumi.set(__self__, "storage_id", storage_id)
        if storages and not isinstance(storages, list):
            raise TypeError("Expected argument 'storages' to be a list")
        pulumi.set(__self__, "storages", storages)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the NAS storage.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_id")

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetAppNasStoragesStorageResult']:
        """
        All NAS storages that match the filter parameters.
        The storages structure is documented below.
        """
        return pulumi.get(self, "storages")


class AwaitableGetAppNasStoragesResult(GetAppNasStoragesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppNasStoragesResult(
            id=self.id,
            name=self.name,
            region=self.region,
            storage_id=self.storage_id,
            storages=self.storages)


def get_app_nas_storages(name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         storage_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppNasStoragesResult:
    """
    Use this data source to get the list of NAS storages for Workspace APP within HuaweiCloud.

    ## Example Usage

    ### Query all NAS storages

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_nas_storages()
    ```

    ### Query NAS storage containing fragments with the same name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    storage_name_prefix = config.require_object("storageNamePrefix")
    test = huaweicloud.Workspace.get_app_nas_storages(name=storage_name_prefix)
    ```


    :param _builtins.str name: Specifies the name of the NAS storage to be queried.  
           This parameter is used for fuzzy search.
    :param _builtins.str region: Specifies the region where the NAS storages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str storage_id: Specifies the ID of the NAS storage to be queried.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['storageId'] = storage_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppNasStorages:getAppNasStorages', __args__, opts=opts, typ=GetAppNasStoragesResult).value

    return AwaitableGetAppNasStoragesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        storage_id=pulumi.get(__ret__, 'storage_id'),
        storages=pulumi.get(__ret__, 'storages'))
def get_app_nas_storages_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                storage_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppNasStoragesResult]:
    """
    Use this data source to get the list of NAS storages for Workspace APP within HuaweiCloud.

    ## Example Usage

    ### Query all NAS storages

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_nas_storages()
    ```

    ### Query NAS storage containing fragments with the same name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    storage_name_prefix = config.require_object("storageNamePrefix")
    test = huaweicloud.Workspace.get_app_nas_storages(name=storage_name_prefix)
    ```


    :param _builtins.str name: Specifies the name of the NAS storage to be queried.  
           This parameter is used for fuzzy search.
    :param _builtins.str region: Specifies the region where the NAS storages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str storage_id: Specifies the ID of the NAS storage to be queried.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['storageId'] = storage_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppNasStorages:getAppNasStorages', __args__, opts=opts, typ=GetAppNasStoragesResult)
    return __ret__.apply(lambda __response__: GetAppNasStoragesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        storage_id=pulumi.get(__response__, 'storage_id'),
        storages=pulumi.get(__response__, 'storages')))
