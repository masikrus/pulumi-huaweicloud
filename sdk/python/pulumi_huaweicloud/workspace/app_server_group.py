# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppServerGroupArgs', 'AppServerGroup']

@pulumi.input_type
class AppServerGroupArgs:
    def __init__(__self__, *,
                 flavor_id: pulumi.Input[_builtins.str],
                 image_id: pulumi.Input[_builtins.str],
                 image_type: pulumi.Input[_builtins.str],
                 os_type: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 system_disk_size: pulumi.Input[_builtins.int],
                 system_disk_type: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_virtual: Optional[pulumi.Input['AppServerGroupIpVirtualArgs']] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']] = None,
                 storage_mount_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AppServerGroup resource.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the server group.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the server group.  
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server group.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the subnet ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.int] system_disk_size: Specifies the size of system disk, in GB.  
               The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        :param pulumi.Input[_builtins.str] system_disk_type: Specifies the type of system disk.  
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of application group associated with the server group.
               Defaults to **COMMON_APP**.
               The valid values are as follows:
               + **SESSION_DESKTOP_APP**
               + **COMMON_APP**
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server group.  
               If omitted, the AZ randomly assigned by the system is used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server group.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable server group. Defaults to **true**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               server group belong.
               This field is only valid for enterprise users, if omitted, default enterprise project will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] image_product_id: Specifies the image product ID of the server group.  
               This parameter is required wnen the `image_type` parameter is set to **gold**.
        :param pulumi.Input['AppServerGroupIpVirtualArgs'] ip_virtual: Specifies the IP virtualization function configuration.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The ip_virtual structure is documented below.
               
               > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
               pre-allocated by the server is the same as the maximum number of sessions.
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the server group. Defaults to **false**.
               + **false**: Multi-session mode.
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server group.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] primary_server_group_id: Specifies the ID of the primary server group.
               Changing this creates a new resource.
               
               > 1. If this parameter is specified, the standby server is created.
               <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
               standby server groups must be consistent.
               <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
               is automatically applied to the standby server group.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppServerGroupRoutePolicyArgs'] route_policy: Specifies the session scheduling policy of the server group.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[_builtins.str] storage_mount_policy: Specifies the NAS storage directory mounting policy on the APS.
               + **USER**: Only mount personal directories.
               + **SHARE**: Only mount shared directories.
               + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
               automatically mounted).
               
               <a name="app_server_group_ip_virtual"></a>
               The `ip_virtual` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the server group.
               Supports up to 20 tags.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extra_session_size is not None:
            pulumi.set(__self__, "extra_session_size", extra_session_size)
        if extra_session_type is not None:
            pulumi.set(__self__, "extra_session_type", extra_session_type)
        if image_product_id is not None:
            pulumi.set(__self__, "image_product_id", image_product_id)
        if ip_virtual is not None:
            pulumi.set(__self__, "ip_virtual", ip_virtual)
        if is_vdi is not None:
            pulumi.set(__self__, "is_vdi", is_vdi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if primary_server_group_id is not None:
            pulumi.set(__self__, "primary_server_group_id", primary_server_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if storage_mount_policy is not None:
            pulumi.set(__self__, "storage_mount_policy", storage_mount_policy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor ID of the server group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image ID of the server group.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image type of the server group.  
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operating system type of the server group.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subnet ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the subnet ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the size of system disk, in GB.  
        The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "system_disk_size", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of system disk.  
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "system_disk_type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the VPC ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of application group associated with the server group.
        Defaults to **COMMON_APP**.
        The valid values are as follows:
        + **SESSION_DESKTOP_APP**
        + **COMMON_APP**
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the server group.  
        If omitted, the AZ randomly assigned by the system is used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the server group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable server group. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the
        server group belong.
        This field is only valid for enterprise users, if omitted, default enterprise project will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @extra_session_size.setter
    def extra_session_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "extra_session_size", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional session type.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @extra_session_type.setter
    def extra_session_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extra_session_type", value)

    @_builtins.property
    @pulumi.getter(name="imageProductId")
    def image_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image product ID of the server group.  
        This parameter is required wnen the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_product_id")

    @image_product_id.setter
    def image_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_product_id", value)

    @_builtins.property
    @pulumi.getter(name="ipVirtual")
    def ip_virtual(self) -> Optional[pulumi.Input['AppServerGroupIpVirtualArgs']]:
        """
        Specifies the IP virtualization function configuration.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The ip_virtual structure is documented below.

        > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
        pre-allocated by the server is the same as the maximum number of sessions.
        """
        return pulumi.get(self, "ip_virtual")

    @ip_virtual.setter
    def ip_virtual(self, value: Optional[pulumi.Input['AppServerGroupIpVirtualArgs']]):
        pulumi.set(self, "ip_virtual", value)

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the session mode of the server group. Defaults to **false**.
        + **false**: Multi-session mode.
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_vdi")

    @is_vdi.setter
    def is_vdi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vdi", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the server group.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter(name="primaryServerGroupId")
    def primary_server_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the primary server group.
        Changing this creates a new resource.

        > 1. If this parameter is specified, the standby server is created.
        <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
        standby server groups must be consistent.
        <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
        is automatically applied to the standby server group.
        """
        return pulumi.get(self, "primary_server_group_id")

    @primary_server_group_id.setter
    def primary_server_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_server_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']]:
        """
        Specifies the session scheduling policy of the server group.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPolicy")
    def storage_mount_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the NAS storage directory mounting policy on the APS.
        + **USER**: Only mount personal directories.
        + **SHARE**: Only mount shared directories.
        + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
        automatically mounted).

        <a name="app_server_group_ip_virtual"></a>
        The `ip_virtual` block supports:
        """
        return pulumi.get(self, "storage_mount_policy")

    @storage_mount_policy.setter
    def storage_mount_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_policy", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the server group.
        Supports up to 20 tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppServerGroupState:
    def __init__(__self__, *,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavors: Optional[pulumi.Input[Sequence[pulumi.Input['AppServerGroupFlavorArgs']]]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 image_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_virtual: Optional[pulumi.Input['AppServerGroupIpVirtualArgs']] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']] = None,
                 storage_mount_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppServerGroup resources.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of application group associated with the server group.
               Defaults to **COMMON_APP**.
               The valid values are as follows:
               + **SESSION_DESKTOP_APP**
               + **COMMON_APP**
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server group.  
               If omitted, the AZ randomly assigned by the system is used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server group.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable server group. Defaults to **true**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               server group belong.
               This field is only valid for enterprise users, if omitted, default enterprise project will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server group.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppServerGroupFlavorArgs']]] flavors: The list of server flavors.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the server group.
        :param pulumi.Input[_builtins.int] image_min_disk: The minimum memory required to run the image, in MB. The default value is 0.
        :param pulumi.Input[_builtins.str] image_product_id: Specifies the image product ID of the server group.  
               This parameter is required wnen the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the server group.  
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input['AppServerGroupIpVirtualArgs'] ip_virtual: Specifies the IP virtualization function configuration.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The ip_virtual structure is documented below.
               
               > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
               pre-allocated by the server is the same as the maximum number of sessions.
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the server group. Defaults to **false**.
               + **false**: Multi-session mode.
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server group.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server group.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] primary_server_group_id: Specifies the ID of the primary server group.
               Changing this creates a new resource.
               
               > 1. If this parameter is specified, the standby server is created.
               <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
               standby server groups must be consistent.
               <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
               is automatically applied to the standby server group.
        :param pulumi.Input[_builtins.str] project_name: The name of the project.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppServerGroupRoutePolicyArgs'] route_policy: Specifies the session scheduling policy of the server group.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[_builtins.str] storage_mount_policy: Specifies the NAS storage directory mounting policy on the APS.
               + **USER**: Only mount personal directories.
               + **SHARE**: Only mount shared directories.
               + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
               automatically mounted).
               
               <a name="app_server_group_ip_virtual"></a>
               The `ip_virtual` block supports:
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the subnet ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.int] system_disk_size: Specifies the size of system disk, in GB.  
               The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        :param pulumi.Input[_builtins.str] system_disk_type: Specifies the type of system disk.  
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the server group.
               Supports up to 20 tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extra_session_size is not None:
            pulumi.set(__self__, "extra_session_size", extra_session_size)
        if extra_session_type is not None:
            pulumi.set(__self__, "extra_session_type", extra_session_type)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if flavors is not None:
            pulumi.set(__self__, "flavors", flavors)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_min_disk is not None:
            pulumi.set(__self__, "image_min_disk", image_min_disk)
        if image_product_id is not None:
            pulumi.set(__self__, "image_product_id", image_product_id)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if ip_virtual is not None:
            pulumi.set(__self__, "ip_virtual", ip_virtual)
        if is_vdi is not None:
            pulumi.set(__self__, "is_vdi", is_vdi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if primary_server_group_id is not None:
            pulumi.set(__self__, "primary_server_group_id", primary_server_group_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if storage_mount_policy is not None:
            pulumi.set(__self__, "storage_mount_policy", storage_mount_policy)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of application group associated with the server group.
        Defaults to **COMMON_APP**.
        The valid values are as follows:
        + **SESSION_DESKTOP_APP**
        + **COMMON_APP**
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the server group.  
        If omitted, the AZ randomly assigned by the system is used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the server group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable server group. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the
        server group belong.
        This field is only valid for enterprise users, if omitted, default enterprise project will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @extra_session_size.setter
    def extra_session_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "extra_session_size", value)

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional session type.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @extra_session_type.setter
    def extra_session_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extra_session_type", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor ID of the server group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppServerGroupFlavorArgs']]]]:
        """
        The list of server flavors.
        """
        return pulumi.get(self, "flavors")

    @flavors.setter
    def flavors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppServerGroupFlavorArgs']]]]):
        pulumi.set(self, "flavors", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image ID of the server group.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageMinDisk")
    def image_min_disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The minimum memory required to run the image, in MB. The default value is 0.
        """
        return pulumi.get(self, "image_min_disk")

    @image_min_disk.setter
    def image_min_disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_min_disk", value)

    @_builtins.property
    @pulumi.getter(name="imageProductId")
    def image_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image product ID of the server group.  
        This parameter is required wnen the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_product_id")

    @image_product_id.setter
    def image_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_product_id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type of the server group.  
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="ipVirtual")
    def ip_virtual(self) -> Optional[pulumi.Input['AppServerGroupIpVirtualArgs']]:
        """
        Specifies the IP virtualization function configuration.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The ip_virtual structure is documented below.

        > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
        pre-allocated by the server is the same as the maximum number of sessions.
        """
        return pulumi.get(self, "ip_virtual")

    @ip_virtual.setter
    def ip_virtual(self, value: Optional[pulumi.Input['AppServerGroupIpVirtualArgs']]):
        pulumi.set(self, "ip_virtual", value)

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the session mode of the server group. Defaults to **false**.
        + **false**: Multi-session mode.
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_vdi")

    @is_vdi.setter
    def is_vdi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vdi", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the server group.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system type of the server group.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter(name="primaryServerGroupId")
    def primary_server_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the primary server group.
        Changing this creates a new resource.

        > 1. If this parameter is specified, the standby server is created.
        <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
        standby server groups must be consistent.
        <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
        is automatically applied to the standby server group.
        """
        return pulumi.get(self, "primary_server_group_id")

    @primary_server_group_id.setter
    def primary_server_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the project.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']]:
        """
        Specifies the session scheduling policy of the server group.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input['AppServerGroupRoutePolicyArgs']]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPolicy")
    def storage_mount_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the NAS storage directory mounting policy on the APS.
        + **USER**: Only mount personal directories.
        + **SHARE**: Only mount shared directories.
        + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
        automatically mounted).

        <a name="app_server_group_ip_virtual"></a>
        The `ip_virtual` block supports:
        """
        return pulumi.get(self, "storage_mount_policy")

    @storage_mount_policy.setter
    def storage_mount_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_policy", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the subnet ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of system disk, in GB.  
        The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_size", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of system disk.  
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the server group.
        Supports up to 20 tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Workspace/appServerGroup:AppServerGroup")
class AppServerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_virtual: Optional[pulumi.Input[Union['AppServerGroupIpVirtualArgs', 'AppServerGroupIpVirtualArgsDict']]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[Union['AppServerGroupRoutePolicyArgs', 'AppServerGroupRoutePolicyArgsDict']]] = None,
                 storage_mount_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Workspace APP server group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_name = config.require_object("serverGroupName")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        image_id = config.require_object("imageId")
        image_product_id = config.require_object("imageProductId")
        test = huaweicloud.workspace.AppServerGroup("test",
            name=server_group_name,
            os_type="Windows",
            flavor_id=flavor_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            system_disk_type="SAS",
            system_disk_size=80,
            is_vdi=False,
            image_id=image_id,
            image_type="gold",
            image_product_id=image_product_id,
            app_type="SESSION_DESKTOP_APP")
        ```

        ## Import

        The server group resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServerGroup:AppServerGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `vpc_id`, `image_type`, `image_product_id`, `availability_zone`, `ip_virtual` and `route_policy`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_server_group" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vpc_id, image_type, image_product_id, availability_zone, ip_virtual, route_policy,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of application group associated with the server group.
               Defaults to **COMMON_APP**.
               The valid values are as follows:
               + **SESSION_DESKTOP_APP**
               + **COMMON_APP**
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server group.  
               If omitted, the AZ randomly assigned by the system is used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server group.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable server group. Defaults to **true**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               server group belong.
               This field is only valid for enterprise users, if omitted, default enterprise project will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server group.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the server group.
        :param pulumi.Input[_builtins.str] image_product_id: Specifies the image product ID of the server group.  
               This parameter is required wnen the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the server group.  
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[Union['AppServerGroupIpVirtualArgs', 'AppServerGroupIpVirtualArgsDict']] ip_virtual: Specifies the IP virtualization function configuration.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The ip_virtual structure is documented below.
               
               > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
               pre-allocated by the server is the same as the maximum number of sessions.
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the server group. Defaults to **false**.
               + **false**: Multi-session mode.
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server group.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server group.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] primary_server_group_id: Specifies the ID of the primary server group.
               Changing this creates a new resource.
               
               > 1. If this parameter is specified, the standby server is created.
               <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
               standby server groups must be consistent.
               <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
               is automatically applied to the standby server group.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppServerGroupRoutePolicyArgs', 'AppServerGroupRoutePolicyArgsDict']] route_policy: Specifies the session scheduling policy of the server group.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[_builtins.str] storage_mount_policy: Specifies the NAS storage directory mounting policy on the APS.
               + **USER**: Only mount personal directories.
               + **SHARE**: Only mount shared directories.
               + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
               automatically mounted).
               
               <a name="app_server_group_ip_virtual"></a>
               The `ip_virtual` block supports:
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the subnet ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.int] system_disk_size: Specifies the size of system disk, in GB.  
               The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        :param pulumi.Input[_builtins.str] system_disk_type: Specifies the type of system disk.  
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the server group.
               Supports up to 20 tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppServerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace APP server group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_name = config.require_object("serverGroupName")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        image_id = config.require_object("imageId")
        image_product_id = config.require_object("imageProductId")
        test = huaweicloud.workspace.AppServerGroup("test",
            name=server_group_name,
            os_type="Windows",
            flavor_id=flavor_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            system_disk_type="SAS",
            system_disk_size=80,
            is_vdi=False,
            image_id=image_id,
            image_type="gold",
            image_product_id=image_product_id,
            app_type="SESSION_DESKTOP_APP")
        ```

        ## Import

        The server group resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServerGroup:AppServerGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `vpc_id`, `image_type`, `image_product_id`, `availability_zone`, `ip_virtual` and `route_policy`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_server_group" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vpc_id, image_type, image_product_id, availability_zone, ip_virtual, route_policy,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AppServerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppServerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_virtual: Optional[pulumi.Input[Union['AppServerGroupIpVirtualArgs', 'AppServerGroupIpVirtualArgsDict']]] = None,
                 is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[Union['AppServerGroupRoutePolicyArgs', 'AppServerGroupRoutePolicyArgsDict']]] = None,
                 storage_mount_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppServerGroupArgs.__new__(AppServerGroupArgs)

            __props__.__dict__["app_type"] = app_type
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["extra_session_size"] = extra_session_size
            __props__.__dict__["extra_session_type"] = extra_session_type
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["image_product_id"] = image_product_id
            if image_type is None and not opts.urn:
                raise TypeError("Missing required property 'image_type'")
            __props__.__dict__["image_type"] = image_type
            __props__.__dict__["ip_virtual"] = ip_virtual
            __props__.__dict__["is_vdi"] = is_vdi
            __props__.__dict__["name"] = name
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["ou_name"] = ou_name
            __props__.__dict__["primary_server_group_id"] = primary_server_group_id
            __props__.__dict__["region"] = region
            __props__.__dict__["route_policy"] = route_policy
            __props__.__dict__["storage_mount_policy"] = storage_mount_policy
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if system_disk_size is None and not opts.urn:
                raise TypeError("Missing required property 'system_disk_size'")
            __props__.__dict__["system_disk_size"] = system_disk_size
            if system_disk_type is None and not opts.urn:
                raise TypeError("Missing required property 'system_disk_type'")
            __props__.__dict__["system_disk_type"] = system_disk_type
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["flavors"] = None
            __props__.__dict__["image_min_disk"] = None
            __props__.__dict__["project_name"] = None
        super(AppServerGroup, __self__).__init__(
            'huaweicloud:Workspace/appServerGroup:AppServerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_type: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            extra_session_size: Optional[pulumi.Input[_builtins.int]] = None,
            extra_session_type: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppServerGroupFlavorArgs', 'AppServerGroupFlavorArgsDict']]]]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_min_disk: Optional[pulumi.Input[_builtins.int]] = None,
            image_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_type: Optional[pulumi.Input[_builtins.str]] = None,
            ip_virtual: Optional[pulumi.Input[Union['AppServerGroupIpVirtualArgs', 'AppServerGroupIpVirtualArgsDict']]] = None,
            is_vdi: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            ou_name: Optional[pulumi.Input[_builtins.str]] = None,
            primary_server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            route_policy: Optional[pulumi.Input[Union['AppServerGroupRoutePolicyArgs', 'AppServerGroupRoutePolicyArgsDict']]] = None,
            storage_mount_policy: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
            system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppServerGroup':
        """
        Get an existing AppServerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of application group associated with the server group.
               Defaults to **COMMON_APP**.
               The valid values are as follows:
               + **SESSION_DESKTOP_APP**
               + **COMMON_APP**
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server group.  
               If omitted, the AZ randomly assigned by the system is used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server group.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable server group. Defaults to **true**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               server group belong.
               This field is only valid for enterprise users, if omitted, default enterprise project will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] extra_session_size: Specifies the number of additional sessions for a single server.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The `extra_session_size` must be used together with `extra_session_type`.
               The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
               specification minus the default number of sessions in the package.
        :param pulumi.Input[_builtins.str] extra_session_type: Specifies the additional session type.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **GPU**
               + **CPU**
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server group.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppServerGroupFlavorArgs', 'AppServerGroupFlavorArgsDict']]]] flavors: The list of server flavors.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the server group.
        :param pulumi.Input[_builtins.int] image_min_disk: The minimum memory required to run the image, in MB. The default value is 0.
        :param pulumi.Input[_builtins.str] image_product_id: Specifies the image product ID of the server group.  
               This parameter is required wnen the `image_type` parameter is set to **gold**.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the server group.  
               The valid values are as follows:
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param pulumi.Input[Union['AppServerGroupIpVirtualArgs', 'AppServerGroupIpVirtualArgsDict']] ip_virtual: Specifies the IP virtualization function configuration.
               Changing this creates a new resource.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The ip_virtual structure is documented below.
               
               > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
               pre-allocated by the server is the same as the maximum number of sessions.
        :param pulumi.Input[_builtins.bool] is_vdi: Specifies the session mode of the server group. Defaults to **false**.
               + **false**: Multi-session mode.
               + **true**: Single-session mode.
               
               If the AD server is not connected, only the single-session mode is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server group.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server group.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] primary_server_group_id: Specifies the ID of the primary server group.
               Changing this creates a new resource.
               
               > 1. If this parameter is specified, the standby server is created.
               <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
               standby server groups must be consistent.
               <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
               is automatically applied to the standby server group.
        :param pulumi.Input[_builtins.str] project_name: The name of the project.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppServerGroupRoutePolicyArgs', 'AppServerGroupRoutePolicyArgsDict']] route_policy: Specifies the session scheduling policy of the server group.
               This parameter is available only wnen the `is_vdi` parameter is set to **false**.
               The route_policy structure is documented below.
               
               > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
               be automatically scheduled to other available servers.
        :param pulumi.Input[_builtins.str] storage_mount_policy: Specifies the NAS storage directory mounting policy on the APS.
               + **USER**: Only mount personal directories.
               + **SHARE**: Only mount shared directories.
               + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
               automatically mounted).
               
               <a name="app_server_group_ip_virtual"></a>
               The `ip_virtual` block supports:
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the subnet ID corresponding to the Workspace service.
        :param pulumi.Input[_builtins.int] system_disk_size: Specifies the size of system disk, in GB.  
               The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        :param pulumi.Input[_builtins.str] system_disk_type: Specifies the type of system disk.  
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the server group.
               Supports up to 20 tags.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server group belongs.
               Changing this creates a new resource.
               This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppServerGroupState.__new__(_AppServerGroupState)

        __props__.__dict__["app_type"] = app_type
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["extra_session_size"] = extra_session_size
        __props__.__dict__["extra_session_type"] = extra_session_type
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["flavors"] = flavors
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_min_disk"] = image_min_disk
        __props__.__dict__["image_product_id"] = image_product_id
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["ip_virtual"] = ip_virtual
        __props__.__dict__["is_vdi"] = is_vdi
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["ou_name"] = ou_name
        __props__.__dict__["primary_server_group_id"] = primary_server_group_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region"] = region
        __props__.__dict__["route_policy"] = route_policy
        __props__.__dict__["storage_mount_policy"] = storage_mount_policy
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["system_disk_size"] = system_disk_size
        __props__.__dict__["system_disk_type"] = system_disk_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return AppServerGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of application group associated with the server group.
        Defaults to **COMMON_APP**.
        The valid values are as follows:
        + **SESSION_DESKTOP_APP**
        + **COMMON_APP**
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the availability zone of the server group.  
        If omitted, the AZ randomly assigned by the system is used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the server group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to enable server group. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the enterprise project to which the
        server group belong.
        This field is only valid for enterprise users, if omitted, default enterprise project will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the number of additional sessions for a single server.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The `extra_session_size` must be used together with `extra_session_type`.
        The upper limit of the number of additional sessions for a single server is `10` times the number of vCPUs in the server
        specification minus the default number of sessions in the package.
        """
        return pulumi.get(self, "extra_session_size")

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the additional session type.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor ID of the server group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> pulumi.Output[Sequence['outputs.AppServerGroupFlavor']]:
        """
        The list of server flavors.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image ID of the server group.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageMinDisk")
    def image_min_disk(self) -> pulumi.Output[_builtins.int]:
        """
        The minimum memory required to run the image, in MB. The default value is 0.
        """
        return pulumi.get(self, "image_min_disk")

    @_builtins.property
    @pulumi.getter(name="imageProductId")
    def image_product_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image product ID of the server group.  
        This parameter is required wnen the `image_type` parameter is set to **gold**.
        """
        return pulumi.get(self, "image_product_id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image type of the server group.  
        The valid values are as follows:
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="ipVirtual")
    def ip_virtual(self) -> pulumi.Output[Optional['outputs.AppServerGroupIpVirtual']]:
        """
        Specifies the IP virtualization function configuration.
        Changing this creates a new resource.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The ip_virtual structure is documented below.

        > If IP virtualization is enabled, each session is assigned a different IP address. The number of virtual IP addresses
        pre-allocated by the server is the same as the maximum number of sessions.
        """
        return pulumi.get(self, "ip_virtual")

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the session mode of the server group. Defaults to **false**.
        + **false**: Multi-session mode.
        + **true**: Single-session mode.

        If the AD server is not connected, only the single-session mode is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_vdi")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the server group.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operating system type of the server group.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter(name="primaryServerGroupId")
    def primary_server_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the primary server group.
        Changing this creates a new resource.

        > 1. If this parameter is specified, the standby server is created.
        <br>2. The `os_type`, `is_vdi`, `app_type`, `ip_virtual` and `storage_mount_policy` parameters of the primary and
        standby server groups must be consistent.
        <br>3. After the `app_type` and `storage_mount_policy` parameters of the primary server group are changed, the change
        is automatically applied to the standby server group.
        """
        return pulumi.get(self, "primary_server_group_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the project.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> pulumi.Output[Optional['outputs.AppServerGroupRoutePolicy']]:
        """
        Specifies the session scheduling policy of the server group.
        This parameter is available only wnen the `is_vdi` parameter is set to **false**.
        The route_policy structure is documented below.

        > If any metric of the server exceeds the threshold, new sessions will be rejected. The sessions will
        be automatically scheduled to other available servers.
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="storageMountPolicy")
    def storage_mount_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the NAS storage directory mounting policy on the APS.
        + **USER**: Only mount personal directories.
        + **SHARE**: Only mount shared directories.
        + **ANY**: No restrictions on the mounted directories (both personal and shared NAS storage directories will be
        automatically mounted).

        <a name="app_server_group_ip_virtual"></a>
        The `ip_virtual` block supports:
        """
        return pulumi.get(self, "storage_mount_policy")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the subnet ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the size of system disk, in GB.  
        The minimum value of this parameter cannot be less than the disk size corresponding to the image.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of system disk.  
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the server group.
        Supports up to 20 tags.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID to which the server group belongs.
        Changing this creates a new resource.
        This parameter value must be the VPC ID corresponding to the Workspace service.
        """
        return pulumi.get(self, "vpc_id")

