# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppPublishmentArgs', 'AppPublishment']

@pulumi.input_type
class AppPublishmentArgs:
    def __init__(__self__, *,
                 app_group_id: pulumi.Input[_builtins.str],
                 execute_path: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.int],
                 command_param: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_index: Optional[pulumi.Input[_builtins.int]] = None,
                 icon_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sandbox_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 work_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppPublishment resource.
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the APP group ID to which the application belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] execute_path: Specifies the location where the application file is installed.
               e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        :param pulumi.Input[_builtins.int] type: Specifies the type of the application.
               Changing this creates a new resource.
               The valid values are as follows:
               + **2**: Private image APP.
               + **3**: Custom APP.
        :param pulumi.Input[_builtins.str] command_param: Specifies the command line parameter used to start the application.  
               If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
               double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.int] icon_index: Specifies the icon index of the application.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] icon_path: Specifies the path where the application icon is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name valid length is limited from `1` to `64` and cannot be all spaces.
               The name must be unique.
        :param pulumi.Input[_builtins.str] publisher: Specifies the publisher of the application.
               Changing this creates a new resource.
               If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sandbox_enable: Specifies whether to run in sandbox mode, defaults to `false`.  
               If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
               group instance. Otherwise, the application cannot be started.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_image_ids: Specifies the list of image IDs corresponding to the server instance
               to which the application belongs.
               The maximum length is `20`.
               This parameter is required and available only when the `type` is `2`.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the current status of the application, defaults to **NORMAL**.
               The valid values are as follows:
               + **NORMAL**
               + **FORBIDDEN**
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        :param pulumi.Input[_builtins.str] work_path: Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        pulumi.set(__self__, "app_group_id", app_group_id)
        pulumi.set(__self__, "execute_path", execute_path)
        pulumi.set(__self__, "type", type)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon_index is not None:
            pulumi.set(__self__, "icon_index", icon_index)
        if icon_path is not None:
            pulumi.set(__self__, "icon_path", icon_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sandbox_enable is not None:
            pulumi.set(__self__, "sandbox_enable", sandbox_enable)
        if source_image_ids is not None:
            pulumi.set(__self__, "source_image_ids", source_image_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if work_path is not None:
            pulumi.set(__self__, "work_path", work_path)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the APP group ID to which the application belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @app_group_id.setter
    def app_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_group_id", value)

    @_builtins.property
    @pulumi.getter(name="executePath")
    def execute_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the location where the application file is installed.
        e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        """
        return pulumi.get(self, "execute_path")

    @execute_path.setter
    def execute_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "execute_path", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the type of the application.
        Changing this creates a new resource.
        The valid values are as follows:
        + **2**: Private image APP.
        + **3**: Custom APP.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command line parameter used to start the application.  
        If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
        double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        """
        return pulumi.get(self, "command_param")

    @command_param.setter
    def command_param(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_param", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iconIndex")
    def icon_index(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the icon index of the application.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_index")

    @icon_index.setter
    def icon_index(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "icon_index", value)

    @_builtins.property
    @pulumi.getter(name="iconPath")
    def icon_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path where the application icon is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_path")

    @icon_path.setter
    def icon_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon_path", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The name valid length is limited from `1` to `64` and cannot be all spaces.
        The name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher of the application.
        Changing this creates a new resource.
        If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publisher", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sandboxEnable")
    def sandbox_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to run in sandbox mode, defaults to `false`.  
        If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
        group instance. Otherwise, the application cannot be started.
        """
        return pulumi.get(self, "sandbox_enable")

    @sandbox_enable.setter
    def sandbox_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sandbox_enable", value)

    @_builtins.property
    @pulumi.getter(name="sourceImageIds")
    def source_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of image IDs corresponding to the server instance
        to which the application belongs.
        The maximum length is `20`.
        This parameter is required and available only when the `type` is `2`.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "source_image_ids")

    @source_image_ids.setter
    def source_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_image_ids", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current status of the application, defaults to **NORMAL**.
        The valid values are as follows:
        + **NORMAL**
        + **FORBIDDEN**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the application.  
        If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="workPath")
    def work_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        return pulumi.get(self, "work_path")

    @work_path.setter
    def work_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_path", value)


@pulumi.input_type
class _AppPublishmentState:
    def __init__(__self__, *,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 command_param: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_index: Optional[pulumi.Input[_builtins.int]] = None,
                 icon_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 published_at: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sandbox_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 work_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppPublishment resources.
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the APP group ID to which the application belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] command_param: Specifies the command line parameter used to start the application.  
               If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
               double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] execute_path: Specifies the location where the application file is installed.
               e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        :param pulumi.Input[_builtins.int] icon_index: Specifies the icon index of the application.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] icon_path: Specifies the path where the application icon is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name valid length is limited from `1` to `64` and cannot be all spaces.
               The name must be unique.
        :param pulumi.Input[_builtins.str] published_at: The release time of the application, in RFC3339 format.
        :param pulumi.Input[_builtins.str] publisher: Specifies the publisher of the application.
               Changing this creates a new resource.
               If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sandbox_enable: Specifies whether to run in sandbox mode, defaults to `false`.  
               If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
               group instance. Otherwise, the application cannot be started.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_image_ids: Specifies the list of image IDs corresponding to the server instance
               to which the application belongs.
               The maximum length is `20`.
               This parameter is required and available only when the `type` is `2`.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the current status of the application, defaults to **NORMAL**.
               The valid values are as follows:
               + **NORMAL**
               + **FORBIDDEN**
        :param pulumi.Input[_builtins.int] type: Specifies the type of the application.
               Changing this creates a new resource.
               The valid values are as follows:
               + **2**: Private image APP.
               + **3**: Custom APP.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        :param pulumi.Input[_builtins.str] work_path: Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        if app_group_id is not None:
            pulumi.set(__self__, "app_group_id", app_group_id)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if execute_path is not None:
            pulumi.set(__self__, "execute_path", execute_path)
        if icon_index is not None:
            pulumi.set(__self__, "icon_index", icon_index)
        if icon_path is not None:
            pulumi.set(__self__, "icon_path", icon_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if published_at is not None:
            pulumi.set(__self__, "published_at", published_at)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sandbox_enable is not None:
            pulumi.set(__self__, "sandbox_enable", sandbox_enable)
        if source_image_ids is not None:
            pulumi.set(__self__, "source_image_ids", source_image_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if work_path is not None:
            pulumi.set(__self__, "work_path", work_path)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APP group ID to which the application belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @app_group_id.setter
    def app_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_group_id", value)

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command line parameter used to start the application.  
        If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
        double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        """
        return pulumi.get(self, "command_param")

    @command_param.setter
    def command_param(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_param", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="executePath")
    def execute_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the location where the application file is installed.
        e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        """
        return pulumi.get(self, "execute_path")

    @execute_path.setter
    def execute_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execute_path", value)

    @_builtins.property
    @pulumi.getter(name="iconIndex")
    def icon_index(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the icon index of the application.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_index")

    @icon_index.setter
    def icon_index(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "icon_index", value)

    @_builtins.property
    @pulumi.getter(name="iconPath")
    def icon_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path where the application icon is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_path")

    @icon_path.setter
    def icon_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon_path", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The name valid length is limited from `1` to `64` and cannot be all spaces.
        The name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The release time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "published_at")

    @published_at.setter
    def published_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "published_at", value)

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher of the application.
        Changing this creates a new resource.
        If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publisher", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sandboxEnable")
    def sandbox_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to run in sandbox mode, defaults to `false`.  
        If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
        group instance. Otherwise, the application cannot be started.
        """
        return pulumi.get(self, "sandbox_enable")

    @sandbox_enable.setter
    def sandbox_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sandbox_enable", value)

    @_builtins.property
    @pulumi.getter(name="sourceImageIds")
    def source_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of image IDs corresponding to the server instance
        to which the application belongs.
        The maximum length is `20`.
        This parameter is required and available only when the `type` is `2`.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "source_image_ids")

    @source_image_ids.setter
    def source_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_image_ids", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current status of the application, defaults to **NORMAL**.
        The valid values are as follows:
        + **NORMAL**
        + **FORBIDDEN**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the type of the application.
        Changing this creates a new resource.
        The valid values are as follows:
        + **2**: Private image APP.
        + **3**: Custom APP.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the application.  
        If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="workPath")
    def work_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        return pulumi.get(self, "work_path")

    @work_path.setter
    def work_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_path", value)


@pulumi.type_token("huaweicloud:Workspace/appPublishment:AppPublishment")
class AppPublishment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 command_param: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_index: Optional[pulumi.Input[_builtins.int]] = None,
                 icon_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sandbox_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 work_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Workspace APP pulishing resource within HuaweiCloud.

        > 1. Before using this resource, ensure that the `type` parameter of the `Workspace.AppGroup` resource
        >       must be **COMMON_APP** and `server_group_id` parameter must be set.
        >       <br>2. Deleting this resource will unpublish the APP.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        app_group_id = config.require_object("appGroupId")
        app_name = config.require_object("appName")
        execute_path = config.require_object("executePath")
        test = huaweicloud.workspace.AppPublishment("test",
            app_group_id=app_group_id,
            name=app_name,
            type=3,
            execute_path=execute_path)
        ```

        ## Import

        The resource can be imported using `app_group_id` and `name`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPublishment:AppPublishment test <app_group_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `source_image_ids`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_publishment" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_image_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the APP group ID to which the application belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] command_param: Specifies the command line parameter used to start the application.  
               If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
               double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] execute_path: Specifies the location where the application file is installed.
               e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        :param pulumi.Input[_builtins.int] icon_index: Specifies the icon index of the application.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] icon_path: Specifies the path where the application icon is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name valid length is limited from `1` to `64` and cannot be all spaces.
               The name must be unique.
        :param pulumi.Input[_builtins.str] publisher: Specifies the publisher of the application.
               Changing this creates a new resource.
               If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sandbox_enable: Specifies whether to run in sandbox mode, defaults to `false`.  
               If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
               group instance. Otherwise, the application cannot be started.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_image_ids: Specifies the list of image IDs corresponding to the server instance
               to which the application belongs.
               The maximum length is `20`.
               This parameter is required and available only when the `type` is `2`.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the current status of the application, defaults to **NORMAL**.
               The valid values are as follows:
               + **NORMAL**
               + **FORBIDDEN**
        :param pulumi.Input[_builtins.int] type: Specifies the type of the application.
               Changing this creates a new resource.
               The valid values are as follows:
               + **2**: Private image APP.
               + **3**: Custom APP.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        :param pulumi.Input[_builtins.str] work_path: Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppPublishmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace APP pulishing resource within HuaweiCloud.

        > 1. Before using this resource, ensure that the `type` parameter of the `Workspace.AppGroup` resource
        >       must be **COMMON_APP** and `server_group_id` parameter must be set.
        >       <br>2. Deleting this resource will unpublish the APP.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        app_group_id = config.require_object("appGroupId")
        app_name = config.require_object("appName")
        execute_path = config.require_object("executePath")
        test = huaweicloud.workspace.AppPublishment("test",
            app_group_id=app_group_id,
            name=app_name,
            type=3,
            execute_path=execute_path)
        ```

        ## Import

        The resource can be imported using `app_group_id` and `name`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPublishment:AppPublishment test <app_group_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `source_image_ids`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_publishment" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_image_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AppPublishmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppPublishmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 command_param: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_path: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_index: Optional[pulumi.Input[_builtins.int]] = None,
                 icon_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sandbox_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 work_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppPublishmentArgs.__new__(AppPublishmentArgs)

            if app_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_group_id'")
            __props__.__dict__["app_group_id"] = app_group_id
            __props__.__dict__["command_param"] = command_param
            __props__.__dict__["description"] = description
            if execute_path is None and not opts.urn:
                raise TypeError("Missing required property 'execute_path'")
            __props__.__dict__["execute_path"] = execute_path
            __props__.__dict__["icon_index"] = icon_index
            __props__.__dict__["icon_path"] = icon_path
            __props__.__dict__["name"] = name
            __props__.__dict__["publisher"] = publisher
            __props__.__dict__["region"] = region
            __props__.__dict__["sandbox_enable"] = sandbox_enable
            __props__.__dict__["source_image_ids"] = source_image_ids
            __props__.__dict__["status"] = status
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["version"] = version
            __props__.__dict__["work_path"] = work_path
            __props__.__dict__["published_at"] = None
        super(AppPublishment, __self__).__init__(
            'huaweicloud:Workspace/appPublishment:AppPublishment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            command_param: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            execute_path: Optional[pulumi.Input[_builtins.str]] = None,
            icon_index: Optional[pulumi.Input[_builtins.int]] = None,
            icon_path: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            published_at: Optional[pulumi.Input[_builtins.str]] = None,
            publisher: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sandbox_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            source_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.int]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            work_path: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppPublishment':
        """
        Get an existing AppPublishment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_group_id: Specifies the APP group ID to which the application belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] command_param: Specifies the command line parameter used to start the application.  
               If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
               double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] execute_path: Specifies the location where the application file is installed.
               e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        :param pulumi.Input[_builtins.int] icon_index: Specifies the icon index of the application.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] icon_path: Specifies the path where the application icon is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name valid length is limited from `1` to `64` and cannot be all spaces.
               The name must be unique.
        :param pulumi.Input[_builtins.str] published_at: The release time of the application, in RFC3339 format.
        :param pulumi.Input[_builtins.str] publisher: Specifies the publisher of the application.
               Changing this creates a new resource.
               If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sandbox_enable: Specifies whether to run in sandbox mode, defaults to `false`.  
               If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
               group instance. Otherwise, the application cannot be started.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_image_ids: Specifies the list of image IDs corresponding to the server instance
               to which the application belongs.
               The maximum length is `20`.
               This parameter is required and available only when the `type` is `2`.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the current status of the application, defaults to **NORMAL**.
               The valid values are as follows:
               + **NORMAL**
               + **FORBIDDEN**
        :param pulumi.Input[_builtins.int] type: Specifies the type of the application.
               Changing this creates a new resource.
               The valid values are as follows:
               + **2**: Private image APP.
               + **3**: Custom APP.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        :param pulumi.Input[_builtins.str] work_path: Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppPublishmentState.__new__(_AppPublishmentState)

        __props__.__dict__["app_group_id"] = app_group_id
        __props__.__dict__["command_param"] = command_param
        __props__.__dict__["description"] = description
        __props__.__dict__["execute_path"] = execute_path
        __props__.__dict__["icon_index"] = icon_index
        __props__.__dict__["icon_path"] = icon_path
        __props__.__dict__["name"] = name
        __props__.__dict__["published_at"] = published_at
        __props__.__dict__["publisher"] = publisher
        __props__.__dict__["region"] = region
        __props__.__dict__["sandbox_enable"] = sandbox_enable
        __props__.__dict__["source_image_ids"] = source_image_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        __props__.__dict__["work_path"] = work_path
        return AppPublishment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the APP group ID to which the application belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the command line parameter used to start the application.  
        If the `sandbox_enable` is set to `true`, the path of the APP to be started must be enclosed in
        double quotation marks (""), e.g. `/box:DefaultBox "C:\\Program Files\\Internet Explorer\\iexplore.exe"`.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="executePath")
    def execute_path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the location where the application file is installed.
        e.g. `C:\\Program Files\\Internet Explorer\\iexplore.exe`.
        """
        return pulumi.get(self, "execute_path")

    @_builtins.property
    @pulumi.getter(name="iconIndex")
    def icon_index(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the icon index of the application.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_index")

    @_builtins.property
    @pulumi.getter(name="iconPath")
    def icon_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the path where the application icon is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "icon_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the application.  
        The name valid length is limited from `1` to `64` and cannot be all spaces.
        The name must be unique.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> pulumi.Output[_builtins.str]:
        """
        The release time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "published_at")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the publisher of the application.
        Changing this creates a new resource.
        If the `sandbox_enable` is set to `true`, this parameter value is the publisher of the sandboxed application.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sandboxEnable")
    def sandbox_enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to run in sandbox mode, defaults to `false`.  
        If you want to set `true`, please ensure that the application sandbox software has been installed on the associated server
        group instance. Otherwise, the application cannot be started.
        """
        return pulumi.get(self, "sandbox_enable")

    @_builtins.property
    @pulumi.getter(name="sourceImageIds")
    def source_image_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of image IDs corresponding to the server instance
        to which the application belongs.
        The maximum length is `20`.
        This parameter is required and available only when the `type` is `2`.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "source_image_ids")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the current status of the application, defaults to **NORMAL**.
        The valid values are as follows:
        + **NORMAL**
        + **FORBIDDEN**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the type of the application.
        Changing this creates a new resource.
        The valid values are as follows:
        + **2**: Private image APP.
        + **3**: Custom APP.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the version of the application.  
        If the `sandbox_enable` is set to `true`, this parameter value is the version of the sandboxed application.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workPath")
    def work_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the publisher of the application, e.g. `C:\\Program Files\\Internet Explorer`.
        """
        return pulumi.get(self, "work_path")

