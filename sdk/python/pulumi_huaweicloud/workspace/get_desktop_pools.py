# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDesktopPoolsResult',
    'AwaitableGetDesktopPoolsResult',
    'get_desktop_pools',
    'get_desktop_pools_output',
]

@pulumi.output_type
class GetDesktopPoolsResult:
    """
    A collection of values returned by getDesktopPools.
    """
    def __init__(__self__, desktop_pools=None, enterprise_project_id=None, id=None, in_maintenance_mode=None, name=None, region=None, type=None):
        if desktop_pools and not isinstance(desktop_pools, list):
            raise TypeError("Expected argument 'desktop_pools' to be a list")
        pulumi.set(__self__, "desktop_pools", desktop_pools)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_maintenance_mode and not isinstance(in_maintenance_mode, bool):
            raise TypeError("Expected argument 'in_maintenance_mode' to be a bool")
        pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="desktopPools")
    def desktop_pools(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolResult']:
        """
        The list of desktop pools.
        The desktop_pools structure is documented below.
        """
        return pulumi.get(self, "desktop_pools")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> Optional[_builtins.bool]:
        """
        Whether the desktop pool is in maintenance mode.
        """
        return pulumi.get(self, "in_maintenance_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the desktop pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The volume type.
        """
        return pulumi.get(self, "type")


class AwaitableGetDesktopPoolsResult(GetDesktopPoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDesktopPoolsResult(
            desktop_pools=self.desktop_pools,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            in_maintenance_mode=self.in_maintenance_mode,
            name=self.name,
            region=self.region,
            type=self.type)


def get_desktop_pools(enterprise_project_id: Optional[_builtins.str] = None,
                      in_maintenance_mode: Optional[_builtins.bool] = None,
                      name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDesktopPoolsResult:
    """
    Use this data source to query desktop pools within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_pool_name = config.require_object("desktopPoolName")
    test = huaweicloud.Workspace.get_desktop_pools(name=desktop_pool_name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the desktop pool belongs.  
           For enterprise users, if omitted, all enterprise project resources will be queried.
    :param _builtins.bool in_maintenance_mode: Specifies whether the desktop pool is in maintenance mode.
           Defaults to **true**.
    :param _builtins.str name: Specifies the name of the desktop pool.
    :param _builtins.str region: Specifies the region in which to obtain the desktop pools.
    :param _builtins.str type: Specifies the type of the desktop pool.  
           The valid values are as follows:
           + **DYNAMIC**
           + **STATIC**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['inMaintenanceMode'] = in_maintenance_mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getDesktopPools:getDesktopPools', __args__, opts=opts, typ=GetDesktopPoolsResult).value

    return AwaitableGetDesktopPoolsResult(
        desktop_pools=pulumi.get(__ret__, 'desktop_pools'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        in_maintenance_mode=pulumi.get(__ret__, 'in_maintenance_mode'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_desktop_pools_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             in_maintenance_mode: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDesktopPoolsResult]:
    """
    Use this data source to query desktop pools within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_pool_name = config.require_object("desktopPoolName")
    test = huaweicloud.Workspace.get_desktop_pools(name=desktop_pool_name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the desktop pool belongs.  
           For enterprise users, if omitted, all enterprise project resources will be queried.
    :param _builtins.bool in_maintenance_mode: Specifies whether the desktop pool is in maintenance mode.
           Defaults to **true**.
    :param _builtins.str name: Specifies the name of the desktop pool.
    :param _builtins.str region: Specifies the region in which to obtain the desktop pools.
    :param _builtins.str type: Specifies the type of the desktop pool.  
           The valid values are as follows:
           + **DYNAMIC**
           + **STATIC**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['inMaintenanceMode'] = in_maintenance_mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getDesktopPools:getDesktopPools', __args__, opts=opts, typ=GetDesktopPoolsResult)
    return __ret__.apply(lambda __response__: GetDesktopPoolsResult(
        desktop_pools=pulumi.get(__response__, 'desktop_pools'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        in_maintenance_mode=pulumi.get(__response__, 'in_maintenance_mode'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
