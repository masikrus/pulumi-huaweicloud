# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppSharedFolderArgs', 'AppSharedFolder']

@pulumi.input_type
class AppSharedFolderArgs:
    def __init__(__self__, *,
                 storage_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppSharedFolder resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the shared folder belongs.  
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the shared folder.  
               The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
               allowed, but cannot be all spaces or start with the space.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the shared folder is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        pulumi.set(__self__, "storage_id", storage_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the NAS storage ID to which the shared folder belongs.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

    @storage_id.setter
    def storage_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the shared folder.  
        The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
        allowed, but cannot be all spaces or start with the space.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the shared folder is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppSharedFolderState:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppSharedFolder resources.
        :param pulumi.Input[_builtins.str] delimiter: The delimiter that the shared folder path used.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the shared folder.  
               The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
               allowed, but cannot be all spaces or start with the space.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] path: The path of the shared folder, the usual format is: **{root_path}{delimiter}{folder_name}{delimiter}**,
               such as **shares/xxx/**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the shared folder is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the shared folder belongs.  
               Change this parameter will create a new resource.
        """
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_id is not None:
            pulumi.set(__self__, "storage_id", storage_id)

    @_builtins.property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The delimiter that the shared folder path used.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delimiter", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the shared folder.  
        The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
        allowed, but cannot be all spaces or start with the space.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path of the shared folder, the usual format is: **{root_path}{delimiter}{folder_name}{delimiter}**,
        such as **shares/xxx/**.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the shared folder is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the NAS storage ID to which the shared folder belongs.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

    @storage_id.setter
    def storage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_id", value)


@pulumi.type_token("huaweicloud:Workspace/appSharedFolder:AppSharedFolder")
class AppSharedFolder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a shared folder resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nas_storage_id = config.require_object("nasStorageId")
        shared_folder_name = config.require_object("sharedFolderName")
        test = huaweicloud.workspace.AppSharedFolder("test",
            storage_id=nas_storage_id,
            name=shared_folder_name)
        ```

        ## Import

        Shared folders can be imported using their related `storage_id` and `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appSharedFolder:AppSharedFolder test <storage_id>/<id>
        ```

        If the NAS storage ID or shared folder ID is unknow, its corresponding name can be used as an alternative to ID.

        The NAS storage name can be obtained through the console or data source (`huaweicloud_workspace_app_nas_storages`).

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appSharedFolder:AppSharedFolder test <storage_name>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the shared folder.  
               The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
               allowed, but cannot be all spaces or start with the space.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the shared folder is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the shared folder belongs.  
               Change this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSharedFolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a shared folder resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nas_storage_id = config.require_object("nasStorageId")
        shared_folder_name = config.require_object("sharedFolderName")
        test = huaweicloud.workspace.AppSharedFolder("test",
            storage_id=nas_storage_id,
            name=shared_folder_name)
        ```

        ## Import

        Shared folders can be imported using their related `storage_id` and `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appSharedFolder:AppSharedFolder test <storage_id>/<id>
        ```

        If the NAS storage ID or shared folder ID is unknow, its corresponding name can be used as an alternative to ID.

        The NAS storage name can be obtained through the console or data source (`huaweicloud_workspace_app_nas_storages`).

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appSharedFolder:AppSharedFolder test <storage_name>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param AppSharedFolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSharedFolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSharedFolderArgs.__new__(AppSharedFolderArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if storage_id is None and not opts.urn:
                raise TypeError("Missing required property 'storage_id'")
            __props__.__dict__["storage_id"] = storage_id
            __props__.__dict__["delimiter"] = None
            __props__.__dict__["path"] = None
        super(AppSharedFolder, __self__).__init__(
            'huaweicloud:Workspace/appSharedFolder:AppSharedFolder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delimiter: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            storage_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppSharedFolder':
        """
        Get an existing AppSharedFolder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] delimiter: The delimiter that the shared folder path used.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the shared folder.  
               The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
               allowed, but cannot be all spaces or start with the space.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] path: The path of the shared folder, the usual format is: **{root_path}{delimiter}{folder_name}{delimiter}**,
               such as **shares/xxx/**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the shared folder is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the shared folder belongs.  
               Change this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSharedFolderState.__new__(_AppSharedFolderState)

        __props__.__dict__["delimiter"] = delimiter
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["region"] = region
        __props__.__dict__["storage_id"] = storage_id
        return AppSharedFolder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def delimiter(self) -> pulumi.Output[_builtins.str]:
        """
        The delimiter that the shared folder path used.
        """
        return pulumi.get(self, "delimiter")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the shared folder.  
        The valid length is limited from `1` to `32`, only letters, digits, spaces, underscores (_) and hyphens (-) are
        allowed, but cannot be all spaces or start with the space.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        The path of the shared folder, the usual format is: **{root_path}{delimiter}{folder_name}{delimiter}**,
        such as **shares/xxx/**.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the shared folder is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the NAS storage ID to which the shared folder belongs.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

