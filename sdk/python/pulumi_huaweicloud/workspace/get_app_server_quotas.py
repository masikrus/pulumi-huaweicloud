# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppServerQuotasResult',
    'AwaitableGetAppServerQuotasResult',
    'get_app_server_quotas',
    'get_app_server_quotas_output',
]

@pulumi.output_type
class GetAppServerQuotasResult:
    """
    A collection of values returned by getAppServerQuotas.
    """
    def __init__(__self__, cluster_id=None, deh_id=None, disk_num=None, disk_size=None, flavor_id=None, id=None, is_enough=None, is_period=None, product_id=None, quotas=None, region=None, subscription_num=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if deh_id and not isinstance(deh_id, str):
            raise TypeError("Expected argument 'deh_id' to be a str")
        pulumi.set(__self__, "deh_id", deh_id)
        if disk_num and not isinstance(disk_num, int):
            raise TypeError("Expected argument 'disk_num' to be a int")
        pulumi.set(__self__, "disk_num", disk_num)
        if disk_size and not isinstance(disk_size, int):
            raise TypeError("Expected argument 'disk_size' to be a int")
        pulumi.set(__self__, "disk_size", disk_size)
        if flavor_id and not isinstance(flavor_id, str):
            raise TypeError("Expected argument 'flavor_id' to be a str")
        pulumi.set(__self__, "flavor_id", flavor_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enough and not isinstance(is_enough, bool):
            raise TypeError("Expected argument 'is_enough' to be a bool")
        pulumi.set(__self__, "is_enough", is_enough)
        if is_period and not isinstance(is_period, bool):
            raise TypeError("Expected argument 'is_period' to be a bool")
        pulumi.set(__self__, "is_period", is_period)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subscription_num and not isinstance(subscription_num, int):
            raise TypeError("Expected argument 'subscription_num' to be a int")
        pulumi.set(__self__, "subscription_num", subscription_num)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="dehId")
    def deh_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "deh_id")

    @_builtins.property
    @pulumi.getter(name="diskNum")
    def disk_num(self) -> _builtins.int:
        return pulumi.get(self, "disk_num")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.int:
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isEnough")
    def is_enough(self) -> _builtins.bool:
        """
        Whether the quota is sufficient.
        """
        return pulumi.get(self, "is_enough")

    @_builtins.property
    @pulumi.getter(name="isPeriod")
    def is_period(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_period")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetAppServerQuotasQuotaResult']:
        """
        The list of the quotas that match the filter parameters.  
        The quotas structure is documented below.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subscriptionNum")
    def subscription_num(self) -> _builtins.int:
        return pulumi.get(self, "subscription_num")


class AwaitableGetAppServerQuotasResult(GetAppServerQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppServerQuotasResult(
            cluster_id=self.cluster_id,
            deh_id=self.deh_id,
            disk_num=self.disk_num,
            disk_size=self.disk_size,
            flavor_id=self.flavor_id,
            id=self.id,
            is_enough=self.is_enough,
            is_period=self.is_period,
            product_id=self.product_id,
            quotas=self.quotas,
            region=self.region,
            subscription_num=self.subscription_num)


def get_app_server_quotas(cluster_id: Optional[_builtins.str] = None,
                          deh_id: Optional[_builtins.str] = None,
                          disk_num: Optional[_builtins.int] = None,
                          disk_size: Optional[_builtins.int] = None,
                          flavor_id: Optional[_builtins.str] = None,
                          is_period: Optional[_builtins.bool] = None,
                          product_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          subscription_num: Optional[_builtins.int] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppServerQuotasResult:
    """
    Use this data source to get the quota list of Workspace APP server within HuaweiCloud.

    ## Example Usage

    ### Query all quotas under specified product ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.Workspace.get_app_server_quotas(product_id=product_id,
        subscription_num=1,
        disk_size=80,
        disk_num=2)
    ```

    ### Query quotas under specified product ID by flavor ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    flavor_id = config.require_object("flavorId")
    advanced = huaweicloud.Workspace.get_app_server_quotas(product_id=product_id,
        subscription_num=1,
        disk_size=80,
        disk_num=2,
        flavor_id=flavor_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the cloud dedicated distributed storage pool.
    :param _builtins.str deh_id: Specifies the ID of the dedicated host.
    :param _builtins.int disk_num: Specifies the number of disks for the single server instance to be queried.  
           The valid value ranges from `1` to `11`.
    :param _builtins.int disk_size: Specifies the disk size of the single server instance to be queried.
    :param _builtins.str flavor_id: Specifies the ID of the flavor to be queried.
    :param _builtins.bool is_period: Specifies whether the instance is prepaid.  
           Defaults to **false**.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
    :param _builtins.str region: Specifies the region where the Workspace APP server quotas are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.int subscription_num: Specifies the number of server instances to be queried.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['dehId'] = deh_id
    __args__['diskNum'] = disk_num
    __args__['diskSize'] = disk_size
    __args__['flavorId'] = flavor_id
    __args__['isPeriod'] = is_period
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['subscriptionNum'] = subscription_num
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppServerQuotas:getAppServerQuotas', __args__, opts=opts, typ=GetAppServerQuotasResult).value

    return AwaitableGetAppServerQuotasResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        deh_id=pulumi.get(__ret__, 'deh_id'),
        disk_num=pulumi.get(__ret__, 'disk_num'),
        disk_size=pulumi.get(__ret__, 'disk_size'),
        flavor_id=pulumi.get(__ret__, 'flavor_id'),
        id=pulumi.get(__ret__, 'id'),
        is_enough=pulumi.get(__ret__, 'is_enough'),
        is_period=pulumi.get(__ret__, 'is_period'),
        product_id=pulumi.get(__ret__, 'product_id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'),
        subscription_num=pulumi.get(__ret__, 'subscription_num'))
def get_app_server_quotas_output(cluster_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 deh_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 disk_num: Optional[pulumi.Input[_builtins.int]] = None,
                                 disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                                 flavor_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 is_period: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 subscription_num: Optional[pulumi.Input[_builtins.int]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppServerQuotasResult]:
    """
    Use this data source to get the quota list of Workspace APP server within HuaweiCloud.

    ## Example Usage

    ### Query all quotas under specified product ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.Workspace.get_app_server_quotas(product_id=product_id,
        subscription_num=1,
        disk_size=80,
        disk_num=2)
    ```

    ### Query quotas under specified product ID by flavor ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    flavor_id = config.require_object("flavorId")
    advanced = huaweicloud.Workspace.get_app_server_quotas(product_id=product_id,
        subscription_num=1,
        disk_size=80,
        disk_num=2,
        flavor_id=flavor_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the cloud dedicated distributed storage pool.
    :param _builtins.str deh_id: Specifies the ID of the dedicated host.
    :param _builtins.int disk_num: Specifies the number of disks for the single server instance to be queried.  
           The valid value ranges from `1` to `11`.
    :param _builtins.int disk_size: Specifies the disk size of the single server instance to be queried.
    :param _builtins.str flavor_id: Specifies the ID of the flavor to be queried.
    :param _builtins.bool is_period: Specifies whether the instance is prepaid.  
           Defaults to **false**.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
    :param _builtins.str region: Specifies the region where the Workspace APP server quotas are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.int subscription_num: Specifies the number of server instances to be queried.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['dehId'] = deh_id
    __args__['diskNum'] = disk_num
    __args__['diskSize'] = disk_size
    __args__['flavorId'] = flavor_id
    __args__['isPeriod'] = is_period
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['subscriptionNum'] = subscription_num
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppServerQuotas:getAppServerQuotas', __args__, opts=opts, typ=GetAppServerQuotasResult)
    return __ret__.apply(lambda __response__: GetAppServerQuotasResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        deh_id=pulumi.get(__response__, 'deh_id'),
        disk_num=pulumi.get(__response__, 'disk_num'),
        disk_size=pulumi.get(__response__, 'disk_size'),
        flavor_id=pulumi.get(__response__, 'flavor_id'),
        id=pulumi.get(__response__, 'id'),
        is_enough=pulumi.get(__response__, 'is_enough'),
        is_period=pulumi.get(__response__, 'is_period'),
        product_id=pulumi.get(__response__, 'product_id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region'),
        subscription_num=pulumi.get(__response__, 'subscription_num')))
