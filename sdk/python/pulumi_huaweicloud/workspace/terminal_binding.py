# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TerminalBindingArgs', 'TerminalBinding']

@pulumi.input_type
class TerminalBindingArgs:
    def __init__(__self__, *,
                 bindings: pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]],
                 disabled_after_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TerminalBinding resource.
        :param pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]] bindings: Specifies the terminal bindings configuration between MAC addresses and desktops.
               The blacklist structure is documented below.
        :param pulumi.Input[_builtins.bool] disabled_after_delete: Specifies whether disabled the binding function before destroy resource.
               Defaults to **true**.
               
               <a name="terminal_bindings_args"></a>
               The `bindings` block supports:
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether bindings are available.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktops (to be bound to the MAC address) are located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "bindings", bindings)
        if disabled_after_delete is not None:
            pulumi.set(__self__, "disabled_after_delete", disabled_after_delete)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]]:
        """
        Specifies the terminal bindings configuration between MAC addresses and desktops.
        The blacklist structure is documented below.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]]):
        pulumi.set(self, "bindings", value)

    @_builtins.property
    @pulumi.getter(name="disabledAfterDelete")
    def disabled_after_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether disabled the binding function before destroy resource.
        Defaults to **true**.

        <a name="terminal_bindings_args"></a>
        The `bindings` block supports:
        """
        return pulumi.get(self, "disabled_after_delete")

    @disabled_after_delete.setter
    def disabled_after_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled_after_delete", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether bindings are available.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktops (to be bound to the MAC address) are located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TerminalBindingState:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]]] = None,
                 disabled_after_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TerminalBinding resources.
        :param pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]] bindings: Specifies the terminal bindings configuration between MAC addresses and desktops.
               The blacklist structure is documented below.
        :param pulumi.Input[_builtins.bool] disabled_after_delete: Specifies whether disabled the binding function before destroy resource.
               Defaults to **true**.
               
               <a name="terminal_bindings_args"></a>
               The `bindings` block supports:
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether bindings are available.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktops (to be bound to the MAC address) are located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if disabled_after_delete is not None:
            pulumi.set(__self__, "disabled_after_delete", disabled_after_delete)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]]]:
        """
        Specifies the terminal bindings configuration between MAC addresses and desktops.
        The blacklist structure is documented below.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TerminalBindingBindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @_builtins.property
    @pulumi.getter(name="disabledAfterDelete")
    def disabled_after_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether disabled the binding function before destroy resource.
        Defaults to **true**.

        <a name="terminal_bindings_args"></a>
        The `bindings` block supports:
        """
        return pulumi.get(self, "disabled_after_delete")

    @disabled_after_delete.setter
    def disabled_after_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled_after_delete", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether bindings are available.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktops (to be bound to the MAC address) are located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Workspace/terminalBinding:TerminalBinding")
class TerminalBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TerminalBindingBindingArgs', 'TerminalBindingBindingArgsDict']]]]] = None,
                 disabled_after_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages the terminal bindings between MAC addresses and desktops within HuaweiCloud.

        > Only one resource can be created in a region.

        ## Example Usage

        ### Allow a machine to remote the desktops

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_name = config.require_object("desktopName")
        test = huaweicloud.workspace.TerminalBinding("test",
            enabled=True,
            disabled_after_delete=True,
            bindings=[{
                "desktop_name": desktop_name,
                "mac": "FA-16-3E-E2-3A-1D",
            }])
        ```

        ## Import

        Bindings can be imported using the resource `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/terminalBinding:TerminalBinding test <id>
        ```

        Also you can using any UUID string to replace this ID in the import phase.

        Note that the imported state may not be identical to your resource definition, because of parameter

        `disabled_after_delete` is not a remote parameter.

        It is generally recommended running `pulumi preview` after importing resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TerminalBindingBindingArgs', 'TerminalBindingBindingArgsDict']]]] bindings: Specifies the terminal bindings configuration between MAC addresses and desktops.
               The blacklist structure is documented below.
        :param pulumi.Input[_builtins.bool] disabled_after_delete: Specifies whether disabled the binding function before destroy resource.
               Defaults to **true**.
               
               <a name="terminal_bindings_args"></a>
               The `bindings` block supports:
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether bindings are available.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktops (to be bound to the MAC address) are located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TerminalBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the terminal bindings between MAC addresses and desktops within HuaweiCloud.

        > Only one resource can be created in a region.

        ## Example Usage

        ### Allow a machine to remote the desktops

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_name = config.require_object("desktopName")
        test = huaweicloud.workspace.TerminalBinding("test",
            enabled=True,
            disabled_after_delete=True,
            bindings=[{
                "desktop_name": desktop_name,
                "mac": "FA-16-3E-E2-3A-1D",
            }])
        ```

        ## Import

        Bindings can be imported using the resource `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/terminalBinding:TerminalBinding test <id>
        ```

        Also you can using any UUID string to replace this ID in the import phase.

        Note that the imported state may not be identical to your resource definition, because of parameter

        `disabled_after_delete` is not a remote parameter.

        It is generally recommended running `pulumi preview` after importing resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated.

        :param str resource_name: The name of the resource.
        :param TerminalBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TerminalBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TerminalBindingBindingArgs', 'TerminalBindingBindingArgsDict']]]]] = None,
                 disabled_after_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TerminalBindingArgs.__new__(TerminalBindingArgs)

            if bindings is None and not opts.urn:
                raise TypeError("Missing required property 'bindings'")
            __props__.__dict__["bindings"] = bindings
            __props__.__dict__["disabled_after_delete"] = disabled_after_delete
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["region"] = region
        super(TerminalBinding, __self__).__init__(
            'huaweicloud:Workspace/terminalBinding:TerminalBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TerminalBindingBindingArgs', 'TerminalBindingBindingArgsDict']]]]] = None,
            disabled_after_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'TerminalBinding':
        """
        Get an existing TerminalBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TerminalBindingBindingArgs', 'TerminalBindingBindingArgsDict']]]] bindings: Specifies the terminal bindings configuration between MAC addresses and desktops.
               The blacklist structure is documented below.
        :param pulumi.Input[_builtins.bool] disabled_after_delete: Specifies whether disabled the binding function before destroy resource.
               Defaults to **true**.
               
               <a name="terminal_bindings_args"></a>
               The `bindings` block supports:
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether bindings are available.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktops (to be bound to the MAC address) are located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TerminalBindingState.__new__(_TerminalBindingState)

        __props__.__dict__["bindings"] = bindings
        __props__.__dict__["disabled_after_delete"] = disabled_after_delete
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["region"] = region
        return TerminalBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> pulumi.Output[Sequence['outputs.TerminalBindingBinding']]:
        """
        Specifies the terminal bindings configuration between MAC addresses and desktops.
        The blacklist structure is documented below.
        """
        return pulumi.get(self, "bindings")

    @_builtins.property
    @pulumi.getter(name="disabledAfterDelete")
    def disabled_after_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether disabled the binding function before destroy resource.
        Defaults to **true**.

        <a name="terminal_bindings_args"></a>
        The `bindings` block supports:
        """
        return pulumi.get(self, "disabled_after_delete")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether bindings are available.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the desktops (to be bound to the MAC address) are located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

