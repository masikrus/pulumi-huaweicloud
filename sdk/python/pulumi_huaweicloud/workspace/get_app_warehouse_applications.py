# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppWarehouseApplicationsResult',
    'AwaitableGetAppWarehouseApplicationsResult',
    'get_app_warehouse_applications',
    'get_app_warehouse_applications_output',
]

@pulumi.output_type
class GetAppWarehouseApplicationsResult:
    """
    A collection of values returned by getAppWarehouseApplications.
    """
    def __init__(__self__, app_id=None, applications=None, category=None, id=None, name=None, region=None, verify_status=None):
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if verify_status and not isinstance(verify_status, str):
            raise TypeError("Expected argument 'verify_status' to be a str")
        pulumi.set(__self__, "verify_status", verify_status)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[_builtins.str]:
        """
        The ID of the application.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetAppWarehouseApplicationsApplicationResult']:
        """
        All applications that match the filter parameters.  
        The applications structure is documented below.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        """
        The category of the application.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="verifyStatus")
    def verify_status(self) -> Optional[_builtins.str]:
        """
        The verification status of the application.
        """
        return pulumi.get(self, "verify_status")


class AwaitableGetAppWarehouseApplicationsResult(GetAppWarehouseApplicationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppWarehouseApplicationsResult(
            app_id=self.app_id,
            applications=self.applications,
            category=self.category,
            id=self.id,
            name=self.name,
            region=self.region,
            verify_status=self.verify_status)


def get_app_warehouse_applications(app_id: Optional[_builtins.str] = None,
                                   category: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   verify_status: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppWarehouseApplicationsResult:
    """
    Use this data source to get warehouse application list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    application_id = config.require_object("applicationId")
    test = huaweicloud.Workspace.get_app_warehouse_applications(app_id=application_id)
    ```


    :param _builtins.str app_id: Specifies the ID of the application.
    :param _builtins.str category: Specifies the category of the application.  
           The valid values are as follows:
           + **GAME**
           + **SECURE_STORAGE**
           + **MULTIMEDIA_AND_CODING**
           + **PROJECT_MANAGEMENT**
           + **PRODUCTIVITY_AND_COLLABORATION**
           + **GRAPHIC_DESIGN**
           + **OTHER**
    :param _builtins.str name: Specifies the name of the application.  
           Fuzzy matching is supported.
    :param _builtins.str region: Specifies the region where the warehouse applications are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str verify_status: Specifies the verification status of the application.  
           The valid values are as follows:
           + **VERIFIED** - Verification passed.
           + **VERIFY_FAILED** - Verification failed.
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['category'] = category
    __args__['name'] = name
    __args__['region'] = region
    __args__['verifyStatus'] = verify_status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppWarehouseApplications:getAppWarehouseApplications', __args__, opts=opts, typ=GetAppWarehouseApplicationsResult).value

    return AwaitableGetAppWarehouseApplicationsResult(
        app_id=pulumi.get(__ret__, 'app_id'),
        applications=pulumi.get(__ret__, 'applications'),
        category=pulumi.get(__ret__, 'category'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        verify_status=pulumi.get(__ret__, 'verify_status'))
def get_app_warehouse_applications_output(app_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          verify_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppWarehouseApplicationsResult]:
    """
    Use this data source to get warehouse application list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    application_id = config.require_object("applicationId")
    test = huaweicloud.Workspace.get_app_warehouse_applications(app_id=application_id)
    ```


    :param _builtins.str app_id: Specifies the ID of the application.
    :param _builtins.str category: Specifies the category of the application.  
           The valid values are as follows:
           + **GAME**
           + **SECURE_STORAGE**
           + **MULTIMEDIA_AND_CODING**
           + **PROJECT_MANAGEMENT**
           + **PRODUCTIVITY_AND_COLLABORATION**
           + **GRAPHIC_DESIGN**
           + **OTHER**
    :param _builtins.str name: Specifies the name of the application.  
           Fuzzy matching is supported.
    :param _builtins.str region: Specifies the region where the warehouse applications are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str verify_status: Specifies the verification status of the application.  
           The valid values are as follows:
           + **VERIFIED** - Verification passed.
           + **VERIFY_FAILED** - Verification failed.
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['category'] = category
    __args__['name'] = name
    __args__['region'] = region
    __args__['verifyStatus'] = verify_status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppWarehouseApplications:getAppWarehouseApplications', __args__, opts=opts, typ=GetAppWarehouseApplicationsResult)
    return __ret__.apply(lambda __response__: GetAppWarehouseApplicationsResult(
        app_id=pulumi.get(__response__, 'app_id'),
        applications=pulumi.get(__response__, 'applications'),
        category=pulumi.get(__response__, 'category'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        verify_status=pulumi.get(__response__, 'verify_status')))
