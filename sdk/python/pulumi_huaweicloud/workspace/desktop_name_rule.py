# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DesktopNameRuleArgs', 'DesktopNameRule']

@pulumi.input_type
class DesktopNameRuleArgs:
    def __init__(__self__, *,
                 digit_number: pulumi.Input[_builtins.int],
                 name_prefix: pulumi.Input[_builtins.str],
                 single_domain_user_increment: pulumi.Input[_builtins.int],
                 start_number: pulumi.Input[_builtins.int],
                 is_default_policy: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DesktopNameRule resource.
        :param pulumi.Input[_builtins.int] digit_number: Specifies the number of valid digits in the desktop name suffix.
               The valid value is range from `1` to `5`.
        :param pulumi.Input[_builtins.str] name_prefix: Specifies the prefix of desktop name.
               The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
               The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
               If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
               the rule doesn't contain user name.
               The former format can't be used for desktop pool, and the latter can be used in all scenarios.
               
               > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
               The desktop name format are as follows:
               Include user name: `A+username+B+1`.
               Without user name: `A+1`.
        :param pulumi.Input[_builtins.int] single_domain_user_increment: Specifies whether to increment by single user name.
               The valid values are as follows:
               + **1**: Increment by single user name.
               + **0**: Increment by tenant.
               
               e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
               The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
               If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
               If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.
               
               > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        :param pulumi.Input[_builtins.int] start_number: Specifies the start number of the desktop name suffix.
               The value is related to the `digit_number` parameter.
               If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
               If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        :param pulumi.Input[_builtins.bool] is_default_policy: Specifies whether to set as default rule. The default value is **false**.
               
               > Only one default policy is allowed. If the current resource is set as the default policy, the value of
               `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
               please modify the corresponding script simultaneously, otherwise it will cause changes.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
               The name must start with a letter or an underscore.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "digit_number", digit_number)
        pulumi.set(__self__, "name_prefix", name_prefix)
        pulumi.set(__self__, "single_domain_user_increment", single_domain_user_increment)
        pulumi.set(__self__, "start_number", start_number)
        if is_default_policy is not None:
            pulumi.set(__self__, "is_default_policy", is_default_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="digitNumber")
    def digit_number(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of valid digits in the desktop name suffix.
        The valid value is range from `1` to `5`.
        """
        return pulumi.get(self, "digit_number")

    @digit_number.setter
    def digit_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "digit_number", value)

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the prefix of desktop name.
        The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
        The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
        If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
        the rule doesn't contain user name.
        The former format can't be used for desktop pool, and the latter can be used in all scenarios.

        > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
        The desktop name format are as follows:
        Include user name: `A+username+B+1`.
        Without user name: `A+1`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_prefix", value)

    @_builtins.property
    @pulumi.getter(name="singleDomainUserIncrement")
    def single_domain_user_increment(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies whether to increment by single user name.
        The valid values are as follows:
        + **1**: Increment by single user name.
        + **0**: Increment by tenant.

        e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
        The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
        If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
        If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.

        > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        """
        return pulumi.get(self, "single_domain_user_increment")

    @single_domain_user_increment.setter
    def single_domain_user_increment(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "single_domain_user_increment", value)

    @_builtins.property
    @pulumi.getter(name="startNumber")
    def start_number(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the start number of the desktop name suffix.
        The value is related to the `digit_number` parameter.
        If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
        If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        return pulumi.get(self, "start_number")

    @start_number.setter
    def start_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "start_number", value)

    @_builtins.property
    @pulumi.getter(name="isDefaultPolicy")
    def is_default_policy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to set as default rule. The default value is **false**.

        > Only one default policy is allowed. If the current resource is set as the default policy, the value of
        `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
        please modify the corresponding script simultaneously, otherwise it will cause changes.
        """
        return pulumi.get(self, "is_default_policy")

    @is_default_policy.setter
    def is_default_policy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the rule.
        The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
        The name must start with a letter or an underscore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DesktopNameRuleState:
    def __init__(__self__, *,
                 digit_number: Optional[pulumi.Input[_builtins.int]] = None,
                 is_contain_user: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_default_policy: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_user_increment: Optional[pulumi.Input[_builtins.int]] = None,
                 start_number: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering DesktopNameRule resources.
        :param pulumi.Input[_builtins.int] digit_number: Specifies the number of valid digits in the desktop name suffix.
               The valid value is range from `1` to `5`.
        :param pulumi.Input[_builtins.bool] is_contain_user: Whether the desktop name contains the user name.
        :param pulumi.Input[_builtins.bool] is_default_policy: Specifies whether to set as default rule. The default value is **false**.
               
               > Only one default policy is allowed. If the current resource is set as the default policy, the value of
               `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
               please modify the corresponding script simultaneously, otherwise it will cause changes.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
               The name must start with a letter or an underscore.
        :param pulumi.Input[_builtins.str] name_prefix: Specifies the prefix of desktop name.
               The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
               The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
               If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
               the rule doesn't contain user name.
               The former format can't be used for desktop pool, and the latter can be used in all scenarios.
               
               > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
               The desktop name format are as follows:
               Include user name: `A+username+B+1`.
               Without user name: `A+1`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] single_domain_user_increment: Specifies whether to increment by single user name.
               The valid values are as follows:
               + **1**: Increment by single user name.
               + **0**: Increment by tenant.
               
               e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
               The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
               If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
               If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.
               
               > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        :param pulumi.Input[_builtins.int] start_number: Specifies the start number of the desktop name suffix.
               The value is related to the `digit_number` parameter.
               If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
               If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        if digit_number is not None:
            pulumi.set(__self__, "digit_number", digit_number)
        if is_contain_user is not None:
            pulumi.set(__self__, "is_contain_user", is_contain_user)
        if is_default_policy is not None:
            pulumi.set(__self__, "is_default_policy", is_default_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if single_domain_user_increment is not None:
            pulumi.set(__self__, "single_domain_user_increment", single_domain_user_increment)
        if start_number is not None:
            pulumi.set(__self__, "start_number", start_number)

    @_builtins.property
    @pulumi.getter(name="digitNumber")
    def digit_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of valid digits in the desktop name suffix.
        The valid value is range from `1` to `5`.
        """
        return pulumi.get(self, "digit_number")

    @digit_number.setter
    def digit_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "digit_number", value)

    @_builtins.property
    @pulumi.getter(name="isContainUser")
    def is_contain_user(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the desktop name contains the user name.
        """
        return pulumi.get(self, "is_contain_user")

    @is_contain_user.setter
    def is_contain_user(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_contain_user", value)

    @_builtins.property
    @pulumi.getter(name="isDefaultPolicy")
    def is_default_policy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to set as default rule. The default value is **false**.

        > Only one default policy is allowed. If the current resource is set as the default policy, the value of
        `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
        please modify the corresponding script simultaneously, otherwise it will cause changes.
        """
        return pulumi.get(self, "is_default_policy")

    @is_default_policy.setter
    def is_default_policy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the rule.
        The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
        The name must start with a letter or an underscore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prefix of desktop name.
        The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
        The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
        If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
        the rule doesn't contain user name.
        The former format can't be used for desktop pool, and the latter can be used in all scenarios.

        > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
        The desktop name format are as follows:
        Include user name: `A+username+B+1`.
        Without user name: `A+1`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="singleDomainUserIncrement")
    def single_domain_user_increment(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to increment by single user name.
        The valid values are as follows:
        + **1**: Increment by single user name.
        + **0**: Increment by tenant.

        e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
        The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
        If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
        If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.

        > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        """
        return pulumi.get(self, "single_domain_user_increment")

    @single_domain_user_increment.setter
    def single_domain_user_increment(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "single_domain_user_increment", value)

    @_builtins.property
    @pulumi.getter(name="startNumber")
    def start_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start number of the desktop name suffix.
        The value is related to the `digit_number` parameter.
        If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
        If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        return pulumi.get(self, "start_number")

    @start_number.setter
    def start_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_number", value)


@pulumi.type_token("huaweicloud:Workspace/desktopNameRule:DesktopNameRule")
class DesktopNameRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 digit_number: Optional[pulumi.Input[_builtins.int]] = None,
                 is_default_policy: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_user_increment: Optional[pulumi.Input[_builtins.int]] = None,
                 start_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Using this resource to manage a name rule for the desktops creation within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        test = huaweicloud.workspace.DesktopNameRule("test",
            name=policy_name,
            name_prefix="test$DomainUser$end",
            digit_number=3,
            start_number=2,
            single_domain_user_increment=1,
            is_default_policy=True)
        ```

        ## Import

        The desktop name rule can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/desktopNameRule:DesktopNameRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] digit_number: Specifies the number of valid digits in the desktop name suffix.
               The valid value is range from `1` to `5`.
        :param pulumi.Input[_builtins.bool] is_default_policy: Specifies whether to set as default rule. The default value is **false**.
               
               > Only one default policy is allowed. If the current resource is set as the default policy, the value of
               `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
               please modify the corresponding script simultaneously, otherwise it will cause changes.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
               The name must start with a letter or an underscore.
        :param pulumi.Input[_builtins.str] name_prefix: Specifies the prefix of desktop name.
               The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
               The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
               If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
               the rule doesn't contain user name.
               The former format can't be used for desktop pool, and the latter can be used in all scenarios.
               
               > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
               The desktop name format are as follows:
               Include user name: `A+username+B+1`.
               Without user name: `A+1`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] single_domain_user_increment: Specifies whether to increment by single user name.
               The valid values are as follows:
               + **1**: Increment by single user name.
               + **0**: Increment by tenant.
               
               e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
               The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
               If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
               If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.
               
               > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        :param pulumi.Input[_builtins.int] start_number: Specifies the start number of the desktop name suffix.
               The value is related to the `digit_number` parameter.
               If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
               If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DesktopNameRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage a name rule for the desktops creation within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        test = huaweicloud.workspace.DesktopNameRule("test",
            name=policy_name,
            name_prefix="test$DomainUser$end",
            digit_number=3,
            start_number=2,
            single_domain_user_increment=1,
            is_default_policy=True)
        ```

        ## Import

        The desktop name rule can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/desktopNameRule:DesktopNameRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DesktopNameRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DesktopNameRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 digit_number: Optional[pulumi.Input[_builtins.int]] = None,
                 is_default_policy: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_user_increment: Optional[pulumi.Input[_builtins.int]] = None,
                 start_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DesktopNameRuleArgs.__new__(DesktopNameRuleArgs)

            if digit_number is None and not opts.urn:
                raise TypeError("Missing required property 'digit_number'")
            __props__.__dict__["digit_number"] = digit_number
            __props__.__dict__["is_default_policy"] = is_default_policy
            __props__.__dict__["name"] = name
            if name_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'name_prefix'")
            __props__.__dict__["name_prefix"] = name_prefix
            __props__.__dict__["region"] = region
            if single_domain_user_increment is None and not opts.urn:
                raise TypeError("Missing required property 'single_domain_user_increment'")
            __props__.__dict__["single_domain_user_increment"] = single_domain_user_increment
            if start_number is None and not opts.urn:
                raise TypeError("Missing required property 'start_number'")
            __props__.__dict__["start_number"] = start_number
            __props__.__dict__["is_contain_user"] = None
        super(DesktopNameRule, __self__).__init__(
            'huaweicloud:Workspace/desktopNameRule:DesktopNameRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            digit_number: Optional[pulumi.Input[_builtins.int]] = None,
            is_contain_user: Optional[pulumi.Input[_builtins.bool]] = None,
            is_default_policy: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            single_domain_user_increment: Optional[pulumi.Input[_builtins.int]] = None,
            start_number: Optional[pulumi.Input[_builtins.int]] = None) -> 'DesktopNameRule':
        """
        Get an existing DesktopNameRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] digit_number: Specifies the number of valid digits in the desktop name suffix.
               The valid value is range from `1` to `5`.
        :param pulumi.Input[_builtins.bool] is_contain_user: Whether the desktop name contains the user name.
        :param pulumi.Input[_builtins.bool] is_default_policy: Specifies whether to set as default rule. The default value is **false**.
               
               > Only one default policy is allowed. If the current resource is set as the default policy, the value of
               `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
               please modify the corresponding script simultaneously, otherwise it will cause changes.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
               The name must start with a letter or an underscore.
        :param pulumi.Input[_builtins.str] name_prefix: Specifies the prefix of desktop name.
               The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
               The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
               If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
               the rule doesn't contain user name.
               The former format can't be used for desktop pool, and the latter can be used in all scenarios.
               
               > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
               The desktop name format are as follows:
               Include user name: `A+username+B+1`.
               Without user name: `A+1`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] single_domain_user_increment: Specifies whether to increment by single user name.
               The valid values are as follows:
               + **1**: Increment by single user name.
               + **0**: Increment by tenant.
               
               e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
               The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
               If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
               If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.
               
               > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        :param pulumi.Input[_builtins.int] start_number: Specifies the start number of the desktop name suffix.
               The value is related to the `digit_number` parameter.
               If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
               If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DesktopNameRuleState.__new__(_DesktopNameRuleState)

        __props__.__dict__["digit_number"] = digit_number
        __props__.__dict__["is_contain_user"] = is_contain_user
        __props__.__dict__["is_default_policy"] = is_default_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["region"] = region
        __props__.__dict__["single_domain_user_increment"] = single_domain_user_increment
        __props__.__dict__["start_number"] = start_number
        return DesktopNameRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="digitNumber")
    def digit_number(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of valid digits in the desktop name suffix.
        The valid value is range from `1` to `5`.
        """
        return pulumi.get(self, "digit_number")

    @_builtins.property
    @pulumi.getter(name="isContainUser")
    def is_contain_user(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the desktop name contains the user name.
        """
        return pulumi.get(self, "is_contain_user")

    @_builtins.property
    @pulumi.getter(name="isDefaultPolicy")
    def is_default_policy(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to set as default rule. The default value is **false**.

        > Only one default policy is allowed. If the current resource is set as the default policy, the value of
        `is_default_policy` of the original default rule will be changed to `false`. If that rule is also managed by the provider,
        please modify the corresponding script simultaneously, otherwise it will cause changes.
        """
        return pulumi.get(self, "is_default_policy")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the rule.
        The name can contain `1` to `30` characters, only digits, letters and underscores (_) are allowed.
        The name must start with a letter or an underscore.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the prefix of desktop name.
        The format are as follows: `$DomainUser$`, `xx$DomainUser$`, `$DomainUser$xx`, `xx$DomainUser$xx`, `xx`.
        The value only letters, digits, hyphens (-) and `$DomainUser$` are allowed, it must start with a letter, digit or `$DomainUser$`.
        If the value contains `$DomainUser$` string, it means that the rule contains the user name. Otherwise, it means that
        the rule doesn't contain user name.
        The former format can't be used for desktop pool, and the latter can be used in all scenarios.

        > The desktop name format consists of `name_prefix` and `digit_number`, and the total length cannot exceed 15 characters.
        The desktop name format are as follows:
        Include user name: `A+username+B+1`.
        Without user name: `A+1`.
        """
        return pulumi.get(self, "name_prefix")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="singleDomainUserIncrement")
    def single_domain_user_increment(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies whether to increment by single user name.
        The valid values are as follows:
        + **1**: Increment by single user name.
        + **0**: Increment by tenant.

        e.g. Assume that there are three user A, B, C. Allocate two desktops to user A, one to user B, and one to user C.
        The `digit_number` parameter is set to `2`, the `start_number` parameter is set to `1`.
        If the `single_domain_user_increment` is set to `1`, the desktop names are as follows: `A01`, `A02`, `B01`, `C01`.
        If the `single_domain_user_increment` is set to `0`, the desktop names are as follows: `A01`, `A02`, `B03`, `C04`.

        > If the `name_prefix` parameter not contain `$DomainUser$`, the `single_domain_user_increment` value must set to `0`.
        """
        return pulumi.get(self, "single_domain_user_increment")

    @_builtins.property
    @pulumi.getter(name="startNumber")
    def start_number(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the start number of the desktop name suffix.
        The value is related to the `digit_number` parameter.
        If the `digit_number` parameter is set to `1`, the valid value is range from `1` to `9`.
        If the `digit_number` parameter is set to `2`, the valid value is range from `1` to `99`, and so on.
        """
        return pulumi.get(self, "start_number")

