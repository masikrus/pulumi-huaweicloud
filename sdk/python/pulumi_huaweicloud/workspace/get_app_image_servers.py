# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppImageServersResult',
    'AwaitableGetAppImageServersResult',
    'get_app_image_servers',
    'get_app_image_servers_output',
]

@pulumi.output_type
class GetAppImageServersResult:
    """
    A collection of values returned by getAppImageServers.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, region=None, server_id=None, servers=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID to which the image server belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the image server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetAppImageServersServerResult']:
        """
        All image servers that match the filter parameters.
        """
        return pulumi.get(self, "servers")


class AwaitableGetAppImageServersResult(GetAppImageServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppImageServersResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            server_id=self.server_id,
            servers=self.servers)


def get_app_image_servers(enterprise_project_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          server_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppImageServersResult:
    """
    Use this data source to get the list of the image servers within HuaweiCloud.

    ## Example Usage

    ### Query all image servers

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_image_servers()
    ```

    ### Query image server with the specified image server ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    image_server_id = config.require_object("imageServerId")
    test = huaweicloud.Workspace.get_app_image_servers(server_id=image_server_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the image server belongs.
           This parameter is only valid for enterprise users, if omitted, all enterprise project IDs will be queried.
    :param _builtins.str name: Specified the name of the image server.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specified the ID of the image server.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppImageServers:getAppImageServers', __args__, opts=opts, typ=GetAppImageServersResult).value

    return AwaitableGetAppImageServersResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        server_id=pulumi.get(__ret__, 'server_id'),
        servers=pulumi.get(__ret__, 'servers'))
def get_app_image_servers_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 server_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppImageServersResult]:
    """
    Use this data source to get the list of the image servers within HuaweiCloud.

    ## Example Usage

    ### Query all image servers

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_image_servers()
    ```

    ### Query image server with the specified image server ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    image_server_id = config.require_object("imageServerId")
    test = huaweicloud.Workspace.get_app_image_servers(server_id=image_server_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the image server belongs.
           This parameter is only valid for enterprise users, if omitted, all enterprise project IDs will be queried.
    :param _builtins.str name: Specified the name of the image server.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specified the ID of the image server.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppImageServers:getAppImageServers', __args__, opts=opts, typ=GetAppImageServersResult)
    return __ret__.apply(lambda __response__: GetAppImageServersResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        server_id=pulumi.get(__response__, 'server_id'),
        servers=pulumi.get(__response__, 'servers')))
