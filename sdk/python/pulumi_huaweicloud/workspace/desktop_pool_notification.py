# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DesktopPoolNotificationArgs', 'DesktopPoolNotification']

@pulumi.input_type
class DesktopPoolNotificationArgs:
    def __init__(__self__, *,
                 notifications: pulumi.Input[_builtins.str],
                 pool_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DesktopPoolNotification resource.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] pool_id: Specifies the ID of the desktop pool.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop pool is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "pool_id", pool_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the message want to dispatch.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the desktop pool.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktop pool is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DesktopPoolNotificationState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DesktopPoolNotification resources.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] pool_id: Specifies the ID of the desktop pool.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop pool is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of notification dispatch task.  
               The valid values are as follows:
               + **SUCCESS**
               + **FAIL**
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message want to dispatch.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the desktop pool.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the desktop pool is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of notification dispatch task.  
        The valid values are as follows:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Workspace/desktopPoolNotification:DesktopPoolNotification")
class DesktopPoolNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to dispatch desktop pool message within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch desktop pool message. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        pool_id = config.require_object("poolId")
        notifications = config.require_object("notifications")
        test = huaweicloud.workspace.DesktopPoolNotification("test",
            pool_id=pool_id,
            notifications=notifications)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] pool_id: Specifies the ID of the desktop pool.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop pool is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DesktopPoolNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to dispatch desktop pool message within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch desktop pool message. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        pool_id = config.require_object("poolId")
        notifications = config.require_object("notifications")
        test = huaweicloud.workspace.DesktopPoolNotification("test",
            pool_id=pool_id,
            notifications=notifications)
        ```

        :param str resource_name: The name of the resource.
        :param DesktopPoolNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DesktopPoolNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DesktopPoolNotificationArgs.__new__(DesktopPoolNotificationArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            if pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'pool_id'")
            __props__.__dict__["pool_id"] = pool_id
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
        super(DesktopPoolNotification, __self__).__init__(
            'huaweicloud:Workspace/desktopPoolNotification:DesktopPoolNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            notifications: Optional[pulumi.Input[_builtins.str]] = None,
            pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'DesktopPoolNotification':
        """
        Get an existing DesktopPoolNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] notifications: Specifies the message want to dispatch.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] pool_id: Specifies the ID of the desktop pool.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the desktop pool is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of notification dispatch task.  
               The valid values are as follows:
               + **SUCCESS**
               + **FAIL**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DesktopPoolNotificationState.__new__(_DesktopPoolNotificationState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return DesktopPoolNotification(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message want to dispatch.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the desktop pool.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the desktop pool is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of notification dispatch task.  
        The valid values are as follows:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

