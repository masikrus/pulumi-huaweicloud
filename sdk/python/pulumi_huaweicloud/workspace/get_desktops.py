# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDesktopsResult',
    'AwaitableGetDesktopsResult',
    'get_desktops',
    'get_desktops_output',
]

@pulumi.output_type
class GetDesktopsResult:
    """
    A collection of values returned by getDesktops.
    """
    def __init__(__self__, desktop_id=None, desktop_type=None, desktops=None, enterprise_project_id=None, fixed_ip=None, id=None, image_id=None, in_maintenance_mode=None, name=None, region=None, status=None, subnet_id=None, tags=None, user_attached=None, user_name=None):
        if desktop_id and not isinstance(desktop_id, str):
            raise TypeError("Expected argument 'desktop_id' to be a str")
        pulumi.set(__self__, "desktop_id", desktop_id)
        if desktop_type and not isinstance(desktop_type, str):
            raise TypeError("Expected argument 'desktop_type' to be a str")
        pulumi.set(__self__, "desktop_type", desktop_type)
        if desktops and not isinstance(desktops, list):
            raise TypeError("Expected argument 'desktops' to be a list")
        pulumi.set(__self__, "desktops", desktops)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fixed_ip and not isinstance(fixed_ip, str):
            raise TypeError("Expected argument 'fixed_ip' to be a str")
        pulumi.set(__self__, "fixed_ip", fixed_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if in_maintenance_mode and not isinstance(in_maintenance_mode, str):
            raise TypeError("Expected argument 'in_maintenance_mode' to be a str")
        pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if user_attached and not isinstance(user_attached, str):
            raise TypeError("Expected argument 'user_attached' to be a str")
        pulumi.set(__self__, "user_attached", user_attached)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter(name="desktopType")
    def desktop_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "desktop_type")

    @_builtins.property
    @pulumi.getter
    def desktops(self) -> Sequence['outputs.GetDesktopsDesktopResult']:
        """
        The list of the desktops.  
        The desktops structure is documented below.
        """
        return pulumi.get(self, "desktops")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID to which the desktop belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fixed_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        The image ID of the desktop.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> Optional[_builtins.str]:
        """
        Whether the desktop is in maintenance mode.
        """
        return pulumi.get(self, "in_maintenance_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The volume name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the desktop.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The subnet ID to which the desktop belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the desktop.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userAttached")
    def user_attached(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_attached")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The user name to which the desktop belongs.
        """
        return pulumi.get(self, "user_name")


class AwaitableGetDesktopsResult(GetDesktopsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDesktopsResult(
            desktop_id=self.desktop_id,
            desktop_type=self.desktop_type,
            desktops=self.desktops,
            enterprise_project_id=self.enterprise_project_id,
            fixed_ip=self.fixed_ip,
            id=self.id,
            image_id=self.image_id,
            in_maintenance_mode=self.in_maintenance_mode,
            name=self.name,
            region=self.region,
            status=self.status,
            subnet_id=self.subnet_id,
            tags=self.tags,
            user_attached=self.user_attached,
            user_name=self.user_name)


def get_desktops(desktop_id: Optional[_builtins.str] = None,
                 desktop_type: Optional[_builtins.str] = None,
                 enterprise_project_id: Optional[_builtins.str] = None,
                 fixed_ip: Optional[_builtins.str] = None,
                 image_id: Optional[_builtins.str] = None,
                 in_maintenance_mode: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 subnet_id: Optional[_builtins.str] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None,
                 user_attached: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDesktopsResult:
    """
    Use this data source to get the list of Workspace desktops within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_id = config.require_object("desktopId")
    test = huaweicloud.Workspace.get_desktops(desktop_id=desktop_id)
    ```


    :param _builtins.str desktop_id: Specifies ID of the desktop.
    :param _builtins.str desktop_type: Specifies the type of the desktops.
           The valid values are as follows:
           + **DEDICATED**: Normal desktop.
           + **POOLED**: Desktop in the Workspace desktop pool.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the desktops.
    :param _builtins.str fixed_ip: Specifies the fixed IP address of the desktop.
    :param _builtins.str image_id: Specifies the image ID of the desktops.
    :param _builtins.str in_maintenance_mode: Specify whether to query desktops by maintenance mode.
           The value can be **true** and **false**.
    :param _builtins.str name: Specifies the name of the desktop.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the desktops.
           The valid values are as follows: **ACTIVE**, **SHUTOFF**, **ERROR**.
    :param _builtins.str subnet_id: Specifies the subnet ID of desktops.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs used to query the desktops.
    :param _builtins.str user_attached: Specify whether to query desktops by assigned users.
           The value can be **true** and **false**.
    :param _builtins.str user_name: Specifies the user name to which the desktops belongs.
    """
    __args__ = dict()
    __args__['desktopId'] = desktop_id
    __args__['desktopType'] = desktop_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fixedIp'] = fixed_ip
    __args__['imageId'] = image_id
    __args__['inMaintenanceMode'] = in_maintenance_mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['userAttached'] = user_attached
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getDesktops:getDesktops', __args__, opts=opts, typ=GetDesktopsResult).value

    return AwaitableGetDesktopsResult(
        desktop_id=pulumi.get(__ret__, 'desktop_id'),
        desktop_type=pulumi.get(__ret__, 'desktop_type'),
        desktops=pulumi.get(__ret__, 'desktops'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        fixed_ip=pulumi.get(__ret__, 'fixed_ip'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        in_maintenance_mode=pulumi.get(__ret__, 'in_maintenance_mode'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        user_attached=pulumi.get(__ret__, 'user_attached'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_desktops_output(desktop_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        desktop_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        fixed_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        image_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        in_maintenance_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                        user_attached: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDesktopsResult]:
    """
    Use this data source to get the list of Workspace desktops within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    desktop_id = config.require_object("desktopId")
    test = huaweicloud.Workspace.get_desktops(desktop_id=desktop_id)
    ```


    :param _builtins.str desktop_id: Specifies ID of the desktop.
    :param _builtins.str desktop_type: Specifies the type of the desktops.
           The valid values are as follows:
           + **DEDICATED**: Normal desktop.
           + **POOLED**: Desktop in the Workspace desktop pool.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the desktops.
    :param _builtins.str fixed_ip: Specifies the fixed IP address of the desktop.
    :param _builtins.str image_id: Specifies the image ID of the desktops.
    :param _builtins.str in_maintenance_mode: Specify whether to query desktops by maintenance mode.
           The value can be **true** and **false**.
    :param _builtins.str name: Specifies the name of the desktop.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the desktops.
           The valid values are as follows: **ACTIVE**, **SHUTOFF**, **ERROR**.
    :param _builtins.str subnet_id: Specifies the subnet ID of desktops.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs used to query the desktops.
    :param _builtins.str user_attached: Specify whether to query desktops by assigned users.
           The value can be **true** and **false**.
    :param _builtins.str user_name: Specifies the user name to which the desktops belongs.
    """
    __args__ = dict()
    __args__['desktopId'] = desktop_id
    __args__['desktopType'] = desktop_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fixedIp'] = fixed_ip
    __args__['imageId'] = image_id
    __args__['inMaintenanceMode'] = in_maintenance_mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['userAttached'] = user_attached
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getDesktops:getDesktops', __args__, opts=opts, typ=GetDesktopsResult)
    return __ret__.apply(lambda __response__: GetDesktopsResult(
        desktop_id=pulumi.get(__response__, 'desktop_id'),
        desktop_type=pulumi.get(__response__, 'desktop_type'),
        desktops=pulumi.get(__response__, 'desktops'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        fixed_ip=pulumi.get(__response__, 'fixed_ip'),
        id=pulumi.get(__response__, 'id'),
        image_id=pulumi.get(__response__, 'image_id'),
        in_maintenance_mode=pulumi.get(__response__, 'in_maintenance_mode'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        tags=pulumi.get(__response__, 'tags'),
        user_attached=pulumi.get(__response__, 'user_attached'),
        user_name=pulumi.get(__response__, 'user_name')))
