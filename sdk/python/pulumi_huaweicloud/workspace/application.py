# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 application_file_store: pulumi.Input['ApplicationApplicationFileStoreArgs'],
                 authorization_type: pulumi.Input[_builtins.str],
                 catalog_id: pulumi.Input[_builtins.str],
                 description: pulumi.Input[_builtins.str],
                 install_type: pulumi.Input[_builtins.str],
                 support_os: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 application_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 install_command: Optional[pulumi.Input[_builtins.str]] = None,
                 install_info: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_obs_file: Optional[pulumi.Input[_builtins.bool]] = None,
                 uninstall_command: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input['ApplicationApplicationFileStoreArgs'] application_file_store: Specifies the file store configuration of the application.  
               The application_file_store structure is documented below.
        :param pulumi.Input[_builtins.str] authorization_type: Specifies the authorization type of the application.  
               The valid values are as follows:
               + **ALL_USER**
               + **ASSIGN_USER**
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the catalog ID of the application.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] install_type: Specifies the installation type of the application.  
               The valid values are as follows:
               + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
               + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
               + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        :param pulumi.Input[_builtins.str] support_os: Specifies the supported operating system of the application.  
               The valid values are as follows:
               + **Linux**
               + **Windows**
               + **Other**
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               The value can contain `1` to `128` characters.
               Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        :param pulumi.Input[_builtins.str] application_icon_url: Specifies the icon URL of the application.
        :param pulumi.Input[_builtins.str] install_command: Specifies the installation command of the application.
        :param pulumi.Input[_builtins.str] install_info: Specifies the installation information of the application.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The value can contain `1` to `128` characters.
               Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reserve_obs_file: Specifies whether to delete the installation package in the OBS bucket.  
               Required if the value of parameter `store_type` is **OBS**.
               
               <a name="workspace_application_file_store"></a>
               The `application_file_store` block supports:
        :param pulumi.Input[_builtins.str] uninstall_command: Specifies the uninstallation command of the application.
        """
        pulumi.set(__self__, "application_file_store", application_file_store)
        pulumi.set(__self__, "authorization_type", authorization_type)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "install_type", install_type)
        pulumi.set(__self__, "support_os", support_os)
        pulumi.set(__self__, "version", version)
        if application_icon_url is not None:
            pulumi.set(__self__, "application_icon_url", application_icon_url)
        if install_command is not None:
            pulumi.set(__self__, "install_command", install_command)
        if install_info is not None:
            pulumi.set(__self__, "install_info", install_info)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_obs_file is not None:
            pulumi.set(__self__, "reserve_obs_file", reserve_obs_file)
        if uninstall_command is not None:
            pulumi.set(__self__, "uninstall_command", uninstall_command)

    @_builtins.property
    @pulumi.getter(name="applicationFileStore")
    def application_file_store(self) -> pulumi.Input['ApplicationApplicationFileStoreArgs']:
        """
        Specifies the file store configuration of the application.  
        The application_file_store structure is documented below.
        """
        return pulumi.get(self, "application_file_store")

    @application_file_store.setter
    def application_file_store(self, value: pulumi.Input['ApplicationApplicationFileStoreArgs']):
        pulumi.set(self, "application_file_store", value)

    @_builtins.property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the authorization type of the application.  
        The valid values are as follows:
        + **ALL_USER**
        + **ASSIGN_USER**
        """
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authorization_type", value)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the catalog ID of the application.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the installation type of the application.  
        The valid values are as follows:
        + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
        + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
        + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        """
        return pulumi.get(self, "install_type")

    @install_type.setter
    def install_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "install_type", value)

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the supported operating system of the application.  
        The valid values are as follows:
        + **Linux**
        + **Windows**
        + **Other**
        """
        return pulumi.get(self, "support_os")

    @support_os.setter
    def support_os(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "support_os", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of the application.  
        The value can contain `1` to `128` characters.
        Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="applicationIconUrl")
    def application_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the icon URL of the application.
        """
        return pulumi.get(self, "application_icon_url")

    @application_icon_url.setter
    def application_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the installation command of the application.
        """
        return pulumi.get(self, "install_command")

    @install_command.setter
    def install_command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_command", value)

    @_builtins.property
    @pulumi.getter(name="installInfo")
    def install_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the installation information of the application.
        """
        return pulumi.get(self, "install_info")

    @install_info.setter
    def install_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_info", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The value can contain `1` to `128` characters.
        Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reserveObsFile")
    def reserve_obs_file(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the installation package in the OBS bucket.  
        Required if the value of parameter `store_type` is **OBS**.

        <a name="workspace_application_file_store"></a>
        The `application_file_store` block supports:
        """
        return pulumi.get(self, "reserve_obs_file")

    @reserve_obs_file.setter
    def reserve_obs_file(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reserve_obs_file", value)

    @_builtins.property
    @pulumi.getter(name="uninstallCommand")
    def uninstall_command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the uninstallation command of the application.
        """
        return pulumi.get(self, "uninstall_command")

    @uninstall_command.setter
    def uninstall_command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uninstall_command", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 application_file_store: Optional[pulumi.Input['ApplicationApplicationFileStoreArgs']] = None,
                 application_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 application_source: Optional[pulumi.Input[_builtins.str]] = None,
                 authorization_type: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 install_command: Optional[pulumi.Input[_builtins.str]] = None,
                 install_info: Optional[pulumi.Input[_builtins.str]] = None,
                 install_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_obs_file: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 support_os: Optional[pulumi.Input[_builtins.str]] = None,
                 uninstall_command: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input['ApplicationApplicationFileStoreArgs'] application_file_store: Specifies the file store configuration of the application.  
               The application_file_store structure is documented below.
        :param pulumi.Input[_builtins.str] application_icon_url: Specifies the icon URL of the application.
        :param pulumi.Input[_builtins.str] application_source: The source of the application.
        :param pulumi.Input[_builtins.str] authorization_type: Specifies the authorization type of the application.  
               The valid values are as follows:
               + **ALL_USER**
               + **ASSIGN_USER**
        :param pulumi.Input[_builtins.str] catalog: The catalog name of the application.
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the catalog ID of the application.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the application, in UTC format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] install_command: Specifies the installation command of the application.
        :param pulumi.Input[_builtins.str] install_info: Specifies the installation information of the application.
        :param pulumi.Input[_builtins.str] install_type: Specifies the installation type of the application.  
               The valid values are as follows:
               + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
               + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
               + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The value can contain `1` to `128` characters.
               Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reserve_obs_file: Specifies whether to delete the installation package in the OBS bucket.  
               Required if the value of parameter `store_type` is **OBS**.
               
               <a name="workspace_application_file_store"></a>
               The `application_file_store` block supports:
        :param pulumi.Input[_builtins.str] status: The status of the application.
        :param pulumi.Input[_builtins.str] support_os: Specifies the supported operating system of the application.  
               The valid values are as follows:
               + **Linux**
               + **Windows**
               + **Other**
        :param pulumi.Input[_builtins.str] uninstall_command: Specifies the uninstallation command of the application.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               The value can contain `1` to `128` characters.
               Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        if application_file_store is not None:
            pulumi.set(__self__, "application_file_store", application_file_store)
        if application_icon_url is not None:
            pulumi.set(__self__, "application_icon_url", application_icon_url)
        if application_source is not None:
            pulumi.set(__self__, "application_source", application_source)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if install_command is not None:
            pulumi.set(__self__, "install_command", install_command)
        if install_info is not None:
            pulumi.set(__self__, "install_info", install_info)
        if install_type is not None:
            pulumi.set(__self__, "install_type", install_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_obs_file is not None:
            pulumi.set(__self__, "reserve_obs_file", reserve_obs_file)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_os is not None:
            pulumi.set(__self__, "support_os", support_os)
        if uninstall_command is not None:
            pulumi.set(__self__, "uninstall_command", uninstall_command)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="applicationFileStore")
    def application_file_store(self) -> Optional[pulumi.Input['ApplicationApplicationFileStoreArgs']]:
        """
        Specifies the file store configuration of the application.  
        The application_file_store structure is documented below.
        """
        return pulumi.get(self, "application_file_store")

    @application_file_store.setter
    def application_file_store(self, value: Optional[pulumi.Input['ApplicationApplicationFileStoreArgs']]):
        pulumi.set(self, "application_file_store", value)

    @_builtins.property
    @pulumi.getter(name="applicationIconUrl")
    def application_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the icon URL of the application.
        """
        return pulumi.get(self, "application_icon_url")

    @application_icon_url.setter
    def application_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="applicationSource")
    def application_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source of the application.
        """
        return pulumi.get(self, "application_source")

    @application_source.setter
    def application_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_source", value)

    @_builtins.property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authorization type of the application.  
        The valid values are as follows:
        + **ALL_USER**
        + **ASSIGN_USER**
        """
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization_type", value)

    @_builtins.property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The catalog name of the application.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog", value)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the catalog ID of the application.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the application, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the installation command of the application.
        """
        return pulumi.get(self, "install_command")

    @install_command.setter
    def install_command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_command", value)

    @_builtins.property
    @pulumi.getter(name="installInfo")
    def install_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the installation information of the application.
        """
        return pulumi.get(self, "install_info")

    @install_info.setter
    def install_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_info", value)

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the installation type of the application.  
        The valid values are as follows:
        + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
        + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
        + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        """
        return pulumi.get(self, "install_type")

    @install_type.setter
    def install_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The value can contain `1` to `128` characters.
        Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reserveObsFile")
    def reserve_obs_file(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the installation package in the OBS bucket.  
        Required if the value of parameter `store_type` is **OBS**.

        <a name="workspace_application_file_store"></a>
        The `application_file_store` block supports:
        """
        return pulumi.get(self, "reserve_obs_file")

    @reserve_obs_file.setter
    def reserve_obs_file(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reserve_obs_file", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the application.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the supported operating system of the application.  
        The valid values are as follows:
        + **Linux**
        + **Windows**
        + **Other**
        """
        return pulumi.get(self, "support_os")

    @support_os.setter
    def support_os(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "support_os", value)

    @_builtins.property
    @pulumi.getter(name="uninstallCommand")
    def uninstall_command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the uninstallation command of the application.
        """
        return pulumi.get(self, "uninstall_command")

    @uninstall_command.setter
    def uninstall_command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uninstall_command", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the application.  
        The value can contain `1` to `128` characters.
        Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Workspace/application:Application")
class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_file_store: Optional[pulumi.Input[Union['ApplicationApplicationFileStoreArgs', 'ApplicationApplicationFileStoreArgsDict']]] = None,
                 application_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 authorization_type: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 install_command: Optional[pulumi.Input[_builtins.str]] = None,
                 install_info: Optional[pulumi.Input[_builtins.str]] = None,
                 install_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_obs_file: Optional[pulumi.Input[_builtins.bool]] = None,
                 support_os: Optional[pulumi.Input[_builtins.str]] = None,
                 uninstall_command: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to manage Workspace application within Huaweicloud.

        ## Example Usage

        ### Create an application with OBS bucket store

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_name = config.require_object("applicationName")
        application_version = config.require_object("applicationVersion")
        application_description = config.require_object("applicationDescription")
        authorization_type = config.require_object("authorizationType")
        install_type = config.require_object("installType")
        support_os = config.require_object("supportOs")
        catalog_id = config.require_object("catalogId")
        bucket_name = config.require_object("bucketName")
        bucket_file_path = config.require_object("bucketFilePath")
        test = huaweicloud.workspace.Application("test",
            name=application_name,
            version=application_version,
            description=application_description,
            authorization_type=authorization_type,
            install_type=install_type,
            support_os=support_os,
            catalog_id=catalog_id,
            reserve_obs_file=True,
            application_file_store={
                "store_type": "OBS",
                "bucket_store": {
                    "bucket_name": bucket_name,
                    "bucket_file_path": bucket_file_path,
                },
            })
        ```

        ### Create an application with external file link

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_name = config.require_object("applicationName")
        application_version = config.require_object("applicationVersion")
        application_description = config.require_object("applicationDescription")
        authorization_type = config.require_object("authorizationType")
        install_type = config.require_object("installType")
        support_os = config.require_object("supportOs")
        catalog_id = config.require_object("catalogId")
        file_link = config.require_object("fileLink")
        test = huaweicloud.workspace.Application("test",
            name=application_name,
            version=application_version,
            description=application_description,
            authorization_type=authorization_type,
            install_type=install_type,
            support_os=support_os,
            catalog_id=catalog_id,
            application_file_store={
                "store_type": "LINK",
                "file_link": file_link,
            })
        ```

        ## Import

        Application can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/application:Application test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApplicationApplicationFileStoreArgs', 'ApplicationApplicationFileStoreArgsDict']] application_file_store: Specifies the file store configuration of the application.  
               The application_file_store structure is documented below.
        :param pulumi.Input[_builtins.str] application_icon_url: Specifies the icon URL of the application.
        :param pulumi.Input[_builtins.str] authorization_type: Specifies the authorization type of the application.  
               The valid values are as follows:
               + **ALL_USER**
               + **ASSIGN_USER**
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the catalog ID of the application.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] install_command: Specifies the installation command of the application.
        :param pulumi.Input[_builtins.str] install_info: Specifies the installation information of the application.
        :param pulumi.Input[_builtins.str] install_type: Specifies the installation type of the application.  
               The valid values are as follows:
               + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
               + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
               + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The value can contain `1` to `128` characters.
               Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reserve_obs_file: Specifies whether to delete the installation package in the OBS bucket.  
               Required if the value of parameter `store_type` is **OBS**.
               
               <a name="workspace_application_file_store"></a>
               The `application_file_store` block supports:
        :param pulumi.Input[_builtins.str] support_os: Specifies the supported operating system of the application.  
               The valid values are as follows:
               + **Linux**
               + **Windows**
               + **Other**
        :param pulumi.Input[_builtins.str] uninstall_command: Specifies the uninstallation command of the application.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               The value can contain `1` to `128` characters.
               Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage Workspace application within Huaweicloud.

        ## Example Usage

        ### Create an application with OBS bucket store

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_name = config.require_object("applicationName")
        application_version = config.require_object("applicationVersion")
        application_description = config.require_object("applicationDescription")
        authorization_type = config.require_object("authorizationType")
        install_type = config.require_object("installType")
        support_os = config.require_object("supportOs")
        catalog_id = config.require_object("catalogId")
        bucket_name = config.require_object("bucketName")
        bucket_file_path = config.require_object("bucketFilePath")
        test = huaweicloud.workspace.Application("test",
            name=application_name,
            version=application_version,
            description=application_description,
            authorization_type=authorization_type,
            install_type=install_type,
            support_os=support_os,
            catalog_id=catalog_id,
            reserve_obs_file=True,
            application_file_store={
                "store_type": "OBS",
                "bucket_store": {
                    "bucket_name": bucket_name,
                    "bucket_file_path": bucket_file_path,
                },
            })
        ```

        ### Create an application with external file link

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_name = config.require_object("applicationName")
        application_version = config.require_object("applicationVersion")
        application_description = config.require_object("applicationDescription")
        authorization_type = config.require_object("authorizationType")
        install_type = config.require_object("installType")
        support_os = config.require_object("supportOs")
        catalog_id = config.require_object("catalogId")
        file_link = config.require_object("fileLink")
        test = huaweicloud.workspace.Application("test",
            name=application_name,
            version=application_version,
            description=application_description,
            authorization_type=authorization_type,
            install_type=install_type,
            support_os=support_os,
            catalog_id=catalog_id,
            application_file_store={
                "store_type": "LINK",
                "file_link": file_link,
            })
        ```

        ## Import

        Application can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/application:Application test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_file_store: Optional[pulumi.Input[Union['ApplicationApplicationFileStoreArgs', 'ApplicationApplicationFileStoreArgsDict']]] = None,
                 application_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 authorization_type: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 install_command: Optional[pulumi.Input[_builtins.str]] = None,
                 install_info: Optional[pulumi.Input[_builtins.str]] = None,
                 install_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_obs_file: Optional[pulumi.Input[_builtins.bool]] = None,
                 support_os: Optional[pulumi.Input[_builtins.str]] = None,
                 uninstall_command: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            if application_file_store is None and not opts.urn:
                raise TypeError("Missing required property 'application_file_store'")
            __props__.__dict__["application_file_store"] = application_file_store
            __props__.__dict__["application_icon_url"] = application_icon_url
            if authorization_type is None and not opts.urn:
                raise TypeError("Missing required property 'authorization_type'")
            __props__.__dict__["authorization_type"] = authorization_type
            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["install_command"] = install_command
            __props__.__dict__["install_info"] = install_info
            if install_type is None and not opts.urn:
                raise TypeError("Missing required property 'install_type'")
            __props__.__dict__["install_type"] = install_type
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["reserve_obs_file"] = reserve_obs_file
            if support_os is None and not opts.urn:
                raise TypeError("Missing required property 'support_os'")
            __props__.__dict__["support_os"] = support_os
            __props__.__dict__["uninstall_command"] = uninstall_command
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["application_source"] = None
            __props__.__dict__["catalog"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
        super(Application, __self__).__init__(
            'huaweicloud:Workspace/application:Application',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_file_store: Optional[pulumi.Input[Union['ApplicationApplicationFileStoreArgs', 'ApplicationApplicationFileStoreArgsDict']]] = None,
            application_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
            application_source: Optional[pulumi.Input[_builtins.str]] = None,
            authorization_type: Optional[pulumi.Input[_builtins.str]] = None,
            catalog: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            install_command: Optional[pulumi.Input[_builtins.str]] = None,
            install_info: Optional[pulumi.Input[_builtins.str]] = None,
            install_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reserve_obs_file: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            support_os: Optional[pulumi.Input[_builtins.str]] = None,
            uninstall_command: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApplicationApplicationFileStoreArgs', 'ApplicationApplicationFileStoreArgsDict']] application_file_store: Specifies the file store configuration of the application.  
               The application_file_store structure is documented below.
        :param pulumi.Input[_builtins.str] application_icon_url: Specifies the icon URL of the application.
        :param pulumi.Input[_builtins.str] application_source: The source of the application.
        :param pulumi.Input[_builtins.str] authorization_type: Specifies the authorization type of the application.  
               The valid values are as follows:
               + **ALL_USER**
               + **ASSIGN_USER**
        :param pulumi.Input[_builtins.str] catalog: The catalog name of the application.
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the catalog ID of the application.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the application, in UTC format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] install_command: Specifies the installation command of the application.
        :param pulumi.Input[_builtins.str] install_info: Specifies the installation information of the application.
        :param pulumi.Input[_builtins.str] install_type: Specifies the installation type of the application.  
               The valid values are as follows:
               + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
               + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
               + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The value can contain `1` to `128` characters.
               Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reserve_obs_file: Specifies whether to delete the installation package in the OBS bucket.  
               Required if the value of parameter `store_type` is **OBS**.
               
               <a name="workspace_application_file_store"></a>
               The `application_file_store` block supports:
        :param pulumi.Input[_builtins.str] status: The status of the application.
        :param pulumi.Input[_builtins.str] support_os: Specifies the supported operating system of the application.  
               The valid values are as follows:
               + **Linux**
               + **Windows**
               + **Other**
        :param pulumi.Input[_builtins.str] uninstall_command: Specifies the uninstallation command of the application.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the application.  
               The value can contain `1` to `128` characters.
               Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["application_file_store"] = application_file_store
        __props__.__dict__["application_icon_url"] = application_icon_url
        __props__.__dict__["application_source"] = application_source
        __props__.__dict__["authorization_type"] = authorization_type
        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["install_command"] = install_command
        __props__.__dict__["install_info"] = install_info
        __props__.__dict__["install_type"] = install_type
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["reserve_obs_file"] = reserve_obs_file
        __props__.__dict__["status"] = status
        __props__.__dict__["support_os"] = support_os
        __props__.__dict__["uninstall_command"] = uninstall_command
        __props__.__dict__["version"] = version
        return Application(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationFileStore")
    def application_file_store(self) -> pulumi.Output['outputs.ApplicationApplicationFileStore']:
        """
        Specifies the file store configuration of the application.  
        The application_file_store structure is documented below.
        """
        return pulumi.get(self, "application_file_store")

    @_builtins.property
    @pulumi.getter(name="applicationIconUrl")
    def application_icon_url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the icon URL of the application.
        """
        return pulumi.get(self, "application_icon_url")

    @_builtins.property
    @pulumi.getter(name="applicationSource")
    def application_source(self) -> pulumi.Output[_builtins.str]:
        """
        The source of the application.
        """
        return pulumi.get(self, "application_source")

    @_builtins.property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the authorization type of the application.  
        The valid values are as follows:
        + **ALL_USER**
        + **ASSIGN_USER**
        """
        return pulumi.get(self, "authorization_type")

    @_builtins.property
    @pulumi.getter
    def catalog(self) -> pulumi.Output[_builtins.str]:
        """
        The catalog name of the application.
        """
        return pulumi.get(self, "catalog")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the catalog ID of the application.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the application, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the installation command of the application.
        """
        return pulumi.get(self, "install_command")

    @_builtins.property
    @pulumi.getter(name="installInfo")
    def install_info(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the installation information of the application.
        """
        return pulumi.get(self, "install_info")

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the installation type of the application.  
        The valid values are as follows:
        + **QUIET_INSTALL**: Silent installation mode, suitable for automated deployment.
        + **UNZIP_INSTALL**: Extract and install mode, for applications that need to be extracted first.
        + **GUI_INSTALL**: Graphical installation mode, requires user interaction during installation.
        """
        return pulumi.get(self, "install_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the application.  
        The value can contain `1` to `128` characters.
        Can not consist solely of spaces and the following special characters are not allowed: ``:^;|`~{}[]<>``.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the application is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reserveObsFile")
    def reserve_obs_file(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete the installation package in the OBS bucket.  
        Required if the value of parameter `store_type` is **OBS**.

        <a name="workspace_application_file_store"></a>
        The `application_file_store` block supports:
        """
        return pulumi.get(self, "reserve_obs_file")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the application.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the supported operating system of the application.  
        The valid values are as follows:
        + **Linux**
        + **Windows**
        + **Other**
        """
        return pulumi.get(self, "support_os")

    @_builtins.property
    @pulumi.getter(name="uninstallCommand")
    def uninstall_command(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the uninstallation command of the application.
        """
        return pulumi.get(self, "uninstall_command")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the application.  
        The value can contain `1` to `128` characters.
        Only letters, digits, hyphens(-), underscores(_) and dots(.) are allowed in the version number.
        """
        return pulumi.get(self, "version")

