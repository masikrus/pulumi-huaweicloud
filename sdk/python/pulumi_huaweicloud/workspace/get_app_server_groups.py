# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppServerGroupsResult',
    'AwaitableGetAppServerGroupsResult',
    'get_app_server_groups',
    'get_app_server_groups_output',
]

@pulumi.output_type
class GetAppServerGroupsResult:
    """
    A collection of values returned by getAppServerGroups.
    """
    def __init__(__self__, app_type=None, enterprise_project_id=None, id=None, is_secondary_server_group=None, region=None, server_group_id=None, server_group_name=None, server_groups=None, tags=None):
        if app_type and not isinstance(app_type, str):
            raise TypeError("Expected argument 'app_type' to be a str")
        pulumi.set(__self__, "app_type", app_type)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_secondary_server_group and not isinstance(is_secondary_server_group, str):
            raise TypeError("Expected argument 'is_secondary_server_group' to be a str")
        pulumi.set(__self__, "is_secondary_server_group", is_secondary_server_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)
        if server_group_name and not isinstance(server_group_name, str):
            raise TypeError("Expected argument 'server_group_name' to be a str")
        pulumi.set(__self__, "server_group_name", server_group_name)
        if server_groups and not isinstance(server_groups, list):
            raise TypeError("Expected argument 'server_groups' to be a list")
        pulumi.set(__self__, "server_groups", server_groups)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[_builtins.str]:
        """
        The application type of app server groups that matched filter parameters.
        + **SESSION_DESKTOP_APP**
        + **COMMON_APP**
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSecondaryServerGroup")
    def is_secondary_server_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_secondary_server_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_group_name")

    @_builtins.property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetAppServerGroupsServerGroupResult']:
        """
        The list of server groups that matched filter parameters.  
        The server_groups structure is documented below.
        """
        return pulumi.get(self, "server_groups")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        The tag information of app server groups that matched filter parameters.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


class AwaitableGetAppServerGroupsResult(GetAppServerGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppServerGroupsResult(
            app_type=self.app_type,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            is_secondary_server_group=self.is_secondary_server_group,
            region=self.region,
            server_group_id=self.server_group_id,
            server_group_name=self.server_group_name,
            server_groups=self.server_groups,
            tags=self.tags)


def get_app_server_groups(app_type: Optional[_builtins.str] = None,
                          enterprise_project_id: Optional[_builtins.str] = None,
                          is_secondary_server_group: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          server_group_id: Optional[_builtins.str] = None,
                          server_group_name: Optional[_builtins.str] = None,
                          tags: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppServerGroupsResult:
    """
    Use this data source to get server group list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_name = config.require_object("serverGroupName")
    test = huaweicloud.Workspace.get_app_server_groups(server_group_name=server_group_name)
    ```


    :param _builtins.str app_type: Specifies the type of application group.
           + **SESSION_DESKTOP_APP**
           + **COMMON_APP**
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str is_secondary_server_group: Specifies whether it is a secondary server group,
           default to **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of the server group.
    :param _builtins.str server_group_name: Specifies the name of the server group.
    :param _builtins.str tags: Specifies the tag value to filter server groups.
    """
    __args__ = dict()
    __args__['appType'] = app_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['isSecondaryServerGroup'] = is_secondary_server_group
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['serverGroupName'] = server_group_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppServerGroups:getAppServerGroups', __args__, opts=opts, typ=GetAppServerGroupsResult).value

    return AwaitableGetAppServerGroupsResult(
        app_type=pulumi.get(__ret__, 'app_type'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        is_secondary_server_group=pulumi.get(__ret__, 'is_secondary_server_group'),
        region=pulumi.get(__ret__, 'region'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'),
        server_group_name=pulumi.get(__ret__, 'server_group_name'),
        server_groups=pulumi.get(__ret__, 'server_groups'),
        tags=pulumi.get(__ret__, 'tags'))
def get_app_server_groups_output(app_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 is_secondary_server_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 server_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 server_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppServerGroupsResult]:
    """
    Use this data source to get server group list of the Workspace APP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_name = config.require_object("serverGroupName")
    test = huaweicloud.Workspace.get_app_server_groups(server_group_name=server_group_name)
    ```


    :param _builtins.str app_type: Specifies the type of application group.
           + **SESSION_DESKTOP_APP**
           + **COMMON_APP**
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str is_secondary_server_group: Specifies whether it is a secondary server group,
           default to **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of the server group.
    :param _builtins.str server_group_name: Specifies the name of the server group.
    :param _builtins.str tags: Specifies the tag value to filter server groups.
    """
    __args__ = dict()
    __args__['appType'] = app_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['isSecondaryServerGroup'] = is_secondary_server_group
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['serverGroupName'] = server_group_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppServerGroups:getAppServerGroups', __args__, opts=opts, typ=GetAppServerGroupsResult)
    return __ret__.apply(lambda __response__: GetAppServerGroupsResult(
        app_type=pulumi.get(__response__, 'app_type'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        is_secondary_server_group=pulumi.get(__response__, 'is_secondary_server_group'),
        region=pulumi.get(__response__, 'region'),
        server_group_id=pulumi.get(__response__, 'server_group_id'),
        server_group_name=pulumi.get(__response__, 'server_group_name'),
        server_groups=pulumi.get(__response__, 'server_groups'),
        tags=pulumi.get(__response__, 'tags')))
