# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AccessPolicyBlacklist',
    'AppGroupAuthorizationAccount',
    'AppImageServerAuthorizeAccount',
    'AppImageServerRootVolume',
    'AppImageServerRoutePolicy',
    'AppImageServerSchedulerHints',
    'AppNasStorageStorageMetadata',
    'AppPersonalFoldersAssignment',
    'AppPolicyGroupTarget',
    'AppScheduleTaskScheduleTaskPolicy',
    'AppScheduleTaskTargetInfo',
    'AppServerGroupFlavor',
    'AppServerGroupFlavorLink',
    'AppServerGroupIpVirtual',
    'AppServerGroupRoutePolicy',
    'AppServerGroupScalingPolicyScalingPolicyBySession',
    'AppServerRootVolume',
    'AppServerSchedulerHints',
    'ApplicationApplicationFileStore',
    'ApplicationApplicationFileStoreBucketStore',
    'ApplicationRuleDetail',
    'ApplicationRuleDetailPathRule',
    'ApplicationRuleDetailProductRule',
    'DesktopDataVolume',
    'DesktopNic',
    'DesktopPoolAuthorizedObject',
    'DesktopPoolAutoscalePolicy',
    'DesktopPoolDataVolume',
    'DesktopPoolProduct',
    'DesktopPoolRootVolume',
    'DesktopPoolSecurityGroup',
    'DesktopRootVolume',
    'PolicyGroupPolicy',
    'PolicyGroupPolicyAccessControl',
    'PolicyGroupTarget',
    'ServiceAdDomain',
    'ServiceDesktopSecurityGroup',
    'ServiceInfrastructureSecurityGroup',
    'ServiceOtpConfigInfo',
    'TerminalBindingBinding',
    'UserGroupUser',
    'GetAppAvailableVolumesVolumeTypeResult',
    'GetAppAvailableVolumesVolumeTypeVolumeTypeExtraSpecResult',
    'GetAppCenterAvailabilityZonesAvailabilityZoneResult',
    'GetAppCenterAvailabilityZonesAvailabilityZoneSoldOutResult',
    'GetAppConfigurationsConfigurationResult',
    'GetAppFlavorsFlavorResult',
    'GetAppGroupAuthorizationsAuthorizationResult',
    'GetAppGroupsGroupResult',
    'GetAppHdaConfigurationsConfigurationResult',
    'GetAppHdaLatestVersionsHdaLatestVersionResult',
    'GetAppHdaUpgradeRecordsRecordResult',
    'GetAppIesAvailabilityZonesAvailabilityZoneResult',
    'GetAppIesAvailabilityZonesAvailabilityZoneSoldOutResult',
    'GetAppImageServersServerResult',
    'GetAppImageServersServerAuthorizeAccountResult',
    'GetAppLatestAttachedApplicationsApplicationResult',
    'GetAppNasStoragesStorageResult',
    'GetAppNasStoragesStorageStorageMetadataResult',
    'GetAppPublishableAppsAppResult',
    'GetAppScheduleTaskExecuteDetailsExecuteDetailResult',
    'GetAppScheduleTaskExecutionsExecutionResult',
    'GetAppScheduleTasksTaskResult',
    'GetAppServerGroupsServerGroupResult',
    'GetAppServerGroupsServerGroupProductInfoResult',
    'GetAppServerGroupsServerGroupScalingPolicyResult',
    'GetAppServerGroupsServerGroupScalingPolicyScalingPolicyBySessionResult',
    'GetAppServerGroupsServerGroupTagResult',
    'GetAppServerQuotasQuotaResult',
    'GetAppServersServerResult',
    'GetAppServersServerFlavorResult',
    'GetAppServersServerFlavorLinkResult',
    'GetAppServersServerFreezeResult',
    'GetAppServersServerHostAddressResult',
    'GetAppServersServerProductInfoResult',
    'GetAppServersServerTagResult',
    'GetAppSessionTypesSessionTypeResult',
    'GetAppStoragePoliciesPolicyResult',
    'GetAppWarehouseApplicationsApplicationResult',
    'GetApplicationCatalogsCatalogResult',
    'GetApplicationRulesRuleResult',
    'GetApplicationRulesRuleDetailResult',
    'GetApplicationRulesRuleDetailPathRuleResult',
    'GetApplicationRulesRuleDetailProductRuleResult',
    'GetApplicationsApplicationResult',
    'GetApplicationsApplicationApplicationFileStoreResult',
    'GetApplicationsApplicationApplicationFileStoreBucketStoreResult',
    'GetDesktopConnectionsDesktopConnectionResult',
    'GetDesktopConnectionsDesktopConnectionAttachUserResult',
    'GetDesktopPoolsDesktopPoolResult',
    'GetDesktopPoolsDesktopPoolAutoscalePolicyResult',
    'GetDesktopPoolsDesktopPoolDataVolumeResult',
    'GetDesktopPoolsDesktopPoolProductResult',
    'GetDesktopPoolsDesktopPoolRootVolumeResult',
    'GetDesktopPoolsDesktopPoolSecurityGroupResult',
    'GetDesktopRemoteConsoleRemoteConsoleResult',
    'GetDesktopSysprepSysprepInfoResult',
    'GetDesktopTagsFilterDesktopResult',
    'GetDesktopTagsFilterDesktopTagResult',
    'GetDesktopTagsFilterMatchResult',
    'GetDesktopTagsFilterNotTagResult',
    'GetDesktopTagsFilterNotTagsAnyResult',
    'GetDesktopTagsFilterTagResult',
    'GetDesktopTagsFilterTagsAnyResult',
    'GetDesktopTagsTagResult',
    'GetDesktopsDesktopResult',
    'GetDesktopsDesktopAttachUserInfoResult',
    'GetDesktopsDesktopDataVolumeResult',
    'GetDesktopsDesktopRootVolumeResult',
    'GetFlavorsFlavorResult',
    'GetHourPackagesHourPackageResult',
    'GetHourPackagesHourPackageDescriptionResult',
    'GetPolicyGroupsPolicyGroupResult',
    'GetPolicyGroupsPolicyGroupPolicyResult',
    'GetPolicyGroupsPolicyGroupTargetResult',
    'GetServiceAdDomainResult',
    'GetServiceDesktopSecurityGroupResult',
    'GetServiceInfrastructureSecurityGroupResult',
    'GetServiceOtpConfigInfoResult',
    'GetTagsTagResult',
    'GetUsersUserResult',
    'GetVolumeProductsVolumeProductResult',
    'GetVolumeProductsVolumeProductNameResult',
]

@pulumi.output_type
class AccessPolicyBlacklist(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "objectName":
            suggest = "object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessPolicyBlacklist. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessPolicyBlacklist.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessPolicyBlacklist.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: _builtins.str,
                 object_type: _builtins.str,
                 object_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str object_id: Specifies the object ID.
        :param _builtins.str object_type: Specifies the object type.
               The valid values are as follows:
               + **USER**
               + **USERGROUP**
        :param _builtins.str object_name: The object name.
        """
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.str:
        """
        Specifies the object ID.
        """
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        Specifies the object type.
        The valid values are as follows:
        + **USER**
        + **USERGROUP**
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[_builtins.str]:
        """
        The object name.
        """
        return pulumi.get(self, "object_name")


@pulumi.output_type
class AppGroupAuthorizationAccount(dict):
    def __init__(__self__, *,
                 account: _builtins.str,
                 type: _builtins.str,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str account: Specifies the name of the user (group).
               Changing this creates a new resource.
        :param _builtins.str type: Specifies the type of the object to be authorized.
               Changing this creates a new resource.
               The valid values are as follows:
               + **USER**
               + **USER_GROUP**
        :param _builtins.str id: Specifies the ID of the user (group).
               Changing this creates a new resource.
               This parameter is required when `type` is set to **USER_GROUP**.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        """
        Specifies the name of the user (group).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the object to be authorized.
        Changing this creates a new resource.
        The valid values are as follows:
        + **USER**
        + **USER_GROUP**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the user (group).
        Changing this creates a new resource.
        This parameter is required when `type` is set to **USER_GROUP**.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AppImageServerAuthorizeAccount(dict):
    def __init__(__self__, *,
                 account: _builtins.str,
                 type: _builtins.str,
                 domain: Optional[_builtins.str] = None):
        """
        :param _builtins.str account: Specifies the name of the account.
               Changing this creates a new resource.
        :param _builtins.str type: Specifies the disk type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param _builtins.str domain: Specifies the domain name of the Workspace service.
               Changing this creates a new resource.
               
               <a name="app_image_server_root_volume"></a>
               The `root_volume` block supports:
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "type", type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        """
        Specifies the name of the account.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the disk type of the image server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        """
        Specifies the domain name of the Workspace service.
        Changing this creates a new resource.

        <a name="app_image_server_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class AppImageServerRootVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Specifies the disk size of the image server, in GB.
               Changing this creates a new resource.
               The system disk size must be sufficient for the basic image and the application to be installed.
               
               <a name="app_image_server_route_policy"></a>
               The `route_policy` block supports:
        :param _builtins.str type: Specifies the disk type of the image server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the disk size of the image server, in GB.
        Changing this creates a new resource.
        The system disk size must be sufficient for the basic image and the application to be installed.

        <a name="app_image_server_route_policy"></a>
        The `route_policy` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the disk type of the image server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AppImageServerRoutePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuThreshold":
            suggest = "cpu_threshold"
        elif key == "maxSession":
            suggest = "max_session"
        elif key == "memThreshold":
            suggest = "mem_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageServerRoutePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageServerRoutePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageServerRoutePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_threshold: Optional[_builtins.int] = None,
                 max_session: Optional[_builtins.int] = None,
                 mem_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int cpu_threshold: Specifies the CPU usage of the server. The unit is `%`.  
               Changing this creates a new resource.
               The valid value ranges from `1` to `100`.
        :param _builtins.int max_session: Specifies the number of session connections of the server.
               Changing this creates a new resource.
               The maximum number of sessions is equal to the default number of sessions plus the number of additional sessions.
        :param _builtins.int mem_threshold: Specifies the memory usage of the server. The unit is `%`.  
               Changing this creates a new resource.
               The valid value ranges from `1` to `100`.
               
               <a name="app_image_server_scheduler_hints"></a>
               The `scheduler_hints` block supports:
        """
        if cpu_threshold is not None:
            pulumi.set(__self__, "cpu_threshold", cpu_threshold)
        if max_session is not None:
            pulumi.set(__self__, "max_session", max_session)
        if mem_threshold is not None:
            pulumi.set(__self__, "mem_threshold", mem_threshold)

    @_builtins.property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the CPU usage of the server. The unit is `%`.  
        Changing this creates a new resource.
        The valid value ranges from `1` to `100`.
        """
        return pulumi.get(self, "cpu_threshold")

    @_builtins.property
    @pulumi.getter(name="maxSession")
    def max_session(self) -> Optional[_builtins.int]:
        """
        Specifies the number of session connections of the server.
        Changing this creates a new resource.
        The maximum number of sessions is equal to the default number of sessions plus the number of additional sessions.
        """
        return pulumi.get(self, "max_session")

    @_builtins.property
    @pulumi.getter(name="memThreshold")
    def mem_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the memory usage of the server. The unit is `%`.  
        Changing this creates a new resource.
        The valid value ranges from `1` to `100`.

        <a name="app_image_server_scheduler_hints"></a>
        The `scheduler_hints` block supports:
        """
        return pulumi.get(self, "mem_threshold")


@pulumi.output_type
class AppImageServerSchedulerHints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dedicatedHostId":
            suggest = "dedicated_host_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageServerSchedulerHints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageServerSchedulerHints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageServerSchedulerHints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dedicated_host_id: Optional[_builtins.str] = None,
                 tenancy: Optional[_builtins.str] = None):
        """
        :param _builtins.str dedicated_host_id: Specifies the ID of the dedicate host.
               Changing this creates a new resource.
        :param _builtins.str tenancy: Specifies the type of the dedicate host.
               Changing this creates a new resource.
        """
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the dedicate host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter
    def tenancy(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the dedicate host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class AppNasStorageStorageMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"
        elif key == "storageHandle":
            suggest = "storage_handle"
        elif key == "exportLocation":
            suggest = "export_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppNasStorageStorageMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppNasStorageStorageMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppNasStorageStorageMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: _builtins.str,
                 storage_handle: _builtins.str,
                 export_location: Optional[_builtins.str] = None):
        """
        :param _builtins.str storage_class: Specifies the storage type.  
               The valid values are as follows:
               + **sfs**: SFS file system with v3.0 framework.
               
               Change this parameter will create a new resource.
        :param _builtins.str storage_handle: Specifies the storage name.  
               Change this parameter will create a new resource.
        :param _builtins.str export_location: The storage access URL.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        pulumi.set(__self__, "storage_handle", storage_handle)
        if export_location is not None:
            pulumi.set(__self__, "export_location", export_location)

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> _builtins.str:
        """
        Specifies the storage type.  
        The valid values are as follows:
        + **sfs**: SFS file system with v3.0 framework.

        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_class")

    @_builtins.property
    @pulumi.getter(name="storageHandle")
    def storage_handle(self) -> _builtins.str:
        """
        Specifies the storage name.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_handle")

    @_builtins.property
    @pulumi.getter(name="exportLocation")
    def export_location(self) -> Optional[_builtins.str]:
        """
        The storage access URL.
        """
        return pulumi.get(self, "export_location")


@pulumi.output_type
class AppPersonalFoldersAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyStatementId":
            suggest = "policy_statement_id"
        elif key == "attachType":
            suggest = "attach_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppPersonalFoldersAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppPersonalFoldersAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppPersonalFoldersAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attach: _builtins.str,
                 policy_statement_id: _builtins.str,
                 attach_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str attach: Specifies the object name of personal folder assignment.  
               Change this parameter will create a new resource.
        :param _builtins.str policy_statement_id: Specifies the ID of the storage permission policy.  
               Change this parameter will create a new resource.
        :param _builtins.str attach_type: Specifies the type of personal folder assignment.  
               The valid value is **USER** (also default value).
               Change this parameter will create a new resource.
        """
        pulumi.set(__self__, "attach", attach)
        pulumi.set(__self__, "policy_statement_id", policy_statement_id)
        if attach_type is not None:
            pulumi.set(__self__, "attach_type", attach_type)

    @_builtins.property
    @pulumi.getter
    def attach(self) -> _builtins.str:
        """
        Specifies the object name of personal folder assignment.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "attach")

    @_builtins.property
    @pulumi.getter(name="policyStatementId")
    def policy_statement_id(self) -> _builtins.str:
        """
        Specifies the ID of the storage permission policy.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_statement_id")

    @_builtins.property
    @pulumi.getter(name="attachType")
    def attach_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of personal folder assignment.  
        The valid value is **USER** (also default value).
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "attach_type")


@pulumi.output_type
class AppPolicyGroupTarget(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the object ID.  
               If the `type` is set to **USER**, the ID means the user ID.
               If the `type` is set to **USERGROUP**, the ID means the user group ID.
               If the `type` is set to **APPGROUP**, the ID means the APP group ID.
               If the `type` is set to **OU**, the ID means the OU ID.
               If the `type` is set to **ALL**, the ID fixed with string **default-apply-all-targets**.
        :param _builtins.str name: Specifies the object name.  
               If the `type` is set to **USER**, the name means the user name.
               If the `type` is set to **USERGROUP**, the name means the user group name.
               If the `type` is set to **APPGROUP**, the name means the APP group name.
               If the `type` is set to **OU**, the name means the OU name.
               If the `type` is set to **ALL**, the name fixed with string **All-Targets**.
        :param _builtins.str type: Specifies the object type.  
               The valid values are as follows:
               + **USER**
               + **USERGROUP**
               + **APPGROUP**
               + **OU**
               + **ALL**
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the object ID.  
        If the `type` is set to **USER**, the ID means the user ID.
        If the `type` is set to **USERGROUP**, the ID means the user group ID.
        If the `type` is set to **APPGROUP**, the ID means the APP group ID.
        If the `type` is set to **OU**, the ID means the OU ID.
        If the `type` is set to **ALL**, the ID fixed with string **default-apply-all-targets**.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the object name.  
        If the `type` is set to **USER**, the name means the user name.
        If the `type` is set to **USERGROUP**, the name means the user group name.
        If the `type` is set to **APPGROUP**, the name means the APP group name.
        If the `type` is set to **OU**, the name means the OU name.
        If the `type` is set to **ALL**, the name fixed with string **All-Targets**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the object type.  
        The valid values are as follows:
        + **USER**
        + **USERGROUP**
        + **APPGROUP**
        + **OU**
        + **ALL**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AppScheduleTaskScheduleTaskPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enforcementEnable":
            suggest = "enforcement_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppScheduleTaskScheduleTaskPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppScheduleTaskScheduleTaskPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppScheduleTaskScheduleTaskPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforcement_enable: _builtins.bool):
        """
        :param _builtins.bool enforcement_enable: Specifies whether to forcefully execute the task when there are
               active sessions.
               Defaults to **false**.
        """
        pulumi.set(__self__, "enforcement_enable", enforcement_enable)

    @_builtins.property
    @pulumi.getter(name="enforcementEnable")
    def enforcement_enable(self) -> _builtins.bool:
        """
        Specifies whether to forcefully execute the task when there are
        active sessions.
        Defaults to **false**.
        """
        return pulumi.get(self, "enforcement_enable")


@pulumi.output_type
class AppScheduleTaskTargetInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetId":
            suggest = "target_id"
        elif key == "targetType":
            suggest = "target_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppScheduleTaskTargetInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppScheduleTaskTargetInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppScheduleTaskTargetInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_id: _builtins.str,
                 target_type: _builtins.str):
        """
        :param _builtins.str target_id: Specifies the ID of the target object.
        :param _builtins.str target_type: Specifies the type of the target object.  
               The valid values are as follows:
               + **SERVER**
               + **SERVER_GROUP**
               
               <a name="app_schedule_task_policy"></a>
               The `schedule_task_policy` block supports:
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Specifies the ID of the target object.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> _builtins.str:
        """
        Specifies the type of the target object.  
        The valid values are as follows:
        + **SERVER**
        + **SERVER_GROUP**

        <a name="app_schedule_task_policy"></a>
        The `schedule_task_policy` block supports:
        """
        return pulumi.get(self, "target_type")


@pulumi.output_type
class AppServerGroupFlavor(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 links: Optional[Sequence['outputs.AppServerGroupFlavorLink']] = None):
        """
        :param _builtins.str id: The ID of the flavor.
        :param Sequence['AppServerGroupFlavorLinkArgs'] links: The quick link information for relevant tags corresponding to server specifications.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.AppServerGroupFlavorLink']]:
        """
        The quick link information for relevant tags corresponding to server specifications.
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class AppServerGroupFlavorLink(dict):
    def __init__(__self__, *,
                 href: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link tag name.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        The shortcut link tag name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class AppServerGroupIpVirtual(dict):
    def __init__(__self__, *,
                 enable: _builtins.bool):
        """
        :param _builtins.bool enable: Whether to enable IP virtualization. Defaults to **false**.  
               Changing this creates a new resource.
               
               <a name="app_server_group_route_policy"></a>
               The `route_policy` block supports:
        """
        pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Whether to enable IP virtualization. Defaults to **false**.  
        Changing this creates a new resource.

        <a name="app_server_group_route_policy"></a>
        The `route_policy` block supports:
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class AppServerGroupRoutePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuThreshold":
            suggest = "cpu_threshold"
        elif key == "maxSession":
            suggest = "max_session"
        elif key == "memThreshold":
            suggest = "mem_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppServerGroupRoutePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppServerGroupRoutePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppServerGroupRoutePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_threshold: Optional[_builtins.int] = None,
                 max_session: Optional[_builtins.int] = None,
                 mem_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int cpu_threshold: The CPU usage of the server. The unit is `%`.  
               The valid value ranges from `1` to `100`.
        :param _builtins.int max_session: The number of session connections of the server.  
               The maximum number of sessions is equal to the default number of sessions plus the number of additional sessions.
        :param _builtins.int mem_threshold: The memory usage of the server. The unit is `%`.  
               The valid value ranges from `1` to `100`.
        """
        if cpu_threshold is not None:
            pulumi.set(__self__, "cpu_threshold", cpu_threshold)
        if max_session is not None:
            pulumi.set(__self__, "max_session", max_session)
        if mem_threshold is not None:
            pulumi.set(__self__, "mem_threshold", mem_threshold)

    @_builtins.property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[_builtins.int]:
        """
        The CPU usage of the server. The unit is `%`.  
        The valid value ranges from `1` to `100`.
        """
        return pulumi.get(self, "cpu_threshold")

    @_builtins.property
    @pulumi.getter(name="maxSession")
    def max_session(self) -> Optional[_builtins.int]:
        """
        The number of session connections of the server.  
        The maximum number of sessions is equal to the default number of sessions plus the number of additional sessions.
        """
        return pulumi.get(self, "max_session")

    @_builtins.property
    @pulumi.getter(name="memThreshold")
    def mem_threshold(self) -> Optional[_builtins.int]:
        """
        The memory usage of the server. The unit is `%`.  
        The valid value ranges from `1` to `100`.
        """
        return pulumi.get(self, "mem_threshold")


@pulumi.output_type
class AppServerGroupScalingPolicyScalingPolicyBySession(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sessionUsageThreshold":
            suggest = "session_usage_threshold"
        elif key == "shrinkAfterSessionIdleMinutes":
            suggest = "shrink_after_session_idle_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppServerGroupScalingPolicyScalingPolicyBySession. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppServerGroupScalingPolicyScalingPolicyBySession.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppServerGroupScalingPolicyScalingPolicyBySession.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 session_usage_threshold: _builtins.int,
                 shrink_after_session_idle_minutes: _builtins.int):
        """
        :param _builtins.int session_usage_threshold: Specifies the total session usage threshold of the server group.
        :param _builtins.int shrink_after_session_idle_minutes: Specifies the number of minutes to wait before releasing instances
               with no session connections.
        """
        pulumi.set(__self__, "session_usage_threshold", session_usage_threshold)
        pulumi.set(__self__, "shrink_after_session_idle_minutes", shrink_after_session_idle_minutes)

    @_builtins.property
    @pulumi.getter(name="sessionUsageThreshold")
    def session_usage_threshold(self) -> _builtins.int:
        """
        Specifies the total session usage threshold of the server group.
        """
        return pulumi.get(self, "session_usage_threshold")

    @_builtins.property
    @pulumi.getter(name="shrinkAfterSessionIdleMinutes")
    def shrink_after_session_idle_minutes(self) -> _builtins.int:
        """
        Specifies the number of minutes to wait before releasing instances
        with no session connections.
        """
        return pulumi.get(self, "shrink_after_session_idle_minutes")


@pulumi.output_type
class AppServerRootVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Specifies the disk size of the server, in GB.
               Changing this creates a new resource.
               
               <a name="app_server_scheduler_hints"></a>
               The `scheduler_hints` block supports:
        :param _builtins.str type: Specifies the disk type of the server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the disk size of the server, in GB.
        Changing this creates a new resource.

        <a name="app_server_scheduler_hints"></a>
        The `scheduler_hints` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the disk type of the server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AppServerSchedulerHints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dedicatedHostId":
            suggest = "dedicated_host_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppServerSchedulerHints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppServerSchedulerHints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppServerSchedulerHints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dedicated_host_id: Optional[_builtins.str] = None,
                 tenancy: Optional[_builtins.str] = None):
        """
        :param _builtins.str dedicated_host_id: Specifies the ID of the dedicate host.
               Changing this creates a new resource.
        :param _builtins.str tenancy: Specifies the type of the dedicate host.
               Changing this creates a new resource.
               Currently, only **dedicated** is supported.
        """
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the dedicate host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter
    def tenancy(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the dedicate host.
        Changing this creates a new resource.
        Currently, only **dedicated** is supported.
        """
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class ApplicationApplicationFileStore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storeType":
            suggest = "store_type"
        elif key == "bucketStore":
            suggest = "bucket_store"
        elif key == "fileLink":
            suggest = "file_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationApplicationFileStore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationApplicationFileStore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationApplicationFileStore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 store_type: _builtins.str,
                 bucket_store: Optional['outputs.ApplicationApplicationFileStoreBucketStore'] = None,
                 file_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str store_type: Specifies the store type of the application file.  
               The valid values are as follows:
               + **OBS**: Object Storage Service bucket store.
               + **LINK**: External file link.
        :param 'ApplicationApplicationFileStoreBucketStoreArgs' bucket_store: Specifies the OBS bucket store configuration.  
               The bucket_store structure is documented below.
               Required if the value of parameter `store_type` is **OBS**.
        :param _builtins.str file_link: Specifies the external file link.  
               Required if the value of parameter `store_type` is **LINK**.
               
               <a name="workspace_application_bucket_store"></a>
               The `bucket_store` block supports:
        """
        pulumi.set(__self__, "store_type", store_type)
        if bucket_store is not None:
            pulumi.set(__self__, "bucket_store", bucket_store)
        if file_link is not None:
            pulumi.set(__self__, "file_link", file_link)

    @_builtins.property
    @pulumi.getter(name="storeType")
    def store_type(self) -> _builtins.str:
        """
        Specifies the store type of the application file.  
        The valid values are as follows:
        + **OBS**: Object Storage Service bucket store.
        + **LINK**: External file link.
        """
        return pulumi.get(self, "store_type")

    @_builtins.property
    @pulumi.getter(name="bucketStore")
    def bucket_store(self) -> Optional['outputs.ApplicationApplicationFileStoreBucketStore']:
        """
        Specifies the OBS bucket store configuration.  
        The bucket_store structure is documented below.
        Required if the value of parameter `store_type` is **OBS**.
        """
        return pulumi.get(self, "bucket_store")

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> Optional[_builtins.str]:
        """
        Specifies the external file link.  
        Required if the value of parameter `store_type` is **LINK**.

        <a name="workspace_application_bucket_store"></a>
        The `bucket_store` block supports:
        """
        return pulumi.get(self, "file_link")


@pulumi.output_type
class ApplicationApplicationFileStoreBucketStore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketFilePath":
            suggest = "bucket_file_path"
        elif key == "bucketName":
            suggest = "bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationApplicationFileStoreBucketStore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationApplicationFileStoreBucketStore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationApplicationFileStoreBucketStore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_file_path: _builtins.str,
                 bucket_name: _builtins.str):
        """
        :param _builtins.str bucket_file_path: Specifies the file path in the OBS bucket.
        :param _builtins.str bucket_name: Specifies the name of the OBS bucket.
        """
        pulumi.set(__self__, "bucket_file_path", bucket_file_path)
        pulumi.set(__self__, "bucket_name", bucket_name)

    @_builtins.property
    @pulumi.getter(name="bucketFilePath")
    def bucket_file_path(self) -> _builtins.str:
        """
        Specifies the file path in the OBS bucket.
        """
        return pulumi.get(self, "bucket_file_path")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        Specifies the name of the OBS bucket.
        """
        return pulumi.get(self, "bucket_name")


@pulumi.output_type
class ApplicationRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathRule":
            suggest = "path_rule"
        elif key == "productRule":
            suggest = "product_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: _builtins.str,
                 path_rule: Optional['outputs.ApplicationRuleDetailPathRule'] = None,
                 product_rule: Optional['outputs.ApplicationRuleDetailProductRule'] = None):
        """
        :param _builtins.str scope: Specifies the scope of the application rule.  
               The valid values are as follows:
               + **PRODUCT**
               + **PATH**
        :param 'ApplicationRuleDetailPathRuleArgs' path_rule: Specifies the detail of the path rule.  
               The path_rule structure is documented below.
               
               > Required if the value of parameter `scope` is **PATH**.
               
               <a name="workspace_application_product_rule_config"></a>
               The `product_rule` block supports:
        :param 'ApplicationRuleDetailProductRuleArgs' product_rule: Specifies the detail of the product rule.  
               The product_rule structure is documented below.
               
               > Required if the value of parameter `scope` is **PRODUCT**.
        """
        pulumi.set(__self__, "scope", scope)
        if path_rule is not None:
            pulumi.set(__self__, "path_rule", path_rule)
        if product_rule is not None:
            pulumi.set(__self__, "product_rule", product_rule)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Specifies the scope of the application rule.  
        The valid values are as follows:
        + **PRODUCT**
        + **PATH**
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="pathRule")
    def path_rule(self) -> Optional['outputs.ApplicationRuleDetailPathRule']:
        """
        Specifies the detail of the path rule.  
        The path_rule structure is documented below.

        > Required if the value of parameter `scope` is **PATH**.

        <a name="workspace_application_product_rule_config"></a>
        The `product_rule` block supports:
        """
        return pulumi.get(self, "path_rule")

    @_builtins.property
    @pulumi.getter(name="productRule")
    def product_rule(self) -> Optional['outputs.ApplicationRuleDetailProductRule']:
        """
        Specifies the detail of the product rule.  
        The product_rule structure is documented below.

        > Required if the value of parameter `scope` is **PRODUCT**.
        """
        return pulumi.get(self, "product_rule")


@pulumi.output_type
class ApplicationRuleDetailPathRule(dict):
    def __init__(__self__, *,
                 path: _builtins.str):
        """
        :param _builtins.str path: Specifies the path where the product is installed.
        """
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the path where the product is installed.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationRuleDetailProductRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identifyCondition":
            suggest = "identify_condition"
        elif key == "processName":
            suggest = "process_name"
        elif key == "productName":
            suggest = "product_name"
        elif key == "productVersion":
            suggest = "product_version"
        elif key == "supportOs":
            suggest = "support_os"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationRuleDetailProductRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationRuleDetailProductRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationRuleDetailProductRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identify_condition: _builtins.str,
                 process_name: Optional[_builtins.str] = None,
                 product_name: Optional[_builtins.str] = None,
                 product_version: Optional[_builtins.str] = None,
                 publisher: Optional[_builtins.str] = None,
                 support_os: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str identify_condition: Specifies the identify condition of the product rule.  
               The valid values are as follows:
               + **publisher**
               + **product**
               + **process**
        :param _builtins.str process_name: Specifies the process name of the product.  
               Defaults to empty string, also you can configure this value as asterisk (*).
               
               > At least one of `publisher`, `product_name` and `process_name` must be provided,
               and both of them cannot be asterisk (*) or empty.
        :param _builtins.str product_name: Specifies the name of the product.  
               Defaults to empty string, also you can configure this value as asterisk (*).
               
               > At least one of `publisher`, `product_name` and `process_name` must be provided,
               and both of them cannot be asterisk (*) or empty.
        :param _builtins.str product_version: Specifies the version of the product.
               
               <a name="workspace_application_path_rule_config"></a>
               The `path_rule` block supports:
        :param _builtins.str publisher: Specifies the publisher of the product.  
               Defaults to empty string, also you can configure this value as asterisk (*).
               
               > At least one of `publisher`, `product_name` and `process_name` must be provided,
               and both of them cannot be asterisk (*) or empty.
        :param _builtins.str support_os: Specifies the list of the supported operating system types.  
               Defaults to **Windows**
        :param _builtins.str version: Specifies the version of the product rule.
        """
        pulumi.set(__self__, "identify_condition", identify_condition)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if support_os is not None:
            pulumi.set(__self__, "support_os", support_os)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="identifyCondition")
    def identify_condition(self) -> _builtins.str:
        """
        Specifies the identify condition of the product rule.  
        The valid values are as follows:
        + **publisher**
        + **product**
        + **process**
        """
        return pulumi.get(self, "identify_condition")

    @_builtins.property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[_builtins.str]:
        """
        Specifies the process name of the product.  
        Defaults to empty string, also you can configure this value as asterisk (*).

        > At least one of `publisher`, `product_name` and `process_name` must be provided,
        and both of them cannot be asterisk (*) or empty.
        """
        return pulumi.get(self, "process_name")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the product.  
        Defaults to empty string, also you can configure this value as asterisk (*).

        > At least one of `publisher`, `product_name` and `process_name` must be provided,
        and both of them cannot be asterisk (*) or empty.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the product.

        <a name="workspace_application_path_rule_config"></a>
        The `path_rule` block supports:
        """
        return pulumi.get(self, "product_version")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> Optional[_builtins.str]:
        """
        Specifies the publisher of the product.  
        Defaults to empty string, also you can configure this value as asterisk (*).

        > At least one of `publisher`, `product_name` and `process_name` must be provided,
        and both of them cannot be asterisk (*) or empty.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> Optional[_builtins.str]:
        """
        Specifies the list of the supported operating system types.  
        Defaults to **Windows**
        """
        return pulumi.get(self, "support_os")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the product rule.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DesktopDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.int size: Specifies the size of system volume, in GB.
               + For root volume, the valid value is range from `80` to `1,020`.
               + For data volume, the valid value is range from `10` to `8,200`.
               
               <a name="desktop_nic"></a>
               The `nic` block supports:
        :param _builtins.str type: Specifies the type of system volume.
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
               
               > Updates are not supported for this parameter. Changing this will not create a new resource, but will throw an
               error.
        :param _builtins.str created_at: The time that the volume was created.
        :param _builtins.str device: The device location to which the volume is attached.
        :param _builtins.str id: The volume ID.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of system volume, in GB.
        + For root volume, the valid value is range from `80` to `1,020`.
        + For data volume, the valid value is range from `10` to `8,200`.

        <a name="desktop_nic"></a>
        The `nic` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of system volume.
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.

        > Updates are not supported for this parameter. Changing this will not create a new resource, but will throw an
        error.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The time that the volume was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        """
        The device location to which the volume is attached.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The volume ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DesktopNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: _builtins.str):
        """
        :param _builtins.str network_id: Specifies the network ID of subnet resource.
        """
        pulumi.set(__self__, "network_id", network_id)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        Specifies the network ID of subnet resource.
        """
        return pulumi.get(self, "network_id")


@pulumi.output_type
class DesktopPoolAuthorizedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectName":
            suggest = "object_name"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopPoolAuthorizedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopPoolAuthorizedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopPoolAuthorizedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: _builtins.str,
                 object_name: _builtins.str,
                 object_type: _builtins.str,
                 user_group: _builtins.str):
        """
        :param _builtins.str object_id: Specifies the ID of the object.
        :param _builtins.str object_name: Specifies the name of the object.
        :param _builtins.str object_type: Specifies the type of the object.  
               The valid values are as follows:
               + **USER**
               + **USER_GROUP**
        :param _builtins.str user_group: Specifies the permission group to which the user belongs.  
               The valid values are as follows:
               + **sudo**: Linux administrator group.
               + **default**: Linux default user group.
               + **administrators**: Windows administrator group.
               + **users**: Windows standard user group.
               
               <a name="desktop_pool_autoscale_policy"></a>
               The `autoscale_policy` block supports:
        """
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "user_group", user_group)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.str:
        """
        Specifies the ID of the object.
        """
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectName")
    def object_name(self) -> _builtins.str:
        """
        Specifies the name of the object.
        """
        return pulumi.get(self, "object_name")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        Specifies the type of the object.  
        The valid values are as follows:
        + **USER**
        + **USER_GROUP**
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> _builtins.str:
        """
        Specifies the permission group to which the user belongs.  
        The valid values are as follows:
        + **sudo**: Linux administrator group.
        + **default**: Linux default user group.
        + **administrators**: Windows administrator group.
        + **users**: Windows standard user group.

        <a name="desktop_pool_autoscale_policy"></a>
        The `autoscale_policy` block supports:
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class DesktopPoolAutoscalePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoscaleType":
            suggest = "autoscale_type"
        elif key == "maxAutoCreated":
            suggest = "max_auto_created"
        elif key == "minIdle":
            suggest = "min_idle"
        elif key == "onceAutoCreated":
            suggest = "once_auto_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopPoolAutoscalePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopPoolAutoscalePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopPoolAutoscalePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscale_type: Optional[_builtins.str] = None,
                 max_auto_created: Optional[_builtins.int] = None,
                 min_idle: Optional[_builtins.int] = None,
                 once_auto_created: Optional[_builtins.int] = None):
        """
        :param _builtins.str autoscale_type: Specifies the type of automatic scaling policy.  
               The valid values are as follows:
               + **ACCESS_CREATED**: Create desktops during accessing.
               + **AUTO_CREATED**: Pre-creation desktops.
        :param _builtins.int max_auto_created: Specifies the maximum number of automatically created desktops.  
               The valid value ranges from `1` to `1,000`.
        :param _builtins.int min_idle: Specifies the desktops will be automatically created when the number of idle desktops is
               less than this value.
               The valid value ranges from `1` to `1,000`.
        :param _builtins.int once_auto_created: Specifies the number of desktops automatically created at one time.  
               The valid value ranges from `1` to `100`.
               
               <a name="desktop_pool_security_groups"></a>
               The `security_groups` block supports:
        """
        if autoscale_type is not None:
            pulumi.set(__self__, "autoscale_type", autoscale_type)
        if max_auto_created is not None:
            pulumi.set(__self__, "max_auto_created", max_auto_created)
        if min_idle is not None:
            pulumi.set(__self__, "min_idle", min_idle)
        if once_auto_created is not None:
            pulumi.set(__self__, "once_auto_created", once_auto_created)

    @_builtins.property
    @pulumi.getter(name="autoscaleType")
    def autoscale_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of automatic scaling policy.  
        The valid values are as follows:
        + **ACCESS_CREATED**: Create desktops during accessing.
        + **AUTO_CREATED**: Pre-creation desktops.
        """
        return pulumi.get(self, "autoscale_type")

    @_builtins.property
    @pulumi.getter(name="maxAutoCreated")
    def max_auto_created(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of automatically created desktops.  
        The valid value ranges from `1` to `1,000`.
        """
        return pulumi.get(self, "max_auto_created")

    @_builtins.property
    @pulumi.getter(name="minIdle")
    def min_idle(self) -> Optional[_builtins.int]:
        """
        Specifies the desktops will be automatically created when the number of idle desktops is
        less than this value.
        The valid value ranges from `1` to `1,000`.
        """
        return pulumi.get(self, "min_idle")

    @_builtins.property
    @pulumi.getter(name="onceAutoCreated")
    def once_auto_created(self) -> Optional[_builtins.int]:
        """
        Specifies the number of desktops automatically created at one time.  
        The valid value ranges from `1` to `100`.

        <a name="desktop_pool_security_groups"></a>
        The `security_groups` block supports:
        """
        return pulumi.get(self, "once_auto_created")


@pulumi.output_type
class DesktopPoolDataVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.int size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param _builtins.str type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param _builtins.str id: Specifies the ID of the security group.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of the volume, in GB.
        + For root volume, the valid value ranges from `80` to `1,020`.
        + For data volume, the valid value ranges from `10` to `8,200`.

        <a name="desktop_pool_authorized_objects"></a>
        The `authorized_objects` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the security group.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DesktopPoolProduct(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chargingMode":
            suggest = "charging_mode"
        elif key == "flavorId":
            suggest = "flavor_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopPoolProduct. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopPoolProduct.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopPoolProduct.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 charging_mode: Optional[_builtins.str] = None,
                 cpu: Optional[_builtins.str] = None,
                 descriptions: Optional[_builtins.str] = None,
                 flavor_id: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str charging_mode: The product charging mode of the desktop pool.
               + **0**: The yearly/monthly billing mode.
               + **1**: The pay-per-use billing mode.
        :param _builtins.str cpu: The product CPU of the desktop pool.
        :param _builtins.str descriptions: The product description of the desktop pool.
        :param _builtins.str flavor_id: The product specification ID of the desktop pool.
        :param _builtins.str memory: The product memory of the desktop pool.
        :param _builtins.str type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        """
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if descriptions is not None:
            pulumi.set(__self__, "descriptions", descriptions)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[_builtins.str]:
        """
        The product charging mode of the desktop pool.
        + **0**: The yearly/monthly billing mode.
        + **1**: The pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        The product CPU of the desktop pool.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[_builtins.str]:
        """
        The product description of the desktop pool.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[_builtins.str]:
        """
        The product specification ID of the desktop pool.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        The product memory of the desktop pool.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DesktopPoolRootVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.int size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param _builtins.str type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param _builtins.str id: Specifies the ID of the security group.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of the volume, in GB.
        + For root volume, the valid value ranges from `80` to `1,020`.
        + For data volume, the valid value ranges from `10` to `8,200`.

        <a name="desktop_pool_authorized_objects"></a>
        The `authorized_objects` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the security group.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DesktopPoolSecurityGroup(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the security group.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the security group.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DesktopRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DesktopRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DesktopRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DesktopRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.int size: Specifies the size of system volume, in GB.
               + For root volume, the valid value is range from `80` to `1,020`.
               + For data volume, the valid value is range from `10` to `8,200`.
               
               <a name="desktop_nic"></a>
               The `nic` block supports:
        :param _builtins.str type: Specifies the type of system volume.
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
               
               > Updates are not supported for this parameter. Changing this will not create a new resource, but will throw an
               error.
        :param _builtins.str created_at: The time that the volume was created.
        :param _builtins.str device: The device location to which the volume is attached.
        :param _builtins.str id: The volume ID.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of system volume, in GB.
        + For root volume, the valid value is range from `80` to `1,020`.
        + For data volume, the valid value is range from `10` to `8,200`.

        <a name="desktop_nic"></a>
        The `nic` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of system volume.
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.

        > Updates are not supported for this parameter. Changing this will not create a new resource, but will throw an
        error.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The time that the volume was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        """
        The device location to which the volume is attached.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The volume ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyGroupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControl":
            suggest = "access_control"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control: 'outputs.PolicyGroupPolicyAccessControl'):
        """
        :param 'PolicyGroupPolicyAccessControlArgs' access_control: Specifies the configuration of the access policy control.
               The access_control structure is documented below.
               
               <a name="policy_group_access_control"></a>
               The `access_control` block supports:
        """
        pulumi.set(__self__, "access_control", access_control)

    @_builtins.property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> 'outputs.PolicyGroupPolicyAccessControl':
        """
        Specifies the configuration of the access policy control.
        The access_control structure is documented below.

        <a name="policy_group_access_control"></a>
        The `access_control` block supports:
        """
        return pulumi.get(self, "access_control")


@pulumi.output_type
class PolicyGroupPolicyAccessControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAccessControl":
            suggest = "ip_access_control"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupPolicyAccessControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupPolicyAccessControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupPolicyAccessControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_access_control: _builtins.str):
        """
        :param _builtins.str ip_access_control: Specifies the IP access control.  
               It consists of multiple groups of IP addresses and network masks, separated by ';',
               and spliced together by '|' between IP addresses and network masks, e.g. `IP|mask;IP|mask;IP|mask`
        """
        pulumi.set(__self__, "ip_access_control", ip_access_control)

    @_builtins.property
    @pulumi.getter(name="ipAccessControl")
    def ip_access_control(self) -> _builtins.str:
        """
        Specifies the IP access control.  
        It consists of multiple groups of IP addresses and network masks, separated by ';',
        and spliced together by '|' between IP addresses and network masks, e.g. `IP|mask;IP|mask;IP|mask`
        """
        return pulumi.get(self, "ip_access_control")


@pulumi.output_type
class PolicyGroupTarget(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the target ID.  
               If the `targets` type is **INSTANCE**, the ID means the SID of the desktop.
               If the `targets` type is **USER**, the ID means the user ID.
               If the `targets` type is **USERGROUP**, the ID means the user group ID.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OUID.
               If the `targets` type is **ALL**, the ID fixed with string **default-apply-all-targets**.
        :param _builtins.str name: Specifies the target name.  
               If the `targets` type is **INSTANCE**, the ID means the desktop name.
               If the `targets` type is **USER**, the ID means the user name.
               If the `targets` type is **USERGROUP**, the ID means the user group name.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OU name.
               If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.
               
               <a name="policy_group_policy"></a>
               The `policy` block supports:
        :param _builtins.str type: Specifies the target type.
               The valid values are as follows:
               + **INSTANCE**: Desktop.
               + **USER**: User.
               + **USERGROUP**: User group.
               + **CLIENTIP**: Terminal IP address.
               + **OU**: Organization unit.
               + **ALL**: All desktops.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the target ID.  
        If the `targets` type is **INSTANCE**, the ID means the SID of the desktop.
        If the `targets` type is **USER**, the ID means the user ID.
        If the `targets` type is **USERGROUP**, the ID means the user group ID.
        If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
        If the `targets` type is **OU**, the ID means the OUID.
        If the `targets` type is **ALL**, the ID fixed with string **default-apply-all-targets**.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the target name.  
        If the `targets` type is **INSTANCE**, the ID means the desktop name.
        If the `targets` type is **USER**, the ID means the user name.
        If the `targets` type is **USERGROUP**, the ID means the user group name.
        If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
        If the `targets` type is **OU**, the ID means the OU name.
        If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.

        <a name="policy_group_policy"></a>
        The `policy` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the target type.
        The valid values are as follows:
        + **INSTANCE**: Desktop.
        + **USER**: User.
        + **USERGROUP**: User group.
        + **CLIENTIP**: Terminal IP address.
        + **OU**: Organization unit.
        + **ALL**: All desktops.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAdDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDomainIp":
            suggest = "active_domain_ip"
        elif key == "activeDomainName":
            suggest = "active_domain_name"
        elif key == "adminAccount":
            suggest = "admin_account"
        elif key == "activeDnsIp":
            suggest = "active_dns_ip"
        elif key == "deleteComputerObject":
            suggest = "delete_computer_object"
        elif key == "standbyDnsIp":
            suggest = "standby_dns_ip"
        elif key == "standbyDomainIp":
            suggest = "standby_domain_ip"
        elif key == "standbyDomainName":
            suggest = "standby_domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAdDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAdDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAdDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_domain_ip: _builtins.str,
                 active_domain_name: _builtins.str,
                 admin_account: _builtins.str,
                 name: _builtins.str,
                 password: _builtins.str,
                 active_dns_ip: Optional[_builtins.str] = None,
                 delete_computer_object: Optional[_builtins.bool] = None,
                 standby_dns_ip: Optional[_builtins.str] = None,
                 standby_domain_ip: Optional[_builtins.str] = None,
                 standby_domain_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str active_domain_ip: Specifies the IP address of primary domain controller.
        :param _builtins.str active_domain_name: Specifies the name of primary domain controller.
        :param _builtins.str admin_account: Specifies the domain administrator account.
               It must be an existing domain administrator account on the AD server.
        :param _builtins.str name: Specifies the domain name.
               The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        :param _builtins.str password: Specifies the account password of domain administrator.
        :param _builtins.str active_dns_ip: Specifies the primary DNS IP address.
        :param _builtins.bool delete_computer_object: Specifies whether to delete the corresponding computer object on AD
               while deleting the desktop.
               
               <a name="config_info"></a>
               The `otp_config_info` block supports:
        :param _builtins.str standby_dns_ip: Specifies the standby DNS IP address.
        :param _builtins.str standby_domain_ip: Specifies the IP address of the standby domain controller.
        :param _builtins.str standby_domain_name: Specifies the name of the standby domain controller.
        """
        pulumi.set(__self__, "active_domain_ip", active_domain_ip)
        pulumi.set(__self__, "active_domain_name", active_domain_name)
        pulumi.set(__self__, "admin_account", admin_account)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if active_dns_ip is not None:
            pulumi.set(__self__, "active_dns_ip", active_dns_ip)
        if delete_computer_object is not None:
            pulumi.set(__self__, "delete_computer_object", delete_computer_object)
        if standby_dns_ip is not None:
            pulumi.set(__self__, "standby_dns_ip", standby_dns_ip)
        if standby_domain_ip is not None:
            pulumi.set(__self__, "standby_domain_ip", standby_domain_ip)
        if standby_domain_name is not None:
            pulumi.set(__self__, "standby_domain_name", standby_domain_name)

    @_builtins.property
    @pulumi.getter(name="activeDomainIp")
    def active_domain_ip(self) -> _builtins.str:
        """
        Specifies the IP address of primary domain controller.
        """
        return pulumi.get(self, "active_domain_ip")

    @_builtins.property
    @pulumi.getter(name="activeDomainName")
    def active_domain_name(self) -> _builtins.str:
        """
        Specifies the name of primary domain controller.
        """
        return pulumi.get(self, "active_domain_name")

    @_builtins.property
    @pulumi.getter(name="adminAccount")
    def admin_account(self) -> _builtins.str:
        """
        Specifies the domain administrator account.
        It must be an existing domain administrator account on the AD server.
        """
        return pulumi.get(self, "admin_account")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the domain name.
        The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Specifies the account password of domain administrator.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="activeDnsIp")
    def active_dns_ip(self) -> Optional[_builtins.str]:
        """
        Specifies the primary DNS IP address.
        """
        return pulumi.get(self, "active_dns_ip")

    @_builtins.property
    @pulumi.getter(name="deleteComputerObject")
    def delete_computer_object(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to delete the corresponding computer object on AD
        while deleting the desktop.

        <a name="config_info"></a>
        The `otp_config_info` block supports:
        """
        return pulumi.get(self, "delete_computer_object")

    @_builtins.property
    @pulumi.getter(name="standbyDnsIp")
    def standby_dns_ip(self) -> Optional[_builtins.str]:
        """
        Specifies the standby DNS IP address.
        """
        return pulumi.get(self, "standby_dns_ip")

    @_builtins.property
    @pulumi.getter(name="standbyDomainIp")
    def standby_domain_ip(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address of the standby domain controller.
        """
        return pulumi.get(self, "standby_domain_ip")

    @_builtins.property
    @pulumi.getter(name="standbyDomainName")
    def standby_domain_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the standby domain controller.
        """
        return pulumi.get(self, "standby_domain_name")


@pulumi.output_type
class ServiceDesktopSecurityGroup(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Security group ID.
        :param _builtins.str name: Specifies the domain name.
               The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the domain name.
        The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ServiceInfrastructureSecurityGroup(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Security group ID.
        :param _builtins.str name: Specifies the domain name.
               The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the domain name.
        The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ServiceOtpConfigInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "receiveMode":
            suggest = "receive_mode"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appSecret":
            suggest = "app_secret"
        elif key == "authServerAccessMode":
            suggest = "auth_server_access_mode"
        elif key == "authUrl":
            suggest = "auth_url"
        elif key == "certContent":
            suggest = "cert_content"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceOtpConfigInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceOtpConfigInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceOtpConfigInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: _builtins.bool,
                 receive_mode: _builtins.str,
                 app_id: Optional[_builtins.str] = None,
                 app_secret: Optional[_builtins.str] = None,
                 auth_server_access_mode: Optional[_builtins.str] = None,
                 auth_url: Optional[_builtins.str] = None,
                 cert_content: Optional[_builtins.str] = None,
                 rule: Optional[_builtins.str] = None,
                 rule_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Specifies whether to enable auxiliary authentication.
        :param _builtins.str receive_mode: Specifies the verification code receiving mode.
               + **VMFA**: Indicates virtual MFA device.
               + **HMFA**: Indicates hardware MFA device.
        :param _builtins.str app_id: Specifies the auxiliary authentication server access account.
        :param _builtins.str app_secret: Specifies the authentication service access password.
        :param _builtins.str auth_server_access_mode: Specifies the authentication service access mode.
               + **INTERNET**: Indicates internet access.
               + **DEDICATED**: Indicates dedicated access.
               + **SYSTEM_DEFAULT**: Indicates system default.
        :param _builtins.str auth_url: Specifies the auxiliary authentication server address.
        :param _builtins.str cert_content: Specifies the PEM format certificate content.
        :param _builtins.str rule: Specifies authentication application object.
               + **INTERNET**: Indicates Internet access. Optional only when rule_type is **ACCESS_MODE**.
               + **PRIVATE**: Indicates dedicated line access. Optional only when rule_type is **ACCESS_MODE**.
        :param _builtins.str rule_type: Specifies authentication application object type.
               + **ACCESS_MODE**: Indicates access type.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "receive_mode", receive_mode)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_secret is not None:
            pulumi.set(__self__, "app_secret", app_secret)
        if auth_server_access_mode is not None:
            pulumi.set(__self__, "auth_server_access_mode", auth_server_access_mode)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if cert_content is not None:
            pulumi.set(__self__, "cert_content", cert_content)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Specifies whether to enable auxiliary authentication.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="receiveMode")
    def receive_mode(self) -> _builtins.str:
        """
        Specifies the verification code receiving mode.
        + **VMFA**: Indicates virtual MFA device.
        + **HMFA**: Indicates hardware MFA device.
        """
        return pulumi.get(self, "receive_mode")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[_builtins.str]:
        """
        Specifies the auxiliary authentication server access account.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication service access password.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="authServerAccessMode")
    def auth_server_access_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication service access mode.
        + **INTERNET**: Indicates internet access.
        + **DEDICATED**: Indicates dedicated access.
        + **SYSTEM_DEFAULT**: Indicates system default.
        """
        return pulumi.get(self, "auth_server_access_mode")

    @_builtins.property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[_builtins.str]:
        """
        Specifies the auxiliary authentication server address.
        """
        return pulumi.get(self, "auth_url")

    @_builtins.property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> Optional[_builtins.str]:
        """
        Specifies the PEM format certificate content.
        """
        return pulumi.get(self, "cert_content")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional[_builtins.str]:
        """
        Specifies authentication application object.
        + **INTERNET**: Indicates Internet access. Optional only when rule_type is **ACCESS_MODE**.
        + **PRIVATE**: Indicates dedicated line access. Optional only when rule_type is **ACCESS_MODE**.
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[_builtins.str]:
        """
        Specifies authentication application object type.
        + **ACCESS_MODE**: Indicates access type.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class TerminalBindingBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desktopName":
            suggest = "desktop_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TerminalBindingBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TerminalBindingBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TerminalBindingBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desktop_name: _builtins.str,
                 mac: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str desktop_name: Specifies the desktop name.
        :param _builtins.str mac: Specifies the MAC address.
        :param _builtins.str description: Specifies the binding description.
        :param _builtins.str id: The ID of the binding policy.
        """
        pulumi.set(__self__, "desktop_name", desktop_name)
        pulumi.set(__self__, "mac", mac)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="desktopName")
    def desktop_name(self) -> _builtins.str:
        """
        Specifies the desktop name.
        """
        return pulumi.get(self, "desktop_name")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> _builtins.str:
        """
        Specifies the MAC address.
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the binding description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the binding policy.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserGroupUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalDesktops":
            suggest = "total_desktops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 phone: Optional[_builtins.str] = None,
                 total_desktops: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies the user ID to be added to the user group.
        :param _builtins.str description: Specifies the description of user group.
        :param _builtins.str email: The email of user.
        :param _builtins.str name: Specifies the user group name.  
               > AD domain user group do not support renaming.
        :param _builtins.str phone: The phone of user.
        :param _builtins.int total_desktops: The number of desktops the user has.
        """
        pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if total_desktops is not None:
            pulumi.set(__self__, "total_desktops", total_desktops)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the user ID to be added to the user group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of user group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        The email of user.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the user group name.  
        > AD domain user group do not support renaming.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def phone(self) -> Optional[_builtins.str]:
        """
        The phone of user.
        """
        return pulumi.get(self, "phone")

    @_builtins.property
    @pulumi.getter(name="totalDesktops")
    def total_desktops(self) -> Optional[_builtins.int]:
        """
        The number of desktops the user has.
        """
        return pulumi.get(self, "total_desktops")


@pulumi.output_type
class GetAppAvailableVolumesVolumeTypeResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 names: Sequence[Mapping[str, _builtins.str]],
                 resource_spec_code: _builtins.str,
                 resource_type: _builtins.str,
                 volume_product_type: _builtins.str,
                 volume_type: _builtins.str,
                 volume_type_extra_specs: Sequence['outputs.GetAppAvailableVolumesVolumeTypeVolumeTypeExtraSpecResult']):
        """
        :param _builtins.str cloud_service_type: The cloud service type code.
        :param Sequence[Mapping[str, _builtins.str]] names: The volume type name in different languages.
        :param _builtins.str resource_spec_code: The resource specification code.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.str volume_product_type: The volume product type.
        :param _builtins.str volume_type: The volume type.
        :param Sequence['GetAppAvailableVolumesVolumeTypeVolumeTypeExtraSpecArgs'] volume_type_extra_specs: The extra specifications of volume type.  
               The volume_type_extra_specs structure is documented below.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "volume_product_type", volume_product_type)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "volume_type_extra_specs", volume_type_extra_specs)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The cloud service type code.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Sequence[Mapping[str, _builtins.str]]:
        """
        The volume type name in different languages.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The resource specification code.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="volumeProductType")
    def volume_product_type(self) -> _builtins.str:
        """
        The volume product type.
        """
        return pulumi.get(self, "volume_product_type")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The volume type.
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter(name="volumeTypeExtraSpecs")
    def volume_type_extra_specs(self) -> Sequence['outputs.GetAppAvailableVolumesVolumeTypeVolumeTypeExtraSpecResult']:
        """
        The extra specifications of volume type.  
        The volume_type_extra_specs structure is documented below.
        """
        return pulumi.get(self, "volume_type_extra_specs")


@pulumi.output_type
class GetAppAvailableVolumesVolumeTypeVolumeTypeExtraSpecResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 sold_out_availability_zone: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone for this volume type.
        :param _builtins.str sold_out_availability_zone: The sold out availability zone for this volume type.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "sold_out_availability_zone", sold_out_availability_zone)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone for this volume type.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="soldOutAvailabilityZone")
    def sold_out_availability_zone(self) -> _builtins.str:
        """
        The sold out availability zone for this volume type.
        """
        return pulumi.get(self, "sold_out_availability_zone")


@pulumi.output_type
class GetAppCenterAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 default_availability_zone: _builtins.bool,
                 display_name: _builtins.str,
                 i18n: Mapping[str, _builtins.str],
                 product_ids: Sequence[_builtins.str],
                 sold_outs: Sequence['outputs.GetAppCenterAvailabilityZonesAvailabilityZoneSoldOutResult'],
                 visible: _builtins.bool):
        """
        :param _builtins.str availability_zone: The ID of the availability zone, such as **cn-north-4a**.
        :param _builtins.bool default_availability_zone: Whether this is the default availability zone.
        :param _builtins.str display_name: The display name of the availability zone.
        :param Mapping[str, _builtins.str] i18n: The internationalization information of the availability zone.
        :param Sequence[_builtins.str] product_ids: The list of custom supported product IDs for the availability zone.
        :param Sequence['GetAppCenterAvailabilityZonesAvailabilityZoneSoldOutArgs'] sold_outs: The sold out information for the availability zone.
        :param _builtins.bool visible: Whether the availability zone is visible.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "default_availability_zone", default_availability_zone)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "i18n", i18n)
        pulumi.set(__self__, "product_ids", product_ids)
        pulumi.set(__self__, "sold_outs", sold_outs)
        pulumi.set(__self__, "visible", visible)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The ID of the availability zone, such as **cn-north-4a**.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="defaultAvailabilityZone")
    def default_availability_zone(self) -> _builtins.bool:
        """
        Whether this is the default availability zone.
        """
        return pulumi.get(self, "default_availability_zone")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the availability zone.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def i18n(self) -> Mapping[str, _builtins.str]:
        """
        The internationalization information of the availability zone.
        """
        return pulumi.get(self, "i18n")

    @_builtins.property
    @pulumi.getter(name="productIds")
    def product_ids(self) -> Sequence[_builtins.str]:
        """
        The list of custom supported product IDs for the availability zone.
        """
        return pulumi.get(self, "product_ids")

    @_builtins.property
    @pulumi.getter(name="soldOuts")
    def sold_outs(self) -> Sequence['outputs.GetAppCenterAvailabilityZonesAvailabilityZoneSoldOutResult']:
        """
        The sold out information for the availability zone.
        """
        return pulumi.get(self, "sold_outs")

    @_builtins.property
    @pulumi.getter
    def visible(self) -> _builtins.bool:
        """
        Whether the availability zone is visible.
        """
        return pulumi.get(self, "visible")


@pulumi.output_type
class GetAppCenterAvailabilityZonesAvailabilityZoneSoldOutResult(dict):
    def __init__(__self__, *,
                 products: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] products: The list of sold out product IDs.
        """
        pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Sequence[_builtins.str]:
        """
        The list of sold out product IDs.
        """
        return pulumi.get(self, "products")


@pulumi.output_type
class GetAppConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: _builtins.str,
                 config_value: _builtins.str):
        """
        :param _builtins.str config_key: The key of the configuration.
        :param _builtins.str config_value: The value corresponding to the configuration key.
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "config_value", config_value)

    @_builtins.property
    @pulumi.getter(name="configKey")
    def config_key(self) -> _builtins.str:
        """
        The key of the configuration.
        """
        return pulumi.get(self, "config_key")

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> _builtins.str:
        """
        The value corresponding to the configuration key.
        """
        return pulumi.get(self, "config_value")


@pulumi.output_type
class GetAppFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 architecture: _builtins.str,
                 charge_mode: _builtins.str,
                 cloud_service_type: _builtins.str,
                 cond_operation_az: _builtins.str,
                 contain_data_disk: _builtins.bool,
                 cpu: _builtins.str,
                 descriptions: _builtins.str,
                 domain_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 is_gpu: _builtins.bool,
                 memory: _builtins.str,
                 package_type: _builtins.str,
                 product_id: _builtins.str,
                 resource_type: _builtins.str,
                 sessions: _builtins.int,
                 status: _builtins.str,
                 system_disk_size: _builtins.str,
                 system_disk_type: _builtins.str,
                 type: _builtins.str,
                 volume_product_type: _builtins.str):
        """
        :param _builtins.str architecture: Specifies the architecture type used to filter the app flavor list. The valid
               values are **x86** and **arm**.
        :param _builtins.str charge_mode: Specifies the charge mode used to filter the app flavor list.
               + **1**. The billing method is pre-paid.
               + **0**. The billing method is post-paid.
        :param _builtins.str cloud_service_type: The cloud service type.
        :param _builtins.str cond_operation_az: The flavor status in availability zones.
        :param _builtins.bool contain_data_disk: Whether the flavor includes data disk.
        :param _builtins.str cpu: The CPU core count.
        :param _builtins.str descriptions: The flavor description.
        :param Sequence[_builtins.str] domain_ids: The domain IDs that the flavor belongs to.
        :param _builtins.str id: The flavor ID of app flavors that matched filter parameters.
        :param _builtins.bool is_gpu: Whether the flavor is GPU type.
        :param _builtins.str memory: The memory size in MB.
        :param _builtins.str package_type: The package type.
        :param _builtins.str product_id: Specifies the product ID used to filter the app flavor list.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.int sessions: The maximum number of sessions supported by the flavor.
        :param _builtins.str status: The flavor status.
        :param _builtins.str system_disk_size: The system disk size.
        :param _builtins.str system_disk_type: The system disk type.
        :param _builtins.str type: The flavor type.
        :param _builtins.str volume_product_type: The volume product type.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "cond_operation_az", cond_operation_az)
        pulumi.set(__self__, "contain_data_disk", contain_data_disk)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "domain_ids", domain_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_gpu", is_gpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "sessions", sessions)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_product_type", volume_product_type)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        Specifies the architecture type used to filter the app flavor list. The valid
        values are **x86** and **arm**.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Specifies the charge mode used to filter the app flavor list.
        + **1**. The billing method is pre-paid.
        + **0**. The billing method is post-paid.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The cloud service type.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter(name="condOperationAz")
    def cond_operation_az(self) -> _builtins.str:
        """
        The flavor status in availability zones.
        """
        return pulumi.get(self, "cond_operation_az")

    @_builtins.property
    @pulumi.getter(name="containDataDisk")
    def contain_data_disk(self) -> _builtins.bool:
        """
        Whether the flavor includes data disk.
        """
        return pulumi.get(self, "contain_data_disk")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        The CPU core count.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> _builtins.str:
        """
        The flavor description.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Sequence[_builtins.str]:
        """
        The domain IDs that the flavor belongs to.
        """
        return pulumi.get(self, "domain_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The flavor ID of app flavors that matched filter parameters.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isGpu")
    def is_gpu(self) -> _builtins.bool:
        """
        Whether the flavor is GPU type.
        """
        return pulumi.get(self, "is_gpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory size in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        The package type.
        """
        return pulumi.get(self, "package_type")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Specifies the product ID used to filter the app flavor list.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def sessions(self) -> _builtins.int:
        """
        The maximum number of sessions supported by the flavor.
        """
        return pulumi.get(self, "sessions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The flavor status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.str:
        """
        The system disk size.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> _builtins.str:
        """
        The system disk type.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The flavor type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeProductType")
    def volume_product_type(self) -> _builtins.str:
        """
        The volume product type.
        """
        return pulumi.get(self, "volume_product_type")


@pulumi.output_type
class GetAppGroupAuthorizationsAuthorizationResult(dict):
    def __init__(__self__, *,
                 account: _builtins.str,
                 account_id: _builtins.str,
                 account_type: _builtins.str,
                 app_group_id: _builtins.str,
                 app_group_name: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str):
        """
        :param _builtins.str account: Specifies the name of the authorized account. Fuzzy search is supported.
        :param _builtins.str account_id: The ID of the authorized account.
        :param _builtins.str account_type: Specifies the type of the authorized account.  
               The valid values are as follows:
               + **USER**
               + **USER_GROUP**
        :param _builtins.str app_group_id: Specifies the authorized application group ID.
        :param _builtins.str app_group_name: The application group name corresponding to the authorized account.
        :param _builtins.str created_at: The time when the account is authorized to the specified application group, in RFC3339 format.
        :param _builtins.str id: The authorized ID.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "app_group_id", app_group_id)
        pulumi.set(__self__, "app_group_name", app_group_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        """
        Specifies the name of the authorized account. Fuzzy search is supported.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The ID of the authorized account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> _builtins.str:
        """
        Specifies the type of the authorized account.  
        The valid values are as follows:
        + **USER**
        + **USER_GROUP**
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> _builtins.str:
        """
        Specifies the authorized application group ID.
        """
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter(name="appGroupName")
    def app_group_name(self) -> _builtins.str:
        """
        The application group name corresponding to the authorized account.
        """
        return pulumi.get(self, "app_group_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the account is authorized to the specified application group, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The authorized ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAppGroupsGroupResult(dict):
    def __init__(__self__, *,
                 app_count: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 server_group_id: _builtins.str,
                 server_group_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int app_count: The number of associated applications.
        :param _builtins.str created_at: The creation time of the application group, in RFC3339 format.
        :param _builtins.str description: The description of the application group.
        :param _builtins.str id: The ID of the application group.
        :param _builtins.str name: Specifies the name of the application group.
               Fuzzy search is supported.
        :param _builtins.str server_group_id: Specifies the server group ID associated with the application group.
        :param _builtins.str server_group_name: The server group name associated with the application group.
        :param _builtins.str type: Specifies the type of the application group.  
               The valid values are as follows:
               + **COMMON_APP**
               + **SESSION_DESKTOP_APP**
        """
        pulumi.set(__self__, "app_count", app_count)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_group_id", server_group_id)
        pulumi.set(__self__, "server_group_name", server_group_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appCount")
    def app_count(self) -> _builtins.int:
        """
        The number of associated applications.
        """
        return pulumi.get(self, "app_count")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application group, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application group.
        Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> _builtins.str:
        """
        Specifies the server group ID associated with the application group.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> _builtins.str:
        """
        The server group name associated with the application group.
        """
        return pulumi.get(self, "server_group_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the application group.  
        The valid values are as follows:
        + **COMMON_APP**
        + **SESSION_DESKTOP_APP**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAppHdaConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 current_version: _builtins.str,
                 machine_name: _builtins.str,
                 maintain_status: _builtins.bool,
                 server_group_id: _builtins.str,
                 server_group_name: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 session_count: _builtins.int,
                 sid: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str current_version: The current version of the access agent.
        :param _builtins.str machine_name: The machine name of the server.
        :param _builtins.bool maintain_status: Whether the server is in maintenance status.
        :param _builtins.str server_group_id: Specifies the ID of the server group to be queried.
        :param _builtins.str server_group_name: The name of the server group.
        :param _builtins.str server_id: The ID of the server.
        :param _builtins.str server_name: Specifies the name of the server to be queried.
        :param _builtins.int session_count: The number of sessions.
        :param _builtins.str sid: The SID of the server.
        :param _builtins.str status: The status of the server.
               + **UNREGISTER** - Not registered
               + **REGISTERED** - Registered and ready
               + **MAINTAINING** - Under maintenance
               + **FREEZE** - Frozen
               + **STOPPED** - Stopped
               + **NONE** - Abnormal status
        """
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "maintain_status", maintain_status)
        pulumi.set(__self__, "server_group_id", server_group_id)
        pulumi.set(__self__, "server_group_name", server_group_name)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "session_count", session_count)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        The current version of the access agent.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> _builtins.str:
        """
        The machine name of the server.
        """
        return pulumi.get(self, "machine_name")

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> _builtins.bool:
        """
        Whether the server is in maintenance status.
        """
        return pulumi.get(self, "maintain_status")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the server group to be queried.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> _builtins.str:
        """
        The name of the server group.
        """
        return pulumi.get(self, "server_group_name")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the server.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        Specifies the name of the server to be queried.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="sessionCount")
    def session_count(self) -> _builtins.int:
        """
        The number of sessions.
        """
        return pulumi.get(self, "session_count")

    @_builtins.property
    @pulumi.getter
    def sid(self) -> _builtins.str:
        """
        The SID of the server.
        """
        return pulumi.get(self, "sid")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the server.
        + **UNREGISTER** - Not registered
        + **REGISTERED** - Registered and ready
        + **MAINTAINING** - Under maintenance
        + **FREEZE** - Frozen
        + **STOPPED** - Stopped
        + **NONE** - Abnormal status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAppHdaLatestVersionsHdaLatestVersionResult(dict):
    def __init__(__self__, *,
                 hda_type: _builtins.str,
                 latest_version: _builtins.str):
        """
        :param _builtins.str hda_type: The type of the HDA.
               + **SBC**: Non-VDI SBC type
               + **OA_APP**: VDI non-GPU type
               + **PT_APP**: VDI GPU type
        :param _builtins.str latest_version: The latest version of the HDA.
        """
        pulumi.set(__self__, "hda_type", hda_type)
        pulumi.set(__self__, "latest_version", latest_version)

    @_builtins.property
    @pulumi.getter(name="hdaType")
    def hda_type(self) -> _builtins.str:
        """
        The type of the HDA.
        + **SBC**: Non-VDI SBC type
        + **OA_APP**: VDI non-GPU type
        + **PT_APP**: VDI GPU type
        """
        return pulumi.get(self, "hda_type")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> _builtins.str:
        """
        The latest version of the HDA.
        """
        return pulumi.get(self, "latest_version")


@pulumi.output_type
class GetAppHdaUpgradeRecordsRecordResult(dict):
    def __init__(__self__, *,
                 current_version: _builtins.str,
                 machine_name: _builtins.str,
                 server_group_name: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 sid: _builtins.str,
                 target_version: _builtins.str,
                 upgrade_status: _builtins.str,
                 upgrade_time: _builtins.str):
        """
        :param _builtins.str current_version: The current version of the access agent.
        :param _builtins.str machine_name: The machine name of the server.
        :param _builtins.str server_group_name: The name of the server group.
        :param _builtins.str server_id: The ID of the server.
        :param _builtins.str server_name: The name of the server.
        :param _builtins.str sid: The SID of the server.
        :param _builtins.str target_version: The target version of the access agent.
        :param _builtins.str upgrade_status: The HDA upgrade status.
               + **SUCCESS**: Upgrade completed successfully
               + **FAILED**: Upgrade failed
               + **PENDING**: Upgrade pending
               + **RUNNING**: Upgrade in progress
        :param _builtins.str upgrade_time: The upgrade time, in RFC3339 format.
        """
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "server_group_name", server_group_name)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "target_version", target_version)
        pulumi.set(__self__, "upgrade_status", upgrade_status)
        pulumi.set(__self__, "upgrade_time", upgrade_time)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        The current version of the access agent.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> _builtins.str:
        """
        The machine name of the server.
        """
        return pulumi.get(self, "machine_name")

    @_builtins.property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> _builtins.str:
        """
        The name of the server group.
        """
        return pulumi.get(self, "server_group_name")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the server.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the server.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter
    def sid(self) -> _builtins.str:
        """
        The SID of the server.
        """
        return pulumi.get(self, "sid")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> _builtins.str:
        """
        The target version of the access agent.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="upgradeStatus")
    def upgrade_status(self) -> _builtins.str:
        """
        The HDA upgrade status.
        + **SUCCESS**: Upgrade completed successfully
        + **FAILED**: Upgrade failed
        + **PENDING**: Upgrade pending
        + **RUNNING**: Upgrade in progress
        """
        return pulumi.get(self, "upgrade_status")

    @_builtins.property
    @pulumi.getter(name="upgradeTime")
    def upgrade_time(self) -> _builtins.str:
        """
        The upgrade time, in RFC3339 format.
        """
        return pulumi.get(self, "upgrade_time")


@pulumi.output_type
class GetAppIesAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 default_availability_zone: _builtins.bool,
                 display_name: _builtins.str,
                 i18n: Mapping[str, _builtins.str],
                 product_ids: Sequence[_builtins.str],
                 sold_outs: Sequence['outputs.GetAppIesAvailabilityZonesAvailabilityZoneSoldOutResult'],
                 visible: _builtins.bool):
        """
        :param _builtins.str availability_zone: The ID of the availability zone, such as **cn-north-4a**.
        :param _builtins.bool default_availability_zone: Whether this is the default availability zone.
        :param _builtins.str display_name: The display name of the availability zone.
        :param Mapping[str, _builtins.str] i18n: The internationalization information of the availability zone.
        :param Sequence[_builtins.str] product_ids: The list of custom supported product IDs for the availability zone.
        :param Sequence['GetAppIesAvailabilityZonesAvailabilityZoneSoldOutArgs'] sold_outs: The sold out information for the availability zone.
        :param _builtins.bool visible: Whether the availability zone is visible.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "default_availability_zone", default_availability_zone)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "i18n", i18n)
        pulumi.set(__self__, "product_ids", product_ids)
        pulumi.set(__self__, "sold_outs", sold_outs)
        pulumi.set(__self__, "visible", visible)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The ID of the availability zone, such as **cn-north-4a**.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="defaultAvailabilityZone")
    def default_availability_zone(self) -> _builtins.bool:
        """
        Whether this is the default availability zone.
        """
        return pulumi.get(self, "default_availability_zone")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the availability zone.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def i18n(self) -> Mapping[str, _builtins.str]:
        """
        The internationalization information of the availability zone.
        """
        return pulumi.get(self, "i18n")

    @_builtins.property
    @pulumi.getter(name="productIds")
    def product_ids(self) -> Sequence[_builtins.str]:
        """
        The list of custom supported product IDs for the availability zone.
        """
        return pulumi.get(self, "product_ids")

    @_builtins.property
    @pulumi.getter(name="soldOuts")
    def sold_outs(self) -> Sequence['outputs.GetAppIesAvailabilityZonesAvailabilityZoneSoldOutResult']:
        """
        The sold out information for the availability zone.
        """
        return pulumi.get(self, "sold_outs")

    @_builtins.property
    @pulumi.getter
    def visible(self) -> _builtins.bool:
        """
        Whether the availability zone is visible.
        """
        return pulumi.get(self, "visible")


@pulumi.output_type
class GetAppIesAvailabilityZonesAvailabilityZoneSoldOutResult(dict):
    def __init__(__self__, *,
                 products: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] products: The list of sold out product IDs.
        """
        pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Sequence[_builtins.str]:
        """
        The list of sold out product IDs.
        """
        return pulumi.get(self, "products")


@pulumi.output_type
class GetAppImageServersServerResult(dict):
    def __init__(__self__, *,
                 app_group_id: _builtins.str,
                 aps_server_group_id: _builtins.str,
                 aps_server_id: _builtins.str,
                 authorize_accounts: Sequence['outputs.GetAppImageServersServerAuthorizeAccountResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 image_generated_product_id: _builtins.str,
                 image_id: _builtins.str,
                 image_type: _builtins.str,
                 name: _builtins.str,
                 spce_code: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str app_group_id: The ID of the application group associated with the image server.
        :param _builtins.str aps_server_group_id: The ID of the APS server group associated with the image server.
        :param _builtins.str aps_server_id: The ID of the APS server associated with the image server.
        :param Sequence['GetAppImageServersServerAuthorizeAccountArgs'] authorize_accounts: The list of authorized users of the application group associated with the image server.
        :param _builtins.str created_at: The creation time of the image server, in RFC3339 format.
        :param _builtins.str description: The description of the image server.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the image server belongs.
               This parameter is only valid for enterprise users, if omitted, all enterprise project IDs will be queried.
        :param _builtins.str id: The ID of the image server.
        :param _builtins.str image_generated_product_id: The ID of the generated image product.
        :param _builtins.str image_id: The ID of the basic image to which the image server belongs.
        :param _builtins.str image_type: The type of the basic image to which the image server belongs.
               + **gold**: The market image.
               + **public**: The public image.
               + **private**: The private image.
               + **shared**: The shared image.
               + **other**
        :param _builtins.str name: Specified the name of the image server.
               Fuzzy search is supported.
        :param _builtins.str spce_code: The specification code of the basic image to which the image server belongs.
        :param _builtins.str status: The current status of the image server.
               + **ACTIVE**
               + **BUILT**: Image task is finished.
               + **ERROR**
        :param _builtins.str updated_at: The latest update time of the image server, in RFC3339 format.
        """
        pulumi.set(__self__, "app_group_id", app_group_id)
        pulumi.set(__self__, "aps_server_group_id", aps_server_group_id)
        pulumi.set(__self__, "aps_server_id", aps_server_id)
        pulumi.set(__self__, "authorize_accounts", authorize_accounts)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_generated_product_id", image_generated_product_id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spce_code", spce_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> _builtins.str:
        """
        The ID of the application group associated with the image server.
        """
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter(name="apsServerGroupId")
    def aps_server_group_id(self) -> _builtins.str:
        """
        The ID of the APS server group associated with the image server.
        """
        return pulumi.get(self, "aps_server_group_id")

    @_builtins.property
    @pulumi.getter(name="apsServerId")
    def aps_server_id(self) -> _builtins.str:
        """
        The ID of the APS server associated with the image server.
        """
        return pulumi.get(self, "aps_server_id")

    @_builtins.property
    @pulumi.getter(name="authorizeAccounts")
    def authorize_accounts(self) -> Sequence['outputs.GetAppImageServersServerAuthorizeAccountResult']:
        """
        The list of authorized users of the application group associated with the image server.
        """
        return pulumi.get(self, "authorize_accounts")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the image server, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the image server.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the image server belongs.
        This parameter is only valid for enterprise users, if omitted, all enterprise project IDs will be queried.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the image server.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageGeneratedProductId")
    def image_generated_product_id(self) -> _builtins.str:
        """
        The ID of the generated image product.
        """
        return pulumi.get(self, "image_generated_product_id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the basic image to which the image server belongs.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        The type of the basic image to which the image server belongs.
        + **gold**: The market image.
        + **public**: The public image.
        + **private**: The private image.
        + **shared**: The shared image.
        + **other**
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specified the name of the image server.
        Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="spceCode")
    def spce_code(self) -> _builtins.str:
        """
        The specification code of the basic image to which the image server belongs.
        """
        return pulumi.get(self, "spce_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the image server.
        + **ACTIVE**
        + **BUILT**: Image task is finished.
        + **ERROR**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the image server, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAppImageServersServerAuthorizeAccountResult(dict):
    def __init__(__self__, *,
                 account: _builtins.str,
                 domain: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str account: The name of the account.
        :param _builtins.str domain: The domain name of the Workspace service.
        :param _builtins.str type: The type of the account.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        """
        The name of the account.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The domain name of the Workspace service.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the account.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAppLatestAttachedApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app_id: _builtins.str,
                 record_id: _builtins.str):
        """
        :param _builtins.str app_id: The ID of the attached application.
        :param _builtins.str record_id: The record ID of the attached application.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "record_id", record_id)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.str:
        """
        The ID of the attached application.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> _builtins.str:
        """
        The record ID of the attached application.
        """
        return pulumi.get(self, "record_id")


@pulumi.output_type
class GetAppNasStoragesStorageResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 personal_folder_count: _builtins.int,
                 shared_folder_count: _builtins.int,
                 storage_metadatas: Sequence['outputs.GetAppNasStoragesStorageStorageMetadataResult']):
        """
        :param _builtins.str created_at: The creation time of the NAS storage, in RFC3339 format.
        :param _builtins.str id: The ID of the NAS storage.
        :param _builtins.str name: Specifies the name of the NAS storage to be queried.  
               This parameter is used for fuzzy search.
        :param _builtins.int personal_folder_count: The number of the personal folders under this NAS storage.
        :param _builtins.int shared_folder_count: The number of the shared folders under this NAS storage.
        :param Sequence['GetAppNasStoragesStorageStorageMetadataArgs'] storage_metadatas: The metadata of the corresponding storage.
               The storage_metadata structure is documented below.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "personal_folder_count", personal_folder_count)
        pulumi.set(__self__, "shared_folder_count", shared_folder_count)
        pulumi.set(__self__, "storage_metadatas", storage_metadatas)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the NAS storage, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the NAS storage.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the NAS storage to be queried.  
        This parameter is used for fuzzy search.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="personalFolderCount")
    def personal_folder_count(self) -> _builtins.int:
        """
        The number of the personal folders under this NAS storage.
        """
        return pulumi.get(self, "personal_folder_count")

    @_builtins.property
    @pulumi.getter(name="sharedFolderCount")
    def shared_folder_count(self) -> _builtins.int:
        """
        The number of the shared folders under this NAS storage.
        """
        return pulumi.get(self, "shared_folder_count")

    @_builtins.property
    @pulumi.getter(name="storageMetadatas")
    def storage_metadatas(self) -> Sequence['outputs.GetAppNasStoragesStorageStorageMetadataResult']:
        """
        The metadata of the corresponding storage.
        The storage_metadata structure is documented below.
        """
        return pulumi.get(self, "storage_metadatas")


@pulumi.output_type
class GetAppNasStoragesStorageStorageMetadataResult(dict):
    def __init__(__self__, *,
                 export_location: _builtins.str,
                 storage_class: _builtins.str,
                 storage_handle: _builtins.str):
        """
        :param _builtins.str export_location: The storage access URL.
        :param _builtins.str storage_class: The storage type.
        :param _builtins.str storage_handle: The storage name.
        """
        pulumi.set(__self__, "export_location", export_location)
        pulumi.set(__self__, "storage_class", storage_class)
        pulumi.set(__self__, "storage_handle", storage_handle)

    @_builtins.property
    @pulumi.getter(name="exportLocation")
    def export_location(self) -> _builtins.str:
        """
        The storage access URL.
        """
        return pulumi.get(self, "export_location")

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> _builtins.str:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_class")

    @_builtins.property
    @pulumi.getter(name="storageHandle")
    def storage_handle(self) -> _builtins.str:
        """
        The storage name.
        """
        return pulumi.get(self, "storage_handle")


@pulumi.output_type
class GetAppPublishableAppsAppResult(dict):
    def __init__(__self__, *,
                 command_param: _builtins.str,
                 description: _builtins.str,
                 execute_path: _builtins.str,
                 icon_index: _builtins.int,
                 icon_path: _builtins.str,
                 name: _builtins.str,
                 publishable: _builtins.bool,
                 publisher: _builtins.str,
                 source_image_ids: Sequence[_builtins.str],
                 version: _builtins.str,
                 work_path: _builtins.str):
        """
        :param _builtins.str command_param: The command line arguments used to start the application.
        :param _builtins.str description: The description of the the application.
        :param _builtins.str execute_path: The execution path where the application is located.
        :param _builtins.int icon_index: The index of the application icon.
        :param _builtins.str icon_path: The path where the application icon is located.
        :param _builtins.str name: The name of the the application.
        :param _builtins.bool publishable: Whether the application can be published.
        :param _builtins.str publisher: The publisher of the the application.
        :param Sequence[_builtins.str] source_image_ids: The list of image IDs to which the application belongs.
        :param _builtins.str version: The version of the the application.
        :param _builtins.str work_path: The work path of the the application.
        """
        pulumi.set(__self__, "command_param", command_param)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "execute_path", execute_path)
        pulumi.set(__self__, "icon_index", icon_index)
        pulumi.set(__self__, "icon_path", icon_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publishable", publishable)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "source_image_ids", source_image_ids)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "work_path", work_path)

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> _builtins.str:
        """
        The command line arguments used to start the application.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="executePath")
    def execute_path(self) -> _builtins.str:
        """
        The execution path where the application is located.
        """
        return pulumi.get(self, "execute_path")

    @_builtins.property
    @pulumi.getter(name="iconIndex")
    def icon_index(self) -> _builtins.int:
        """
        The index of the application icon.
        """
        return pulumi.get(self, "icon_index")

    @_builtins.property
    @pulumi.getter(name="iconPath")
    def icon_path(self) -> _builtins.str:
        """
        The path where the application icon is located.
        """
        return pulumi.get(self, "icon_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def publishable(self) -> _builtins.bool:
        """
        Whether the application can be published.
        """
        return pulumi.get(self, "publishable")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        """
        The publisher of the the application.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter(name="sourceImageIds")
    def source_image_ids(self) -> Sequence[_builtins.str]:
        """
        The list of image IDs to which the application belongs.
        """
        return pulumi.get(self, "source_image_ids")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the the application.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workPath")
    def work_path(self) -> _builtins.str:
        """
        The work path of the the application.
        """
        return pulumi.get(self, "work_path")


@pulumi.output_type
class GetAppScheduleTaskExecuteDetailsExecuteDetailResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 end_time: _builtins.str,
                 execute_id: _builtins.str,
                 id: _builtins.str,
                 result_code: _builtins.str,
                 result_message: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 status: _builtins.str,
                 task_type: _builtins.str,
                 time_zone: _builtins.str):
        """
        :param _builtins.str begin_time: The start time of the sub-task, in UTC format.
        :param _builtins.str end_time: The end time of the sub-task, in UTC format.
        :param _builtins.str execute_id: The ID of the schedule task execution record.
        :param _builtins.str id: The ID of the sub-task to be executed.
        :param _builtins.str result_code: The error code when the task execution fails.
        :param _builtins.str result_message: The reason of task failure.
        :param _builtins.str server_id: The ID of the server being operated.
        :param _builtins.str server_name: The name of the server being operated.
        :param _builtins.str status: The status of schedule task execution.
               + **SUCCESS**
               + **FAILED**
        :param _builtins.str task_type: The type of the schedule task.
               + **RESTART_SERVER**
               + **START_SERVER**
               + **STOP_SERVER**
               + **REINSTALL_OS**
        :param _builtins.str time_zone: The timezone of the schedule task.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "execute_id", execute_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "result_code", result_code)
        pulumi.set(__self__, "result_message", result_message)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        The start time of the sub-task, in UTC format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the sub-task, in UTC format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executeId")
    def execute_id(self) -> _builtins.str:
        """
        The ID of the schedule task execution record.
        """
        return pulumi.get(self, "execute_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the sub-task to be executed.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resultCode")
    def result_code(self) -> _builtins.str:
        """
        The error code when the task execution fails.
        """
        return pulumi.get(self, "result_code")

    @_builtins.property
    @pulumi.getter(name="resultMessage")
    def result_message(self) -> _builtins.str:
        """
        The reason of task failure.
        """
        return pulumi.get(self, "result_message")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the server being operated.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the server being operated.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of schedule task execution.
        + **SUCCESS**
        + **FAILED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> _builtins.str:
        """
        The type of the schedule task.
        + **RESTART_SERVER**
        + **START_SERVER**
        + **STOP_SERVER**
        + **REINSTALL_OS**
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The timezone of the schedule task.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetAppScheduleTaskExecutionsExecutionResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 create_time: _builtins.str,
                 end_time: _builtins.str,
                 failed_count: _builtins.int,
                 id: _builtins.str,
                 scheduled_type: _builtins.str,
                 status: _builtins.str,
                 success_count: _builtins.int,
                 task_id: _builtins.str,
                 task_type: _builtins.str,
                 time_zone: _builtins.str,
                 total_count: _builtins.int):
        """
        :param _builtins.str begin_time: The begin time of the schedule task execution, in UTC format.
        :param _builtins.str create_time: The creation time of the schedule task, in UTC format.
        :param _builtins.str end_time: The end time of the schedule task execution, in UTC format.
        :param _builtins.int failed_count: The number of failed subtasks.
        :param _builtins.str id: The ID of the schedule task execution record.
        :param _builtins.str scheduled_type: The execution cycle of the schedule task.
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param _builtins.str status: The status of the schedule task execution.
               + **SUCCESS**
               + **FAILED**
        :param _builtins.int success_count: The number of successful subtasks.
        :param _builtins.str task_id: Specifies the ID of the schedule task.
        :param _builtins.str task_type: The type of the schedule task.
        :param _builtins.str time_zone: The timezone of the schedule task.
        :param _builtins.int total_count: The total number of subtasks.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "scheduled_type", scheduled_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "success_count", success_count)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        The begin time of the schedule task execution, in UTC format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the schedule task, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the schedule task execution, in UTC format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> _builtins.int:
        """
        The number of failed subtasks.
        """
        return pulumi.get(self, "failed_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the schedule task execution record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> _builtins.str:
        """
        The execution cycle of the schedule task.
        + **FIXED_TIME**
        + **DAY**
        + **WEEK**
        + **MONTH**
        """
        return pulumi.get(self, "scheduled_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the schedule task execution.
        + **SUCCESS**
        + **FAILED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="successCount")
    def success_count(self) -> _builtins.int:
        """
        The number of successful subtasks.
        """
        return pulumi.get(self, "success_count")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        Specifies the ID of the schedule task.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> _builtins.str:
        """
        The type of the schedule task.
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The timezone of the schedule task.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total number of subtasks.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetAppScheduleTasksTaskResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 date_list: _builtins.str,
                 day_interval: _builtins.int,
                 description: _builtins.str,
                 expire_time: _builtins.str,
                 id: _builtins.str,
                 is_enable: _builtins.bool,
                 last_status: _builtins.str,
                 month_list: _builtins.str,
                 next_execution_time: _builtins.str,
                 scheduled_date: _builtins.str,
                 scheduled_time: _builtins.str,
                 scheduled_type: _builtins.str,
                 task_cron: _builtins.str,
                 task_name: _builtins.str,
                 task_type: _builtins.str,
                 time_zone: _builtins.str,
                 updated_at: _builtins.str,
                 week_list: _builtins.str):
        """
        :param _builtins.str created_at: The create time of the schedule task, in RFC3339 format.
        :param _builtins.str date_list: The days of the month of the schedule task.
        :param _builtins.int day_interval: The interval in days of the schedule task.
        :param _builtins.str description: The description of the schedule task.
        :param _builtins.str expire_time: The expire time of the schedule task.
        :param _builtins.str id: The ID of the schedule task.
        :param _builtins.bool is_enable: Whether the schedule task is enabled.
        :param _builtins.str last_status: The last execution status of the schedule task.
               + **RUNNING**
               + **SUCCESS**
               + **FAILED**
        :param _builtins.str month_list: The month of the schedule task.
        :param _builtins.str next_execution_time: The next execution time of the schedule task.
        :param _builtins.str scheduled_date: The fixed time of the schedule task.  
               The format is `YYYY-MM-DD`.
        :param _builtins.str scheduled_time: The scheduled time of the schedule task.  
               The format is `HH:MM:SS`.
        :param _builtins.str scheduled_type: The execution cycle of the schedule task.
               + **FIXED_TIME**
               + **DAY**
               + **WEEK**
               + **MONTH**
        :param _builtins.str task_cron: The cron expression of the schedule task.
        :param _builtins.str task_name: Specifies the name of the schedule task.
        :param _builtins.str task_type: Specifies the type of the schedule task.  
               The valid values are as follows:
               + **RESTART_SERVER**
               + **START_SERVER**
               + **STOP_SERVER**
               + **REINSTALL_OS**
        :param _builtins.str time_zone: The time zone of the schedule task.
        :param _builtins.str updated_at: The latest update time of the schedule task, in RFC3339 format.
        :param _builtins.str week_list: The days of the week of the schedule task.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "date_list", date_list)
        pulumi.set(__self__, "day_interval", day_interval)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enable", is_enable)
        pulumi.set(__self__, "last_status", last_status)
        pulumi.set(__self__, "month_list", month_list)
        pulumi.set(__self__, "next_execution_time", next_execution_time)
        pulumi.set(__self__, "scheduled_date", scheduled_date)
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        pulumi.set(__self__, "scheduled_type", scheduled_type)
        pulumi.set(__self__, "task_cron", task_cron)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "week_list", week_list)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the schedule task, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dateList")
    def date_list(self) -> _builtins.str:
        """
        The days of the month of the schedule task.
        """
        return pulumi.get(self, "date_list")

    @_builtins.property
    @pulumi.getter(name="dayInterval")
    def day_interval(self) -> _builtins.int:
        """
        The interval in days of the schedule task.
        """
        return pulumi.get(self, "day_interval")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the schedule task.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The expire time of the schedule task.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the schedule task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isEnable")
    def is_enable(self) -> _builtins.bool:
        """
        Whether the schedule task is enabled.
        """
        return pulumi.get(self, "is_enable")

    @_builtins.property
    @pulumi.getter(name="lastStatus")
    def last_status(self) -> _builtins.str:
        """
        The last execution status of the schedule task.
        + **RUNNING**
        + **SUCCESS**
        + **FAILED**
        """
        return pulumi.get(self, "last_status")

    @_builtins.property
    @pulumi.getter(name="monthList")
    def month_list(self) -> _builtins.str:
        """
        The month of the schedule task.
        """
        return pulumi.get(self, "month_list")

    @_builtins.property
    @pulumi.getter(name="nextExecutionTime")
    def next_execution_time(self) -> _builtins.str:
        """
        The next execution time of the schedule task.
        """
        return pulumi.get(self, "next_execution_time")

    @_builtins.property
    @pulumi.getter(name="scheduledDate")
    def scheduled_date(self) -> _builtins.str:
        """
        The fixed time of the schedule task.  
        The format is `YYYY-MM-DD`.
        """
        return pulumi.get(self, "scheduled_date")

    @_builtins.property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> _builtins.str:
        """
        The scheduled time of the schedule task.  
        The format is `HH:MM:SS`.
        """
        return pulumi.get(self, "scheduled_time")

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> _builtins.str:
        """
        The execution cycle of the schedule task.
        + **FIXED_TIME**
        + **DAY**
        + **WEEK**
        + **MONTH**
        """
        return pulumi.get(self, "scheduled_type")

    @_builtins.property
    @pulumi.getter(name="taskCron")
    def task_cron(self) -> _builtins.str:
        """
        The cron expression of the schedule task.
        """
        return pulumi.get(self, "task_cron")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> _builtins.str:
        """
        Specifies the name of the schedule task.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> _builtins.str:
        """
        Specifies the type of the schedule task.  
        The valid values are as follows:
        + **RESTART_SERVER**
        + **START_SERVER**
        + **STOP_SERVER**
        + **REINSTALL_OS**
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The time zone of the schedule task.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the schedule task, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="weekList")
    def week_list(self) -> _builtins.str:
        """
        The days of the week of the schedule task.
        """
        return pulumi.get(self, "week_list")


@pulumi.output_type
class GetAppServerGroupsServerGroupResult(dict):
    def __init__(__self__, *,
                 app_group_count: _builtins.int,
                 app_server_count: _builtins.int,
                 app_server_flavor_count: _builtins.int,
                 app_type: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 extra_session_size: _builtins.int,
                 extra_session_type: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 image_name: _builtins.str,
                 is_vdi: _builtins.bool,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 ou_name: _builtins.str,
                 primary_server_group_ids: Sequence[_builtins.str],
                 product_id: _builtins.str,
                 product_infos: Sequence['outputs.GetAppServerGroupsServerGroupProductInfoResult'],
                 scaling_policies: Sequence['outputs.GetAppServerGroupsServerGroupScalingPolicyResult'],
                 secondary_server_group_ids: Sequence[_builtins.str],
                 server_group_status: _builtins.bool,
                 site_id: _builtins.str,
                 site_type: _builtins.str,
                 storage_mount_policy: _builtins.str,
                 subnet_id: _builtins.str,
                 subnet_name: _builtins.str,
                 system_disk_size: _builtins.int,
                 system_disk_type: _builtins.str,
                 tags: Sequence['outputs.GetAppServerGroupsServerGroupTagResult'],
                 update_time: _builtins.str):
        """
        :param _builtins.int app_group_count: The total number of associated application groups.
        :param _builtins.int app_server_count: The total number of servers.
        :param _builtins.int app_server_flavor_count: The total number of server configurations.
        :param _builtins.str app_type: Specifies the type of application group.
               + **SESSION_DESKTOP_APP**
               + **COMMON_APP**
        :param _builtins.str create_time: The creation time of the server group.
        :param _builtins.str description: The description of the server group.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.int extra_session_size: The number of paid sessions.
        :param _builtins.str extra_session_type: The paid session type.
               + **GPU**
               + **CPU**
        :param _builtins.str id: The unique ID of the server group.
        :param _builtins.str image_id: The image ID used to create servers in this group.
        :param _builtins.str image_name: The image name of the group.
        :param _builtins.bool is_vdi: Whether it is VDI single-session mode.
        :param _builtins.str name: The name of the server group.
        :param _builtins.str os_type: The type of the operating system. Currently, only **Windows** is supported.
        :param _builtins.str ou_name: The default organization name of the group.
        :param Sequence[_builtins.str] primary_server_group_ids: The list of primary server group IDs.
        :param _builtins.str product_id: The ID of the product.
        :param Sequence['GetAppServerGroupsServerGroupProductInfoArgs'] product_infos: The product specification information.  
               The product_info structure is documented below.
        :param Sequence['GetAppServerGroupsServerGroupScalingPolicyArgs'] scaling_policies: The auto-scaling policy.  
               The scaling_policy structure is documented below.
        :param Sequence[_builtins.str] secondary_server_group_ids: The list of secondary server group IDs.
        :param _builtins.bool server_group_status: Whether the server group is enabled.
        :param _builtins.str site_id: The site ID.
        :param _builtins.str site_type: The site type.
               + **CENTER**
               + **IES**
        :param _builtins.str storage_mount_policy: The NAS storage directory mounting policy on APS.
               + **USER**
               + **SHARE**
               + **ANY**
        :param _builtins.str subnet_id: The subnet ID for the network interface.
        :param _builtins.str subnet_name: The subnet name of the group.
        :param _builtins.int system_disk_size: The size of the system disk.
        :param _builtins.str system_disk_type: The type of the system disk.
        :param Sequence['GetAppServerGroupsServerGroupTagArgs'] tags: Specifies the tag value to filter server groups.
        :param _builtins.str update_time: The last update time of the server group.
        """
        pulumi.set(__self__, "app_group_count", app_group_count)
        pulumi.set(__self__, "app_server_count", app_server_count)
        pulumi.set(__self__, "app_server_flavor_count", app_server_flavor_count)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "extra_session_size", extra_session_size)
        pulumi.set(__self__, "extra_session_type", extra_session_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "is_vdi", is_vdi)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "ou_name", ou_name)
        pulumi.set(__self__, "primary_server_group_ids", primary_server_group_ids)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "product_infos", product_infos)
        pulumi.set(__self__, "scaling_policies", scaling_policies)
        pulumi.set(__self__, "secondary_server_group_ids", secondary_server_group_ids)
        pulumi.set(__self__, "server_group_status", server_group_status)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "site_type", site_type)
        pulumi.set(__self__, "storage_mount_policy", storage_mount_policy)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="appGroupCount")
    def app_group_count(self) -> _builtins.int:
        """
        The total number of associated application groups.
        """
        return pulumi.get(self, "app_group_count")

    @_builtins.property
    @pulumi.getter(name="appServerCount")
    def app_server_count(self) -> _builtins.int:
        """
        The total number of servers.
        """
        return pulumi.get(self, "app_server_count")

    @_builtins.property
    @pulumi.getter(name="appServerFlavorCount")
    def app_server_flavor_count(self) -> _builtins.int:
        """
        The total number of server configurations.
        """
        return pulumi.get(self, "app_server_flavor_count")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> _builtins.str:
        """
        Specifies the type of application group.
        + **SESSION_DESKTOP_APP**
        + **COMMON_APP**
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the server group.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the server group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extraSessionSize")
    def extra_session_size(self) -> _builtins.int:
        """
        The number of paid sessions.
        """
        return pulumi.get(self, "extra_session_size")

    @_builtins.property
    @pulumi.getter(name="extraSessionType")
    def extra_session_type(self) -> _builtins.str:
        """
        The paid session type.
        + **GPU**
        + **CPU**
        """
        return pulumi.get(self, "extra_session_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique ID of the server group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image ID used to create servers in this group.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        The image name of the group.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="isVdi")
    def is_vdi(self) -> _builtins.bool:
        """
        Whether it is VDI single-session mode.
        """
        return pulumi.get(self, "is_vdi")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the server group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The type of the operating system. Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> _builtins.str:
        """
        The default organization name of the group.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter(name="primaryServerGroupIds")
    def primary_server_group_ids(self) -> Sequence[_builtins.str]:
        """
        The list of primary server group IDs.
        """
        return pulumi.get(self, "primary_server_group_ids")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The ID of the product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="productInfos")
    def product_infos(self) -> Sequence['outputs.GetAppServerGroupsServerGroupProductInfoResult']:
        """
        The product specification information.  
        The product_info structure is documented below.
        """
        return pulumi.get(self, "product_infos")

    @_builtins.property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetAppServerGroupsServerGroupScalingPolicyResult']:
        """
        The auto-scaling policy.  
        The scaling_policy structure is documented below.
        """
        return pulumi.get(self, "scaling_policies")

    @_builtins.property
    @pulumi.getter(name="secondaryServerGroupIds")
    def secondary_server_group_ids(self) -> Sequence[_builtins.str]:
        """
        The list of secondary server group IDs.
        """
        return pulumi.get(self, "secondary_server_group_ids")

    @_builtins.property
    @pulumi.getter(name="serverGroupStatus")
    def server_group_status(self) -> _builtins.bool:
        """
        Whether the server group is enabled.
        """
        return pulumi.get(self, "server_group_status")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        The site ID.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteType")
    def site_type(self) -> _builtins.str:
        """
        The site type.
        + **CENTER**
        + **IES**
        """
        return pulumi.get(self, "site_type")

    @_builtins.property
    @pulumi.getter(name="storageMountPolicy")
    def storage_mount_policy(self) -> _builtins.str:
        """
        The NAS storage directory mounting policy on APS.
        + **USER**
        + **SHARE**
        + **ANY**
        """
        return pulumi.get(self, "storage_mount_policy")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID for the network interface.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> _builtins.str:
        """
        The subnet name of the group.
        """
        return pulumi.get(self, "subnet_name")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.int:
        """
        The size of the system disk.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> _builtins.str:
        """
        The type of the system disk.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAppServerGroupsServerGroupTagResult']:
        """
        Specifies the tag value to filter server groups.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The last update time of the server group.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetAppServerGroupsServerGroupProductInfoResult(dict):
    def __init__(__self__, *,
                 architecture: _builtins.str,
                 charge_mode: _builtins.str,
                 cloud_service_type: _builtins.str,
                 cond_operation_az: _builtins.str,
                 contain_data_disk: _builtins.bool,
                 cpu: _builtins.str,
                 cpu_desc: _builtins.str,
                 descriptions: _builtins.str,
                 domain_ids: Sequence[_builtins.str],
                 expire_time: _builtins.str,
                 flavor_id: _builtins.str,
                 gpu_desc: _builtins.str,
                 is_gpu: _builtins.bool,
                 memory: _builtins.str,
                 package_type: _builtins.str,
                 product_id: _builtins.str,
                 resource_type: _builtins.str,
                 sessions: _builtins.int,
                 status: _builtins.str,
                 sub_product_lists: Sequence[_builtins.str],
                 support_gpu_type: _builtins.str,
                 system_disk_size: _builtins.str,
                 system_disk_type: _builtins.str,
                 type: _builtins.str,
                 volume_product_type: _builtins.str):
        """
        :param _builtins.str architecture: The architecture of the product. Currently, only **x86** is supported.
        :param _builtins.str charge_mode: The charging mode.
               + **"1"**: Pre-paid.
               + **"0"**: Post-paid.
        :param _builtins.str cloud_service_type: The type of the cloud service.
        :param _builtins.str cond_operation_az: The status of the product package in the availability zone.
        :param _builtins.bool contain_data_disk: Whether the package includes data disk.
        :param _builtins.str cpu: The CPU information.
        :param _builtins.str cpu_desc: The CPU description.
        :param _builtins.str descriptions: The product description.
        :param Sequence[_builtins.str] domain_ids: The list of domain IDs.
        :param _builtins.str expire_time: The expiration time of the product package.
        :param _builtins.str flavor_id: The ID of the flavor.
        :param _builtins.str gpu_desc: The GPU description.
        :param _builtins.bool is_gpu: Whether the flavor is GPU type.
        :param _builtins.str memory: The memory size in MB.
        :param _builtins.str package_type: The type of the package.
               + **general**: Indicates the general product package.
               + **dedicated**: Indicates the dedicated host product package.
        :param _builtins.str product_id: The ID of the product.
        :param _builtins.str resource_type: The type of the resource.
        :param _builtins.int sessions: The maximum number of sessions supported by the package.
        :param _builtins.str status: The status of the product package in sales mode.
               + **normal**: Normal commercial use (Default).
               + **ababdon**: Discontinued (i.e., not displayed).
               + **sellout**: Sold out.
               + **obt**: Public testing.
               + **obs_sellout**: Public testing sold out.
               + **promotion**: Recommended (equivalent to normal, also commercial).
        :param Sequence[_builtins.str] sub_product_lists: The list of sub products.
        :param _builtins.str support_gpu_type: The GPU type supported by the product package.
        :param _builtins.str system_disk_size: The size of the system disk.
        :param _builtins.str system_disk_type: The type of the system disk.
        :param _builtins.str type: The type of the product.
               + **BASE**: Indicates the basic product package, which does not include any commercial software other than the
               operating system, and can only be used in private image scenarios.
               + **ADVANCED**: Indicates the advanced product package, which includes some commercial software in the package image.
        :param _builtins.str volume_product_type: The type of the volume product.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "cond_operation_az", cond_operation_az)
        pulumi.set(__self__, "contain_data_disk", contain_data_disk)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "cpu_desc", cpu_desc)
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "domain_ids", domain_ids)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "gpu_desc", gpu_desc)
        pulumi.set(__self__, "is_gpu", is_gpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "sessions", sessions)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_product_lists", sub_product_lists)
        pulumi.set(__self__, "support_gpu_type", support_gpu_type)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_product_type", volume_product_type)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The architecture of the product. Currently, only **x86** is supported.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charging mode.
        + **"1"**: Pre-paid.
        + **"0"**: Post-paid.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The type of the cloud service.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter(name="condOperationAz")
    def cond_operation_az(self) -> _builtins.str:
        """
        The status of the product package in the availability zone.
        """
        return pulumi.get(self, "cond_operation_az")

    @_builtins.property
    @pulumi.getter(name="containDataDisk")
    def contain_data_disk(self) -> _builtins.bool:
        """
        Whether the package includes data disk.
        """
        return pulumi.get(self, "contain_data_disk")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        The CPU information.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="cpuDesc")
    def cpu_desc(self) -> _builtins.str:
        """
        The CPU description.
        """
        return pulumi.get(self, "cpu_desc")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> _builtins.str:
        """
        The product description.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs.
        """
        return pulumi.get(self, "domain_ids")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The expiration time of the product package.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The ID of the flavor.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="gpuDesc")
    def gpu_desc(self) -> _builtins.str:
        """
        The GPU description.
        """
        return pulumi.get(self, "gpu_desc")

    @_builtins.property
    @pulumi.getter(name="isGpu")
    def is_gpu(self) -> _builtins.bool:
        """
        Whether the flavor is GPU type.
        """
        return pulumi.get(self, "is_gpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory size in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        The type of the package.
        + **general**: Indicates the general product package.
        + **dedicated**: Indicates the dedicated host product package.
        """
        return pulumi.get(self, "package_type")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The ID of the product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def sessions(self) -> _builtins.int:
        """
        The maximum number of sessions supported by the package.
        """
        return pulumi.get(self, "sessions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the product package in sales mode.
        + **normal**: Normal commercial use (Default).
        + **ababdon**: Discontinued (i.e., not displayed).
        + **sellout**: Sold out.
        + **obt**: Public testing.
        + **obs_sellout**: Public testing sold out.
        + **promotion**: Recommended (equivalent to normal, also commercial).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subProductLists")
    def sub_product_lists(self) -> Sequence[_builtins.str]:
        """
        The list of sub products.
        """
        return pulumi.get(self, "sub_product_lists")

    @_builtins.property
    @pulumi.getter(name="supportGpuType")
    def support_gpu_type(self) -> _builtins.str:
        """
        The GPU type supported by the product package.
        """
        return pulumi.get(self, "support_gpu_type")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.str:
        """
        The size of the system disk.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> _builtins.str:
        """
        The type of the system disk.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the product.
        + **BASE**: Indicates the basic product package, which does not include any commercial software other than the
        operating system, and can only be used in private image scenarios.
        + **ADVANCED**: Indicates the advanced product package, which includes some commercial software in the package image.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeProductType")
    def volume_product_type(self) -> _builtins.str:
        """
        The type of the volume product.
        """
        return pulumi.get(self, "volume_product_type")


@pulumi.output_type
class GetAppServerGroupsServerGroupScalingPolicyResult(dict):
    def __init__(__self__, *,
                 enable: _builtins.bool,
                 max_scaling_amount: _builtins.int,
                 scaling_policy_by_sessions: Sequence['outputs.GetAppServerGroupsServerGroupScalingPolicyScalingPolicyBySessionResult'],
                 single_expansion_count: _builtins.int):
        """
        :param _builtins.bool enable: Whether to enable the policy.
        :param _builtins.int max_scaling_amount: The maximum scaling amount.
        :param Sequence['GetAppServerGroupsServerGroupScalingPolicyScalingPolicyBySessionArgs'] scaling_policy_by_sessions: The session-based scaling policy.  
               The scaling_policy_by_session structure is documented below.
        :param _builtins.int single_expansion_count: The number of instances to add in a single scaling operation.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "max_scaling_amount", max_scaling_amount)
        pulumi.set(__self__, "scaling_policy_by_sessions", scaling_policy_by_sessions)
        pulumi.set(__self__, "single_expansion_count", single_expansion_count)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Whether to enable the policy.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="maxScalingAmount")
    def max_scaling_amount(self) -> _builtins.int:
        """
        The maximum scaling amount.
        """
        return pulumi.get(self, "max_scaling_amount")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyBySessions")
    def scaling_policy_by_sessions(self) -> Sequence['outputs.GetAppServerGroupsServerGroupScalingPolicyScalingPolicyBySessionResult']:
        """
        The session-based scaling policy.  
        The scaling_policy_by_session structure is documented below.
        """
        return pulumi.get(self, "scaling_policy_by_sessions")

    @_builtins.property
    @pulumi.getter(name="singleExpansionCount")
    def single_expansion_count(self) -> _builtins.int:
        """
        The number of instances to add in a single scaling operation.
        """
        return pulumi.get(self, "single_expansion_count")


@pulumi.output_type
class GetAppServerGroupsServerGroupScalingPolicyScalingPolicyBySessionResult(dict):
    def __init__(__self__, *,
                 session_usage_threshold: _builtins.int,
                 shrink_after_session_idle_minutes: _builtins.int):
        """
        :param _builtins.int session_usage_threshold: The total session usage threshold of the group.
        :param _builtins.int shrink_after_session_idle_minutes: The release time for instances without session connections.
        """
        pulumi.set(__self__, "session_usage_threshold", session_usage_threshold)
        pulumi.set(__self__, "shrink_after_session_idle_minutes", shrink_after_session_idle_minutes)

    @_builtins.property
    @pulumi.getter(name="sessionUsageThreshold")
    def session_usage_threshold(self) -> _builtins.int:
        """
        The total session usage threshold of the group.
        """
        return pulumi.get(self, "session_usage_threshold")

    @_builtins.property
    @pulumi.getter(name="shrinkAfterSessionIdleMinutes")
    def shrink_after_session_idle_minutes(self) -> _builtins.int:
        """
        The release time for instances without session connections.
        """
        return pulumi.get(self, "shrink_after_session_idle_minutes")


@pulumi.output_type
class GetAppServerGroupsServerGroupTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag. The maximum length is 128 Unicode characters.
        :param _builtins.str value: The value of the tag. The maximum length is 256 Unicode characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag. The maximum length is 128 Unicode characters.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag. The maximum length is 256 Unicode characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppServerQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 need: _builtins.int,
                 remainder: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int need: The required quota.
        :param _builtins.int remainder: The remaining quota.
        :param _builtins.str type: The quota resource type.
               + **GPU_INSTANCES**: Number of GPU resource instances.
               + **INSTANCES**: Number of Normal instances.
               + **VOLUME_GIGABYTES**: Total disk capacity, in GB.
               + **VOLUMES**: Number of disks.
               + **CORES**: Number of CPUs.
               + **MEMORY**: Memory capacity, in MB.
        """
        pulumi.set(__self__, "need", need)
        pulumi.set(__self__, "remainder", remainder)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def need(self) -> _builtins.int:
        """
        The required quota.
        """
        return pulumi.get(self, "need")

    @_builtins.property
    @pulumi.getter
    def remainder(self) -> _builtins.int:
        """
        The remaining quota.
        """
        return pulumi.get(self, "remainder")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The quota resource type.
        + **GPU_INSTANCES**: Number of GPU resource instances.
        + **INSTANCES**: Number of Normal instances.
        + **VOLUME_GIGABYTES**: Total disk capacity, in GB.
        + **VOLUMES**: Number of disks.
        + **CORES**: Number of CPUs.
        + **MEMORY**: Memory capacity, in MB.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAppServersServerResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 domain: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavors: Sequence['outputs.GetAppServersServerFlavorResult'],
                 freezes: Sequence['outputs.GetAppServersServerFreezeResult'],
                 host_addresses: Sequence['outputs.GetAppServersServerHostAddressResult'],
                 host_id: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 instance_id: _builtins.str,
                 job_id: _builtins.str,
                 job_status: _builtins.str,
                 job_time: _builtins.str,
                 job_type: _builtins.str,
                 machine_name: _builtins.str,
                 maintain_status: _builtins.bool,
                 metadata: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 order_id: _builtins.str,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 ou_name: _builtins.str,
                 product_infos: Sequence['outputs.GetAppServersServerProductInfoResult'],
                 resource_pool_id: _builtins.str,
                 resource_pool_type: _builtins.str,
                 scaling_auto_create: _builtins.bool,
                 server_group_id: _builtins.str,
                 server_group_name: _builtins.str,
                 session_count: _builtins.int,
                 sid: _builtins.str,
                 status: _builtins.str,
                 tags: Sequence['outputs.GetAppServersServerTagResult'],
                 task_status: _builtins.str,
                 update_time: _builtins.str,
                 vm_status: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone of the server.
        :param _builtins.str create_time: The creation time of the server.
        :param _builtins.str description: The description of the server.
        :param _builtins.str domain: The domain of the server.
        :param _builtins.str enterprise_project_id: The enterprise project ID of the server.
        :param Sequence['GetAppServersServerFlavorArgs'] flavors: The flavor information of the server.  
               The flavor structure is documented below.
        :param Sequence['GetAppServersServerFreezeArgs'] freezes: The freeze information of the server.  
               The freeze structure is documented below.
        :param Sequence['GetAppServersServerHostAddressArgs'] host_addresses: The network information of the server.  
               The host_address structure is documented below.
        :param _builtins.str host_id: The ID of the dedicated host.
        :param _builtins.str id: The ID of the flavor.
        :param _builtins.str image_id: The ID of the image.
        :param _builtins.str instance_id: The ID of the instance.
        :param _builtins.str job_id: The ID of the last executed job.
        :param _builtins.str job_status: The status of the job.
               + **WAITING**
               + **RUNNING**
               + **SUCCESS**
               + **FAILED**
        :param _builtins.str job_time: The execution time of the last job.
        :param _builtins.str job_type: The type of the job.
               + **CREATE_SERVER**
               + **DELETE_SERVER**
               + **UPDATE_FREEZE_STATUS**
               + **CREATE_SERVER_IMAGE**
               + **REINSTALL_OS**
               + **CHANGE_SERVER_IMAGE**
               + **REJOIN_DOMAIN**
               + **MIGRATE_SERVER**
               + **UPGRADE_ACCESS_AGENT**
               + **UPDATE_SERVER_TSVI**
               + **SCHEDULED_TASK**
               + **COLLECT_HDA_LOG**
               + **COLLECT_APS_LOG**
               + **CREATE_SERVER_SNAPSHOT**
               + **DELETE_SERVER_SNAPSHOT**
               + **RESTORE_SERVER_SNAPSHOT**
               + **BATCH_INSTALL_APP**
        :param _builtins.str machine_name: Specifies the machine name of the server.
        :param _builtins.bool maintain_status: Specifies whether the server is in maintenance status.
               + **true** : Instances in maintenance state.
               + **false**: Instances in non-maintenance state.
        :param Mapping[str, _builtins.str] metadata: The metadata of the server.
               + **charging_mode**: The billing type for cloud servers.
               - **0**: Post-paid.
               - **1**: Pre-paid.
               - **2**: Bidding instance billing.
               + **metering.order_id**: The order ID corresponding to the cloud server charged on a yearly/monthly basis.
               + **metering.product_id**: The product ID corresponding to the cloud server charged on a yearly/monthly basis.
               + **vpc_id**: The VPC ID of the service.
               + **EcmResStatus**: The frozen state of the cloud server.
               - **Normal**: The cloud server is in a normal state (not frozen).
               - **Freeze**: The cloud server has been frozen.
               + **metering.image_id**: The image ID corresponding to the cloud server operating system.
               + **metering.imagetype**: The image type corresponding to the cloud server operating system.
               - **gold**
               - **private**
               - **shared**
               + **metering.resourcespeccode**: The resource specifications corresponding to the cloud server.
               + **image_name**: The image name corresponding to the cloud server.
               + **os_bit**: The number of bits in the operating system is usually set to **32** or **64**.
               + **lockCheckEndpoint**: Callback URL, used to check whether the locking of the ECS instance is effective.
               + **lockSource**: Which service does the ECS instance come from. It is order locking if the value is **ORDER**.
               + **lockSourceId**: Which ID does the locking of the ECS instance come from. When `lockSource` is **ORDER**,
               `lockSourceId` is the order ID.
               + **lockScene**: The locking types of ECS instance.
               - **TO_PERIOD_LOCK**: Transfer post-paid to pre-paid.
               + **virtual_env_type**: The virtual environment type.
               - Create a virtual machine from an IOS image. It has `"virtual_env_type": "IsoImage"` property.
               - Create a virtual machine with a non-IOS image. Virtual machines created after version **19.5.0** will not
               have the `virtual_env_type` property added. However, virtual machines created with versions prior to this may
               return the property `"virtual_env_type": "FusionCompute"`.
               + **metering.resourcetype**: The resource type corresponding to the ECS instance.
               + **os_type**: Operating system type.
               - **Linux**
               - **Windows**
               + **cascaded.instance_extrainfo**: The internal virtual machine extension information of the system.
               + **__support_agent_list**: The list of agents supported by ECS instance.
               - **hss**
               - **ces**
               + **agency_name**: The name of the agency.
        :param _builtins.str name: The name of the server.
        :param _builtins.str order_id: The ID of the order.
        :param _builtins.str os_type: The type of the operating system. Currently, only **Windows** is supported.
        :param _builtins.str os_version: The version of the operating system.
        :param _builtins.str ou_name: The organization unit name.
        :param Sequence['GetAppServersServerProductInfoArgs'] product_infos: The product information of the server.  
               The product_info structure is documented below.
        :param _builtins.str resource_pool_id: The ID of the resource pool.
        :param _builtins.str resource_pool_type: The type of the resource pool.
               + **private**: Private resource pool.
               + **public**: Public resource pool.
        :param _builtins.bool scaling_auto_create: Specifies whether the server is created by auto-scaling.
               + **true** : Created through elastic scaling.
               + **false**: Not created through elastic scaling.
        :param _builtins.str server_group_id: Specifies the ID of the server group.
        :param _builtins.str server_group_name: The name of the server group.
        :param _builtins.int session_count: The number of sessions.
        :param _builtins.str sid: The SID of the instance.
        :param _builtins.str status: The status of the product package in sales mode.
               + **normal**: Normal commercial use (Default).
               + **ababdon**: Discontinued (i.e., not displayed).
               + **sellout**: Sold out.
               + **obt**: Public testing.
               + **obs_sellout**: Public testing sold out.
               + **promotion**: Recommended (equivalent to normal, also commercial).
        :param Sequence['GetAppServersServerTagArgs'] tags: The tags of the server.  
               The tags structure is documented below.
        :param _builtins.str task_status: The task status of the server.
               + **scheduling**: Instance is being scheduled during creation.
               + **block_device_mapping**: Instance is preparing disks during creation.
               + **networking**: Instance is preparing network during creation.
               + **spawning**: Instance is being internally created.
               + **rebooting**: Instance is rebooting.
               + **reboot_pending**: Instance is rebooting, restart command is being issued.
               + **reboot_started**: Instance has started internal reboot.
               + **rebooting_hard**: Instance is performing a hard reboot.
               + **reboot_pending_hard**: Instance is performing a hard reboot, restart command is being issued.
               + **reboot_started_hard**: Instance has started internal hard reboot.
               + **rebuilding**: Instance is being rebuilt.
               + **rebuild_fail**: Instance rebuild failed.
               + **updating_tsvi**: Instance is updating virtual session IP.
               + **updating_tsvi_failed**: Instance virtual session IP update failed.
               + **rebuild_block_device_mapping**: Instance is preparing disks during rebuild.
               + **rebuild_spawning**: Instance is internally rebuilding.
               + **migrating**: Instance is hot migrating.
               + **resize_prep**: Instance is in preparation phase of resizing.
               + **resize_migrating**: Instance is in migration phase of resizing.
               + **resize_migrated**: Instance has completed migration during resizing.
               + **resize_finish**: Instance is finalizing resizing.
               + **resize_reverting**: Instance is reverting resizing changes.
               + **powering-off**: Instance is shutting down.
               + **powering-on**: Instance is starting up.
               + **deleting**: Instance is being deleted.
               + **source_locking**: Resource is being locked.
               + **rejoining_domain**: Instance is rejoining domain.
               + **delete_failed**: Instance deletion failed.
               + **upgrading_access_agent**: Instance is upgrading AccessAgent.
               + **upgrad_access_agent_fail**: Instance AccessAgent upgrade failed.
               + **upgrad_access_agent_success**: Instance AccessAgent upgrade succeeded.
               + **updating_sid**: Instance is waiting to update SID during creation.
               + **migrate_failed**: Instance migration failed.
               + **build_image**: Image is being generated.
               + **build_snapshot**: Snapshot is being generated.
               + **restore_snapshot**: Snapshot is being restored.
               + **installing_app**: Application is being silently installed.
               + **install_app_failed**: Application installation failed.
               + **null**: Not set.
        :param _builtins.str update_time: The update time of the server.
        :param _builtins.str vm_status: The steady state of a server, the stable state in which a certain operation is completed.
               + **BUILD**: Creating an APS instance, the state of the APS instance before it enters operation.
               + **BUILD_FAIL**: Failed to create an APS instance.
               + **REBOOT**: The instance is undergoing a reboot operation.
               + **HARD_REBOOT**: The instance is undergoing a forced reboot operation.
               + **REBUILD**: The instance is being rebuilt.
               + **REBUILD_FAIL**: The instance rebuilding failed.
               + **MIGRATING**: The instance is in the process of hot migration.
               + **RESIZE**: The instance has received a change request and is beginning the change operation.
               + **ACTIVE**: The instance is in a normal operating state.
               + **SHUTOFF**: The instance has been normally stopped.
               + **REVERT_RESIZE**: The instance is reverting the configuration of the changed specifications.
               + **VERIFY_RESIZE**: The instance is verifying the configuration after the change is completed.
               + **ERROR**: The instance is in an abnormal state.
               + **DELETING**: The instance is being deleted.
               + **FREEZE**: The instance is frozen.
               + **BUILD_IMAGE**: Creating an image of the instance.
               + **BUILD_SNAPSHOT**: Creating a snapshot of the instance.
               + **RESTORE_SNAPSHOT**: Restoring a snapshot of the instance.
               + **NULL**: Not set.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavors", flavors)
        pulumi.set(__self__, "freezes", freezes)
        pulumi.set(__self__, "host_addresses", host_addresses)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_status", job_status)
        pulumi.set(__self__, "job_time", job_time)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "maintain_status", maintain_status)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "ou_name", ou_name)
        pulumi.set(__self__, "product_infos", product_infos)
        pulumi.set(__self__, "resource_pool_id", resource_pool_id)
        pulumi.set(__self__, "resource_pool_type", resource_pool_type)
        pulumi.set(__self__, "scaling_auto_create", scaling_auto_create)
        pulumi.set(__self__, "server_group_id", server_group_id)
        pulumi.set(__self__, "server_group_name", server_group_name)
        pulumi.set(__self__, "session_count", session_count)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vm_status", vm_status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone of the server.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the server.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the server.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The domain of the server.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID of the server.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetAppServersServerFlavorResult']:
        """
        The flavor information of the server.  
        The flavor structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def freezes(self) -> Sequence['outputs.GetAppServersServerFreezeResult']:
        """
        The freeze information of the server.  
        The freeze structure is documented below.
        """
        return pulumi.get(self, "freezes")

    @_builtins.property
    @pulumi.getter(name="hostAddresses")
    def host_addresses(self) -> Sequence['outputs.GetAppServersServerHostAddressResult']:
        """
        The network information of the server.  
        The host_address structure is documented below.
        """
        return pulumi.get(self, "host_addresses")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The ID of the dedicated host.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the image.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        The ID of the last executed job.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> _builtins.str:
        """
        The status of the job.
        + **WAITING**
        + **RUNNING**
        + **SUCCESS**
        + **FAILED**
        """
        return pulumi.get(self, "job_status")

    @_builtins.property
    @pulumi.getter(name="jobTime")
    def job_time(self) -> _builtins.str:
        """
        The execution time of the last job.
        """
        return pulumi.get(self, "job_time")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        """
        The type of the job.
        + **CREATE_SERVER**
        + **DELETE_SERVER**
        + **UPDATE_FREEZE_STATUS**
        + **CREATE_SERVER_IMAGE**
        + **REINSTALL_OS**
        + **CHANGE_SERVER_IMAGE**
        + **REJOIN_DOMAIN**
        + **MIGRATE_SERVER**
        + **UPGRADE_ACCESS_AGENT**
        + **UPDATE_SERVER_TSVI**
        + **SCHEDULED_TASK**
        + **COLLECT_HDA_LOG**
        + **COLLECT_APS_LOG**
        + **CREATE_SERVER_SNAPSHOT**
        + **DELETE_SERVER_SNAPSHOT**
        + **RESTORE_SERVER_SNAPSHOT**
        + **BATCH_INSTALL_APP**
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> _builtins.str:
        """
        Specifies the machine name of the server.
        """
        return pulumi.get(self, "machine_name")

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> _builtins.bool:
        """
        Specifies whether the server is in maintenance status.
        + **true** : Instances in maintenance state.
        + **false**: Instances in non-maintenance state.
        """
        return pulumi.get(self, "maintain_status")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The metadata of the server.
        + **charging_mode**: The billing type for cloud servers.
        - **0**: Post-paid.
        - **1**: Pre-paid.
        - **2**: Bidding instance billing.
        + **metering.order_id**: The order ID corresponding to the cloud server charged on a yearly/monthly basis.
        + **metering.product_id**: The product ID corresponding to the cloud server charged on a yearly/monthly basis.
        + **vpc_id**: The VPC ID of the service.
        + **EcmResStatus**: The frozen state of the cloud server.
        - **Normal**: The cloud server is in a normal state (not frozen).
        - **Freeze**: The cloud server has been frozen.
        + **metering.image_id**: The image ID corresponding to the cloud server operating system.
        + **metering.imagetype**: The image type corresponding to the cloud server operating system.
        - **gold**
        - **private**
        - **shared**
        + **metering.resourcespeccode**: The resource specifications corresponding to the cloud server.
        + **image_name**: The image name corresponding to the cloud server.
        + **os_bit**: The number of bits in the operating system is usually set to **32** or **64**.
        + **lockCheckEndpoint**: Callback URL, used to check whether the locking of the ECS instance is effective.
        + **lockSource**: Which service does the ECS instance come from. It is order locking if the value is **ORDER**.
        + **lockSourceId**: Which ID does the locking of the ECS instance come from. When `lockSource` is **ORDER**,
        `lockSourceId` is the order ID.
        + **lockScene**: The locking types of ECS instance.
        - **TO_PERIOD_LOCK**: Transfer post-paid to pre-paid.
        + **virtual_env_type**: The virtual environment type.
        - Create a virtual machine from an IOS image. It has `"virtual_env_type": "IsoImage"` property.
        - Create a virtual machine with a non-IOS image. Virtual machines created after version **19.5.0** will not
        have the `virtual_env_type` property added. However, virtual machines created with versions prior to this may
        return the property `"virtual_env_type": "FusionCompute"`.
        + **metering.resourcetype**: The resource type corresponding to the ECS instance.
        + **os_type**: Operating system type.
        - **Linux**
        - **Windows**
        + **cascaded.instance_extrainfo**: The internal virtual machine extension information of the system.
        + **__support_agent_list**: The list of agents supported by ECS instance.
        - **hss**
        - **ces**
        + **agency_name**: The name of the agency.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The ID of the order.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The type of the operating system. Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        The version of the operating system.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> _builtins.str:
        """
        The organization unit name.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter(name="productInfos")
    def product_infos(self) -> Sequence['outputs.GetAppServersServerProductInfoResult']:
        """
        The product information of the server.  
        The product_info structure is documented below.
        """
        return pulumi.get(self, "product_infos")

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> _builtins.str:
        """
        The ID of the resource pool.
        """
        return pulumi.get(self, "resource_pool_id")

    @_builtins.property
    @pulumi.getter(name="resourcePoolType")
    def resource_pool_type(self) -> _builtins.str:
        """
        The type of the resource pool.
        + **private**: Private resource pool.
        + **public**: Public resource pool.
        """
        return pulumi.get(self, "resource_pool_type")

    @_builtins.property
    @pulumi.getter(name="scalingAutoCreate")
    def scaling_auto_create(self) -> _builtins.bool:
        """
        Specifies whether the server is created by auto-scaling.
        + **true** : Created through elastic scaling.
        + **false**: Not created through elastic scaling.
        """
        return pulumi.get(self, "scaling_auto_create")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the server group.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> _builtins.str:
        """
        The name of the server group.
        """
        return pulumi.get(self, "server_group_name")

    @_builtins.property
    @pulumi.getter(name="sessionCount")
    def session_count(self) -> _builtins.int:
        """
        The number of sessions.
        """
        return pulumi.get(self, "session_count")

    @_builtins.property
    @pulumi.getter
    def sid(self) -> _builtins.str:
        """
        The SID of the instance.
        """
        return pulumi.get(self, "sid")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the product package in sales mode.
        + **normal**: Normal commercial use (Default).
        + **ababdon**: Discontinued (i.e., not displayed).
        + **sellout**: Sold out.
        + **obt**: Public testing.
        + **obs_sellout**: Public testing sold out.
        + **promotion**: Recommended (equivalent to normal, also commercial).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAppServersServerTagResult']:
        """
        The tags of the server.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> _builtins.str:
        """
        The task status of the server.
        + **scheduling**: Instance is being scheduled during creation.
        + **block_device_mapping**: Instance is preparing disks during creation.
        + **networking**: Instance is preparing network during creation.
        + **spawning**: Instance is being internally created.
        + **rebooting**: Instance is rebooting.
        + **reboot_pending**: Instance is rebooting, restart command is being issued.
        + **reboot_started**: Instance has started internal reboot.
        + **rebooting_hard**: Instance is performing a hard reboot.
        + **reboot_pending_hard**: Instance is performing a hard reboot, restart command is being issued.
        + **reboot_started_hard**: Instance has started internal hard reboot.
        + **rebuilding**: Instance is being rebuilt.
        + **rebuild_fail**: Instance rebuild failed.
        + **updating_tsvi**: Instance is updating virtual session IP.
        + **updating_tsvi_failed**: Instance virtual session IP update failed.
        + **rebuild_block_device_mapping**: Instance is preparing disks during rebuild.
        + **rebuild_spawning**: Instance is internally rebuilding.
        + **migrating**: Instance is hot migrating.
        + **resize_prep**: Instance is in preparation phase of resizing.
        + **resize_migrating**: Instance is in migration phase of resizing.
        + **resize_migrated**: Instance has completed migration during resizing.
        + **resize_finish**: Instance is finalizing resizing.
        + **resize_reverting**: Instance is reverting resizing changes.
        + **powering-off**: Instance is shutting down.
        + **powering-on**: Instance is starting up.
        + **deleting**: Instance is being deleted.
        + **source_locking**: Resource is being locked.
        + **rejoining_domain**: Instance is rejoining domain.
        + **delete_failed**: Instance deletion failed.
        + **upgrading_access_agent**: Instance is upgrading AccessAgent.
        + **upgrad_access_agent_fail**: Instance AccessAgent upgrade failed.
        + **upgrad_access_agent_success**: Instance AccessAgent upgrade succeeded.
        + **updating_sid**: Instance is waiting to update SID during creation.
        + **migrate_failed**: Instance migration failed.
        + **build_image**: Image is being generated.
        + **build_snapshot**: Snapshot is being generated.
        + **restore_snapshot**: Snapshot is being restored.
        + **installing_app**: Application is being silently installed.
        + **install_app_failed**: Application installation failed.
        + **null**: Not set.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time of the server.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="vmStatus")
    def vm_status(self) -> _builtins.str:
        """
        The steady state of a server, the stable state in which a certain operation is completed.
        + **BUILD**: Creating an APS instance, the state of the APS instance before it enters operation.
        + **BUILD_FAIL**: Failed to create an APS instance.
        + **REBOOT**: The instance is undergoing a reboot operation.
        + **HARD_REBOOT**: The instance is undergoing a forced reboot operation.
        + **REBUILD**: The instance is being rebuilt.
        + **REBUILD_FAIL**: The instance rebuilding failed.
        + **MIGRATING**: The instance is in the process of hot migration.
        + **RESIZE**: The instance has received a change request and is beginning the change operation.
        + **ACTIVE**: The instance is in a normal operating state.
        + **SHUTOFF**: The instance has been normally stopped.
        + **REVERT_RESIZE**: The instance is reverting the configuration of the changed specifications.
        + **VERIFY_RESIZE**: The instance is verifying the configuration after the change is completed.
        + **ERROR**: The instance is in an abnormal state.
        + **DELETING**: The instance is being deleted.
        + **FREEZE**: The instance is frozen.
        + **BUILD_IMAGE**: Creating an image of the instance.
        + **BUILD_SNAPSHOT**: Creating a snapshot of the instance.
        + **RESTORE_SNAPSHOT**: Restoring a snapshot of the instance.
        + **NULL**: Not set.
        """
        return pulumi.get(self, "vm_status")


@pulumi.output_type
class GetAppServersServerFlavorResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 links: Sequence['outputs.GetAppServersServerFlavorLinkResult']):
        """
        :param _builtins.str id: The ID of the flavor.
        :param Sequence['GetAppServersServerFlavorLinkArgs'] links: The quick link information for relevant tags corresponding to server specifications.  
               The links structure is documented below.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetAppServersServerFlavorLinkResult']:
        """
        The quick link information for relevant tags corresponding to server specifications.  
        The links structure is documented below.
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class GetAppServersServerFlavorLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link tag name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link tag name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetAppServersServerFreezeResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scene: _builtins.str):
        """
        :param _builtins.int effect: The effect of the freeze operation.
               + **1**: (Implement/Remove) Freeze can be released. The resource can be manually deleted or released after freezing.
               + **2**: (Implement/Remove) Freeze cannot be released. The resource cannot be manually deleted or released after
               freezing, and cannot be changed, equivalent to the resource being sealed. After thawing, customers can delete
               and modify the data.
               + **3**: (Implement/Remove) Non-renewable after freezing. The resource cannot initiate renewal operations after
               freezing; this can be done after thawing.
        :param _builtins.str scene: The scene of the service status update. Default to **ARREAR**.
               + **ARREAR**: Arrears scenario; for normal operational business scenarios, including expired periodic resources,
               failed on-demand resource billing.
               + **POLICE**: Police freeze scenario.
               + **ILLEGAL**: Illegal freeze scenario.
               + **VERIFY**: Customer under-authentication freeze scenario.
               + **PARTNER**: Partner freeze (partner freezes sub-customer resources).
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scene", scene)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The effect of the freeze operation.
        + **1**: (Implement/Remove) Freeze can be released. The resource can be manually deleted or released after freezing.
        + **2**: (Implement/Remove) Freeze cannot be released. The resource cannot be manually deleted or released after
        freezing, and cannot be changed, equivalent to the resource being sealed. After thawing, customers can delete
        and modify the data.
        + **3**: (Implement/Remove) Non-renewable after freezing. The resource cannot initiate renewal operations after
        freezing; this can be done after thawing.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scene(self) -> _builtins.str:
        """
        The scene of the service status update. Default to **ARREAR**.
        + **ARREAR**: Arrears scenario; for normal operational business scenarios, including expired periodic resources,
        failed on-demand resource billing.
        + **POLICE**: Police freeze scenario.
        + **ILLEGAL**: Illegal freeze scenario.
        + **VERIFY**: Customer under-authentication freeze scenario.
        + **PARTNER**: Partner freeze (partner freezes sub-customer resources).
        """
        return pulumi.get(self, "scene")


@pulumi.output_type
class GetAppServersServerHostAddressResult(dict):
    def __init__(__self__, *,
                 addr: _builtins.str,
                 mac_addr: _builtins.str,
                 port_id: _builtins.str,
                 subnet_id: _builtins.str,
                 tenant_type: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str addr: The IP address.
        :param _builtins.str mac_addr: The MAC address.
        :param _builtins.str port_id: The port ID of the IP address.
        :param _builtins.str subnet_id: The ID of the subnet.
        :param _builtins.str tenant_type: The type of the tenant.
               + **tenant**
               + **resource_tenant**
        :param _builtins.str type: The IP address allocation type. Strings are case-insensitive formats.
               + **fixed**: Represents a private IP address.
               + **floating**: Represents a floating IP address.
        :param _builtins.int version: The IP address version.
               + **4**: IPV4.
               + **6**: IPV6.
        :param _builtins.str vpc_id: The ID of the VPC.
        """
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "mac_addr", mac_addr)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tenant_type", tenant_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def addr(self) -> _builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "addr")

    @_builtins.property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> _builtins.str:
        """
        The MAC address.
        """
        return pulumi.get(self, "mac_addr")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        The port ID of the IP address.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="tenantType")
    def tenant_type(self) -> _builtins.str:
        """
        The type of the tenant.
        + **tenant**
        + **resource_tenant**
        """
        return pulumi.get(self, "tenant_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The IP address allocation type. Strings are case-insensitive formats.
        + **fixed**: Represents a private IP address.
        + **floating**: Represents a floating IP address.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The IP address version.
        + **4**: IPV4.
        + **6**: IPV6.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAppServersServerProductInfoResult(dict):
    def __init__(__self__, *,
                 architecture: _builtins.str,
                 charge_mode: _builtins.str,
                 cloud_service_type: _builtins.str,
                 cond_operation_az: _builtins.str,
                 contain_data_disk: _builtins.bool,
                 cpu: _builtins.str,
                 cpu_desc: _builtins.str,
                 descriptions: _builtins.str,
                 domain_ids: Sequence[_builtins.str],
                 expire_time: _builtins.str,
                 flavor_id: _builtins.str,
                 gpu_desc: _builtins.str,
                 is_gpu: _builtins.bool,
                 memory: _builtins.str,
                 package_type: _builtins.str,
                 product_id: _builtins.str,
                 resource_type: _builtins.str,
                 sessions: _builtins.int,
                 status: _builtins.str,
                 sub_product_lists: Sequence[_builtins.str],
                 support_gpu_type: _builtins.str,
                 system_disk_size: _builtins.str,
                 system_disk_type: _builtins.str,
                 type: _builtins.str,
                 volume_product_type: _builtins.str):
        """
        :param _builtins.str architecture: The architecture of the product. Currently, only **x86** is supported.
        :param _builtins.str charge_mode: The charging mode.
               + **"1"**: Pre-paid.
               + **"0"**: Post-paid.
        :param _builtins.str cloud_service_type: The type of the cloud service.
        :param _builtins.str cond_operation_az: The status of the product package in the availability zone.
        :param _builtins.bool contain_data_disk: Whether the package includes data disk.
        :param _builtins.str cpu: The CPU information.
        :param _builtins.str cpu_desc: The CPU description.
        :param _builtins.str descriptions: The product description.
        :param Sequence[_builtins.str] domain_ids: The list of domain IDs.
        :param _builtins.str expire_time: The expiration time of the product package.
        :param _builtins.str flavor_id: The ID of the flavor.
        :param _builtins.str gpu_desc: The GPU description.
        :param _builtins.bool is_gpu: Whether the flavor is GPU type.
        :param _builtins.str memory: The memory size in MB.
        :param _builtins.str package_type: The type of the package.
               + **general**: Indicates the general product package.
               + **dedicated**: Indicates the dedicated host product package.
        :param _builtins.str product_id: The ID of the product.
        :param _builtins.str resource_type: The type of the resource.
        :param _builtins.int sessions: The maximum number of sessions supported by the package.
        :param _builtins.str status: The status of the product package in sales mode.
               + **normal**: Normal commercial use (Default).
               + **ababdon**: Discontinued (i.e., not displayed).
               + **sellout**: Sold out.
               + **obt**: Public testing.
               + **obs_sellout**: Public testing sold out.
               + **promotion**: Recommended (equivalent to normal, also commercial).
        :param Sequence[_builtins.str] sub_product_lists: The list of sub products.
        :param _builtins.str support_gpu_type: The GPU type supported by the product package.
        :param _builtins.str system_disk_size: The size of the system disk.
        :param _builtins.str system_disk_type: The type of the system disk.
        :param _builtins.str type: The IP address allocation type. Strings are case-insensitive formats.
               + **fixed**: Represents a private IP address.
               + **floating**: Represents a floating IP address.
        :param _builtins.str volume_product_type: The type of the volume product.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "cond_operation_az", cond_operation_az)
        pulumi.set(__self__, "contain_data_disk", contain_data_disk)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "cpu_desc", cpu_desc)
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "domain_ids", domain_ids)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "gpu_desc", gpu_desc)
        pulumi.set(__self__, "is_gpu", is_gpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "sessions", sessions)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_product_lists", sub_product_lists)
        pulumi.set(__self__, "support_gpu_type", support_gpu_type)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_product_type", volume_product_type)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The architecture of the product. Currently, only **x86** is supported.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charging mode.
        + **"1"**: Pre-paid.
        + **"0"**: Post-paid.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The type of the cloud service.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter(name="condOperationAz")
    def cond_operation_az(self) -> _builtins.str:
        """
        The status of the product package in the availability zone.
        """
        return pulumi.get(self, "cond_operation_az")

    @_builtins.property
    @pulumi.getter(name="containDataDisk")
    def contain_data_disk(self) -> _builtins.bool:
        """
        Whether the package includes data disk.
        """
        return pulumi.get(self, "contain_data_disk")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        The CPU information.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="cpuDesc")
    def cpu_desc(self) -> _builtins.str:
        """
        The CPU description.
        """
        return pulumi.get(self, "cpu_desc")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> _builtins.str:
        """
        The product description.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs.
        """
        return pulumi.get(self, "domain_ids")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The expiration time of the product package.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The ID of the flavor.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="gpuDesc")
    def gpu_desc(self) -> _builtins.str:
        """
        The GPU description.
        """
        return pulumi.get(self, "gpu_desc")

    @_builtins.property
    @pulumi.getter(name="isGpu")
    def is_gpu(self) -> _builtins.bool:
        """
        Whether the flavor is GPU type.
        """
        return pulumi.get(self, "is_gpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory size in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        The type of the package.
        + **general**: Indicates the general product package.
        + **dedicated**: Indicates the dedicated host product package.
        """
        return pulumi.get(self, "package_type")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The ID of the product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def sessions(self) -> _builtins.int:
        """
        The maximum number of sessions supported by the package.
        """
        return pulumi.get(self, "sessions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the product package in sales mode.
        + **normal**: Normal commercial use (Default).
        + **ababdon**: Discontinued (i.e., not displayed).
        + **sellout**: Sold out.
        + **obt**: Public testing.
        + **obs_sellout**: Public testing sold out.
        + **promotion**: Recommended (equivalent to normal, also commercial).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subProductLists")
    def sub_product_lists(self) -> Sequence[_builtins.str]:
        """
        The list of sub products.
        """
        return pulumi.get(self, "sub_product_lists")

    @_builtins.property
    @pulumi.getter(name="supportGpuType")
    def support_gpu_type(self) -> _builtins.str:
        """
        The GPU type supported by the product package.
        """
        return pulumi.get(self, "support_gpu_type")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.str:
        """
        The size of the system disk.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> _builtins.str:
        """
        The type of the system disk.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The IP address allocation type. Strings are case-insensitive formats.
        + **fixed**: Represents a private IP address.
        + **floating**: Represents a floating IP address.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeProductType")
    def volume_product_type(self) -> _builtins.str:
        """
        The type of the volume product.
        """
        return pulumi.get(self, "volume_product_type")


@pulumi.output_type
class GetAppServersServerTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag. The maximum length is 128 Unicode characters.
        :param _builtins.str value: The value of the tag. The maximum length is 256 Unicode characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag. The maximum length is 128 Unicode characters.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag. The maximum length is 256 Unicode characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppSessionTypesSessionTypeResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 resource_spec_code: _builtins.str,
                 resource_type: _builtins.str,
                 session_type: _builtins.str):
        """
        :param _builtins.str cloud_service_type: The code of cloud service type to which the resource belongs.
        :param _builtins.str resource_spec_code: The resource specification code.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.str session_type: The session type.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "session_type", session_type)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The code of cloud service type to which the resource belongs.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The resource specification code.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> _builtins.str:
        """
        The session type.
        """
        return pulumi.get(self, "session_type")


@pulumi.output_type
class GetAppStoragePoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 client_actions: Sequence[_builtins.str],
                 id: _builtins.str,
                 server_actions: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] client_actions: The collection of permissions that client can use to access storage.
        :param _builtins.str id: The ID of the storage permission policy.
        :param Sequence[_builtins.str] server_actions: The collection of permissions that server can use to access storage.
        """
        pulumi.set(__self__, "client_actions", client_actions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_actions", server_actions)

    @_builtins.property
    @pulumi.getter(name="clientActions")
    def client_actions(self) -> Sequence[_builtins.str]:
        """
        The collection of permissions that client can use to access storage.
        """
        return pulumi.get(self, "client_actions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the storage permission policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverActions")
    def server_actions(self) -> Sequence[_builtins.str]:
        """
        The collection of permissions that server can use to access storage.
        """
        return pulumi.get(self, "server_actions")


@pulumi.output_type
class GetAppWarehouseApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app_file_size: _builtins.str,
                 app_id: _builtins.str,
                 category: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 file_store_path: _builtins.str,
                 icon: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 updated_at: _builtins.str,
                 verify_status: _builtins.str,
                 version: _builtins.str,
                 version_name: _builtins.str):
        """
        :param _builtins.str app_file_size: The size of the application file.
        :param _builtins.str app_id: Specifies the ID of the application.
        :param _builtins.str category: Specifies the category of the application.  
               The valid values are as follows:
               + **GAME**
               + **SECURE_STORAGE**
               + **MULTIMEDIA_AND_CODING**
               + **PROJECT_MANAGEMENT**
               + **PRODUCTIVITY_AND_COLLABORATION**
               + **GRAPHIC_DESIGN**
               + **OTHER**
        :param _builtins.str created_at: The creation time of the application, in RFC3339 format.
        :param _builtins.str description: The description of the application.
        :param _builtins.str file_store_path: The storage path of the application file.
        :param _builtins.str icon: The base64 encoded application icon.
        :param _builtins.str id: The record ID of the application.
        :param _builtins.str name: Specifies the name of the application.  
               Fuzzy matching is supported.
        :param _builtins.str os_type: The operating system type of the application.
               + **Windows**
               + **Linux**
               + **Other**
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        :param _builtins.str verify_status: Specifies the verification status of the application.  
               The valid values are as follows:
               + **VERIFIED** - Verification passed.
               + **VERIFY_FAILED** - Verification failed.
        :param _builtins.str version: The version of the application.
        :param _builtins.str version_name: The version name of the application.
        """
        pulumi.set(__self__, "app_file_size", app_file_size)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_store_path", file_store_path)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "verify_status", verify_status)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_name", version_name)

    @_builtins.property
    @pulumi.getter(name="appFileSize")
    def app_file_size(self) -> _builtins.str:
        """
        The size of the application file.
        """
        return pulumi.get(self, "app_file_size")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.str:
        """
        Specifies the ID of the application.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category of the application.  
        The valid values are as follows:
        + **GAME**
        + **SECURE_STORAGE**
        + **MULTIMEDIA_AND_CODING**
        + **PROJECT_MANAGEMENT**
        + **PRODUCTIVITY_AND_COLLABORATION**
        + **GRAPHIC_DESIGN**
        + **OTHER**
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileStorePath")
    def file_store_path(self) -> _builtins.str:
        """
        The storage path of the application file.
        """
        return pulumi.get(self, "file_store_path")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        """
        The base64 encoded application icon.
        """
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The record ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application.  
        Fuzzy matching is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The operating system type of the application.
        + **Windows**
        + **Linux**
        + **Other**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="verifyStatus")
    def verify_status(self) -> _builtins.str:
        """
        Specifies the verification status of the application.  
        The valid values are as follows:
        + **VERIFIED** - Verification passed.
        + **VERIFY_FAILED** - Verification failed.
        """
        return pulumi.get(self, "verify_status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the application.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> _builtins.str:
        """
        The version name of the application.
        """
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetApplicationCatalogsCatalogResult(dict):
    def __init__(__self__, *,
                 en: _builtins.str,
                 id: _builtins.str,
                 zh: _builtins.str):
        """
        :param _builtins.str en: The catalog description in English.
        :param _builtins.str id: The ID of the application catalog.
        :param _builtins.str zh: The catalog description in Chinese.
        """
        pulumi.set(__self__, "en", en)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "zh", zh)

    @_builtins.property
    @pulumi.getter
    def en(self) -> _builtins.str:
        """
        The catalog description in English.
        """
        return pulumi.get(self, "en")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application catalog.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def zh(self) -> _builtins.str:
        """
        The catalog description in Chinese.
        """
        return pulumi.get(self, "zh")


@pulumi.output_type
class GetApplicationRulesRuleResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 details: Sequence['outputs.GetApplicationRulesRuleDetailResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 rule_source: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str create_time: The create time of the application rule, in RFC3339 format.
        :param _builtins.str description: The description of the application rule.
        :param Sequence['GetApplicationRulesRuleDetailArgs'] details: The detail of the application rule.  
               The detail structure is documented below.
        :param _builtins.str id: The ID of the application rule.
        :param _builtins.str name: Specifies the name of the application rule to be queried.
        :param _builtins.str rule_source: The source of the application rule.
        :param _builtins.str update_time: The update time of the application rule, in RFC3339 format.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_source", rule_source)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The create time of the application rule, in RFC3339 format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetApplicationRulesRuleDetailResult']:
        """
        The detail of the application rule.  
        The detail structure is documented below.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application rule to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ruleSource")
    def rule_source(self) -> _builtins.str:
        """
        The source of the application rule.
        """
        return pulumi.get(self, "rule_source")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time of the application rule, in RFC3339 format.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetApplicationRulesRuleDetailResult(dict):
    def __init__(__self__, *,
                 path_rules: Sequence['outputs.GetApplicationRulesRuleDetailPathRuleResult'],
                 product_rules: Sequence['outputs.GetApplicationRulesRuleDetailProductRuleResult'],
                 scope: _builtins.str):
        """
        :param Sequence['GetApplicationRulesRuleDetailPathRuleArgs'] path_rules: The path rule configuration.  
               The path_rule structure is documented below.
        :param Sequence['GetApplicationRulesRuleDetailProductRuleArgs'] product_rules: The product rule configuration.  
               The product_rule structure is documented below.
        :param _builtins.str scope: The scope of the rule.  
               The valid values are as follows:
               + **PRODUCT**
               + **PATH**
        """
        pulumi.set(__self__, "path_rules", path_rules)
        pulumi.set(__self__, "product_rules", product_rules)
        pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter(name="pathRules")
    def path_rules(self) -> Sequence['outputs.GetApplicationRulesRuleDetailPathRuleResult']:
        """
        The path rule configuration.  
        The path_rule structure is documented below.
        """
        return pulumi.get(self, "path_rules")

    @_builtins.property
    @pulumi.getter(name="productRules")
    def product_rules(self) -> Sequence['outputs.GetApplicationRulesRuleDetailProductRuleResult']:
        """
        The product rule configuration.  
        The product_rule structure is documented below.
        """
        return pulumi.get(self, "product_rules")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        The scope of the rule.  
        The valid values are as follows:
        + **PRODUCT**
        + **PATH**
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetApplicationRulesRuleDetailPathRuleResult(dict):
    def __init__(__self__, *,
                 path: _builtins.str):
        """
        :param _builtins.str path: The complete path.
        """
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The complete path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetApplicationRulesRuleDetailProductRuleResult(dict):
    def __init__(__self__, *,
                 identify_condition: _builtins.str,
                 process_name: _builtins.str,
                 product_name: _builtins.str,
                 product_version: _builtins.str,
                 publisher: _builtins.str,
                 support_os: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str identify_condition: The identification condition.
        :param _builtins.str process_name: The process name.
        :param _builtins.str product_name: The product name.
        :param _builtins.str product_version: The product version number.
        :param _builtins.str publisher: The publisher name.
        :param _builtins.str support_os: The supported operating system type, defaults to **Windows**
        :param _builtins.str version: The version number.
        """
        pulumi.set(__self__, "identify_condition", identify_condition)
        pulumi.set(__self__, "process_name", process_name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_version", product_version)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "support_os", support_os)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="identifyCondition")
    def identify_condition(self) -> _builtins.str:
        """
        The identification condition.
        """
        return pulumi.get(self, "identify_condition")

    @_builtins.property
    @pulumi.getter(name="processName")
    def process_name(self) -> _builtins.str:
        """
        The process name.
        """
        return pulumi.get(self, "process_name")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        The product name.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> _builtins.str:
        """
        The product version number.
        """
        return pulumi.get(self, "product_version")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        """
        The publisher name.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> _builtins.str:
        """
        The supported operating system type, defaults to **Windows**
        """
        return pulumi.get(self, "support_os")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 application_file_stores: Sequence['outputs.GetApplicationsApplicationApplicationFileStoreResult'],
                 application_icon_url: _builtins.str,
                 application_source: _builtins.str,
                 authorization_type: _builtins.str,
                 catalog: _builtins.str,
                 catalog_id: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 install_command: _builtins.str,
                 install_info: _builtins.str,
                 install_type: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 support_os: _builtins.str,
                 uninstall_command: _builtins.str,
                 version: _builtins.str):
        """
        :param Sequence['GetApplicationsApplicationApplicationFileStoreArgs'] application_file_stores: The file store configuration of the application.  
               The application_file_store structure is documented below.
        :param _builtins.str application_icon_url: The icon URL of the application.
        :param _builtins.str application_source: The source of the application.
               + **CUSTOM**
               + **SYSTEM**
               + **MARKET**
        :param _builtins.str authorization_type: The authorization type of the application.
               + **ALL_USER**
               + **ASSIGN_USER**
        :param _builtins.str catalog: The catalog name of the application.
        :param _builtins.str catalog_id: The catalog ID of the application.
        :param _builtins.str create_time: The creation time of the application, in UTC format.
        :param _builtins.str description: The description of the application.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str install_command: The installation command of the application.
        :param _builtins.str install_info: The installation information of the application.
        :param _builtins.str install_type: The installation type of the application.
               + **QUIET_INSTALL**
               + **UNZIP_INSTALL**
               + **GUI_INSTALL**
        :param _builtins.str name: Specifies the application name to be queried and supports fuzzy matching.
        :param _builtins.str status: The status of the application.
               + **NORMAL**
               + **FORBIDDEN**
        :param _builtins.str support_os: The supported operating system of the application.
               + **Linux**
               + **Windows**
               + **Other**
        :param _builtins.str uninstall_command: The uninstallation command of the application.
        :param _builtins.str version: The version of the application.
        """
        pulumi.set(__self__, "application_file_stores", application_file_stores)
        pulumi.set(__self__, "application_icon_url", application_icon_url)
        pulumi.set(__self__, "application_source", application_source)
        pulumi.set(__self__, "authorization_type", authorization_type)
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "install_command", install_command)
        pulumi.set(__self__, "install_info", install_info)
        pulumi.set(__self__, "install_type", install_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_os", support_os)
        pulumi.set(__self__, "uninstall_command", uninstall_command)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="applicationFileStores")
    def application_file_stores(self) -> Sequence['outputs.GetApplicationsApplicationApplicationFileStoreResult']:
        """
        The file store configuration of the application.  
        The application_file_store structure is documented below.
        """
        return pulumi.get(self, "application_file_stores")

    @_builtins.property
    @pulumi.getter(name="applicationIconUrl")
    def application_icon_url(self) -> _builtins.str:
        """
        The icon URL of the application.
        """
        return pulumi.get(self, "application_icon_url")

    @_builtins.property
    @pulumi.getter(name="applicationSource")
    def application_source(self) -> _builtins.str:
        """
        The source of the application.
        + **CUSTOM**
        + **SYSTEM**
        + **MARKET**
        """
        return pulumi.get(self, "application_source")

    @_builtins.property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> _builtins.str:
        """
        The authorization type of the application.
        + **ALL_USER**
        + **ASSIGN_USER**
        """
        return pulumi.get(self, "authorization_type")

    @_builtins.property
    @pulumi.getter
    def catalog(self) -> _builtins.str:
        """
        The catalog name of the application.
        """
        return pulumi.get(self, "catalog")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        """
        The catalog ID of the application.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the application, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> _builtins.str:
        """
        The installation command of the application.
        """
        return pulumi.get(self, "install_command")

    @_builtins.property
    @pulumi.getter(name="installInfo")
    def install_info(self) -> _builtins.str:
        """
        The installation information of the application.
        """
        return pulumi.get(self, "install_info")

    @_builtins.property
    @pulumi.getter(name="installType")
    def install_type(self) -> _builtins.str:
        """
        The installation type of the application.
        + **QUIET_INSTALL**
        + **UNZIP_INSTALL**
        + **GUI_INSTALL**
        """
        return pulumi.get(self, "install_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the application name to be queried and supports fuzzy matching.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the application.
        + **NORMAL**
        + **FORBIDDEN**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> _builtins.str:
        """
        The supported operating system of the application.
        + **Linux**
        + **Windows**
        + **Other**
        """
        return pulumi.get(self, "support_os")

    @_builtins.property
    @pulumi.getter(name="uninstallCommand")
    def uninstall_command(self) -> _builtins.str:
        """
        The uninstallation command of the application.
        """
        return pulumi.get(self, "uninstall_command")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the application.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplicationsApplicationApplicationFileStoreResult(dict):
    def __init__(__self__, *,
                 bucket_stores: Sequence['outputs.GetApplicationsApplicationApplicationFileStoreBucketStoreResult'],
                 file_link: _builtins.str,
                 store_type: _builtins.str):
        """
        :param Sequence['GetApplicationsApplicationApplicationFileStoreBucketStoreArgs'] bucket_stores: The OBS bucket store configuration.  
               The bucket_store structure is documented below.
        :param _builtins.str file_link: The external file link.
        :param _builtins.str store_type: The store type of the application file.
               + **OBS**
               + **LINK**
        """
        pulumi.set(__self__, "bucket_stores", bucket_stores)
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "store_type", store_type)

    @_builtins.property
    @pulumi.getter(name="bucketStores")
    def bucket_stores(self) -> Sequence['outputs.GetApplicationsApplicationApplicationFileStoreBucketStoreResult']:
        """
        The OBS bucket store configuration.  
        The bucket_store structure is documented below.
        """
        return pulumi.get(self, "bucket_stores")

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        The external file link.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="storeType")
    def store_type(self) -> _builtins.str:
        """
        The store type of the application file.
        + **OBS**
        + **LINK**
        """
        return pulumi.get(self, "store_type")


@pulumi.output_type
class GetApplicationsApplicationApplicationFileStoreBucketStoreResult(dict):
    def __init__(__self__, *,
                 bucket_file_path: _builtins.str,
                 bucket_name: _builtins.str):
        """
        :param _builtins.str bucket_file_path: The file path in the OBS bucket.
        :param _builtins.str bucket_name: The name of the OBS bucket.
        """
        pulumi.set(__self__, "bucket_file_path", bucket_file_path)
        pulumi.set(__self__, "bucket_name", bucket_name)

    @_builtins.property
    @pulumi.getter(name="bucketFilePath")
    def bucket_file_path(self) -> _builtins.str:
        """
        The file path in the OBS bucket.
        """
        return pulumi.get(self, "bucket_file_path")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        The name of the OBS bucket.
        """
        return pulumi.get(self, "bucket_name")


@pulumi.output_type
class GetDesktopConnectionsDesktopConnectionResult(dict):
    def __init__(__self__, *,
                 attach_users: Sequence['outputs.GetDesktopConnectionsDesktopConnectionAttachUserResult'],
                 connect_status: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param Sequence['GetDesktopConnectionsDesktopConnectionAttachUserArgs'] attach_users: The list of users or user groups attached to the desktop.  
               The attach_users structure is documented below.
        :param _builtins.str connect_status: Specifies the connection status of the desktop.  
               The valid values are as follows:
               + **UNREGISTER**: The desktop is not registered or powered off.
               + **REGISTERED**: The desktop is registered and waiting for user connection.
               + **CONNECTED**: The user has successfully connected and is using the desktop.
               + **DISCONNECTED**: The desktop is disconnected from the client.
        :param _builtins.str id: The ID of the user or user group.
        :param _builtins.str name: The name of the user or user group.
        """
        pulumi.set(__self__, "attach_users", attach_users)
        pulumi.set(__self__, "connect_status", connect_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="attachUsers")
    def attach_users(self) -> Sequence['outputs.GetDesktopConnectionsDesktopConnectionAttachUserResult']:
        """
        The list of users or user groups attached to the desktop.  
        The attach_users structure is documented below.
        """
        return pulumi.get(self, "attach_users")

    @_builtins.property
    @pulumi.getter(name="connectStatus")
    def connect_status(self) -> _builtins.str:
        """
        Specifies the connection status of the desktop.  
        The valid values are as follows:
        + **UNREGISTER**: The desktop is not registered or powered off.
        + **REGISTERED**: The desktop is registered and waiting for user connection.
        + **CONNECTED**: The user has successfully connected and is using the desktop.
        + **DISCONNECTED**: The desktop is disconnected from the client.
        """
        return pulumi.get(self, "connect_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the user or user group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the user or user group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDesktopConnectionsDesktopConnectionAttachUserResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 user_group: _builtins.str):
        """
        :param _builtins.str id: The ID of the user or user group.
        :param _builtins.str name: The name of the user or user group.
        :param _builtins.str type: The type of the user or user group.  
               The valid values are as follows:
               + **USER**: User.
               + **GROUP**: User group.
        :param _builtins.str user_group: The user group of the desktop user.  
               The valid values are as follows:
               + **sudo**: Linux administrator group.
               + **default**: Linux default user group.
               + **administrators**: Windows administrator group.
               + **users**: Windows standard user group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_group", user_group)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the user or user group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the user or user group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the user or user group.  
        The valid values are as follows:
        + **USER**: User.
        + **GROUP**: User group.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> _builtins.str:
        """
        The user group of the desktop user.  
        The valid values are as follows:
        + **sudo**: Linux administrator group.
        + **default**: Linux default user group.
        + **administrators**: Windows administrator group.
        + **users**: Windows standard user group.
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolResult(dict):
    def __init__(__self__, *,
                 autoscale_policies: Sequence['outputs.GetDesktopPoolsDesktopPoolAutoscalePolicyResult'],
                 availability_zone: _builtins.str,
                 charging_mode: _builtins.str,
                 created_time: _builtins.str,
                 data_volumes: Sequence['outputs.GetDesktopPoolsDesktopPoolDataVolumeResult'],
                 description: _builtins.str,
                 desktop_count: _builtins.int,
                 desktop_name_policy_id: _builtins.str,
                 desktop_used: _builtins.int,
                 disconnected_retention_period: _builtins.int,
                 enable_autoscale: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 image_name: _builtins.str,
                 image_os_platform: _builtins.str,
                 image_os_type: _builtins.str,
                 image_os_version: _builtins.str,
                 image_product_code: _builtins.str,
                 in_maintenance_mode: _builtins.bool,
                 name: _builtins.str,
                 products: Sequence['outputs.GetDesktopPoolsDesktopPoolProductResult'],
                 root_volumes: Sequence['outputs.GetDesktopPoolsDesktopPoolRootVolumeResult'],
                 security_groups: Sequence['outputs.GetDesktopPoolsDesktopPoolSecurityGroupResult'],
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetDesktopPoolsDesktopPoolAutoscalePolicyArgs'] autoscale_policies: The auto scaling policy of the desktop pool.  
               The autoscale_policy structure is documented below.
        :param _builtins.str availability_zone: The availability zone of the desktop pool.
        :param _builtins.str charging_mode: The charging mode of the desktop pool.
        :param _builtins.str created_time: The creation time of the desktop pool.
        :param Sequence['GetDesktopPoolsDesktopPoolDataVolumeArgs'] data_volumes: The data volumes information of the desktop pool.  
               The data_volumes structure is documented below.
        :param _builtins.str description: The description of the desktop pool.
        :param _builtins.int desktop_count: The total number of desktops in the pool.
        :param _builtins.str desktop_name_policy_id: The desktop name policy ID.
        :param _builtins.int desktop_used: The number of used desktops in the pool.
        :param _builtins.int disconnected_retention_period: The disconnected retention period in minutes.
        :param _builtins.bool enable_autoscale: Whether auto scaling is enabled.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the desktop pool belongs.  
               For enterprise users, if omitted, all enterprise project resources will be queried.
        :param _builtins.str id: The security group ID.
        :param _builtins.str image_id: The image ID used by the desktop pool.
        :param _builtins.str image_name: The image name used by the desktop pool.
        :param _builtins.str image_os_platform: The OS platform of the image.
        :param _builtins.str image_os_type: The OS type of the image.
        :param _builtins.str image_os_version: The OS version of the image.
        :param _builtins.str image_product_code: The product code of the image.
        :param _builtins.bool in_maintenance_mode: Specifies whether the desktop pool is in maintenance mode.
               Defaults to **true**.
        :param _builtins.str name: Specifies the name of the desktop pool.
        :param Sequence['GetDesktopPoolsDesktopPoolProductArgs'] products: The product information of the desktop pool.  
               The product structure is documented below.
        :param Sequence['GetDesktopPoolsDesktopPoolRootVolumeArgs'] root_volumes: The root volume information of the desktop pool.  
               The root_volume structure is documented below.
        :param Sequence['GetDesktopPoolsDesktopPoolSecurityGroupArgs'] security_groups: The security groups of the desktop pool.  
               The security_groups structure is documented below.
        :param _builtins.str status: The status of the desktop pool.
        :param _builtins.str subnet_id: The subnet ID of the desktop pool.
        :param _builtins.str type: Specifies the type of the desktop pool.  
               The valid values are as follows:
               + **DYNAMIC**
               + **STATIC**
        """
        pulumi.set(__self__, "autoscale_policies", autoscale_policies)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "desktop_count", desktop_count)
        pulumi.set(__self__, "desktop_name_policy_id", desktop_name_policy_id)
        pulumi.set(__self__, "desktop_used", desktop_used)
        pulumi.set(__self__, "disconnected_retention_period", disconnected_retention_period)
        pulumi.set(__self__, "enable_autoscale", enable_autoscale)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_os_platform", image_os_platform)
        pulumi.set(__self__, "image_os_type", image_os_type)
        pulumi.set(__self__, "image_os_version", image_os_version)
        pulumi.set(__self__, "image_product_code", image_product_code)
        pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "root_volumes", root_volumes)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="autoscalePolicies")
    def autoscale_policies(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolAutoscalePolicyResult']:
        """
        The auto scaling policy of the desktop pool.  
        The autoscale_policy structure is documented below.
        """
        return pulumi.get(self, "autoscale_policies")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone of the desktop pool.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The charging mode of the desktop pool.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The creation time of the desktop pool.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolDataVolumeResult']:
        """
        The data volumes information of the desktop pool.  
        The data_volumes structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the desktop pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="desktopCount")
    def desktop_count(self) -> _builtins.int:
        """
        The total number of desktops in the pool.
        """
        return pulumi.get(self, "desktop_count")

    @_builtins.property
    @pulumi.getter(name="desktopNamePolicyId")
    def desktop_name_policy_id(self) -> _builtins.str:
        """
        The desktop name policy ID.
        """
        return pulumi.get(self, "desktop_name_policy_id")

    @_builtins.property
    @pulumi.getter(name="desktopUsed")
    def desktop_used(self) -> _builtins.int:
        """
        The number of used desktops in the pool.
        """
        return pulumi.get(self, "desktop_used")

    @_builtins.property
    @pulumi.getter(name="disconnectedRetentionPeriod")
    def disconnected_retention_period(self) -> _builtins.int:
        """
        The disconnected retention period in minutes.
        """
        return pulumi.get(self, "disconnected_retention_period")

    @_builtins.property
    @pulumi.getter(name="enableAutoscale")
    def enable_autoscale(self) -> _builtins.bool:
        """
        Whether auto scaling is enabled.
        """
        return pulumi.get(self, "enable_autoscale")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID to which the desktop pool belongs.  
        For enterprise users, if omitted, all enterprise project resources will be queried.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image ID used by the desktop pool.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        The image name used by the desktop pool.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageOsPlatform")
    def image_os_platform(self) -> _builtins.str:
        """
        The OS platform of the image.
        """
        return pulumi.get(self, "image_os_platform")

    @_builtins.property
    @pulumi.getter(name="imageOsType")
    def image_os_type(self) -> _builtins.str:
        """
        The OS type of the image.
        """
        return pulumi.get(self, "image_os_type")

    @_builtins.property
    @pulumi.getter(name="imageOsVersion")
    def image_os_version(self) -> _builtins.str:
        """
        The OS version of the image.
        """
        return pulumi.get(self, "image_os_version")

    @_builtins.property
    @pulumi.getter(name="imageProductCode")
    def image_product_code(self) -> _builtins.str:
        """
        The product code of the image.
        """
        return pulumi.get(self, "image_product_code")

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> _builtins.bool:
        """
        Specifies whether the desktop pool is in maintenance mode.
        Defaults to **true**.
        """
        return pulumi.get(self, "in_maintenance_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desktop pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolProductResult']:
        """
        The product information of the desktop pool.  
        The product structure is documented below.
        """
        return pulumi.get(self, "products")

    @_builtins.property
    @pulumi.getter(name="rootVolumes")
    def root_volumes(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolRootVolumeResult']:
        """
        The root volume information of the desktop pool.  
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volumes")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetDesktopPoolsDesktopPoolSecurityGroupResult']:
        """
        The security groups of the desktop pool.  
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the desktop pool.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID of the desktop pool.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the desktop pool.  
        The valid values are as follows:
        + **DYNAMIC**
        + **STATIC**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolAutoscalePolicyResult(dict):
    def __init__(__self__, *,
                 autoscale_type: _builtins.str,
                 max_auto_created: _builtins.int,
                 min_idle: _builtins.int,
                 once_auto_created: _builtins.int):
        """
        :param _builtins.str autoscale_type: The auto scaling type.
        :param _builtins.int max_auto_created: The maximum number of auto-created desktops.
        :param _builtins.int min_idle: The minimum number of idle desktops.
        :param _builtins.int once_auto_created: The number of desktops will create in one auto scaling operation.
        """
        pulumi.set(__self__, "autoscale_type", autoscale_type)
        pulumi.set(__self__, "max_auto_created", max_auto_created)
        pulumi.set(__self__, "min_idle", min_idle)
        pulumi.set(__self__, "once_auto_created", once_auto_created)

    @_builtins.property
    @pulumi.getter(name="autoscaleType")
    def autoscale_type(self) -> _builtins.str:
        """
        The auto scaling type.
        """
        return pulumi.get(self, "autoscale_type")

    @_builtins.property
    @pulumi.getter(name="maxAutoCreated")
    def max_auto_created(self) -> _builtins.int:
        """
        The maximum number of auto-created desktops.
        """
        return pulumi.get(self, "max_auto_created")

    @_builtins.property
    @pulumi.getter(name="minIdle")
    def min_idle(self) -> _builtins.int:
        """
        The minimum number of idle desktops.
        """
        return pulumi.get(self, "min_idle")

    @_builtins.property
    @pulumi.getter(name="onceAutoCreated")
    def once_auto_created(self) -> _builtins.int:
        """
        The number of desktops will create in one auto scaling operation.
        """
        return pulumi.get(self, "once_auto_created")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 resource_spec_code: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str id: The security group ID.
        :param _builtins.str resource_spec_code: The resource specification code.
        :param _builtins.int size: The volume size in GB.
        :param _builtins.str type: Specifies the type of the desktop pool.  
               The valid values are as follows:
               + **DYNAMIC**
               + **STATIC**
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The resource specification code.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The volume size in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the desktop pool.  
        The valid values are as follows:
        + **DYNAMIC**
        + **STATIC**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolProductResult(dict):
    def __init__(__self__, *,
                 charge_mode: _builtins.str,
                 cpu: _builtins.str,
                 descriptions: _builtins.str,
                 flavor_id: _builtins.str,
                 memory: _builtins.str,
                 product_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str charge_mode: The charging mode.
        :param _builtins.str cpu: The CPU specification.
        :param _builtins.str descriptions: The product description.
        :param _builtins.str flavor_id: The flavor ID.
        :param _builtins.str memory: The memory specification.
        :param _builtins.str product_id: The product ID.
        :param _builtins.str type: Specifies the type of the desktop pool.  
               The valid values are as follows:
               + **DYNAMIC**
               + **STATIC**
        """
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charging mode.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        The CPU specification.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> _builtins.str:
        """
        The product description.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The flavor ID.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory specification.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the desktop pool.  
        The valid values are as follows:
        + **DYNAMIC**
        + **STATIC**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolRootVolumeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 resource_spec_code: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str id: The security group ID.
        :param _builtins.str resource_spec_code: The resource specification code.
        :param _builtins.int size: The volume size in GB.
        :param _builtins.str type: Specifies the type of the desktop pool.  
               The valid values are as follows:
               + **DYNAMIC**
               + **STATIC**
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The resource specification code.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The volume size in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the desktop pool.  
        The valid values are as follows:
        + **DYNAMIC**
        + **STATIC**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDesktopPoolsDesktopPoolSecurityGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The security group ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDesktopRemoteConsoleRemoteConsoleResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 type: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str protocol: The login protocol of console.
        :param _builtins.str type: The login type of console.
        :param _builtins.str url: The remote login URL of console.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The login protocol of console.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The login type of console.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The remote login URL of console.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDesktopSysprepSysprepInfoResult(dict):
    def __init__(__self__, *,
                 support_create_image: _builtins.bool,
                 sysprep_version: _builtins.str):
        """
        :param _builtins.bool support_create_image: Whether the desktop supports creating image.
        :param _builtins.str sysprep_version: The sysprep version of the desktop.
        """
        pulumi.set(__self__, "support_create_image", support_create_image)
        pulumi.set(__self__, "sysprep_version", sysprep_version)

    @_builtins.property
    @pulumi.getter(name="supportCreateImage")
    def support_create_image(self) -> _builtins.bool:
        """
        Whether the desktop supports creating image.
        """
        return pulumi.get(self, "support_create_image")

    @_builtins.property
    @pulumi.getter(name="sysprepVersion")
    def sysprep_version(self) -> _builtins.str:
        """
        The sysprep version of the desktop.
        """
        return pulumi.get(self, "sysprep_version")


@pulumi.output_type
class GetDesktopTagsFilterDesktopResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetDesktopTagsFilterDesktopTagResult']):
        """
        :param _builtins.str resource_detail: The detail of the desktop.
        :param _builtins.str resource_id: The ID of the desktop.
        :param _builtins.str resource_name: The name of the desktop.
        :param Sequence['GetDesktopTagsFilterDesktopTagArgs'] tags: Specifies the list of tags to filter desktops.  
               Resources must contain all specified tags.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the desktop.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the desktop.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the desktop.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDesktopTagsFilterDesktopTagResult']:
        """
        Specifies the list of tags to filter desktops.  
        Resources must contain all specified tags.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDesktopTagsFilterDesktopTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param _builtins.str value: Specifies the value of desktop property.  
               When the key is resource_name, it is a fuzzy search.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of desktop property.  
        When the key is resource_name, it is a fuzzy search.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDesktopTagsFilterMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param _builtins.str value: Specifies the value of desktop property.  
               When the key is resource_name, it is a fuzzy search.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of desktop property.  
        When the key is resource_name, it is a fuzzy search.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDesktopTagsFilterNotTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param Sequence[_builtins.str] values: Specifies the list of tag values that matched corresponding key.
               
               <a name="workspace_desktop_filter_match"></a>
               The `match` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of tag values that matched corresponding key.

        <a name="workspace_desktop_filter_match"></a>
        The `match` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDesktopTagsFilterNotTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param Sequence[_builtins.str] values: Specifies the list of tag values that matched corresponding key.
               
               <a name="workspace_desktop_filter_match"></a>
               The `match` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of tag values that matched corresponding key.

        <a name="workspace_desktop_filter_match"></a>
        The `match` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDesktopTagsFilterTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param Sequence[_builtins.str] values: Specifies the list of tag values that matched corresponding key.
               
               <a name="workspace_desktop_filter_match"></a>
               The `match` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of tag values that matched corresponding key.

        <a name="workspace_desktop_filter_match"></a>
        The `match` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDesktopTagsFilterTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the name of desktop property.
        :param Sequence[_builtins.str] values: Specifies the list of tag values that matched corresponding key.
               
               <a name="workspace_desktop_filter_match"></a>
               The `match` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of desktop property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of tag values that matched corresponding key.

        <a name="workspace_desktop_filter_match"></a>
        The `match` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDesktopTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag.
        :param _builtins.str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDesktopsDesktopResult(dict):
    def __init__(__self__, *,
                 attach_state: _builtins.str,
                 attach_user_infos: Sequence['outputs.GetDesktopsDesktopAttachUserInfoResult'],
                 availability_zone: _builtins.str,
                 created_at: _builtins.str,
                 data_volumes: Sequence['outputs.GetDesktopsDesktopDataVolumeResult'],
                 enterprise_project_id: _builtins.str,
                 flavor_id: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 in_maintenance_mode: _builtins.bool,
                 internet_mode: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 is_support_internet: _builtins.bool,
                 join_domain: _builtins.str,
                 name: _builtins.str,
                 ou_name: _builtins.str,
                 ou_version: _builtins.str,
                 product_id: _builtins.str,
                 root_volumes: Sequence['outputs.GetDesktopsDesktopRootVolumeResult'],
                 site_name: _builtins.str,
                 site_type: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str):
        """
        :param _builtins.str attach_state: The assignment status of the desktop.
        :param Sequence['GetDesktopsDesktopAttachUserInfoArgs'] attach_user_infos: The list of user information assigned to the desktop.
               The attach_user_infos structure is documented below.
        :param _builtins.str availability_zone: The availability zone to which the desktop belongs.
        :param _builtins.str created_at: The creation time of the volume.
        :param Sequence['GetDesktopsDesktopDataVolumeArgs'] data_volumes: The data volumes to which the desktop belongs.
               The data_volume structure is documented below.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the desktops.
        :param _builtins.str flavor_id: The flavor ID used by the desktop.
        :param _builtins.str id: The unique identification ID of the disk.
        :param _builtins.str image_id: Specifies the image ID of the desktops.
        :param _builtins.bool in_maintenance_mode: Specify whether to query desktops by maintenance mode.
               The value can be **true** and **false**.
        :param _builtins.str internet_mode: The access mode of desktop.
               The valid values are as follows: **NAT**, **EIP**, **BOTH**.
        :param Sequence[_builtins.str] ip_addresses: The list of fixed IP addresses.
        :param _builtins.bool is_support_internet: Whether the desktop is associated with an EIP.
        :param _builtins.str join_domain: Whether Connect to AD domain when the desktop was created. The valid values are as follows:
               + **0**: Indicates AD domain enabled.
               + **1**: Indicates AD domain not enabled.
        :param _builtins.str name: Specifies the name of the desktop.
        :param _builtins.str ou_name: The ou name used by the desktop.
        :param _builtins.str ou_version: The ou version used by the desktop.
        :param _builtins.str product_id: The product ID used by the desktop.
        :param Sequence['GetDesktopsDesktopRootVolumeArgs'] root_volumes: The root volume to which the desktop belongs.
               The root_volume structure is documented below.
        :param _builtins.str site_name: The site name of desktop.
        :param _builtins.str site_type: The site type of desktop.
        :param _builtins.str status: Specifies the status of the desktops.
               The valid values are as follows: **ACTIVE**, **SHUTOFF**, **ERROR**.
        :param _builtins.str subnet_id: Specifies the subnet ID of desktops.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs used to query the desktops.
        :param _builtins.str type: The volume type.
        """
        pulumi.set(__self__, "attach_state", attach_state)
        pulumi.set(__self__, "attach_user_infos", attach_user_infos)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        pulumi.set(__self__, "internet_mode", internet_mode)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "is_support_internet", is_support_internet)
        pulumi.set(__self__, "join_domain", join_domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ou_name", ou_name)
        pulumi.set(__self__, "ou_version", ou_version)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "root_volumes", root_volumes)
        pulumi.set(__self__, "site_name", site_name)
        pulumi.set(__self__, "site_type", site_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="attachState")
    def attach_state(self) -> _builtins.str:
        """
        The assignment status of the desktop.
        """
        return pulumi.get(self, "attach_state")

    @_builtins.property
    @pulumi.getter(name="attachUserInfos")
    def attach_user_infos(self) -> Sequence['outputs.GetDesktopsDesktopAttachUserInfoResult']:
        """
        The list of user information assigned to the desktop.
        The attach_user_infos structure is documented below.
        """
        return pulumi.get(self, "attach_user_infos")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone to which the desktop belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the volume.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetDesktopsDesktopDataVolumeResult']:
        """
        The data volumes to which the desktop belongs.
        The data_volume structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the desktops.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The flavor ID used by the desktop.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identification ID of the disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        Specifies the image ID of the desktops.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> _builtins.bool:
        """
        Specify whether to query desktops by maintenance mode.
        The value can be **true** and **false**.
        """
        return pulumi.get(self, "in_maintenance_mode")

    @_builtins.property
    @pulumi.getter(name="internetMode")
    def internet_mode(self) -> _builtins.str:
        """
        The access mode of desktop.
        The valid values are as follows: **NAT**, **EIP**, **BOTH**.
        """
        return pulumi.get(self, "internet_mode")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of fixed IP addresses.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="isSupportInternet")
    def is_support_internet(self) -> _builtins.bool:
        """
        Whether the desktop is associated with an EIP.
        """
        return pulumi.get(self, "is_support_internet")

    @_builtins.property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> _builtins.str:
        """
        Whether Connect to AD domain when the desktop was created. The valid values are as follows:
        + **0**: Indicates AD domain enabled.
        + **1**: Indicates AD domain not enabled.
        """
        return pulumi.get(self, "join_domain")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desktop.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> _builtins.str:
        """
        The ou name used by the desktop.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter(name="ouVersion")
    def ou_version(self) -> _builtins.str:
        """
        The ou version used by the desktop.
        """
        return pulumi.get(self, "ou_version")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID used by the desktop.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="rootVolumes")
    def root_volumes(self) -> Sequence['outputs.GetDesktopsDesktopRootVolumeResult']:
        """
        The root volume to which the desktop belongs.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volumes")

    @_builtins.property
    @pulumi.getter(name="siteName")
    def site_name(self) -> _builtins.str:
        """
        The site name of desktop.
        """
        return pulumi.get(self, "site_name")

    @_builtins.property
    @pulumi.getter(name="siteType")
    def site_type(self) -> _builtins.str:
        """
        The site type of desktop.
        """
        return pulumi.get(self, "site_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the desktops.
        The valid values are as follows: **ACTIVE**, **SHUTOFF**, **ERROR**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the subnet ID of desktops.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs used to query the desktops.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The volume type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDesktopsDesktopAttachUserInfoResult(dict):
    def __init__(__self__, *,
                 user_group: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str user_group: The user group to which the desktop belongs.
        :param _builtins.str user_name: Specifies the user name to which the desktops belongs.
        """
        pulumi.set(__self__, "user_group", user_group)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> _builtins.str:
        """
        The user group to which the desktop belongs.
        """
        return pulumi.get(self, "user_group")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the user name to which the desktops belongs.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDesktopsDesktopDataVolumeResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 device: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the volume.
        :param _builtins.str device: The device of the volume.
        :param _builtins.str id: The unique identification ID of the disk.
        :param _builtins.str name: Specifies the name of the desktop.
        :param _builtins.int size: The volume size.
        :param _builtins.str type: The volume type.
        :param _builtins.str volume_id: The volume ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the volume.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device of the volume.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identification ID of the disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desktop.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The volume size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The volume type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetDesktopsDesktopRootVolumeResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 device: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the volume.
        :param _builtins.str device: The device of the volume.
        :param _builtins.str id: The unique identification ID of the disk.
        :param _builtins.str name: Specifies the name of the desktop.
        :param _builtins.int size: The volume size.
        :param _builtins.str type: The volume type.
        :param _builtins.str volume_id: The volume ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the volume.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device of the volume.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identification ID of the disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desktop.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The volume size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The volume type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 architecture: _builtins.str,
                 charging_mode: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 is_gpu: _builtins.bool,
                 memory: _builtins.int,
                 status: _builtins.str,
                 system_disk_size: _builtins.str,
                 system_disk_type: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.str architecture: The Workspace flavor architecture, currently supporting arm and x86.
               The valid values are as follows:
               + **arm**: The Workspace flavor architecture is arm.
               + **x86**: The Workspace flavor architecture is x86.
        :param _builtins.str charging_mode: Periodic package identification of the Workspace flavor.
               The valid values are as follows:
               + **postPaid**: Indicates on-demand billing of the Workspace flavor.
        :param _builtins.str description: Description of the Workspace flavor.
        :param _builtins.str id: Flavor ID.
        :param _builtins.bool is_gpu: The Workspace flavor is a specification of GPU type or not.
        :param _builtins.int memory: Specifies the memory size of the Workspace flavors, in GB.
        :param _builtins.str status: The status of the Workspace flavor.  
               The valid values are as follows:
               + **normal**: The status is normal of the Workspace flavor.
        :param _builtins.str system_disk_size: The system disk size of the Workspace flavor, in GB.
        :param _builtins.str system_disk_type: The system disk type of the Workspace flavor.
        :param _builtins.str type: The type of the Workspace flavor.
        :param _builtins.int vcpus: Specifies CPU specification of the Workspace flavors.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_gpu", is_gpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The Workspace flavor architecture, currently supporting arm and x86.
        The valid values are as follows:
        + **arm**: The Workspace flavor architecture is arm.
        + **x86**: The Workspace flavor architecture is x86.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        Periodic package identification of the Workspace flavor.
        The valid values are as follows:
        + **postPaid**: Indicates on-demand billing of the Workspace flavor.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the Workspace flavor.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Flavor ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isGpu")
    def is_gpu(self) -> _builtins.bool:
        """
        The Workspace flavor is a specification of GPU type or not.
        """
        return pulumi.get(self, "is_gpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Specifies the memory size of the Workspace flavors, in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the Workspace flavor.  
        The valid values are as follows:
        + **normal**: The status is normal of the Workspace flavor.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.str:
        """
        The system disk size of the Workspace flavor, in GB.
        """
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> _builtins.str:
        """
        The system disk type of the Workspace flavor.
        """
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the Workspace flavor.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies CPU specification of the Workspace flavors.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetHourPackagesHourPackageResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 descriptions: Sequence['outputs.GetHourPackagesHourPackageDescriptionResult'],
                 desktop_resource_spec_code: _builtins.str,
                 domain_ids: Sequence[_builtins.str],
                 package_duration: _builtins.int,
                 resource_spec_code: _builtins.str,
                 resource_type: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str cloud_service_type: The type of cloud service.
        :param Sequence['GetHourPackagesHourPackageDescriptionArgs'] descriptions: The descriptions of hour package.  
               The descriptions structure is documented below.
        :param _builtins.str desktop_resource_spec_code: Specifies the specification code of desktop resource to be queried.
        :param Sequence[_builtins.str] domain_ids: The list of domain IDs supported by the hour package.
        :param _builtins.int package_duration: The duration of hour package.
        :param _builtins.str resource_spec_code: Specifies the specification code of hour package to be queried.
        :param _builtins.str resource_type: The type of resource.
        :param _builtins.str status: The status of hour package.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "desktop_resource_spec_code", desktop_resource_spec_code)
        pulumi.set(__self__, "domain_ids", domain_ids)
        pulumi.set(__self__, "package_duration", package_duration)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The type of cloud service.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Sequence['outputs.GetHourPackagesHourPackageDescriptionResult']:
        """
        The descriptions of hour package.  
        The descriptions structure is documented below.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="desktopResourceSpecCode")
    def desktop_resource_spec_code(self) -> _builtins.str:
        """
        Specifies the specification code of desktop resource to be queried.
        """
        return pulumi.get(self, "desktop_resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs supported by the hour package.
        """
        return pulumi.get(self, "domain_ids")

    @_builtins.property
    @pulumi.getter(name="packageDuration")
    def package_duration(self) -> _builtins.int:
        """
        The duration of hour package.
        """
        return pulumi.get(self, "package_duration")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        Specifies the specification code of hour package to be queried.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of hour package.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetHourPackagesHourPackageDescriptionResult(dict):
    def __init__(__self__, *,
                 en_us: _builtins.str,
                 zh_cn: _builtins.str):
        """
        :param _builtins.str en_us: The English description of hour package.
        :param _builtins.str zh_cn: The Chinese description of hour package.
        """
        pulumi.set(__self__, "en_us", en_us)
        pulumi.set(__self__, "zh_cn", zh_cn)

    @_builtins.property
    @pulumi.getter(name="enUs")
    def en_us(self) -> _builtins.str:
        """
        The English description of hour package.
        """
        return pulumi.get(self, "en_us")

    @_builtins.property
    @pulumi.getter(name="zhCn")
    def zh_cn(self) -> _builtins.str:
        """
        The Chinese description of hour package.
        """
        return pulumi.get(self, "zh_cn")


@pulumi.output_type
class GetPolicyGroupsPolicyGroupResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 policies: Sequence['outputs.GetPolicyGroupsPolicyGroupPolicyResult'],
                 policy_group_id: _builtins.str,
                 policy_group_name: _builtins.str,
                 priority: _builtins.int,
                 targets: Sequence['outputs.GetPolicyGroupsPolicyGroupTargetResult'],
                 update_time: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the policy group.  
               The description support fuzzy match.
        :param Sequence['GetPolicyGroupsPolicyGroupPolicyArgs'] policies: The list of policy configurations.  
               The policies structure is documented below.
        :param _builtins.str policy_group_id: Specifies the ID of the policy group.
        :param _builtins.str policy_group_name: Specifies the name of the policy group.  
               The name support fuzzy match.
        :param _builtins.int priority: Specifies the priority of the policy group.  
               Defaults to **0**.
        :param Sequence['GetPolicyGroupsPolicyGroupTargetArgs'] targets: The list of target configurations.  
               The targets structure is documented below.
        :param _builtins.str update_time: The update time of the policy group, in RFC3339 format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "policy_group_name", policy_group_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the policy group.  
        The description support fuzzy match.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetPolicyGroupsPolicyGroupPolicyResult']:
        """
        The list of policy configurations.  
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the policy group.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="policyGroupName")
    def policy_group_name(self) -> _builtins.str:
        """
        Specifies the name of the policy group.  
        The name support fuzzy match.
        """
        return pulumi.get(self, "policy_group_name")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Specifies the priority of the policy group.  
        Defaults to **0**.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetPolicyGroupsPolicyGroupTargetResult']:
        """
        The list of target configurations.  
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time of the policy group, in RFC3339 format.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetPolicyGroupsPolicyGroupPolicyResult(dict):
    def __init__(__self__, *,
                 audio: _builtins.str,
                 client: _builtins.str,
                 custom: _builtins.str,
                 display: _builtins.str,
                 file_and_clipboard: _builtins.str,
                 keyboard_mouse: _builtins.str,
                 peripherals: _builtins.str,
                 personalized_data_mgmt: _builtins.str,
                 record_audit: _builtins.str,
                 seamless: _builtins.str,
                 session: _builtins.str,
                 virtual_channel: _builtins.str,
                 watermark: _builtins.str):
        """
        :param _builtins.str audio: The audio policies, in JSON format.
        :param _builtins.str client: The client policies, in JSON format.
        :param _builtins.str custom: The custom policies, in JSON format.
        :param _builtins.str display: The display policies, in JSON format.
        :param _builtins.str file_and_clipboard: The file and clipboard policies, in JSON format.
        :param _builtins.str keyboard_mouse: The keyboard and mouse policies, in JSON format.
        :param _builtins.str peripherals: The peripheral device policies, in JSON format.
        :param _builtins.str personalized_data_mgmt: The personalized data management policies, in JSON format.
        :param _builtins.str record_audit: The screen recording audit policies, in JSON format.
        :param _builtins.str seamless: The general audio and video bypass policies, in JSON format.
        :param _builtins.str session: The session policies, in JSON format.
        :param _builtins.str virtual_channel: The virtual channel policies, in JSON format.
        :param _builtins.str watermark: The watermark policies, in JSON format.
        """
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "client", client)
        pulumi.set(__self__, "custom", custom)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "file_and_clipboard", file_and_clipboard)
        pulumi.set(__self__, "keyboard_mouse", keyboard_mouse)
        pulumi.set(__self__, "peripherals", peripherals)
        pulumi.set(__self__, "personalized_data_mgmt", personalized_data_mgmt)
        pulumi.set(__self__, "record_audit", record_audit)
        pulumi.set(__self__, "seamless", seamless)
        pulumi.set(__self__, "session", session)
        pulumi.set(__self__, "virtual_channel", virtual_channel)
        pulumi.set(__self__, "watermark", watermark)

    @_builtins.property
    @pulumi.getter
    def audio(self) -> _builtins.str:
        """
        The audio policies, in JSON format.
        """
        return pulumi.get(self, "audio")

    @_builtins.property
    @pulumi.getter
    def client(self) -> _builtins.str:
        """
        The client policies, in JSON format.
        """
        return pulumi.get(self, "client")

    @_builtins.property
    @pulumi.getter
    def custom(self) -> _builtins.str:
        """
        The custom policies, in JSON format.
        """
        return pulumi.get(self, "custom")

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        """
        The display policies, in JSON format.
        """
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter(name="fileAndClipboard")
    def file_and_clipboard(self) -> _builtins.str:
        """
        The file and clipboard policies, in JSON format.
        """
        return pulumi.get(self, "file_and_clipboard")

    @_builtins.property
    @pulumi.getter(name="keyboardMouse")
    def keyboard_mouse(self) -> _builtins.str:
        """
        The keyboard and mouse policies, in JSON format.
        """
        return pulumi.get(self, "keyboard_mouse")

    @_builtins.property
    @pulumi.getter
    def peripherals(self) -> _builtins.str:
        """
        The peripheral device policies, in JSON format.
        """
        return pulumi.get(self, "peripherals")

    @_builtins.property
    @pulumi.getter(name="personalizedDataMgmt")
    def personalized_data_mgmt(self) -> _builtins.str:
        """
        The personalized data management policies, in JSON format.
        """
        return pulumi.get(self, "personalized_data_mgmt")

    @_builtins.property
    @pulumi.getter(name="recordAudit")
    def record_audit(self) -> _builtins.str:
        """
        The screen recording audit policies, in JSON format.
        """
        return pulumi.get(self, "record_audit")

    @_builtins.property
    @pulumi.getter
    def seamless(self) -> _builtins.str:
        """
        The general audio and video bypass policies, in JSON format.
        """
        return pulumi.get(self, "seamless")

    @_builtins.property
    @pulumi.getter
    def session(self) -> _builtins.str:
        """
        The session policies, in JSON format.
        """
        return pulumi.get(self, "session")

    @_builtins.property
    @pulumi.getter(name="virtualChannel")
    def virtual_channel(self) -> _builtins.str:
        """
        The virtual channel policies, in JSON format.
        """
        return pulumi.get(self, "virtual_channel")

    @_builtins.property
    @pulumi.getter
    def watermark(self) -> _builtins.str:
        """
        The watermark policies, in JSON format.
        """
        return pulumi.get(self, "watermark")


@pulumi.output_type
class GetPolicyGroupsPolicyGroupTargetResult(dict):
    def __init__(__self__, *,
                 target_id: _builtins.str,
                 target_name: _builtins.str,
                 target_type: _builtins.str):
        """
        :param _builtins.str target_id: The ID of the target.
        :param _builtins.str target_name: The name of the target.
        :param _builtins.str target_type: The type of the target.
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The ID of the target.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        The name of the target.
        """
        return pulumi.get(self, "target_name")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> _builtins.str:
        """
        The type of the target.
        """
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetServiceAdDomainResult(dict):
    def __init__(__self__, *,
                 active_dns_ip: _builtins.str,
                 active_domain_ip: _builtins.str,
                 active_domain_name: _builtins.str,
                 admin_account: _builtins.str,
                 delete_computer_object: _builtins.bool,
                 name: _builtins.str,
                 standby_dns_ip: _builtins.str,
                 standby_domain_ip: _builtins.str,
                 standby_domain_name: _builtins.str):
        """
        :param _builtins.str active_dns_ip: The primary DNS IP address.
        :param _builtins.str active_domain_ip: The IP address of primary domain controller.
        :param _builtins.str active_domain_name: The name of the primary domain controller.
        :param _builtins.str admin_account: The domain administrator account.
        :param _builtins.bool delete_computer_object: Whether to delete the corresponding computer object on AD while deleting the desktop.
        :param _builtins.str name: The security group name.
        :param _builtins.str standby_dns_ip: The standby DNS IP address.
        :param _builtins.str standby_domain_ip: The IP address of standby domain controller.
        :param _builtins.str standby_domain_name: The name of the standby domain controller.
        """
        pulumi.set(__self__, "active_dns_ip", active_dns_ip)
        pulumi.set(__self__, "active_domain_ip", active_domain_ip)
        pulumi.set(__self__, "active_domain_name", active_domain_name)
        pulumi.set(__self__, "admin_account", admin_account)
        pulumi.set(__self__, "delete_computer_object", delete_computer_object)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "standby_dns_ip", standby_dns_ip)
        pulumi.set(__self__, "standby_domain_ip", standby_domain_ip)
        pulumi.set(__self__, "standby_domain_name", standby_domain_name)

    @_builtins.property
    @pulumi.getter(name="activeDnsIp")
    def active_dns_ip(self) -> _builtins.str:
        """
        The primary DNS IP address.
        """
        return pulumi.get(self, "active_dns_ip")

    @_builtins.property
    @pulumi.getter(name="activeDomainIp")
    def active_domain_ip(self) -> _builtins.str:
        """
        The IP address of primary domain controller.
        """
        return pulumi.get(self, "active_domain_ip")

    @_builtins.property
    @pulumi.getter(name="activeDomainName")
    def active_domain_name(self) -> _builtins.str:
        """
        The name of the primary domain controller.
        """
        return pulumi.get(self, "active_domain_name")

    @_builtins.property
    @pulumi.getter(name="adminAccount")
    def admin_account(self) -> _builtins.str:
        """
        The domain administrator account.
        """
        return pulumi.get(self, "admin_account")

    @_builtins.property
    @pulumi.getter(name="deleteComputerObject")
    def delete_computer_object(self) -> _builtins.bool:
        """
        Whether to delete the corresponding computer object on AD while deleting the desktop.
        """
        return pulumi.get(self, "delete_computer_object")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The security group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="standbyDnsIp")
    def standby_dns_ip(self) -> _builtins.str:
        """
        The standby DNS IP address.
        """
        return pulumi.get(self, "standby_dns_ip")

    @_builtins.property
    @pulumi.getter(name="standbyDomainIp")
    def standby_domain_ip(self) -> _builtins.str:
        """
        The IP address of standby domain controller.
        """
        return pulumi.get(self, "standby_domain_ip")

    @_builtins.property
    @pulumi.getter(name="standbyDomainName")
    def standby_domain_name(self) -> _builtins.str:
        """
        The name of the standby domain controller.
        """
        return pulumi.get(self, "standby_domain_name")


@pulumi.output_type
class GetServiceDesktopSecurityGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The security group ID.
        :param _builtins.str name: The security group name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The security group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceInfrastructureSecurityGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The security group ID.
        :param _builtins.str name: The security group name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The security group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceOtpConfigInfoResult(dict):
    def __init__(__self__, *,
                 app_id: _builtins.str,
                 app_secret: _builtins.str,
                 auth_server_access_mode: _builtins.str,
                 auth_url: _builtins.str,
                 cert_content: _builtins.str,
                 enable: _builtins.bool,
                 receive_mode: _builtins.str,
                 rule: _builtins.str,
                 rule_type: _builtins.str):
        """
        :param _builtins.str app_id: The auxiliary authentication server access account.
        :param _builtins.str app_secret: The authentication service access password.
        :param _builtins.str auth_server_access_mode: The authentication service access mode.
        :param _builtins.str auth_url: The auxiliary authentication server address.
        :param _builtins.str cert_content: The certificate content, in PEM format.
        :param _builtins.bool enable: Whether to enable auxiliary authentication.
        :param _builtins.str receive_mode: The verification code receiving mode.
               + **VMFA**: Virtual MFA device
               + **HMFA**: Hardware MFA device
        :param _builtins.str rule: The object to which authentication applies.
               + **INTERNET**: Internet access.
               + **PRIVATE**: private line access.
        :param _builtins.str rule_type: The type of the object to which authentication applies.
               + **ACCESS_MODE**: Access type.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_secret", app_secret)
        pulumi.set(__self__, "auth_server_access_mode", auth_server_access_mode)
        pulumi.set(__self__, "auth_url", auth_url)
        pulumi.set(__self__, "cert_content", cert_content)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "receive_mode", receive_mode)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "rule_type", rule_type)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.str:
        """
        The auxiliary authentication server access account.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> _builtins.str:
        """
        The authentication service access password.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="authServerAccessMode")
    def auth_server_access_mode(self) -> _builtins.str:
        """
        The authentication service access mode.
        """
        return pulumi.get(self, "auth_server_access_mode")

    @_builtins.property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> _builtins.str:
        """
        The auxiliary authentication server address.
        """
        return pulumi.get(self, "auth_url")

    @_builtins.property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> _builtins.str:
        """
        The certificate content, in PEM format.
        """
        return pulumi.get(self, "cert_content")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Whether to enable auxiliary authentication.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="receiveMode")
    def receive_mode(self) -> _builtins.str:
        """
        The verification code receiving mode.
        + **VMFA**: Virtual MFA device
        + **HMFA**: Hardware MFA device
        """
        return pulumi.get(self, "receive_mode")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> _builtins.str:
        """
        The object to which authentication applies.
        + **INTERNET**: Internet access.
        + **PRIVATE**: private line access.
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> _builtins.str:
        """
        The type of the object to which authentication applies.
        + **ACCESS_MODE**: Access type.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag to be queried.
        :param Sequence[_builtins.str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag to be queried.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 account_expired: _builtins.bool,
                 account_expires: _builtins.str,
                 active_type: _builtins.str,
                 description: _builtins.str,
                 disabled: _builtins.bool,
                 enable_change_password: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 group_names: Sequence[_builtins.str],
                 id: _builtins.str,
                 is_pre_user: _builtins.bool,
                 locked: _builtins.bool,
                 next_login_change_password: _builtins.bool,
                 password_never_expired: _builtins.bool,
                 share_space_desktops: _builtins.int,
                 share_space_subscription: _builtins.bool,
                 sid: _builtins.str,
                 total_desktops: _builtins.int,
                 user_email: _builtins.str,
                 user_info_map: _builtins.str,
                 user_name: _builtins.str,
                 user_phone: _builtins.str):
        """
        :param _builtins.bool account_expired: Whether the account has expired.
        :param _builtins.str account_expires: The account expired time.
        :param _builtins.str active_type: Specifies the activation type of the user.  
               The valid values are as follows:
               + **USER_ACTIVATE**
               + **ADMIN_ACTIVATE**
        :param _builtins.str description: Specifies the user description for fuzzy matching.
        :param _builtins.bool disabled: Whether the account is disabled.
        :param _builtins.bool enable_change_password: Whether the user is allowed to change password.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project.
        :param Sequence[_builtins.str] group_names: The list of group name that the user has joined.
        :param _builtins.str id: The ID of the user.
        :param _builtins.bool is_pre_user: Whether the user is a pre-created user.
        :param _builtins.bool locked: Whether the account is locked.
        :param _builtins.bool next_login_change_password: Whether the password needs to be reset on next login.
        :param _builtins.bool password_never_expired: Whether the password never expires.
        :param _builtins.int share_space_desktops: The number of collaboration desktops bound to the user.
        :param _builtins.bool share_space_subscription: Whether the user has subscribed to collaboration.
        :param _builtins.str sid: The SID of the user.
        :param _builtins.int total_desktops: The total number of desktops bound to the user.
        :param _builtins.str user_email: The email address of the user.
        :param _builtins.str user_info_map: The user information mapping, including user service level, operation mode and type.
        :param _builtins.str user_name: Specifies the user name to be queried.
        :param _builtins.str user_phone: The phone number of the user.
        """
        pulumi.set(__self__, "account_expired", account_expired)
        pulumi.set(__self__, "account_expires", account_expires)
        pulumi.set(__self__, "active_type", active_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "enable_change_password", enable_change_password)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "group_names", group_names)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_pre_user", is_pre_user)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "next_login_change_password", next_login_change_password)
        pulumi.set(__self__, "password_never_expired", password_never_expired)
        pulumi.set(__self__, "share_space_desktops", share_space_desktops)
        pulumi.set(__self__, "share_space_subscription", share_space_subscription)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "total_desktops", total_desktops)
        pulumi.set(__self__, "user_email", user_email)
        pulumi.set(__self__, "user_info_map", user_info_map)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_phone", user_phone)

    @_builtins.property
    @pulumi.getter(name="accountExpired")
    def account_expired(self) -> _builtins.bool:
        """
        Whether the account has expired.
        """
        return pulumi.get(self, "account_expired")

    @_builtins.property
    @pulumi.getter(name="accountExpires")
    def account_expires(self) -> _builtins.str:
        """
        The account expired time.
        """
        return pulumi.get(self, "account_expires")

    @_builtins.property
    @pulumi.getter(name="activeType")
    def active_type(self) -> _builtins.str:
        """
        Specifies the activation type of the user.  
        The valid values are as follows:
        + **USER_ACTIVATE**
        + **ADMIN_ACTIVATE**
        """
        return pulumi.get(self, "active_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the user description for fuzzy matching.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> _builtins.bool:
        """
        Whether the account is disabled.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter(name="enableChangePassword")
    def enable_change_password(self) -> _builtins.bool:
        """
        Whether the user is allowed to change password.
        """
        return pulumi.get(self, "enable_change_password")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Sequence[_builtins.str]:
        """
        The list of group name that the user has joined.
        """
        return pulumi.get(self, "group_names")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the user.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPreUser")
    def is_pre_user(self) -> _builtins.bool:
        """
        Whether the user is a pre-created user.
        """
        return pulumi.get(self, "is_pre_user")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        """
        Whether the account is locked.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter(name="nextLoginChangePassword")
    def next_login_change_password(self) -> _builtins.bool:
        """
        Whether the password needs to be reset on next login.
        """
        return pulumi.get(self, "next_login_change_password")

    @_builtins.property
    @pulumi.getter(name="passwordNeverExpired")
    def password_never_expired(self) -> _builtins.bool:
        """
        Whether the password never expires.
        """
        return pulumi.get(self, "password_never_expired")

    @_builtins.property
    @pulumi.getter(name="shareSpaceDesktops")
    def share_space_desktops(self) -> _builtins.int:
        """
        The number of collaboration desktops bound to the user.
        """
        return pulumi.get(self, "share_space_desktops")

    @_builtins.property
    @pulumi.getter(name="shareSpaceSubscription")
    def share_space_subscription(self) -> _builtins.bool:
        """
        Whether the user has subscribed to collaboration.
        """
        return pulumi.get(self, "share_space_subscription")

    @_builtins.property
    @pulumi.getter
    def sid(self) -> _builtins.str:
        """
        The SID of the user.
        """
        return pulumi.get(self, "sid")

    @_builtins.property
    @pulumi.getter(name="totalDesktops")
    def total_desktops(self) -> _builtins.int:
        """
        The total number of desktops bound to the user.
        """
        return pulumi.get(self, "total_desktops")

    @_builtins.property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> _builtins.str:
        """
        The email address of the user.
        """
        return pulumi.get(self, "user_email")

    @_builtins.property
    @pulumi.getter(name="userInfoMap")
    def user_info_map(self) -> _builtins.str:
        """
        The user information mapping, including user service level, operation mode and type.
        """
        return pulumi.get(self, "user_info_map")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the user name to be queried.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userPhone")
    def user_phone(self) -> _builtins.str:
        """
        The phone number of the user.
        """
        return pulumi.get(self, "user_phone")


@pulumi.output_type
class GetVolumeProductsVolumeProductResult(dict):
    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 domain_ids: Sequence[_builtins.str],
                 names: Sequence['outputs.GetVolumeProductsVolumeProductNameResult'],
                 resource_spec_code: _builtins.str,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 volume_product_type: _builtins.str,
                 volume_type: _builtins.str):
        """
        :param _builtins.str cloud_service_type: The cloud service type of volume product.
        :param Sequence[_builtins.str] domain_ids: The list of domain IDs that support this volume.
        :param Sequence['GetVolumeProductsVolumeProductNameArgs'] names: The list of volume product name information.  
               The names structure is documented below.
        :param _builtins.str resource_spec_code: The ID of volume product.
        :param _builtins.str resource_type: The resource type of volume product.
        :param _builtins.str status: The status of the volume product.
        :param _builtins.str volume_product_type: The product type of volume product.
        :param _builtins.str volume_type: Specifies the type of volume products.  
               The valid values are as follows:
               + **SATA**: Common I/O disk.
               + **SAS**: High I/O disk.
               + **SSD**: Ultra-high I/O disk.
               + **GPSSD**: General Purpose SSD Disk.
               + **ESSD**: Extreme SSD Disk.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "domain_ids", domain_ids)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "volume_product_type", volume_product_type)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        The cloud service type of volume product.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs that support this volume.
        """
        return pulumi.get(self, "domain_ids")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Sequence['outputs.GetVolumeProductsVolumeProductNameResult']:
        """
        The list of volume product name information.  
        The names structure is documented below.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The ID of volume product.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type of volume product.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the volume product.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="volumeProductType")
    def volume_product_type(self) -> _builtins.str:
        """
        The product type of volume product.
        """
        return pulumi.get(self, "volume_product_type")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Specifies the type of volume products.  
        The valid values are as follows:
        + **SATA**: Common I/O disk.
        + **SAS**: High I/O disk.
        + **SSD**: Ultra-high I/O disk.
        + **GPSSD**: General Purpose SSD Disk.
        + **ESSD**: Extreme SSD Disk.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetVolumeProductsVolumeProductNameResult(dict):
    def __init__(__self__, *,
                 language: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str language: The language of volume product name.
        :param _builtins.str value: The volume product name in this language.
        """
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        The language of volume product name.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The volume product name in this language.
        """
        return pulumi.get(self, "value")


