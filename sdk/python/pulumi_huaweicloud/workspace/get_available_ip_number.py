# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAvailableIpNumberResult',
    'AwaitableGetAvailableIpNumberResult',
    'get_available_ip_number',
    'get_available_ip_number_output',
]

@pulumi.output_type
class GetAvailableIpNumberResult:
    """
    A collection of values returned by getAvailableIpNumber.
    """
    def __init__(__self__, available_ip=None, id=None, region=None, subnet_id=None):
        if available_ip and not isinstance(available_ip, int):
            raise TypeError("Expected argument 'available_ip' to be a int")
        pulumi.set(__self__, "available_ip", available_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="availableIp")
    def available_ip(self) -> _builtins.int:
        """
        The number of available IPs in the subnet.
        """
        return pulumi.get(self, "available_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")


class AwaitableGetAvailableIpNumberResult(GetAvailableIpNumberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAvailableIpNumberResult(
            available_ip=self.available_ip,
            id=self.id,
            region=self.region,
            subnet_id=self.subnet_id)


def get_available_ip_number(region: Optional[_builtins.str] = None,
                            subnet_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAvailableIpNumberResult:
    """
    Use this data source to get the number of available IPs in a subnet within HuaweiCloud Workspace.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    test = huaweicloud.Workspace.get_available_ip_number(subnet_id=subnet_id)
    ```


    :param _builtins.str region: Specifies the region where the subnet is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to be queried.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAvailableIpNumber:getAvailableIpNumber', __args__, opts=opts, typ=GetAvailableIpNumberResult).value

    return AwaitableGetAvailableIpNumberResult(
        available_ip=pulumi.get(__ret__, 'available_ip'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'))
def get_available_ip_number_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAvailableIpNumberResult]:
    """
    Use this data source to get the number of available IPs in a subnet within HuaweiCloud Workspace.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    test = huaweicloud.Workspace.get_available_ip_number(subnet_id=subnet_id)
    ```


    :param _builtins.str region: Specifies the region where the subnet is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to be queried.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAvailableIpNumber:getAvailableIpNumber', __args__, opts=opts, typ=GetAvailableIpNumberResult)
    return __ret__.apply(lambda __response__: GetAvailableIpNumberResult(
        available_ip=pulumi.get(__response__, 'available_ip'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        subnet_id=pulumi.get(__response__, 'subnet_id')))
