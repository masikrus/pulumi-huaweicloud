# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppServerGroupScalingPolicyArgs', 'AppServerGroupScalingPolicy']

@pulumi.input_type
class AppServerGroupScalingPolicyArgs:
    def __init__(__self__, *,
                 max_scaling_amount: pulumi.Input[_builtins.int],
                 scaling_policy_by_session: pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs'],
                 server_group_id: pulumi.Input[_builtins.str],
                 single_expansion_count: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppServerGroupScalingPolicy resource.
        :param pulumi.Input[_builtins.int] max_scaling_amount: Specifies the maximum number of instances that can be scaled out.
               The valid value is range from `1` to `100`.
        :param pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs'] scaling_policy_by_session: Specifies the session-based scaling policy configuration.
               The scaling_policy_by_session structure is documented below.
               
               <a name="workspace_scaling_policy_by_session_object"></a>
               The `scaling_policy_by_session` block supports:
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to which the scaling policy belongs.
        :param pulumi.Input[_builtins.int] single_expansion_count: Specifies the number of instances to scale out in a single scaling operation.
               The valid value is range from `1` to `10`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the scaling policy is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "max_scaling_amount", max_scaling_amount)
        pulumi.set(__self__, "scaling_policy_by_session", scaling_policy_by_session)
        pulumi.set(__self__, "server_group_id", server_group_id)
        pulumi.set(__self__, "single_expansion_count", single_expansion_count)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="maxScalingAmount")
    def max_scaling_amount(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum number of instances that can be scaled out.
        The valid value is range from `1` to `100`.
        """
        return pulumi.get(self, "max_scaling_amount")

    @max_scaling_amount.setter
    def max_scaling_amount(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_scaling_amount", value)

    @_builtins.property
    @pulumi.getter(name="scalingPolicyBySession")
    def scaling_policy_by_session(self) -> pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs']:
        """
        Specifies the session-based scaling policy configuration.
        The scaling_policy_by_session structure is documented below.

        <a name="workspace_scaling_policy_by_session_object"></a>
        The `scaling_policy_by_session` block supports:
        """
        return pulumi.get(self, "scaling_policy_by_session")

    @scaling_policy_by_session.setter
    def scaling_policy_by_session(self, value: pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs']):
        pulumi.set(self, "scaling_policy_by_session", value)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the server group to which the scaling policy belongs.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="singleExpansionCount")
    def single_expansion_count(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of instances to scale out in a single scaling operation.
        The valid value is range from `1` to `10`.
        """
        return pulumi.get(self, "single_expansion_count")

    @single_expansion_count.setter
    def single_expansion_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "single_expansion_count", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the scaling policy is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppServerGroupScalingPolicyState:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 max_scaling_amount: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_policy_by_session: Optional[pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs']] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_expansion_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering AppServerGroupScalingPolicy resources.
        :param pulumi.Input[_builtins.bool] enable: Whether the scaling policy is enabled.
        :param pulumi.Input[_builtins.int] max_scaling_amount: Specifies the maximum number of instances that can be scaled out.
               The valid value is range from `1` to `100`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the scaling policy is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs'] scaling_policy_by_session: Specifies the session-based scaling policy configuration.
               The scaling_policy_by_session structure is documented below.
               
               <a name="workspace_scaling_policy_by_session_object"></a>
               The `scaling_policy_by_session` block supports:
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to which the scaling policy belongs.
        :param pulumi.Input[_builtins.int] single_expansion_count: Specifies the number of instances to scale out in a single scaling operation.
               The valid value is range from `1` to `10`.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if max_scaling_amount is not None:
            pulumi.set(__self__, "max_scaling_amount", max_scaling_amount)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_policy_by_session is not None:
            pulumi.set(__self__, "scaling_policy_by_session", scaling_policy_by_session)
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)
        if single_expansion_count is not None:
            pulumi.set(__self__, "single_expansion_count", single_expansion_count)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the scaling policy is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="maxScalingAmount")
    def max_scaling_amount(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of instances that can be scaled out.
        The valid value is range from `1` to `100`.
        """
        return pulumi.get(self, "max_scaling_amount")

    @max_scaling_amount.setter
    def max_scaling_amount(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_scaling_amount", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the scaling policy is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scalingPolicyBySession")
    def scaling_policy_by_session(self) -> Optional[pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs']]:
        """
        Specifies the session-based scaling policy configuration.
        The scaling_policy_by_session structure is documented below.

        <a name="workspace_scaling_policy_by_session_object"></a>
        The `scaling_policy_by_session` block supports:
        """
        return pulumi.get(self, "scaling_policy_by_session")

    @scaling_policy_by_session.setter
    def scaling_policy_by_session(self, value: Optional[pulumi.Input['AppServerGroupScalingPolicyScalingPolicyBySessionArgs']]):
        pulumi.set(self, "scaling_policy_by_session", value)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the server group to which the scaling policy belongs.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="singleExpansionCount")
    def single_expansion_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of instances to scale out in a single scaling operation.
        The valid value is range from `1` to `10`.
        """
        return pulumi.get(self, "single_expansion_count")

    @single_expansion_count.setter
    def single_expansion_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "single_expansion_count", value)


@pulumi.type_token("huaweicloud:Workspace/appServerGroupScalingPolicy:AppServerGroupScalingPolicy")
class AppServerGroupScalingPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 max_scaling_amount: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_policy_by_session: Optional[pulumi.Input[Union['AppServerGroupScalingPolicyScalingPolicyBySessionArgs', 'AppServerGroupScalingPolicyScalingPolicyBySessionArgsDict']]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_expansion_count: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a Workspace APP server group scaling policy resource within HuaweiCloud.

        > An server group can only have one scaling policy resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        test = huaweicloud.workspace.AppServerGroupScalingPolicy("test",
            server_group_id=server_group_id,
            max_scaling_amount=10,
            single_expansion_count=1,
            scaling_policy_by_session={
                "session_usage_threshold": 80,
                "shrink_after_session_idle_minutes": 30,
            })
        ```

        ## Import

        The APP server group scaling policy can be imported using the server group ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServerGroupScalingPolicy:AppServerGroupScalingPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] max_scaling_amount: Specifies the maximum number of instances that can be scaled out.
               The valid value is range from `1` to `100`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the scaling policy is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AppServerGroupScalingPolicyScalingPolicyBySessionArgs', 'AppServerGroupScalingPolicyScalingPolicyBySessionArgsDict']] scaling_policy_by_session: Specifies the session-based scaling policy configuration.
               The scaling_policy_by_session structure is documented below.
               
               <a name="workspace_scaling_policy_by_session_object"></a>
               The `scaling_policy_by_session` block supports:
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to which the scaling policy belongs.
        :param pulumi.Input[_builtins.int] single_expansion_count: Specifies the number of instances to scale out in a single scaling operation.
               The valid value is range from `1` to `10`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppServerGroupScalingPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace APP server group scaling policy resource within HuaweiCloud.

        > An server group can only have one scaling policy resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        test = huaweicloud.workspace.AppServerGroupScalingPolicy("test",
            server_group_id=server_group_id,
            max_scaling_amount=10,
            single_expansion_count=1,
            scaling_policy_by_session={
                "session_usage_threshold": 80,
                "shrink_after_session_idle_minutes": 30,
            })
        ```

        ## Import

        The APP server group scaling policy can be imported using the server group ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServerGroupScalingPolicy:AppServerGroupScalingPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AppServerGroupScalingPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppServerGroupScalingPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 max_scaling_amount: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_policy_by_session: Optional[pulumi.Input[Union['AppServerGroupScalingPolicyScalingPolicyBySessionArgs', 'AppServerGroupScalingPolicyScalingPolicyBySessionArgsDict']]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_expansion_count: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppServerGroupScalingPolicyArgs.__new__(AppServerGroupScalingPolicyArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if max_scaling_amount is None and not opts.urn:
                raise TypeError("Missing required property 'max_scaling_amount'")
            __props__.__dict__["max_scaling_amount"] = max_scaling_amount
            __props__.__dict__["region"] = region
            if scaling_policy_by_session is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_policy_by_session'")
            __props__.__dict__["scaling_policy_by_session"] = scaling_policy_by_session
            if server_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_group_id'")
            __props__.__dict__["server_group_id"] = server_group_id
            if single_expansion_count is None and not opts.urn:
                raise TypeError("Missing required property 'single_expansion_count'")
            __props__.__dict__["single_expansion_count"] = single_expansion_count
            __props__.__dict__["enable"] = None
        super(AppServerGroupScalingPolicy, __self__).__init__(
            'huaweicloud:Workspace/appServerGroupScalingPolicy:AppServerGroupScalingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            max_scaling_amount: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scaling_policy_by_session: Optional[pulumi.Input[Union['AppServerGroupScalingPolicyScalingPolicyBySessionArgs', 'AppServerGroupScalingPolicyScalingPolicyBySessionArgsDict']]] = None,
            server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            single_expansion_count: Optional[pulumi.Input[_builtins.int]] = None) -> 'AppServerGroupScalingPolicy':
        """
        Get an existing AppServerGroupScalingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enable: Whether the scaling policy is enabled.
        :param pulumi.Input[_builtins.int] max_scaling_amount: Specifies the maximum number of instances that can be scaled out.
               The valid value is range from `1` to `100`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the scaling policy is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AppServerGroupScalingPolicyScalingPolicyBySessionArgs', 'AppServerGroupScalingPolicyScalingPolicyBySessionArgsDict']] scaling_policy_by_session: Specifies the session-based scaling policy configuration.
               The scaling_policy_by_session structure is documented below.
               
               <a name="workspace_scaling_policy_by_session_object"></a>
               The `scaling_policy_by_session` block supports:
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to which the scaling policy belongs.
        :param pulumi.Input[_builtins.int] single_expansion_count: Specifies the number of instances to scale out in a single scaling operation.
               The valid value is range from `1` to `10`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppServerGroupScalingPolicyState.__new__(_AppServerGroupScalingPolicyState)

        __props__.__dict__["enable"] = enable
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["max_scaling_amount"] = max_scaling_amount
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_policy_by_session"] = scaling_policy_by_session
        __props__.__dict__["server_group_id"] = server_group_id
        __props__.__dict__["single_expansion_count"] = single_expansion_count
        return AppServerGroupScalingPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the scaling policy is enabled.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="maxScalingAmount")
    def max_scaling_amount(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum number of instances that can be scaled out.
        The valid value is range from `1` to `100`.
        """
        return pulumi.get(self, "max_scaling_amount")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the scaling policy is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyBySession")
    def scaling_policy_by_session(self) -> pulumi.Output['outputs.AppServerGroupScalingPolicyScalingPolicyBySession']:
        """
        Specifies the session-based scaling policy configuration.
        The scaling_policy_by_session structure is documented below.

        <a name="workspace_scaling_policy_by_session_object"></a>
        The `scaling_policy_by_session` block supports:
        """
        return pulumi.get(self, "scaling_policy_by_session")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the server group to which the scaling policy belongs.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="singleExpansionCount")
    def single_expansion_count(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of instances to scale out in a single scaling operation.
        The valid value is range from `1` to `10`.
        """
        return pulumi.get(self, "single_expansion_count")

