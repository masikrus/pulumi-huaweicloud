# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppServerGroupBatchDisassociateArgs', 'AppServerGroupBatchDisassociate']

@pulumi.input_type
class AppServerGroupBatchDisassociateArgs:
    def __init__(__self__, *,
                 server_group_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppServerGroupBatchDisassociate resource.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to disassociate all application groups.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the server group is located.  
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "server_group_id", server_group_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the server group to disassociate all application groups.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the server group is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppServerGroupBatchDisassociateState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppServerGroupBatchDisassociate resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the server group is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to disassociate all application groups.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the server group is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the server group to disassociate all application groups.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_group_id", value)


@pulumi.type_token("huaweicloud:Workspace/appServerGroupBatchDisassociate:AppServerGroupBatchDisassociate")
class AppServerGroupBatchDisassociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to disassociate all application groups from Workspace APP server group within HuaweiCloud.

        > This resource is a one-time action resource used to disassociate all application groups from specified server group.
           Deleting resource will not clear the corresponding request record, but will only remove the resource information from
           the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        test = huaweicloud.workspace.AppServerGroupBatchDisassociate("test", server_group_id=server_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the server group is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to disassociate all application groups.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppServerGroupBatchDisassociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to disassociate all application groups from Workspace APP server group within HuaweiCloud.

        > This resource is a one-time action resource used to disassociate all application groups from specified server group.
           Deleting resource will not clear the corresponding request record, but will only remove the resource information from
           the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        test = huaweicloud.workspace.AppServerGroupBatchDisassociate("test", server_group_id=server_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param AppServerGroupBatchDisassociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppServerGroupBatchDisassociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppServerGroupBatchDisassociateArgs.__new__(AppServerGroupBatchDisassociateArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if server_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_group_id'")
            __props__.__dict__["server_group_id"] = server_group_id
        super(AppServerGroupBatchDisassociate, __self__).__init__(
            'huaweicloud:Workspace/appServerGroupBatchDisassociate:AppServerGroupBatchDisassociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppServerGroupBatchDisassociate':
        """
        Get an existing AppServerGroupBatchDisassociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the server group is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the ID of the server group to disassociate all application groups.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppServerGroupBatchDisassociateState.__new__(_AppServerGroupBatchDisassociateState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["server_group_id"] = server_group_id
        return AppServerGroupBatchDisassociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the server group is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the server group to disassociate all application groups.
        """
        return pulumi.get(self, "server_group_id")

