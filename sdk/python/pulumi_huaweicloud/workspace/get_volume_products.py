# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVolumeProductsResult',
    'AwaitableGetVolumeProductsResult',
    'get_volume_products',
    'get_volume_products_output',
]

@pulumi.output_type
class GetVolumeProductsResult:
    """
    A collection of values returned by getVolumeProducts.
    """
    def __init__(__self__, availability_zone=None, id=None, region=None, volume_products=None, volume_type=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if volume_products and not isinstance(volume_products, list):
            raise TypeError("Expected argument 'volume_products' to be a list")
        pulumi.set(__self__, "volume_products", volume_products)
        if volume_type and not isinstance(volume_type, str):
            raise TypeError("Expected argument 'volume_type' to be a str")
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="volumeProducts")
    def volume_products(self) -> Sequence['outputs.GetVolumeProductsVolumeProductResult']:
        """
        The list of volume products that matched filter parameters.  
        The volume_products structure is documented below.
        """
        return pulumi.get(self, "volume_products")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[_builtins.str]:
        """
        The volume type of volume product.
        """
        return pulumi.get(self, "volume_type")


class AwaitableGetVolumeProductsResult(GetVolumeProductsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeProductsResult(
            availability_zone=self.availability_zone,
            id=self.id,
            region=self.region,
            volume_products=self.volume_products,
            volume_type=self.volume_type)


def get_volume_products(availability_zone: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        volume_type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeProductsResult:
    """
    Use this data source to get the list of Workspace volume products within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_volume_products()
    ```

    ### Filter by availability zone

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    availability_zone = config.require_object("availabilityZone")
    test = huaweicloud.Workspace.get_volume_products(availability_zone=availability_zone)
    ```

    ### Filter by volume type

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_type = config.require_object("volumeType")
    test = huaweicloud.Workspace.get_volume_products(volume_type=volume_type)
    ```


    :param _builtins.str availability_zone: Specifies the availability zone where the volume products are located.
    :param _builtins.str region: Specifies the region where the volume products are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str volume_type: Specifies the type of volume products.  
           The valid values are as follows:
           + **SATA**: Common I/O disk.
           + **SAS**: High I/O disk.
           + **SSD**: Ultra-high I/O disk.
           + **GPSSD**: General Purpose SSD Disk.
           + **ESSD**: Extreme SSD Disk.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['region'] = region
    __args__['volumeType'] = volume_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getVolumeProducts:getVolumeProducts', __args__, opts=opts, typ=GetVolumeProductsResult).value

    return AwaitableGetVolumeProductsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        volume_products=pulumi.get(__ret__, 'volume_products'),
        volume_type=pulumi.get(__ret__, 'volume_type'))
def get_volume_products_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               volume_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumeProductsResult]:
    """
    Use this data source to get the list of Workspace volume products within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_volume_products()
    ```

    ### Filter by availability zone

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    availability_zone = config.require_object("availabilityZone")
    test = huaweicloud.Workspace.get_volume_products(availability_zone=availability_zone)
    ```

    ### Filter by volume type

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_type = config.require_object("volumeType")
    test = huaweicloud.Workspace.get_volume_products(volume_type=volume_type)
    ```


    :param _builtins.str availability_zone: Specifies the availability zone where the volume products are located.
    :param _builtins.str region: Specifies the region where the volume products are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str volume_type: Specifies the type of volume products.  
           The valid values are as follows:
           + **SATA**: Common I/O disk.
           + **SAS**: High I/O disk.
           + **SSD**: Ultra-high I/O disk.
           + **GPSSD**: General Purpose SSD Disk.
           + **ESSD**: Extreme SSD Disk.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['region'] = region
    __args__['volumeType'] = volume_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getVolumeProducts:getVolumeProducts', __args__, opts=opts, typ=GetVolumeProductsResult)
    return __ret__.apply(lambda __response__: GetVolumeProductsResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        volume_products=pulumi.get(__response__, 'volume_products'),
        volume_type=pulumi.get(__response__, 'volume_type')))
