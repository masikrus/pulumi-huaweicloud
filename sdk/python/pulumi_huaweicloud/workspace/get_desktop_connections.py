# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDesktopConnectionsResult',
    'AwaitableGetDesktopConnectionsResult',
    'get_desktop_connections',
    'get_desktop_connections_output',
]

@pulumi.output_type
class GetDesktopConnectionsResult:
    """
    A collection of values returned by getDesktopConnections.
    """
    def __init__(__self__, connect_status=None, desktop_connections=None, id=None, region=None, user_names=None):
        if connect_status and not isinstance(connect_status, str):
            raise TypeError("Expected argument 'connect_status' to be a str")
        pulumi.set(__self__, "connect_status", connect_status)
        if desktop_connections and not isinstance(desktop_connections, list):
            raise TypeError("Expected argument 'desktop_connections' to be a list")
        pulumi.set(__self__, "desktop_connections", desktop_connections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_names and not isinstance(user_names, list):
            raise TypeError("Expected argument 'user_names' to be a list")
        pulumi.set(__self__, "user_names", user_names)

    @_builtins.property
    @pulumi.getter(name="connectStatus")
    def connect_status(self) -> Optional[_builtins.str]:
        """
        The connection status of the desktop.
        """
        return pulumi.get(self, "connect_status")

    @_builtins.property
    @pulumi.getter(name="desktopConnections")
    def desktop_connections(self) -> Sequence['outputs.GetDesktopConnectionsDesktopConnectionResult']:
        """
        The list of desktop connections that match the query parameters.  
        The desktop_connections structure is documented below.
        """
        return pulumi.get(self, "desktop_connections")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "user_names")


class AwaitableGetDesktopConnectionsResult(GetDesktopConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDesktopConnectionsResult(
            connect_status=self.connect_status,
            desktop_connections=self.desktop_connections,
            id=self.id,
            region=self.region,
            user_names=self.user_names)


def get_desktop_connections(connect_status: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            user_names: Optional[Sequence[_builtins.str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDesktopConnectionsResult:
    """
    Use this data source to get the list of the Workspace desktop connections within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_connections()
    ```

    ### Filter desktops by user name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    user_names = config.require_object("userNames")
    test = huaweicloud.Workspace.get_desktop_connections(user_names=user_names)
    ```

    ### Filter desktops by connection status

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connect_status = config.require_object("connectStatus")
    test = huaweicloud.Workspace.get_desktop_connections(connect_status=connect_status)
    ```


    :param _builtins.str connect_status: Specifies the connection status of the desktop.  
           The valid values are as follows:
           + **UNREGISTER**: The desktop is not registered or powered off.
           + **REGISTERED**: The desktop is registered and waiting for user connection.
           + **CONNECTED**: The user has successfully connected and is using the desktop.
           + **DISCONNECTED**: The desktop is disconnected from the client.
    :param _builtins.str region: Specifies the region where the desktop connections are located.
    :param Sequence[_builtins.str] user_names: Specifies the list of desktop users to be queried.
           The user_names don't support fuzzy match.
    """
    __args__ = dict()
    __args__['connectStatus'] = connect_status
    __args__['region'] = region
    __args__['userNames'] = user_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getDesktopConnections:getDesktopConnections', __args__, opts=opts, typ=GetDesktopConnectionsResult).value

    return AwaitableGetDesktopConnectionsResult(
        connect_status=pulumi.get(__ret__, 'connect_status'),
        desktop_connections=pulumi.get(__ret__, 'desktop_connections'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        user_names=pulumi.get(__ret__, 'user_names'))
def get_desktop_connections_output(connect_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   user_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDesktopConnectionsResult]:
    """
    Use this data source to get the list of the Workspace desktop connections within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_connections()
    ```

    ### Filter desktops by user name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    user_names = config.require_object("userNames")
    test = huaweicloud.Workspace.get_desktop_connections(user_names=user_names)
    ```

    ### Filter desktops by connection status

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connect_status = config.require_object("connectStatus")
    test = huaweicloud.Workspace.get_desktop_connections(connect_status=connect_status)
    ```


    :param _builtins.str connect_status: Specifies the connection status of the desktop.  
           The valid values are as follows:
           + **UNREGISTER**: The desktop is not registered or powered off.
           + **REGISTERED**: The desktop is registered and waiting for user connection.
           + **CONNECTED**: The user has successfully connected and is using the desktop.
           + **DISCONNECTED**: The desktop is disconnected from the client.
    :param _builtins.str region: Specifies the region where the desktop connections are located.
    :param Sequence[_builtins.str] user_names: Specifies the list of desktop users to be queried.
           The user_names don't support fuzzy match.
    """
    __args__ = dict()
    __args__['connectStatus'] = connect_status
    __args__['region'] = region
    __args__['userNames'] = user_names
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getDesktopConnections:getDesktopConnections', __args__, opts=opts, typ=GetDesktopConnectionsResult)
    return __ret__.apply(lambda __response__: GetDesktopConnectionsResult(
        connect_status=pulumi.get(__response__, 'connect_status'),
        desktop_connections=pulumi.get(__response__, 'desktop_connections'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        user_names=pulumi.get(__response__, 'user_names')))
