# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAppScheduleTaskFutureExecutionsResult',
    'AwaitableGetAppScheduleTaskFutureExecutionsResult',
    'get_app_schedule_task_future_executions',
    'get_app_schedule_task_future_executions_output',
]

@pulumi.output_type
class GetAppScheduleTaskFutureExecutionsResult:
    """
    A collection of values returned by getAppScheduleTaskFutureExecutions.
    """
    def __init__(__self__, date_list=None, day_interval=None, expire_time=None, future_executions=None, id=None, month_list=None, region=None, scheduled_date=None, scheduled_time=None, scheduled_type=None, time_zone=None, week_list=None):
        if date_list and not isinstance(date_list, str):
            raise TypeError("Expected argument 'date_list' to be a str")
        pulumi.set(__self__, "date_list", date_list)
        if day_interval and not isinstance(day_interval, int):
            raise TypeError("Expected argument 'day_interval' to be a int")
        pulumi.set(__self__, "day_interval", day_interval)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if future_executions and not isinstance(future_executions, list):
            raise TypeError("Expected argument 'future_executions' to be a list")
        pulumi.set(__self__, "future_executions", future_executions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if month_list and not isinstance(month_list, str):
            raise TypeError("Expected argument 'month_list' to be a str")
        pulumi.set(__self__, "month_list", month_list)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scheduled_date and not isinstance(scheduled_date, str):
            raise TypeError("Expected argument 'scheduled_date' to be a str")
        pulumi.set(__self__, "scheduled_date", scheduled_date)
        if scheduled_time and not isinstance(scheduled_time, str):
            raise TypeError("Expected argument 'scheduled_time' to be a str")
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        if scheduled_type and not isinstance(scheduled_type, str):
            raise TypeError("Expected argument 'scheduled_type' to be a str")
        pulumi.set(__self__, "scheduled_type", scheduled_type)
        if time_zone and not isinstance(time_zone, str):
            raise TypeError("Expected argument 'time_zone' to be a str")
        pulumi.set(__self__, "time_zone", time_zone)
        if week_list and not isinstance(week_list, str):
            raise TypeError("Expected argument 'week_list' to be a str")
        pulumi.set(__self__, "week_list", week_list)

    @_builtins.property
    @pulumi.getter(name="dateList")
    def date_list(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_list")

    @_builtins.property
    @pulumi.getter(name="dayInterval")
    def day_interval(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "day_interval")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="futureExecutions")
    def future_executions(self) -> Sequence[_builtins.str]:
        """
        The list of future execution times that match the filter parameters.
        """
        return pulumi.get(self, "future_executions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="monthList")
    def month_list(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "month_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scheduledDate")
    def scheduled_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scheduled_date")

    @_builtins.property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> _builtins.str:
        return pulumi.get(self, "scheduled_time")

    @_builtins.property
    @pulumi.getter(name="scheduledType")
    def scheduled_type(self) -> _builtins.str:
        return pulumi.get(self, "scheduled_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The time zone corresponding to the execution times.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="weekList")
    def week_list(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "week_list")


class AwaitableGetAppScheduleTaskFutureExecutionsResult(GetAppScheduleTaskFutureExecutionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppScheduleTaskFutureExecutionsResult(
            date_list=self.date_list,
            day_interval=self.day_interval,
            expire_time=self.expire_time,
            future_executions=self.future_executions,
            id=self.id,
            month_list=self.month_list,
            region=self.region,
            scheduled_date=self.scheduled_date,
            scheduled_time=self.scheduled_time,
            scheduled_type=self.scheduled_type,
            time_zone=self.time_zone,
            week_list=self.week_list)


def get_app_schedule_task_future_executions(date_list: Optional[_builtins.str] = None,
                                            day_interval: Optional[_builtins.int] = None,
                                            expire_time: Optional[_builtins.str] = None,
                                            month_list: Optional[_builtins.str] = None,
                                            region: Optional[_builtins.str] = None,
                                            scheduled_date: Optional[_builtins.str] = None,
                                            scheduled_time: Optional[_builtins.str] = None,
                                            scheduled_type: Optional[_builtins.str] = None,
                                            time_zone: Optional[_builtins.str] = None,
                                            week_list: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppScheduleTaskFutureExecutionsResult:
    """
    Use this data source to get the future execution time list of Workspace APP schedule task within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scheduled_time = config.require_object("scheduledTime")
    test = huaweicloud.Workspace.get_app_schedule_task_future_executions(scheduled_type="DAY",
        scheduled_time=scheduled_time,
        day_interval=1)
    ```


    :param _builtins.str date_list: Specifies the days of month when the scheduled task is to be executed.  
           The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
           `L` can only be used alone, and cannot be used together with other values.
           This parameter is **required** when `scheduled_type` is set to **MONTH**.
    :param _builtins.int day_interval: Specifies the interval in days for the scheduled task is to be executed.  
           The valid value ranges from `1` to `31`.
           This parameter is **required** when `scheduled_type` is set to **DAY**.
    :param _builtins.str expire_time: Specifies the expiration time of the schedule task.
    :param _builtins.str month_list: Specifies the month when the scheduled task is to be executed.  
           The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
           This parameter is **required** when `scheduled_type` is set to **MONTH**.
    :param _builtins.str region: Specifies the region where the schedule task is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str scheduled_date: Specifies the fixed date when the scheduled task is to be executed.  
           The format is `YYYY-MM-dd`.
           This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
    :param _builtins.str scheduled_time: Specifies the execution time of the schedule task.  
           The format is `HH:mm:ss`.
    :param _builtins.str scheduled_type: Specifies the type of execution cycle.  
           The valid values are as follows:
           + **FIXED_TIME**
           + **DAY**
           + **WEEK**
           + **MONTH**
    :param _builtins.str time_zone: Specifies the time zone of the schedule task.  
           Defaults to **Asia/Shanghai**.
    :param _builtins.str week_list: Specifies the days of the weeks when the scheduled task is to be executed.  
           The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
           `1` means Sunday, `2` means Monday, and so on.
           This parameter is **required** when `scheduled_type` is set to **WEEK**.
    """
    __args__ = dict()
    __args__['dateList'] = date_list
    __args__['dayInterval'] = day_interval
    __args__['expireTime'] = expire_time
    __args__['monthList'] = month_list
    __args__['region'] = region
    __args__['scheduledDate'] = scheduled_date
    __args__['scheduledTime'] = scheduled_time
    __args__['scheduledType'] = scheduled_type
    __args__['timeZone'] = time_zone
    __args__['weekList'] = week_list
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppScheduleTaskFutureExecutions:getAppScheduleTaskFutureExecutions', __args__, opts=opts, typ=GetAppScheduleTaskFutureExecutionsResult).value

    return AwaitableGetAppScheduleTaskFutureExecutionsResult(
        date_list=pulumi.get(__ret__, 'date_list'),
        day_interval=pulumi.get(__ret__, 'day_interval'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        future_executions=pulumi.get(__ret__, 'future_executions'),
        id=pulumi.get(__ret__, 'id'),
        month_list=pulumi.get(__ret__, 'month_list'),
        region=pulumi.get(__ret__, 'region'),
        scheduled_date=pulumi.get(__ret__, 'scheduled_date'),
        scheduled_time=pulumi.get(__ret__, 'scheduled_time'),
        scheduled_type=pulumi.get(__ret__, 'scheduled_type'),
        time_zone=pulumi.get(__ret__, 'time_zone'),
        week_list=pulumi.get(__ret__, 'week_list'))
def get_app_schedule_task_future_executions_output(date_list: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   day_interval: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                   expire_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   month_list: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   scheduled_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   scheduled_time: Optional[pulumi.Input[_builtins.str]] = None,
                                                   scheduled_type: Optional[pulumi.Input[_builtins.str]] = None,
                                                   time_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   week_list: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppScheduleTaskFutureExecutionsResult]:
    """
    Use this data source to get the future execution time list of Workspace APP schedule task within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scheduled_time = config.require_object("scheduledTime")
    test = huaweicloud.Workspace.get_app_schedule_task_future_executions(scheduled_type="DAY",
        scheduled_time=scheduled_time,
        day_interval=1)
    ```


    :param _builtins.str date_list: Specifies the days of month when the scheduled task is to be executed.  
           The valid value ranges from `1` to `31` and `L` (means the last day), separated by commas, e.g. `1,2,28` or `L`.
           `L` can only be used alone, and cannot be used together with other values.
           This parameter is **required** when `scheduled_type` is set to **MONTH**.
    :param _builtins.int day_interval: Specifies the interval in days for the scheduled task is to be executed.  
           The valid value ranges from `1` to `31`.
           This parameter is **required** when `scheduled_type` is set to **DAY**.
    :param _builtins.str expire_time: Specifies the expiration time of the schedule task.
    :param _builtins.str month_list: Specifies the month when the scheduled task is to be executed.  
           The valid value ranges from `1` to `12`, separated by commas, e.g. `1,3,12`.
           This parameter is **required** when `scheduled_type` is set to **MONTH**.
    :param _builtins.str region: Specifies the region where the schedule task is located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str scheduled_date: Specifies the fixed date when the scheduled task is to be executed.  
           The format is `YYYY-MM-dd`.
           This parameter is **required** when `scheduled_type` is set to **FIXED_TIME**.
    :param _builtins.str scheduled_time: Specifies the execution time of the schedule task.  
           The format is `HH:mm:ss`.
    :param _builtins.str scheduled_type: Specifies the type of execution cycle.  
           The valid values are as follows:
           + **FIXED_TIME**
           + **DAY**
           + **WEEK**
           + **MONTH**
    :param _builtins.str time_zone: Specifies the time zone of the schedule task.  
           Defaults to **Asia/Shanghai**.
    :param _builtins.str week_list: Specifies the days of the weeks when the scheduled task is to be executed.  
           The valid value ranges from `1` to `7`, separated by commas, e.g. `1,2,7`.
           `1` means Sunday, `2` means Monday, and so on.
           This parameter is **required** when `scheduled_type` is set to **WEEK**.
    """
    __args__ = dict()
    __args__['dateList'] = date_list
    __args__['dayInterval'] = day_interval
    __args__['expireTime'] = expire_time
    __args__['monthList'] = month_list
    __args__['region'] = region
    __args__['scheduledDate'] = scheduled_date
    __args__['scheduledTime'] = scheduled_time
    __args__['scheduledType'] = scheduled_type
    __args__['timeZone'] = time_zone
    __args__['weekList'] = week_list
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppScheduleTaskFutureExecutions:getAppScheduleTaskFutureExecutions', __args__, opts=opts, typ=GetAppScheduleTaskFutureExecutionsResult)
    return __ret__.apply(lambda __response__: GetAppScheduleTaskFutureExecutionsResult(
        date_list=pulumi.get(__response__, 'date_list'),
        day_interval=pulumi.get(__response__, 'day_interval'),
        expire_time=pulumi.get(__response__, 'expire_time'),
        future_executions=pulumi.get(__response__, 'future_executions'),
        id=pulumi.get(__response__, 'id'),
        month_list=pulumi.get(__response__, 'month_list'),
        region=pulumi.get(__response__, 'region'),
        scheduled_date=pulumi.get(__response__, 'scheduled_date'),
        scheduled_time=pulumi.get(__response__, 'scheduled_time'),
        scheduled_type=pulumi.get(__response__, 'scheduled_type'),
        time_zone=pulumi.get(__response__, 'time_zone'),
        week_list=pulumi.get(__response__, 'week_list')))
