# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceResult',
    'AwaitableGetServiceResult',
    'get_service',
    'get_service_output',
]

@pulumi.output_type
class GetServiceResult:
    """
    A collection of values returned by getService.
    """
    def __init__(__self__, access_mode=None, ad_domains=None, auth_type=None, dedicated_subnets=None, desktop_security_groups=None, enterprise_id=None, id=None, infrastructure_security_groups=None, internet_access_address=None, internet_access_port=None, is_locked=None, lock_reason=None, lock_time=None, management_subnet_cidr=None, network_ids=None, otp_config_infos=None, region=None, status=None, vpc_id=None):
        if access_mode and not isinstance(access_mode, str):
            raise TypeError("Expected argument 'access_mode' to be a str")
        pulumi.set(__self__, "access_mode", access_mode)
        if ad_domains and not isinstance(ad_domains, list):
            raise TypeError("Expected argument 'ad_domains' to be a list")
        pulumi.set(__self__, "ad_domains", ad_domains)
        if auth_type and not isinstance(auth_type, str):
            raise TypeError("Expected argument 'auth_type' to be a str")
        pulumi.set(__self__, "auth_type", auth_type)
        if dedicated_subnets and not isinstance(dedicated_subnets, list):
            raise TypeError("Expected argument 'dedicated_subnets' to be a list")
        pulumi.set(__self__, "dedicated_subnets", dedicated_subnets)
        if desktop_security_groups and not isinstance(desktop_security_groups, list):
            raise TypeError("Expected argument 'desktop_security_groups' to be a list")
        pulumi.set(__self__, "desktop_security_groups", desktop_security_groups)
        if enterprise_id and not isinstance(enterprise_id, str):
            raise TypeError("Expected argument 'enterprise_id' to be a str")
        pulumi.set(__self__, "enterprise_id", enterprise_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if infrastructure_security_groups and not isinstance(infrastructure_security_groups, list):
            raise TypeError("Expected argument 'infrastructure_security_groups' to be a list")
        pulumi.set(__self__, "infrastructure_security_groups", infrastructure_security_groups)
        if internet_access_address and not isinstance(internet_access_address, str):
            raise TypeError("Expected argument 'internet_access_address' to be a str")
        pulumi.set(__self__, "internet_access_address", internet_access_address)
        if internet_access_port and not isinstance(internet_access_port, int):
            raise TypeError("Expected argument 'internet_access_port' to be a int")
        pulumi.set(__self__, "internet_access_port", internet_access_port)
        if is_locked and not isinstance(is_locked, int):
            raise TypeError("Expected argument 'is_locked' to be a int")
        pulumi.set(__self__, "is_locked", is_locked)
        if lock_reason and not isinstance(lock_reason, str):
            raise TypeError("Expected argument 'lock_reason' to be a str")
        pulumi.set(__self__, "lock_reason", lock_reason)
        if lock_time and not isinstance(lock_time, str):
            raise TypeError("Expected argument 'lock_time' to be a str")
        pulumi.set(__self__, "lock_time", lock_time)
        if management_subnet_cidr and not isinstance(management_subnet_cidr, str):
            raise TypeError("Expected argument 'management_subnet_cidr' to be a str")
        pulumi.set(__self__, "management_subnet_cidr", management_subnet_cidr)
        if network_ids and not isinstance(network_ids, list):
            raise TypeError("Expected argument 'network_ids' to be a list")
        pulumi.set(__self__, "network_ids", network_ids)
        if otp_config_infos and not isinstance(otp_config_infos, list):
            raise TypeError("Expected argument 'otp_config_infos' to be a list")
        pulumi.set(__self__, "otp_config_infos", otp_config_infos)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> _builtins.str:
        """
        The access mode of Workspace service.
        + **INTERNET**: Access through Internet.
        + **DEDICATED**: Access through Direct Connect.
        + **DEDICATED**: Access through Internet or Direct Connect.
        """
        return pulumi.get(self, "access_mode")

    @_builtins.property
    @pulumi.getter(name="adDomains")
    def ad_domains(self) -> Sequence['outputs.GetServiceAdDomainResult']:
        """
        The configuration of AD domain.  
        The ad_domain structure is documented below.
        """
        return pulumi.get(self, "ad_domains")

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        The authentication type of Workspace service.
        + **LITE_AS**: Local authentication.
        + **LOCAL_AD**: Local AD.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="dedicatedSubnets")
    def dedicated_subnets(self) -> Sequence[_builtins.str]:
        """
        The subnet segments of the dedicated access.
        """
        return pulumi.get(self, "dedicated_subnets")

    @_builtins.property
    @pulumi.getter(name="desktopSecurityGroups")
    def desktop_security_groups(self) -> Sequence['outputs.GetServiceDesktopSecurityGroupResult']:
        """
        The desktop security group automatically created under the specified VPC after the service
        is registered.
        The desktop_security_group structure is documented below.
        """
        return pulumi.get(self, "desktop_security_groups")

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> _builtins.str:
        """
        The enterprise ID.
        """
        return pulumi.get(self, "enterprise_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="infrastructureSecurityGroups")
    def infrastructure_security_groups(self) -> Sequence['outputs.GetServiceInfrastructureSecurityGroupResult']:
        """
        The management component security group automatically created under the specified
        VPC after service is registered.
        The infrastructure_security_group structure is documented below.
        """
        return pulumi.get(self, "infrastructure_security_groups")

    @_builtins.property
    @pulumi.getter(name="internetAccessAddress")
    def internet_access_address(self) -> _builtins.str:
        """
        The internet access address.
        """
        return pulumi.get(self, "internet_access_address")

    @_builtins.property
    @pulumi.getter(name="internetAccessPort")
    def internet_access_port(self) -> _builtins.int:
        """
        The internet access port.
        """
        return pulumi.get(self, "internet_access_port")

    @_builtins.property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> _builtins.int:
        """
        Whether the service is locked.
        + **0**: unlocked.
        + **1**: locked.
        """
        return pulumi.get(self, "is_locked")

    @_builtins.property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> _builtins.str:
        """
        The lock reason of the service.
        """
        return pulumi.get(self, "lock_reason")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> _builtins.str:
        """
        The time when the service is locked.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter(name="managementSubnetCidr")
    def management_subnet_cidr(self) -> _builtins.str:
        """
        The subnet segment of the management component.
        """
        return pulumi.get(self, "management_subnet_cidr")

    @_builtins.property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Sequence[_builtins.str]:
        """
        The network ID list of subnets that the service have.
        """
        return pulumi.get(self, "network_ids")

    @_builtins.property
    @pulumi.getter(name="otpConfigInfos")
    def otp_config_infos(self) -> Sequence['outputs.GetServiceOtpConfigInfoResult']:
        """
        The configuration of auxiliary authentication.  
        The otp_config_info structure is documented below.
        """
        return pulumi.get(self, "otp_config_infos")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the Workspace service.
        + **SUBSCRIBED**: The service has been subscribed.
        + **SUBSCRIPTION_FAILED**: The service cannot be subscribed.
        + **DEREGISTERING**: The service is being unsubscribed.
        + **DEREGISTRATION_FAILED**: The service cannot be unsubscribed.
        + **CLOSED**: The service has been unsubscribed and is not subscribed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC ID to which the service belongs.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            access_mode=self.access_mode,
            ad_domains=self.ad_domains,
            auth_type=self.auth_type,
            dedicated_subnets=self.dedicated_subnets,
            desktop_security_groups=self.desktop_security_groups,
            enterprise_id=self.enterprise_id,
            id=self.id,
            infrastructure_security_groups=self.infrastructure_security_groups,
            internet_access_address=self.internet_access_address,
            internet_access_port=self.internet_access_port,
            is_locked=self.is_locked,
            lock_reason=self.lock_reason,
            lock_time=self.lock_time,
            management_subnet_cidr=self.management_subnet_cidr,
            network_ids=self.network_ids,
            otp_config_infos=self.otp_config_infos,
            region=self.region,
            status=self.status,
            vpc_id=self.vpc_id)


def get_service(region: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceResult:
    """
    Use this data source to get the configuration of the Workspace service within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_service()
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getService:getService', __args__, opts=opts, typ=GetServiceResult).value

    return AwaitableGetServiceResult(
        access_mode=pulumi.get(__ret__, 'access_mode'),
        ad_domains=pulumi.get(__ret__, 'ad_domains'),
        auth_type=pulumi.get(__ret__, 'auth_type'),
        dedicated_subnets=pulumi.get(__ret__, 'dedicated_subnets'),
        desktop_security_groups=pulumi.get(__ret__, 'desktop_security_groups'),
        enterprise_id=pulumi.get(__ret__, 'enterprise_id'),
        id=pulumi.get(__ret__, 'id'),
        infrastructure_security_groups=pulumi.get(__ret__, 'infrastructure_security_groups'),
        internet_access_address=pulumi.get(__ret__, 'internet_access_address'),
        internet_access_port=pulumi.get(__ret__, 'internet_access_port'),
        is_locked=pulumi.get(__ret__, 'is_locked'),
        lock_reason=pulumi.get(__ret__, 'lock_reason'),
        lock_time=pulumi.get(__ret__, 'lock_time'),
        management_subnet_cidr=pulumi.get(__ret__, 'management_subnet_cidr'),
        network_ids=pulumi.get(__ret__, 'network_ids'),
        otp_config_infos=pulumi.get(__ret__, 'otp_config_infos'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_service_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceResult]:
    """
    Use this data source to get the configuration of the Workspace service within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_service()
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getService:getService', __args__, opts=opts, typ=GetServiceResult)
    return __ret__.apply(lambda __response__: GetServiceResult(
        access_mode=pulumi.get(__response__, 'access_mode'),
        ad_domains=pulumi.get(__response__, 'ad_domains'),
        auth_type=pulumi.get(__response__, 'auth_type'),
        dedicated_subnets=pulumi.get(__response__, 'dedicated_subnets'),
        desktop_security_groups=pulumi.get(__response__, 'desktop_security_groups'),
        enterprise_id=pulumi.get(__response__, 'enterprise_id'),
        id=pulumi.get(__response__, 'id'),
        infrastructure_security_groups=pulumi.get(__response__, 'infrastructure_security_groups'),
        internet_access_address=pulumi.get(__response__, 'internet_access_address'),
        internet_access_port=pulumi.get(__response__, 'internet_access_port'),
        is_locked=pulumi.get(__response__, 'is_locked'),
        lock_reason=pulumi.get(__response__, 'lock_reason'),
        lock_time=pulumi.get(__response__, 'lock_time'),
        management_subnet_cidr=pulumi.get(__response__, 'management_subnet_cidr'),
        network_ids=pulumi.get(__response__, 'network_ids'),
        otp_config_infos=pulumi.get(__response__, 'otp_config_infos'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
