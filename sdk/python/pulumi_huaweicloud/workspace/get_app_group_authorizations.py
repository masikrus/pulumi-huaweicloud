# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppGroupAuthorizationsResult',
    'AwaitableGetAppGroupAuthorizationsResult',
    'get_app_group_authorizations',
    'get_app_group_authorizations_output',
]

@pulumi.output_type
class GetAppGroupAuthorizationsResult:
    """
    A collection of values returned by getAppGroupAuthorizations.
    """
    def __init__(__self__, account=None, account_type=None, app_group_id=None, authorizations=None, id=None, region=None):
        if account and not isinstance(account, str):
            raise TypeError("Expected argument 'account' to be a str")
        pulumi.set(__self__, "account", account)
        if account_type and not isinstance(account_type, str):
            raise TypeError("Expected argument 'account_type' to be a str")
        pulumi.set(__self__, "account_type", account_type)
        if app_group_id and not isinstance(app_group_id, str):
            raise TypeError("Expected argument 'app_group_id' to be a str")
        pulumi.set(__self__, "app_group_id", app_group_id)
        if authorizations and not isinstance(authorizations, list):
            raise TypeError("Expected argument 'authorizations' to be a list")
        pulumi.set(__self__, "authorizations", authorizations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[_builtins.str]:
        """
        The name of the authorized account.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[_builtins.str]:
        """
        The type of the authorized account.
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> Optional[_builtins.str]:
        """
        The application group ID corresponding to the authorized account.
        """
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter
    def authorizations(self) -> Sequence['outputs.GetAppGroupAuthorizationsAuthorizationResult']:
        """
        All authorizations that match the filter parameters.
        """
        return pulumi.get(self, "authorizations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAppGroupAuthorizationsResult(GetAppGroupAuthorizationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppGroupAuthorizationsResult(
            account=self.account,
            account_type=self.account_type,
            app_group_id=self.app_group_id,
            authorizations=self.authorizations,
            id=self.id,
            region=self.region)


def get_app_group_authorizations(account: Optional[_builtins.str] = None,
                                 account_type: Optional[_builtins.str] = None,
                                 app_group_id: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppGroupAuthorizationsResult:
    """
    Use this data source to get the list of the application group authorizations within HuaweiCloud.

    ## Example Usage

    ### Query all application group authorizations

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_group_authorizations()
    ```

    ### Query the application group authorizations that contains the same name segment and the account type is USER

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    account_name_prefix = config.require_object("accountNamePrefix")
    test = huaweicloud.Workspace.get_app_group_authorizations(account=account_name_prefix,
        account_type="USER")
    ```


    :param _builtins.str account: Specifies the name of the authorized account. Fuzzy search is supported.
    :param _builtins.str account_type: Specifies the type of the authorized account.  
           The valid values are as follows:
           + **USER**
           + **USER_GROUP**
    :param _builtins.str app_group_id: Specifies the authorized application group ID.
    :param _builtins.str region: Specifies the region in which to query the authorizations.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['account'] = account
    __args__['accountType'] = account_type
    __args__['appGroupId'] = app_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppGroupAuthorizations:getAppGroupAuthorizations', __args__, opts=opts, typ=GetAppGroupAuthorizationsResult).value

    return AwaitableGetAppGroupAuthorizationsResult(
        account=pulumi.get(__ret__, 'account'),
        account_type=pulumi.get(__ret__, 'account_type'),
        app_group_id=pulumi.get(__ret__, 'app_group_id'),
        authorizations=pulumi.get(__ret__, 'authorizations'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_app_group_authorizations_output(account: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        account_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        app_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppGroupAuthorizationsResult]:
    """
    Use this data source to get the list of the application group authorizations within HuaweiCloud.

    ## Example Usage

    ### Query all application group authorizations

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_app_group_authorizations()
    ```

    ### Query the application group authorizations that contains the same name segment and the account type is USER

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    account_name_prefix = config.require_object("accountNamePrefix")
    test = huaweicloud.Workspace.get_app_group_authorizations(account=account_name_prefix,
        account_type="USER")
    ```


    :param _builtins.str account: Specifies the name of the authorized account. Fuzzy search is supported.
    :param _builtins.str account_type: Specifies the type of the authorized account.  
           The valid values are as follows:
           + **USER**
           + **USER_GROUP**
    :param _builtins.str app_group_id: Specifies the authorized application group ID.
    :param _builtins.str region: Specifies the region in which to query the authorizations.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['account'] = account
    __args__['accountType'] = account_type
    __args__['appGroupId'] = app_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppGroupAuthorizations:getAppGroupAuthorizations', __args__, opts=opts, typ=GetAppGroupAuthorizationsResult)
    return __ret__.apply(lambda __response__: GetAppGroupAuthorizationsResult(
        account=pulumi.get(__response__, 'account'),
        account_type=pulumi.get(__response__, 'account_type'),
        app_group_id=pulumi.get(__response__, 'app_group_id'),
        authorizations=pulumi.get(__response__, 'authorizations'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
