# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAppVncRemoteResult',
    'AwaitableGetAppVncRemoteResult',
    'get_app_vnc_remote',
    'get_app_vnc_remote_output',
]

@pulumi.output_type
class GetAppVncRemoteResult:
    """
    A collection of values returned by getAppVncRemote.
    """
    def __init__(__self__, id=None, protocol=None, region=None, server_id=None, type=None, url=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The login type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The remote login console address.
        """
        return pulumi.get(self, "url")


class AwaitableGetAppVncRemoteResult(GetAppVncRemoteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppVncRemoteResult(
            id=self.id,
            protocol=self.protocol,
            region=self.region,
            server_id=self.server_id,
            type=self.type,
            url=self.url)


def get_app_vnc_remote(region: Optional[_builtins.str] = None,
                       server_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppVncRemoteResult:
    """
    Use this data source to get the VNC remote information of a Workspace APP server within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Workspace.get_app_vnc_remote(server_id=server_id)
    ```


    :param _builtins.str region: Specifies the region where the APP server is located.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the ID of the APP server to get VNC remote information.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppVncRemote:getAppVncRemote', __args__, opts=opts, typ=GetAppVncRemoteResult).value

    return AwaitableGetAppVncRemoteResult(
        id=pulumi.get(__ret__, 'id'),
        protocol=pulumi.get(__ret__, 'protocol'),
        region=pulumi.get(__ret__, 'region'),
        server_id=pulumi.get(__ret__, 'server_id'),
        type=pulumi.get(__ret__, 'type'),
        url=pulumi.get(__ret__, 'url'))
def get_app_vnc_remote_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              server_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppVncRemoteResult]:
    """
    Use this data source to get the VNC remote information of a Workspace APP server within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Workspace.get_app_vnc_remote(server_id=server_id)
    ```


    :param _builtins.str region: Specifies the region where the APP server is located.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the ID of the APP server to get VNC remote information.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppVncRemote:getAppVncRemote', __args__, opts=opts, typ=GetAppVncRemoteResult)
    return __ret__.apply(lambda __response__: GetAppVncRemoteResult(
        id=pulumi.get(__response__, 'id'),
        protocol=pulumi.get(__response__, 'protocol'),
        region=pulumi.get(__response__, 'region'),
        server_id=pulumi.get(__response__, 'server_id'),
        type=pulumi.get(__response__, 'type'),
        url=pulumi.get(__response__, 'url')))
