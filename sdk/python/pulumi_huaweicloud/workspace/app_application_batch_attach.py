# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppApplicationBatchAttachArgs', 'AppApplicationBatchAttach']

@pulumi.input_type
class AppApplicationBatchAttachArgs:
    def __init__(__self__, *,
                 record_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 server_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppApplicationBatchAttach resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] record_ids: Specifies the list of application record IDs to be attach.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the image server instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP is located.  
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "record_ids", record_ids)
        pulumi.set(__self__, "server_id", server_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="recordIds")
    def record_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of application record IDs to be attach.
        """
        return pulumi.get(self, "record_ids")

    @record_ids.setter
    def record_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "record_ids", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the image server instance.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Workspace APP is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppApplicationBatchAttachState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 record_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppApplicationBatchAttach resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] record_ids: Specifies the list of application record IDs to be attach.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the image server instance.
        :param pulumi.Input[_builtins.str] uri: The URI of the application attachment.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if record_ids is not None:
            pulumi.set(__self__, "record_ids", record_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="recordIds")
    def record_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of application record IDs to be attach.
        """
        return pulumi.get(self, "record_ids")

    @record_ids.setter
    def record_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "record_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Workspace APP is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the image server instance.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_id", value)

    @_builtins.property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI of the application attachment.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri", value)


@pulumi.type_token("huaweicloud:Workspace/appApplicationBatchAttach:AppApplicationBatchAttach")
class AppApplicationBatchAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 record_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to attach applications to Workspace APP image instance in HuaweiCloud.

        > This resource is a one-time action resource used to attach applications to specified image instance. Deleting resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_id = config.require_object("serverId")
        record_ids = config.require_object("recordIds")
        test = huaweicloud.workspace.AppApplicationBatchAttach("test",
            server_id=server_id,
            record_ids=record_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] record_ids: Specifies the list of application record IDs to be attach.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the image server instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppApplicationBatchAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to attach applications to Workspace APP image instance in HuaweiCloud.

        > This resource is a one-time action resource used to attach applications to specified image instance. Deleting resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_id = config.require_object("serverId")
        record_ids = config.require_object("recordIds")
        test = huaweicloud.workspace.AppApplicationBatchAttach("test",
            server_id=server_id,
            record_ids=record_ids)
        ```

        :param str resource_name: The name of the resource.
        :param AppApplicationBatchAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppApplicationBatchAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 record_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppApplicationBatchAttachArgs.__new__(AppApplicationBatchAttachArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if record_ids is None and not opts.urn:
                raise TypeError("Missing required property 'record_ids'")
            __props__.__dict__["record_ids"] = record_ids
            __props__.__dict__["region"] = region
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["uri"] = None
        super(AppApplicationBatchAttach, __self__).__init__(
            'huaweicloud:Workspace/appApplicationBatchAttach:AppApplicationBatchAttach',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            record_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server_id: Optional[pulumi.Input[_builtins.str]] = None,
            uri: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppApplicationBatchAttach':
        """
        Get an existing AppApplicationBatchAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] record_ids: Specifies the list of application record IDs to be attach.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP is located.  
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the image server instance.
        :param pulumi.Input[_builtins.str] uri: The URI of the application attachment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppApplicationBatchAttachState.__new__(_AppApplicationBatchAttachState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["record_ids"] = record_ids
        __props__.__dict__["region"] = region
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["uri"] = uri
        return AppApplicationBatchAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="recordIds")
    def record_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of application record IDs to be attach.
        """
        return pulumi.get(self, "record_ids")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the Workspace APP is located.  
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the image server instance.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> pulumi.Output[_builtins.str]:
        """
        The URI of the application attachment.
        """
        return pulumi.get(self, "uri")

