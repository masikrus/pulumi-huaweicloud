# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationRuleArgs', 'ApplicationRule']

@pulumi.input_type
class ApplicationRuleArgs:
    def __init__(__self__, *,
                 detail: pulumi.Input['ApplicationRuleDetailArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationRule resource.
        :param pulumi.Input['ApplicationRuleDetailArgs'] detail: Specifies the detail of the application rule.  
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application rule.
               
               <a name="workspace_application_rule_detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application rule.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application rule is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "detail", detail)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> pulumi.Input['ApplicationRuleDetailArgs']:
        """
        Specifies the detail of the application rule.  
        The detail structure is documented below.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: pulumi.Input['ApplicationRuleDetailArgs']):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application rule.

        <a name="workspace_application_rule_detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application rule.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application rule is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ApplicationRuleState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input['ApplicationRuleDetailArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApplicationRule resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application rule.
               
               <a name="workspace_application_rule_detail"></a>
               The `detail` block supports:
        :param pulumi.Input['ApplicationRuleDetailArgs'] detail: Specifies the detail of the application rule.  
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application rule.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application rule is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application rule.

        <a name="workspace_application_rule_detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input['ApplicationRuleDetailArgs']]:
        """
        Specifies the detail of the application rule.  
        The detail structure is documented below.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input['ApplicationRuleDetailArgs']]):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application rule.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the application rule is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Workspace/applicationRule:ApplicationRule")
class ApplicationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[Union['ApplicationRuleDetailArgs', 'ApplicationRuleDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Workspace application rule resource within HuaweiCloud.

        ## Example Usage

        ### Create a product rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        rule_name = config.require_object("ruleName")
        rule_description = config.require_object("ruleDescription")
        identify_condition = config.require_object("identifyCondition")
        publisher = config.require_object("publisher")
        product_name = config.require_object("productName")
        process_name = config.require_object("processName")
        support_os = config.require_object("supportOs")
        test = huaweicloud.workspace.ApplicationRule("test",
            name=rule_name,
            description=rule_description,
            detail={
                "scope": "PRODUCT",
                "product_rule": {
                    "identify_condition": identify_condition,
                    "publisher": publisher,
                    "product_name": product_name,
                    "process_name": process_name,
                    "support_os": support_os,
                    "version": "1.0",
                    "product_version": "2019",
                },
            })
        ```

        ### Create a Path Rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        rule_name = config.require_object("ruleName")
        rule_description = config.require_object("ruleDescription")
        install_path = config.require_object("installPath")
        test_path = huaweicloud.workspace.ApplicationRule("test_path",
            name=rule_name,
            description=rule_description,
            detail={
                "scope": "PATH",
                "path_rule": {
                    "path": install_path,
                },
            })
        ```

        ## Import

        Application rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/applicationRule:ApplicationRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application rule.
               
               <a name="workspace_application_rule_detail"></a>
               The `detail` block supports:
        :param pulumi.Input[Union['ApplicationRuleDetailArgs', 'ApplicationRuleDetailArgsDict']] detail: Specifies the detail of the application rule.  
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application rule.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application rule is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace application rule resource within HuaweiCloud.

        ## Example Usage

        ### Create a product rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        rule_name = config.require_object("ruleName")
        rule_description = config.require_object("ruleDescription")
        identify_condition = config.require_object("identifyCondition")
        publisher = config.require_object("publisher")
        product_name = config.require_object("productName")
        process_name = config.require_object("processName")
        support_os = config.require_object("supportOs")
        test = huaweicloud.workspace.ApplicationRule("test",
            name=rule_name,
            description=rule_description,
            detail={
                "scope": "PRODUCT",
                "product_rule": {
                    "identify_condition": identify_condition,
                    "publisher": publisher,
                    "product_name": product_name,
                    "process_name": process_name,
                    "support_os": support_os,
                    "version": "1.0",
                    "product_version": "2019",
                },
            })
        ```

        ### Create a Path Rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        rule_name = config.require_object("ruleName")
        rule_description = config.require_object("ruleDescription")
        install_path = config.require_object("installPath")
        test_path = huaweicloud.workspace.ApplicationRule("test_path",
            name=rule_name,
            description=rule_description,
            detail={
                "scope": "PATH",
                "path_rule": {
                    "path": install_path,
                },
            })
        ```

        ## Import

        Application rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/applicationRule:ApplicationRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[Union['ApplicationRuleDetailArgs', 'ApplicationRuleDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationRuleArgs.__new__(ApplicationRuleArgs)

            __props__.__dict__["description"] = description
            if detail is None and not opts.urn:
                raise TypeError("Missing required property 'detail'")
            __props__.__dict__["detail"] = detail
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(ApplicationRule, __self__).__init__(
            'huaweicloud:Workspace/applicationRule:ApplicationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            detail: Optional[pulumi.Input[Union['ApplicationRuleDetailArgs', 'ApplicationRuleDetailArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApplicationRule':
        """
        Get an existing ApplicationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application rule.
               
               <a name="workspace_application_rule_detail"></a>
               The `detail` block supports:
        :param pulumi.Input[Union['ApplicationRuleDetailArgs', 'ApplicationRuleDetailArgsDict']] detail: Specifies the detail of the application rule.  
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application rule.  
               The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
               cannot contain spaces.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the application rule is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationRuleState.__new__(_ApplicationRuleState)

        __props__.__dict__["description"] = description
        __props__.__dict__["detail"] = detail
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return ApplicationRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the application rule.

        <a name="workspace_application_rule_detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> pulumi.Output['outputs.ApplicationRuleDetail']:
        """
        Specifies the detail of the application rule.  
        The detail structure is documented below.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the application rule.  
        The name must be `1` to `64` characters, only letters, digits, and underscores (_) are allowed, and the name
        cannot contain spaces.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the application rule is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

