# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppNasStorageArgs', 'AppNasStorage']

@pulumi.input_type
class AppNasStorageArgs:
    def __init__(__self__, *,
                 storage_metadata: pulumi.Input['AppNasStorageStorageMetadataArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppNasStorage resource.
        :param pulumi.Input['AppNasStorageStorageMetadataArgs'] storage_metadata: Specifies the metadata of the corresponding storage.  
               The storage_metadata structure is documented below.
               
               <a name="workspace_app_nas_storage_metadata"></a>
               The `storage_metadata` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the NAS storage.  
               The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the NAS storage is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        pulumi.set(__self__, "storage_metadata", storage_metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="storageMetadata")
    def storage_metadata(self) -> pulumi.Input['AppNasStorageStorageMetadataArgs']:
        """
        Specifies the metadata of the corresponding storage.  
        The storage_metadata structure is documented below.

        <a name="workspace_app_nas_storage_metadata"></a>
        The `storage_metadata` block supports:
        """
        return pulumi.get(self, "storage_metadata")

    @storage_metadata.setter
    def storage_metadata(self, value: pulumi.Input['AppNasStorageStorageMetadataArgs']):
        pulumi.set(self, "storage_metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the NAS storage.  
        The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the NAS storage is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppNasStorageState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_metadata: Optional[pulumi.Input['AppNasStorageStorageMetadataArgs']] = None):
        """
        Input properties used for looking up and filtering AppNasStorage resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the NAS storage.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the NAS storage.  
               The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the NAS storage is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input['AppNasStorageStorageMetadataArgs'] storage_metadata: Specifies the metadata of the corresponding storage.  
               The storage_metadata structure is documented below.
               
               <a name="workspace_app_nas_storage_metadata"></a>
               The `storage_metadata` block supports:
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_metadata is not None:
            pulumi.set(__self__, "storage_metadata", storage_metadata)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the NAS storage.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the NAS storage.  
        The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the NAS storage is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageMetadata")
    def storage_metadata(self) -> Optional[pulumi.Input['AppNasStorageStorageMetadataArgs']]:
        """
        Specifies the metadata of the corresponding storage.  
        The storage_metadata structure is documented below.

        <a name="workspace_app_nas_storage_metadata"></a>
        The `storage_metadata` block supports:
        """
        return pulumi.get(self, "storage_metadata")

    @storage_metadata.setter
    def storage_metadata(self, value: Optional[pulumi.Input['AppNasStorageStorageMetadataArgs']]):
        pulumi.set(self, "storage_metadata", value)


@pulumi.type_token("huaweicloud:Workspace/appNasStorage:AppNasStorage")
class AppNasStorage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_metadata: Optional[pulumi.Input[Union['AppNasStorageStorageMetadataArgs', 'AppNasStorageStorageMetadataArgsDict']]] = None,
                 __props__=None):
        """
        Manages a NAS storage resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ### Create a NAS storage via SFS (3.0) file system

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nas_storage_name = config.require_object("nasStorageName")
        sfs_file_system_name = config.require_object("sfsFileSystemName")
        test = huaweicloud.workspace.AppNasStorage("test",
            name=nas_storage_name,
            storage_metadata={
                "storage_handle": sfs_file_system_name,
                "storage_class": "sfs",
            })
        ```

        ## Import

        NAS storages can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appNasStorage:AppNasStorage test <id>
        ```

        If the NAS storage ID is unknow, the NAS storage name can be used as an alternative to ID.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appNasStorage:AppNasStorage test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the NAS storage.  
               The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the NAS storage is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[Union['AppNasStorageStorageMetadataArgs', 'AppNasStorageStorageMetadataArgsDict']] storage_metadata: Specifies the metadata of the corresponding storage.  
               The storage_metadata structure is documented below.
               
               <a name="workspace_app_nas_storage_metadata"></a>
               The `storage_metadata` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppNasStorageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a NAS storage resource of Workspace APP within HuaweiCloud.

        ## Example Usage

        ### Create a NAS storage via SFS (3.0) file system

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nas_storage_name = config.require_object("nasStorageName")
        sfs_file_system_name = config.require_object("sfsFileSystemName")
        test = huaweicloud.workspace.AppNasStorage("test",
            name=nas_storage_name,
            storage_metadata={
                "storage_handle": sfs_file_system_name,
                "storage_class": "sfs",
            })
        ```

        ## Import

        NAS storages can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appNasStorage:AppNasStorage test <id>
        ```

        If the NAS storage ID is unknow, the NAS storage name can be used as an alternative to ID.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appNasStorage:AppNasStorage test <name>
        ```

        :param str resource_name: The name of the resource.
        :param AppNasStorageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppNasStorageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_metadata: Optional[pulumi.Input[Union['AppNasStorageStorageMetadataArgs', 'AppNasStorageStorageMetadataArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppNasStorageArgs.__new__(AppNasStorageArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if storage_metadata is None and not opts.urn:
                raise TypeError("Missing required property 'storage_metadata'")
            __props__.__dict__["storage_metadata"] = storage_metadata
            __props__.__dict__["created_at"] = None
        super(AppNasStorage, __self__).__init__(
            'huaweicloud:Workspace/appNasStorage:AppNasStorage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            storage_metadata: Optional[pulumi.Input[Union['AppNasStorageStorageMetadataArgs', 'AppNasStorageStorageMetadataArgsDict']]] = None) -> 'AppNasStorage':
        """
        Get an existing AppNasStorage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the NAS storage.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the NAS storage.  
               The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the NAS storage is located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[Union['AppNasStorageStorageMetadataArgs', 'AppNasStorageStorageMetadataArgsDict']] storage_metadata: Specifies the metadata of the corresponding storage.  
               The storage_metadata structure is documented below.
               
               <a name="workspace_app_nas_storage_metadata"></a>
               The `storage_metadata` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppNasStorageState.__new__(_AppNasStorageState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["storage_metadata"] = storage_metadata
        return AppNasStorage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the NAS storage.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the NAS storage.  
        The valid length is limited from `1` to `128`, and allows visible characters or spaces, but cannot be all spaces.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the NAS storage is located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageMetadata")
    def storage_metadata(self) -> pulumi.Output['outputs.AppNasStorageStorageMetadata']:
        """
        Specifies the metadata of the corresponding storage.  
        The storage_metadata structure is documented below.

        <a name="workspace_app_nas_storage_metadata"></a>
        The `storage_metadata` block supports:
        """
        return pulumi.get(self, "storage_metadata")

