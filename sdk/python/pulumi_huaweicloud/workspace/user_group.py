# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserGroupArgs', 'UserGroup']

@pulumi.input_type
class UserGroupArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]] = None):
        """
        The set of arguments for constructing a UserGroup resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of user group.
               The valid values are as follows:
               + **LOCAL**: Local domain user group.
               + **AD**: AD domain user group.
        :param pulumi.Input[_builtins.str] description: Specifies the description of user group.
        :param pulumi.Input[_builtins.str] name: Specifies the user group name.  
               > AD domain user group do not support renaming.
        :param pulumi.Input[_builtins.str] region: The region in which to create the Workspace user group resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]] users: Specifies the user information under the user group.  
               The users structure is documented below.
               
               <a name="workspace_users"></a>
               The `users` block supports:
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of user group.
        The valid values are as follows:
        + **LOCAL**: Local domain user group.
        + **AD**: AD domain user group.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of user group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user group name.  
        > AD domain user group do not support renaming.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the Workspace user group resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]:
        """
        Specifies the user information under the user group.  
        The users structure is documented below.

        <a name="workspace_users"></a>
        The `users` block supports:
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _UserGroupState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering UserGroup resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the user group.
        :param pulumi.Input[_builtins.str] description: Specifies the description of user group.
        :param pulumi.Input[_builtins.str] name: Specifies the user group name.  
               > AD domain user group do not support renaming.
        :param pulumi.Input[_builtins.str] region: The region in which to create the Workspace user group resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of user group.
               The valid values are as follows:
               + **LOCAL**: Local domain user group.
               + **AD**: AD domain user group.
        :param pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]] users: Specifies the user information under the user group.  
               The users structure is documented below.
               
               <a name="workspace_users"></a>
               The `users` block supports:
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the user group.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of user group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user group name.  
        > AD domain user group do not support renaming.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the Workspace user group resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of user group.
        The valid values are as follows:
        + **LOCAL**: Local domain user group.
        + **AD**: AD domain user group.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]:
        """
        Specifies the user information under the user group.  
        The users structure is documented below.

        <a name="workspace_users"></a>
        The `users` block supports:
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("huaweicloud:Workspace/userGroup:UserGroup")
class UserGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a Workspace user group resource within HuaweiCloud.

        ## Example Usage

        ### Create a local domain user group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_name = config.require_object("groupName")
        test = huaweicloud.workspace.UserGroup("test",
            name=group_name,
            type="LOCAL",
            description="Created by script")
        ```

        ## Import

        The user group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/userGroup:UserGroup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of user group.
        :param pulumi.Input[_builtins.str] name: Specifies the user group name.  
               > AD domain user group do not support renaming.
        :param pulumi.Input[_builtins.str] region: The region in which to create the Workspace user group resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of user group.
               The valid values are as follows:
               + **LOCAL**: Local domain user group.
               + **AD**: AD domain user group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]] users: Specifies the user information under the user group.  
               The users structure is documented below.
               
               <a name="workspace_users"></a>
               The `users` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace user group resource within HuaweiCloud.

        ## Example Usage

        ### Create a local domain user group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_name = config.require_object("groupName")
        test = huaweicloud.workspace.UserGroup("test",
            name=group_name,
            type="LOCAL",
            description="Created by script")
        ```

        ## Import

        The user group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/userGroup:UserGroup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param UserGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserGroupArgs.__new__(UserGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["users"] = users
            __props__.__dict__["created_at"] = None
        super(UserGroup, __self__).__init__(
            'huaweicloud:Workspace/userGroup:UserGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None) -> 'UserGroup':
        """
        Get an existing UserGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the user group.
        :param pulumi.Input[_builtins.str] description: Specifies the description of user group.
        :param pulumi.Input[_builtins.str] name: Specifies the user group name.  
               > AD domain user group do not support renaming.
        :param pulumi.Input[_builtins.str] region: The region in which to create the Workspace user group resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of user group.
               The valid values are as follows:
               + **LOCAL**: Local domain user group.
               + **AD**: AD domain user group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]] users: Specifies the user information under the user group.  
               The users structure is documented below.
               
               <a name="workspace_users"></a>
               The `users` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserGroupState.__new__(_UserGroupState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["users"] = users
        return UserGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the user group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of user group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user group name.  
        > AD domain user group do not support renaming.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the Workspace user group resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of user group.
        The valid values are as follows:
        + **LOCAL**: Local domain user group.
        + **AD**: AD domain user group.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.UserGroupUser']]]:
        """
        Specifies the user information under the user group.  
        The users structure is documented below.

        <a name="workspace_users"></a>
        The `users` block supports:
        """
        return pulumi.get(self, "users")

