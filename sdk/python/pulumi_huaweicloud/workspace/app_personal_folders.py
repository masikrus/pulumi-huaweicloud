# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppPersonalFoldersArgs', 'AppPersonalFolders']

@pulumi.input_type
class AppPersonalFoldersArgs:
    def __init__(__self__, *,
                 assignments: pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]],
                 storage_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppPersonalFolders resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]] assignments: Specifies the assignment configuration of personal folders.  
               The assignments structure is documented below.
               
               <a name="workspace_app_personal_folder_assignment"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the personal folders belong.  
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the personal folders are located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        pulumi.set(__self__, "assignments", assignments)
        pulumi.set(__self__, "storage_id", storage_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]]:
        """
        Specifies the assignment configuration of personal folders.  
        The assignments structure is documented below.

        <a name="workspace_app_personal_folder_assignment"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]]):
        pulumi.set(self, "assignments", value)

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the NAS storage ID to which the personal folders belong.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

    @storage_id.setter
    def storage_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the personal folders are located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppPersonalFoldersState:
    def __init__(__self__, *,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppPersonalFolders resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]] assignments: Specifies the assignment configuration of personal folders.  
               The assignments structure is documented below.
               
               <a name="workspace_app_personal_folder_assignment"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the personal folders are located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the personal folders belong.  
               Change this parameter will create a new resource.
        """
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_id is not None:
            pulumi.set(__self__, "storage_id", storage_id)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]]]:
        """
        Specifies the assignment configuration of personal folders.  
        The assignments structure is documented below.

        <a name="workspace_app_personal_folder_assignment"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppPersonalFoldersAssignmentArgs']]]]):
        pulumi.set(self, "assignments", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the personal folders are located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the NAS storage ID to which the personal folders belong.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

    @storage_id.setter
    def storage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_id", value)


@pulumi.type_token("huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders")
class AppPersonalFolders(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppPersonalFoldersAssignmentArgs', 'AppPersonalFoldersAssignmentArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to assign or manages the personal folders under NAS storage of Workspace APP within HuaweiCloud.

        ## Example Usage

        ### Create a personal folder for each user with the same permission policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_app_nas_storage_id = config.require_object("workspaceAppNasStorageId")
        workspace_app_storage_policy_id = config.require_object("workspaceAppStoragePolicyId")
        workspace_user_names = config.require_object("workspaceUserNames")
        test = huaweicloud.workspace.AppPersonalFolders("test",
            assignments=[{
                "policy_statement_id": workspace_app_storage_policy_id,
                "attach": entry["value"],
                "attach_type": "USER",
            } for entry in [{"key": k, "value": v} for k, v in workspace_user_names]],
            storage_id=workspace_app_nas_storage_id)
        ```

        ## Import

        Personal folders can be imported using resource `id`, also ID of NAS storage to which personal folders belong, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders test <id>
        ```

        If the NAS storage ID is unknow, the NAS storage name can be used as an alternative to ID.

        The NAS storage name can be obtained through the console or data source (`huaweicloud_workspace_app_nas_storages`).

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders test <storage_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppPersonalFoldersAssignmentArgs', 'AppPersonalFoldersAssignmentArgsDict']]]] assignments: Specifies the assignment configuration of personal folders.  
               The assignments structure is documented below.
               
               <a name="workspace_app_personal_folder_assignment"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the personal folders are located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the personal folders belong.  
               Change this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppPersonalFoldersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to assign or manages the personal folders under NAS storage of Workspace APP within HuaweiCloud.

        ## Example Usage

        ### Create a personal folder for each user with the same permission policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_app_nas_storage_id = config.require_object("workspaceAppNasStorageId")
        workspace_app_storage_policy_id = config.require_object("workspaceAppStoragePolicyId")
        workspace_user_names = config.require_object("workspaceUserNames")
        test = huaweicloud.workspace.AppPersonalFolders("test",
            assignments=[{
                "policy_statement_id": workspace_app_storage_policy_id,
                "attach": entry["value"],
                "attach_type": "USER",
            } for entry in [{"key": k, "value": v} for k, v in workspace_user_names]],
            storage_id=workspace_app_nas_storage_id)
        ```

        ## Import

        Personal folders can be imported using resource `id`, also ID of NAS storage to which personal folders belong, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders test <id>
        ```

        If the NAS storage ID is unknow, the NAS storage name can be used as an alternative to ID.

        The NAS storage name can be obtained through the console or data source (`huaweicloud_workspace_app_nas_storages`).

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders test <storage_name>
        ```

        :param str resource_name: The name of the resource.
        :param AppPersonalFoldersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppPersonalFoldersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppPersonalFoldersAssignmentArgs', 'AppPersonalFoldersAssignmentArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppPersonalFoldersArgs.__new__(AppPersonalFoldersArgs)

            if assignments is None and not opts.urn:
                raise TypeError("Missing required property 'assignments'")
            __props__.__dict__["assignments"] = assignments
            __props__.__dict__["region"] = region
            if storage_id is None and not opts.urn:
                raise TypeError("Missing required property 'storage_id'")
            __props__.__dict__["storage_id"] = storage_id
        super(AppPersonalFolders, __self__).__init__(
            'huaweicloud:Workspace/appPersonalFolders:AppPersonalFolders',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppPersonalFoldersAssignmentArgs', 'AppPersonalFoldersAssignmentArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            storage_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppPersonalFolders':
        """
        Get an existing AppPersonalFolders resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppPersonalFoldersAssignmentArgs', 'AppPersonalFoldersAssignmentArgsDict']]]] assignments: Specifies the assignment configuration of personal folders.  
               The assignments structure is documented below.
               
               <a name="workspace_app_personal_folder_assignment"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the personal folders are located.  
               If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_id: Specifies the NAS storage ID to which the personal folders belong.  
               Change this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppPersonalFoldersState.__new__(_AppPersonalFoldersState)

        __props__.__dict__["assignments"] = assignments
        __props__.__dict__["region"] = region
        __props__.__dict__["storage_id"] = storage_id
        return AppPersonalFolders(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> pulumi.Output[Sequence['outputs.AppPersonalFoldersAssignment']]:
        """
        Specifies the assignment configuration of personal folders.  
        The assignments structure is documented below.

        <a name="workspace_app_personal_folder_assignment"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the personal folders are located.  
        If omitted, the provider-level region will be used. Change this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the NAS storage ID to which the personal folders belong.  
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_id")

