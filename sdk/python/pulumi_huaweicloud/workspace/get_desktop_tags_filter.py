# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDesktopTagsFilterResult',
    'AwaitableGetDesktopTagsFilterResult',
    'get_desktop_tags_filter',
    'get_desktop_tags_filter_output',
]

@pulumi.output_type
class GetDesktopTagsFilterResult:
    """
    A collection of values returned by getDesktopTagsFilter.
    """
    def __init__(__self__, desktops=None, id=None, matches=None, not_tags=None, not_tags_anies=None, region=None, tags=None, tags_anies=None, without_any_tag=None):
        if desktops and not isinstance(desktops, list):
            raise TypeError("Expected argument 'desktops' to be a list")
        pulumi.set(__self__, "desktops", desktops)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if not_tags and not isinstance(not_tags, list):
            raise TypeError("Expected argument 'not_tags' to be a list")
        pulumi.set(__self__, "not_tags", not_tags)
        if not_tags_anies and not isinstance(not_tags_anies, list):
            raise TypeError("Expected argument 'not_tags_anies' to be a list")
        pulumi.set(__self__, "not_tags_anies", not_tags_anies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tags_anies and not isinstance(tags_anies, list):
            raise TypeError("Expected argument 'tags_anies' to be a list")
        pulumi.set(__self__, "tags_anies", tags_anies)
        if without_any_tag and not isinstance(without_any_tag, bool):
            raise TypeError("Expected argument 'without_any_tag' to be a bool")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def desktops(self) -> Sequence['outputs.GetDesktopTagsFilterDesktopResult']:
        """
        The list of desktops that match the filter parameters.  
        The desktops structure is documented below.
        """
        return pulumi.get(self, "desktops")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetDesktopTagsFilterMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter(name="notTags")
    def not_tags(self) -> Optional[Sequence['outputs.GetDesktopTagsFilterNotTagResult']]:
        return pulumi.get(self, "not_tags")

    @_builtins.property
    @pulumi.getter(name="notTagsAnies")
    def not_tags_anies(self) -> Optional[Sequence['outputs.GetDesktopTagsFilterNotTagsAnyResult']]:
        return pulumi.get(self, "not_tags_anies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDesktopTagsFilterTagResult']]:
        """
        The list of tags attached to the desktop.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAnies")
    def tags_anies(self) -> Optional[Sequence['outputs.GetDesktopTagsFilterTagsAnyResult']]:
        return pulumi.get(self, "tags_anies")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetDesktopTagsFilterResult(GetDesktopTagsFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDesktopTagsFilterResult(
            desktops=self.desktops,
            id=self.id,
            matches=self.matches,
            not_tags=self.not_tags,
            not_tags_anies=self.not_tags_anies,
            region=self.region,
            tags=self.tags,
            tags_anies=self.tags_anies,
            without_any_tag=self.without_any_tag)


def get_desktop_tags_filter(matches: Optional[Sequence[Union['GetDesktopTagsFilterMatchArgs', 'GetDesktopTagsFilterMatchArgsDict']]] = None,
                            not_tags: Optional[Sequence[Union['GetDesktopTagsFilterNotTagArgs', 'GetDesktopTagsFilterNotTagArgsDict']]] = None,
                            not_tags_anies: Optional[Sequence[Union['GetDesktopTagsFilterNotTagsAnyArgs', 'GetDesktopTagsFilterNotTagsAnyArgsDict']]] = None,
                            region: Optional[_builtins.str] = None,
                            tags: Optional[Sequence[Union['GetDesktopTagsFilterTagArgs', 'GetDesktopTagsFilterTagArgsDict']]] = None,
                            tags_anies: Optional[Sequence[Union['GetDesktopTagsFilterTagsAnyArgs', 'GetDesktopTagsFilterTagsAnyArgsDict']]] = None,
                            without_any_tag: Optional[_builtins.bool] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDesktopTagsFilterResult:
    """
    Use this data source to get the list of the Workspace desktops by tags within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_tags_filter()
    ```

    ### Filter desktops without any tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_tags_filter(without_any_tag=True)
    ```

    ### Filter desktops with all specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(tags=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops with any of specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(tags_anies=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops without all specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(not_tags=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops without any of specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(not_tags_anies=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```


    :param Sequence[Union['GetDesktopTagsFilterMatchArgs', 'GetDesktopTagsFilterMatchArgsDict']] matches: Specifies the list of matching rules to filter desktops.  
           The matches structure is documented below.
           
           <a name="workspace_desktop_filter_tags"></a>
           The `tag` block supports:
    :param Sequence[Union['GetDesktopTagsFilterNotTagArgs', 'GetDesktopTagsFilterNotTagArgsDict']] not_tags: Specifies the list of tags to filter desktops.  
           Resources must not contain specified tags.
           The not_tags structure is documented below.
    :param Sequence[Union['GetDesktopTagsFilterNotTagsAnyArgs', 'GetDesktopTagsFilterNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of tags to filter desktops.  
           Resources must not contain any of specified tags.
           The not_tags_any structure is documented below.
    :param _builtins.str region: Specifies the region where the desktop tags are located.
    :param Sequence[Union['GetDesktopTagsFilterTagArgs', 'GetDesktopTagsFilterTagArgsDict']] tags: Specifies the list of tags to filter desktops.  
           Resources must contain all specified tags.
           The tags structure is documented below.
    :param Sequence[Union['GetDesktopTagsFilterTagsAnyArgs', 'GetDesktopTagsFilterTagsAnyArgsDict']] tags_anies: Specifies the list of tags to filter desktops.  
           Resources must contain at least one of specified tags.
           The tags_any structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to query resources without any tag.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getDesktopTagsFilter:getDesktopTagsFilter', __args__, opts=opts, typ=GetDesktopTagsFilterResult).value

    return AwaitableGetDesktopTagsFilterResult(
        desktops=pulumi.get(__ret__, 'desktops'),
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        not_tags=pulumi.get(__ret__, 'not_tags'),
        not_tags_anies=pulumi.get(__ret__, 'not_tags_anies'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        tags_anies=pulumi.get(__ret__, 'tags_anies'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_desktop_tags_filter_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetDesktopTagsFilterMatchArgs', 'GetDesktopTagsFilterMatchArgsDict']]]]] = None,
                                   not_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetDesktopTagsFilterNotTagArgs', 'GetDesktopTagsFilterNotTagArgsDict']]]]] = None,
                                   not_tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetDesktopTagsFilterNotTagsAnyArgs', 'GetDesktopTagsFilterNotTagsAnyArgsDict']]]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[Sequence[Union['GetDesktopTagsFilterTagArgs', 'GetDesktopTagsFilterTagArgsDict']]]]] = None,
                                   tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetDesktopTagsFilterTagsAnyArgs', 'GetDesktopTagsFilterTagsAnyArgsDict']]]]] = None,
                                   without_any_tag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDesktopTagsFilterResult]:
    """
    Use this data source to get the list of the Workspace desktops by tags within HuaweiCloud.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_tags_filter()
    ```

    ### Filter desktops without any tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Workspace.get_desktop_tags_filter(without_any_tag=True)
    ```

    ### Filter desktops with all specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(tags=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops with any of specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(tags_anies=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops without all specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(not_tags=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```

    ### Filter desktops without any of specified tags

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    filter_tag_key = config.require_object("filterTagKey")
    filter_tag_values = config.require_object("filterTagValues")
    test = huaweicloud.Workspace.get_desktop_tags_filter(not_tags_anies=[{
        "key": filter_tag_key,
        "values": filter_tag_values,
    }])
    ```


    :param Sequence[Union['GetDesktopTagsFilterMatchArgs', 'GetDesktopTagsFilterMatchArgsDict']] matches: Specifies the list of matching rules to filter desktops.  
           The matches structure is documented below.
           
           <a name="workspace_desktop_filter_tags"></a>
           The `tag` block supports:
    :param Sequence[Union['GetDesktopTagsFilterNotTagArgs', 'GetDesktopTagsFilterNotTagArgsDict']] not_tags: Specifies the list of tags to filter desktops.  
           Resources must not contain specified tags.
           The not_tags structure is documented below.
    :param Sequence[Union['GetDesktopTagsFilterNotTagsAnyArgs', 'GetDesktopTagsFilterNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of tags to filter desktops.  
           Resources must not contain any of specified tags.
           The not_tags_any structure is documented below.
    :param _builtins.str region: Specifies the region where the desktop tags are located.
    :param Sequence[Union['GetDesktopTagsFilterTagArgs', 'GetDesktopTagsFilterTagArgsDict']] tags: Specifies the list of tags to filter desktops.  
           Resources must contain all specified tags.
           The tags structure is documented below.
    :param Sequence[Union['GetDesktopTagsFilterTagsAnyArgs', 'GetDesktopTagsFilterTagsAnyArgsDict']] tags_anies: Specifies the list of tags to filter desktops.  
           Resources must contain at least one of specified tags.
           The tags_any structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to query resources without any tag.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getDesktopTagsFilter:getDesktopTagsFilter', __args__, opts=opts, typ=GetDesktopTagsFilterResult)
    return __ret__.apply(lambda __response__: GetDesktopTagsFilterResult(
        desktops=pulumi.get(__response__, 'desktops'),
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        not_tags=pulumi.get(__response__, 'not_tags'),
        not_tags_anies=pulumi.get(__response__, 'not_tags_anies'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        tags_anies=pulumi.get(__response__, 'tags_anies'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
