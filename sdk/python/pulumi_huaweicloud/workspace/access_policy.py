# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccessPolicyArgs', 'AccessPolicy']

@pulumi.input_type
class AccessPolicyArgs:
    def __init__(__self__, *,
                 blacklist_type: pulumi.Input[_builtins.str],
                 blacklists: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AccessPolicy resource.
        :param pulumi.Input[_builtins.str] blacklist_type: Specifies the type of access policy blacklist.  
               The valid values are as follows:
               + **INTERNET**
               
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]] blacklists: Specifies the blacklist configuration to which the policy applies.  
               The blacklist structure is documented below.
               
               <a name="access_policy_blacklist_objects_args"></a>
               The `blacklist` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the access policy.
               + **PRIVATE_ACCESS**
               
               Changing this will create a new resource.
               
               > Custom names are not supported, and only one resource can be created with each name at the same time.
        :param pulumi.Input[_builtins.str] region: The region where the access policy is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "blacklist_type", blacklist_type)
        if blacklists is not None:
            pulumi.set(__self__, "blacklists", blacklists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="blacklistType")
    def blacklist_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of access policy blacklist.  
        The valid values are as follows:
        + **INTERNET**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "blacklist_type")

    @blacklist_type.setter
    def blacklist_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "blacklist_type", value)

    @_builtins.property
    @pulumi.getter
    def blacklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]]:
        """
        Specifies the blacklist configuration to which the policy applies.  
        The blacklist structure is documented below.

        <a name="access_policy_blacklist_objects_args"></a>
        The `blacklist` block supports:
        """
        return pulumi.get(self, "blacklists")

    @blacklists.setter
    def blacklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]]):
        pulumi.set(self, "blacklists", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the access policy.
        + **PRIVATE_ACCESS**

        Changing this will create a new resource.

        > Custom names are not supported, and only one resource can be created with each name at the same time.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the access policy is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AccessPolicyState:
    def __init__(__self__, *,
                 blacklist_type: Optional[pulumi.Input[_builtins.str]] = None,
                 blacklists: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AccessPolicy resources.
        :param pulumi.Input[_builtins.str] blacklist_type: Specifies the type of access policy blacklist.  
               The valid values are as follows:
               + **INTERNET**
               
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]] blacklists: Specifies the blacklist configuration to which the policy applies.  
               The blacklist structure is documented below.
               
               <a name="access_policy_blacklist_objects_args"></a>
               The `blacklist` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the access policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the access policy.
               + **PRIVATE_ACCESS**
               
               Changing this will create a new resource.
               
               > Custom names are not supported, and only one resource can be created with each name at the same time.
        :param pulumi.Input[_builtins.str] region: The region where the access policy is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if blacklist_type is not None:
            pulumi.set(__self__, "blacklist_type", blacklist_type)
        if blacklists is not None:
            pulumi.set(__self__, "blacklists", blacklists)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="blacklistType")
    def blacklist_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of access policy blacklist.  
        The valid values are as follows:
        + **INTERNET**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "blacklist_type")

    @blacklist_type.setter
    def blacklist_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "blacklist_type", value)

    @_builtins.property
    @pulumi.getter
    def blacklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]]:
        """
        Specifies the blacklist configuration to which the policy applies.  
        The blacklist structure is documented below.

        <a name="access_policy_blacklist_objects_args"></a>
        The `blacklist` block supports:
        """
        return pulumi.get(self, "blacklists")

    @blacklists.setter
    def blacklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyBlacklistArgs']]]]):
        pulumi.set(self, "blacklists", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the access policy.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the access policy.
        + **PRIVATE_ACCESS**

        Changing this will create a new resource.

        > Custom names are not supported, and only one resource can be created with each name at the same time.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the access policy is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Workspace/accessPolicy:AccessPolicy")
class AccessPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blacklist_type: Optional[pulumi.Input[_builtins.str]] = None,
                 blacklists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AccessPolicyBlacklistArgs', 'AccessPolicyBlacklistArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages access policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a private access policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_user_id = config.require_object("workspaceUserId")
        test = huaweicloud.workspace.AccessPolicy("test",
            name="PRIVATE_ACCESS",
            blacklist_type="INTERNET",
            blacklists=[{
                "object_type": "USER",
                "object_id": workspace_user_id,
            }])
        ```

        ## Import

        Access policies can be imported using their `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/accessPolicy:AccessPolicy test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] blacklist_type: Specifies the type of access policy blacklist.  
               The valid values are as follows:
               + **INTERNET**
               
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AccessPolicyBlacklistArgs', 'AccessPolicyBlacklistArgsDict']]]] blacklists: Specifies the blacklist configuration to which the policy applies.  
               The blacklist structure is documented below.
               
               <a name="access_policy_blacklist_objects_args"></a>
               The `blacklist` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the access policy.
               + **PRIVATE_ACCESS**
               
               Changing this will create a new resource.
               
               > Custom names are not supported, and only one resource can be created with each name at the same time.
        :param pulumi.Input[_builtins.str] region: The region where the access policy is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccessPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages access policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a private access policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_user_id = config.require_object("workspaceUserId")
        test = huaweicloud.workspace.AccessPolicy("test",
            name="PRIVATE_ACCESS",
            blacklist_type="INTERNET",
            blacklists=[{
                "object_type": "USER",
                "object_id": workspace_user_id,
            }])
        ```

        ## Import

        Access policies can be imported using their `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/accessPolicy:AccessPolicy test <name>
        ```

        :param str resource_name: The name of the resource.
        :param AccessPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blacklist_type: Optional[pulumi.Input[_builtins.str]] = None,
                 blacklists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AccessPolicyBlacklistArgs', 'AccessPolicyBlacklistArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessPolicyArgs.__new__(AccessPolicyArgs)

            if blacklist_type is None and not opts.urn:
                raise TypeError("Missing required property 'blacklist_type'")
            __props__.__dict__["blacklist_type"] = blacklist_type
            __props__.__dict__["blacklists"] = blacklists
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
        super(AccessPolicy, __self__).__init__(
            'huaweicloud:Workspace/accessPolicy:AccessPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blacklist_type: Optional[pulumi.Input[_builtins.str]] = None,
            blacklists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AccessPolicyBlacklistArgs', 'AccessPolicyBlacklistArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'AccessPolicy':
        """
        Get an existing AccessPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] blacklist_type: Specifies the type of access policy blacklist.  
               The valid values are as follows:
               + **INTERNET**
               
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AccessPolicyBlacklistArgs', 'AccessPolicyBlacklistArgsDict']]]] blacklists: Specifies the blacklist configuration to which the policy applies.  
               The blacklist structure is documented below.
               
               <a name="access_policy_blacklist_objects_args"></a>
               The `blacklist` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the access policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the access policy.
               + **PRIVATE_ACCESS**
               
               Changing this will create a new resource.
               
               > Custom names are not supported, and only one resource can be created with each name at the same time.
        :param pulumi.Input[_builtins.str] region: The region where the access policy is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessPolicyState.__new__(_AccessPolicyState)

        __props__.__dict__["blacklist_type"] = blacklist_type
        __props__.__dict__["blacklists"] = blacklists
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return AccessPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blacklistType")
    def blacklist_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of access policy blacklist.  
        The valid values are as follows:
        + **INTERNET**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "blacklist_type")

    @_builtins.property
    @pulumi.getter
    def blacklists(self) -> pulumi.Output[Sequence['outputs.AccessPolicyBlacklist']]:
        """
        Specifies the blacklist configuration to which the policy applies.  
        The blacklist structure is documented below.

        <a name="access_policy_blacklist_objects_args"></a>
        The `blacklist` block supports:
        """
        return pulumi.get(self, "blacklists")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the access policy.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the access policy.
        + **PRIVATE_ACCESS**

        Changing this will create a new resource.

        > Custom names are not supported, and only one resource can be created with each name at the same time.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where the access policy is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

