# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DesktopPoolArgs', 'DesktopPool']

@pulumi.input_type
class DesktopPoolArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[_builtins.str],
                 image_type: pulumi.Input[_builtins.str],
                 product_id: pulumi.Input[_builtins.str],
                 root_volume: pulumi.Input['DesktopPoolRootVolumeArgs'],
                 size: pulumi.Input[_builtins.int],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str],
                 authorized_objects: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]] = None,
                 autoscale_policy: Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 desktop_name_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disconnected_retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_autoscale: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 in_maintenance_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DesktopPool resource.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the desktop pool.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the desktop pool.  
               The valid values are as follows:
               + **private**
               + **gold**
        :param pulumi.Input[_builtins.str] product_id: Specifies the specification ID of the desktop pool.
        :param pulumi.Input['DesktopPoolRootVolumeArgs'] root_volume: Specifies the system volume configuration of the desktop pool.  
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.int] size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: Specifies the list of the subnet IDs to which the desktop pool belongs.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]] authorized_objects: Specifies the list of the users or user groups
               to be authorized.
               The authorized_objects structure is documented below.
        :param pulumi.Input['DesktopPoolAutoscalePolicyArgs'] autoscale_policy: Specifies the automatic scaling policy of the desktop pool.  
               The autoscale_policy structure is documented below.
               This parameter is available only when the `enable_autoscale` is set to **true**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone to which the desktop pool belongs.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]] data_volumes: Specifies the list of the data volume configurations of
               the desktop pool.
               The data_volumes structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the desktop pool.
        :param pulumi.Input[_builtins.str] desktop_name_policy_id: Specifies the ID of the policy to generate the desktop name.
        :param pulumi.Input[_builtins.int] disconnected_retention_period: Specifies the desktops and users disconnection retention period
               under desktop pool, in minutes.
               The valid value ranges from `10` to `43,200`.
               This parameter is available and required only when the `type` is set to **DYNAMIC**.
        :param pulumi.Input[_builtins.bool] enable_autoscale: Specifies whether to enable elastic scaling of the desktop pool.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which
               the desktop pool belongs.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.bool] in_maintenance_mode: Specifies whether to enable maintenance mode of the desktop pool.  
               Defaults to **false**.
               
               <a name="desktop_pool_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the desktop pool.  
               The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]] security_groups: Specifies the list of the security groups to which the
               desktop pool belongs.
               The security_groups structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the desktop pool.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the desktop pool belongs.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "root_volume", root_volume)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "type", type)
        if authorized_objects is not None:
            pulumi.set(__self__, "authorized_objects", authorized_objects)
        if autoscale_policy is not None:
            pulumi.set(__self__, "autoscale_policy", autoscale_policy)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desktop_name_policy_id is not None:
            pulumi.set(__self__, "desktop_name_policy_id", desktop_name_policy_id)
        if disconnected_retention_period is not None:
            pulumi.set(__self__, "disconnected_retention_period", disconnected_retention_period)
        if enable_autoscale is not None:
            pulumi.set(__self__, "enable_autoscale", enable_autoscale)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if in_maintenance_mode is not None:
            pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image ID of the desktop pool.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image type of the desktop pool.  
        The valid values are as follows:
        + **private**
        + **gold**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the specification ID of the desktop pool.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Input['DesktopPoolRootVolumeArgs']:
        """
        Specifies the system volume configuration of the desktop pool.  
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: pulumi.Input['DesktopPoolRootVolumeArgs']):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the size of the volume, in GB.
        + For root volume, the valid value ranges from `80` to `1,020`.
        + For data volume, the valid value ranges from `10` to `8,200`.

        <a name="desktop_pool_authorized_objects"></a>
        The `authorized_objects` block supports:
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of the subnet IDs to which the desktop pool belongs.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="authorizedObjects")
    def authorized_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]]:
        """
        Specifies the list of the users or user groups
        to be authorized.
        The authorized_objects structure is documented below.
        """
        return pulumi.get(self, "authorized_objects")

    @authorized_objects.setter
    def authorized_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]]):
        pulumi.set(self, "authorized_objects", value)

    @_builtins.property
    @pulumi.getter(name="autoscalePolicy")
    def autoscale_policy(self) -> Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']]:
        """
        Specifies the automatic scaling policy of the desktop pool.  
        The autoscale_policy structure is documented below.
        This parameter is available only when the `enable_autoscale` is set to **true**.
        """
        return pulumi.get(self, "autoscale_policy")

    @autoscale_policy.setter
    def autoscale_policy(self, value: Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']]):
        pulumi.set(self, "autoscale_policy", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone to which the desktop pool belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]]:
        """
        Specifies the list of the data volume configurations of
        the desktop pool.
        The data_volumes structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the desktop pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="desktopNamePolicyId")
    def desktop_name_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the policy to generate the desktop name.
        """
        return pulumi.get(self, "desktop_name_policy_id")

    @desktop_name_policy_id.setter
    def desktop_name_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "desktop_name_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="disconnectedRetentionPeriod")
    def disconnected_retention_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the desktops and users disconnection retention period
        under desktop pool, in minutes.
        The valid value ranges from `10` to `43,200`.
        This parameter is available and required only when the `type` is set to **DYNAMIC**.
        """
        return pulumi.get(self, "disconnected_retention_period")

    @disconnected_retention_period.setter
    def disconnected_retention_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disconnected_retention_period", value)

    @_builtins.property
    @pulumi.getter(name="enableAutoscale")
    def enable_autoscale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable elastic scaling of the desktop pool.  
        Defaults to **false**.
        """
        return pulumi.get(self, "enable_autoscale")

    @enable_autoscale.setter
    def enable_autoscale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autoscale", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which
        the desktop pool belongs.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode of the desktop pool.  
        Defaults to **false**.

        <a name="desktop_pool_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "in_maintenance_mode")

    @in_maintenance_mode.setter
    def in_maintenance_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "in_maintenance_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the desktop pool.  
        The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]]:
        """
        Specifies the list of the security groups to which the
        desktop pool belongs.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the desktop pool.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the VPC to which the desktop pool belongs.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _DesktopPoolState:
    def __init__(__self__, *,
                 authorized_objects: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]] = None,
                 autoscale_policy: Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 desktop_name_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 desktop_used: Optional[pulumi.Input[_builtins.int]] = None,
                 disconnected_retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_autoscale: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_os_platform: Optional[pulumi.Input[_builtins.str]] = None,
                 image_os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_maintenance_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 products: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolProductArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input['DesktopPoolRootVolumeArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DesktopPool resources.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]] authorized_objects: Specifies the list of the users or user groups
               to be authorized.
               The authorized_objects structure is documented below.
        :param pulumi.Input['DesktopPoolAutoscalePolicyArgs'] autoscale_policy: Specifies the automatic scaling policy of the desktop pool.  
               The autoscale_policy structure is documented below.
               This parameter is available only when the `enable_autoscale` is set to **true**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone to which the desktop pool belongs.
        :param pulumi.Input[_builtins.str] created_time: The creation time of the desktop pool, in UTC format.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]] data_volumes: Specifies the list of the data volume configurations of
               the desktop pool.
               The data_volumes structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the desktop pool.
        :param pulumi.Input[_builtins.str] desktop_name_policy_id: Specifies the ID of the policy to generate the desktop name.
        :param pulumi.Input[_builtins.int] desktop_used: The number of desktops associated with the users under the desktop pool.
        :param pulumi.Input[_builtins.int] disconnected_retention_period: Specifies the desktops and users disconnection retention period
               under desktop pool, in minutes.
               The valid value ranges from `10` to `43,200`.
               This parameter is available and required only when the `type` is set to **DYNAMIC**.
        :param pulumi.Input[_builtins.bool] enable_autoscale: Specifies whether to enable elastic scaling of the desktop pool.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which
               the desktop pool belongs.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the desktop pool.
        :param pulumi.Input[_builtins.str] image_name: The image name of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_platform: The image OS platform of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_type: The image OS type of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_version: The image OS version of the desktop pool.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the desktop pool.  
               The valid values are as follows:
               + **private**
               + **gold**
        :param pulumi.Input[_builtins.bool] in_maintenance_mode: Specifies whether to enable maintenance mode of the desktop pool.  
               Defaults to **false**.
               
               <a name="desktop_pool_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the desktop pool.  
               The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] product_id: Specifies the specification ID of the desktop pool.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolProductArgs']]] products: The product information of the desktop pool.  
               The product structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['DesktopPoolRootVolumeArgs'] root_volume: Specifies the system volume configuration of the desktop pool.  
               The root_volume structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]] security_groups: Specifies the list of the security groups to which the
               desktop pool belongs.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.int] size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param pulumi.Input[_builtins.str] status: The status of the desktop pool.
               + **STEADY**
               + **TEMPORARY**
               + **EXIST_FROZEN**
               + **UNKNOWN**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: Specifies the list of the subnet IDs to which the desktop pool belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the desktop pool.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the desktop pool belongs.
        """
        if authorized_objects is not None:
            pulumi.set(__self__, "authorized_objects", authorized_objects)
        if autoscale_policy is not None:
            pulumi.set(__self__, "autoscale_policy", autoscale_policy)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desktop_name_policy_id is not None:
            pulumi.set(__self__, "desktop_name_policy_id", desktop_name_policy_id)
        if desktop_used is not None:
            pulumi.set(__self__, "desktop_used", desktop_used)
        if disconnected_retention_period is not None:
            pulumi.set(__self__, "disconnected_retention_period", disconnected_retention_period)
        if enable_autoscale is not None:
            pulumi.set(__self__, "enable_autoscale", enable_autoscale)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_os_platform is not None:
            pulumi.set(__self__, "image_os_platform", image_os_platform)
        if image_os_type is not None:
            pulumi.set(__self__, "image_os_type", image_os_type)
        if image_os_version is not None:
            pulumi.set(__self__, "image_os_version", image_os_version)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if in_maintenance_mode is not None:
            pulumi.set(__self__, "in_maintenance_mode", in_maintenance_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="authorizedObjects")
    def authorized_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]]:
        """
        Specifies the list of the users or user groups
        to be authorized.
        The authorized_objects structure is documented below.
        """
        return pulumi.get(self, "authorized_objects")

    @authorized_objects.setter
    def authorized_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolAuthorizedObjectArgs']]]]):
        pulumi.set(self, "authorized_objects", value)

    @_builtins.property
    @pulumi.getter(name="autoscalePolicy")
    def autoscale_policy(self) -> Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']]:
        """
        Specifies the automatic scaling policy of the desktop pool.  
        The autoscale_policy structure is documented below.
        This parameter is available only when the `enable_autoscale` is set to **true**.
        """
        return pulumi.get(self, "autoscale_policy")

    @autoscale_policy.setter
    def autoscale_policy(self, value: Optional[pulumi.Input['DesktopPoolAutoscalePolicyArgs']]):
        pulumi.set(self, "autoscale_policy", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone to which the desktop pool belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the desktop pool, in UTC format.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]]:
        """
        Specifies the list of the data volume configurations of
        the desktop pool.
        The data_volumes structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the desktop pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="desktopNamePolicyId")
    def desktop_name_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the policy to generate the desktop name.
        """
        return pulumi.get(self, "desktop_name_policy_id")

    @desktop_name_policy_id.setter
    def desktop_name_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "desktop_name_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="desktopUsed")
    def desktop_used(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of desktops associated with the users under the desktop pool.
        """
        return pulumi.get(self, "desktop_used")

    @desktop_used.setter
    def desktop_used(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "desktop_used", value)

    @_builtins.property
    @pulumi.getter(name="disconnectedRetentionPeriod")
    def disconnected_retention_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the desktops and users disconnection retention period
        under desktop pool, in minutes.
        The valid value ranges from `10` to `43,200`.
        This parameter is available and required only when the `type` is set to **DYNAMIC**.
        """
        return pulumi.get(self, "disconnected_retention_period")

    @disconnected_retention_period.setter
    def disconnected_retention_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disconnected_retention_period", value)

    @_builtins.property
    @pulumi.getter(name="enableAutoscale")
    def enable_autoscale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable elastic scaling of the desktop pool.  
        Defaults to **false**.
        """
        return pulumi.get(self, "enable_autoscale")

    @enable_autoscale.setter
    def enable_autoscale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autoscale", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which
        the desktop pool belongs.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image ID of the desktop pool.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image name of the desktop pool.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="imageOsPlatform")
    def image_os_platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image OS platform of the desktop pool.
        """
        return pulumi.get(self, "image_os_platform")

    @image_os_platform.setter
    def image_os_platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_os_platform", value)

    @_builtins.property
    @pulumi.getter(name="imageOsType")
    def image_os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image OS type of the desktop pool.
        """
        return pulumi.get(self, "image_os_type")

    @image_os_type.setter
    def image_os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_os_type", value)

    @_builtins.property
    @pulumi.getter(name="imageOsVersion")
    def image_os_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image OS version of the desktop pool.
        """
        return pulumi.get(self, "image_os_version")

    @image_os_version.setter
    def image_os_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_os_version", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type of the desktop pool.  
        The valid values are as follows:
        + **private**
        + **gold**
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode of the desktop pool.  
        Defaults to **false**.

        <a name="desktop_pool_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "in_maintenance_mode")

    @in_maintenance_mode.setter
    def in_maintenance_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "in_maintenance_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the desktop pool.  
        The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the specification ID of the desktop pool.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolProductArgs']]]]:
        """
        The product information of the desktop pool.  
        The product structure is documented below.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolProductArgs']]]]):
        pulumi.set(self, "products", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['DesktopPoolRootVolumeArgs']]:
        """
        Specifies the system volume configuration of the desktop pool.  
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['DesktopPoolRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]]:
        """
        Specifies the list of the security groups to which the
        desktop pool belongs.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DesktopPoolSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of the volume, in GB.
        + For root volume, the valid value ranges from `80` to `1,020`.
        + For data volume, the valid value ranges from `10` to `8,200`.

        <a name="desktop_pool_authorized_objects"></a>
        The `authorized_objects` block supports:
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the desktop pool.
        + **STEADY**
        + **TEMPORARY**
        + **EXIST_FROZEN**
        + **UNKNOWN**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of the subnet IDs to which the desktop pool belongs.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the desktop pool.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the VPC to which the desktop pool belongs.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Workspace/desktopPool:DesktopPool")
class DesktopPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized_objects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolAuthorizedObjectArgs', 'DesktopPoolAuthorizedObjectArgsDict']]]]] = None,
                 autoscale_policy: Optional[pulumi.Input[Union['DesktopPoolAutoscalePolicyArgs', 'DesktopPoolAutoscalePolicyArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolDataVolumeArgs', 'DesktopPoolDataVolumeArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 desktop_name_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disconnected_retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_autoscale: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_maintenance_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['DesktopPoolRootVolumeArgs', 'DesktopPoolRootVolumeArgsDict']]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolSecurityGroupArgs', 'DesktopPoolSecurityGroupArgsDict']]]]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Workspace desktop pool resource within HuaweiCloud.

        > Before creating Workspace desktop, ensure that the Workspace service has been registered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_pool_name = config.require_object("desktopPoolName")
        product_id = config.require_object("productId")
        image_id = config.require_object("imageId")
        vpc_id = config.require_object("vpcId")
        subnet_ids = config.require_object("subnetIds")
        security_group_ids = config.require_object("securityGroupIds")
        data_volume_sizes = config.require_object("dataVolumeSizes")
        authorized_object_list = config.require_object("authorizedObjectList")
        test = huaweicloud.workspace.DesktopPool("test",
            security_groups=[{
                "id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in security_group_ids]],
            data_volumes=[{
                "type": "SAS",
                "size": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in data_volume_sizes]],
            authorized_objects=[{
                "object_id": entry["value"]["objectId"],
                "object_type": entry["value"]["objectType"],
                "object_name": entry["value"]["objectName"],
                "user_group": entry["value"]["userGroup"],
            } for entry in [{"key": k, "value": v} for k, v in authorized_object_list]],
            name=desktop_pool_name,
            type="DYNAMIC",
            size=1,
            product_id=product_id,
            image_type="gold",
            image_id=image_id,
            vpc_id=vpc_id,
            subnet_ids=subnet_ids,
            disconnected_retention_period=10,
            root_volume={
                "type": "SAS",
                "size": 80,
            })
        ```

        ## Import

        The desktop pool can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/desktopPool:DesktopPool test <id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `vpc_id`, `image_type`, `tags`, `ou_name`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_desktop_pool" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vpc_id, image_type, tags, ou_name,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolAuthorizedObjectArgs', 'DesktopPoolAuthorizedObjectArgsDict']]]] authorized_objects: Specifies the list of the users or user groups
               to be authorized.
               The authorized_objects structure is documented below.
        :param pulumi.Input[Union['DesktopPoolAutoscalePolicyArgs', 'DesktopPoolAutoscalePolicyArgsDict']] autoscale_policy: Specifies the automatic scaling policy of the desktop pool.  
               The autoscale_policy structure is documented below.
               This parameter is available only when the `enable_autoscale` is set to **true**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone to which the desktop pool belongs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolDataVolumeArgs', 'DesktopPoolDataVolumeArgsDict']]]] data_volumes: Specifies the list of the data volume configurations of
               the desktop pool.
               The data_volumes structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the desktop pool.
        :param pulumi.Input[_builtins.str] desktop_name_policy_id: Specifies the ID of the policy to generate the desktop name.
        :param pulumi.Input[_builtins.int] disconnected_retention_period: Specifies the desktops and users disconnection retention period
               under desktop pool, in minutes.
               The valid value ranges from `10` to `43,200`.
               This parameter is available and required only when the `type` is set to **DYNAMIC**.
        :param pulumi.Input[_builtins.bool] enable_autoscale: Specifies whether to enable elastic scaling of the desktop pool.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which
               the desktop pool belongs.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the desktop pool.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the desktop pool.  
               The valid values are as follows:
               + **private**
               + **gold**
        :param pulumi.Input[_builtins.bool] in_maintenance_mode: Specifies whether to enable maintenance mode of the desktop pool.  
               Defaults to **false**.
               
               <a name="desktop_pool_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the desktop pool.  
               The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] product_id: Specifies the specification ID of the desktop pool.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['DesktopPoolRootVolumeArgs', 'DesktopPoolRootVolumeArgsDict']] root_volume: Specifies the system volume configuration of the desktop pool.  
               The root_volume structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolSecurityGroupArgs', 'DesktopPoolSecurityGroupArgsDict']]]] security_groups: Specifies the list of the security groups to which the
               desktop pool belongs.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.int] size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: Specifies the list of the subnet IDs to which the desktop pool belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the desktop pool.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the desktop pool belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DesktopPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace desktop pool resource within HuaweiCloud.

        > Before creating Workspace desktop, ensure that the Workspace service has been registered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        desktop_pool_name = config.require_object("desktopPoolName")
        product_id = config.require_object("productId")
        image_id = config.require_object("imageId")
        vpc_id = config.require_object("vpcId")
        subnet_ids = config.require_object("subnetIds")
        security_group_ids = config.require_object("securityGroupIds")
        data_volume_sizes = config.require_object("dataVolumeSizes")
        authorized_object_list = config.require_object("authorizedObjectList")
        test = huaweicloud.workspace.DesktopPool("test",
            security_groups=[{
                "id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in security_group_ids]],
            data_volumes=[{
                "type": "SAS",
                "size": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in data_volume_sizes]],
            authorized_objects=[{
                "object_id": entry["value"]["objectId"],
                "object_type": entry["value"]["objectType"],
                "object_name": entry["value"]["objectName"],
                "user_group": entry["value"]["userGroup"],
            } for entry in [{"key": k, "value": v} for k, v in authorized_object_list]],
            name=desktop_pool_name,
            type="DYNAMIC",
            size=1,
            product_id=product_id,
            image_type="gold",
            image_id=image_id,
            vpc_id=vpc_id,
            subnet_ids=subnet_ids,
            disconnected_retention_period=10,
            root_volume={
                "type": "SAS",
                "size": 80,
            })
        ```

        ## Import

        The desktop pool can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/desktopPool:DesktopPool test <id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `vpc_id`, `image_type`, `tags`, `ou_name`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_desktop_pool" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vpc_id, image_type, tags, ou_name,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DesktopPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DesktopPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized_objects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolAuthorizedObjectArgs', 'DesktopPoolAuthorizedObjectArgsDict']]]]] = None,
                 autoscale_policy: Optional[pulumi.Input[Union['DesktopPoolAutoscalePolicyArgs', 'DesktopPoolAutoscalePolicyArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolDataVolumeArgs', 'DesktopPoolDataVolumeArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 desktop_name_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disconnected_retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_autoscale: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_maintenance_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['DesktopPoolRootVolumeArgs', 'DesktopPoolRootVolumeArgsDict']]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolSecurityGroupArgs', 'DesktopPoolSecurityGroupArgsDict']]]]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DesktopPoolArgs.__new__(DesktopPoolArgs)

            __props__.__dict__["authorized_objects"] = authorized_objects
            __props__.__dict__["autoscale_policy"] = autoscale_policy
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["data_volumes"] = data_volumes
            __props__.__dict__["description"] = description
            __props__.__dict__["desktop_name_policy_id"] = desktop_name_policy_id
            __props__.__dict__["disconnected_retention_period"] = disconnected_retention_period
            __props__.__dict__["enable_autoscale"] = enable_autoscale
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            if image_type is None and not opts.urn:
                raise TypeError("Missing required property 'image_type'")
            __props__.__dict__["image_type"] = image_type
            __props__.__dict__["in_maintenance_mode"] = in_maintenance_mode
            __props__.__dict__["name"] = name
            __props__.__dict__["ou_name"] = ou_name
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["region"] = region
            if root_volume is None and not opts.urn:
                raise TypeError("Missing required property 'root_volume'")
            __props__.__dict__["root_volume"] = root_volume
            __props__.__dict__["security_groups"] = security_groups
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_time"] = None
            __props__.__dict__["desktop_used"] = None
            __props__.__dict__["image_name"] = None
            __props__.__dict__["image_os_platform"] = None
            __props__.__dict__["image_os_type"] = None
            __props__.__dict__["image_os_version"] = None
            __props__.__dict__["products"] = None
            __props__.__dict__["status"] = None
        super(DesktopPool, __self__).__init__(
            'huaweicloud:Workspace/desktopPool:DesktopPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorized_objects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolAuthorizedObjectArgs', 'DesktopPoolAuthorizedObjectArgsDict']]]]] = None,
            autoscale_policy: Optional[pulumi.Input[Union['DesktopPoolAutoscalePolicyArgs', 'DesktopPoolAutoscalePolicyArgsDict']]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolDataVolumeArgs', 'DesktopPoolDataVolumeArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            desktop_name_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            desktop_used: Optional[pulumi.Input[_builtins.int]] = None,
            disconnected_retention_period: Optional[pulumi.Input[_builtins.int]] = None,
            enable_autoscale: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_name: Optional[pulumi.Input[_builtins.str]] = None,
            image_os_platform: Optional[pulumi.Input[_builtins.str]] = None,
            image_os_type: Optional[pulumi.Input[_builtins.str]] = None,
            image_os_version: Optional[pulumi.Input[_builtins.str]] = None,
            image_type: Optional[pulumi.Input[_builtins.str]] = None,
            in_maintenance_mode: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ou_name: Optional[pulumi.Input[_builtins.str]] = None,
            product_id: Optional[pulumi.Input[_builtins.str]] = None,
            products: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolProductArgs', 'DesktopPoolProductArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume: Optional[pulumi.Input[Union['DesktopPoolRootVolumeArgs', 'DesktopPoolRootVolumeArgsDict']]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolSecurityGroupArgs', 'DesktopPoolSecurityGroupArgsDict']]]]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DesktopPool':
        """
        Get an existing DesktopPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolAuthorizedObjectArgs', 'DesktopPoolAuthorizedObjectArgsDict']]]] authorized_objects: Specifies the list of the users or user groups
               to be authorized.
               The authorized_objects structure is documented below.
        :param pulumi.Input[Union['DesktopPoolAutoscalePolicyArgs', 'DesktopPoolAutoscalePolicyArgsDict']] autoscale_policy: Specifies the automatic scaling policy of the desktop pool.  
               The autoscale_policy structure is documented below.
               This parameter is available only when the `enable_autoscale` is set to **true**.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone to which the desktop pool belongs.
        :param pulumi.Input[_builtins.str] created_time: The creation time of the desktop pool, in UTC format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolDataVolumeArgs', 'DesktopPoolDataVolumeArgsDict']]]] data_volumes: Specifies the list of the data volume configurations of
               the desktop pool.
               The data_volumes structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the desktop pool.
        :param pulumi.Input[_builtins.str] desktop_name_policy_id: Specifies the ID of the policy to generate the desktop name.
        :param pulumi.Input[_builtins.int] desktop_used: The number of desktops associated with the users under the desktop pool.
        :param pulumi.Input[_builtins.int] disconnected_retention_period: Specifies the desktops and users disconnection retention period
               under desktop pool, in minutes.
               The valid value ranges from `10` to `43,200`.
               This parameter is available and required only when the `type` is set to **DYNAMIC**.
        :param pulumi.Input[_builtins.bool] enable_autoscale: Specifies whether to enable elastic scaling of the desktop pool.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which
               the desktop pool belongs.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the desktop pool.
        :param pulumi.Input[_builtins.str] image_name: The image name of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_platform: The image OS platform of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_type: The image OS type of the desktop pool.
        :param pulumi.Input[_builtins.str] image_os_version: The image OS version of the desktop pool.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type of the desktop pool.  
               The valid values are as follows:
               + **private**
               + **gold**
        :param pulumi.Input[_builtins.bool] in_maintenance_mode: Specifies whether to enable maintenance mode of the desktop pool.  
               Defaults to **false**.
               
               <a name="desktop_pool_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the desktop pool.  
               The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.str] product_id: Specifies the specification ID of the desktop pool.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolProductArgs', 'DesktopPoolProductArgsDict']]]] products: The product information of the desktop pool.  
               The product structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['DesktopPoolRootVolumeArgs', 'DesktopPoolRootVolumeArgsDict']] root_volume: Specifies the system volume configuration of the desktop pool.  
               The root_volume structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DesktopPoolSecurityGroupArgs', 'DesktopPoolSecurityGroupArgsDict']]]] security_groups: Specifies the list of the security groups to which the
               desktop pool belongs.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.int] size: Specifies the size of the volume, in GB.
               + For root volume, the valid value ranges from `80` to `1,020`.
               + For data volume, the valid value ranges from `10` to `8,200`.
               
               <a name="desktop_pool_authorized_objects"></a>
               The `authorized_objects` block supports:
        :param pulumi.Input[_builtins.str] status: The status of the desktop pool.
               + **STEADY**
               + **TEMPORARY**
               + **EXIST_FROZEN**
               + **UNKNOWN**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: Specifies the list of the subnet IDs to which the desktop pool belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the desktop pool.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the volume.  
               The valid values are as follows:
               + **SAS**: High I/O disk type.
               + **SSD**: Ultra-high I/O disk type.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the desktop pool belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DesktopPoolState.__new__(_DesktopPoolState)

        __props__.__dict__["authorized_objects"] = authorized_objects
        __props__.__dict__["autoscale_policy"] = autoscale_policy
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["data_volumes"] = data_volumes
        __props__.__dict__["description"] = description
        __props__.__dict__["desktop_name_policy_id"] = desktop_name_policy_id
        __props__.__dict__["desktop_used"] = desktop_used
        __props__.__dict__["disconnected_retention_period"] = disconnected_retention_period
        __props__.__dict__["enable_autoscale"] = enable_autoscale
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_os_platform"] = image_os_platform
        __props__.__dict__["image_os_type"] = image_os_type
        __props__.__dict__["image_os_version"] = image_os_version
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["in_maintenance_mode"] = in_maintenance_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["ou_name"] = ou_name
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["products"] = products
        __props__.__dict__["region"] = region
        __props__.__dict__["root_volume"] = root_volume
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["size"] = size
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["vpc_id"] = vpc_id
        return DesktopPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authorizedObjects")
    def authorized_objects(self) -> pulumi.Output[Optional[Sequence['outputs.DesktopPoolAuthorizedObject']]]:
        """
        Specifies the list of the users or user groups
        to be authorized.
        The authorized_objects structure is documented below.
        """
        return pulumi.get(self, "authorized_objects")

    @_builtins.property
    @pulumi.getter(name="autoscalePolicy")
    def autoscale_policy(self) -> pulumi.Output[Optional['outputs.DesktopPoolAutoscalePolicy']]:
        """
        Specifies the automatic scaling policy of the desktop pool.  
        The autoscale_policy structure is documented below.
        This parameter is available only when the `enable_autoscale` is set to **true**.
        """
        return pulumi.get(self, "autoscale_policy")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the availability zone to which the desktop pool belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the desktop pool, in UTC format.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> pulumi.Output[Optional[Sequence['outputs.DesktopPoolDataVolume']]]:
        """
        Specifies the list of the data volume configurations of
        the desktop pool.
        The data_volumes structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the desktop pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="desktopNamePolicyId")
    def desktop_name_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the policy to generate the desktop name.
        """
        return pulumi.get(self, "desktop_name_policy_id")

    @_builtins.property
    @pulumi.getter(name="desktopUsed")
    def desktop_used(self) -> pulumi.Output[_builtins.int]:
        """
        The number of desktops associated with the users under the desktop pool.
        """
        return pulumi.get(self, "desktop_used")

    @_builtins.property
    @pulumi.getter(name="disconnectedRetentionPeriod")
    def disconnected_retention_period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the desktops and users disconnection retention period
        under desktop pool, in minutes.
        The valid value ranges from `10` to `43,200`.
        This parameter is available and required only when the `type` is set to **DYNAMIC**.
        """
        return pulumi.get(self, "disconnected_retention_period")

    @_builtins.property
    @pulumi.getter(name="enableAutoscale")
    def enable_autoscale(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable elastic scaling of the desktop pool.  
        Defaults to **false**.
        """
        return pulumi.get(self, "enable_autoscale")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the enterprise project to which
        the desktop pool belongs.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image ID of the desktop pool.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[_builtins.str]:
        """
        The image name of the desktop pool.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageOsPlatform")
    def image_os_platform(self) -> pulumi.Output[_builtins.str]:
        """
        The image OS platform of the desktop pool.
        """
        return pulumi.get(self, "image_os_platform")

    @_builtins.property
    @pulumi.getter(name="imageOsType")
    def image_os_type(self) -> pulumi.Output[_builtins.str]:
        """
        The image OS type of the desktop pool.
        """
        return pulumi.get(self, "image_os_type")

    @_builtins.property
    @pulumi.getter(name="imageOsVersion")
    def image_os_version(self) -> pulumi.Output[_builtins.str]:
        """
        The image OS version of the desktop pool.
        """
        return pulumi.get(self, "image_os_version")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image type of the desktop pool.  
        The valid values are as follows:
        + **private**
        + **gold**
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="inMaintenanceMode")
    def in_maintenance_mode(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode of the desktop pool.  
        Defaults to **false**.

        <a name="desktop_pool_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "in_maintenance_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the desktop pool.  
        The name valid length is limited from `1` to `15`, only Chinese and English characters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the specification ID of the desktop pool.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def products(self) -> pulumi.Output[Sequence['outputs.DesktopPoolProduct']]:
        """
        The product information of the desktop pool.  
        The product structure is documented below.
        """
        return pulumi.get(self, "products")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Output['outputs.DesktopPoolRootVolume']:
        """
        Specifies the system volume configuration of the desktop pool.  
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence['outputs.DesktopPoolSecurityGroup']]]:
        """
        Specifies the list of the security groups to which the
        desktop pool belongs.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the size of the volume, in GB.
        + For root volume, the valid value ranges from `80` to `1,020`.
        + For data volume, the valid value ranges from `10` to `8,200`.

        <a name="desktop_pool_authorized_objects"></a>
        The `authorized_objects` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the desktop pool.
        + **STEADY**
        + **TEMPORARY**
        + **EXIST_FROZEN**
        + **UNKNOWN**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of the subnet IDs to which the desktop pool belongs.
        """
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the desktop pool.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the volume.  
        The valid values are as follows:
        + **SAS**: High I/O disk type.
        + **SSD**: Ultra-high I/O disk type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the VPC to which the desktop pool belongs.
        """
        return pulumi.get(self, "vpc_id")

