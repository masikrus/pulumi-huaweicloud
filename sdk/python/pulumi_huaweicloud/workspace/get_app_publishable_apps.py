# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAppPublishableAppsResult',
    'AwaitableGetAppPublishableAppsResult',
    'get_app_publishable_apps',
    'get_app_publishable_apps_output',
]

@pulumi.output_type
class GetAppPublishableAppsResult:
    """
    A collection of values returned by getAppPublishableApps.
    """
    def __init__(__self__, app_group_id=None, apps=None, group_images=None, id=None, region=None):
        if app_group_id and not isinstance(app_group_id, str):
            raise TypeError("Expected argument 'app_group_id' to be a str")
        pulumi.set(__self__, "app_group_id", app_group_id)
        if apps and not isinstance(apps, list):
            raise TypeError("Expected argument 'apps' to be a list")
        pulumi.set(__self__, "apps", apps)
        if group_images and not isinstance(group_images, list):
            raise TypeError("Expected argument 'group_images' to be a list")
        pulumi.set(__self__, "group_images", group_images)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> _builtins.str:
        return pulumi.get(self, "app_group_id")

    @_builtins.property
    @pulumi.getter
    def apps(self) -> Sequence['outputs.GetAppPublishableAppsAppResult']:
        """
        The list of the publishable applications.
        """
        return pulumi.get(self, "apps")

    @_builtins.property
    @pulumi.getter(name="groupImages")
    def group_images(self) -> Sequence[_builtins.str]:
        """
        The list of image IDs under the server group.
        """
        return pulumi.get(self, "group_images")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAppPublishableAppsResult(GetAppPublishableAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppPublishableAppsResult(
            app_group_id=self.app_group_id,
            apps=self.apps,
            group_images=self.group_images,
            id=self.id,
            region=self.region)


def get_app_publishable_apps(app_group_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppPublishableAppsResult:
    """
    Use this data source to get the list of the publishable applications under specified APP group within HuaweiCloud.


    :param _builtins.str app_group_id: Specifies the ID of the application group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['appGroupId'] = app_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppPublishableApps:getAppPublishableApps', __args__, opts=opts, typ=GetAppPublishableAppsResult).value

    return AwaitableGetAppPublishableAppsResult(
        app_group_id=pulumi.get(__ret__, 'app_group_id'),
        apps=pulumi.get(__ret__, 'apps'),
        group_images=pulumi.get(__ret__, 'group_images'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_app_publishable_apps_output(app_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppPublishableAppsResult]:
    """
    Use this data source to get the list of the publishable applications under specified APP group within HuaweiCloud.


    :param _builtins.str app_group_id: Specifies the ID of the application group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['appGroupId'] = app_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppPublishableApps:getAppPublishableApps', __args__, opts=opts, typ=GetAppPublishableAppsResult)
    return __ret__.apply(lambda __response__: GetAppPublishableAppsResult(
        app_group_id=pulumi.get(__response__, 'app_group_id'),
        apps=pulumi.get(__response__, 'apps'),
        group_images=pulumi.get(__response__, 'group_images'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
