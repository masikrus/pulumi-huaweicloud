# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAppServerGroupStatusResult',
    'AwaitableGetAppServerGroupStatusResult',
    'get_app_server_group_status',
    'get_app_server_group_status_output',
]

@pulumi.output_type
class GetAppServerGroupStatusResult:
    """
    A collection of values returned by getAppServerGroupStatus.
    """
    def __init__(__self__, aps_status=None, id=None, region=None, server_group_id=None):
        if aps_status and not isinstance(aps_status, dict):
            raise TypeError("Expected argument 'aps_status' to be a dict")
        pulumi.set(__self__, "aps_status", aps_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)

    @_builtins.property
    @pulumi.getter(name="apsStatus")
    def aps_status(self) -> Mapping[str, _builtins.int]:
        """
        The number of servers in each status.
        """
        return pulumi.get(self, "aps_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> _builtins.str:
        return pulumi.get(self, "server_group_id")


class AwaitableGetAppServerGroupStatusResult(GetAppServerGroupStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppServerGroupStatusResult(
            aps_status=self.aps_status,
            id=self.id,
            region=self.region,
            server_group_id=self.server_group_id)


def get_app_server_group_status(region: Optional[_builtins.str] = None,
                                server_group_id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppServerGroupStatusResult:
    """
    Use this data source to get the status of a server group within HuaweiCloud Workspace.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_id = config.require_object("serverGroupId")
    test = huaweicloud.Workspace.get_app_server_group_status(server_group_id=server_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the unique identifier of the server group.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Workspace/getAppServerGroupStatus:getAppServerGroupStatus', __args__, opts=opts, typ=GetAppServerGroupStatusResult).value

    return AwaitableGetAppServerGroupStatusResult(
        aps_status=pulumi.get(__ret__, 'aps_status'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'))
def get_app_server_group_status_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppServerGroupStatusResult]:
    """
    Use this data source to get the status of a server group within HuaweiCloud Workspace.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_group_id = config.require_object("serverGroupId")
    test = huaweicloud.Workspace.get_app_server_group_status(server_group_id=server_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the unique identifier of the server group.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Workspace/getAppServerGroupStatus:getAppServerGroupStatus', __args__, opts=opts, typ=GetAppServerGroupStatusResult)
    return __ret__.apply(lambda __response__: GetAppServerGroupStatusResult(
        aps_status=pulumi.get(__response__, 'aps_status'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        server_group_id=pulumi.get(__response__, 'server_group_id')))
