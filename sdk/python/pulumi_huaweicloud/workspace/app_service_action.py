# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppServiceActionArgs', 'AppServiceAction']

@pulumi.input_type
class AppServiceActionArgs:
    def __init__(__self__, *,
                 service_status: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppServiceAction resource.
        :param pulumi.Input[_builtins.str] service_status: Specifies the status of the Workspace APP service.  
               The valid values are as follows:
               + **active**: Activate the service.
               + **inactive**: Deactivate the service.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP service is located.  
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "service_status", service_status)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the status of the Workspace APP service.  
        The valid values are as follows:
        + **active**: Activate the service.
        + **inactive**: Deactivate the service.
        """
        return pulumi.get(self, "service_status")

    @service_status.setter
    def service_status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_status", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Workspace APP service is located.  
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AppServiceActionState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppServiceAction resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP service is located.  
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] service_status: Specifies the status of the Workspace APP service.  
               The valid values are as follows:
               + **active**: Activate the service.
               + **inactive**: Deactivate the service.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_status is not None:
            pulumi.set(__self__, "service_status", service_status)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Workspace APP service is located.  
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the Workspace APP service.  
        The valid values are as follows:
        + **active**: Activate the service.
        + **inactive**: Deactivate the service.
        """
        return pulumi.get(self, "service_status")

    @service_status.setter
    def service_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_status", value)


@pulumi.type_token("huaweicloud:Workspace/appServiceAction:AppServiceAction")
class AppServiceAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to active or deactive the Workspace APP service within HuaweiCloud.

        > 1. Before using this resource, ensure that the Workspace service has been registered.
        >       <br>2. This resource is a one-time action resource for activating or deactivating the Workspace APP service. Deleting
        >       this resource will not clear the corresponding request record, but will only remove the resource information from
        >       the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.workspace.AppServiceAction("test", service_status="active")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP service is located.  
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] service_status: Specifies the status of the Workspace APP service.  
               The valid values are as follows:
               + **active**: Activate the service.
               + **inactive**: Deactivate the service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppServiceActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to active or deactive the Workspace APP service within HuaweiCloud.

        > 1. Before using this resource, ensure that the Workspace service has been registered.
        >       <br>2. This resource is a one-time action resource for activating or deactivating the Workspace APP service. Deleting
        >       this resource will not clear the corresponding request record, but will only remove the resource information from
        >       the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.workspace.AppServiceAction("test", service_status="active")
        ```

        :param str resource_name: The name of the resource.
        :param AppServiceActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppServiceActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppServiceActionArgs.__new__(AppServiceActionArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if service_status is None and not opts.urn:
                raise TypeError("Missing required property 'service_status'")
            __props__.__dict__["service_status"] = service_status
        super(AppServiceAction, __self__).__init__(
            'huaweicloud:Workspace/appServiceAction:AppServiceAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service_status: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppServiceAction':
        """
        Get an existing AppServiceAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Workspace APP service is located.  
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] service_status: Specifies the status of the Workspace APP service.  
               The valid values are as follows:
               + **active**: Activate the service.
               + **inactive**: Deactivate the service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppServiceActionState.__new__(_AppServiceActionState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["service_status"] = service_status
        return AppServiceAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the Workspace APP service is located.  
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the Workspace APP service.  
        The valid values are as follows:
        + **active**: Activate the service.
        + **inactive**: Deactivate the service.
        """
        return pulumi.get(self, "service_status")

