# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppServerArgs', 'AppServer']

@pulumi.input_type
class AppServerArgs:
    def __init__(__self__, *,
                 flavor_id: pulumi.Input[_builtins.str],
                 root_volume: pulumi.Input['AppServerRootVolumeArgs'],
                 server_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_hints: Optional[pulumi.Input['AppServerSchedulerHintsArgs']] = None,
                 update_access_agent: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a AppServer resource.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input['AppServerRootVolumeArgs'] root_volume: Specifies the system disk configuration of the server.  
               This parameter value must be consistent with the server group to which it belongs.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the server group ID to which the server belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.str] type: Specifies the disk type of the server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are **true** and **false**.
               
               <a name="app_server_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the server. Defaults to **postPaid**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **prePaid**: the yearly/monthly billing mode.
               + **postPaid**: the pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server.
        :param pulumi.Input[_builtins.bool] maintain_status: Specifies whether to enable maintenance mode. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the server.
               Changing this creates a new resource.
               + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               + If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               
               This parameter is required and available if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the server.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are as follows:
               + **month**
               + **year**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppServerSchedulerHintsArgs'] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               This parameter is available only when `charging_mode` is set to **postPaid**.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.bool] update_access_agent: Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        """
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "root_volume", root_volume)
        pulumi.set(__self__, "server_group_id", server_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if maintain_status is not None:
            pulumi.set(__self__, "maintain_status", maintain_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if update_access_agent is not None:
            pulumi.set(__self__, "update_access_agent", update_access_agent)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor ID of the server.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Input['AppServerRootVolumeArgs']:
        """
        Specifies the system disk configuration of the server.  
        This parameter value must be consistent with the server group to which it belongs.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: pulumi.Input['AppServerRootVolumeArgs']):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the server group ID to which the server belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subnet ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk type of the server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the VPC ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are **true** and **false**.

        <a name="app_server_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the server. Defaults to **postPaid**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **prePaid**: the yearly/monthly billing mode.
        + **postPaid**: the pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the server.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode. Defaults to **false**.
        """
        return pulumi.get(self, "maintain_status")

    @maintain_status.setter
    def maintain_status(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "maintain_status", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the server.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system type of the server.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the server.
        Changing this creates a new resource.
        + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        + If `period_unit` is set to **year**, the value ranges from `1` to `3`.

        This parameter is required and available if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the server.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are as follows:
        + **month**
        + **year**
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input['AppServerSchedulerHintsArgs']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        This parameter is available only when `charging_mode` is set to **postPaid**.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input['AppServerSchedulerHintsArgs']]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="updateAccessAgent")
    def update_access_agent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        """
        return pulumi.get(self, "update_access_agent")

    @update_access_agent.setter
    def update_access_agent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_access_agent", value)


@pulumi.input_type
class _AppServerState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input['AppServerRootVolumeArgs']] = None,
                 scheduler_hints: Optional[pulumi.Input['AppServerSchedulerHintsArgs']] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_access_agent: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppServer resources.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are **true** and **false**.
               
               <a name="app_server_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the server. Defaults to **postPaid**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **prePaid**: the yearly/monthly billing mode.
               + **postPaid**: the pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.bool] maintain_status: Specifies whether to enable maintenance mode. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the server.
               Changing this creates a new resource.
               + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               + If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               
               This parameter is required and available if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the server.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are as follows:
               + **month**
               + **year**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AppServerRootVolumeArgs'] root_volume: Specifies the system disk configuration of the server.  
               This parameter value must be consistent with the server group to which it belongs.
               The root_volume structure is documented below.
        :param pulumi.Input['AppServerSchedulerHintsArgs'] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               This parameter is available only when `charging_mode` is set to **postPaid**.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the server group ID to which the server belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.str] type: Specifies the disk type of the server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.bool] update_access_agent: Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if maintain_status is not None:
            pulumi.set(__self__, "maintain_status", maintain_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if ou_name is not None:
            pulumi.set(__self__, "ou_name", ou_name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_access_agent is not None:
            pulumi.set(__self__, "update_access_agent", update_access_agent)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are **true** and **false**.

        <a name="app_server_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone of the server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the server. Defaults to **postPaid**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **prePaid**: the yearly/monthly billing mode.
        + **postPaid**: the pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the server.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor ID of the server.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode. Defaults to **false**.
        """
        return pulumi.get(self, "maintain_status")

    @maintain_status.setter
    def maintain_status(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "maintain_status", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the server.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system type of the server.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @ou_name.setter
    def ou_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ou_name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the server.
        Changing this creates a new resource.
        + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        + If `period_unit` is set to **year**, the value ranges from `1` to `3`.

        This parameter is required and available if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the server.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are as follows:
        + **month**
        + **year**
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['AppServerRootVolumeArgs']]:
        """
        Specifies the system disk configuration of the server.  
        This parameter value must be consistent with the server group to which it belongs.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['AppServerRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input['AppServerSchedulerHintsArgs']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        This parameter is available only when `charging_mode` is set to **postPaid**.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input['AppServerSchedulerHintsArgs']]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the server group ID to which the server belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk type of the server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updateAccessAgent")
    def update_access_agent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        """
        return pulumi.get(self, "update_access_agent")

    @update_access_agent.setter
    def update_access_agent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_access_agent", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Workspace/appServer:AppServer")
class AppServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['AppServerRootVolumeArgs', 'AppServerRootVolumeArgsDict']]] = None,
                 scheduler_hints: Optional[pulumi.Input[Union['AppServerSchedulerHintsArgs', 'AppServerSchedulerHintsArgsDict']]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_access_agent: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Workspace APP server resource under specified server group within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.workspace.AppServer("test",
            server_group_id=server_group_id,
            type="createApps",
            flavor_id=flavor_id,
            root_volume={
                "type": "SAS",
                "size": 80,
            },
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            update_access_agent=True,
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="true")
        ```

        ## Import

        The APP server resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServer:AppServer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `type`, `vpc_id`, `subnet_id`, `update_access_agent`, `scheduler_hints`, `period_unit`,

        `period`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_server" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              type, vpc_id, subnet_id, update_access_agent, scheduler_hints, period_unit, period, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are **true** and **false**.
               
               <a name="app_server_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the server. Defaults to **postPaid**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **prePaid**: the yearly/monthly billing mode.
               + **postPaid**: the pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.bool] maintain_status: Specifies whether to enable maintenance mode. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the server.
               Changing this creates a new resource.
               + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               + If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               
               This parameter is required and available if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the server.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are as follows:
               + **month**
               + **year**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppServerRootVolumeArgs', 'AppServerRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the server.  
               This parameter value must be consistent with the server group to which it belongs.
               The root_volume structure is documented below.
        :param pulumi.Input[Union['AppServerSchedulerHintsArgs', 'AppServerSchedulerHintsArgsDict']] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               This parameter is available only when `charging_mode` is set to **postPaid**.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the server group ID to which the server belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.str] type: Specifies the disk type of the server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.bool] update_access_agent: Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Workspace APP server resource under specified server group within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_group_id = config.require_object("serverGroupId")
        flavor_id = config.require_object("flavorId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.workspace.AppServer("test",
            server_group_id=server_group_id,
            type="createApps",
            flavor_id=flavor_id,
            root_volume={
                "type": "SAS",
                "size": 80,
            },
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            update_access_agent=True,
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="true")
        ```

        ## Import

        The APP server resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/appServer:AppServer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `type`, `vpc_id`, `subnet_id`, `update_access_agent`, `scheduler_hints`, `period_unit`,

        `period`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_workspace_app_server" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              type, vpc_id, subnet_id, update_access_agent, scheduler_hints, period_unit, period, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AppServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ou_name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['AppServerRootVolumeArgs', 'AppServerRootVolumeArgsDict']]] = None,
                 scheduler_hints: Optional[pulumi.Input[Union['AppServerSchedulerHintsArgs', 'AppServerSchedulerHintsArgsDict']]] = None,
                 server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_access_agent: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppServerArgs.__new__(AppServerArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["description"] = description
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            __props__.__dict__["maintain_status"] = maintain_status
            __props__.__dict__["name"] = name
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["ou_name"] = ou_name
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            if root_volume is None and not opts.urn:
                raise TypeError("Missing required property 'root_volume'")
            __props__.__dict__["root_volume"] = root_volume
            __props__.__dict__["scheduler_hints"] = scheduler_hints
            if server_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_group_id'")
            __props__.__dict__["server_group_id"] = server_group_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["update_access_agent"] = update_access_agent
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(AppServer, __self__).__init__(
            'huaweicloud:Workspace/appServer:AppServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            maintain_status: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            ou_name: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume: Optional[pulumi.Input[Union['AppServerRootVolumeArgs', 'AppServerRootVolumeArgsDict']]] = None,
            scheduler_hints: Optional[pulumi.Input[Union['AppServerSchedulerHintsArgs', 'AppServerSchedulerHintsArgsDict']]] = None,
            server_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            update_access_agent: Optional[pulumi.Input[_builtins.bool]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppServer':
        """
        Get an existing AppServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are **true** and **false**.
               
               <a name="app_server_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone of the server.
               Changing this creates a new resource.
               If omitted, the AZ randomly assigned by the system is used.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the server. Defaults to **postPaid**.
               Changing this creates a new resource.
               The valid values are as follows:
               + **prePaid**: the yearly/monthly billing mode.
               + **postPaid**: the pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the server.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the flavor ID of the server.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.bool] maintain_status: Specifies whether to enable maintenance mode. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the server.  
               The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
               hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the server.
               Changing this creates a new resource.
               Currently, only **Windows** is supported.
        :param pulumi.Input[_builtins.str] ou_name: Specifies the OU name corresponding to the AD server.  
               This parameter is available only when the AD server is connected.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the server.
               Changing this creates a new resource.
               + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               + If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               
               This parameter is required and available if `charging_mode` is set to **prePaid**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the server.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **prePaid**.
               The valid values are as follows:
               + **month**
               + **year**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AppServerRootVolumeArgs', 'AppServerRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the server.  
               This parameter value must be consistent with the server group to which it belongs.
               The root_volume structure is documented below.
        :param pulumi.Input[Union['AppServerSchedulerHintsArgs', 'AppServerSchedulerHintsArgsDict']] scheduler_hints: Specifies the configuration of the dedicate host.
               Changing this creates a new resource.
               This parameter is available only when `charging_mode` is set to **postPaid**.
               The scheduler_hints structure is documented below.
        :param pulumi.Input[_builtins.str] server_group_id: Specifies the server group ID to which the server belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        :param pulumi.Input[_builtins.str] type: Specifies the disk type of the server.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.bool] update_access_agent: Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the server belongs.
               Changing this creates a new resource.
               This parameter value must be consistent with the server group to which it belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppServerState.__new__(_AppServerState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["maintain_status"] = maintain_status
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["ou_name"] = ou_name
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["root_volume"] = root_volume
        __props__.__dict__["scheduler_hints"] = scheduler_hints
        __props__.__dict__["server_group_id"] = server_group_id
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["type"] = type
        __props__.__dict__["update_access_agent"] = update_access_agent
        __props__.__dict__["vpc_id"] = vpc_id
        return AppServer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are **true** and **false**.

        <a name="app_server_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the availability zone of the server.
        Changing this creates a new resource.
        If omitted, the AZ randomly assigned by the system is used.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the server. Defaults to **postPaid**.
        Changing this creates a new resource.
        The valid values are as follows:
        + **prePaid**: the yearly/monthly billing mode.
        + **postPaid**: the pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the server.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor ID of the server.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="maintainStatus")
    def maintain_status(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable maintenance mode. Defaults to **false**.
        """
        return pulumi.get(self, "maintain_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the server.  
        The name valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_) and
        hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operating system type of the server.
        Changing this creates a new resource.
        Currently, only **Windows** is supported.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="ouName")
    def ou_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OU name corresponding to the AD server.  
        This parameter is available only when the AD server is connected.
        """
        return pulumi.get(self, "ou_name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the charging period of the server.
        Changing this creates a new resource.
        + If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        + If `period_unit` is set to **year**, the value ranges from `1` to `3`.

        This parameter is required and available if `charging_mode` is set to **prePaid**.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period unit of the server.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **prePaid**.
        The valid values are as follows:
        + **month**
        + **year**
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Output['outputs.AppServerRootVolume']:
        """
        Specifies the system disk configuration of the server.  
        This parameter value must be consistent with the server group to which it belongs.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> pulumi.Output[Optional['outputs.AppServerSchedulerHints']]:
        """
        Specifies the configuration of the dedicate host.
        Changing this creates a new resource.
        This parameter is available only when `charging_mode` is set to **postPaid**.
        The scheduler_hints structure is documented below.
        """
        return pulumi.get(self, "scheduler_hints")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the server group ID to which the server belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the disk type of the server.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateAccessAgent")
    def update_access_agent(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to automatically upgrade protocol component. Defaults to **false**.
        """
        return pulumi.get(self, "update_access_agent")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID to which the server belongs.
        Changing this creates a new resource.
        This parameter value must be consistent with the server group to which it belongs.
        """
        return pulumi.get(self, "vpc_id")

