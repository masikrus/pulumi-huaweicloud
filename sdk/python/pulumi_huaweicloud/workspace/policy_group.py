# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyGroupArgs', 'PolicyGroup']

@pulumi.input_type
class PolicyGroupArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input['PolicyGroupPolicyArgs']] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]] = None):
        """
        The set of arguments for constructing a PolicyGroup resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy group.
        :param pulumi.Input[_builtins.str] name: Specifies the target name.  
               If the `targets` type is **INSTANCE**, the ID means the desktop name.
               If the `targets` type is **USER**, the ID means the user name.
               If the `targets` type is **USERGROUP**, the ID means the user group name.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OU name.
               If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.
               
               <a name="policy_group_policy"></a>
               The `policy` block supports:
        :param pulumi.Input['PolicyGroupPolicyArgs'] policy: Specifies the configuration of the access policy.
               The policy structure is documented below.
               
               <a name="policy_group_targets"></a>
               The `targets` block supports:
        :param pulumi.Input[_builtins.int] priority: Specifies the priority of the policy group.
        :param pulumi.Input[_builtins.str] region: The region where the policy group is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]] targets: Specifies the configuration of the access targets.
               The targets structure is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the policy group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target name.  
        If the `targets` type is **INSTANCE**, the ID means the desktop name.
        If the `targets` type is **USER**, the ID means the user name.
        If the `targets` type is **USERGROUP**, the ID means the user group name.
        If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
        If the `targets` type is **OU**, the ID means the OU name.
        If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.

        <a name="policy_group_policy"></a>
        The `policy` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['PolicyGroupPolicyArgs']]:
        """
        Specifies the configuration of the access policy.
        The policy structure is documented below.

        <a name="policy_group_targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['PolicyGroupPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the priority of the policy group.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the policy group is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]]:
        """
        Specifies the configuration of the access targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class _PolicyGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input['PolicyGroupPolicyArgs']] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyGroup resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy group.
        :param pulumi.Input[_builtins.str] name: Specifies the target name.  
               If the `targets` type is **INSTANCE**, the ID means the desktop name.
               If the `targets` type is **USER**, the ID means the user name.
               If the `targets` type is **USERGROUP**, the ID means the user group name.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OU name.
               If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.
               
               <a name="policy_group_policy"></a>
               The `policy` block supports:
        :param pulumi.Input['PolicyGroupPolicyArgs'] policy: Specifies the configuration of the access policy.
               The policy structure is documented below.
               
               <a name="policy_group_targets"></a>
               The `targets` block supports:
        :param pulumi.Input[_builtins.int] priority: Specifies the priority of the policy group.
        :param pulumi.Input[_builtins.str] region: The region where the policy group is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]] targets: Specifies the configuration of the access targets.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the policy group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the policy group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target name.  
        If the `targets` type is **INSTANCE**, the ID means the desktop name.
        If the `targets` type is **USER**, the ID means the user name.
        If the `targets` type is **USERGROUP**, the ID means the user group name.
        If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
        If the `targets` type is **OU**, the ID means the OU name.
        If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.

        <a name="policy_group_policy"></a>
        The `policy` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['PolicyGroupPolicyArgs']]:
        """
        Specifies the configuration of the access policy.
        The policy structure is documented below.

        <a name="policy_group_targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['PolicyGroupPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the priority of the policy group.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the policy group is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]]:
        """
        Specifies the configuration of the access targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the policy group.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Workspace/policyGroup:PolicyGroup")
class PolicyGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[Union['PolicyGroupPolicyArgs', 'PolicyGroupPolicyArgsDict']]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyGroupTargetArgs', 'PolicyGroupTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages policy group resource within HuaweiCloud.

        ## Example Usage

        ### Create a policy group and allow two IP address access

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_group_name = config.require_object("policyGroupName")
        workspace_user_id = config.require_object("workspaceUserId")
        workspace_user_name = config.require_object("workspaceUserName")
        test = huaweicloud.workspace.PolicyGroup("test",
            name=policy_group_name,
            priority=1,
            targets=[{
                "type": "USER",
                "id": workspace_user_id,
                "name": workspace_user_name,
            }],
            policy={
                "access_control": {
                    "ip_access_control": "112.20.53.2|255.255.240.0;112.20.53.3|255.255.240.0",
                },
            })
        ```

        ## Import

        Policy groups can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/policyGroup:PolicyGroup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy group.
        :param pulumi.Input[_builtins.str] name: Specifies the target name.  
               If the `targets` type is **INSTANCE**, the ID means the desktop name.
               If the `targets` type is **USER**, the ID means the user name.
               If the `targets` type is **USERGROUP**, the ID means the user group name.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OU name.
               If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.
               
               <a name="policy_group_policy"></a>
               The `policy` block supports:
        :param pulumi.Input[Union['PolicyGroupPolicyArgs', 'PolicyGroupPolicyArgsDict']] policy: Specifies the configuration of the access policy.
               The policy structure is documented below.
               
               <a name="policy_group_targets"></a>
               The `targets` block supports:
        :param pulumi.Input[_builtins.int] priority: Specifies the priority of the policy group.
        :param pulumi.Input[_builtins.str] region: The region where the policy group is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyGroupTargetArgs', 'PolicyGroupTargetArgsDict']]]] targets: Specifies the configuration of the access targets.
               The targets structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages policy group resource within HuaweiCloud.

        ## Example Usage

        ### Create a policy group and allow two IP address access

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_group_name = config.require_object("policyGroupName")
        workspace_user_id = config.require_object("workspaceUserId")
        workspace_user_name = config.require_object("workspaceUserName")
        test = huaweicloud.workspace.PolicyGroup("test",
            name=policy_group_name,
            priority=1,
            targets=[{
                "type": "USER",
                "id": workspace_user_id,
                "name": workspace_user_name,
            }],
            policy={
                "access_control": {
                    "ip_access_control": "112.20.53.2|255.255.240.0;112.20.53.3|255.255.240.0",
                },
            })
        ```

        ## Import

        Policy groups can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Workspace/policyGroup:PolicyGroup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[Union['PolicyGroupPolicyArgs', 'PolicyGroupPolicyArgsDict']]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyGroupTargetArgs', 'PolicyGroupTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyGroupArgs.__new__(PolicyGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["policy"] = policy
            __props__.__dict__["priority"] = priority
            __props__.__dict__["region"] = region
            __props__.__dict__["targets"] = targets
            __props__.__dict__["updated_at"] = None
        super(PolicyGroup, __self__).__init__(
            'huaweicloud:Workspace/policyGroup:PolicyGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy: Optional[pulumi.Input[Union['PolicyGroupPolicyArgs', 'PolicyGroupPolicyArgsDict']]] = None,
            priority: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyGroupTargetArgs', 'PolicyGroupTargetArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyGroup':
        """
        Get an existing PolicyGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy group.
        :param pulumi.Input[_builtins.str] name: Specifies the target name.  
               If the `targets` type is **INSTANCE**, the ID means the desktop name.
               If the `targets` type is **USER**, the ID means the user name.
               If the `targets` type is **USERGROUP**, the ID means the user group name.
               If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
               If the `targets` type is **OU**, the ID means the OU name.
               If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.
               
               <a name="policy_group_policy"></a>
               The `policy` block supports:
        :param pulumi.Input[Union['PolicyGroupPolicyArgs', 'PolicyGroupPolicyArgsDict']] policy: Specifies the configuration of the access policy.
               The policy structure is documented below.
               
               <a name="policy_group_targets"></a>
               The `targets` block supports:
        :param pulumi.Input[_builtins.int] priority: Specifies the priority of the policy group.
        :param pulumi.Input[_builtins.str] region: The region where the policy group is located.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyGroupTargetArgs', 'PolicyGroupTargetArgsDict']]]] targets: Specifies the configuration of the access targets.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the policy group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyGroupState.__new__(_PolicyGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["policy"] = policy
        __props__.__dict__["priority"] = priority
        __props__.__dict__["region"] = region
        __props__.__dict__["targets"] = targets
        __props__.__dict__["updated_at"] = updated_at
        return PolicyGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the policy group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target name.  
        If the `targets` type is **INSTANCE**, the ID means the desktop name.
        If the `targets` type is **USER**, the ID means the user name.
        If the `targets` type is **USERGROUP**, the ID means the user group name.
        If the `targets` type is **CLIENTIP**, the ID means the terminal IP address.
        If the `targets` type is **OU**, the ID means the OU name.
        If the `targets` type is **ALL**, the ID fixed with string **All-Targets**.

        <a name="policy_group_policy"></a>
        The `policy` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional['outputs.PolicyGroupPolicy']]:
        """
        Specifies the configuration of the access policy.
        The policy structure is documented below.

        <a name="policy_group_targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the priority of the policy group.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where the policy group is located.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyGroupTarget']]]:
        """
        Specifies the configuration of the access targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the policy group.
        """
        return pulumi.get(self, "updated_at")

