# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TaskArgs', 'Task']

@pulumi.input_type
class TaskArgs:
    def __init__(__self__, *,
                 dst_node: pulumi.Input['TaskDstNodeArgs'],
                 enable_kms: pulumi.Input[_builtins.bool],
                 src_node: pulumi.Input['TaskSrcNodeArgs'],
                 thread_num: pulumi.Input[_builtins.int],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_info: Optional[pulumi.Input['TaskSmnInfoArgs']] = None):
        """
        The set of arguments for constructing a Task resource.
        """
        pulumi.set(__self__, "dst_node", dst_node)
        pulumi.set(__self__, "enable_kms", enable_kms)
        pulumi.set(__self__, "src_node", src_node)
        pulumi.set(__self__, "thread_num", thread_num)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_info is not None:
            pulumi.set(__self__, "smn_info", smn_info)

    @_builtins.property
    @pulumi.getter(name="dstNode")
    def dst_node(self) -> pulumi.Input['TaskDstNodeArgs']:
        return pulumi.get(self, "dst_node")

    @dst_node.setter
    def dst_node(self, value: pulumi.Input['TaskDstNodeArgs']):
        pulumi.set(self, "dst_node", value)

    @_builtins.property
    @pulumi.getter(name="enableKms")
    def enable_kms(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "enable_kms")

    @enable_kms.setter
    def enable_kms(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_kms", value)

    @_builtins.property
    @pulumi.getter(name="srcNode")
    def src_node(self) -> pulumi.Input['TaskSrcNodeArgs']:
        return pulumi.get(self, "src_node")

    @src_node.setter
    def src_node(self, value: pulumi.Input['TaskSrcNodeArgs']):
        pulumi.set(self, "src_node", value)

    @_builtins.property
    @pulumi.getter(name="threadNum")
    def thread_num(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "thread_num")

    @thread_num.setter
    def thread_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "thread_num", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smnInfo")
    def smn_info(self) -> Optional[pulumi.Input['TaskSmnInfoArgs']]:
        return pulumi.get(self, "smn_info")

    @smn_info.setter
    def smn_info(self, value: Optional[pulumi.Input['TaskSmnInfoArgs']]):
        pulumi.set(self, "smn_info", value)


@pulumi.input_type
class _TaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dst_node: Optional[pulumi.Input['TaskDstNodeArgs']] = None,
                 enable_kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_info: Optional[pulumi.Input['TaskSmnInfoArgs']] = None,
                 src_node: Optional[pulumi.Input['TaskSrcNodeArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 thread_num: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Task resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dst_node is not None:
            pulumi.set(__self__, "dst_node", dst_node)
        if enable_kms is not None:
            pulumi.set(__self__, "enable_kms", enable_kms)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_info is not None:
            pulumi.set(__self__, "smn_info", smn_info)
        if src_node is not None:
            pulumi.set(__self__, "src_node", src_node)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if thread_num is not None:
            pulumi.set(__self__, "thread_num", thread_num)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dstNode")
    def dst_node(self) -> Optional[pulumi.Input['TaskDstNodeArgs']]:
        return pulumi.get(self, "dst_node")

    @dst_node.setter
    def dst_node(self, value: Optional[pulumi.Input['TaskDstNodeArgs']]):
        pulumi.set(self, "dst_node", value)

    @_builtins.property
    @pulumi.getter(name="enableKms")
    def enable_kms(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "enable_kms")

    @enable_kms.setter
    def enable_kms(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_kms", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smnInfo")
    def smn_info(self) -> Optional[pulumi.Input['TaskSmnInfoArgs']]:
        return pulumi.get(self, "smn_info")

    @smn_info.setter
    def smn_info(self, value: Optional[pulumi.Input['TaskSmnInfoArgs']]):
        pulumi.set(self, "smn_info", value)

    @_builtins.property
    @pulumi.getter(name="srcNode")
    def src_node(self) -> Optional[pulumi.Input['TaskSrcNodeArgs']]:
        return pulumi.get(self, "src_node")

    @src_node.setter
    def src_node(self, value: Optional[pulumi.Input['TaskSrcNodeArgs']]):
        pulumi.set(self, "src_node", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="threadNum")
    def thread_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "thread_num")

    @thread_num.setter
    def thread_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "thread_num", value)


@pulumi.type_token("huaweicloud:Oms/task:Task")
class Task(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dst_node: Optional[pulumi.Input[Union['TaskDstNodeArgs', 'TaskDstNodeArgsDict']]] = None,
                 enable_kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_info: Optional[pulumi.Input[Union['TaskSmnInfoArgs', 'TaskSmnInfoArgsDict']]] = None,
                 src_node: Optional[pulumi.Input[Union['TaskSrcNodeArgs', 'TaskSrcNodeArgsDict']]] = None,
                 thread_num: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Create a Task resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Task resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dst_node: Optional[pulumi.Input[Union['TaskDstNodeArgs', 'TaskDstNodeArgsDict']]] = None,
                 enable_kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_info: Optional[pulumi.Input[Union['TaskSmnInfoArgs', 'TaskSmnInfoArgsDict']]] = None,
                 src_node: Optional[pulumi.Input[Union['TaskSrcNodeArgs', 'TaskSrcNodeArgsDict']]] = None,
                 thread_num: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskArgs.__new__(TaskArgs)

            __props__.__dict__["description"] = description
            if dst_node is None and not opts.urn:
                raise TypeError("Missing required property 'dst_node'")
            __props__.__dict__["dst_node"] = dst_node
            if enable_kms is None and not opts.urn:
                raise TypeError("Missing required property 'enable_kms'")
            __props__.__dict__["enable_kms"] = enable_kms
            __props__.__dict__["region"] = region
            __props__.__dict__["smn_info"] = smn_info
            if src_node is None and not opts.urn:
                raise TypeError("Missing required property 'src_node'")
            __props__.__dict__["src_node"] = src_node
            if thread_num is None and not opts.urn:
                raise TypeError("Missing required property 'thread_num'")
            __props__.__dict__["thread_num"] = thread_num
            __props__.__dict__["name"] = None
            __props__.__dict__["status"] = None
        super(Task, __self__).__init__(
            'huaweicloud:Oms/task:Task',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dst_node: Optional[pulumi.Input[Union['TaskDstNodeArgs', 'TaskDstNodeArgsDict']]] = None,
            enable_kms: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            smn_info: Optional[pulumi.Input[Union['TaskSmnInfoArgs', 'TaskSmnInfoArgsDict']]] = None,
            src_node: Optional[pulumi.Input[Union['TaskSrcNodeArgs', 'TaskSrcNodeArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            thread_num: Optional[pulumi.Input[_builtins.int]] = None) -> 'Task':
        """
        Get an existing Task resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskState.__new__(_TaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dst_node"] = dst_node
        __props__.__dict__["enable_kms"] = enable_kms
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["smn_info"] = smn_info
        __props__.__dict__["src_node"] = src_node
        __props__.__dict__["status"] = status
        __props__.__dict__["thread_num"] = thread_num
        return Task(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dstNode")
    def dst_node(self) -> pulumi.Output['outputs.TaskDstNode']:
        return pulumi.get(self, "dst_node")

    @_builtins.property
    @pulumi.getter(name="enableKms")
    def enable_kms(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "enable_kms")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="smnInfo")
    def smn_info(self) -> pulumi.Output[Optional['outputs.TaskSmnInfo']]:
        return pulumi.get(self, "smn_info")

    @_builtins.property
    @pulumi.getter(name="srcNode")
    def src_node(self) -> pulumi.Output['outputs.TaskSrcNode']:
        return pulumi.get(self, "src_node")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="threadNum")
    def thread_num(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "thread_num")

