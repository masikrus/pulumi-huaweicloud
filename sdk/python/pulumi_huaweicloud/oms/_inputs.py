# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MigrationSyncTaskSourceCdnArgs',
    'MigrationSyncTaskSourceCdnArgsDict',
    'MigrationTaskBandwidthPolicyArgs',
    'MigrationTaskBandwidthPolicyArgsDict',
    'MigrationTaskDestinationObjectArgs',
    'MigrationTaskDestinationObjectArgsDict',
    'MigrationTaskGroupBandwidthPolicyArgs',
    'MigrationTaskGroupBandwidthPolicyArgsDict',
    'MigrationTaskGroupDestinationObjectArgs',
    'MigrationTaskGroupDestinationObjectArgsDict',
    'MigrationTaskGroupSourceCdnArgs',
    'MigrationTaskGroupSourceCdnArgsDict',
    'MigrationTaskGroupSourceObjectArgs',
    'MigrationTaskGroupSourceObjectArgsDict',
    'MigrationTaskSmnConfigArgs',
    'MigrationTaskSmnConfigArgsDict',
    'MigrationTaskSourceCdnArgs',
    'MigrationTaskSourceCdnArgsDict',
    'MigrationTaskSourceObjectArgs',
    'MigrationTaskSourceObjectArgsDict',
    'TaskDstNodeArgs',
    'TaskDstNodeArgsDict',
    'TaskSmnInfoArgs',
    'TaskSmnInfoArgsDict',
    'TaskSrcNodeArgs',
    'TaskSrcNodeArgsDict',
]

MYPY = False

if not MYPY:
    class MigrationSyncTaskSourceCdnArgsDict(TypedDict):
        domain: pulumi.Input[_builtins.str]
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol type. Value options: **http** and **https**.
        Changing this creates a new resource.
        """
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication type. Value options:

        + **NONE**
        + **QINIU_PRIVATE_AUTHENTICATION**
        + **ALIYUN_OSS_A**
        + **ALIYUN_OSS_B**
        + **ALIYUN_OSS_C**
        + **KSYUN_PRIVATE_AUTHENTICATION**
        + **TENCENT_COS_A**
        + **TENCENT_COS_B**
        + **TENCENT_COS_C**
        + **TENCENT_COS_D**

        Default value: **NONE**. Changing this creates a new resource.
        """
elif False:
    MigrationSyncTaskSourceCdnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationSyncTaskSourceCdnArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type. Value options: **http** and **https**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type. Value options:
               
               + **NONE**
               + **QINIU_PRIVATE_AUTHENTICATION**
               + **ALIYUN_OSS_A**
               + **ALIYUN_OSS_B**
               + **ALIYUN_OSS_C**
               + **KSYUN_PRIVATE_AUTHENTICATION**
               + **TENCENT_COS_A**
               + **TENCENT_COS_B**
               + **TENCENT_COS_C**
               + **TENCENT_COS_D**
               
               Default value: **NONE**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol type. Value options: **http** and **https**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type. Value options:

        + **NONE**
        + **QINIU_PRIVATE_AUTHENTICATION**
        + **ALIYUN_OSS_A**
        + **ALIYUN_OSS_B**
        + **ALIYUN_OSS_C**
        + **KSYUN_PRIVATE_AUTHENTICATION**
        + **TENCENT_COS_A**
        + **TENCENT_COS_B**
        + **TENCENT_COS_C**
        + **TENCENT_COS_D**

        Default value: **NONE**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)


if not MYPY:
    class MigrationTaskBandwidthPolicyArgsDict(TypedDict):
        end: pulumi.Input[_builtins.str]
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        max_bandwidth: pulumi.Input[_builtins.int]
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        start: pulumi.Input[_builtins.str]
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
elif False:
    MigrationTaskBandwidthPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskBandwidthPolicyArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[_builtins.str],
                 max_bandwidth: pulumi.Input[_builtins.int],
                 start: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] end: Specifies the end time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
               
               <a name="source_cdn_object"></a>
               The `source_cdn` block supports:
        :param pulumi.Input[_builtins.int] max_bandwidth: Specifies the maximum traffic bandwidth allowed in the specified time
               segment. The value ranges from `1` to `200`. The unit is MB/s.
        :param pulumi.Input[_builtins.str] start: Specifies the start time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "end", value)

    @_builtins.property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def start(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start", value)


if not MYPY:
    class MigrationTaskDestinationObjectArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        region: pulumi.Input[_builtins.str]
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        save_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        security_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
elif False:
    MigrationTaskDestinationObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskDestinationObjectArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 save_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the destination bucket is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] save_prefix: Specifies the path prefix in the destination bucket. The prefix is added
               before the object key to form a new key. Changing this creates a new resource.
               
               <a name="bandwidth_policy_object"></a>
               The `bandwidth_policy` block supports:
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] security_token: Specifies the temporary token for accessing the destination bucket.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if save_prefix is not None:
            pulumi.set(__self__, "save_prefix", save_prefix)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="savePrefix")
    def save_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        return pulumi.get(self, "save_prefix")

    @save_prefix.setter
    def save_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "save_prefix", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_token")

    @security_token.setter
    def security_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_token", value)


if not MYPY:
    class MigrationTaskGroupBandwidthPolicyArgsDict(TypedDict):
        end: pulumi.Input[_builtins.str]
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        max_bandwidth: pulumi.Input[_builtins.int]
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        start: pulumi.Input[_builtins.str]
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
elif False:
    MigrationTaskGroupBandwidthPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskGroupBandwidthPolicyArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[_builtins.str],
                 max_bandwidth: pulumi.Input[_builtins.int],
                 start: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] end: Specifies the end time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
               
               <a name="source_cdn_object"></a>
               The `source_cdn` block supports:
        :param pulumi.Input[_builtins.int] max_bandwidth: Specifies the maximum traffic bandwidth allowed in the specified time
               segment. The value ranges from `1` to `200`. The unit is MB/s.
        :param pulumi.Input[_builtins.str] start: Specifies the start time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "end", value)

    @_builtins.property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def start(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start", value)


if not MYPY:
    class MigrationTaskGroupDestinationObjectArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        region: pulumi.Input[_builtins.str]
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        data_source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        save_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
elif False:
    MigrationTaskGroupDestinationObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskGroupDestinationObjectArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input[_builtins.str]] = None,
                 save_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the destination bucket is located.
               The value must be the same as that of the service endpoint. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] data_source: Specifies the destination data source. The default value is **HEC**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] save_prefix: Specifies the path prefix in the destination bucket. The prefix is added
               before the object key to form a new key. Changing this creates a new resource.
               
               <a name="bandwidth_policy_object"></a>
               The `bandwidth_policy` block supports:
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if save_prefix is not None:
            pulumi.set(__self__, "save_prefix", save_prefix)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="savePrefix")
    def save_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        return pulumi.get(self, "save_prefix")

    @save_prefix.setter
    def save_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "save_prefix", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class MigrationTaskGroupSourceCdnArgsDict(TypedDict):
        domain: pulumi.Input[_builtins.str]
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
elif False:
    MigrationTaskGroupSourceCdnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskGroupSourceCdnArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type. Valid values are **NONE**,
               **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
               **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
               **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)


if not MYPY:
    class MigrationTaskGroupSourceObjectArgsDict(TypedDict):
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        app_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is
        **Tencent**. Changing this creates a new resource.
        """
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        data_source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        list_file_bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the OBS bucket for storing the object
        list files. `list_file_bucket` is mandatory when `type` is set to **LIST** or **URL_LIST**.
        Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task group will fail to be
        created.
        """
        list_file_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the OBS bucket folder name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **LIST** or **URL_LIST**.

        + If `type` is **LIST**: You need to write the names of source objects to be migrated into an object list file
        and store the file in an OBS bucket on HUAWEI CLOUD. OMS migrates all objects specified in the object list file.

        + If `type` is **URL_LIST**: You need to write the URLs of the files to be migrated and their destination objects
        names into one or more .txt URL list files and store the files in an OBS bucket on HUAWEI CLOUD. You can store up
        to 2,000 list files in a fixed folder in the OBS bucket. Each list file cannot exceed 1 GB. OMS migrates all
        objects specified in the URL list files.

        Changing this creates a new resource.

        > More details for the format requirements of list file. Please see
        the [User Guide](https://support.huaweicloud.com/intl/en-us/usermanual-oms/oms_01_0017.html).

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        objects: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the name prefixes of objects to be migrated if `type` is set to
        **PREFIX**. If you want to migrate the entire bucket, set this parameter to [""].
        Changing this creates a new resource.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
elif False:
    MigrationTaskGroupSourceObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskGroupSourceObjectArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input[_builtins.str]] = None,
                 list_file_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 list_file_key: Optional[pulumi.Input[_builtins.str]] = None,
                 objects: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the APP ID. This parameter is mandatory when `data_source` is
               **Tencent**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] data_source: Specifies the destination data source. The default value is **HEC**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] list_file_bucket: Specifies the name of the OBS bucket for storing the object
               list files. `list_file_bucket` is mandatory when `type` is set to **LIST** or **URL_LIST**.
               Changing this creates a new resource.
               
               > Ensure that the OBS bucket is in the same region as the destination bucket, or the task group will fail to be
               created.
        :param pulumi.Input[_builtins.str] list_file_key: Specifies the OBS bucket folder name of the list file or URL list file.
               `list_file_key` is mandatory when `type` is set to **LIST** or **URL_LIST**.
               
               + If `type` is **LIST**: You need to write the names of source objects to be migrated into an object list file
               and store the file in an OBS bucket on HUAWEI CLOUD. OMS migrates all objects specified in the object list file.
               
               + If `type` is **URL_LIST**: You need to write the URLs of the files to be migrated and their destination objects
               names into one or more .txt URL list files and store the files in an OBS bucket on HUAWEI CLOUD. You can store up
               to 2,000 list files in a fixed folder in the OBS bucket. Each list file cannot exceed 1 GB. OMS migrates all
               objects specified in the URL list files.
               
               Changing this creates a new resource.
               
               > More details for the format requirements of list file. Please see
               the [User Guide](https://support.huaweicloud.com/intl/en-us/usermanual-oms/oms_01_0017.html).
               
               <a name="destination_object_object"></a>
               The `destination_object` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] objects: Specifies the name prefixes of objects to be migrated if `type` is set to
               **PREFIX**. If you want to migrate the entire bucket, set this parameter to [""].
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the destination bucket is located.
               The value must be the same as that of the service endpoint. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if list_file_bucket is not None:
            pulumi.set(__self__, "list_file_bucket", list_file_bucket)
        if list_file_key is not None:
            pulumi.set(__self__, "list_file_key", list_file_key)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is
        **Tencent**. Changing this creates a new resource.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="listFileBucket")
    def list_file_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the OBS bucket for storing the object
        list files. `list_file_bucket` is mandatory when `type` is set to **LIST** or **URL_LIST**.
        Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task group will fail to be
        created.
        """
        return pulumi.get(self, "list_file_bucket")

    @list_file_bucket.setter
    def list_file_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_file_bucket", value)

    @_builtins.property
    @pulumi.getter(name="listFileKey")
    def list_file_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS bucket folder name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **LIST** or **URL_LIST**.

        + If `type` is **LIST**: You need to write the names of source objects to be migrated into an object list file
        and store the file in an OBS bucket on HUAWEI CLOUD. OMS migrates all objects specified in the object list file.

        + If `type` is **URL_LIST**: You need to write the URLs of the files to be migrated and their destination objects
        names into one or more .txt URL list files and store the files in an OBS bucket on HUAWEI CLOUD. You can store up
        to 2,000 list files in a fixed folder in the OBS bucket. Each list file cannot exceed 1 GB. OMS migrates all
        objects specified in the URL list files.

        Changing this creates a new resource.

        > More details for the format requirements of list file. Please see
        the [User Guide](https://support.huaweicloud.com/intl/en-us/usermanual-oms/oms_01_0017.html).

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        return pulumi.get(self, "list_file_key")

    @list_file_key.setter
    def list_file_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_file_key", value)

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the name prefixes of objects to be migrated if `type` is set to
        **PREFIX**. If you want to migrate the entire bucket, set this parameter to [""].
        Changing this creates a new resource.
        """
        return pulumi.get(self, "objects")

    @objects.setter
    def objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "objects", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class MigrationTaskSmnConfigArgsDict(TypedDict):
        topic_urn: pulumi.Input[_builtins.str]
        """
        Specifies the SMN message topic URN bound to a migration task.
        Changing this creates a new resource.
        """
        trigger_conditions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the trigger conditions of sending messages using SMN.
        The value can be:
        + **FAILURE**: indicates that an SMN message will be sent after the migration task fails.
        + **SUCCESS**: indicates that an SMN message will be sent after the migration task succeeds.

        Changing this creates a new resource.
        """
        language: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the SMN message language. The value can be **zh-cn** or
        **en-us**. Default value: **en-us**. Changing this creates a new resource.
        """
        message_template_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the message template name.
        If this parameter is specified, SMN messages are sent using the specified template.
        Changing this creates a new resource.
        """
elif False:
    MigrationTaskSmnConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskSmnConfigArgs:
    def __init__(__self__, *,
                 topic_urn: pulumi.Input[_builtins.str],
                 trigger_conditions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 message_template_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the SMN message topic URN bound to a migration task.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trigger_conditions: Specifies the trigger conditions of sending messages using SMN.
               The value can be:
               + **FAILURE**: indicates that an SMN message will be sent after the migration task fails.
               + **SUCCESS**: indicates that an SMN message will be sent after the migration task succeeds.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] language: Specifies the SMN message language. The value can be **zh-cn** or
               **en-us**. Default value: **en-us**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] message_template_name: Specifies the message template name.
               If this parameter is specified, SMN messages are sent using the specified template.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if message_template_name is not None:
            pulumi.set(__self__, "message_template_name", message_template_name)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the SMN message topic URN bound to a migration task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the trigger conditions of sending messages using SMN.
        The value can be:
        + **FAILURE**: indicates that an SMN message will be sent after the migration task fails.
        + **SUCCESS**: indicates that an SMN message will be sent after the migration task succeeds.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "trigger_conditions")

    @trigger_conditions.setter
    def trigger_conditions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "trigger_conditions", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SMN message language. The value can be **zh-cn** or
        **en-us**. Default value: **en-us**. Changing this creates a new resource.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="messageTemplateName")
    def message_template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message template name.
        If this parameter is specified, SMN messages are sent using the specified template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_template_name")

    @message_template_name.setter
    def message_template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_template_name", value)


if not MYPY:
    class MigrationTaskSourceCdnArgsDict(TypedDict):
        domain: pulumi.Input[_builtins.str]
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.

        <a name="smn_config_object"></a>
        The `smn_config` block supports:
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
elif False:
    MigrationTaskSourceCdnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskSourceCdnArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
               
               <a name="smn_config_object"></a>
               The `smn_config` block supports:
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type. Valid values are **NONE**,
               **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
               **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
               **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.

        <a name="smn_config_object"></a>
        The `smn_config` block supports:
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)


if not MYPY:
    class MigrationTaskSourceObjectArgsDict(TypedDict):
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        app_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is  
        **Tencent**. Changing this creates a new resource.
        """
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        data_source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source cloud service provider. If `type` is
        **url_list**,set this parameter to **URLSource**. The value can be **AWS**, **Azure**, **Aliyun**, **Tencent**,
        **HuaweiCloud**, **QingCloud**, **KingsoftCloud**, **Baidu**, **Qiniu**, **URLSource** and **UCloud**.
        The default value is **Aliyun**. Changing this creates a new resource.
        """
        json_auth_file: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the file used for Google Cloud Storage authentication.
        Changing this creates a new resource.

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        list_file_bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the OBS bucket for storing the object list files.
        `list_file_bucket` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task will fail to be created.
        """
        list_file_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the object name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
        """
        list_file_num: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the number of stored object list files.
        Changing this creates a new resource.
        """
        objects: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of object keys.
        + If `type` is set to **object**, this parameter specifies the names of the objects to be migrated. The strings
        ending with a slash (/) indicate the folders to be migrated, and the strings not ending with a slash (/) indicate the
        files to be migrated.
        + If `type` is set to **prefix**, this parameter indicates the name prefixes of the objects to be migrated.
        Set this parameter to [""] to migrate the entire bucket

        Changing this creates a new resource.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        security_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
elif False:
    MigrationTaskSourceObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MigrationTaskSourceObjectArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input[_builtins.str]] = None,
                 json_auth_file: Optional[pulumi.Input[_builtins.str]] = None,
                 list_file_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 list_file_key: Optional[pulumi.Input[_builtins.str]] = None,
                 list_file_num: Optional[pulumi.Input[_builtins.str]] = None,
                 objects: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the APP ID. This parameter is mandatory when `data_source` is  
               **Tencent**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] data_source: Specifies the source cloud service provider. If `type` is
               **url_list**,set this parameter to **URLSource**. The value can be **AWS**, **Azure**, **Aliyun**, **Tencent**,
               **HuaweiCloud**, **QingCloud**, **KingsoftCloud**, **Baidu**, **Qiniu**, **URLSource** and **UCloud**.
               The default value is **Aliyun**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] json_auth_file: Specifies the file used for Google Cloud Storage authentication.
               Changing this creates a new resource.
               
               <a name="destination_object_object"></a>
               The `destination_object` block supports:
        :param pulumi.Input[_builtins.str] list_file_bucket: Specifies the name of the OBS bucket for storing the object list files.
               `list_file_bucket` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
               
               > Ensure that the OBS bucket is in the same region as the destination bucket, or the task will fail to be created.
        :param pulumi.Input[_builtins.str] list_file_key: Specifies the object name of the list file or URL list file.
               `list_file_key` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] list_file_num: Specifies the number of stored object list files.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] objects: Specifies the list of object keys.
               + If `type` is set to **object**, this parameter specifies the names of the objects to be migrated. The strings
               ending with a slash (/) indicate the folders to be migrated, and the strings not ending with a slash (/) indicate the
               files to be migrated.
               + If `type` is set to **prefix**, this parameter indicates the name prefixes of the objects to be migrated.
               Set this parameter to [""] to migrate the entire bucket
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the destination bucket is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] security_token: Specifies the temporary token for accessing the destination bucket.
               Changing this creates a new resource.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if json_auth_file is not None:
            pulumi.set(__self__, "json_auth_file", json_auth_file)
        if list_file_bucket is not None:
            pulumi.set(__self__, "list_file_bucket", list_file_bucket)
        if list_file_key is not None:
            pulumi.set(__self__, "list_file_key", list_file_key)
        if list_file_num is not None:
            pulumi.set(__self__, "list_file_num", list_file_num)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is  
        **Tencent**. Changing this creates a new resource.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source cloud service provider. If `type` is
        **url_list**,set this parameter to **URLSource**. The value can be **AWS**, **Azure**, **Aliyun**, **Tencent**,
        **HuaweiCloud**, **QingCloud**, **KingsoftCloud**, **Baidu**, **Qiniu**, **URLSource** and **UCloud**.
        The default value is **Aliyun**. Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="jsonAuthFile")
    def json_auth_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the file used for Google Cloud Storage authentication.
        Changing this creates a new resource.

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        return pulumi.get(self, "json_auth_file")

    @json_auth_file.setter
    def json_auth_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "json_auth_file", value)

    @_builtins.property
    @pulumi.getter(name="listFileBucket")
    def list_file_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the OBS bucket for storing the object list files.
        `list_file_bucket` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task will fail to be created.
        """
        return pulumi.get(self, "list_file_bucket")

    @list_file_bucket.setter
    def list_file_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_file_bucket", value)

    @_builtins.property
    @pulumi.getter(name="listFileKey")
    def list_file_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the object name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
        """
        return pulumi.get(self, "list_file_key")

    @list_file_key.setter
    def list_file_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_file_key", value)

    @_builtins.property
    @pulumi.getter(name="listFileNum")
    def list_file_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the number of stored object list files.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "list_file_num")

    @list_file_num.setter
    def list_file_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_file_num", value)

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of object keys.
        + If `type` is set to **object**, this parameter specifies the names of the objects to be migrated. The strings
        ending with a slash (/) indicate the folders to be migrated, and the strings not ending with a slash (/) indicate the
        files to be migrated.
        + If `type` is set to **prefix**, this parameter indicates the name prefixes of the objects to be migrated.
        Set this parameter to [""] to migrate the entire bucket

        Changing this creates a new resource.
        """
        return pulumi.get(self, "objects")

    @objects.setter
    def objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "objects", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_token")

    @security_token.setter
    def security_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_token", value)


if not MYPY:
    class TaskDstNodeArgsDict(TypedDict):
        ak: pulumi.Input[_builtins.str]
        bucket: pulumi.Input[_builtins.str]
        object_key: pulumi.Input[_builtins.str]
        region: pulumi.Input[_builtins.str]
        sk: pulumi.Input[_builtins.str]
elif False:
    TaskDstNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskDstNodeArgs:
    def __init__(__self__, *,
                 ak: pulumi.Input[_builtins.str],
                 bucket: pulumi.Input[_builtins.str],
                 object_key: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 sk: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "ak", ak)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "sk", sk)

    @_builtins.property
    @pulumi.getter
    def ak(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ak")

    @ak.setter
    def ak(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ak", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "object_key")

    @object_key.setter
    def object_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "object_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sk(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "sk")

    @sk.setter
    def sk(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sk", value)


if not MYPY:
    class TaskSmnInfoArgsDict(TypedDict):
        topic_urn: pulumi.Input[_builtins.str]
        trigger_conditions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        language: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TaskSmnInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskSmnInfoArgs:
    def __init__(__self__, *,
                 topic_urn: pulumi.Input[_builtins.str],
                 trigger_conditions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 language: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "topic_urn", topic_urn)
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "trigger_conditions")

    @trigger_conditions.setter
    def trigger_conditions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "trigger_conditions", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)


if not MYPY:
    class TaskSrcNodeArgsDict(TypedDict):
        ak: pulumi.Input[_builtins.str]
        bucket: pulumi.Input[_builtins.str]
        object_key: pulumi.Input[_builtins.str]
        region: pulumi.Input[_builtins.str]
        sk: pulumi.Input[_builtins.str]
        cloud_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TaskSrcNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskSrcNodeArgs:
    def __init__(__self__, *,
                 ak: pulumi.Input[_builtins.str],
                 bucket: pulumi.Input[_builtins.str],
                 object_key: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 sk: pulumi.Input[_builtins.str],
                 cloud_type: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "ak", ak)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "sk", sk)
        if cloud_type is not None:
            pulumi.set(__self__, "cloud_type", cloud_type)

    @_builtins.property
    @pulumi.getter
    def ak(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ak")

    @ak.setter
    def ak(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ak", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "object_key")

    @object_key.setter
    def object_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "object_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sk(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "sk")

    @sk.setter
    def sk(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sk", value)

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cloud_type")

    @cloud_type.setter
    def cloud_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_type", value)


