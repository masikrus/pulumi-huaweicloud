# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MigrationSyncTaskSourceCdn',
    'MigrationTaskBandwidthPolicy',
    'MigrationTaskDestinationObject',
    'MigrationTaskGroupBandwidthPolicy',
    'MigrationTaskGroupDestinationObject',
    'MigrationTaskGroupSourceCdn',
    'MigrationTaskGroupSourceObject',
    'MigrationTaskSmnConfig',
    'MigrationTaskSourceCdn',
    'MigrationTaskSourceObject',
    'TaskDstNode',
    'TaskSmnInfo',
    'TaskSrcNode',
]

@pulumi.output_type
class MigrationSyncTaskSourceCdn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationType":
            suggest = "authentication_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationSyncTaskSourceCdn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationSyncTaskSourceCdn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationSyncTaskSourceCdn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: _builtins.str,
                 protocol: _builtins.str,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param _builtins.str protocol: Specifies the protocol type. Value options: **http** and **https**.
               Changing this creates a new resource.
        :param _builtins.str authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
        :param _builtins.str authentication_type: Specifies the authentication type. Value options:
               
               + **NONE**
               + **QINIU_PRIVATE_AUTHENTICATION**
               + **ALIYUN_OSS_A**
               + **ALIYUN_OSS_B**
               + **ALIYUN_OSS_C**
               + **KSYUN_PRIVATE_AUTHENTICATION**
               + **TENCENT_COS_A**
               + **TENCENT_COS_B**
               + **TENCENT_COS_C**
               + **TENCENT_COS_D**
               
               Default value: **NONE**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type. Value options: **http** and **https**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication type. Value options:

        + **NONE**
        + **QINIU_PRIVATE_AUTHENTICATION**
        + **ALIYUN_OSS_A**
        + **ALIYUN_OSS_B**
        + **ALIYUN_OSS_C**
        + **KSYUN_PRIVATE_AUTHENTICATION**
        + **TENCENT_COS_A**
        + **TENCENT_COS_B**
        + **TENCENT_COS_C**
        + **TENCENT_COS_D**

        Default value: **NONE**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")


@pulumi.output_type
class MigrationTaskBandwidthPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxBandwidth":
            suggest = "max_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskBandwidthPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskBandwidthPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskBandwidthPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: _builtins.str,
                 max_bandwidth: _builtins.int,
                 start: _builtins.str):
        """
        :param _builtins.str end: Specifies the end time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
               
               <a name="source_cdn_object"></a>
               The `source_cdn` block supports:
        :param _builtins.int max_bandwidth: Specifies the maximum traffic bandwidth allowed in the specified time
               segment. The value ranges from `1` to `200`. The unit is MB/s.
        :param _builtins.str start: Specifies the start time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> _builtins.int:
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class MigrationTaskDestinationObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "savePrefix":
            suggest = "save_prefix"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "securityToken":
            suggest = "security_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskDestinationObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskDestinationObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskDestinationObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: _builtins.str,
                 region: _builtins.str,
                 access_key: Optional[_builtins.str] = None,
                 save_prefix: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 security_token: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str region: Specifies the region where the destination bucket is located.
               Changing this creates a new resource.
        :param _builtins.str access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str save_prefix: Specifies the path prefix in the destination bucket. The prefix is added
               before the object key to form a new key. Changing this creates a new resource.
               
               <a name="bandwidth_policy_object"></a>
               The `bandwidth_policy` block supports:
        :param _builtins.str secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str security_token: Specifies the temporary token for accessing the destination bucket.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if save_prefix is not None:
            pulumi.set(__self__, "save_prefix", save_prefix)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="savePrefix")
    def save_prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        return pulumi.get(self, "save_prefix")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[_builtins.str]:
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_token")


@pulumi.output_type
class MigrationTaskGroupBandwidthPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxBandwidth":
            suggest = "max_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskGroupBandwidthPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskGroupBandwidthPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskGroupBandwidthPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: _builtins.str,
                 max_bandwidth: _builtins.int,
                 start: _builtins.str):
        """
        :param _builtins.str end: Specifies the end time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
               
               <a name="source_cdn_object"></a>
               The `source_cdn` block supports:
        :param _builtins.int max_bandwidth: Specifies the maximum traffic bandwidth allowed in the specified time
               segment. The value ranges from `1` to `200`. The unit is MB/s.
        :param _builtins.str start: Specifies the start time of the traffic limit rule. The format is **hh:mm**,
               e.g. **12:03**.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        Specifies the end time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.

        <a name="source_cdn_object"></a>
        The `source_cdn` block supports:
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> _builtins.int:
        """
        Specifies the maximum traffic bandwidth allowed in the specified time
        segment. The value ranges from `1` to `200`. The unit is MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        """
        Specifies the start time of the traffic limit rule. The format is **hh:mm**,
        e.g. **12:03**.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class MigrationTaskGroupDestinationObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "dataSource":
            suggest = "data_source"
        elif key == "savePrefix":
            suggest = "save_prefix"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskGroupDestinationObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskGroupDestinationObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskGroupDestinationObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: _builtins.str,
                 region: _builtins.str,
                 access_key: Optional[_builtins.str] = None,
                 data_source: Optional[_builtins.str] = None,
                 save_prefix: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str region: Specifies the region where the destination bucket is located.
               The value must be the same as that of the service endpoint. Changing this creates a new resource.
        :param _builtins.str access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str data_source: Specifies the destination data source. The default value is **HEC**.
               Changing this creates a new resource.
        :param _builtins.str save_prefix: Specifies the path prefix in the destination bucket. The prefix is added
               before the object key to form a new key. Changing this creates a new resource.
               
               <a name="bandwidth_policy_object"></a>
               The `bandwidth_policy` block supports:
        :param _builtins.str secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if save_prefix is not None:
            pulumi.set(__self__, "save_prefix", save_prefix)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[_builtins.str]:
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="savePrefix")
    def save_prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the path prefix in the destination bucket. The prefix is added
        before the object key to form a new key. Changing this creates a new resource.

        <a name="bandwidth_policy_object"></a>
        The `bandwidth_policy` block supports:
        """
        return pulumi.get(self, "save_prefix")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class MigrationTaskGroupSourceCdn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationType":
            suggest = "authentication_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskGroupSourceCdn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskGroupSourceCdn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskGroupSourceCdn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: _builtins.str,
                 protocol: _builtins.str,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param _builtins.str protocol: Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
               Changing this creates a new resource.
        :param _builtins.str authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
        :param _builtins.str authentication_type: Specifies the authentication type. Valid values are **NONE**,
               **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
               **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
               **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")


@pulumi.output_type
class MigrationTaskGroupSourceObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "appId":
            suggest = "app_id"
        elif key == "dataSource":
            suggest = "data_source"
        elif key == "listFileBucket":
            suggest = "list_file_bucket"
        elif key == "listFileKey":
            suggest = "list_file_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskGroupSourceObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskGroupSourceObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskGroupSourceObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[_builtins.str] = None,
                 app_id: Optional[_builtins.str] = None,
                 bucket: Optional[_builtins.str] = None,
                 data_source: Optional[_builtins.str] = None,
                 list_file_bucket: Optional[_builtins.str] = None,
                 list_file_key: Optional[_builtins.str] = None,
                 objects: Optional[Sequence[_builtins.str]] = None,
                 region: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str app_id: Specifies the APP ID. This parameter is mandatory when `data_source` is
               **Tencent**. Changing this creates a new resource.
        :param _builtins.str bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str data_source: Specifies the destination data source. The default value is **HEC**.
               Changing this creates a new resource.
        :param _builtins.str list_file_bucket: Specifies the name of the OBS bucket for storing the object
               list files. `list_file_bucket` is mandatory when `type` is set to **LIST** or **URL_LIST**.
               Changing this creates a new resource.
               
               > Ensure that the OBS bucket is in the same region as the destination bucket, or the task group will fail to be
               created.
        :param _builtins.str list_file_key: Specifies the OBS bucket folder name of the list file or URL list file.
               `list_file_key` is mandatory when `type` is set to **LIST** or **URL_LIST**.
               
               + If `type` is **LIST**: You need to write the names of source objects to be migrated into an object list file
               and store the file in an OBS bucket on HUAWEI CLOUD. OMS migrates all objects specified in the object list file.
               
               + If `type` is **URL_LIST**: You need to write the URLs of the files to be migrated and their destination objects
               names into one or more .txt URL list files and store the files in an OBS bucket on HUAWEI CLOUD. You can store up
               to 2,000 list files in a fixed folder in the OBS bucket. Each list file cannot exceed 1 GB. OMS migrates all
               objects specified in the URL list files.
               
               Changing this creates a new resource.
               
               > More details for the format requirements of list file. Please see
               the [User Guide](https://support.huaweicloud.com/intl/en-us/usermanual-oms/oms_01_0017.html).
               
               <a name="destination_object_object"></a>
               The `destination_object` block supports:
        :param Sequence[_builtins.str] objects: Specifies the name prefixes of objects to be migrated if `type` is set to
               **PREFIX**. If you want to migrate the entire bucket, set this parameter to [""].
               Changing this creates a new resource.
        :param _builtins.str region: Specifies the region where the destination bucket is located.
               The value must be the same as that of the service endpoint. Changing this creates a new resource.
        :param _builtins.str secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if list_file_bucket is not None:
            pulumi.set(__self__, "list_file_bucket", list_file_bucket)
        if list_file_key is not None:
            pulumi.set(__self__, "list_file_key", list_file_key)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[_builtins.str]:
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is
        **Tencent**. Changing this creates a new resource.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[_builtins.str]:
        """
        Specifies the destination data source. The default value is **HEC**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="listFileBucket")
    def list_file_bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the OBS bucket for storing the object
        list files. `list_file_bucket` is mandatory when `type` is set to **LIST** or **URL_LIST**.
        Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task group will fail to be
        created.
        """
        return pulumi.get(self, "list_file_bucket")

    @_builtins.property
    @pulumi.getter(name="listFileKey")
    def list_file_key(self) -> Optional[_builtins.str]:
        """
        Specifies the OBS bucket folder name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **LIST** or **URL_LIST**.

        + If `type` is **LIST**: You need to write the names of source objects to be migrated into an object list file
        and store the file in an OBS bucket on HUAWEI CLOUD. OMS migrates all objects specified in the object list file.

        + If `type` is **URL_LIST**: You need to write the URLs of the files to be migrated and their destination objects
        names into one or more .txt URL list files and store the files in an OBS bucket on HUAWEI CLOUD. You can store up
        to 2,000 list files in a fixed folder in the OBS bucket. Each list file cannot exceed 1 GB. OMS migrates all
        objects specified in the URL list files.

        Changing this creates a new resource.

        > More details for the format requirements of list file. Please see
        the [User Guide](https://support.huaweicloud.com/intl/en-us/usermanual-oms/oms_01_0017.html).

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        return pulumi.get(self, "list_file_key")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the name prefixes of objects to be migrated if `type` is set to
        **PREFIX**. If you want to migrate the entire bucket, set this parameter to [""].
        Changing this creates a new resource.
        """
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region where the destination bucket is located.
        The value must be the same as that of the service endpoint. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class MigrationTaskSmnConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicUrn":
            suggest = "topic_urn"
        elif key == "triggerConditions":
            suggest = "trigger_conditions"
        elif key == "messageTemplateName":
            suggest = "message_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskSmnConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskSmnConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskSmnConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_urn: _builtins.str,
                 trigger_conditions: Sequence[_builtins.str],
                 language: Optional[_builtins.str] = None,
                 message_template_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str topic_urn: Specifies the SMN message topic URN bound to a migration task.
               Changing this creates a new resource.
        :param Sequence[_builtins.str] trigger_conditions: Specifies the trigger conditions of sending messages using SMN.
               The value can be:
               + **FAILURE**: indicates that an SMN message will be sent after the migration task fails.
               + **SUCCESS**: indicates that an SMN message will be sent after the migration task succeeds.
               
               Changing this creates a new resource.
        :param _builtins.str language: Specifies the SMN message language. The value can be **zh-cn** or
               **en-us**. Default value: **en-us**. Changing this creates a new resource.
        :param _builtins.str message_template_name: Specifies the message template name.
               If this parameter is specified, SMN messages are sent using the specified template.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if message_template_name is not None:
            pulumi.set(__self__, "message_template_name", message_template_name)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        """
        Specifies the SMN message topic URN bound to a migration task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> Sequence[_builtins.str]:
        """
        Specifies the trigger conditions of sending messages using SMN.
        The value can be:
        + **FAILURE**: indicates that an SMN message will be sent after the migration task fails.
        + **SUCCESS**: indicates that an SMN message will be sent after the migration task succeeds.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "trigger_conditions")

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[_builtins.str]:
        """
        Specifies the SMN message language. The value can be **zh-cn** or
        **en-us**. Default value: **en-us**. Changing this creates a new resource.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="messageTemplateName")
    def message_template_name(self) -> Optional[_builtins.str]:
        """
        Specifies the message template name.
        If this parameter is specified, SMN messages are sent using the specified template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_template_name")


@pulumi.output_type
class MigrationTaskSourceCdn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationType":
            suggest = "authentication_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskSourceCdn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskSourceCdn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskSourceCdn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: _builtins.str,
                 protocol: _builtins.str,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: Specifies the domain name from which to obtain objects to be migrated.
               Changing this creates a new resource.
        :param _builtins.str protocol: Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
               Changing this creates a new resource.
        :param _builtins.str authentication_key: Specifies the CDN authentication key.
               Changing this creates a new resource.
               
               <a name="smn_config_object"></a>
               The `smn_config` block supports:
        :param _builtins.str authentication_type: Specifies the authentication type. Valid values are **NONE**,
               **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
               **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
               **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        Specifies the domain name from which to obtain objects to be migrated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type. Valid values are **HTTP** and **HTTPS**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Specifies the CDN authentication key.
        Changing this creates a new resource.

        <a name="smn_config_object"></a>
        The `smn_config` block supports:
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication type. Valid values are **NONE**,
        **QINIU_PRIVATE_AUTHENTICATION**, **ALIYUN_OSS_A**, **ALIYUN_OSS_B**, **ALIYUN_OSS_C**,
        **KSYUN_PRIVATE_AUTHENTICATION**, **TENCENT_COS_A**, **TENCENT_COS_B**, **TENCENT_COS_C**,
        **TENCENT_COS_D**. Default value: **None**. Changing this creates a new resource.
        """
        return pulumi.get(self, "authentication_type")


@pulumi.output_type
class MigrationTaskSourceObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "appId":
            suggest = "app_id"
        elif key == "dataSource":
            suggest = "data_source"
        elif key == "jsonAuthFile":
            suggest = "json_auth_file"
        elif key == "listFileBucket":
            suggest = "list_file_bucket"
        elif key == "listFileKey":
            suggest = "list_file_key"
        elif key == "listFileNum":
            suggest = "list_file_num"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "securityToken":
            suggest = "security_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTaskSourceObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTaskSourceObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTaskSourceObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[_builtins.str] = None,
                 app_id: Optional[_builtins.str] = None,
                 bucket: Optional[_builtins.str] = None,
                 data_source: Optional[_builtins.str] = None,
                 json_auth_file: Optional[_builtins.str] = None,
                 list_file_bucket: Optional[_builtins.str] = None,
                 list_file_key: Optional[_builtins.str] = None,
                 list_file_num: Optional[_builtins.str] = None,
                 objects: Optional[Sequence[_builtins.str]] = None,
                 region: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 security_token: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_key: Specifies the access key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str app_id: Specifies the APP ID. This parameter is mandatory when `data_source` is  
               **Tencent**. Changing this creates a new resource.
        :param _builtins.str bucket: Specifies the name of the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str data_source: Specifies the source cloud service provider. If `type` is
               **url_list**,set this parameter to **URLSource**. The value can be **AWS**, **Azure**, **Aliyun**, **Tencent**,
               **HuaweiCloud**, **QingCloud**, **KingsoftCloud**, **Baidu**, **Qiniu**, **URLSource** and **UCloud**.
               The default value is **Aliyun**. Changing this creates a new resource.
        :param _builtins.str json_auth_file: Specifies the file used for Google Cloud Storage authentication.
               Changing this creates a new resource.
               
               <a name="destination_object_object"></a>
               The `destination_object` block supports:
        :param _builtins.str list_file_bucket: Specifies the name of the OBS bucket for storing the object list files.
               `list_file_bucket` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
               
               > Ensure that the OBS bucket is in the same region as the destination bucket, or the task will fail to be created.
        :param _builtins.str list_file_key: Specifies the object name of the list file or URL list file.
               `list_file_key` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
        :param _builtins.str list_file_num: Specifies the number of stored object list files.
               Changing this creates a new resource.
        :param Sequence[_builtins.str] objects: Specifies the list of object keys.
               + If `type` is set to **object**, this parameter specifies the names of the objects to be migrated. The strings
               ending with a slash (/) indicate the folders to be migrated, and the strings not ending with a slash (/) indicate the
               files to be migrated.
               + If `type` is set to **prefix**, this parameter indicates the name prefixes of the objects to be migrated.
               Set this parameter to [""] to migrate the entire bucket
               
               Changing this creates a new resource.
        :param _builtins.str region: Specifies the region where the destination bucket is located.
               Changing this creates a new resource.
        :param _builtins.str secret_key: Specifies the secret key for accessing the destination bucket.
               Changing this creates a new resource.
        :param _builtins.str security_token: Specifies the temporary token for accessing the destination bucket.
               Changing this creates a new resource.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if json_auth_file is not None:
            pulumi.set(__self__, "json_auth_file", json_auth_file)
        if list_file_bucket is not None:
            pulumi.set(__self__, "list_file_bucket", list_file_bucket)
        if list_file_key is not None:
            pulumi.set(__self__, "list_file_key", list_file_key)
        if list_file_num is not None:
            pulumi.set(__self__, "list_file_num", list_file_num)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        """
        Specifies the access key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[_builtins.str]:
        """
        Specifies the APP ID. This parameter is mandatory when `data_source` is  
        **Tencent**. Changing this creates a new resource.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[_builtins.str]:
        """
        Specifies the source cloud service provider. If `type` is
        **url_list**,set this parameter to **URLSource**. The value can be **AWS**, **Azure**, **Aliyun**, **Tencent**,
        **HuaweiCloud**, **QingCloud**, **KingsoftCloud**, **Baidu**, **Qiniu**, **URLSource** and **UCloud**.
        The default value is **Aliyun**. Changing this creates a new resource.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="jsonAuthFile")
    def json_auth_file(self) -> Optional[_builtins.str]:
        """
        Specifies the file used for Google Cloud Storage authentication.
        Changing this creates a new resource.

        <a name="destination_object_object"></a>
        The `destination_object` block supports:
        """
        return pulumi.get(self, "json_auth_file")

    @_builtins.property
    @pulumi.getter(name="listFileBucket")
    def list_file_bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the OBS bucket for storing the object list files.
        `list_file_bucket` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.

        > Ensure that the OBS bucket is in the same region as the destination bucket, or the task will fail to be created.
        """
        return pulumi.get(self, "list_file_bucket")

    @_builtins.property
    @pulumi.getter(name="listFileKey")
    def list_file_key(self) -> Optional[_builtins.str]:
        """
        Specifies the object name of the list file or URL list file.
        `list_file_key` is mandatory when `type` is set to **list** or **url_list**. Changing this creates a new resource.
        """
        return pulumi.get(self, "list_file_key")

    @_builtins.property
    @pulumi.getter(name="listFileNum")
    def list_file_num(self) -> Optional[_builtins.str]:
        """
        Specifies the number of stored object list files.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "list_file_num")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of object keys.
        + If `type` is set to **object**, this parameter specifies the names of the objects to be migrated. The strings
        ending with a slash (/) indicate the folders to be migrated, and the strings not ending with a slash (/) indicate the
        files to be migrated.
        + If `type` is set to **prefix**, this parameter indicates the name prefixes of the objects to be migrated.
        Set this parameter to [""] to migrate the entire bucket

        Changing this creates a new resource.
        """
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region where the destination bucket is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Specifies the secret key for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[_builtins.str]:
        """
        Specifies the temporary token for accessing the destination bucket.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_token")


@pulumi.output_type
class TaskDstNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectKey":
            suggest = "object_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskDstNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskDstNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskDstNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ak: _builtins.str,
                 bucket: _builtins.str,
                 object_key: _builtins.str,
                 region: _builtins.str,
                 sk: _builtins.str):
        pulumi.set(__self__, "ak", ak)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "sk", sk)

    @_builtins.property
    @pulumi.getter
    def ak(self) -> _builtins.str:
        return pulumi.get(self, "ak")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> _builtins.str:
        return pulumi.get(self, "object_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sk(self) -> _builtins.str:
        return pulumi.get(self, "sk")


@pulumi.output_type
class TaskSmnInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicUrn":
            suggest = "topic_urn"
        elif key == "triggerConditions":
            suggest = "trigger_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSmnInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSmnInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSmnInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_urn: _builtins.str,
                 trigger_conditions: Sequence[_builtins.str],
                 language: Optional[_builtins.str] = None):
        pulumi.set(__self__, "topic_urn", topic_urn)
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "trigger_conditions")

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "language")


@pulumi.output_type
class TaskSrcNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectKey":
            suggest = "object_key"
        elif key == "cloudType":
            suggest = "cloud_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSrcNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSrcNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSrcNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ak: _builtins.str,
                 bucket: _builtins.str,
                 object_key: _builtins.str,
                 region: _builtins.str,
                 sk: _builtins.str,
                 cloud_type: Optional[_builtins.str] = None):
        pulumi.set(__self__, "ak", ak)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "sk", sk)
        if cloud_type is not None:
            pulumi.set(__self__, "cloud_type", cloud_type)

    @_builtins.property
    @pulumi.getter
    def ak(self) -> _builtins.str:
        return pulumi.get(self, "ak")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> _builtins.str:
        return pulumi.get(self, "object_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sk(self) -> _builtins.str:
        return pulumi.get(self, "sk")

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cloud_type")


