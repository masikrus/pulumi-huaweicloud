# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubscriptionArgs', 'Subscription']

@pulumi.input_type
class SubscriptionArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 topic_urn: pulumi.Input[_builtins.str],
                 extension: Optional[pulumi.Input['SubscriptionExtensionArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Subscription resource.
        :param pulumi.Input[_builtins.str] endpoint: Message endpoint. Changing this parameter will create a new resource.
               + **For an HTTP subscription**, the endpoint starts with `http://`.
               + **For an HTTPS subscription**, the endpoint starts with `https://`.
               + **For an email subscription**, the endpoint is an mail address.
               + **For an SMS message subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a functionstage subscription**, the endpoint is a function urn.
               + **For a functiongraph subscription**, the endpoint is a workflow ID.
               + **For a callnotify subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
               + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
               + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
               + **For a welink subscription**, the endpoint is a a WeLink group account.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the message endpoint. Currently, **email**,
               **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
               **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        :param pulumi.Input['SubscriptionExtensionArgs'] extension: Specifies the extension configurations.
               The extension structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="extension"></a>
               The `extension` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN subscription resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remark: Remark information. The remarks must be a UTF-8-coded character string
               containing 128 bytes. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "topic_urn", topic_urn)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        Message endpoint. Changing this parameter will create a new resource.
        + **For an HTTP subscription**, the endpoint starts with `http://`.
        + **For an HTTPS subscription**, the endpoint starts with `https://`.
        + **For an email subscription**, the endpoint is an mail address.
        + **For an SMS message subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a functionstage subscription**, the endpoint is a function urn.
        + **For a functiongraph subscription**, the endpoint is a workflow ID.
        + **For a callnotify subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
        + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
        + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
        + **For a welink subscription**, the endpoint is a a WeLink group account.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol of the message endpoint. Currently, **email**,
        **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
        **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input['SubscriptionExtensionArgs']]:
        """
        Specifies the extension configurations.
        The extension structure is documented below.
        Changing this parameter will create a new resource.

        <a name="extension"></a>
        The `extension` block supports:
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input['SubscriptionExtensionArgs']]):
        pulumi.set(self, "extension", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the SMN subscription resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Remark information. The remarks must be a UTF-8-coded character string
        containing 128 bytes. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _SubscriptionState:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 extension: Optional[pulumi.Input['SubscriptionExtensionArgs']] = None,
                 filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyArgs']]]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 subscription_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Subscription resources.
        :param pulumi.Input[_builtins.str] endpoint: Message endpoint. Changing this parameter will create a new resource.
               + **For an HTTP subscription**, the endpoint starts with `http://`.
               + **For an HTTPS subscription**, the endpoint starts with `https://`.
               + **For an email subscription**, the endpoint is an mail address.
               + **For an SMS message subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a functionstage subscription**, the endpoint is a function urn.
               + **For a functiongraph subscription**, the endpoint is a workflow ID.
               + **For a callnotify subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
               + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
               + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
               + **For a welink subscription**, the endpoint is a a WeLink group account.
        :param pulumi.Input['SubscriptionExtensionArgs'] extension: Specifies the extension configurations.
               The extension structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="extension"></a>
               The `extension` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyArgs']]] filter_policies: The message filter policies of a subscriber.
               The filter_policies structure is documented below.
        :param pulumi.Input[_builtins.str] owner: Project ID of the topic creator.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the message endpoint. Currently, **email**,
               **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
               **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN subscription resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remark: Remark information. The remarks must be a UTF-8-coded character string
               containing 128 bytes. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Subscription status.
               + **0**: indicates that the subscription is not confirmed.
               + **1**: indicates that the subscription is confirmed.
               + **3**: indicates that the subscription is canceled.
        :param pulumi.Input[_builtins.str] subscription_urn: Resource identifier of a subscription, which is unique.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if filter_policies is not None:
            pulumi.set(__self__, "filter_policies", filter_policies)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_urn is not None:
            pulumi.set(__self__, "subscription_urn", subscription_urn)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message endpoint. Changing this parameter will create a new resource.
        + **For an HTTP subscription**, the endpoint starts with `http://`.
        + **For an HTTPS subscription**, the endpoint starts with `https://`.
        + **For an email subscription**, the endpoint is an mail address.
        + **For an SMS message subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a functionstage subscription**, the endpoint is a function urn.
        + **For a functiongraph subscription**, the endpoint is a workflow ID.
        + **For a callnotify subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
        + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
        + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
        + **For a welink subscription**, the endpoint is a a WeLink group account.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input['SubscriptionExtensionArgs']]:
        """
        Specifies the extension configurations.
        The extension structure is documented below.
        Changing this parameter will create a new resource.

        <a name="extension"></a>
        The `extension` block supports:
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input['SubscriptionExtensionArgs']]):
        pulumi.set(self, "extension", value)

    @_builtins.property
    @pulumi.getter(name="filterPolicies")
    def filter_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyArgs']]]]:
        """
        The message filter policies of a subscriber.
        The filter_policies structure is documented below.
        """
        return pulumi.get(self, "filter_policies")

    @filter_policies.setter
    def filter_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyArgs']]]]):
        pulumi.set(self, "filter_policies", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project ID of the topic creator.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol of the message endpoint. Currently, **email**,
        **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
        **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the SMN subscription resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Remark information. The remarks must be a UTF-8-coded character string
        containing 128 bytes. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remark", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Subscription status.
        + **0**: indicates that the subscription is not confirmed.
        + **1**: indicates that the subscription is confirmed.
        + **3**: indicates that the subscription is canceled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionUrn")
    def subscription_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource identifier of a subscription, which is unique.
        """
        return pulumi.get(self, "subscription_urn")

    @subscription_urn.setter
    def subscription_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subscription_urn", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)


@pulumi.type_token("huaweicloud:Smn/subscription:Subscription")
class Subscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 extension: Optional[pulumi.Input[Union['SubscriptionExtensionArgs', 'SubscriptionExtensionArgsDict']]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMN subscription resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        topic1 = huaweicloud.smn.Topic("topic_1",
            name="topic_1",
            display_name="The display name of topic_1")
        subscription1 = huaweicloud.smn.Subscription("subscription_1",
            topic_urn=topic1.id,
            endpoint="mailtest@gmail.com",
            protocol="email",
            remark="O&M")
        subscription2 = huaweicloud.smn.Subscription("subscription_2",
            topic_urn=topic1.id,
            endpoint="13600000000",
            protocol="sms",
            remark="O&M")
        subscription3 = huaweicloud.smn.Subscription("subscription_3",
            topic_urn=topic1.id,
            endpoint="https://example.com/notification",
            protocol="https",
            remark="API webhook",
            extension={
                "header": {
                    "X-Custom-Test": "test",
                },
            })
        ```

        ## Import

        SMN subscription can be imported using the `id` (subscription urn), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/subscription:Subscription subscription_1 urn:smn:cn-north-4:0970dd7a1300f5672ff2c003c60ae115:topic_1:a2aa5a1f66df494184f4e108398de1a6
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint: Message endpoint. Changing this parameter will create a new resource.
               + **For an HTTP subscription**, the endpoint starts with `http://`.
               + **For an HTTPS subscription**, the endpoint starts with `https://`.
               + **For an email subscription**, the endpoint is an mail address.
               + **For an SMS message subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a functionstage subscription**, the endpoint is a function urn.
               + **For a functiongraph subscription**, the endpoint is a workflow ID.
               + **For a callnotify subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
               + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
               + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
               + **For a welink subscription**, the endpoint is a a WeLink group account.
        :param pulumi.Input[Union['SubscriptionExtensionArgs', 'SubscriptionExtensionArgsDict']] extension: Specifies the extension configurations.
               The extension structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="extension"></a>
               The `extension` block supports:
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the message endpoint. Currently, **email**,
               **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
               **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN subscription resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remark: Remark information. The remarks must be a UTF-8-coded character string
               containing 128 bytes. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMN subscription resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        topic1 = huaweicloud.smn.Topic("topic_1",
            name="topic_1",
            display_name="The display name of topic_1")
        subscription1 = huaweicloud.smn.Subscription("subscription_1",
            topic_urn=topic1.id,
            endpoint="mailtest@gmail.com",
            protocol="email",
            remark="O&M")
        subscription2 = huaweicloud.smn.Subscription("subscription_2",
            topic_urn=topic1.id,
            endpoint="13600000000",
            protocol="sms",
            remark="O&M")
        subscription3 = huaweicloud.smn.Subscription("subscription_3",
            topic_urn=topic1.id,
            endpoint="https://example.com/notification",
            protocol="https",
            remark="API webhook",
            extension={
                "header": {
                    "X-Custom-Test": "test",
                },
            })
        ```

        ## Import

        SMN subscription can be imported using the `id` (subscription urn), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/subscription:Subscription subscription_1 urn:smn:cn-north-4:0970dd7a1300f5672ff2c003c60ae115:topic_1:a2aa5a1f66df494184f4e108398de1a6
        ```

        :param str resource_name: The name of the resource.
        :param SubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 extension: Optional[pulumi.Input[Union['SubscriptionExtensionArgs', 'SubscriptionExtensionArgsDict']]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionArgs.__new__(SubscriptionArgs)

            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["extension"] = extension
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            __props__.__dict__["remark"] = remark
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
            __props__.__dict__["filter_policies"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["subscription_urn"] = None
        super(Subscription, __self__).__init__(
            'huaweicloud:Smn/subscription:Subscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            extension: Optional[pulumi.Input[Union['SubscriptionExtensionArgs', 'SubscriptionExtensionArgsDict']]] = None,
            filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyArgs', 'SubscriptionFilterPolicyArgsDict']]]]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remark: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            subscription_urn: Optional[pulumi.Input[_builtins.str]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'Subscription':
        """
        Get an existing Subscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint: Message endpoint. Changing this parameter will create a new resource.
               + **For an HTTP subscription**, the endpoint starts with `http://`.
               + **For an HTTPS subscription**, the endpoint starts with `https://`.
               + **For an email subscription**, the endpoint is an mail address.
               + **For an SMS message subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a functionstage subscription**, the endpoint is a function urn.
               + **For a functiongraph subscription**, the endpoint is a workflow ID.
               + **For a callnotify subscription**, the endpoint is a phone number,
               the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
               + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
               + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
               + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
               + **For a welink subscription**, the endpoint is a a WeLink group account.
        :param pulumi.Input[Union['SubscriptionExtensionArgs', 'SubscriptionExtensionArgsDict']] extension: Specifies the extension configurations.
               The extension structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="extension"></a>
               The `extension` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyArgs', 'SubscriptionFilterPolicyArgsDict']]]] filter_policies: The message filter policies of a subscriber.
               The filter_policies structure is documented below.
        :param pulumi.Input[_builtins.str] owner: Project ID of the topic creator.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the message endpoint. Currently, **email**,
               **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
               **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN subscription resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remark: Remark information. The remarks must be a UTF-8-coded character string
               containing 128 bytes. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Subscription status.
               + **0**: indicates that the subscription is not confirmed.
               + **1**: indicates that the subscription is confirmed.
               + **3**: indicates that the subscription is canceled.
        :param pulumi.Input[_builtins.str] subscription_urn: Resource identifier of a subscription, which is unique.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscriptionState.__new__(_SubscriptionState)

        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["extension"] = extension
        __props__.__dict__["filter_policies"] = filter_policies
        __props__.__dict__["owner"] = owner
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["remark"] = remark
        __props__.__dict__["status"] = status
        __props__.__dict__["subscription_urn"] = subscription_urn
        __props__.__dict__["topic_urn"] = topic_urn
        return Subscription(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        Message endpoint. Changing this parameter will create a new resource.
        + **For an HTTP subscription**, the endpoint starts with `http://`.
        + **For an HTTPS subscription**, the endpoint starts with `https://`.
        + **For an email subscription**, the endpoint is an mail address.
        + **For an SMS message subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a functionstage subscription**, the endpoint is a function urn.
        + **For a functiongraph subscription**, the endpoint is a workflow ID.
        + **For a callnotify subscription**, the endpoint is a phone number,
        the format is \\[+\\]\\[country code\\]\\[phone number\\], e.g. +86185xxxx0000.
        + **For a dingding subscription**, the endpoint is an IP address of a DingTalk group chatbot.
        + **For a wechat subscription**, the endpoint is an IP address of a WeChat group chatbot.
        + **For a feishu subscription**, the endpoint is a an IP address of a Lark group chatbot.
        + **For a welink subscription**, the endpoint is a a WeLink group account.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def extension(self) -> pulumi.Output['outputs.SubscriptionExtension']:
        """
        Specifies the extension configurations.
        The extension structure is documented below.
        Changing this parameter will create a new resource.

        <a name="extension"></a>
        The `extension` block supports:
        """
        return pulumi.get(self, "extension")

    @_builtins.property
    @pulumi.getter(name="filterPolicies")
    def filter_policies(self) -> pulumi.Output[Sequence['outputs.SubscriptionFilterPolicy']]:
        """
        The message filter policies of a subscriber.
        The filter_policies structure is documented below.
        """
        return pulumi.get(self, "filter_policies")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Project ID of the topic creator.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protocol of the message endpoint. Currently, **email**,
        **sms**, **http**, **https**, **functionstage**, **functiongraph**, **callnotify**, **wechat**, **dingding**,
        **feishu** and **welink** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the SMN subscription resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Remark information. The remarks must be a UTF-8-coded character string
        containing 128 bytes. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "remark")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        Subscription status.
        + **0**: indicates that the subscription is not confirmed.
        + **1**: indicates that the subscription is confirmed.
        + **3**: indicates that the subscription is canceled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subscriptionUrn")
    def subscription_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Resource identifier of a subscription, which is unique.
        """
        return pulumi.get(self, "subscription_urn")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

