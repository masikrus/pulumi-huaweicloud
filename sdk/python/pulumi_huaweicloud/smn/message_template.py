# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MessageTemplateArgs', 'MessageTemplate']

@pulumi.input_type
class MessageTemplateArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MessageTemplate resource.
        :param pulumi.Input[_builtins.str] content: Specifies the template content, which supports plain text only.
               The template content cannot be left blank or larger than 256 KB.
               The fields within "{}" can be replaced based on the actual situation
               when you use the template.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol supported by the template. Value options:
               + **default**: the default protocol
               + **email**: the email protocol
               + **sms**: the SMS protocol
               + **functionstage**: the FunctionGraph transport protocol
               + **dms**: the DMS transport protocol
               + **http**: the http protocol
               + **https**: the https protocol
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the message template name.
               A template name starts with a letter or digit, consists of 1 to 64 characters,
               and can contain only letters, digits,  hyphens (-), and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "protocol", protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the template content, which supports plain text only.
        The template content cannot be left blank or larger than 256 KB.
        The fields within "{}" can be replaced based on the actual situation
        when you use the template.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol supported by the template. Value options:
        + **default**: the default protocol
        + **email**: the email protocol
        + **sms**: the SMS protocol
        + **functionstage**: the FunctionGraph transport protocol
        + **dms**: the DMS transport protocol
        + **http**: the http protocol
        + **https**: the https protocol

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message template name.
        A template name starts with a letter or digit, consists of 1 to 64 characters,
        and can contain only letters, digits,  hyphens (-), and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MessageTemplateState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering MessageTemplate resources.
        :param pulumi.Input[_builtins.str] content: Specifies the template content, which supports plain text only.
               The template content cannot be left blank or larger than 256 KB.
               The fields within "{}" can be replaced based on the actual situation
               when you use the template.
        :param pulumi.Input[_builtins.str] name: Specifies the message template name.
               A template name starts with a letter or digit, consists of 1 to 64 characters,
               and can contain only letters, digits,  hyphens (-), and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol supported by the template. Value options:
               + **default**: the default protocol
               + **email**: the email protocol
               + **sms**: the SMS protocol
               + **functionstage**: the FunctionGraph transport protocol
               + **dms**: the DMS transport protocol
               + **http**: the http protocol
               + **https**: the https protocol
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tag_names: Indicates the variable list. The variable name will be quoted in braces ({}) in the template.
               When you use a template to send messages, you can replace the variable with any content.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_names is not None:
            pulumi.set(__self__, "tag_names", tag_names)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template content, which supports plain text only.
        The template content cannot be left blank or larger than 256 KB.
        The fields within "{}" can be replaced based on the actual situation
        when you use the template.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message template name.
        A template name starts with a letter or digit, consists of 1 to 64 characters,
        and can contain only letters, digits,  hyphens (-), and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol supported by the template. Value options:
        + **default**: the default protocol
        + **email**: the email protocol
        + **sms**: the SMS protocol
        + **functionstage**: the FunctionGraph transport protocol
        + **dms**: the DMS transport protocol
        + **http**: the http protocol
        + **https**: the https protocol

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the variable list. The variable name will be quoted in braces ({}) in the template.
        When you use a template to send messages, you can replace the variable with any content.
        """
        return pulumi.get(self, "tag_names")

    @tag_names.setter
    def tag_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tag_names", value)


@pulumi.type_token("huaweicloud:Smn/messageTemplate:MessageTemplate")
class MessageTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SMN message template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        protocol = config.require_object("protocol")
        test = huaweicloud.smn.MessageTemplate("test",
            name=name,
            protocol=protocol,
            content="this content contains {content1}, {content2}, {content3}")
        ```

        ## Import

        The SMN message template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/messageTemplate:MessageTemplate test <message_template_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the template content, which supports plain text only.
               The template content cannot be left blank or larger than 256 KB.
               The fields within "{}" can be replaced based on the actual situation
               when you use the template.
        :param pulumi.Input[_builtins.str] name: Specifies the message template name.
               A template name starts with a letter or digit, consists of 1 to 64 characters,
               and can contain only letters, digits,  hyphens (-), and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol supported by the template. Value options:
               + **default**: the default protocol
               + **email**: the email protocol
               + **sms**: the SMS protocol
               + **functionstage**: the FunctionGraph transport protocol
               + **dms**: the DMS transport protocol
               + **http**: the http protocol
               + **https**: the https protocol
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MessageTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SMN message template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        protocol = config.require_object("protocol")
        test = huaweicloud.smn.MessageTemplate("test",
            name=name,
            protocol=protocol,
            content="this content contains {content1}, {content2}, {content3}")
        ```

        ## Import

        The SMN message template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/messageTemplate:MessageTemplate test <message_template_id>
        ```

        :param str resource_name: The name of the resource.
        :param MessageTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MessageTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MessageTemplateArgs.__new__(MessageTemplateArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            __props__.__dict__["tag_names"] = None
        super(MessageTemplate, __self__).__init__(
            'huaweicloud:Smn/messageTemplate:MessageTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tag_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'MessageTemplate':
        """
        Get an existing MessageTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the template content, which supports plain text only.
               The template content cannot be left blank or larger than 256 KB.
               The fields within "{}" can be replaced based on the actual situation
               when you use the template.
        :param pulumi.Input[_builtins.str] name: Specifies the message template name.
               A template name starts with a letter or digit, consists of 1 to 64 characters,
               and can contain only letters, digits,  hyphens (-), and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol supported by the template. Value options:
               + **default**: the default protocol
               + **email**: the email protocol
               + **sms**: the SMS protocol
               + **functionstage**: the FunctionGraph transport protocol
               + **dms**: the DMS transport protocol
               + **http**: the http protocol
               + **https**: the https protocol
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tag_names: Indicates the variable list. The variable name will be quoted in braces ({}) in the template.
               When you use a template to send messages, you can replace the variable with any content.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MessageTemplateState.__new__(_MessageTemplateState)

        __props__.__dict__["content"] = content
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["tag_names"] = tag_names
        return MessageTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the template content, which supports plain text only.
        The template content cannot be left blank or larger than 256 KB.
        The fields within "{}" can be replaced based on the actual situation
        when you use the template.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message template name.
        A template name starts with a letter or digit, consists of 1 to 64 characters,
        and can contain only letters, digits,  hyphens (-), and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protocol supported by the template. Value options:
        + **default**: the default protocol
        + **email**: the email protocol
        + **sms**: the SMS protocol
        + **functionstage**: the FunctionGraph transport protocol
        + **dms**: the DMS transport protocol
        + **http**: the http protocol
        + **https**: the https protocol

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the variable list. The variable name will be quoted in braces ({}) in the template.
        When you use a template to send messages, you can replace the variable with any content.
        """
        return pulumi.get(self, "tag_names")

