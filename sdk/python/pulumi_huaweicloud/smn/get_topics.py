# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTopicsResult',
    'AwaitableGetTopicsResult',
    'get_topics',
    'get_topics_output',
]

@pulumi.output_type
class GetTopicsResult:
    """
    A collection of values returned by getTopics.
    """
    def __init__(__self__, display_name=None, enterprise_project_id=None, id=None, name=None, region=None, topic_urn=None, topics=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if topic_urn and not isinstance(topic_urn, str):
            raise TypeError("Expected argument 'topic_urn' to be a str")
        pulumi.set(__self__, "topic_urn", topic_urn)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The topic display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of the SMN topic.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the topic.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[_builtins.str]:
        """
        The topic URN.
        """
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Sequence['outputs.GetTopicsTopicResult']:
        """
        An array of SMN topics found. Structure is documented below.
        """
        return pulumi.get(self, "topics")


class AwaitableGetTopicsResult(GetTopicsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicsResult(
            display_name=self.display_name,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            topic_urn=self.topic_urn,
            topics=self.topics)


def get_topics(display_name: Optional[_builtins.str] = None,
               enterprise_project_id: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               topic_urn: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicsResult:
    """
    Use this data source to get a list of SMN topics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    topic_name = config.require_object("topicName")
    tpoic1 = huaweicloud.Smn.get_topics(name=topic_name)
    ```


    :param _builtins.str display_name: Specifies the topic display name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the SMN topic.
    :param _builtins.str name: Specifies the name of the topic.
    :param _builtins.str region: Specifies the region in which to obtain the SMN topics. If omitted, the
           provider-level region will be used.
    :param _builtins.str topic_urn: Specifies the topic URN.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['topicUrn'] = topic_urn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Smn/getTopics:getTopics', __args__, opts=opts, typ=GetTopicsResult).value

    return AwaitableGetTopicsResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        topic_urn=pulumi.get(__ret__, 'topic_urn'),
        topics=pulumi.get(__ret__, 'topics'))
def get_topics_output(display_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      topic_urn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTopicsResult]:
    """
    Use this data source to get a list of SMN topics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    topic_name = config.require_object("topicName")
    tpoic1 = huaweicloud.Smn.get_topics(name=topic_name)
    ```


    :param _builtins.str display_name: Specifies the topic display name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the SMN topic.
    :param _builtins.str name: Specifies the name of the topic.
    :param _builtins.str region: Specifies the region in which to obtain the SMN topics. If omitted, the
           provider-level region will be used.
    :param _builtins.str topic_urn: Specifies the topic URN.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['topicUrn'] = topic_urn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Smn/getTopics:getTopics', __args__, opts=opts, typ=GetTopicsResult)
    return __ret__.apply(lambda __response__: GetTopicsResult(
        display_name=pulumi.get(__response__, 'display_name'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        topic_urn=pulumi.get(__response__, 'topic_urn'),
        topics=pulumi.get(__response__, 'topics')))
