# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TopicAttributesArgs', 'TopicAttributes']

@pulumi.input_type
class TopicAttributesArgs:
    def __init__(__self__, *,
                 topic_urn: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TopicAttributes resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the topic attribute value, in JSON format.
        :param pulumi.Input[_builtins.str] name: Specifies the topic attribute name.  
               The valid values are as follows:
               + **access_policy**
        :param pulumi.Input[_builtins.str] region: Specifies the region where the topic is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the topic URN. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the topic attribute value, in JSON format.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic attribute name.  
        The valid values are as follows:
        + **access_policy**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the topic is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TopicAttributesState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TopicAttributes resources.
        :param pulumi.Input[_builtins.str] name: Specifies the topic attribute name.  
               The valid values are as follows:
               + **access_policy**
        :param pulumi.Input[_builtins.str] region: Specifies the region where the topic is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the topic attribute value, in JSON format.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic attribute name.  
        The valid values are as follows:
        + **access_policy**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the topic is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic URN. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic attribute value, in JSON format.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:Smn/topicAttributes:TopicAttributes")
class TopicAttributes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages the SMN topic attributes within HuaweiCloud.

        > Deleting this resource will not reset the topic attributes, but will only remove the resource information from the
           tfstate file.

        ## Example Usage

        ### Attributes with access policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        smn_topic_urn = config.require_object("smnTopicUrn")
        access_policy = huaweicloud.smn.TopicAttributes("access_policy",
            topic_urn=smn_topic_urn,
            name="access_policy",
            value=json.dumps({
                "Version": "2016-09-07",
                "Id": "__default_policy_ID",
                "Statement": [{
                    "Sid": "__org_path_pub_0",
                    "Effect": "Allow",
                    "Principal": {
                        "OrgPath": ["o-xxx/r-xxx/ou-xxx"],
                    },
                    "Action": [
                        "SMN:Publish",
                        "SMN:QueryTopicDetail",
                    ],
                    "Resource": smn_topic_urn,
                }],
            }))
        ```

        ## Import

        The SMN topic attributes can be imported using the `topic_urn` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/topicAttributes:TopicAttributes test {topic_urn}/{name}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the topic attribute name.  
               The valid values are as follows:
               + **access_policy**
        :param pulumi.Input[_builtins.str] region: Specifies the region where the topic is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the topic attribute value, in JSON format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicAttributesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the SMN topic attributes within HuaweiCloud.

        > Deleting this resource will not reset the topic attributes, but will only remove the resource information from the
           tfstate file.

        ## Example Usage

        ### Attributes with access policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        smn_topic_urn = config.require_object("smnTopicUrn")
        access_policy = huaweicloud.smn.TopicAttributes("access_policy",
            topic_urn=smn_topic_urn,
            name="access_policy",
            value=json.dumps({
                "Version": "2016-09-07",
                "Id": "__default_policy_ID",
                "Statement": [{
                    "Sid": "__org_path_pub_0",
                    "Effect": "Allow",
                    "Principal": {
                        "OrgPath": ["o-xxx/r-xxx/ou-xxx"],
                    },
                    "Action": [
                        "SMN:Publish",
                        "SMN:QueryTopicDetail",
                    ],
                    "Resource": smn_topic_urn,
                }],
            }))
        ```

        ## Import

        The SMN topic attributes can be imported using the `topic_urn` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/topicAttributes:TopicAttributes test {topic_urn}/{name}
        ```

        :param str resource_name: The name of the resource.
        :param TopicAttributesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicAttributesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicAttributesArgs.__new__(TopicAttributesArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(TopicAttributes, __self__).__init__(
            'huaweicloud:Smn/topicAttributes:TopicAttributes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'TopicAttributes':
        """
        Get an existing TopicAttributes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the topic attribute name.  
               The valid values are as follows:
               + **access_policy**
        :param pulumi.Input[_builtins.str] region: Specifies the region where the topic is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the topic attribute value, in JSON format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicAttributesState.__new__(_TopicAttributesState)

        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["topic_urn"] = topic_urn
        __props__.__dict__["value"] = value
        return TopicAttributes(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic attribute name.  
        The valid values are as follows:
        + **access_policy**
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the topic is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic URN. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic attribute value, in JSON format.
        """
        return pulumi.get(self, "value")

