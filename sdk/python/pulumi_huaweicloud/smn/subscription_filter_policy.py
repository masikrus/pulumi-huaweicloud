# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubscriptionFilterPolicyInitArgs', 'SubscriptionFilterPolicy']

@pulumi.input_type
class SubscriptionFilterPolicyInitArgs:
    def __init__(__self__, *,
                 filter_policies: pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]],
                 subscription_urn: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SubscriptionFilterPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]] filter_policies: Specifies the message filter policies of a subscriber.
               The filter_policies structure is documented below.
               
               <a name="smn_subscription_filter_policies"></a>
               The `filter_policies` block supports:
        :param pulumi.Input[_builtins.str] subscription_urn: Specifies the resource identifier of the subscriber.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "filter_policies", filter_policies)
        pulumi.set(__self__, "subscription_urn", subscription_urn)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="filterPolicies")
    def filter_policies(self) -> pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]]:
        """
        Specifies the message filter policies of a subscriber.
        The filter_policies structure is documented below.

        <a name="smn_subscription_filter_policies"></a>
        The `filter_policies` block supports:
        """
        return pulumi.get(self, "filter_policies")

    @filter_policies.setter
    def filter_policies(self, value: pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]]):
        pulumi.set(self, "filter_policies", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionUrn")
    def subscription_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource identifier of the subscriber.
        """
        return pulumi.get(self, "subscription_urn")

    @subscription_urn.setter
    def subscription_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subscription_urn", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SubscriptionFilterPolicyState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SubscriptionFilterPolicy resources.
        :param pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]] filter_policies: Specifies the message filter policies of a subscriber.
               The filter_policies structure is documented below.
               
               <a name="smn_subscription_filter_policies"></a>
               The `filter_policies` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subscription_urn: Specifies the resource identifier of the subscriber.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if filter_policies is not None:
            pulumi.set(__self__, "filter_policies", filter_policies)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subscription_urn is not None:
            pulumi.set(__self__, "subscription_urn", subscription_urn)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="filterPolicies")
    def filter_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]]]:
        """
        Specifies the message filter policies of a subscriber.
        The filter_policies structure is documented below.

        <a name="smn_subscription_filter_policies"></a>
        The `filter_policies` block supports:
        """
        return pulumi.get(self, "filter_policies")

    @filter_policies.setter
    def filter_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubscriptionFilterPolicyFilterPolicyArgs']]]]):
        pulumi.set(self, "filter_policies", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionUrn")
    def subscription_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource identifier of the subscriber.
        """
        return pulumi.get(self, "subscription_urn")

    @subscription_urn.setter
    def subscription_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subscription_urn", value)


@pulumi.type_token("huaweicloud:Smn/subscriptionFilterPolicy:SubscriptionFilterPolicy")
class SubscriptionFilterPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyFilterPolicyArgs', 'SubscriptionFilterPolicyFilterPolicyArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMN subscription filter policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subscription_urn = config.require_object("subscriptionUrn")
        test = huaweicloud.smn.SubscriptionFilterPolicy("test",
            subscription_urn=subscription_urn,
            filter_policies=[{
                "name": "alarm",
                "string_equals": [
                    "os",
                    "process",
                ],
            }])
        ```

        ## Import

        The SMN subscription filter policy can be imported using `subscription_urn`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/subscriptionFilterPolicy:SubscriptionFilterPolicy test <subscription_urn>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyFilterPolicyArgs', 'SubscriptionFilterPolicyFilterPolicyArgsDict']]]] filter_policies: Specifies the message filter policies of a subscriber.
               The filter_policies structure is documented below.
               
               <a name="smn_subscription_filter_policies"></a>
               The `filter_policies` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subscription_urn: Specifies the resource identifier of the subscriber.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscriptionFilterPolicyInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMN subscription filter policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subscription_urn = config.require_object("subscriptionUrn")
        test = huaweicloud.smn.SubscriptionFilterPolicy("test",
            subscription_urn=subscription_urn,
            filter_policies=[{
                "name": "alarm",
                "string_equals": [
                    "os",
                    "process",
                ],
            }])
        ```

        ## Import

        The SMN subscription filter policy can be imported using `subscription_urn`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/subscriptionFilterPolicy:SubscriptionFilterPolicy test <subscription_urn>
        ```

        :param str resource_name: The name of the resource.
        :param SubscriptionFilterPolicyInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionFilterPolicyInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyFilterPolicyArgs', 'SubscriptionFilterPolicyFilterPolicyArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionFilterPolicyInitArgs.__new__(SubscriptionFilterPolicyInitArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if filter_policies is None and not opts.urn:
                raise TypeError("Missing required property 'filter_policies'")
            __props__.__dict__["filter_policies"] = filter_policies
            __props__.__dict__["region"] = region
            if subscription_urn is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_urn'")
            __props__.__dict__["subscription_urn"] = subscription_urn
        super(SubscriptionFilterPolicy, __self__).__init__(
            'huaweicloud:Smn/subscriptionFilterPolicy:SubscriptionFilterPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            filter_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyFilterPolicyArgs', 'SubscriptionFilterPolicyFilterPolicyArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subscription_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'SubscriptionFilterPolicy':
        """
        Get an existing SubscriptionFilterPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubscriptionFilterPolicyFilterPolicyArgs', 'SubscriptionFilterPolicyFilterPolicyArgsDict']]]] filter_policies: Specifies the message filter policies of a subscriber.
               The filter_policies structure is documented below.
               
               <a name="smn_subscription_filter_policies"></a>
               The `filter_policies` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subscription_urn: Specifies the resource identifier of the subscriber.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscriptionFilterPolicyState.__new__(_SubscriptionFilterPolicyState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["filter_policies"] = filter_policies
        __props__.__dict__["region"] = region
        __props__.__dict__["subscription_urn"] = subscription_urn
        return SubscriptionFilterPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="filterPolicies")
    def filter_policies(self) -> pulumi.Output[Sequence['outputs.SubscriptionFilterPolicyFilterPolicy']]:
        """
        Specifies the message filter policies of a subscriber.
        The filter_policies structure is documented below.

        <a name="smn_subscription_filter_policies"></a>
        The `filter_policies` block supports:
        """
        return pulumi.get(self, "filter_policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subscriptionUrn")
    def subscription_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource identifier of the subscriber.
        """
        return pulumi.get(self, "subscription_urn")

