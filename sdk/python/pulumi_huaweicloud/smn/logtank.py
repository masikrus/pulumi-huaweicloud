# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LogtankArgs', 'Logtank']

@pulumi.input_type
class LogtankArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 topic_urn: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Logtank resource.
        :param pulumi.Input[_builtins.str] log_group_id: The lts log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: The lts log stream ID.
        :param pulumi.Input[_builtins.str] topic_urn: Resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN logtank resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "topic_urn", topic_urn)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The lts log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        The lts log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the SMN logtank resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogtankState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logtank_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Logtank resources.
        :param pulumi.Input[_builtins.str] created_at: Time when the logtank was created.
        :param pulumi.Input[_builtins.str] log_group_id: The lts log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: The lts log stream ID.
        :param pulumi.Input[_builtins.str] logtank_id: The ID of the logtank.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN logtank resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Time when the logtank was updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if logtank_id is not None:
            pulumi.set(__self__, "logtank_id", logtank_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time when the logtank was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lts log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lts log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logtankId")
    def logtank_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logtank.
        """
        return pulumi.get(self, "logtank_id")

    @logtank_id.setter
    def logtank_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logtank_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the SMN logtank resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time when the logtank was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Smn/logtank:Logtank")
class Logtank(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMN logtank resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        topic_test = huaweicloud.smn.Topic("topic_test", name="topic_test")
        lts_group_test = huaweicloud.lts.Group("lts_group_test",
            group_name="lts_group_test",
            ttl_in_days=1)
        lts_stream_test = huaweicloud.lts.Stream("lts_stream_test",
            group_id=lts_group_test.id,
            stream_name="lts_stream_test")
        logtank_test = huaweicloud.smn.Logtank("logtank_test",
            topic_urn=topic_test.topic_urn,
            log_group_id=lts_group_test.id,
            log_stream_id=lts_stream_test.id)
        ```

        ## Import

        SMN logtank can be imported using the `topic_urn` or using the `topic_urn` and `logtank_id` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/logtank:Logtank logtank_test urn:smn:cn-south-1:09f960944c80f4802f85c003e0ed1d98:logtank_test
        ```

        or

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/logtank:Logtank logtank_test urn:smn:cn-south-1:09f960944c80f4802f85c003e0ed1d98:logtank_test/d9dbc3baee5c43d18a79b3fe29292003
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_group_id: The lts log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: The lts log stream ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN logtank resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogtankArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMN logtank resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        topic_test = huaweicloud.smn.Topic("topic_test", name="topic_test")
        lts_group_test = huaweicloud.lts.Group("lts_group_test",
            group_name="lts_group_test",
            ttl_in_days=1)
        lts_stream_test = huaweicloud.lts.Stream("lts_stream_test",
            group_id=lts_group_test.id,
            stream_name="lts_stream_test")
        logtank_test = huaweicloud.smn.Logtank("logtank_test",
            topic_urn=topic_test.topic_urn,
            log_group_id=lts_group_test.id,
            log_stream_id=lts_stream_test.id)
        ```

        ## Import

        SMN logtank can be imported using the `topic_urn` or using the `topic_urn` and `logtank_id` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/logtank:Logtank logtank_test urn:smn:cn-south-1:09f960944c80f4802f85c003e0ed1d98:logtank_test
        ```

        or

        bash

        ```sh
        $ pulumi import huaweicloud:Smn/logtank:Logtank logtank_test urn:smn:cn-south-1:09f960944c80f4802f85c003e0ed1d98:logtank_test/d9dbc3baee5c43d18a79b3fe29292003
        ```

        :param str resource_name: The name of the resource.
        :param LogtankArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogtankArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogtankArgs.__new__(LogtankArgs)

            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["region"] = region
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
            __props__.__dict__["created_at"] = None
            __props__.__dict__["logtank_id"] = None
            __props__.__dict__["updated_at"] = None
        super(Logtank, __self__).__init__(
            'huaweicloud:Smn/logtank:Logtank',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            logtank_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Logtank':
        """
        Get an existing Logtank resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Time when the logtank was created.
        :param pulumi.Input[_builtins.str] log_group_id: The lts log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: The lts log stream ID.
        :param pulumi.Input[_builtins.str] logtank_id: The ID of the logtank.
        :param pulumi.Input[_builtins.str] region: The region in which to create the SMN logtank resource. If omitted, the
               provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_urn: Resource identifier of a topic, which is unique.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Time when the logtank was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogtankState.__new__(_LogtankState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["logtank_id"] = logtank_id
        __props__.__dict__["region"] = region
        __props__.__dict__["topic_urn"] = topic_urn
        __props__.__dict__["updated_at"] = updated_at
        return Logtank(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Time when the logtank was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The lts log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        The lts log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="logtankId")
    def logtank_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logtank.
        """
        return pulumi.get(self, "logtank_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the SMN logtank resource. If omitted, the
        provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Resource identifier of a topic, which is unique.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Time when the logtank was updated.
        """
        return pulumi.get(self, "updated_at")

