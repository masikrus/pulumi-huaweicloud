# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MessagePublishArgs', 'MessagePublish']

@pulumi.input_type
class MessagePublishArgs:
    def __init__(__self__, *,
                 topic_urn: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]] = None,
                 message_structure: Optional[pulumi.Input[_builtins.str]] = None,
                 message_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_to_live: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MessagePublish resource.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic.
        :param pulumi.Input[_builtins.str] message: Specifies the message content.
        :param pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]] message_attributes: Specifies the message filter policies of a subscriber.
               The message_attributes structure is documented below.
        :param pulumi.Input[_builtins.str] message_structure: Specifies the message structure.
        :param pulumi.Input[_builtins.str] message_template_name: Specifies the message template name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subject: Specifies the message title.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies a dictionary consisting of tag and parameters to replace the tag.
               The value corresponding to the label in the message template. Message publishing using message template mode must
               carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
               exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
               template, which does not exceed 1KB.
               
               <a name="smn_message_attributes"></a>
               The `message_attributes` block supports:
        :param pulumi.Input[_builtins.str] time_to_live: Specifies the maximum retention time of the message within the SMN system.
               After this retention time, the system will no longer send the message. The unit is second, and the default value
               of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_attributes is not None:
            pulumi.set(__self__, "message_attributes", message_attributes)
        if message_structure is not None:
            pulumi.set(__self__, "message_structure", message_structure)
        if message_template_name is not None:
            pulumi.set(__self__, "message_template_name", message_template_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_to_live is not None:
            pulumi.set(__self__, "time_to_live", time_to_live)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource identifier of a topic.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message content.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="messageAttributes")
    def message_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]]:
        """
        Specifies the message filter policies of a subscriber.
        The message_attributes structure is documented below.
        """
        return pulumi.get(self, "message_attributes")

    @message_attributes.setter
    def message_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]]):
        pulumi.set(self, "message_attributes", value)

    @_builtins.property
    @pulumi.getter(name="messageStructure")
    def message_structure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message structure.
        """
        return pulumi.get(self, "message_structure")

    @message_structure.setter
    def message_structure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_structure", value)

    @_builtins.property
    @pulumi.getter(name="messageTemplateName")
    def message_template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message template name.
        """
        return pulumi.get(self, "message_template_name")

    @message_template_name.setter
    def message_template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_template_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message title.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies a dictionary consisting of tag and parameters to replace the tag.
        The value corresponding to the label in the message template. Message publishing using message template mode must
        carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
        exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
        template, which does not exceed 1KB.

        <a name="smn_message_attributes"></a>
        The `message_attributes` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum retention time of the message within the SMN system.
        After this retention time, the system will no longer send the message. The unit is second, and the default value
        of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        """
        return pulumi.get(self, "time_to_live")

    @time_to_live.setter
    def time_to_live(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_to_live", value)


@pulumi.input_type
class _MessagePublishState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]] = None,
                 message_structure: Optional[pulumi.Input[_builtins.str]] = None,
                 message_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_to_live: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MessagePublish resources.
        :param pulumi.Input[_builtins.str] message: Specifies the message content.
        :param pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]] message_attributes: Specifies the message filter policies of a subscriber.
               The message_attributes structure is documented below.
        :param pulumi.Input[_builtins.str] message_structure: Specifies the message structure.
        :param pulumi.Input[_builtins.str] message_template_name: Specifies the message template name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subject: Specifies the message title.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies a dictionary consisting of tag and parameters to replace the tag.
               The value corresponding to the label in the message template. Message publishing using message template mode must
               carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
               exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
               template, which does not exceed 1KB.
               
               <a name="smn_message_attributes"></a>
               The `message_attributes` block supports:
        :param pulumi.Input[_builtins.str] time_to_live: Specifies the maximum retention time of the message within the SMN system.
               After this retention time, the system will no longer send the message. The unit is second, and the default value
               of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_attributes is not None:
            pulumi.set(__self__, "message_attributes", message_attributes)
        if message_structure is not None:
            pulumi.set(__self__, "message_structure", message_structure)
        if message_template_name is not None:
            pulumi.set(__self__, "message_template_name", message_template_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_to_live is not None:
            pulumi.set(__self__, "time_to_live", time_to_live)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message content.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="messageAttributes")
    def message_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]]:
        """
        Specifies the message filter policies of a subscriber.
        The message_attributes structure is documented below.
        """
        return pulumi.get(self, "message_attributes")

    @message_attributes.setter
    def message_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MessagePublishMessageAttributeArgs']]]]):
        pulumi.set(self, "message_attributes", value)

    @_builtins.property
    @pulumi.getter(name="messageStructure")
    def message_structure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message structure.
        """
        return pulumi.get(self, "message_structure")

    @message_structure.setter
    def message_structure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_structure", value)

    @_builtins.property
    @pulumi.getter(name="messageTemplateName")
    def message_template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message template name.
        """
        return pulumi.get(self, "message_template_name")

    @message_template_name.setter
    def message_template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_template_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message title.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies a dictionary consisting of tag and parameters to replace the tag.
        The value corresponding to the label in the message template. Message publishing using message template mode must
        carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
        exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
        template, which does not exceed 1KB.

        <a name="smn_message_attributes"></a>
        The `message_attributes` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum retention time of the message within the SMN system.
        After this retention time, the system will no longer send the message. The unit is second, and the default value
        of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        """
        return pulumi.get(self, "time_to_live")

    @time_to_live.setter
    def time_to_live(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_to_live", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource identifier of a topic.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)


@pulumi.type_token("huaweicloud:Smn/messagePublish:MessagePublish")
class MessagePublish(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessagePublishMessageAttributeArgs', 'MessagePublishMessageAttributeArgsDict']]]]] = None,
                 message_structure: Optional[pulumi.Input[_builtins.str]] = None,
                 message_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_to_live: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SMN message publishment resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message="test")
        ```

        ### Message Structure Example

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message_structure=json.dumps({
                "default": "send default msg",
                "sms": "send msg by sms protocol",
                "email": "send msg by email protocol",
                "http": "send msg by http protocol",
                "functiongraph": "send msg by functiongraph protocol",
                "https": "send msg by https protocol",
            }))
        ```

        ### Message Template Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message_template_name="test",
            tags={
                "key": "value",
            })
        ```

        ### Add Message Attributes type Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message="test",
            message_attributes=[
                {
                    "name": "test",
                    "type": "STRING",
                    "value": "aaa",
                },
                {
                    "name": "aaa",
                    "type": "STRING_ARRAY",
                    "values": [
                        "aaa",
                        "aaaa",
                    ],
                },
                {
                    "name": "smn_protocol",
                    "type": "PROTOCOL",
                    "values": [
                        "https",
                        "http",
                        "email",
                        "sms",
                    ],
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] message: Specifies the message content.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MessagePublishMessageAttributeArgs', 'MessagePublishMessageAttributeArgsDict']]]] message_attributes: Specifies the message filter policies of a subscriber.
               The message_attributes structure is documented below.
        :param pulumi.Input[_builtins.str] message_structure: Specifies the message structure.
        :param pulumi.Input[_builtins.str] message_template_name: Specifies the message template name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subject: Specifies the message title.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies a dictionary consisting of tag and parameters to replace the tag.
               The value corresponding to the label in the message template. Message publishing using message template mode must
               carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
               exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
               template, which does not exceed 1KB.
               
               <a name="smn_message_attributes"></a>
               The `message_attributes` block supports:
        :param pulumi.Input[_builtins.str] time_to_live: Specifies the maximum retention time of the message within the SMN system.
               After this retention time, the system will no longer send the message. The unit is second, and the default value
               of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MessagePublishArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SMN message publishment resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message="test")
        ```

        ### Message Structure Example

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message_structure=json.dumps({
                "default": "send default msg",
                "sms": "send msg by sms protocol",
                "email": "send msg by email protocol",
                "http": "send msg by http protocol",
                "functiongraph": "send msg by functiongraph protocol",
                "https": "send msg by https protocol",
            }))
        ```

        ### Message Template Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message_template_name="test",
            tags={
                "key": "value",
            })
        ```

        ### Add Message Attributes type Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        subject = config.require_object("subject")
        test = huaweicloud.smn.MessagePublish("test",
            topic_urn=topic_urn,
            subject=subject,
            message="test",
            message_attributes=[
                {
                    "name": "test",
                    "type": "STRING",
                    "value": "aaa",
                },
                {
                    "name": "aaa",
                    "type": "STRING_ARRAY",
                    "values": [
                        "aaa",
                        "aaaa",
                    ],
                },
                {
                    "name": "smn_protocol",
                    "type": "PROTOCOL",
                    "values": [
                        "https",
                        "http",
                        "email",
                        "sms",
                    ],
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param MessagePublishArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MessagePublishArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessagePublishMessageAttributeArgs', 'MessagePublishMessageAttributeArgsDict']]]]] = None,
                 message_structure: Optional[pulumi.Input[_builtins.str]] = None,
                 message_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_to_live: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MessagePublishArgs.__new__(MessagePublishArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["message"] = message
            __props__.__dict__["message_attributes"] = message_attributes
            __props__.__dict__["message_structure"] = message_structure
            __props__.__dict__["message_template_name"] = message_template_name
            __props__.__dict__["region"] = region
            __props__.__dict__["subject"] = subject
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_to_live"] = time_to_live
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
        super(MessagePublish, __self__).__init__(
            'huaweicloud:Smn/messagePublish:MessagePublish',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            message_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessagePublishMessageAttributeArgs', 'MessagePublishMessageAttributeArgsDict']]]]] = None,
            message_structure: Optional[pulumi.Input[_builtins.str]] = None,
            message_template_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subject: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            time_to_live: Optional[pulumi.Input[_builtins.str]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'MessagePublish':
        """
        Get an existing MessagePublish resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] message: Specifies the message content.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MessagePublishMessageAttributeArgs', 'MessagePublishMessageAttributeArgsDict']]]] message_attributes: Specifies the message filter policies of a subscriber.
               The message_attributes structure is documented below.
        :param pulumi.Input[_builtins.str] message_structure: Specifies the message structure.
        :param pulumi.Input[_builtins.str] message_template_name: Specifies the message template name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subject: Specifies the message title.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies a dictionary consisting of tag and parameters to replace the tag.
               The value corresponding to the label in the message template. Message publishing using message template mode must
               carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
               exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
               template, which does not exceed 1KB.
               
               <a name="smn_message_attributes"></a>
               The `message_attributes` block supports:
        :param pulumi.Input[_builtins.str] time_to_live: Specifies the maximum retention time of the message within the SMN system.
               After this retention time, the system will no longer send the message. The unit is second, and the default value
               of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the resource identifier of a topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MessagePublishState.__new__(_MessagePublishState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["message"] = message
        __props__.__dict__["message_attributes"] = message_attributes
        __props__.__dict__["message_structure"] = message_structure
        __props__.__dict__["message_template_name"] = message_template_name
        __props__.__dict__["region"] = region
        __props__.__dict__["subject"] = subject
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_to_live"] = time_to_live
        __props__.__dict__["topic_urn"] = topic_urn
        return MessagePublish(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the message content.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="messageAttributes")
    def message_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.MessagePublishMessageAttribute']]]:
        """
        Specifies the message filter policies of a subscriber.
        The message_attributes structure is documented below.
        """
        return pulumi.get(self, "message_attributes")

    @_builtins.property
    @pulumi.getter(name="messageStructure")
    def message_structure(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the message structure.
        """
        return pulumi.get(self, "message_structure")

    @_builtins.property
    @pulumi.getter(name="messageTemplateName")
    def message_template_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the message template name.
        """
        return pulumi.get(self, "message_template_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the message title.
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies a dictionary consisting of tag and parameters to replace the tag.
        The value corresponding to the label in the message template. Message publishing using message template mode must
        carry this parameter. The key in the dictionary is the parameter name in the message template, which should not
        exceed **21** characters. The value in the dictionary is the value after replacing the parameters in the message
        template, which does not exceed 1KB.

        <a name="smn_message_attributes"></a>
        The `message_attributes` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the maximum retention time of the message within the SMN system.
        After this retention time, the system will no longer send the message. The unit is second, and the default value
        of the variable is **3600** second. The value is a positive integer and less than or equal to **3600*24**.
        """
        return pulumi.get(self, "time_to_live")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource identifier of a topic.
        """
        return pulumi.get(self, "topic_urn")

