# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTopicSubscriptionsResult',
    'AwaitableGetTopicSubscriptionsResult',
    'get_topic_subscriptions',
    'get_topic_subscriptions_output',
]

@pulumi.output_type
class GetTopicSubscriptionsResult:
    """
    A collection of values returned by getTopicSubscriptions.
    """
    def __init__(__self__, id=None, region=None, subscriptions=None, topic_urn=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subscriptions and not isinstance(subscriptions, list):
            raise TypeError("Expected argument 'subscriptions' to be a list")
        pulumi.set(__self__, "subscriptions", subscriptions)
        if topic_urn and not isinstance(topic_urn, str):
            raise TypeError("Expected argument 'topic_urn' to be a str")
        pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def subscriptions(self) -> Sequence['outputs.GetTopicSubscriptionsSubscriptionResult']:
        """
        The subscription list.
        """
        return pulumi.get(self, "subscriptions")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        """
        The topic URN.
        """
        return pulumi.get(self, "topic_urn")


class AwaitableGetTopicSubscriptionsResult(GetTopicSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicSubscriptionsResult(
            id=self.id,
            region=self.region,
            subscriptions=self.subscriptions,
            topic_urn=self.topic_urn)


def get_topic_subscriptions(region: Optional[_builtins.str] = None,
                            topic_urn: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicSubscriptionsResult:
    """
    Use this data source to get a list of SMN topic subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    topic_urn = config.require_object("topicUrn")
    test = huaweicloud.Smn.get_topic_subscriptions(topic_urn=topic_urn)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic_urn: Specifies the topic URN.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['topicUrn'] = topic_urn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Smn/getTopicSubscriptions:getTopicSubscriptions', __args__, opts=opts, typ=GetTopicSubscriptionsResult).value

    return AwaitableGetTopicSubscriptionsResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        subscriptions=pulumi.get(__ret__, 'subscriptions'),
        topic_urn=pulumi.get(__ret__, 'topic_urn'))
def get_topic_subscriptions_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTopicSubscriptionsResult]:
    """
    Use this data source to get a list of SMN topic subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    topic_urn = config.require_object("topicUrn")
    test = huaweicloud.Smn.get_topic_subscriptions(topic_urn=topic_urn)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic_urn: Specifies the topic URN.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['topicUrn'] = topic_urn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Smn/getTopicSubscriptions:getTopicSubscriptions', __args__, opts=opts, typ=GetTopicSubscriptionsResult)
    return __ret__.apply(lambda __response__: GetTopicSubscriptionsResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        subscriptions=pulumi.get(__response__, 'subscriptions'),
        topic_urn=pulumi.get(__response__, 'topic_urn')))
