# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAcceleratorsResult',
    'AwaitableGetAcceleratorsResult',
    'get_accelerators',
    'get_accelerators_output',
]

@pulumi.output_type
class GetAcceleratorsResult:
    """
    A collection of values returned by getAccelerators.
    """
    def __init__(__self__, accelerator_id=None, accelerators=None, enterprise_project_id=None, id=None, name=None, status=None):
        if accelerator_id and not isinstance(accelerator_id, str):
            raise TypeError("Expected argument 'accelerator_id' to be a str")
        pulumi.set(__self__, "accelerator_id", accelerator_id)
        if accelerators and not isinstance(accelerators, list):
            raise TypeError("Expected argument 'accelerators' to be a list")
        pulumi.set(__self__, "accelerators", accelerators)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accelerator_id")

    @_builtins.property
    @pulumi.getter
    def accelerators(self) -> Sequence['outputs.GetAcceleratorsAcceleratorResult']:
        """
        The list of the accelerators.
        The accelerators structure is documented below.
        """
        return pulumi.get(self, "accelerators")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the accelerator belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the accelerator.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of a cloud service or resource.
        """
        return pulumi.get(self, "status")


class AwaitableGetAcceleratorsResult(GetAcceleratorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAcceleratorsResult(
            accelerator_id=self.accelerator_id,
            accelerators=self.accelerators,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            status=self.status)


def get_accelerators(accelerator_id: Optional[_builtins.str] = None,
                     enterprise_project_id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAcceleratorsResult:
    """
    Use this data source to get the list of accelerators.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    accelerator_name = config.require_object("acceleratorName")
    test = huaweicloud.ga.get_accelerators(name=accelerator_name)
    ```


    :param _builtins.str accelerator_id: Specifies the ID of the accelerator.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the accelerator
           belongs.
    :param _builtins.str name: Specifies the name of the accelerator.
    :param _builtins.str status: Specifies the current status of the accelerator.
           The valid values are as follows:
           + **ACTIVE**: The status of the accelerator is normal operation.
           + **ERROR**: The status of the accelerator is error.
    """
    __args__ = dict()
    __args__['acceleratorId'] = accelerator_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ga/getAccelerators:getAccelerators', __args__, opts=opts, typ=GetAcceleratorsResult).value

    return AwaitableGetAcceleratorsResult(
        accelerator_id=pulumi.get(__ret__, 'accelerator_id'),
        accelerators=pulumi.get(__ret__, 'accelerators'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'))
def get_accelerators_output(accelerator_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAcceleratorsResult]:
    """
    Use this data source to get the list of accelerators.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    accelerator_name = config.require_object("acceleratorName")
    test = huaweicloud.ga.get_accelerators(name=accelerator_name)
    ```


    :param _builtins.str accelerator_id: Specifies the ID of the accelerator.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the accelerator
           belongs.
    :param _builtins.str name: Specifies the name of the accelerator.
    :param _builtins.str status: Specifies the current status of the accelerator.
           The valid values are as follows:
           + **ACTIVE**: The status of the accelerator is normal operation.
           + **ERROR**: The status of the accelerator is error.
    """
    __args__ = dict()
    __args__['acceleratorId'] = accelerator_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ga/getAccelerators:getAccelerators', __args__, opts=opts, typ=GetAcceleratorsResult)
    return __ret__.apply(lambda __response__: GetAcceleratorsResult(
        accelerator_id=pulumi.get(__response__, 'accelerator_id'),
        accelerators=pulumi.get(__response__, 'accelerators'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status')))
