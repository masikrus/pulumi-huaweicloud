# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HealthCheckArgs', 'HealthCheck']

@pulumi.input_type
class HealthCheckArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 endpoint_group_id: pulumi.Input[_builtins.str],
                 interval: pulumi.Input[_builtins.int],
                 max_retries: pulumi.Input[_builtins.int],
                 port: pulumi.Input[_builtins.int],
                 timeout: pulumi.Input[_builtins.int],
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HealthCheck resource.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable health check.
        :param pulumi.Input[_builtins.str] endpoint_group_id: Specifies the endpoint group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] interval: Specifies the health check interval, in seconds.  
               The valid value is range from `1` to `60`.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum number of retries.  
               The valid value is range from `1` to `10`.
               Specifies the number of consecutive health checks when the health check result of an endpoint changes
               from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        :param pulumi.Input[_builtins.int] port: Specifies the port used for the health check.  
               The valid value is range from `1` to `65,535`.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout duration of the health check, in seconds.  
               The valid value is range from `1` to `60`.
               It is recommended that you set a value less than that of parameter **interval**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the health check protocol.
               Only **TCP** supported for now. Defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "endpoint_group_id", endpoint_group_id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "timeout", timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to enable health check.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the endpoint group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_group_id")

    @endpoint_group_id.setter
    def endpoint_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "endpoint_group_id", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the health check interval, in seconds.  
        The valid value is range from `1` to `60`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum number of retries.  
        The valid value is range from `1` to `10`.
        Specifies the number of consecutive health checks when the health check result of an endpoint changes
        from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the port used for the health check.  
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timeout duration of the health check, in seconds.  
        The valid value is range from `1` to `60`.
        It is recommended that you set a value less than that of parameter **interval**.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the health check protocol.
        Only **TCP** supported for now. Defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _HealthCheckState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckFrozenInfoArgs']]]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering HealthCheck resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the health check was configured.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable health check.
        :param pulumi.Input[_builtins.str] endpoint_group_id: Specifies the endpoint group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['HealthCheckFrozenInfoArgs']]] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param pulumi.Input[_builtins.int] interval: Specifies the health check interval, in seconds.  
               The valid value is range from `1` to `60`.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum number of retries.  
               The valid value is range from `1` to `10`.
               Specifies the number of consecutive health checks when the health check result of an endpoint changes
               from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        :param pulumi.Input[_builtins.int] port: Specifies the port used for the health check.  
               The valid value is range from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the health check protocol.
               Only **TCP** supported for now. Defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of a cloud service or resource.
               The valid values are as follows:
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout duration of the health check, in seconds.  
               The valid value is range from `1` to `60`.
               It is recommended that you set a value less than that of parameter **interval**.
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the health check was updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_group_id is not None:
            pulumi.set(__self__, "endpoint_group_id", endpoint_group_id)
        if frozen_infos is not None:
            pulumi.set(__self__, "frozen_infos", frozen_infos)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the health check was configured.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable health check.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the endpoint group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_group_id")

    @endpoint_group_id.setter
    def endpoint_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_group_id", value)

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckFrozenInfoArgs']]]]:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @frozen_infos.setter
    def frozen_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckFrozenInfoArgs']]]]):
        pulumi.set(self, "frozen_infos", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the health check interval, in seconds.  
        The valid value is range from `1` to `60`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of retries.  
        The valid value is range from `1` to `10`.
        Specifies the number of consecutive health checks when the health check result of an endpoint changes
        from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port used for the health check.  
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the health check protocol.
        Only **TCP** supported for now. Defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout duration of the health check, in seconds.  
        The valid value is range from `1` to `60`.
        It is recommended that you set a value less than that of parameter **interval**.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the health check was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ga/healthCheck:HealthCheck")
class HealthCheck(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a GA health check resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        endpoint_group_id = config.require_object("endpointGroupId")
        test = huaweicloud.ga.HealthCheck("test",
            endpoint_group_id=endpoint_group_id,
            enabled=True,
            interval=10,
            max_retries=5,
            port=8001,
            timeout=10)
        ```

        ## Import

        The healthcheck can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/healthCheck:HealthCheck test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable health check.
        :param pulumi.Input[_builtins.str] endpoint_group_id: Specifies the endpoint group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] interval: Specifies the health check interval, in seconds.  
               The valid value is range from `1` to `60`.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum number of retries.  
               The valid value is range from `1` to `10`.
               Specifies the number of consecutive health checks when the health check result of an endpoint changes
               from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        :param pulumi.Input[_builtins.int] port: Specifies the port used for the health check.  
               The valid value is range from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the health check protocol.
               Only **TCP** supported for now. Defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout duration of the health check, in seconds.  
               The valid value is range from `1` to `60`.
               It is recommended that you set a value less than that of parameter **interval**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HealthCheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GA health check resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        endpoint_group_id = config.require_object("endpointGroupId")
        test = huaweicloud.ga.HealthCheck("test",
            endpoint_group_id=endpoint_group_id,
            enabled=True,
            interval=10,
            max_retries=5,
            port=8001,
            timeout=10)
        ```

        ## Import

        The healthcheck can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/healthCheck:HealthCheck test <id>
        ```

        :param str resource_name: The name of the resource.
        :param HealthCheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HealthCheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HealthCheckArgs.__new__(HealthCheckArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if endpoint_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_group_id'")
            __props__.__dict__["endpoint_group_id"] = endpoint_group_id
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__.__dict__["interval"] = interval
            if max_retries is None and not opts.urn:
                raise TypeError("Missing required property 'max_retries'")
            __props__.__dict__["max_retries"] = max_retries
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["created_at"] = None
            __props__.__dict__["frozen_infos"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(HealthCheck, __self__).__init__(
            'huaweicloud:ga/healthCheck:HealthCheck',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            endpoint_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HealthCheckFrozenInfoArgs', 'HealthCheckFrozenInfoArgsDict']]]]] = None,
            interval: Optional[pulumi.Input[_builtins.int]] = None,
            max_retries: Optional[pulumi.Input[_builtins.int]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'HealthCheck':
        """
        Get an existing HealthCheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the health check was configured.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable health check.
        :param pulumi.Input[_builtins.str] endpoint_group_id: Specifies the endpoint group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HealthCheckFrozenInfoArgs', 'HealthCheckFrozenInfoArgsDict']]]] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param pulumi.Input[_builtins.int] interval: Specifies the health check interval, in seconds.  
               The valid value is range from `1` to `60`.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum number of retries.  
               The valid value is range from `1` to `10`.
               Specifies the number of consecutive health checks when the health check result of an endpoint changes
               from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        :param pulumi.Input[_builtins.int] port: Specifies the port used for the health check.  
               The valid value is range from `1` to `65,535`.
        :param pulumi.Input[_builtins.str] protocol: Specifies the health check protocol.
               Only **TCP** supported for now. Defaults to **TCP**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of a cloud service or resource.
               The valid values are as follows:
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout duration of the health check, in seconds.  
               The valid value is range from `1` to `60`.
               It is recommended that you set a value less than that of parameter **interval**.
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the health check was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HealthCheckState.__new__(_HealthCheckState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["endpoint_group_id"] = endpoint_group_id
        __props__.__dict__["frozen_infos"] = frozen_infos
        __props__.__dict__["interval"] = interval
        __props__.__dict__["max_retries"] = max_retries
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["updated_at"] = updated_at
        return HealthCheck(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the health check was configured.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable health check.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the endpoint group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_group_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> pulumi.Output[Sequence['outputs.HealthCheckFrozenInfo']]:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the health check interval, in seconds.  
        The valid value is range from `1` to `60`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum number of retries.  
        The valid value is range from `1` to `10`.
        Specifies the number of consecutive health checks when the health check result of an endpoint changes
        from **HEALTHY** to **UNHEALTHY**, or from **UNHEALTHY** to **HEALTHY**.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the port used for the health check.  
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the health check protocol.
        Only **TCP** supported for now. Defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the timeout duration of the health check, in seconds.  
        The valid value is range from `1` to `60`.
        It is recommended that you set a value less than that of parameter **interval**.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the health check was updated.
        """
        return pulumi.get(self, "updated_at")

