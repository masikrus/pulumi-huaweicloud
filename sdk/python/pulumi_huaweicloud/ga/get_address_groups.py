# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAddressGroupsResult',
    'AwaitableGetAddressGroupsResult',
    'get_address_groups',
    'get_address_groups_output',
]

@pulumi.output_type
class GetAddressGroupsResult:
    """
    A collection of values returned by getAddressGroups.
    """
    def __init__(__self__, address_group_id=None, address_groups=None, id=None, listener_id=None, name=None, status=None):
        if address_group_id and not isinstance(address_group_id, str):
            raise TypeError("Expected argument 'address_group_id' to be a str")
        pulumi.set(__self__, "address_group_id", address_group_id)
        if address_groups and not isinstance(address_groups, list):
            raise TypeError("Expected argument 'address_groups' to be a list")
        pulumi.set(__self__, "address_groups", address_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="addressGroupId")
    def address_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "address_group_id")

    @_builtins.property
    @pulumi.getter(name="addressGroups")
    def address_groups(self) -> Sequence['outputs.GetAddressGroupsAddressGroupResult']:
        """
        The list of the IP address groups.
        The address_groups structure is documented below.
        """
        return pulumi.get(self, "address_groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the IP address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the IP address group.
        """
        return pulumi.get(self, "status")


class AwaitableGetAddressGroupsResult(GetAddressGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressGroupsResult(
            address_group_id=self.address_group_id,
            address_groups=self.address_groups,
            id=self.id,
            listener_id=self.listener_id,
            name=self.name,
            status=self.status)


def get_address_groups(address_group_id: Optional[_builtins.str] = None,
                       listener_id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       status: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressGroupsResult:
    """
    Use this data source to get the list of IP address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    associated_listener_id = config.require_object("associatedListenerId")
    test = huaweicloud.ga.get_address_groups(listener_id=associated_listener_id)
    ```


    :param _builtins.str address_group_id: Specifies the ID of the IP address group.
    :param _builtins.str listener_id: Specifies the ID of the listener associated with the IP address group.
    :param _builtins.str name: Specifies the name of the IP address group.
    :param _builtins.str status: Specifies the status of the IP address group.
           The valid values are as follows:
           + **ACTIVE**: The status of the IP address group is normal operation.
           + **ERROR**: The status of the IP address group is error.
    """
    __args__ = dict()
    __args__['addressGroupId'] = address_group_id
    __args__['listenerId'] = listener_id
    __args__['name'] = name
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ga/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult).value

    return AwaitableGetAddressGroupsResult(
        address_group_id=pulumi.get(__ret__, 'address_group_id'),
        address_groups=pulumi.get(__ret__, 'address_groups'),
        id=pulumi.get(__ret__, 'id'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'))
def get_address_groups_output(address_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              listener_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAddressGroupsResult]:
    """
    Use this data source to get the list of IP address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    associated_listener_id = config.require_object("associatedListenerId")
    test = huaweicloud.ga.get_address_groups(listener_id=associated_listener_id)
    ```


    :param _builtins.str address_group_id: Specifies the ID of the IP address group.
    :param _builtins.str listener_id: Specifies the ID of the listener associated with the IP address group.
    :param _builtins.str name: Specifies the name of the IP address group.
    :param _builtins.str status: Specifies the status of the IP address group.
           The valid values are as follows:
           + **ACTIVE**: The status of the IP address group is normal operation.
           + **ERROR**: The status of the IP address group is error.
    """
    __args__ = dict()
    __args__['addressGroupId'] = address_group_id
    __args__['listenerId'] = listener_id
    __args__['name'] = name
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ga/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult)
    return __ret__.apply(lambda __response__: GetAddressGroupsResult(
        address_group_id=pulumi.get(__response__, 'address_group_id'),
        address_groups=pulumi.get(__response__, 'address_groups'),
        id=pulumi.get(__response__, 'id'),
        listener_id=pulumi.get(__response__, 'listener_id'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status')))
