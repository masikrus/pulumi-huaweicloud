# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ListenerArgs', 'Listener']

@pulumi.input_type
class ListenerArgs:
    def __init__(__self__, *,
                 accelerator_id: pulumi.Input[_builtins.str],
                 port_ranges: pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]],
                 protocol: pulumi.Input[_builtins.str],
                 client_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Listener resource.
        :param pulumi.Input[_builtins.str] accelerator_id: Specifies the ID of the global accelerator associated with the listener.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]] port_ranges: Specifies the port range used by the listener.
               The PortRange structure is documented below.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol used by the listener to forward requests.
               The value can be **TCP** or **UDP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] client_affinity: Specifies the client affinity. The value can be one of the following:
               + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
               + **NONE**: Requests are evenly forwarded across the endpoints.
               
               Defaults to **NONE**.
        :param pulumi.Input[_builtins.str] description: Specifies the information about the listener.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] name: Specifies the listener name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the listener.
               
               <a name="Listener_PortRange"></a>
               The `PortRange` block supports:
        """
        pulumi.set(__self__, "accelerator_id", accelerator_id)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)
        if client_affinity is not None:
            pulumi.set(__self__, "client_affinity", client_affinity)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the global accelerator associated with the listener.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "accelerator_id")

    @accelerator_id.setter
    def accelerator_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "accelerator_id", value)

    @_builtins.property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]]:
        """
        Specifies the port range used by the listener.
        The PortRange structure is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]]):
        pulumi.set(self, "port_ranges", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol used by the listener to forward requests.
        The value can be **TCP** or **UDP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="clientAffinity")
    def client_affinity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client affinity. The value can be one of the following:
        + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
        + **NONE**: Requests are evenly forwarded across the endpoints.

        Defaults to **NONE**.
        """
        return pulumi.get(self, "client_affinity")

    @client_affinity.setter
    def client_affinity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_affinity", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the information about the listener.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the listener name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the listener.

        <a name="Listener_PortRange"></a>
        The `PortRange` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ListenerState:
    def __init__(__self__, *,
                 accelerator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerFrozenInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Listener resources.
        :param pulumi.Input[_builtins.str] accelerator_id: Specifies the ID of the global accelerator associated with the listener.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] client_affinity: Specifies the client affinity. The value can be one of the following:
               + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
               + **NONE**: Requests are evenly forwarded across the endpoints.
               
               Defaults to **NONE**.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the listener was created.
        :param pulumi.Input[_builtins.str] description: Specifies the information about the listener.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[Sequence[pulumi.Input['ListenerFrozenInfoArgs']]] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the listener name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]] port_ranges: Specifies the port range used by the listener.
               The PortRange structure is documented below.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol used by the listener to forward requests.
               The value can be **TCP** or **UDP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of a cloud service or resource.
               The valid values are as follows:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the listener.
               
               <a name="Listener_PortRange"></a>
               The `PortRange` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the listener was updated.
        """
        if accelerator_id is not None:
            pulumi.set(__self__, "accelerator_id", accelerator_id)
        if client_affinity is not None:
            pulumi.set(__self__, "client_affinity", client_affinity)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if frozen_infos is not None:
            pulumi.set(__self__, "frozen_infos", frozen_infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the global accelerator associated with the listener.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "accelerator_id")

    @accelerator_id.setter
    def accelerator_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accelerator_id", value)

    @_builtins.property
    @pulumi.getter(name="clientAffinity")
    def client_affinity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client affinity. The value can be one of the following:
        + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
        + **NONE**: Requests are evenly forwarded across the endpoints.

        Defaults to **NONE**.
        """
        return pulumi.get(self, "client_affinity")

    @client_affinity.setter
    def client_affinity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_affinity", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the listener was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the information about the listener.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListenerFrozenInfoArgs']]]]:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @frozen_infos.setter
    def frozen_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerFrozenInfoArgs']]]]):
        pulumi.set(self, "frozen_infos", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the listener name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]]]:
        """
        Specifies the port range used by the listener.
        The PortRange structure is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol used by the listener to forward requests.
        The value can be **TCP** or **UDP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the listener.

        <a name="Listener_PortRange"></a>
        The `PortRange` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the listener was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ga/listener:Listener")
class Listener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ListenerPortRangeArgs', 'ListenerPortRangeArgsDict']]]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a GA listener resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        accelerator_id = config.require_object("acceleratorId")
        test = huaweicloud.ga.Listener("test",
            accelerator_id=accelerator_id,
            name=name,
            description=description,
            protocol="TCP",
            port_ranges=[{
                "from_port": 4000,
                "to_port": 4200,
            }])
        ```

        ## Import

        The listener can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/listener:Listener test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accelerator_id: Specifies the ID of the global accelerator associated with the listener.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] client_affinity: Specifies the client affinity. The value can be one of the following:
               + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
               + **NONE**: Requests are evenly forwarded across the endpoints.
               
               Defaults to **NONE**.
        :param pulumi.Input[_builtins.str] description: Specifies the information about the listener.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] name: Specifies the listener name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ListenerPortRangeArgs', 'ListenerPortRangeArgsDict']]]] port_ranges: Specifies the port range used by the listener.
               The PortRange structure is documented below.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol used by the listener to forward requests.
               The value can be **TCP** or **UDP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the listener.
               
               <a name="Listener_PortRange"></a>
               The `PortRange` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GA listener resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        accelerator_id = config.require_object("acceleratorId")
        test = huaweicloud.ga.Listener("test",
            accelerator_id=accelerator_id,
            name=name,
            description=description,
            protocol="TCP",
            port_ranges=[{
                "from_port": 4000,
                "to_port": 4200,
            }])
        ```

        ## Import

        The listener can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/listener:Listener test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ListenerPortRangeArgs', 'ListenerPortRangeArgsDict']]]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListenerArgs.__new__(ListenerArgs)

            if accelerator_id is None and not opts.urn:
                raise TypeError("Missing required property 'accelerator_id'")
            __props__.__dict__["accelerator_id"] = accelerator_id
            __props__.__dict__["client_affinity"] = client_affinity
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if port_ranges is None and not opts.urn:
                raise TypeError("Missing required property 'port_ranges'")
            __props__.__dict__["port_ranges"] = port_ranges
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["frozen_infos"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Listener, __self__).__init__(
            'huaweicloud:ga/listener:Listener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accelerator_id: Optional[pulumi.Input[_builtins.str]] = None,
            client_affinity: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ListenerFrozenInfoArgs', 'ListenerFrozenInfoArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ListenerPortRangeArgs', 'ListenerPortRangeArgsDict']]]]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Listener':
        """
        Get an existing Listener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accelerator_id: Specifies the ID of the global accelerator associated with the listener.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] client_affinity: Specifies the client affinity. The value can be one of the following:
               + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
               + **NONE**: Requests are evenly forwarded across the endpoints.
               
               Defaults to **NONE**.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the listener was created.
        :param pulumi.Input[_builtins.str] description: Specifies the information about the listener.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ListenerFrozenInfoArgs', 'ListenerFrozenInfoArgsDict']]]] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the listener name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ListenerPortRangeArgs', 'ListenerPortRangeArgsDict']]]] port_ranges: Specifies the port range used by the listener.
               The PortRange structure is documented below.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol used by the listener to forward requests.
               The value can be **TCP** or **UDP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of a cloud service or resource.
               The valid values are as follows:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the listener.
               
               <a name="Listener_PortRange"></a>
               The `PortRange` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the listener was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListenerState.__new__(_ListenerState)

        __props__.__dict__["accelerator_id"] = accelerator_id
        __props__.__dict__["client_affinity"] = client_affinity
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["frozen_infos"] = frozen_infos
        __props__.__dict__["name"] = name
        __props__.__dict__["port_ranges"] = port_ranges
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return Listener(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the global accelerator associated with the listener.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "accelerator_id")

    @_builtins.property
    @pulumi.getter(name="clientAffinity")
    def client_affinity(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the client affinity. The value can be one of the following:
        + **Source IP address**: Requests from the same IP address are forwarded to the same endpoint.
        + **NONE**: Requests are evenly forwarded across the endpoints.

        Defaults to **NONE**.
        """
        return pulumi.get(self, "client_affinity")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the listener was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the information about the listener.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> pulumi.Output[Sequence['outputs.ListenerFrozenInfo']]:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the listener name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> pulumi.Output[Sequence['outputs.ListenerPortRange']]:
        """
        Specifies the port range used by the listener.
        The PortRange structure is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protocol used by the listener to forward requests.
        The value can be **TCP** or **UDP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the listener.

        <a name="Listener_PortRange"></a>
        The `PortRange` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the listener was updated.
        """
        return pulumi.get(self, "updated_at")

