# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListenersResult',
    'AwaitableGetListenersResult',
    'get_listeners',
    'get_listeners_output',
]

@pulumi.output_type
class GetListenersResult:
    """
    A collection of values returned by getListeners.
    """
    def __init__(__self__, accelerator_id=None, id=None, listener_id=None, listeners=None, name=None, protocol=None, status=None):
        if accelerator_id and not isinstance(accelerator_id, str):
            raise TypeError("Expected argument 'accelerator_id' to be a str")
        pulumi.set(__self__, "accelerator_id", accelerator_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> Optional[_builtins.str]:
        """
        The ID of the accelerator to which the listener belongs.
        """
        return pulumi.get(self, "accelerator_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetListenersListenerResult']:
        """
        The list of the listeners.
        The listeners structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the listener.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The network transmission protocol type of the listener.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of a cloud service or resource.
        """
        return pulumi.get(self, "status")


class AwaitableGetListenersResult(GetListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListenersResult(
            accelerator_id=self.accelerator_id,
            id=self.id,
            listener_id=self.listener_id,
            listeners=self.listeners,
            name=self.name,
            protocol=self.protocol,
            status=self.status)


def get_listeners(accelerator_id: Optional[_builtins.str] = None,
                  listener_id: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  protocol: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListenersResult:
    """
    Use this data source to get the list of listeners.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    listener_name = config.require_object("listenerName")
    test = huaweicloud.ga.get_listeners(name=listener_name)
    ```


    :param _builtins.str accelerator_id: Specifies the ID of the accelerator to which the listener belongs.
    :param _builtins.str listener_id: Specifies the ID of the listener.
    :param _builtins.str name: Specifies the name of the listener.
    :param _builtins.str protocol: Specifies the network transmission protocol type of the listener.
           The valid values are as follows:
           + **TCP**
           + **UDP**
    :param _builtins.str status: Specifies the current status of the listener.
           The valid values are as follows:
           + **ACTIVE**: The status of the listener is normal operation.
           + **ERROR**: The status of the listener is error.
    """
    __args__ = dict()
    __args__['acceleratorId'] = accelerator_id
    __args__['listenerId'] = listener_id
    __args__['name'] = name
    __args__['protocol'] = protocol
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ga/getListeners:getListeners', __args__, opts=opts, typ=GetListenersResult).value

    return AwaitableGetListenersResult(
        accelerator_id=pulumi.get(__ret__, 'accelerator_id'),
        id=pulumi.get(__ret__, 'id'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        listeners=pulumi.get(__ret__, 'listeners'),
        name=pulumi.get(__ret__, 'name'),
        protocol=pulumi.get(__ret__, 'protocol'),
        status=pulumi.get(__ret__, 'status'))
def get_listeners_output(accelerator_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         listener_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         protocol: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListenersResult]:
    """
    Use this data source to get the list of listeners.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    listener_name = config.require_object("listenerName")
    test = huaweicloud.ga.get_listeners(name=listener_name)
    ```


    :param _builtins.str accelerator_id: Specifies the ID of the accelerator to which the listener belongs.
    :param _builtins.str listener_id: Specifies the ID of the listener.
    :param _builtins.str name: Specifies the name of the listener.
    :param _builtins.str protocol: Specifies the network transmission protocol type of the listener.
           The valid values are as follows:
           + **TCP**
           + **UDP**
    :param _builtins.str status: Specifies the current status of the listener.
           The valid values are as follows:
           + **ACTIVE**: The status of the listener is normal operation.
           + **ERROR**: The status of the listener is error.
    """
    __args__ = dict()
    __args__['acceleratorId'] = accelerator_id
    __args__['listenerId'] = listener_id
    __args__['name'] = name
    __args__['protocol'] = protocol
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ga/getListeners:getListeners', __args__, opts=opts, typ=GetListenersResult)
    return __ret__.apply(lambda __response__: GetListenersResult(
        accelerator_id=pulumi.get(__response__, 'accelerator_id'),
        id=pulumi.get(__response__, 'id'),
        listener_id=pulumi.get(__response__, 'listener_id'),
        listeners=pulumi.get(__response__, 'listeners'),
        name=pulumi.get(__response__, 'name'),
        protocol=pulumi.get(__response__, 'protocol'),
        status=pulumi.get(__response__, 'status')))
