# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEndpointsResult',
    'AwaitableGetEndpointsResult',
    'get_endpoints',
    'get_endpoints_output',
]

@pulumi.output_type
class GetEndpointsResult:
    """
    A collection of values returned by getEndpoints.
    """
    def __init__(__self__, endpoint_group_id=None, endpoint_id=None, endpoints=None, health_state=None, id=None, ip_address=None, resource_id=None, resource_type=None, status=None):
        if endpoint_group_id and not isinstance(endpoint_group_id, str):
            raise TypeError("Expected argument 'endpoint_group_id' to be a str")
        pulumi.set(__self__, "endpoint_group_id", endpoint_group_id)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        pulumi.set(__self__, "endpoints", endpoints)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> _builtins.str:
        """
        The ID of the endpoint group to which the endpoint belongs.
        """
        return pulumi.get(self, "endpoint_group_id")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetEndpointsEndpointResult']:
        """
        The list of the endpoints.
        The endpoints structure is documented below.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[_builtins.str]:
        """
        The health status of the endpoint.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the backend resource corresponding to the endpoint.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the backend resource corresponding to the endpoint.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of the backend resource corresponding to the endpoint.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of a cloud service or resource.
        """
        return pulumi.get(self, "status")


class AwaitableGetEndpointsResult(GetEndpointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEndpointsResult(
            endpoint_group_id=self.endpoint_group_id,
            endpoint_id=self.endpoint_id,
            endpoints=self.endpoints,
            health_state=self.health_state,
            id=self.id,
            ip_address=self.ip_address,
            resource_id=self.resource_id,
            resource_type=self.resource_type,
            status=self.status)


def get_endpoints(endpoint_group_id: Optional[_builtins.str] = None,
                  endpoint_id: Optional[_builtins.str] = None,
                  health_state: Optional[_builtins.str] = None,
                  ip_address: Optional[_builtins.str] = None,
                  resource_id: Optional[_builtins.str] = None,
                  resource_type: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEndpointsResult:
    """
    Use this data source to get the list of endpoints.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    endpoint_group_id = config.require_object("endpointGroupId")
    endpoint_id = config.require_object("endpointId")
    test = huaweicloud.ga.get_endpoints(endpoint_group_id=endpoint_group_id,
        endpoint_id=endpoint_id)
    ```


    :param _builtins.str endpoint_group_id: Specifies the ID of the endpoint group to which the endpoint belongs.
    :param _builtins.str endpoint_id: Specifies the ID of the endpoint.
    :param _builtins.str health_state: Specifies the health status of the endpoint.
           The valid values are as follows:
           + **INITIAL**: The endpoint status is initializing.
           + **HEALTHY**: The endpoint status is normal.
           + **UNHEALTHY**: The endpoint status is abnormal.
           + **NO_MONITOR**: The endpoint status is not monitored.
    :param _builtins.str ip_address: Specifies the IP address of the backend resource corresponding to the endpoint.
    :param _builtins.str resource_id: Specifies the ID of the backend resource corresponding to the endpoint.
    :param _builtins.str resource_type: Specifies the type of the backend resource corresponding to the endpoint.
           Currently only supported **EIP**.
    :param _builtins.str status: Specifies the status of the endpoint.
           The valid values are as follows:
           + **ACTIVE**: The status of the endpoint is normal operation.
           + **ERROR**: The status of the endpoint is error.
    """
    __args__ = dict()
    __args__['endpointGroupId'] = endpoint_group_id
    __args__['endpointId'] = endpoint_id
    __args__['healthState'] = health_state
    __args__['ipAddress'] = ip_address
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ga/getEndpoints:getEndpoints', __args__, opts=opts, typ=GetEndpointsResult).value

    return AwaitableGetEndpointsResult(
        endpoint_group_id=pulumi.get(__ret__, 'endpoint_group_id'),
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        endpoints=pulumi.get(__ret__, 'endpoints'),
        health_state=pulumi.get(__ret__, 'health_state'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'))
def get_endpoints_output(endpoint_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                         endpoint_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         health_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEndpointsResult]:
    """
    Use this data source to get the list of endpoints.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    endpoint_group_id = config.require_object("endpointGroupId")
    endpoint_id = config.require_object("endpointId")
    test = huaweicloud.ga.get_endpoints(endpoint_group_id=endpoint_group_id,
        endpoint_id=endpoint_id)
    ```


    :param _builtins.str endpoint_group_id: Specifies the ID of the endpoint group to which the endpoint belongs.
    :param _builtins.str endpoint_id: Specifies the ID of the endpoint.
    :param _builtins.str health_state: Specifies the health status of the endpoint.
           The valid values are as follows:
           + **INITIAL**: The endpoint status is initializing.
           + **HEALTHY**: The endpoint status is normal.
           + **UNHEALTHY**: The endpoint status is abnormal.
           + **NO_MONITOR**: The endpoint status is not monitored.
    :param _builtins.str ip_address: Specifies the IP address of the backend resource corresponding to the endpoint.
    :param _builtins.str resource_id: Specifies the ID of the backend resource corresponding to the endpoint.
    :param _builtins.str resource_type: Specifies the type of the backend resource corresponding to the endpoint.
           Currently only supported **EIP**.
    :param _builtins.str status: Specifies the status of the endpoint.
           The valid values are as follows:
           + **ACTIVE**: The status of the endpoint is normal operation.
           + **ERROR**: The status of the endpoint is error.
    """
    __args__ = dict()
    __args__['endpointGroupId'] = endpoint_group_id
    __args__['endpointId'] = endpoint_id
    __args__['healthState'] = health_state
    __args__['ipAddress'] = ip_address
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ga/getEndpoints:getEndpoints', __args__, opts=opts, typ=GetEndpointsResult)
    return __ret__.apply(lambda __response__: GetEndpointsResult(
        endpoint_group_id=pulumi.get(__response__, 'endpoint_group_id'),
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        endpoints=pulumi.get(__response__, 'endpoints'),
        health_state=pulumi.get(__response__, 'health_state'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status')))
