# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessLogsResult',
    'AwaitableGetAccessLogsResult',
    'get_access_logs',
    'get_access_logs_output',
]

@pulumi.output_type
class GetAccessLogsResult:
    """
    A collection of values returned by getAccessLogs.
    """
    def __init__(__self__, id=None, log_id=None, logs=None, resource_ids=None, resource_type=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_id and not isinstance(log_id, str):
            raise TypeError("Expected argument 'log_id' to be a str")
        pulumi.set(__self__, "log_id", log_id)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if resource_ids and not isinstance(resource_ids, list):
            raise TypeError("Expected argument 'resource_ids' to be a list")
        pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_id")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetAccessLogsLogResult']:
        """
        The list of the access logs.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of the resource to which the access log belongs.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the access log.
        """
        return pulumi.get(self, "status")


class AwaitableGetAccessLogsResult(GetAccessLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessLogsResult(
            id=self.id,
            log_id=self.log_id,
            logs=self.logs,
            resource_ids=self.resource_ids,
            resource_type=self.resource_type,
            status=self.status)


def get_access_logs(log_id: Optional[_builtins.str] = None,
                    resource_ids: Optional[Sequence[_builtins.str]] = None,
                    resource_type: Optional[_builtins.str] = None,
                    status: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessLogsResult:
    """
    Use this data source to get the list of the access logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ga.get_access_logs()
    ```


    :param _builtins.str log_id: Specifies the ID of the access log.
    :param Sequence[_builtins.str] resource_ids: Specifies the ID list of the resource to which the access log belongs.
    :param _builtins.str resource_type: Specifies the type of the resource to which the access log belongs.
           Currently, only **LISTENER** is supported.
    :param _builtins.str status: Specifies the status of the access log.
           The valid values are as follows:
           + **ACTIVE**: The resource is running.
           + **PENDING**: The status is to be determined.
           + **ERROR**: Failed to create the resource.
           + **DELETING**: The resource is being deleted.
    """
    __args__ = dict()
    __args__['logId'] = log_id
    __args__['resourceIds'] = resource_ids
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ga/getAccessLogs:getAccessLogs', __args__, opts=opts, typ=GetAccessLogsResult).value

    return AwaitableGetAccessLogsResult(
        id=pulumi.get(__ret__, 'id'),
        log_id=pulumi.get(__ret__, 'log_id'),
        logs=pulumi.get(__ret__, 'logs'),
        resource_ids=pulumi.get(__ret__, 'resource_ids'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'))
def get_access_logs_output(log_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           resource_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccessLogsResult]:
    """
    Use this data source to get the list of the access logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ga.get_access_logs()
    ```


    :param _builtins.str log_id: Specifies the ID of the access log.
    :param Sequence[_builtins.str] resource_ids: Specifies the ID list of the resource to which the access log belongs.
    :param _builtins.str resource_type: Specifies the type of the resource to which the access log belongs.
           Currently, only **LISTENER** is supported.
    :param _builtins.str status: Specifies the status of the access log.
           The valid values are as follows:
           + **ACTIVE**: The resource is running.
           + **PENDING**: The status is to be determined.
           + **ERROR**: Failed to create the resource.
           + **DELETING**: The resource is being deleted.
    """
    __args__ = dict()
    __args__['logId'] = log_id
    __args__['resourceIds'] = resource_ids
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ga/getAccessLogs:getAccessLogs', __args__, opts=opts, typ=GetAccessLogsResult)
    return __ret__.apply(lambda __response__: GetAccessLogsResult(
        id=pulumi.get(__response__, 'id'),
        log_id=pulumi.get(__response__, 'log_id'),
        logs=pulumi.get(__response__, 'logs'),
        resource_ids=pulumi.get(__response__, 'resource_ids'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status')))
