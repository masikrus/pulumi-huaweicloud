# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AcceleratorArgs', 'Accelerator']

@pulumi.input_type
class AcceleratorArgs:
    def __init__(__self__, *,
                 ip_sets: pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Accelerator resource.
        :param pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]] ip_sets: Specifies the IP addresses assigned to the global accelerator.
               The AccelerateIp structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description about the global accelerator.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the tenant.
               The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
               **0** indicates the default enterprise project. Defaults to **0**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the global accelerator name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the global accelerator.
               
               <a name="Accelerator_AccelerateIp"></a>
               The `AccelerateIp` block supports:
        """
        pulumi.set(__self__, "ip_sets", ip_sets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]]:
        """
        Specifies the IP addresses assigned to the global accelerator.
        The AccelerateIp structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]]):
        pulumi.set(self, "ip_sets", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description about the global accelerator.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the tenant.
        The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
        **0** indicates the default enterprise project. Defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global accelerator name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the global accelerator.

        <a name="Accelerator_AccelerateIp"></a>
        The `AccelerateIp` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AcceleratorState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorFrozenInfoArgs']]]] = None,
                 ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Accelerator resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the global accelerator was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description about the global accelerator.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the tenant.
               The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
               **0** indicates the default enterprise project. Defaults to **0**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] flavor_id: Indicates the specification ID.
        :param pulumi.Input[Sequence[pulumi.Input['AcceleratorFrozenInfoArgs']]] frozen_infos: Indicates the frozen details of cloud services or resources.
               The FrozenInfo structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]] ip_sets: Specifies the IP addresses assigned to the global accelerator.
               The AccelerateIp structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the global accelerator name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] status: Indicates the status of a cloud service or resource. The value can be one of the following:
               + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
               + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
               + **2**: deleted/terminated (Both resources and data will be cleared.)
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the global accelerator.
               
               <a name="Accelerator_AccelerateIp"></a>
               The `AccelerateIp` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the global accelerator was updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if frozen_infos is not None:
            pulumi.set(__self__, "frozen_infos", frozen_infos)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the global accelerator was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description about the global accelerator.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the tenant.
        The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
        **0** indicates the default enterprise project. Defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the specification ID.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorFrozenInfoArgs']]]]:
        """
        Indicates the frozen details of cloud services or resources.
        The FrozenInfo structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @frozen_infos.setter
    def frozen_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorFrozenInfoArgs']]]]):
        pulumi.set(self, "frozen_infos", value)

    @_builtins.property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]]]:
        """
        Specifies the IP addresses assigned to the global accelerator.
        The AccelerateIp structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AcceleratorIpSetArgs']]]]):
        pulumi.set(self, "ip_sets", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global accelerator name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of a cloud service or resource. The value can be one of the following:
        + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
        + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
        + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the global accelerator.

        <a name="Accelerator_AccelerateIp"></a>
        The `AccelerateIp` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates when the global accelerator was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ga/accelerator:Accelerator")
class Accelerator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorIpSetArgs', 'AcceleratorIpSetArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a GA accelerator resource within HuaweiCloud.

        ## Example Usage

        ### Accelerator With IPV4

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        test = huaweicloud.ga.Accelerator("test",
            name=name,
            description=description,
            ip_sets=[{
                "area": "CM",
            }],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ### Accelerator With IPV4 And IPV6

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        test = huaweicloud.ga.Accelerator("test",
            name=name,
            description=description,
            ip_sets=[
                {
                    "ip_type": "IPV4",
                    "area": "CM",
                },
                {
                    "ip_type": "IPV6",
                    "area": "CM",
                },
            ],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The accelerator can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/accelerator:Accelerator test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description about the global accelerator.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the tenant.
               The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
               **0** indicates the default enterprise project. Defaults to **0**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorIpSetArgs', 'AcceleratorIpSetArgsDict']]]] ip_sets: Specifies the IP addresses assigned to the global accelerator.
               The AccelerateIp structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the global accelerator name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the global accelerator.
               
               <a name="Accelerator_AccelerateIp"></a>
               The `AccelerateIp` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AcceleratorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GA accelerator resource within HuaweiCloud.

        ## Example Usage

        ### Accelerator With IPV4

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        test = huaweicloud.ga.Accelerator("test",
            name=name,
            description=description,
            ip_sets=[{
                "area": "CM",
            }],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ### Accelerator With IPV4 And IPV6

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        description = config.require_object("description")
        test = huaweicloud.ga.Accelerator("test",
            name=name,
            description=description,
            ip_sets=[
                {
                    "ip_type": "IPV4",
                    "area": "CM",
                },
                {
                    "ip_type": "IPV6",
                    "area": "CM",
                },
            ],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The accelerator can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/accelerator:Accelerator test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AcceleratorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AcceleratorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorIpSetArgs', 'AcceleratorIpSetArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AcceleratorArgs.__new__(AcceleratorArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if ip_sets is None and not opts.urn:
                raise TypeError("Missing required property 'ip_sets'")
            __props__.__dict__["ip_sets"] = ip_sets
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["flavor_id"] = None
            __props__.__dict__["frozen_infos"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Accelerator, __self__).__init__(
            'huaweicloud:ga/accelerator:Accelerator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            frozen_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorFrozenInfoArgs', 'AcceleratorFrozenInfoArgsDict']]]]] = None,
            ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorIpSetArgs', 'AcceleratorIpSetArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Accelerator':
        """
        Get an existing Accelerator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates when the global accelerator was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description about the global accelerator.  
               The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the tenant.
               The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
               **0** indicates the default enterprise project. Defaults to **0**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] flavor_id: Indicates the specification ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorFrozenInfoArgs', 'AcceleratorFrozenInfoArgsDict']]]] frozen_infos: Indicates the frozen details of cloud services or resources.
               The FrozenInfo structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AcceleratorIpSetArgs', 'AcceleratorIpSetArgsDict']]]] ip_sets: Specifies the IP addresses assigned to the global accelerator.
               The AccelerateIp structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the global accelerator name.  
               The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] status: Indicates the status of a cloud service or resource. The value can be one of the following:
               + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
               + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
               + **2**: deleted/terminated (Both resources and data will be cleared.)
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the global accelerator.
               
               <a name="Accelerator_AccelerateIp"></a>
               The `AccelerateIp` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates when the global accelerator was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AcceleratorState.__new__(_AcceleratorState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["frozen_infos"] = frozen_infos
        __props__.__dict__["ip_sets"] = ip_sets
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return Accelerator(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the global accelerator was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description about the global accelerator.  
        The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of the tenant.
        The value is **0** or a string that contains a maximum of 36 characters in UUID format with hyphens (-).
        **0** indicates the default enterprise project. Defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the specification ID.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> pulumi.Output[Sequence['outputs.AcceleratorFrozenInfo']]:
        """
        Indicates the frozen details of cloud services or resources.
        The FrozenInfo structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> pulumi.Output[Sequence['outputs.AcceleratorIpSet']]:
        """
        Specifies the IP addresses assigned to the global accelerator.
        The AccelerateIp structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_sets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global accelerator name.  
        The name can contain `1` to `64` characters, only letters, digits, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of a cloud service or resource. The value can be one of the following:
        + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
        + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
        + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the global accelerator.

        <a name="Accelerator_AccelerateIp"></a>
        The `AccelerateIp` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates when the global accelerator was updated.
        """
        return pulumi.get(self, "updated_at")

