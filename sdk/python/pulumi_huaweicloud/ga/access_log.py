# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AccessLogArgs', 'AccessLog']

@pulumi.input_type
class AccessLogArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a AccessLog resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of the log group to which the access log belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of the log stream to which the access log belongs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to which the access log belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to which the access log belongs.
               Currently, only **LISTENER** is supported.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the log group to which the access log belongs.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the log stream to which the access log belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the resource to which the access log belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the resource to which the access log belongs.
        Currently, only **LISTENER** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _AccessLogState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AccessLog resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the access log, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of the log group to which the access log belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of the log stream to which the access log belongs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to which the access log belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to which the access log belongs.
               Currently, only **LISTENER** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the access log.
               The valid values are as follows:
               + **ACTIVE**: The resource is running.
               + **PENDING**: The status is to be determined.
               + **ERROR**: Failed to create the resource.
               + **DELETING**: The resource is being deleted.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the access log, in RFC3339 format.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the log group to which the access log belongs.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the log stream to which the access log belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource to which the access log belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the resource to which the access log belongs.
        Currently, only **LISTENER** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the access log.
        The valid values are as follows:
        + **ACTIVE**: The resource is running.
        + **PENDING**: The status is to be determined.
        + **ERROR**: Failed to create the resource.
        + **DELETING**: The resource is being deleted.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ga/accessLog:AccessLog")
class AccessLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an access log resource within HuaweiCloud.

        > Currently, the GA flow log interconnects with LTS only in the **cn-north-4** region.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_type = config.require_object("resourceType")
        resource_id = config.require_object("resourceId")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.ga.AccessLog("test",
            resource_type=resource_type,
            resource_id=resource_id,
            log_group_id=log_group_id,
            log_stream_id=log_stream_id)
        ```

        ## Import

        The resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/accessLog:AccessLog test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of the log group to which the access log belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of the log stream to which the access log belongs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to which the access log belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to which the access log belongs.
               Currently, only **LISTENER** is supported.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccessLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an access log resource within HuaweiCloud.

        > Currently, the GA flow log interconnects with LTS only in the **cn-north-4** region.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_type = config.require_object("resourceType")
        resource_id = config.require_object("resourceId")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.ga.AccessLog("test",
            resource_type=resource_type,
            resource_id=resource_id,
            log_group_id=log_group_id,
            log_stream_id=log_stream_id)
        ```

        ## Import

        The resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ga/accessLog:AccessLog test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AccessLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessLogArgs.__new__(AccessLogArgs)

            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(AccessLog, __self__).__init__(
            'huaweicloud:ga/accessLog:AccessLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'AccessLog':
        """
        Get an existing AccessLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the access log, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of the log group to which the access log belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of the log stream to which the access log belongs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to which the access log belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to which the access log belongs.
               Currently, only **LISTENER** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the access log.
               The valid values are as follows:
               + **ACTIVE**: The resource is running.
               + **PENDING**: The status is to be determined.
               + **ERROR**: Failed to create the resource.
               + **DELETING**: The resource is being deleted.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the access log, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessLogState.__new__(_AccessLogState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return AccessLog(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the log group to which the access log belongs.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the log stream to which the access log belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the resource to which the access log belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the resource to which the access log belongs.
        Currently, only **LISTENER** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the access log.
        The valid values are as follows:
        + **ACTIVE**: The resource is running.
        + **PENDING**: The status is to be determined.
        + **ERROR**: Failed to create the resource.
        + **DELETING**: The resource is being deleted.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

