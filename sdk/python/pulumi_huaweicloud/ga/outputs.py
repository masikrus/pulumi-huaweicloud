# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AcceleratorFrozenInfo',
    'AcceleratorIpSet',
    'AddressGroupIpAddress',
    'AddressGroupListener',
    'EndpointFrozenInfo',
    'EndpointGroupFrozenInfo',
    'EndpointGroupListeners',
    'HealthCheckFrozenInfo',
    'ListenerFrozenInfo',
    'ListenerPortRange',
    'GetAcceleratorsAcceleratorResult',
    'GetAcceleratorsAcceleratorFrozenInfoResult',
    'GetAcceleratorsAcceleratorIpSetResult',
    'GetAccessLogsLogResult',
    'GetAddressGroupsAddressGroupResult',
    'GetAddressGroupsAddressGroupAssociatedListenerResult',
    'GetAddressGroupsAddressGroupIpAddressResult',
    'GetAvailabilityZonesRegionResult',
    'GetEndpointGroupsEndpointGroupResult',
    'GetEndpointGroupsEndpointGroupFrozenInfoResult',
    'GetEndpointsEndpointResult',
    'GetEndpointsEndpointFrozenInfoResult',
    'GetHealthChecksHealthCheckResult',
    'GetHealthChecksHealthCheckFrozenInfoResult',
    'GetListenersListenerResult',
    'GetListenersListenerFrozenInfoResult',
    'GetListenersListenerPortRangeResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class AcceleratorFrozenInfo(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.int] = None,
                 scenes: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int effect: Indicates the status of the resource after being frozen. The value can be one of the following:
               + **1** (default): The resource is frozen and can be released.
               + **2**: The resource is frozen and cannot be released.
               + **3**: The resource is frozen and cannot be renewed.
        :param Sequence[_builtins.str] scenes: Indicates the service scenario. The value can be one of the following:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use  resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param _builtins.int status: Indicates the status of a cloud service or resource. The value can be one of the following:
               + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
               + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
               + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.int]:
        """
        Indicates the status of the resource after being frozen. The value can be one of the following:
        + **1** (default): The resource is frozen and can be released.
        + **2**: The resource is frozen and cannot be released.
        + **3**: The resource is frozen and cannot be renewed.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the service scenario. The value can be one of the following:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use  resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Indicates the status of a cloud service or resource. The value can be one of the following:
        + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
        + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
        + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AcceleratorIpSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipType":
            suggest = "ip_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AcceleratorIpSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AcceleratorIpSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AcceleratorIpSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: _builtins.str,
                 ip_address: Optional[_builtins.str] = None,
                 ip_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str area: Specifies the acceleration area. The value can be one of the following:
               + **OUTOFCM**: Outside the Chinese mainland
               + **CM**: Chinese mainland
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: Indicates the IP address.
        :param _builtins.str ip_type: Specifies the IP address version. Defaults to **IPV4**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **IPV4**
               + **IPV6**
               
               > If you want to set this parameter to **IPV6**, you must set **IPV4** at the same time.
               Please refer to the document sample.
        """
        pulumi.set(__self__, "area", area)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @_builtins.property
    @pulumi.getter
    def area(self) -> _builtins.str:
        """
        Specifies the acceleration area. The value can be one of the following:
        + **OUTOFCM**: Outside the Chinese mainland
        + **CM**: Chinese mainland

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "area")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        """
        Specifies the IP address version. Defaults to **IPV4**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **IPV4**
        + **IPV6**

        > If you want to set this parameter to **IPV6**, you must set **IPV4** at the same time.
        Please refer to the document sample.
        """
        return pulumi.get(self, "ip_type")


@pulumi.output_type
class AddressGroupIpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressGroupIpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressGroupIpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressGroupIpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str cidr: Specifies the CIDR block associated with the IP address group.
        :param _builtins.str created_at: The creation time of the CIDR block associated with the IP address group.
        :param _builtins.str description: Specifies the description of the associated CIDR block.
               
               <a name="address_group_associated_listeners"></a>
               The `listeners` block supports:
        """
        pulumi.set(__self__, "cidr", cidr)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the CIDR block associated with the IP address group.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the CIDR block associated with the IP address group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the associated CIDR block.

        <a name="address_group_associated_listeners"></a>
        The `listeners` block supports:
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class AddressGroupListener(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the listener associated with the IP address group.
        :param _builtins.str type: Specifies the listener type associated with the IP address group.
               The value can be one of the following:
               + **BLACK**: The blacklsit.
               + **WHITE**: The whitelist.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the listener associated with the IP address group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the listener type associated with the IP address group.
        The value can be one of the following:
        + **BLACK**: The blacklsit.
        + **WHITE**: The whitelist.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EndpointFrozenInfo(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.int] = None,
                 scenes: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param Sequence[_builtins.str] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param _builtins.int status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.int]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[Sequence[_builtins.str]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class EndpointGroupFrozenInfo(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.int] = None,
                 scenes: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param Sequence[_builtins.str] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param _builtins.int status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.int]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[Sequence[_builtins.str]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class EndpointGroupListeners(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the associated listener.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the associated listener.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class HealthCheckFrozenInfo(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.int] = None,
                 scenes: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param Sequence[_builtins.str] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param _builtins.int status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.int]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[Sequence[_builtins.str]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ListenerFrozenInfo(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.int] = None,
                 scenes: Optional[Sequence[_builtins.str]] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param Sequence[_builtins.str] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param _builtins.int status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.int]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[Sequence[_builtins.str]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ListenerPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "toPort":
            suggest = "to_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port: _builtins.int,
                 to_port: _builtins.int):
        """
        :param _builtins.int from_port: Specifies the start port number.
               The valid value is range from `1` to `65,535`.
        :param _builtins.int to_port: Specifies the end port number.
               The valid value is range from `1` to `65,535`.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @_builtins.property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> _builtins.int:
        """
        Specifies the start port number.
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "from_port")

    @_builtins.property
    @pulumi.getter(name="toPort")
    def to_port(self) -> _builtins.int:
        """
        Specifies the end port number.
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "to_port")


@pulumi.output_type
class GetAcceleratorsAcceleratorResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavor_id: _builtins.str,
                 frozen_infos: Sequence['outputs.GetAcceleratorsAcceleratorFrozenInfoResult'],
                 id: _builtins.str,
                 ip_sets: Sequence['outputs.GetAcceleratorsAcceleratorIpSetResult'],
                 name: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the accelerator.
        :param _builtins.str description: The description of the accelerator.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the accelerator
               belongs.
        :param _builtins.str flavor_id: The ID of the flavor to which the accelerator belongs.
        :param Sequence['GetAcceleratorsAcceleratorFrozenInfoArgs'] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param _builtins.str id: The ID of the accelerator.
        :param Sequence['GetAcceleratorsAcceleratorIpSetArgs'] ip_sets: The IP information of the accelerator.
               The ip_sets structure is documented below.
        :param _builtins.str name: Specifies the name of the accelerator.
        :param _builtins.str status: Specifies the current status of the accelerator.
               The valid values are as follows:
               + **ACTIVE**: The status of the accelerator is normal operation.
               + **ERROR**: The status of the accelerator is error.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the accelerator.
        :param _builtins.str updated_at: The latest update time of the accelerator.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "frozen_infos", frozen_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the accelerator.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the accelerator.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the accelerator
        belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The ID of the flavor to which the accelerator belongs.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Sequence['outputs.GetAcceleratorsAcceleratorFrozenInfoResult']:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the accelerator.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence['outputs.GetAcceleratorsAcceleratorIpSetResult']:
        """
        The IP information of the accelerator.
        The ip_sets structure is documented below.
        """
        return pulumi.get(self, "ip_sets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the accelerator.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the accelerator.
        The valid values are as follows:
        + **ACTIVE**: The status of the accelerator is normal operation.
        + **ERROR**: The status of the accelerator is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the accelerator.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the accelerator.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAcceleratorsAcceleratorFrozenInfoResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scenes: Sequence[_builtins.str],
                 status: _builtins.int):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
        :param Sequence[_builtins.str] scenes: The service scenario.
        :param _builtins.int status: Specifies the current status of the accelerator.
               The valid values are as follows:
               + **ACTIVE**: The status of the accelerator is normal operation.
               + **ERROR**: The status of the accelerator is error.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scenes", scenes)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The status of the resource after being forzen.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Sequence[_builtins.str]:
        """
        The service scenario.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the current status of the accelerator.
        The valid values are as follows:
        + **ACTIVE**: The status of the accelerator is normal operation.
        + **ERROR**: The status of the accelerator is error.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAcceleratorsAcceleratorIpSetResult(dict):
    def __init__(__self__, *,
                 area: _builtins.str,
                 ip_address: _builtins.str,
                 ip_type: _builtins.str):
        """
        :param _builtins.str area: The acceleration zone of the accelerator.
        :param _builtins.str ip_address: The IP address of the accelerator.
        :param _builtins.str ip_type: The IP type of the accelerator.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_type", ip_type)

    @_builtins.property
    @pulumi.getter
    def area(self) -> _builtins.str:
        """
        The acceleration zone of the accelerator.
        """
        return pulumi.get(self, "area")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The IP address of the accelerator.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> _builtins.str:
        """
        The IP type of the accelerator.
        """
        return pulumi.get(self, "ip_type")


@pulumi.output_type
class GetAccessLogsLogResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 log_group_id: _builtins.str,
                 log_stream_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the access log, in RFC3339 format.
        :param _builtins.str id: The ID of the access log.
        :param _builtins.str log_group_id: The ID of the log group to which the access log belongs.
        :param _builtins.str log_stream_id: The ID of the log stream to which the access log belongs.
        :param _builtins.str resource_id: The ID of the resource to which the access log belongs.
        :param _builtins.str resource_type: Specifies the type of the resource to which the access log belongs.
               Currently, only **LISTENER** is supported.
        :param _builtins.str status: Specifies the status of the access log.
               The valid values are as follows:
               + **ACTIVE**: The resource is running.
               + **PENDING**: The status is to be determined.
               + **ERROR**: Failed to create the resource.
               + **DELETING**: The resource is being deleted.
        :param _builtins.str updated_at: The latest update time of the access log, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the access log.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        The ID of the log group to which the access log belongs.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> _builtins.str:
        """
        The ID of the log stream to which the access log belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the resource to which the access log belongs.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the type of the resource to which the access log belongs.
        Currently, only **LISTENER** is supported.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the access log.
        The valid values are as follows:
        + **ACTIVE**: The resource is running.
        + **PENDING**: The status is to be determined.
        + **ERROR**: Failed to create the resource.
        + **DELETING**: The resource is being deleted.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the access log, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAddressGroupsAddressGroupResult(dict):
    def __init__(__self__, *,
                 associated_listeners: Sequence['outputs.GetAddressGroupsAddressGroupAssociatedListenerResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 ip_addresses: Sequence['outputs.GetAddressGroupsAddressGroupIpAddressResult'],
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence['GetAddressGroupsAddressGroupAssociatedListenerArgs'] associated_listeners: The list of the listeners associated with the IP address group.
               The associated_listeners structure is documented below.
        :param _builtins.str created_at: The creation time of the CIDR block.
        :param _builtins.str description: The description of the CIDR block.
        :param _builtins.str id: The ID of the listener associated with the IP address group.
        :param Sequence['GetAddressGroupsAddressGroupIpAddressArgs'] ip_addresses: The list of CIDR block configurations of the IP address group.
               The ip_addresses structure is documented below.
        :param _builtins.str name: Specifies the name of the IP address group.
        :param _builtins.str status: Specifies the status of the IP address group.
               The valid values are as follows:
               + **ACTIVE**: The status of the IP address group is normal operation.
               + **ERROR**: The status of the IP address group is error.
        :param _builtins.str updated_at: The latest update time of the IP address group.
        """
        pulumi.set(__self__, "associated_listeners", associated_listeners)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="associatedListeners")
    def associated_listeners(self) -> Sequence['outputs.GetAddressGroupsAddressGroupAssociatedListenerResult']:
        """
        The list of the listeners associated with the IP address group.
        The associated_listeners structure is documented below.
        """
        return pulumi.get(self, "associated_listeners")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the CIDR block.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the CIDR block.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the listener associated with the IP address group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence['outputs.GetAddressGroupsAddressGroupIpAddressResult']:
        """
        The list of CIDR block configurations of the IP address group.
        The ip_addresses structure is documented below.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the IP address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the IP address group.
        The valid values are as follows:
        + **ACTIVE**: The status of the IP address group is normal operation.
        + **ERROR**: The status of the IP address group is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the IP address group.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAddressGroupsAddressGroupAssociatedListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: The ID of the listener associated with the IP address group.
        :param _builtins.str type: The listener type associated with the IP address group.
               The value can be one of the following:
               + **BLACK**: The blacklsit.
               + **WHITE**: The whitelist.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the listener associated with the IP address group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The listener type associated with the IP address group.
        The value can be one of the following:
        + **BLACK**: The blacklsit.
        + **WHITE**: The whitelist.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAddressGroupsAddressGroupIpAddressResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str):
        """
        :param _builtins.str cidr: The CIDR block included in the IP address group.
        :param _builtins.str created_at: The creation time of the CIDR block.
        :param _builtins.str description: The description of the CIDR block.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        The CIDR block included in the IP address group.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the CIDR block.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the CIDR block.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetAvailabilityZonesRegionResult(dict):
    def __init__(__self__, *,
                 area: _builtins.str,
                 endpoint_types: Sequence[_builtins.str],
                 region_id: _builtins.str):
        """
        :param _builtins.str area: The acceleration area to which the regions belong.
               The value can be one of the following:
               + **OUTOFCM**: Outside the Chinese mainland.
               + **CM**: Chinese mainland.
        :param Sequence[_builtins.str] endpoint_types: The endpoint types supported by the region.
        :param _builtins.str region_id: The region ID.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "endpoint_types", endpoint_types)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter
    def area(self) -> _builtins.str:
        """
        The acceleration area to which the regions belong.
        The value can be one of the following:
        + **OUTOFCM**: Outside the Chinese mainland.
        + **CM**: Chinese mainland.
        """
        return pulumi.get(self, "area")

    @_builtins.property
    @pulumi.getter(name="endpointTypes")
    def endpoint_types(self) -> Sequence[_builtins.str]:
        """
        The endpoint types supported by the region.
        """
        return pulumi.get(self, "endpoint_types")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetEndpointGroupsEndpointGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 frozen_infos: Sequence['outputs.GetEndpointGroupsEndpointGroupFrozenInfoResult'],
                 id: _builtins.str,
                 listener_id: _builtins.str,
                 name: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str,
                 traffic_dial_percentage: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the endpoint group.
        :param _builtins.str description: The description of the endpoint group.
        :param Sequence['GetEndpointGroupsEndpointGroupFrozenInfoArgs'] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param _builtins.str id: The ID of the endpoint group.
        :param _builtins.str listener_id: Specifies the ID of the listener to which the endpoint group belongs.
        :param _builtins.str name: Specifies the name of the endpoint group.
        :param _builtins.str region_id: The region where the endpoint group belongs.
        :param _builtins.str status: Specifies the status of the endpoint group.
               The valid values are as follows:
               + **ACTIVE**: The status of the endpoint group is normal operation.
               + **ERROR**: The status of the endpoint group is error.
        :param _builtins.int traffic_dial_percentage: The percentage of traffic distributed to the endpoint group.
        :param _builtins.str updated_at: The latest update time of the endpoint group.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "frozen_infos", frozen_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_dial_percentage", traffic_dial_percentage)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the endpoint group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the endpoint group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Sequence['outputs.GetEndpointGroupsEndpointGroupFrozenInfoResult']:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the endpoint group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        """
        Specifies the ID of the listener to which the endpoint group belongs.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the endpoint group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region where the endpoint group belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the endpoint group.
        The valid values are as follows:
        + **ACTIVE**: The status of the endpoint group is normal operation.
        + **ERROR**: The status of the endpoint group is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trafficDialPercentage")
    def traffic_dial_percentage(self) -> _builtins.int:
        """
        The percentage of traffic distributed to the endpoint group.
        """
        return pulumi.get(self, "traffic_dial_percentage")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the endpoint group.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEndpointGroupsEndpointGroupFrozenInfoResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scenes: Sequence[_builtins.str],
                 status: _builtins.int):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
        :param Sequence[_builtins.str] scenes: The service scenario.
        :param _builtins.int status: Specifies the status of the endpoint group.
               The valid values are as follows:
               + **ACTIVE**: The status of the endpoint group is normal operation.
               + **ERROR**: The status of the endpoint group is error.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scenes", scenes)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The status of the resource after being forzen.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Sequence[_builtins.str]:
        """
        The service scenario.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the status of the endpoint group.
        The valid values are as follows:
        + **ACTIVE**: The status of the endpoint group is normal operation.
        + **ERROR**: The status of the endpoint group is error.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 endpoint_group_id: _builtins.str,
                 frozen_infos: Sequence['outputs.GetEndpointsEndpointFrozenInfoResult'],
                 health_state: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str created_at: The creation time of the endpoint.
        :param _builtins.str endpoint_group_id: Specifies the ID of the endpoint group to which the endpoint belongs.
        :param Sequence['GetEndpointsEndpointFrozenInfoArgs'] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param _builtins.str health_state: Specifies the health status of the endpoint.
               The valid values are as follows:
               + **INITIAL**: The endpoint status is initializing.
               + **HEALTHY**: The endpoint status is normal.
               + **UNHEALTHY**: The endpoint status is abnormal.
               + **NO_MONITOR**: The endpoint status is not monitored.
        :param _builtins.str id: The ID of the endpoint.
        :param _builtins.str ip_address: Specifies the IP address of the backend resource corresponding to the endpoint.
        :param _builtins.str resource_id: Specifies the ID of the backend resource corresponding to the endpoint.
        :param _builtins.str resource_type: Specifies the type of the backend resource corresponding to the endpoint.
               Currently only supported **EIP**.
        :param _builtins.str status: Specifies the status of the endpoint.
               The valid values are as follows:
               + **ACTIVE**: The status of the endpoint is normal operation.
               + **ERROR**: The status of the endpoint is error.
        :param _builtins.str updated_at: The latest update time of the endpoint.
        :param _builtins.int weight: The weight of traffic distribution to the endpoint. The valid value ranges from `0` to `100`.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "endpoint_group_id", endpoint_group_id)
        pulumi.set(__self__, "frozen_infos", frozen_infos)
        pulumi.set(__self__, "health_state", health_state)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the endpoint.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the endpoint group to which the endpoint belongs.
        """
        return pulumi.get(self, "endpoint_group_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Sequence['outputs.GetEndpointsEndpointFrozenInfoResult']:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        """
        Specifies the health status of the endpoint.
        The valid values are as follows:
        + **INITIAL**: The endpoint status is initializing.
        + **HEALTHY**: The endpoint status is normal.
        + **UNHEALTHY**: The endpoint status is abnormal.
        + **NO_MONITOR**: The endpoint status is not monitored.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the backend resource corresponding to the endpoint.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the ID of the backend resource corresponding to the endpoint.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the type of the backend resource corresponding to the endpoint.
        Currently only supported **EIP**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the endpoint.
        The valid values are as follows:
        + **ACTIVE**: The status of the endpoint is normal operation.
        + **ERROR**: The status of the endpoint is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the endpoint.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        The weight of traffic distribution to the endpoint. The valid value ranges from `0` to `100`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetEndpointsEndpointFrozenInfoResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scenes: Sequence[_builtins.str],
                 status: _builtins.int):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
        :param Sequence[_builtins.str] scenes: The service scenario.
        :param _builtins.int status: Specifies the status of the endpoint.
               The valid values are as follows:
               + **ACTIVE**: The status of the endpoint is normal operation.
               + **ERROR**: The status of the endpoint is error.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scenes", scenes)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The status of the resource after being forzen.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Sequence[_builtins.str]:
        """
        The service scenario.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the status of the endpoint.
        The valid values are as follows:
        + **ACTIVE**: The status of the endpoint is normal operation.
        + **ERROR**: The status of the endpoint is error.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetHealthChecksHealthCheckResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 enabled: _builtins.bool,
                 endpoint_group_id: _builtins.str,
                 frozen_infos: Sequence['outputs.GetHealthChecksHealthCheckFrozenInfoResult'],
                 id: _builtins.str,
                 interval: _builtins.int,
                 max_retries: _builtins.int,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 status: _builtins.str,
                 timeout: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the health check.
        :param _builtins.bool enabled: Specifies whether health check is enabled.
               The value can be **true** and **false**.
        :param _builtins.str endpoint_group_id: Specifies the ID of the endpoint group to which the health check belongs.
        :param Sequence['GetHealthChecksHealthCheckFrozenInfoArgs'] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param _builtins.str id: The ID of the health check.
        :param _builtins.int interval: The time interval of the health check. The unit is seconds, the valid value ranges from `1` to `60`.
        :param _builtins.int max_retries: The max retries of the health check. The valid value ranges from `1` to `10`.
        :param _builtins.int port: The port of the health check.
        :param _builtins.str protocol: Specifies the front end protocol of the health check used.
               Currently only supported **TCP**.
        :param _builtins.str status: Specifies the status of the health check.
               The valid values are as follows:
               + **ACTIVE**: The status of the health check is normal operation.
               + **ERROR**: The status of the health check is error.
        :param _builtins.int timeout: The timeout of the health check. The unit is seconds, The valid value ranges from `1` to `60`.
        :param _builtins.str updated_at: The latest update time of the health check.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "endpoint_group_id", endpoint_group_id)
        pulumi.set(__self__, "frozen_infos", frozen_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the health check.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether health check is enabled.
        The value can be **true** and **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="endpointGroupId")
    def endpoint_group_id(self) -> _builtins.str:
        """
        Specifies the ID of the endpoint group to which the health check belongs.
        """
        return pulumi.get(self, "endpoint_group_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Sequence['outputs.GetHealthChecksHealthCheckFrozenInfoResult']:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the health check.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The time interval of the health check. The unit is seconds, the valid value ranges from `1` to `60`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        The max retries of the health check. The valid value ranges from `1` to `10`.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port of the health check.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the front end protocol of the health check used.
        Currently only supported **TCP**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the health check.
        The valid values are as follows:
        + **ACTIVE**: The status of the health check is normal operation.
        + **ERROR**: The status of the health check is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout of the health check. The unit is seconds, The valid value ranges from `1` to `60`.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the health check.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetHealthChecksHealthCheckFrozenInfoResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scenes: Sequence[_builtins.str],
                 status: _builtins.int):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
        :param Sequence[_builtins.str] scenes: The service scenario.
        :param _builtins.int status: Specifies the status of the health check.
               The valid values are as follows:
               + **ACTIVE**: The status of the health check is normal operation.
               + **ERROR**: The status of the health check is error.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scenes", scenes)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The status of the resource after being forzen.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Sequence[_builtins.str]:
        """
        The service scenario.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the status of the health check.
        The valid values are as follows:
        + **ACTIVE**: The status of the health check is normal operation.
        + **ERROR**: The status of the health check is error.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetListenersListenerResult(dict):
    def __init__(__self__, *,
                 accelerator_id: _builtins.str,
                 client_affinity: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 frozen_infos: Sequence['outputs.GetListenersListenerFrozenInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 port_ranges: Sequence['outputs.GetListenersListenerPortRangeResult'],
                 protocol: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str accelerator_id: Specifies the ID of the accelerator to which the listener belongs.
        :param _builtins.str client_affinity: The client affinity of the listener.
        :param _builtins.str created_at: The creation time of the listener.
        :param _builtins.str description: The description of the listener.
        :param Sequence['GetListenersListenerFrozenInfoArgs'] frozen_infos: The frozen details of cloud services or resources.
               The frozen_info structure is documented below.
        :param _builtins.str id: The ID of the listener.
        :param _builtins.str name: Specifies the name of the listener.
        :param Sequence['GetListenersListenerPortRangeArgs'] port_ranges: The listening port range list of the listener.
               The port_ranges structure is documented below.
        :param _builtins.str protocol: Specifies the network transmission protocol type of the listener.
               The valid values are as follows:
               + **TCP**
               + **UDP**
        :param _builtins.str status: Specifies the current status of the listener.
               The valid values are as follows:
               + **ACTIVE**: The status of the listener is normal operation.
               + **ERROR**: The status of the listener is error.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the listener.
        :param _builtins.str updated_at: The latest update time of the listener.
        """
        pulumi.set(__self__, "accelerator_id", accelerator_id)
        pulumi.set(__self__, "client_affinity", client_affinity)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "frozen_infos", frozen_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> _builtins.str:
        """
        Specifies the ID of the accelerator to which the listener belongs.
        """
        return pulumi.get(self, "accelerator_id")

    @_builtins.property
    @pulumi.getter(name="clientAffinity")
    def client_affinity(self) -> _builtins.str:
        """
        The client affinity of the listener.
        """
        return pulumi.get(self, "client_affinity")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the listener.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the listener.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="frozenInfos")
    def frozen_infos(self) -> Sequence['outputs.GetListenersListenerFrozenInfoResult']:
        """
        The frozen details of cloud services or resources.
        The frozen_info structure is documented below.
        """
        return pulumi.get(self, "frozen_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the listener.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the listener.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetListenersListenerPortRangeResult']:
        """
        The listening port range list of the listener.
        The port_ranges structure is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the network transmission protocol type of the listener.
        The valid values are as follows:
        + **TCP**
        + **UDP**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the listener.
        The valid values are as follows:
        + **ACTIVE**: The status of the listener is normal operation.
        + **ERROR**: The status of the listener is error.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the listener.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the listener.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetListenersListenerFrozenInfoResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.int,
                 scenes: Sequence[_builtins.str],
                 status: _builtins.int):
        """
        :param _builtins.int effect: The status of the resource after being forzen.
        :param Sequence[_builtins.str] scenes: The service scenario.
        :param _builtins.int status: Specifies the current status of the listener.
               The valid values are as follows:
               + **ACTIVE**: The status of the listener is normal operation.
               + **ERROR**: The status of the listener is error.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "scenes", scenes)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The status of the resource after being forzen.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Sequence[_builtins.str]:
        """
        The service scenario.
        """
        return pulumi.get(self, "scenes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the current status of the listener.
        The valid values are as follows:
        + **ACTIVE**: The status of the listener is normal operation.
        + **ERROR**: The status of the listener is error.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetListenersListenerPortRangeResult(dict):
    def __init__(__self__, *,
                 from_port: _builtins.int,
                 to_port: _builtins.int):
        """
        :param _builtins.int from_port: The listening to start port of the listener.
        :param _builtins.int to_port: The listening to end port of the listener.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @_builtins.property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> _builtins.int:
        """
        The listening to start port of the listener.
        """
        return pulumi.get(self, "from_port")

    @_builtins.property
    @pulumi.getter(name="toPort")
    def to_port(self) -> _builtins.int:
        """
        The listening to end port of the listener.
        """
        return pulumi.get(self, "to_port")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The list of the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of the tag values.
        """
        return pulumi.get(self, "values")


