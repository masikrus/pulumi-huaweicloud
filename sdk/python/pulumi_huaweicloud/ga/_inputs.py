# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AcceleratorFrozenInfoArgs',
    'AcceleratorFrozenInfoArgsDict',
    'AcceleratorIpSetArgs',
    'AcceleratorIpSetArgsDict',
    'AddressGroupIpAddressArgs',
    'AddressGroupIpAddressArgsDict',
    'AddressGroupListenerArgs',
    'AddressGroupListenerArgsDict',
    'EndpointFrozenInfoArgs',
    'EndpointFrozenInfoArgsDict',
    'EndpointGroupFrozenInfoArgs',
    'EndpointGroupFrozenInfoArgsDict',
    'EndpointGroupListenersArgs',
    'EndpointGroupListenersArgsDict',
    'HealthCheckFrozenInfoArgs',
    'HealthCheckFrozenInfoArgsDict',
    'ListenerFrozenInfoArgs',
    'ListenerFrozenInfoArgsDict',
    'ListenerPortRangeArgs',
    'ListenerPortRangeArgsDict',
]

MYPY = False

if not MYPY:
    class AcceleratorFrozenInfoArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the status of the resource after being frozen. The value can be one of the following:
        + **1** (default): The resource is frozen and can be released.
        + **2**: The resource is frozen and cannot be released.
        + **3**: The resource is frozen and cannot be renewed.
        """
        scenes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Indicates the service scenario. The value can be one of the following:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use  resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the status of a cloud service or resource. The value can be one of the following:
        + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
        + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
        + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
elif False:
    AcceleratorFrozenInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AcceleratorFrozenInfoArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[_builtins.int]] = None,
                 scenes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] effect: Indicates the status of the resource after being frozen. The value can be one of the following:
               + **1** (default): The resource is frozen and can be released.
               + **2**: The resource is frozen and cannot be released.
               + **3**: The resource is frozen and cannot be renewed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scenes: Indicates the service scenario. The value can be one of the following:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use  resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param pulumi.Input[_builtins.int] status: Indicates the status of a cloud service or resource. The value can be one of the following:
               + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
               + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
               + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the status of the resource after being frozen. The value can be one of the following:
        + **1** (default): The resource is frozen and can be released.
        + **2**: The resource is frozen and cannot be released.
        + **3**: The resource is frozen and cannot be renewed.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effect", value)

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the service scenario. The value can be one of the following:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use  resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @scenes.setter
    def scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scenes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the status of a cloud service or resource. The value can be one of the following:
        + **0**: unfrozen/normal (The cloud service will recover after being unfrozen.)
        + **1**: frozen (Resources and data will be retained, but the cloud service cannot be used.)
        + **2**: deleted/terminated (Both resources and data will be cleared.)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AcceleratorIpSetArgsDict(TypedDict):
        area: pulumi.Input[_builtins.str]
        """
        Specifies the acceleration area. The value can be one of the following:
        + **OUTOFCM**: Outside the Chinese mainland
        + **CM**: Chinese mainland

        Changing this parameter will create a new resource.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the IP address.
        """
        ip_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the IP address version. Defaults to **IPV4**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **IPV4**
        + **IPV6**

        > If you want to set this parameter to **IPV6**, you must set **IPV4** at the same time.
        Please refer to the document sample.
        """
elif False:
    AcceleratorIpSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AcceleratorIpSetArgs:
    def __init__(__self__, *,
                 area: pulumi.Input[_builtins.str],
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] area: Specifies the acceleration area. The value can be one of the following:
               + **OUTOFCM**: Outside the Chinese mainland
               + **CM**: Chinese mainland
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip_address: Indicates the IP address.
        :param pulumi.Input[_builtins.str] ip_type: Specifies the IP address version. Defaults to **IPV4**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **IPV4**
               + **IPV6**
               
               > If you want to set this parameter to **IPV6**, you must set **IPV4** at the same time.
               Please refer to the document sample.
        """
        pulumi.set(__self__, "area", area)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @_builtins.property
    @pulumi.getter
    def area(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the acceleration area. The value can be one of the following:
        + **OUTOFCM**: Outside the Chinese mainland
        + **CM**: Chinese mainland

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "area", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address version. Defaults to **IPV4**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **IPV4**
        + **IPV6**

        > If you want to set this parameter to **IPV6**, you must set **IPV4** at the same time.
        Please refer to the document sample.
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_type", value)


if not MYPY:
    class AddressGroupIpAddressArgsDict(TypedDict):
        cidr: pulumi.Input[_builtins.str]
        """
        Specifies the CIDR block associated with the IP address group.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creation time of the CIDR block associated with the IP address group.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the associated CIDR block.

        <a name="address_group_associated_listeners"></a>
        The `listeners` block supports:
        """
elif False:
    AddressGroupIpAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupIpAddressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cidr: Specifies the CIDR block associated with the IP address group.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the CIDR block associated with the IP address group.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the associated CIDR block.
               
               <a name="address_group_associated_listeners"></a>
               The `listeners` block supports:
        """
        pulumi.set(__self__, "cidr", cidr)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CIDR block associated with the IP address group.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the CIDR block associated with the IP address group.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the associated CIDR block.

        <a name="address_group_associated_listeners"></a>
        The `listeners` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AddressGroupListenerArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the listener associated with the IP address group.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the listener type associated with the IP address group.
        The value can be one of the following:
        + **BLACK**: The blacklsit.
        + **WHITE**: The whitelist.
        """
elif False:
    AddressGroupListenerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupListenerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the listener associated with the IP address group.
        :param pulumi.Input[_builtins.str] type: Specifies the listener type associated with the IP address group.
               The value can be one of the following:
               + **BLACK**: The blacklsit.
               + **WHITE**: The whitelist.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the listener associated with the IP address group.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the listener type associated with the IP address group.
        The value can be one of the following:
        + **BLACK**: The blacklsit.
        + **WHITE**: The whitelist.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EndpointFrozenInfoArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        scenes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
elif False:
    EndpointFrozenInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointFrozenInfoArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[_builtins.int]] = None,
                 scenes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param pulumi.Input[_builtins.int] status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effect", value)

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @scenes.setter
    def scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scenes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class EndpointGroupFrozenInfoArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        scenes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
elif False:
    EndpointGroupFrozenInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointGroupFrozenInfoArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[_builtins.int]] = None,
                 scenes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param pulumi.Input[_builtins.int] status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effect", value)

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @scenes.setter
    def scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scenes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class EndpointGroupListenersArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the associated listener.
        """
elif False:
    EndpointGroupListenersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointGroupListenersArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the associated listener.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the associated listener.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class HealthCheckFrozenInfoArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        scenes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
elif False:
    HealthCheckFrozenInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HealthCheckFrozenInfoArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[_builtins.int]] = None,
                 scenes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param pulumi.Input[_builtins.int] status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effect", value)

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @scenes.setter
    def scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scenes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ListenerFrozenInfoArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        scenes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
elif False:
    ListenerFrozenInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerFrozenInfoArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[_builtins.int]] = None,
                 scenes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] effect: The status of the resource after being forzen.
               The valid values are as follows:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scenes: The service scenario.
               The valid values are as follows:
               + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
               failure of pay-per-use resources.
               + **POLICE**: The cloud service is frozen for public security.
               + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
               + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
               + **PARTNER**: A partner freezes their customer's resources.
        :param pulumi.Input[_builtins.int] status: The status of a cloud service or resource.
               The valid values are as follows:
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if scenes is not None:
            pulumi.set(__self__, "scenes", scenes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of the resource after being forzen.
        The valid values are as follows:
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effect", value)

    @_builtins.property
    @pulumi.getter
    def scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The service scenario.
        The valid values are as follows:
        + **ARREAR**: The cloud service is in arrears, including expiration of yearly/monthly resources and fee deduction
        failure of pay-per-use resources.
        + **POLICE**: The cloud service is frozen for public security.
        + **ILLEGAL**: The cloud service is frozen due to violation of laws and regulations.
        + **VERIFY**: The cloud service is frozen because the user fails to pass the real-name authentication.
        + **PARTNER**: A partner freezes their customer's resources.
        """
        return pulumi.get(self, "scenes")

    @scenes.setter
    def scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scenes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of a cloud service or resource.
        The valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ListenerPortRangeArgsDict(TypedDict):
        from_port: pulumi.Input[_builtins.int]
        """
        Specifies the start port number.
        The valid value is range from `1` to `65,535`.
        """
        to_port: pulumi.Input[_builtins.int]
        """
        Specifies the end port number.
        The valid value is range from `1` to `65,535`.
        """
elif False:
    ListenerPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerPortRangeArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[_builtins.int],
                 to_port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] from_port: Specifies the start port number.
               The valid value is range from `1` to `65,535`.
        :param pulumi.Input[_builtins.int] to_port: Specifies the end port number.
               The valid value is range from `1` to `65,535`.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @_builtins.property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the start port number.
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "from_port", value)

    @_builtins.property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the end port number.
        The valid value is range from `1` to `65,535`.
        """
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "to_port", value)


