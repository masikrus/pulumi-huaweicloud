# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCertificatesResult',
    'AwaitableGetCertificatesResult',
    'get_certificates',
    'get_certificates_output',
]

@pulumi.output_type
class GetCertificatesResult:
    """
    A collection of values returned by getCertificates.
    """
    def __init__(__self__, certificate_ids=None, certificates=None, common_names=None, descriptions=None, domains=None, fingerprints=None, id=None, names=None, region=None, scm_certificate_ids=None, types=None):
        if certificate_ids and not isinstance(certificate_ids, list):
            raise TypeError("Expected argument 'certificate_ids' to be a list")
        pulumi.set(__self__, "certificate_ids", certificate_ids)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if common_names and not isinstance(common_names, list):
            raise TypeError("Expected argument 'common_names' to be a list")
        pulumi.set(__self__, "common_names", common_names)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if fingerprints and not isinstance(fingerprints, list):
            raise TypeError("Expected argument 'fingerprints' to be a list")
        pulumi.set(__self__, "fingerprints", fingerprints)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scm_certificate_ids and not isinstance(scm_certificate_ids, list):
            raise TypeError("Expected argument 'scm_certificate_ids' to be a list")
        pulumi.set(__self__, "scm_certificate_ids", scm_certificate_ids)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)

    @_builtins.property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "certificate_ids")

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetCertificatesCertificateResult']:
        """
        Indicates the list of certificates.
        """
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter(name="commonNames")
    def common_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the primary domain name of the certificate.
        """
        return pulumi.get(self, "common_names")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates  the certificate description.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the domain names used by the server certificate.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter
    def fingerprints(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the fingerprint of the certificate.
        """
        return pulumi.get(self, "fingerprints")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates  the certificate name.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scmCertificateIds")
    def scm_certificate_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the SSL certificate ID.
        """
        return pulumi.get(self, "scm_certificate_ids")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the certificate type.
        """
        return pulumi.get(self, "types")


class AwaitableGetCertificatesResult(GetCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificatesResult(
            certificate_ids=self.certificate_ids,
            certificates=self.certificates,
            common_names=self.common_names,
            descriptions=self.descriptions,
            domains=self.domains,
            fingerprints=self.fingerprints,
            id=self.id,
            names=self.names,
            region=self.region,
            scm_certificate_ids=self.scm_certificate_ids,
            types=self.types)


def get_certificates(certificate_ids: Optional[Sequence[_builtins.str]] = None,
                     common_names: Optional[Sequence[_builtins.str]] = None,
                     descriptions: Optional[Sequence[_builtins.str]] = None,
                     domains: Optional[Sequence[_builtins.str]] = None,
                     fingerprints: Optional[Sequence[_builtins.str]] = None,
                     names: Optional[Sequence[_builtins.str]] = None,
                     region: Optional[_builtins.str] = None,
                     scm_certificate_ids: Optional[Sequence[_builtins.str]] = None,
                     types: Optional[Sequence[_builtins.str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificatesResult:
    """
    Use this data source to get the list of ELB certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_certificates()
    ```


    :param Sequence[_builtins.str] certificate_ids: Specifies a certificate ID.
           Multiple IDs can be queried.
    :param Sequence[_builtins.str] common_names: Specifies the primary domain name of the certificate.
           Multiple values can be queried.
    :param Sequence[_builtins.str] descriptions: Specifies the certificate description.
           Multiple descriptions can be queried.
    :param Sequence[_builtins.str] domains: Specifies the domain names used by the server certificate.
           Multiple domain names can be queried.
    :param Sequence[_builtins.str] fingerprints: Specifies the fingerprint of the certificate.
           Multiple values can be queried.
    :param Sequence[_builtins.str] names: Specifies the certificate name.
           Multiple names can be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] scm_certificate_ids: Specifies the SSL certificate ID.
           Multiple IDs can be queried.
    :param Sequence[_builtins.str] types: Specifies the certificate type.
           Value options:
           + **server** indicates server certificates.
           + **client** indicates CA certificates.
           + **server_sm**: indicates the server SM certificate.
           Multiple types can be queried.
    """
    __args__ = dict()
    __args__['certificateIds'] = certificate_ids
    __args__['commonNames'] = common_names
    __args__['descriptions'] = descriptions
    __args__['domains'] = domains
    __args__['fingerprints'] = fingerprints
    __args__['names'] = names
    __args__['region'] = region
    __args__['scmCertificateIds'] = scm_certificate_ids
    __args__['types'] = types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Elb/getCertificates:getCertificates', __args__, opts=opts, typ=GetCertificatesResult).value

    return AwaitableGetCertificatesResult(
        certificate_ids=pulumi.get(__ret__, 'certificate_ids'),
        certificates=pulumi.get(__ret__, 'certificates'),
        common_names=pulumi.get(__ret__, 'common_names'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        domains=pulumi.get(__ret__, 'domains'),
        fingerprints=pulumi.get(__ret__, 'fingerprints'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'),
        scm_certificate_ids=pulumi.get(__ret__, 'scm_certificate_ids'),
        types=pulumi.get(__ret__, 'types'))
def get_certificates_output(certificate_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            common_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            descriptions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            domains: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            fingerprints: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            scm_certificate_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificatesResult]:
    """
    Use this data source to get the list of ELB certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_certificates()
    ```


    :param Sequence[_builtins.str] certificate_ids: Specifies a certificate ID.
           Multiple IDs can be queried.
    :param Sequence[_builtins.str] common_names: Specifies the primary domain name of the certificate.
           Multiple values can be queried.
    :param Sequence[_builtins.str] descriptions: Specifies the certificate description.
           Multiple descriptions can be queried.
    :param Sequence[_builtins.str] domains: Specifies the domain names used by the server certificate.
           Multiple domain names can be queried.
    :param Sequence[_builtins.str] fingerprints: Specifies the fingerprint of the certificate.
           Multiple values can be queried.
    :param Sequence[_builtins.str] names: Specifies the certificate name.
           Multiple names can be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] scm_certificate_ids: Specifies the SSL certificate ID.
           Multiple IDs can be queried.
    :param Sequence[_builtins.str] types: Specifies the certificate type.
           Value options:
           + **server** indicates server certificates.
           + **client** indicates CA certificates.
           + **server_sm**: indicates the server SM certificate.
           Multiple types can be queried.
    """
    __args__ = dict()
    __args__['certificateIds'] = certificate_ids
    __args__['commonNames'] = common_names
    __args__['descriptions'] = descriptions
    __args__['domains'] = domains
    __args__['fingerprints'] = fingerprints
    __args__['names'] = names
    __args__['region'] = region
    __args__['scmCertificateIds'] = scm_certificate_ids
    __args__['types'] = types
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Elb/getCertificates:getCertificates', __args__, opts=opts, typ=GetCertificatesResult)
    return __ret__.apply(lambda __response__: GetCertificatesResult(
        certificate_ids=pulumi.get(__response__, 'certificate_ids'),
        certificates=pulumi.get(__response__, 'certificates'),
        common_names=pulumi.get(__response__, 'common_names'),
        descriptions=pulumi.get(__response__, 'descriptions'),
        domains=pulumi.get(__response__, 'domains'),
        fingerprints=pulumi.get(__response__, 'fingerprints'),
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region'),
        scm_certificate_ids=pulumi.get(__response__, 'scm_certificate_ids'),
        types=pulumi.get(__response__, 'types')))
