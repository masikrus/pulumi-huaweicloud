# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetQuotaDetailsResult',
    'AwaitableGetQuotaDetailsResult',
    'get_quota_details',
    'get_quota_details_output',
]

@pulumi.output_type
class GetQuotaDetailsResult:
    """
    A collection of values returned by getQuotaDetails.
    """
    def __init__(__self__, id=None, quota_keys=None, quotas=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if quota_keys and not isinstance(quota_keys, list):
            raise TypeError("Expected argument 'quota_keys' to be a list")
        pulumi.set(__self__, "quota_keys", quota_keys)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="quotaKeys")
    def quota_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "quota_keys")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetQuotaDetailsQuotaResult']:
        """
        Indicates the resource quotas.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetQuotaDetailsResult(GetQuotaDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQuotaDetailsResult(
            id=self.id,
            quota_keys=self.quota_keys,
            quotas=self.quotas,
            region=self.region)


def get_quota_details(quota_keys: Optional[Sequence[_builtins.str]] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQuotaDetailsResult:
    """
    Use this data source to get the current quotas and used quotas of resources related to a ELB in a specific project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_quota_details()
    ```


    :param Sequence[_builtins.str] quota_keys: Specifies the resource type.
           Value options: **loadbalancer**, **listener**, **ipgroup**, **pool**, **member**, **healthmonitor**, **l7policy**,
           **certificate**, **security_policy**, **listeners_per_loadbalancer**, **listeners_per_pool**, **members_per_pool**,
           **condition_per_policy**, **ipgroup_bindings**, **ipgroup_max_length**, **ipgroups_per_listener**, **pools_per_l7policy**
           or **l7policies_per_listener**.
           
           Multiple values can be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['quotaKeys'] = quota_keys
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Elb/getQuotaDetails:getQuotaDetails', __args__, opts=opts, typ=GetQuotaDetailsResult).value

    return AwaitableGetQuotaDetailsResult(
        id=pulumi.get(__ret__, 'id'),
        quota_keys=pulumi.get(__ret__, 'quota_keys'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'))
def get_quota_details_output(quota_keys: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQuotaDetailsResult]:
    """
    Use this data source to get the current quotas and used quotas of resources related to a ELB in a specific project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_quota_details()
    ```


    :param Sequence[_builtins.str] quota_keys: Specifies the resource type.
           Value options: **loadbalancer**, **listener**, **ipgroup**, **pool**, **member**, **healthmonitor**, **l7policy**,
           **certificate**, **security_policy**, **listeners_per_loadbalancer**, **listeners_per_pool**, **members_per_pool**,
           **condition_per_policy**, **ipgroup_bindings**, **ipgroup_max_length**, **ipgroups_per_listener**, **pools_per_l7policy**
           or **l7policies_per_listener**.
           
           Multiple values can be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['quotaKeys'] = quota_keys
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Elb/getQuotaDetails:getQuotaDetails', __args__, opts=opts, typ=GetQuotaDetailsResult)
    return __ret__.apply(lambda __response__: GetQuotaDetailsResult(
        id=pulumi.get(__response__, 'id'),
        quota_keys=pulumi.get(__response__, 'quota_keys'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region')))
