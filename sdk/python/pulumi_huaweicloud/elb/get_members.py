# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMembersResult',
    'AwaitableGetMembersResult',
    'get_members',
    'get_members_output',
]

@pulumi.output_type
class GetMembersResult:
    """
    A collection of values returned by getMembers.
    """
    def __init__(__self__, address=None, enterprise_project_id=None, id=None, instance_id=None, ip_version=None, member_id=None, member_type=None, members=None, name=None, operating_status=None, pool_id=None, protocol_port=None, region=None, subnet_id=None, weight=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if member_id and not isinstance(member_id, str):
            raise TypeError("Expected argument 'member_id' to be a str")
        pulumi.set(__self__, "member_id", member_id)
        if member_type and not isinstance(member_type, str):
            raise TypeError("Expected argument 'member_type' to be a str")
        pulumi.set(__self__, "member_type", member_type)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_status and not isinstance(operating_status, str):
            raise TypeError("Expected argument 'operating_status' to be a str")
        pulumi.set(__self__, "operating_status", operating_status)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if protocol_port and not isinstance(protocol_port, int):
            raise TypeError("Expected argument 'protocol_port' to be a int")
        pulumi.set(__self__, "protocol_port", protocol_port)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if weight and not isinstance(weight, int):
            raise TypeError("Expected argument 'weight' to be a int")
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        The private IP address bound to the backend server.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the instance associated with the backend server.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.str]:
        """
        The IP address version supported by the backend server group
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "member_id")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[_builtins.str]:
        """
        The type of the backend server.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetMembersMemberResult']:
        """
        Lists the members.
        The members structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The backend server name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[_builtins.str]:
        """
        The health status of the backend server.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[_builtins.int]:
        """
        The port used by the backend server to receive requests.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the IPv4 or IPv6 subnet where the backend server resides.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        The weight of the backend server. Requests are routed to backend servers in the same backend server group
        based on their weights.
        """
        return pulumi.get(self, "weight")


class AwaitableGetMembersResult(GetMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMembersResult(
            address=self.address,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            instance_id=self.instance_id,
            ip_version=self.ip_version,
            member_id=self.member_id,
            member_type=self.member_type,
            members=self.members,
            name=self.name,
            operating_status=self.operating_status,
            pool_id=self.pool_id,
            protocol_port=self.protocol_port,
            region=self.region,
            subnet_id=self.subnet_id,
            weight=self.weight)


def get_members(address: Optional[_builtins.str] = None,
                enterprise_project_id: Optional[_builtins.str] = None,
                instance_id: Optional[_builtins.str] = None,
                ip_version: Optional[_builtins.str] = None,
                member_id: Optional[_builtins.str] = None,
                member_type: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                operating_status: Optional[_builtins.str] = None,
                pool_id: Optional[_builtins.str] = None,
                protocol_port: Optional[_builtins.int] = None,
                region: Optional[_builtins.str] = None,
                subnet_id: Optional[_builtins.str] = None,
                weight: Optional[_builtins.int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMembersResult:
    """
    Use this data source to get the list of ELB members.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    member_name = config.require_object("memberName")
    elb_pool_id = config.require_object("elbPoolId")
    test = huaweicloud.Elb.get_members(pool_id=elb_pool_id,
        name=member_name)
    ```


    :param _builtins.str address: Specifies the IP address bound to the backend server.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str instance_id: Specifies the ID of the instance associated with the backend server.
    :param _builtins.str ip_version: Specifies the IP address version supported by the backend server group. The value can
           be **v4** or **v6**.
    :param _builtins.str member_id: Specifies the backend server ID.
    :param _builtins.str member_type: Specifies the type of the backend server. The valid values are as follows:
           + **ip**: IP as backend servers.
           + **instance**: ECSs used as backend servers Multiple values can be queried in the format of
           member_type=xxx&member_type=xxx.
    :param _builtins.str name: Specifies the backend server name.
    :param _builtins.str operating_status: Specifies the operating status of the backend server. Value options:
           + **ONLINE**: The backend server is running normally.
           + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
           + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
    :param _builtins.str pool_id: Specifies the ID of the backend server group.
    :param _builtins.int protocol_port: Specifies the port used by the backend server to receive requests.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the IPv4 or IPv6 subnet where the backend server resides.
    :param _builtins.int weight: Specifies the weight of the backend server. Requests are routed to backend servers in the
           same backend server group based on their weights.
    """
    __args__ = dict()
    __args__['address'] = address
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['ipVersion'] = ip_version
    __args__['memberId'] = member_id
    __args__['memberType'] = member_type
    __args__['name'] = name
    __args__['operatingStatus'] = operating_status
    __args__['poolId'] = pool_id
    __args__['protocolPort'] = protocol_port
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['weight'] = weight
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Elb/getMembers:getMembers', __args__, opts=opts, typ=GetMembersResult).value

    return AwaitableGetMembersResult(
        address=pulumi.get(__ret__, 'address'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        member_id=pulumi.get(__ret__, 'member_id'),
        member_type=pulumi.get(__ret__, 'member_type'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        operating_status=pulumi.get(__ret__, 'operating_status'),
        pool_id=pulumi.get(__ret__, 'pool_id'),
        protocol_port=pulumi.get(__ret__, 'protocol_port'),
        region=pulumi.get(__ret__, 'region'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        weight=pulumi.get(__ret__, 'weight'))
def get_members_output(address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       ip_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       member_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       member_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       operating_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                       protocol_port: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       weight: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMembersResult]:
    """
    Use this data source to get the list of ELB members.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    member_name = config.require_object("memberName")
    elb_pool_id = config.require_object("elbPoolId")
    test = huaweicloud.Elb.get_members(pool_id=elb_pool_id,
        name=member_name)
    ```


    :param _builtins.str address: Specifies the IP address bound to the backend server.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str instance_id: Specifies the ID of the instance associated with the backend server.
    :param _builtins.str ip_version: Specifies the IP address version supported by the backend server group. The value can
           be **v4** or **v6**.
    :param _builtins.str member_id: Specifies the backend server ID.
    :param _builtins.str member_type: Specifies the type of the backend server. The valid values are as follows:
           + **ip**: IP as backend servers.
           + **instance**: ECSs used as backend servers Multiple values can be queried in the format of
           member_type=xxx&member_type=xxx.
    :param _builtins.str name: Specifies the backend server name.
    :param _builtins.str operating_status: Specifies the operating status of the backend server. Value options:
           + **ONLINE**: The backend server is running normally.
           + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
           + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
    :param _builtins.str pool_id: Specifies the ID of the backend server group.
    :param _builtins.int protocol_port: Specifies the port used by the backend server to receive requests.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the IPv4 or IPv6 subnet where the backend server resides.
    :param _builtins.int weight: Specifies the weight of the backend server. Requests are routed to backend servers in the
           same backend server group based on their weights.
    """
    __args__ = dict()
    __args__['address'] = address
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['ipVersion'] = ip_version
    __args__['memberId'] = member_id
    __args__['memberType'] = member_type
    __args__['name'] = name
    __args__['operatingStatus'] = operating_status
    __args__['poolId'] = pool_id
    __args__['protocolPort'] = protocol_port
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['weight'] = weight
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Elb/getMembers:getMembers', __args__, opts=opts, typ=GetMembersResult)
    return __ret__.apply(lambda __response__: GetMembersResult(
        address=pulumi.get(__response__, 'address'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        member_id=pulumi.get(__response__, 'member_id'),
        member_type=pulumi.get(__response__, 'member_type'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name'),
        operating_status=pulumi.get(__response__, 'operating_status'),
        pool_id=pulumi.get(__response__, 'pool_id'),
        protocol_port=pulumi.get(__response__, 'protocol_port'),
        region=pulumi.get(__response__, 'region'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        weight=pulumi.get(__response__, 'weight')))
