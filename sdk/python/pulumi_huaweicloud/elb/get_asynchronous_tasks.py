# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAsynchronousTasksResult',
    'AwaitableGetAsynchronousTasksResult',
    'get_asynchronous_tasks',
    'get_asynchronous_tasks_output',
]

@pulumi.output_type
class GetAsynchronousTasksResult:
    """
    A collection of values returned by getAsynchronousTasks.
    """
    def __init__(__self__, begin_time=None, error_code=None, id=None, job_id=None, job_type=None, jobs=None, region=None, resource_id=None, status=None):
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if error_code and not isinstance(error_code, str):
            raise TypeError("Expected argument 'error_code' to be a str")
        pulumi.set(__self__, "error_code", error_code)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_type and not isinstance(job_type, str):
            raise TypeError("Expected argument 'job_type' to be a str")
        pulumi.set(__self__, "job_type", job_type)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        """
        Indicates the time when the task was started.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        Indicates the task error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        """
        Indicates  the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[_builtins.str]:
        """
        Indicates the task type.
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetAsynchronousTasksJobResult']:
        """
        Indicates the task list.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the resource associated with a subtask.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the task status.
        """
        return pulumi.get(self, "status")


class AwaitableGetAsynchronousTasksResult(GetAsynchronousTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAsynchronousTasksResult(
            begin_time=self.begin_time,
            error_code=self.error_code,
            id=self.id,
            job_id=self.job_id,
            job_type=self.job_type,
            jobs=self.jobs,
            region=self.region,
            resource_id=self.resource_id,
            status=self.status)


def get_asynchronous_tasks(begin_time: Optional[_builtins.str] = None,
                           error_code: Optional[_builtins.str] = None,
                           job_id: Optional[_builtins.str] = None,
                           job_type: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           resource_id: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAsynchronousTasksResult:
    """
    Use this data source to get the list of asynchronous tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_asynchronous_tasks()
    ```


    :param _builtins.str begin_time: Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
           The tasks that started on or after the specified time will be returned.
    :param _builtins.str error_code: Specifies the error code of the task.
    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_type: Specifies the task type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str status: Specifies the task status.
           Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['errorCode'] = error_code
    __args__['jobId'] = job_id
    __args__['jobType'] = job_type
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Elb/getAsynchronousTasks:getAsynchronousTasks', __args__, opts=opts, typ=GetAsynchronousTasksResult).value

    return AwaitableGetAsynchronousTasksResult(
        begin_time=pulumi.get(__ret__, 'begin_time'),
        error_code=pulumi.get(__ret__, 'error_code'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_type=pulumi.get(__ret__, 'job_type'),
        jobs=pulumi.get(__ret__, 'jobs'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        status=pulumi.get(__ret__, 'status'))
def get_asynchronous_tasks_output(begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  error_code: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  job_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAsynchronousTasksResult]:
    """
    Use this data source to get the list of asynchronous tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Elb.get_asynchronous_tasks()
    ```


    :param _builtins.str begin_time: Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
           The tasks that started on or after the specified time will be returned.
    :param _builtins.str error_code: Specifies the error code of the task.
    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_type: Specifies the task type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str status: Specifies the task status.
           Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['errorCode'] = error_code
    __args__['jobId'] = job_id
    __args__['jobType'] = job_type
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Elb/getAsynchronousTasks:getAsynchronousTasks', __args__, opts=opts, typ=GetAsynchronousTasksResult)
    return __ret__.apply(lambda __response__: GetAsynchronousTasksResult(
        begin_time=pulumi.get(__response__, 'begin_time'),
        error_code=pulumi.get(__response__, 'error_code'),
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        job_type=pulumi.get(__response__, 'job_type'),
        jobs=pulumi.get(__response__, 'jobs'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        status=pulumi.get(__response__, 'status')))
