# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ListenerInsertHeaders',
    'ListenerV2InsertHeaders',
    'PoolPersistence',
    'PoolV2Persistence',
    'GetAsynchronousTasksJobResult',
    'GetAsynchronousTasksJobSubJobResult',
    'GetAsynchronousTasksJobSubJobEntityResult',
    'GetCertificatesCertificateResult',
    'GetListenersListenerResult',
    'GetListenersListenerInsertHeaderResult',
    'GetListenersListenerLoadbalancerResult',
    'GetMembersMemberResult',
    'GetMembersMemberReasonResult',
    'GetMembersMemberStatusResult',
    'GetMembersMemberStatusReasonResult',
    'GetPoolsPoolResult',
    'GetPoolsPoolListenerResult',
    'GetPoolsPoolLoadbalancerResult',
    'GetPoolsPoolMemberResult',
    'GetPoolsPoolPersistenceResult',
    'GetQuotaDetailsQuotaResult',
]

@pulumi.output_type
class ListenerInsertHeaders(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xForwardedElbIp":
            suggest = "x_forwarded_elb_ip"
        elif key == "xForwardedHost":
            suggest = "x_forwarded_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerInsertHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerInsertHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerInsertHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 x_forwarded_elb_ip: Optional[_builtins.str] = None,
                 x_forwarded_host: Optional[_builtins.str] = None):
        """
        :param _builtins.str x_forwarded_elb_ip: Specifies whether to transparently transmit the load balancer EIP to backend
               servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
               Value options:
               + **true**: This function is enabled.
               + **false (default)**: The function is disabled.
        :param _builtins.str x_forwarded_host: Specifies whether to rewrite the X-Forwarded-Host header. If this function is
               enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
               + **true (default)**: This function is enabled.
               + **false**: The function is disabled.
        """
        if x_forwarded_elb_ip is not None:
            pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        if x_forwarded_host is not None:
            pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @_builtins.property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> Optional[_builtins.str]:
        """
        Specifies whether to transparently transmit the load balancer EIP to backend
        servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
        Value options:
        + **true**: This function is enabled.
        + **false (default)**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_elb_ip")

    @_builtins.property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> Optional[_builtins.str]:
        """
        Specifies whether to rewrite the X-Forwarded-Host header. If this function is
        enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
        + **true (default)**: This function is enabled.
        + **false**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_host")


@pulumi.output_type
class ListenerV2InsertHeaders(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xForwardedElbIp":
            suggest = "x_forwarded_elb_ip"
        elif key == "xForwardedHost":
            suggest = "x_forwarded_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerV2InsertHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerV2InsertHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerV2InsertHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 x_forwarded_elb_ip: Optional[_builtins.str] = None,
                 x_forwarded_host: Optional[_builtins.str] = None):
        if x_forwarded_elb_ip is not None:
            pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        if x_forwarded_host is not None:
            pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @_builtins.property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "x_forwarded_elb_ip")

    @_builtins.property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "x_forwarded_host")


@pulumi.output_type
class PoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: The type of persistence mode. The current specification supports SOURCE_IP,
               HTTP_COOKIE, and APP_COOKIE.
        :param _builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately. Required
               if `type = APP_COOKIE`.
        :param _builtins.int timeout: Specifies the sticky session timeout duration in minutes. This parameter is
               invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
               + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
               + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of persistence mode. The current specification supports SOURCE_IP,
        HTTP_COOKIE, and APP_COOKIE.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        The name of the cookie if persistence mode is set appropriately. Required
        if `type = APP_COOKIE`.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the sticky session timeout duration in minutes. This parameter is
        invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
        + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
        + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class PoolV2Persistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolV2Persistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolV2Persistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolV2Persistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetAsynchronousTasksJobResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 end_time: _builtins.str,
                 error_code: _builtins.str,
                 error_msg: _builtins.str,
                 job_id: _builtins.str,
                 job_type: _builtins.str,
                 project_id: _builtins.str,
                 resource_id: _builtins.str,
                 status: _builtins.str,
                 sub_jobs: Sequence['outputs.GetAsynchronousTasksJobSubJobResult']):
        """
        :param _builtins.str begin_time: Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
               The tasks that started on or after the specified time will be returned.
        :param _builtins.str end_time: Indicates  the time when the task was ended.
        :param _builtins.str error_code: Specifies the error code of the task.
        :param _builtins.str error_msg: Indicates  the task error message.
        :param _builtins.str job_id: Specifies the task ID.
        :param _builtins.str job_type: Specifies the task type.
        :param _builtins.str project_id: Indicates the project ID.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str status: Specifies the task status.
               Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
        :param Sequence['GetAsynchronousTasksJobSubJobArgs'] sub_jobs: Indicates the subtask list.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_msg", error_msg)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_jobs", sub_jobs)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
        The tasks that started on or after the specified time will be returned.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates  the time when the task was ended.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Specifies the error code of the task.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        Indicates  the task error message.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        """
        Specifies the task type.
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task status.
        Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subJobs")
    def sub_jobs(self) -> Sequence['outputs.GetAsynchronousTasksJobSubJobResult']:
        """
        Indicates the subtask list.
        """
        return pulumi.get(self, "sub_jobs")


@pulumi.output_type
class GetAsynchronousTasksJobSubJobResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 end_time: _builtins.str,
                 entities: Sequence['outputs.GetAsynchronousTasksJobSubJobEntityResult'],
                 error_code: _builtins.str,
                 error_msg: _builtins.str,
                 job_id: _builtins.str,
                 job_type: _builtins.str,
                 project_id: _builtins.str,
                 resource_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str begin_time: Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
               The tasks that started on or after the specified time will be returned.
        :param _builtins.str end_time: Indicates  the time when the task was ended.
        :param Sequence['GetAsynchronousTasksJobSubJobEntityArgs'] entities: Indicates the resource to be processed in a subtask.
        :param _builtins.str error_code: Specifies the error code of the task.
        :param _builtins.str error_msg: Indicates  the task error message.
        :param _builtins.str job_id: Specifies the task ID.
        :param _builtins.str job_type: Specifies the task type.
        :param _builtins.str project_id: Indicates the project ID.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str status: Specifies the task status.
               Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_msg", error_msg)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.
        The tasks that started on or after the specified time will be returned.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates  the time when the task was ended.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetAsynchronousTasksJobSubJobEntityResult']:
        """
        Indicates the resource to be processed in a subtask.
        """
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Specifies the error code of the task.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        Indicates  the task error message.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        """
        Specifies the task type.
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task status.
        Value options: **INIT**, **RUNNING**, **FAIL**, **SUCCESS**, **ROLLBACKING**, **COMPLETE**, **ROLLBACK_FAIL**, and **CANCEL**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAsynchronousTasksJobSubJobEntityResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_type: Indicates the type of the resource associated with a subtask.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the type of the resource associated with a subtask.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 certificate: _builtins.str,
                 common_name: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain: _builtins.str,
                 enc_certificate: _builtins.str,
                 enc_private_key: _builtins.str,
                 expire_time: _builtins.str,
                 fingerprint: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_key: _builtins.str,
                 scm_certificate_id: _builtins.str,
                 subject_alternative_names: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str certificate: Indicates the certificate content.
        :param _builtins.str common_name: Specifies the primary domain name of the certificate.
               Multiple values can be queried.
        :param _builtins.str created_at: Indicates the time when the certificate was created.
        :param _builtins.str description: Specifies the certificate description.
               Multiple descriptions can be queried.
        :param _builtins.str domain: Specifies the domain names used by the server certificate.
               Multiple domain names can be queried.
        :param _builtins.str enc_certificate: Indicates the body of the SM encryption certificate required by HTTPS listeners.
        :param _builtins.str enc_private_key: Indicates the private key of the SM encryption certificate required by HTTPS listeners.
        :param _builtins.str expire_time: Indicates the time when the certificate expires.
        :param _builtins.str fingerprint: Specifies the fingerprint of the certificate.
               Multiple values can be queried.
        :param _builtins.str id: Indicates the certificate ID.
        :param _builtins.str name: Specifies the certificate name.
               Multiple names can be queried.
        :param _builtins.str private_key: Indicates the private key of the certificate used by HTTPS listeners.
        :param _builtins.str scm_certificate_id: Specifies the SSL certificate ID.
               Multiple IDs can be queried.
        :param Sequence[_builtins.str] subject_alternative_names: Indicates all the domain names of the certificate.
        :param _builtins.str type: Specifies the certificate type.
               Value options:
               + **server** indicates server certificates.
               + **client** indicates CA certificates.
               + **server_sm**: indicates the server SM certificate.
               Multiple types can be queried.
        :param _builtins.str updated_at: Indicates the time when the certificate was updated.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "scm_certificate_id", scm_certificate_id)
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        """
        Indicates the certificate content.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        Specifies the primary domain name of the certificate.
        Multiple values can be queried.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time when the certificate was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the certificate description.
        Multiple descriptions can be queried.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        Specifies the domain names used by the server certificate.
        Multiple domain names can be queried.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> _builtins.str:
        """
        Indicates the body of the SM encryption certificate required by HTTPS listeners.
        """
        return pulumi.get(self, "enc_certificate")

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> _builtins.str:
        """
        Indicates the private key of the SM encryption certificate required by HTTPS listeners.
        """
        return pulumi.get(self, "enc_private_key")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        Indicates the time when the certificate expires.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        """
        Specifies the fingerprint of the certificate.
        Multiple values can be queried.
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the certificate ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the certificate name.
        Multiple names can be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        Indicates the private key of the certificate used by HTTPS listeners.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="scmCertificateId")
    def scm_certificate_id(self) -> _builtins.str:
        """
        Specifies the SSL certificate ID.
        Multiple IDs can be queried.
        """
        return pulumi.get(self, "scm_certificate_id")

    @_builtins.property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[_builtins.str]:
        """
        Indicates all the domain names of the certificate.
        """
        return pulumi.get(self, "subject_alternative_names")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the certificate type.
        Value options:
        + **server** indicates server certificates.
        + **client** indicates CA certificates.
        + **server_sm**: indicates the server SM certificate.
        Multiple types can be queried.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the time when the certificate was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetListenersListenerResult(dict):
    def __init__(__self__, *,
                 client_ca_tls_container_ref: _builtins.str,
                 connection_limit: _builtins.int,
                 created_at: _builtins.str,
                 default_pool_id: _builtins.str,
                 default_tls_container_ref: _builtins.str,
                 description: _builtins.str,
                 http2_enable: _builtins.bool,
                 id: _builtins.str,
                 insert_headers: Sequence['outputs.GetListenersListenerInsertHeaderResult'],
                 loadbalancers: Sequence['outputs.GetListenersListenerLoadbalancerResult'],
                 name: _builtins.str,
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 protocol: _builtins.str,
                 protocol_port: _builtins.int,
                 sni_container_refs: Sequence[_builtins.str],
                 tags: Mapping[str, _builtins.str],
                 tls_ciphers_policy: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str client_ca_tls_container_ref: The ID of the CA certificate used by the listener.
        :param _builtins.int connection_limit: The maximum number of connections allowed for the listener.
        :param _builtins.str created_at: The time when the listener was created.
        :param _builtins.str default_pool_id: The ID of the default pool with which the listener is associated.
        :param _builtins.str default_tls_container_ref: The ID of the server certificate used by the listener.
        :param _builtins.str description: The description for the listener.
        :param _builtins.bool http2_enable: Whether the ELB listener uses HTTP/2. Value options: **true**, **false**.
        :param _builtins.str id: The ELB loadbalancer ID.
        :param Sequence['GetListenersListenerInsertHeaderArgs'] insert_headers: Whether to insert HTTP extension headers and sent them to backend servers.
               The insert_headers structure is documented below.
        :param Sequence['GetListenersListenerLoadbalancerArgs'] loadbalancers: The list of the associated load balancer.
               The loadbalancers structure is documented below.
        :param _builtins.str name: The listener name.
        :param _builtins.str protection_reason: The reason to enable modification protection.
        :param _builtins.str protection_status: Whether modification protection is enabled.
        :param _builtins.str protocol: The listener protocol.  
               The valid values are **TCP**, **UDP**, **HTTP** and **TERMINATED_HTTPS**.
        :param _builtins.int protocol_port: The front-end listening port of the listener.  
               The valid value is range from `1` to `65535`.
        :param Sequence[_builtins.str] sni_container_refs: List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the listener.
        :param _builtins.str tls_ciphers_policy: The security policy used by the listener.
        :param _builtins.str updated_at: The time when the listener was updated.
        """
        pulumi.set(__self__, "client_ca_tls_container_ref", client_ca_tls_container_ref)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_pool_id", default_pool_id)
        pulumi.set(__self__, "default_tls_container_ref", default_tls_container_ref)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "http2_enable", http2_enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "insert_headers", insert_headers)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "sni_container_refs", sni_container_refs)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tls_ciphers_policy", tls_ciphers_policy)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="clientCaTlsContainerRef")
    def client_ca_tls_container_ref(self) -> _builtins.str:
        """
        The ID of the CA certificate used by the listener.
        """
        return pulumi.get(self, "client_ca_tls_container_ref")

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> _builtins.int:
        """
        The maximum number of connections allowed for the listener.
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the listener was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> _builtins.str:
        """
        The ID of the default pool with which the listener is associated.
        """
        return pulumi.get(self, "default_pool_id")

    @_builtins.property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> _builtins.str:
        """
        The ID of the server certificate used by the listener.
        """
        return pulumi.get(self, "default_tls_container_ref")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description for the listener.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> _builtins.bool:
        """
        Whether the ELB listener uses HTTP/2. Value options: **true**, **false**.
        """
        return pulumi.get(self, "http2_enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ELB loadbalancer ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> Sequence['outputs.GetListenersListenerInsertHeaderResult']:
        """
        Whether to insert HTTP extension headers and sent them to backend servers.
        The insert_headers structure is documented below.
        """
        return pulumi.get(self, "insert_headers")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetListenersListenerLoadbalancerResult']:
        """
        The list of the associated load balancer.
        The loadbalancers structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The listener name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason to enable modification protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        Whether modification protection is enabled.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The listener protocol.  
        The valid values are **TCP**, **UDP**, **HTTP** and **TERMINATED_HTTPS**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> _builtins.int:
        """
        The front-end listening port of the listener.  
        The valid value is range from `1` to `65535`.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> Sequence[_builtins.str]:
        """
        List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        """
        return pulumi.get(self, "sni_container_refs")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the listener.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tlsCiphersPolicy")
    def tls_ciphers_policy(self) -> _builtins.str:
        """
        The security policy used by the listener.
        """
        return pulumi.get(self, "tls_ciphers_policy")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the listener was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetListenersListenerInsertHeaderResult(dict):
    def __init__(__self__, *,
                 x_forwarded_elb_ip: _builtins.str,
                 x_forwarded_host: _builtins.str):
        """
        :param _builtins.str x_forwarded_elb_ip: Whether to transparently transmit the load balancer EIP to backend servers.
        :param _builtins.str x_forwarded_host: Whether to rewrite the X-Forwarded-Host header.
        """
        pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @_builtins.property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> _builtins.str:
        """
        Whether to transparently transmit the load balancer EIP to backend servers.
        """
        return pulumi.get(self, "x_forwarded_elb_ip")

    @_builtins.property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> _builtins.str:
        """
        Whether to rewrite the X-Forwarded-Host header.
        """
        return pulumi.get(self, "x_forwarded_host")


@pulumi.output_type
class GetListenersListenerLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The ELB loadbalancer ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ELB loadbalancer ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMembersMemberResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 ip_version: _builtins.str,
                 member_type: _builtins.str,
                 name: _builtins.str,
                 operating_status: _builtins.str,
                 protocol_port: _builtins.int,
                 reasons: Sequence['outputs.GetMembersMemberReasonResult'],
                 statuses: Sequence['outputs.GetMembersMemberStatusResult'],
                 subnet_id: _builtins.str,
                 updated_at: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str address: Specifies the IP address bound to the backend server.
        :param _builtins.str created_at: The time when a backend server was added.
        :param _builtins.str id: The backend server ID.
        :param _builtins.str instance_id: Specifies the ID of the instance associated with the backend server.
        :param _builtins.str ip_version: Specifies the IP address version supported by the backend server group. The value can
               be **v4** or **v6**.
        :param _builtins.str member_type: Specifies the type of the backend server. The valid values are as follows:
               + **ip**: IP as backend servers.
               + **instance**: ECSs used as backend servers Multiple values can be queried in the format of
               member_type=xxx&member_type=xxx.
        :param _builtins.str name: Specifies the backend server name.
        :param _builtins.str operating_status: Specifies the operating status of the backend server. Value options:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        :param _builtins.int protocol_port: Specifies the port used by the backend server to receive requests.
        :param Sequence['GetMembersMemberReasonArgs'] reasons: Why health check fails.
               The reason structure is documented below.
        :param Sequence['GetMembersMemberStatusArgs'] statuses: The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
               `status` is not specified, `operating_status` of member takes precedence.
               The status structure is documented below.
        :param _builtins.str subnet_id: Specifies the ID of the IPv4 or IPv6 subnet where the backend server resides.
        :param _builtins.str updated_at: The  time when a backend server was updated.
        :param _builtins.int weight: Specifies the weight of the backend server. Requests are routed to backend servers in the
               same backend server group based on their weights.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "reasons", reasons)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Specifies the IP address bound to the backend server.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when a backend server was added.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The backend server ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the instance associated with the backend server.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Specifies the IP address version supported by the backend server group. The value can
        be **v4** or **v6**.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> _builtins.str:
        """
        Specifies the type of the backend server. The valid values are as follows:
        + **ip**: IP as backend servers.
        + **instance**: ECSs used as backend servers Multiple values can be queried in the format of
        member_type=xxx&member_type=xxx.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backend server name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        Specifies the operating status of the backend server. Value options:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> _builtins.int:
        """
        Specifies the port used by the backend server to receive requests.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Sequence['outputs.GetMembersMemberReasonResult']:
        """
        Why health check fails.
        The reason structure is documented below.
        """
        return pulumi.get(self, "reasons")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetMembersMemberStatusResult']:
        """
        The health status of the backend server if `listener_id` under status is specified. If `listener_id` under
        `status` is not specified, `operating_status` of member takes precedence.
        The status structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the IPv4 or IPv6 subnet where the backend server resides.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The  time when a backend server was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight of the backend server. Requests are routed to backend servers in the
        same backend server group based on their weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMembersMemberReasonResult(dict):
    def __init__(__self__, *,
                 expected_response: _builtins.str,
                 healthcheck_response: _builtins.str,
                 reason_code: _builtins.str):
        """
        :param _builtins.str expected_response: The code of the health check failures.
        :param _builtins.str healthcheck_response: The expected HTTP status code.
        :param _builtins.str reason_code: The returned HTTP status code in the response.
        """
        pulumi.set(__self__, "expected_response", expected_response)
        pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> _builtins.str:
        """
        The code of the health check failures.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> _builtins.str:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> _builtins.str:
        """
        The returned HTTP status code in the response.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class GetMembersMemberStatusResult(dict):
    def __init__(__self__, *,
                 listener_id: _builtins.str,
                 operating_status: _builtins.str,
                 reasons: Sequence['outputs.GetMembersMemberStatusReasonResult']):
        """
        :param _builtins.str listener_id: The listener ID.
        :param _builtins.str operating_status: Specifies the operating status of the backend server. Value options:
               + **ONLINE**: The backend server is running normally.
               + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
               + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        :param Sequence['GetMembersMemberStatusReasonArgs'] reasons: Why health check fails.
               The reason structure is documented below.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "operating_status", operating_status)
        pulumi.set(__self__, "reasons", reasons)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        """
        Specifies the operating status of the backend server. Value options:
        + **ONLINE**: The backend server is running normally.
        + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
        + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
        """
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Sequence['outputs.GetMembersMemberStatusReasonResult']:
        """
        Why health check fails.
        The reason structure is documented below.
        """
        return pulumi.get(self, "reasons")


@pulumi.output_type
class GetMembersMemberStatusReasonResult(dict):
    def __init__(__self__, *,
                 expected_response: _builtins.str,
                 healthcheck_response: _builtins.str,
                 reason_code: _builtins.str):
        """
        :param _builtins.str expected_response: The code of the health check failures.
        :param _builtins.str healthcheck_response: The expected HTTP status code.
        :param _builtins.str reason_code: The returned HTTP status code in the response.
        """
        pulumi.set(__self__, "expected_response", expected_response)
        pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> _builtins.str:
        """
        The code of the health check failures.
        """
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> _builtins.str:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> _builtins.str:
        """
        The returned HTTP status code in the response.
        """
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class GetPoolsPoolResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 healthmonitor_id: _builtins.str,
                 id: _builtins.str,
                 lb_method: _builtins.str,
                 listeners: Sequence['outputs.GetPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetPoolsPoolLoadbalancerResult'],
                 members: Sequence['outputs.GetPoolsPoolMemberResult'],
                 name: _builtins.str,
                 persistences: Sequence['outputs.GetPoolsPoolPersistenceResult'],
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the ELB pool.
        :param _builtins.str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
        :param _builtins.str id: The listener, loadbalancer or member ID.
        :param _builtins.str lb_method: Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
               or SOURCE_IP.
        :param Sequence['GetPoolsPoolListenerArgs'] listeners: The listener list. The object structure is documented below.
        :param Sequence['GetPoolsPoolLoadbalancerArgs'] loadbalancers: The loadbalancer list. The object structure is documented below.
        :param Sequence['GetPoolsPoolMemberArgs'] members: The member list. The object structure is documented below.
        :param _builtins.str name: Specifies the name of the ELB pool.
        :param Sequence['GetPoolsPoolPersistenceArgs'] persistences: Indicates whether connections in the same session will be processed by the same pool member or not.
               The object structure is documented below.
        :param _builtins.str protection_reason: The reason to enable modification protection.
        :param _builtins.str protection_status: Whether modification protection is enabled.
        :param _builtins.str protocol: Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the ELB pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> _builtins.str:
        """
        Specifies the health monitor ID of the ELB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> _builtins.str:
        """
        Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
        or SOURCE_IP.
        """
        return pulumi.get(self, "lb_method")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetPoolsPoolListenerResult']:
        """
        The listener list. The object structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetPoolsPoolLoadbalancerResult']:
        """
        The loadbalancer list. The object structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetPoolsPoolMemberResult']:
        """
        The member list. The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ELB pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetPoolsPoolPersistenceResult']:
        """
        Indicates whether connections in the same session will be processed by the same pool member or not.
        The object structure is documented below.
        """
        return pulumi.get(self, "persistences")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason to enable modification protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        Whether modification protection is enabled.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 timeout: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param _builtins.int timeout: The sticky session timeout duration in minutes.
        :param _builtins.str type: The type of persistence mode.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The sticky session timeout duration in minutes.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetQuotaDetailsQuotaResult(dict):
    def __init__(__self__, *,
                 quota_key: _builtins.str,
                 quota_limit: _builtins.int,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str quota_key: Specifies the resource type.
               Value options: **loadbalancer**, **listener**, **ipgroup**, **pool**, **member**, **healthmonitor**, **l7policy**,
               **certificate**, **security_policy**, **listeners_per_loadbalancer**, **listeners_per_pool**, **members_per_pool**,
               **condition_per_policy**, **ipgroup_bindings**, **ipgroup_max_length**, **ipgroups_per_listener**, **pools_per_l7policy**
               or **l7policies_per_listener**.
               
               Multiple values can be queried.
        :param _builtins.int quota_limit: Indicates the total quota.
               + If the value is greater than or equal to **0**, it indicates the current quota.
               + **-1** indicates that the quota is not limited.
        :param _builtins.str unit: Indicates the quota unit.
               The value can only be **count**.
        :param _builtins.int used: Indicates the used quota.
        """
        pulumi.set(__self__, "quota_key", quota_key)
        pulumi.set(__self__, "quota_limit", quota_limit)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="quotaKey")
    def quota_key(self) -> _builtins.str:
        """
        Specifies the resource type.
        Value options: **loadbalancer**, **listener**, **ipgroup**, **pool**, **member**, **healthmonitor**, **l7policy**,
        **certificate**, **security_policy**, **listeners_per_loadbalancer**, **listeners_per_pool**, **members_per_pool**,
        **condition_per_policy**, **ipgroup_bindings**, **ipgroup_max_length**, **ipgroups_per_listener**, **pools_per_l7policy**
        or **l7policies_per_listener**.

        Multiple values can be queried.
        """
        return pulumi.get(self, "quota_key")

    @_builtins.property
    @pulumi.getter(name="quotaLimit")
    def quota_limit(self) -> _builtins.int:
        """
        Indicates the total quota.
        + If the value is greater than or equal to **0**, it indicates the current quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "quota_limit")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        Indicates the quota unit.
        The value can only be **count**.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the used quota.
        """
        return pulumi.get(self, "used")


