# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountBlueprint',
]

@pulumi.output_type
class AccountBlueprint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintProductId":
            suggest = "blueprint_product_id"
        elif key == "blueprintProductVersion":
            suggest = "blueprint_product_version"
        elif key == "isBlueprintHasMultiAccountResource":
            suggest = "is_blueprint_has_multi_account_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountBlueprint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountBlueprint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountBlueprint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_product_id: Optional[_builtins.str] = None,
                 blueprint_product_version: Optional[_builtins.str] = None,
                 is_blueprint_has_multi_account_resource: Optional[_builtins.bool] = None,
                 variables: Optional[_builtins.str] = None):
        """
        :param _builtins.str blueprint_product_id: Specifies the ID of the blueprint.
        :param _builtins.str blueprint_product_version: Specifies the version of the blueprint.
        :param _builtins.bool is_blueprint_has_multi_account_resource: Specifies whether the blueprint has multi-account resources.
        :param _builtins.str variables: Specifies the variables of the blueprint.
        """
        if blueprint_product_id is not None:
            pulumi.set(__self__, "blueprint_product_id", blueprint_product_id)
        if blueprint_product_version is not None:
            pulumi.set(__self__, "blueprint_product_version", blueprint_product_version)
        if is_blueprint_has_multi_account_resource is not None:
            pulumi.set(__self__, "is_blueprint_has_multi_account_resource", is_blueprint_has_multi_account_resource)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="blueprintProductId")
    def blueprint_product_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the blueprint.
        """
        return pulumi.get(self, "blueprint_product_id")

    @_builtins.property
    @pulumi.getter(name="blueprintProductVersion")
    def blueprint_product_version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the blueprint.
        """
        return pulumi.get(self, "blueprint_product_version")

    @_builtins.property
    @pulumi.getter(name="isBlueprintHasMultiAccountResource")
    def is_blueprint_has_multi_account_resource(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the blueprint has multi-account resources.
        """
        return pulumi.get(self, "is_blueprint_has_multi_account_resource")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[_builtins.str]:
        """
        Specifies the variables of the blueprint.
        """
        return pulumi.get(self, "variables")


