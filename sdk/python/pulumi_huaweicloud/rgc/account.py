# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str],
                 identity_store_email: pulumi.Input[_builtins.str],
                 identity_store_user_name: pulumi.Input[_builtins.str],
                 parent_organizational_unit_id: pulumi.Input[_builtins.str],
                 parent_organizational_unit_name: pulumi.Input[_builtins.str],
                 blueprint: Optional[pulumi.Input['AccountBlueprintArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 phone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the account.
        :param pulumi.Input[_builtins.str] identity_store_email: Specifies the email address of the account in identity center.
        :param pulumi.Input[_builtins.str] identity_store_user_name: Specifies the name of the account in identity center.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_id: Specifies the ID of the parent organizational unit.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_name: Specifies the name of the parent organizational unit.
        :param pulumi.Input['AccountBlueprintArgs'] blueprint: Specifies the blueprint of the account.
               The blueprint structure is documented below.
               
               <a name="blueprint"></a>
               The `blueprint` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the account.
        :param pulumi.Input[_builtins.str] phone: Specifies the mobile number of the account.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "identity_store_email", identity_store_email)
        pulumi.set(__self__, "identity_store_user_name", identity_store_user_name)
        pulumi.set(__self__, "parent_organizational_unit_id", parent_organizational_unit_id)
        pulumi.set(__self__, "parent_organizational_unit_name", parent_organizational_unit_name)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the email address of the account.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreEmail")
    def identity_store_email(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the email address of the account in identity center.
        """
        return pulumi.get(self, "identity_store_email")

    @identity_store_email.setter
    def identity_store_email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_store_email", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreUserName")
    def identity_store_user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the account in identity center.
        """
        return pulumi.get(self, "identity_store_user_name")

    @identity_store_user_name.setter
    def identity_store_user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_store_user_name", value)

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitId")
    def parent_organizational_unit_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_id")

    @parent_organizational_unit_id.setter
    def parent_organizational_unit_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parent_organizational_unit_id", value)

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitName")
    def parent_organizational_unit_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_name")

    @parent_organizational_unit_name.setter
    def parent_organizational_unit_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parent_organizational_unit_name", value)

    @_builtins.property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input['AccountBlueprintArgs']]:
        """
        Specifies the blueprint of the account.
        The blueprint structure is documented below.

        <a name="blueprint"></a>
        The `blueprint` block supports:
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input['AccountBlueprintArgs']]):
        pulumi.set(self, "blueprint", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mobile number of the account.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phone", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input['AccountBlueprintArgs']] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_at: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_name: Optional[pulumi.Input[_builtins.str]] = None,
                 phone: Optional[pulumi.Input[_builtins.str]] = None,
                 urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input['AccountBlueprintArgs'] blueprint: Specifies the blueprint of the account.
               The blueprint structure is documented below.
               
               <a name="blueprint"></a>
               The `blueprint` block supports:
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the account.
        :param pulumi.Input[_builtins.str] identity_store_email: Specifies the email address of the account in identity center.
        :param pulumi.Input[_builtins.str] identity_store_user_name: Specifies the name of the account in identity center.
        :param pulumi.Input[_builtins.str] joined_at: Indicates the time when the account was created.
        :param pulumi.Input[_builtins.str] joined_method: Indicates how an account joined an organization.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the account.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_id: Specifies the ID of the parent organizational unit.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_name: Specifies the name of the parent organizational unit.
        :param pulumi.Input[_builtins.str] phone: Specifies the mobile number of the account.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the account.
        """
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if identity_store_email is not None:
            pulumi.set(__self__, "identity_store_email", identity_store_email)
        if identity_store_user_name is not None:
            pulumi.set(__self__, "identity_store_user_name", identity_store_user_name)
        if joined_at is not None:
            pulumi.set(__self__, "joined_at", joined_at)
        if joined_method is not None:
            pulumi.set(__self__, "joined_method", joined_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_organizational_unit_id is not None:
            pulumi.set(__self__, "parent_organizational_unit_id", parent_organizational_unit_id)
        if parent_organizational_unit_name is not None:
            pulumi.set(__self__, "parent_organizational_unit_name", parent_organizational_unit_name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input['AccountBlueprintArgs']]:
        """
        Specifies the blueprint of the account.
        The blueprint structure is documented below.

        <a name="blueprint"></a>
        The `blueprint` block supports:
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input['AccountBlueprintArgs']]):
        pulumi.set(self, "blueprint", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the account.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreEmail")
    def identity_store_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the account in identity center.
        """
        return pulumi.get(self, "identity_store_email")

    @identity_store_email.setter
    def identity_store_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_store_email", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreUserName")
    def identity_store_user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the account in identity center.
        """
        return pulumi.get(self, "identity_store_user_name")

    @identity_store_user_name.setter
    def identity_store_user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_store_user_name", value)

    @_builtins.property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the account was created.
        """
        return pulumi.get(self, "joined_at")

    @joined_at.setter
    def joined_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_at", value)

    @_builtins.property
    @pulumi.getter(name="joinedMethod")
    def joined_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates how an account joined an organization.
        """
        return pulumi.get(self, "joined_method")

    @joined_method.setter
    def joined_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_method", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitId")
    def parent_organizational_unit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_id")

    @parent_organizational_unit_id.setter
    def parent_organizational_unit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_organizational_unit_id", value)

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitName")
    def parent_organizational_unit_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_name")

    @parent_organizational_unit_name.setter
    def parent_organizational_unit_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_organizational_unit_name", value)

    @_builtins.property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mobile number of the account.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phone", value)

    @_builtins.property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the uniform resource name of the account.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "urn", value)


@pulumi.type_token("huaweicloud:rgc/account:Account")
class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint: Optional[pulumi.Input[Union['AccountBlueprintArgs', 'AccountBlueprintArgsDict']]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_name: Optional[pulumi.Input[_builtins.str]] = None,
                 phone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an RGC account resource within HuaweiCloud.

        > **NOTE:** Deleting RGC account is not support. If you destroy a resource of RGC account,
        the RGC account is only closed and removed from the state, but it remains in the cloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        parent_organizational_unit_name = config.require_object("parentOrganizationalUnitName")
        parent_organizational_unit_id = config.require_object("parentOrganizationalUnitId")
        test = huaweicloud.rgc.Account("test",
            name="test",
            email="test@terraform.com",
            parent_organizational_unit_name=parent_organizational_unit_name,
            parent_organizational_unit_id=parent_organizational_unit_id,
            identity_store_user_name="test",
            identity_store_email="test@terraform.com")
        ```

        ### Account with Blueprint

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        parent_organizational_unit_name = config.require_object("parentOrganizationalUnitName")
        parent_organizational_unit_id = config.require_object("parentOrganizationalUnitId")
        blueprint_product_id = config.require_object("blueprintProductId")
        blueprint_product_version = config.require_object("blueprintProductVersion")
        test = huaweicloud.rgc.Account("test",
            name="test",
            email="test@terraform.com",
            parent_organizational_unit_name=parent_organizational_unit_name,
            parent_organizational_unit_id=parent_organizational_unit_id,
            identity_store_user_name="test",
            identity_store_email="test@terraform.com",
            blueprint={
                "blueprint_product_id": blueprint_product_id,
                "blueprint_product_version": blueprint_product_version,
                "is_blueprint_has_multi_account_resource": False,
            })
        ```

        ## Import

        The Organizations account can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rgc/account:Account test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include `email`, `phone`, `parent_organizational_unit_name`, `parent_organizational_unit_id`,

        `identity_store_user_name`, `identity_store_email` and `blueprint`.

        It is generally recommended running `pulumi preview` after importing an account.

        You can then decide if changes should be applied to the account, or the resource definition should be updated to

        align with the account. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rgc_account" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              email, phone, parent_organizational_unit_name, parent_organizational_unit_id, identity_store_user_name,
            
              identity_store_email, blueprint
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AccountBlueprintArgs', 'AccountBlueprintArgsDict']] blueprint: Specifies the blueprint of the account.
               The blueprint structure is documented below.
               
               <a name="blueprint"></a>
               The `blueprint` block supports:
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the account.
        :param pulumi.Input[_builtins.str] identity_store_email: Specifies the email address of the account in identity center.
        :param pulumi.Input[_builtins.str] identity_store_user_name: Specifies the name of the account in identity center.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the account.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_id: Specifies the ID of the parent organizational unit.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_name: Specifies the name of the parent organizational unit.
        :param pulumi.Input[_builtins.str] phone: Specifies the mobile number of the account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an RGC account resource within HuaweiCloud.

        > **NOTE:** Deleting RGC account is not support. If you destroy a resource of RGC account,
        the RGC account is only closed and removed from the state, but it remains in the cloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        parent_organizational_unit_name = config.require_object("parentOrganizationalUnitName")
        parent_organizational_unit_id = config.require_object("parentOrganizationalUnitId")
        test = huaweicloud.rgc.Account("test",
            name="test",
            email="test@terraform.com",
            parent_organizational_unit_name=parent_organizational_unit_name,
            parent_organizational_unit_id=parent_organizational_unit_id,
            identity_store_user_name="test",
            identity_store_email="test@terraform.com")
        ```

        ### Account with Blueprint

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        parent_organizational_unit_name = config.require_object("parentOrganizationalUnitName")
        parent_organizational_unit_id = config.require_object("parentOrganizationalUnitId")
        blueprint_product_id = config.require_object("blueprintProductId")
        blueprint_product_version = config.require_object("blueprintProductVersion")
        test = huaweicloud.rgc.Account("test",
            name="test",
            email="test@terraform.com",
            parent_organizational_unit_name=parent_organizational_unit_name,
            parent_organizational_unit_id=parent_organizational_unit_id,
            identity_store_user_name="test",
            identity_store_email="test@terraform.com",
            blueprint={
                "blueprint_product_id": blueprint_product_id,
                "blueprint_product_version": blueprint_product_version,
                "is_blueprint_has_multi_account_resource": False,
            })
        ```

        ## Import

        The Organizations account can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rgc/account:Account test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include `email`, `phone`, `parent_organizational_unit_name`, `parent_organizational_unit_id`,

        `identity_store_user_name`, `identity_store_email` and `blueprint`.

        It is generally recommended running `pulumi preview` after importing an account.

        You can then decide if changes should be applied to the account, or the resource definition should be updated to

        align with the account. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rgc_account" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              email, phone, parent_organizational_unit_name, parent_organizational_unit_id, identity_store_user_name,
            
              identity_store_email, blueprint
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint: Optional[pulumi.Input[Union['AccountBlueprintArgs', 'AccountBlueprintArgsDict']]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_email: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_organizational_unit_name: Optional[pulumi.Input[_builtins.str]] = None,
                 phone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["blueprint"] = blueprint
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if identity_store_email is None and not opts.urn:
                raise TypeError("Missing required property 'identity_store_email'")
            __props__.__dict__["identity_store_email"] = identity_store_email
            if identity_store_user_name is None and not opts.urn:
                raise TypeError("Missing required property 'identity_store_user_name'")
            __props__.__dict__["identity_store_user_name"] = identity_store_user_name
            __props__.__dict__["name"] = name
            if parent_organizational_unit_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_organizational_unit_id'")
            __props__.__dict__["parent_organizational_unit_id"] = parent_organizational_unit_id
            if parent_organizational_unit_name is None and not opts.urn:
                raise TypeError("Missing required property 'parent_organizational_unit_name'")
            __props__.__dict__["parent_organizational_unit_name"] = parent_organizational_unit_name
            __props__.__dict__["phone"] = phone
            __props__.__dict__["joined_at"] = None
            __props__.__dict__["joined_method"] = None
            __props__.__dict__["urn"] = None
        super(Account, __self__).__init__(
            'huaweicloud:rgc/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blueprint: Optional[pulumi.Input[Union['AccountBlueprintArgs', 'AccountBlueprintArgsDict']]] = None,
            email: Optional[pulumi.Input[_builtins.str]] = None,
            identity_store_email: Optional[pulumi.Input[_builtins.str]] = None,
            identity_store_user_name: Optional[pulumi.Input[_builtins.str]] = None,
            joined_at: Optional[pulumi.Input[_builtins.str]] = None,
            joined_method: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_organizational_unit_id: Optional[pulumi.Input[_builtins.str]] = None,
            parent_organizational_unit_name: Optional[pulumi.Input[_builtins.str]] = None,
            phone: Optional[pulumi.Input[_builtins.str]] = None,
            urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AccountBlueprintArgs', 'AccountBlueprintArgsDict']] blueprint: Specifies the blueprint of the account.
               The blueprint structure is documented below.
               
               <a name="blueprint"></a>
               The `blueprint` block supports:
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the account.
        :param pulumi.Input[_builtins.str] identity_store_email: Specifies the email address of the account in identity center.
        :param pulumi.Input[_builtins.str] identity_store_user_name: Specifies the name of the account in identity center.
        :param pulumi.Input[_builtins.str] joined_at: Indicates the time when the account was created.
        :param pulumi.Input[_builtins.str] joined_method: Indicates how an account joined an organization.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the account.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_id: Specifies the ID of the parent organizational unit.
        :param pulumi.Input[_builtins.str] parent_organizational_unit_name: Specifies the name of the parent organizational unit.
        :param pulumi.Input[_builtins.str] phone: Specifies the mobile number of the account.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["blueprint"] = blueprint
        __props__.__dict__["email"] = email
        __props__.__dict__["identity_store_email"] = identity_store_email
        __props__.__dict__["identity_store_user_name"] = identity_store_user_name
        __props__.__dict__["joined_at"] = joined_at
        __props__.__dict__["joined_method"] = joined_method
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_organizational_unit_id"] = parent_organizational_unit_id
        __props__.__dict__["parent_organizational_unit_name"] = parent_organizational_unit_name
        __props__.__dict__["phone"] = phone
        __props__.__dict__["urn"] = urn
        return Account(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def blueprint(self) -> pulumi.Output[Optional['outputs.AccountBlueprint']]:
        """
        Specifies the blueprint of the account.
        The blueprint structure is documented below.

        <a name="blueprint"></a>
        The `blueprint` block supports:
        """
        return pulumi.get(self, "blueprint")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email address of the account.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="identityStoreEmail")
    def identity_store_email(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email address of the account in identity center.
        """
        return pulumi.get(self, "identity_store_email")

    @_builtins.property
    @pulumi.getter(name="identityStoreUserName")
    def identity_store_user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the account in identity center.
        """
        return pulumi.get(self, "identity_store_user_name")

    @_builtins.property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the account was created.
        """
        return pulumi.get(self, "joined_at")

    @_builtins.property
    @pulumi.getter(name="joinedMethod")
    def joined_method(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates how an account joined an organization.
        """
        return pulumi.get(self, "joined_method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitId")
    def parent_organizational_unit_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_id")

    @_builtins.property
    @pulumi.getter(name="parentOrganizationalUnitName")
    def parent_organizational_unit_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the parent organizational unit.
        """
        return pulumi.get(self, "parent_organizational_unit_name")

    @_builtins.property
    @pulumi.getter
    def phone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the mobile number of the account.
        """
        return pulumi.get(self, "phone")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the uniform resource name of the account.
        """
        return pulumi.get(self, "urn")

