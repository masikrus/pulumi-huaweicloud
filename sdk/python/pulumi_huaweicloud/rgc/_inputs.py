# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountBlueprintArgs',
    'AccountBlueprintArgsDict',
]

MYPY = False

if not MYPY:
    class AccountBlueprintArgsDict(TypedDict):
        blueprint_product_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the blueprint.
        """
        blueprint_product_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version of the blueprint.
        """
        is_blueprint_has_multi_account_resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the blueprint has multi-account resources.
        """
        variables: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the variables of the blueprint.
        """
elif False:
    AccountBlueprintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountBlueprintArgs:
    def __init__(__self__, *,
                 blueprint_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 blueprint_product_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_blueprint_has_multi_account_resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 variables: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] blueprint_product_id: Specifies the ID of the blueprint.
        :param pulumi.Input[_builtins.str] blueprint_product_version: Specifies the version of the blueprint.
        :param pulumi.Input[_builtins.bool] is_blueprint_has_multi_account_resource: Specifies whether the blueprint has multi-account resources.
        :param pulumi.Input[_builtins.str] variables: Specifies the variables of the blueprint.
        """
        if blueprint_product_id is not None:
            pulumi.set(__self__, "blueprint_product_id", blueprint_product_id)
        if blueprint_product_version is not None:
            pulumi.set(__self__, "blueprint_product_version", blueprint_product_version)
        if is_blueprint_has_multi_account_resource is not None:
            pulumi.set(__self__, "is_blueprint_has_multi_account_resource", is_blueprint_has_multi_account_resource)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="blueprintProductId")
    def blueprint_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the blueprint.
        """
        return pulumi.get(self, "blueprint_product_id")

    @blueprint_product_id.setter
    def blueprint_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "blueprint_product_id", value)

    @_builtins.property
    @pulumi.getter(name="blueprintProductVersion")
    def blueprint_product_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the blueprint.
        """
        return pulumi.get(self, "blueprint_product_version")

    @blueprint_product_version.setter
    def blueprint_product_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "blueprint_product_version", value)

    @_builtins.property
    @pulumi.getter(name="isBlueprintHasMultiAccountResource")
    def is_blueprint_has_multi_account_resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the blueprint has multi-account resources.
        """
        return pulumi.get(self, "is_blueprint_has_multi_account_resource")

    @is_blueprint_has_multi_account_resource.setter
    def is_blueprint_has_multi_account_resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_blueprint_has_multi_account_resource", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the variables of the blueprint.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "variables", value)


