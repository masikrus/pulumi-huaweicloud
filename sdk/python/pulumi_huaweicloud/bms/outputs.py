# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceDataDisk',
    'InstanceNic',
    'GetFlavorsFlavorResult',
    'GetInstancesServerResult',
    'GetInstancesServerNicResult',
    'GetInstancesServerVolumesAttachedResult',
]

@pulumi.output_type
class InstanceDataDisk(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Specifies the data disk size, in GB. The value ranges form 10 to 32768. Changing
               this creates a new instance.
        :param _builtins.str type: Specifies the BMS data disk type, which must be one of available disk types,
               contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the data disk size, in GB. The value ranges form 10 to 32768. Changing
        this creates a new instance.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the BMS data disk type, which must be one of available disk types,
        contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 ip_address: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 port_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str subnet_id: Specifies the ID of subnet to attach to the instance.
        :param _builtins.str ip_address: Specifies a fixed IPv4 address to be used on this network.
        :param _builtins.str mac_address: The MAC address of the nic.
        :param _builtins.str port_id: The port ID corresponding to the IP address.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of subnet to attach to the instance.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies a fixed IPv4 address to be used on this network.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        The MAC address of the nic.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        The port ID corresponding to the IP address.
        """
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 cpu_arch: _builtins.str,
                 id: _builtins.str,
                 memory: _builtins.int,
                 operation: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.str cpu_arch: Specifies the CPU architecture of the BMS flavor.
               The value can be x86_64 and aarch64, defaults to **x86_64**.
        :param _builtins.str id: The id or name of the BMS flavor.
        :param _builtins.int memory: Specifies the memory size(GB) in the BMS flavor.
        :param _builtins.str operation: The operation status of the BMS flavor in an each AZs.
        :param _builtins.int vcpus: Specifies the number of vCPUs in the BMS flavor.
        """
        pulumi.set(__self__, "cpu_arch", cpu_arch)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="cpuArch")
    def cpu_arch(self) -> _builtins.str:
        """
        Specifies the CPU architecture of the BMS flavor.
        The value can be x86_64 and aarch64, defaults to **x86_64**.
        """
        return pulumi.get(self, "cpu_arch")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id or name of the BMS flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Specifies the memory size(GB) in the BMS flavor.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        The operation status of the BMS flavor in an each AZs.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies the number of vCPUs in the BMS flavor.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstancesServerResult(dict):
    def __init__(__self__, *,
                 agency_name: _builtins.str,
                 availability_zone: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 disk: _builtins.str,
                 disk_config: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavor_id: _builtins.str,
                 flavor_name: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 image_name: _builtins.str,
                 image_type: _builtins.str,
                 key_pair: _builtins.str,
                 launched_at: _builtins.str,
                 locked: _builtins.bool,
                 memory: _builtins.str,
                 name: _builtins.str,
                 nics: Sequence['outputs.GetInstancesServerNicResult'],
                 root_device_name: _builtins.str,
                 security_groups: Sequence[_builtins.str],
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 user_data: _builtins.str,
                 user_id: _builtins.str,
                 vcpus: _builtins.str,
                 vm_state: _builtins.str,
                 volumes_attacheds: Sequence['outputs.GetInstancesServerVolumesAttachedResult'],
                 vpc_id: _builtins.str):
        """
        :param _builtins.str agency_name: The IAM agency name which is created on IAM to provide temporary credentials for BMS
               to access cloud services.
        :param _builtins.str availability_zone: The availability zone in which to create the BMS instance.
        :param _builtins.str created_at: The creation time of the BMS instance.
        :param _builtins.str description: The description of the BMS instance.
        :param _builtins.str disk: The system disk size(GB) in the BMS flavor. The value `0` indicates that the disk size is not limited.
        :param _builtins.str disk_config: The disk configuration.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of BMS instance.
        :param _builtins.str flavor_id: Specifies the flavor ID of the desired flavor for the BMS instance.
        :param _builtins.str flavor_name: The name of the BMS flavor.
        :param _builtins.str id: The disk ID in UUID format.
        :param _builtins.str image_id: The image ID of the desired image for the BMS instance.
        :param _builtins.str image_name: The image name of the desired image for the BMS instance.
        :param _builtins.str image_type: The image type of the desired image for the BMS instance.
        :param _builtins.str key_pair: The name of a key pair for logging in to the BMS using key pair authentication.
        :param _builtins.str launched_at: The start time of the BMS instance.
        :param _builtins.bool locked: Whether the BMS instance is locked.
        :param _builtins.str memory: The memory size in GB.
        :param _builtins.str name: Specifies the name of the BMS instance.
        :param Sequence['GetInstancesServerNicArgs'] nics: The list of one or more networks to attach to the BMS instance.
               The nics structure is documented below.
        :param _builtins.str root_device_name: The device name of the BMS system disk.
        :param Sequence[_builtins.str] security_groups: The list of one or more security group IDs to associate with the BMS instance.
        :param _builtins.str status: Specifies the status of the instance.
               Value options are as follows:
               + **ACTIVE**: running, stopping, deleting.
               + **BUILD**: creating.
               + **ERROR**: faulty.
               + **HARD_REBOOT**: forcibly restarting.
               + **REBOOT**: restarting.
               + **SHUTOFF**: stopped, starting, deleting, rebuilding, reinstalling OS, OS reinstallation failed, frozen.
        :param Mapping[str, _builtins.str] tags: Specifies the BMS tags. The value can be: **__type_baremetal** or other custom tags.
        :param _builtins.str updated_at: The latest update time of the BMS instance.
        :param _builtins.str user_data: The user data to be injected during the BMS instance creation.
        :param _builtins.str user_id: The user ID.
        :param _builtins.str vcpus: The number of vCPUs.
        :param _builtins.str vm_state: The stable status of the BMS instance.
        :param Sequence['GetInstancesServerVolumesAttachedArgs'] volumes_attacheds: The list of disks attached to the BMS instance.
               The volumes_attached structure is documented below.
        :param _builtins.str vpc_id: The ID of vpc in which to create the BMS instance.
        """
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "disk_config", disk_config)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "flavor_name", flavor_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "key_pair", key_pair)
        pulumi.set(__self__, "launched_at", launched_at)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "root_device_name", root_device_name)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "vm_state", vm_state)
        pulumi.set(__self__, "volumes_attacheds", volumes_attacheds)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> _builtins.str:
        """
        The IAM agency name which is created on IAM to provide temporary credentials for BMS
        to access cloud services.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone in which to create the BMS instance.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the BMS instance.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the BMS instance.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.str:
        """
        The system disk size(GB) in the BMS flavor. The value `0` indicates that the disk size is not limited.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter(name="diskConfig")
    def disk_config(self) -> _builtins.str:
        """
        The disk configuration.
        """
        return pulumi.get(self, "disk_config")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of BMS instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        Specifies the flavor ID of the desired flavor for the BMS instance.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> _builtins.str:
        """
        The name of the BMS flavor.
        """
        return pulumi.get(self, "flavor_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image ID of the desired image for the BMS instance.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        The image name of the desired image for the BMS instance.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        The image type of the desired image for the BMS instance.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> _builtins.str:
        """
        The name of a key pair for logging in to the BMS using key pair authentication.
        """
        return pulumi.get(self, "key_pair")

    @_builtins.property
    @pulumi.getter(name="launchedAt")
    def launched_at(self) -> _builtins.str:
        """
        The start time of the BMS instance.
        """
        return pulumi.get(self, "launched_at")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        """
        Whether the BMS instance is locked.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory size in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the BMS instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetInstancesServerNicResult']:
        """
        The list of one or more networks to attach to the BMS instance.
        The nics structure is documented below.
        """
        return pulumi.get(self, "nics")

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> _builtins.str:
        """
        The device name of the BMS system disk.
        """
        return pulumi.get(self, "root_device_name")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        The list of one or more security group IDs to associate with the BMS instance.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the instance.
        Value options are as follows:
        + **ACTIVE**: running, stopping, deleting.
        + **BUILD**: creating.
        + **ERROR**: faulty.
        + **HARD_REBOOT**: forcibly restarting.
        + **REBOOT**: restarting.
        + **SHUTOFF**: stopped, starting, deleting, rebuilding, reinstalling OS, OS reinstallation failed, frozen.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the BMS tags. The value can be: **__type_baremetal** or other custom tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the BMS instance.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The user data to be injected during the BMS instance creation.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        The number of vCPUs.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> _builtins.str:
        """
        The stable status of the BMS instance.
        """
        return pulumi.get(self, "vm_state")

    @_builtins.property
    @pulumi.getter(name="volumesAttacheds")
    def volumes_attacheds(self) -> Sequence['outputs.GetInstancesServerVolumesAttachedResult']:
        """
        The list of disks attached to the BMS instance.
        The volumes_attached structure is documented below.
        """
        return pulumi.get(self, "volumes_attacheds")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of vpc in which to create the BMS instance.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstancesServerNicResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 mac_address: _builtins.str,
                 port_id: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str ip_address: The fixed IPv4 address to be used on this network.
        :param _builtins.str mac_address: The MAC address of the nic.
        :param _builtins.str port_id: The port ID corresponding to the IP address.
        :param _builtins.str subnet_id: The ID of subnet to attach to the BMS instance.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The fixed IPv4 address to be used on this network.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The MAC address of the nic.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        The port ID corresponding to the IP address.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of subnet to attach to the BMS instance.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancesServerVolumesAttachedResult(dict):
    def __init__(__self__, *,
                 boot_index: _builtins.str,
                 delete_on_termination: _builtins.str,
                 device: _builtins.str,
                 id: _builtins.str):
        """
        :param _builtins.str boot_index: Whether it is a boot disk. `0` specifies a boot disk, and `-1` specifies a non-boot disk.
        :param _builtins.str delete_on_termination: Whether to delete the disk when deleting the BMS.
        :param _builtins.str device: The device name of the disk.
        :param _builtins.str id: The disk ID in UUID format.
        """
        pulumi.set(__self__, "boot_index", boot_index)
        pulumi.set(__self__, "delete_on_termination", delete_on_termination)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> _builtins.str:
        """
        Whether it is a boot disk. `0` specifies a boot disk, and `-1` specifies a non-boot disk.
        """
        return pulumi.get(self, "boot_index")

    @_builtins.property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> _builtins.str:
        """
        Whether to delete the disk when deleting the BMS.
        """
        return pulumi.get(self, "delete_on_termination")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device name of the disk.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk ID in UUID format.
        """
        return pulumi.get(self, "id")


