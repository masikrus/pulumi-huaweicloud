# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceDataDiskArgs',
    'InstanceDataDiskArgsDict',
    'InstanceNicArgs',
    'InstanceNicArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceDataDiskArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        """
        Specifies the data disk size, in GB. The value ranges form 10 to 32768. Changing
        this creates a new instance.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the BMS data disk type, which must be one of available disk types,
        contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
        """
elif False:
    InstanceDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceDataDiskArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] size: Specifies the data disk size, in GB. The value ranges form 10 to 32768. Changing
               this creates a new instance.
        :param pulumi.Input[_builtins.str] type: Specifies the BMS data disk type, which must be one of available disk types,
               contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the data disk size, in GB. The value ranges form 10 to 32768. Changing
        this creates a new instance.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the BMS data disk type, which must be one of available disk types,
        contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceNicArgsDict(TypedDict):
        subnet_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of subnet to attach to the instance.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a fixed IPv4 address to be used on this network.
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MAC address of the nic.
        """
        port_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The port ID corresponding to the IP address.
        """
elif False:
    InstanceNicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceNicArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 port_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of subnet to attach to the instance.
        :param pulumi.Input[_builtins.str] ip_address: Specifies a fixed IPv4 address to be used on this network.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the nic.
        :param pulumi.Input[_builtins.str] port_id: The port ID corresponding to the IP address.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of subnet to attach to the instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a fixed IPv4 address to be used on this network.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the nic.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The port ID corresponding to the IP address.
        """
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_id", value)


