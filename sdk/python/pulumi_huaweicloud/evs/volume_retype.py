# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VolumeRetypeArgs', 'VolumeRetype']

@pulumi.input_type
class VolumeRetypeArgs:
    def __init__(__self__, *,
                 new_type: pulumi.Input[_builtins.str],
                 volume_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throughput: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VolumeRetype resource.
        :param pulumi.Input[_builtins.str] new_type: Specifies the cloud disk type which change to. Possible values are:
               + **SAS**: High I/O type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > The field has the following restrictions:
               <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
               fails.
               <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
               <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
               retyped to SAS.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the target volume ID for snapshot rollback.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] iops: Specifies the new maximum IOPS of the disk. This parameter is supported
               only for general purpose SSD V2 and extreme SSD V2 disks.
        :param pulumi.Input[_builtins.str] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when chargingMode is set to prePaid. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] throughput: Specifies the new maximum throughput of the disk, in the unit of
               MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        """
        pulumi.set(__self__, "new_type", new_type)
        pulumi.set(__self__, "volume_id", volume_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_auto_pay is not None:
            pulumi.set(__self__, "is_auto_pay", is_auto_pay)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @_builtins.property
    @pulumi.getter(name="newType")
    def new_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cloud disk type which change to. Possible values are:
        + **SAS**: High I/O type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > The field has the following restrictions:
        <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
        fails.
        <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
        <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
        retyped to SAS.
        """
        return pulumi.get(self, "new_type")

    @new_type.setter
    def new_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "new_type", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target volume ID for snapshot rollback.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the new maximum IOPS of the disk. This parameter is supported
        only for general purpose SSD V2 and extreme SSD V2 disks.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when chargingMode is set to prePaid. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.
        """
        return pulumi.get(self, "is_auto_pay")

    @is_auto_pay.setter
    def is_auto_pay(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_auto_pay", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the new maximum throughput of the disk, in the unit of
        MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "throughput", value)


@pulumi.input_type
class _VolumeRetypeState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 new_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throughput: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VolumeRetype resources.
        :param pulumi.Input[_builtins.str] iops: Specifies the new maximum IOPS of the disk. This parameter is supported
               only for general purpose SSD V2 and extreme SSD V2 disks.
        :param pulumi.Input[_builtins.str] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when chargingMode is set to prePaid. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
        :param pulumi.Input[_builtins.str] new_type: Specifies the cloud disk type which change to. Possible values are:
               + **SAS**: High I/O type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > The field has the following restrictions:
               <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
               fails.
               <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
               <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
               retyped to SAS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] throughput: Specifies the new maximum throughput of the disk, in the unit of
               MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the target volume ID for snapshot rollback.
               Changing this parameter will create a new resource.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_auto_pay is not None:
            pulumi.set(__self__, "is_auto_pay", is_auto_pay)
        if new_type is not None:
            pulumi.set(__self__, "new_type", new_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the new maximum IOPS of the disk. This parameter is supported
        only for general purpose SSD V2 and extreme SSD V2 disks.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when chargingMode is set to prePaid. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.
        """
        return pulumi.get(self, "is_auto_pay")

    @is_auto_pay.setter
    def is_auto_pay(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_auto_pay", value)

    @_builtins.property
    @pulumi.getter(name="newType")
    def new_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cloud disk type which change to. Possible values are:
        + **SAS**: High I/O type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > The field has the following restrictions:
        <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
        fails.
        <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
        <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
        retyped to SAS.
        """
        return pulumi.get(self, "new_type")

    @new_type.setter
    def new_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the new maximum throughput of the disk, in the unit of
        MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "throughput", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target volume ID for snapshot rollback.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Evs/volumeRetype:VolumeRetype")
class VolumeRetype(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 new_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throughput: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS volume retype resource within HuaweiCloud.

        > 1. The current resource is a one-time resource, and destroying this resource will not recover the volume type,
        >    but will only remove the resource information from the tfstate file.<br>2. The `new_type` parameters of this resource
        >    will affect other resource with `volume_type` parameter, such as `Evs.Volume`. You can handle the changes
        >    in the affected resource by `lifecycle.ignore_changes`.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] iops: Specifies the new maximum IOPS of the disk. This parameter is supported
               only for general purpose SSD V2 and extreme SSD V2 disks.
        :param pulumi.Input[_builtins.str] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when chargingMode is set to prePaid. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
        :param pulumi.Input[_builtins.str] new_type: Specifies the cloud disk type which change to. Possible values are:
               + **SAS**: High I/O type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > The field has the following restrictions:
               <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
               fails.
               <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
               <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
               retyped to SAS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] throughput: Specifies the new maximum throughput of the disk, in the unit of
               MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the target volume ID for snapshot rollback.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeRetypeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS volume retype resource within HuaweiCloud.

        > 1. The current resource is a one-time resource, and destroying this resource will not recover the volume type,
        >    but will only remove the resource information from the tfstate file.<br>2. The `new_type` parameters of this resource
        >    will affect other resource with `volume_type` parameter, such as `Evs.Volume`. You can handle the changes
        >    in the affected resource by `lifecycle.ignore_changes`.

        :param str resource_name: The name of the resource.
        :param VolumeRetypeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeRetypeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 new_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throughput: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeRetypeArgs.__new__(VolumeRetypeArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["iops"] = iops
            __props__.__dict__["is_auto_pay"] = is_auto_pay
            if new_type is None and not opts.urn:
                raise TypeError("Missing required property 'new_type'")
            __props__.__dict__["new_type"] = new_type
            __props__.__dict__["region"] = region
            __props__.__dict__["throughput"] = throughput
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
        super(VolumeRetype, __self__).__init__(
            'huaweicloud:Evs/volumeRetype:VolumeRetype',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.str]] = None,
            is_auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
            new_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            throughput: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VolumeRetype':
        """
        Get an existing VolumeRetype resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] iops: Specifies the new maximum IOPS of the disk. This parameter is supported
               only for general purpose SSD V2 and extreme SSD V2 disks.
        :param pulumi.Input[_builtins.str] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when chargingMode is set to prePaid. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
        :param pulumi.Input[_builtins.str] new_type: Specifies the cloud disk type which change to. Possible values are:
               + **SAS**: High I/O type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > The field has the following restrictions:
               <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
               fails.
               <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
               <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
               retyped to SAS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] throughput: Specifies the new maximum throughput of the disk, in the unit of
               MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the target volume ID for snapshot rollback.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeRetypeState.__new__(_VolumeRetypeState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["iops"] = iops
        __props__.__dict__["is_auto_pay"] = is_auto_pay
        __props__.__dict__["new_type"] = new_type
        __props__.__dict__["region"] = region
        __props__.__dict__["throughput"] = throughput
        __props__.__dict__["volume_id"] = volume_id
        return VolumeRetype(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the new maximum IOPS of the disk. This parameter is supported
        only for general purpose SSD V2 and extreme SSD V2 disks.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when chargingMode is set to prePaid. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.
        """
        return pulumi.get(self, "is_auto_pay")

    @_builtins.property
    @pulumi.getter(name="newType")
    def new_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cloud disk type which change to. Possible values are:
        + **SAS**: High I/O type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > The field has the following restrictions:
        <br/>1. When the specified cloud disk type does not exist in the availability_zone, the cloud disk type change
        fails.
        <br/>2. When the original type is SAS, it can be changed to any of the other types mentioned above.
        <br/>3. When the original type includes SSD, it can be retyped to other types including SSD, but cannot be
        retyped to SAS.
        """
        return pulumi.get(self, "new_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the new maximum throughput of the disk, in the unit of
        MiB/s. This parameter is supported only for general purpose SSD V2 disks.
        """
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target volume ID for snapshot rollback.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

