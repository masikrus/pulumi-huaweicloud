# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'SnapshotV5SnapshotChain',
    'VolumeAttachment',
    'VolumeIopsAttribute',
    'VolumeLink',
    'VolumeThroughputAttribute',
    'VolumeTransferV3Link',
    'VolumeV3Attachment',
    'VolumeV3IopsAttribute',
    'VolumeV3Link',
    'VolumeV3ThroughputAttribute',
    'VolumesBatchExpandVolume',
    'GetAvailabilityZonesAvailabilityZoneResult',
    'GetAvailabilityZonesV3AvailabilityZoneResult',
    'GetQuotasQuotaSetResult',
    'GetQuotasQuotaSetBackupResult',
    'GetQuotasQuotaSetBackupGigabyteResult',
    'GetQuotasQuotaSetGigabyteResult',
    'GetQuotasQuotaSetGigabytesEssdResult',
    'GetQuotasQuotaSetGigabytesGpssdResult',
    'GetQuotasQuotaSetGigabytesSaResult',
    'GetQuotasQuotaSetGigabytesSataResult',
    'GetQuotasQuotaSetGigabytesSsdResult',
    'GetQuotasQuotaSetPerVolumeGigabyteResult',
    'GetQuotasQuotaSetSnapshotResult',
    'GetQuotasQuotaSetSnapshotsEssdResult',
    'GetQuotasQuotaSetSnapshotsGpssdResult',
    'GetQuotasQuotaSetSnapshotsSaResult',
    'GetQuotasQuotaSetSnapshotsSataResult',
    'GetQuotasQuotaSetSnapshotsSsdResult',
    'GetQuotasQuotaSetVolumeResult',
    'GetQuotasQuotaSetVolumesEssdResult',
    'GetQuotasQuotaSetVolumesGpssdResult',
    'GetQuotasQuotaSetVolumesSaResult',
    'GetQuotasQuotaSetVolumesSataResult',
    'GetQuotasQuotaSetVolumesSsdResult',
    'GetQuotasV3QuotaSetResult',
    'GetQuotasV3QuotaSetBackupResult',
    'GetQuotasV3QuotaSetBackupGigabyteResult',
    'GetQuotasV3QuotaSetGigabyteResult',
    'GetQuotasV3QuotaSetGigabytesGpssdResult',
    'GetQuotasV3QuotaSetGigabytesSaResult',
    'GetQuotasV3QuotaSetGigabytesSataResult',
    'GetQuotasV3QuotaSetGigabytesSsdResult',
    'GetQuotasV3QuotaSetPerVolumeGigabyteResult',
    'GetQuotasV3QuotaSetSnapshotResult',
    'GetQuotasV3QuotaSetSnapshotsGpssdResult',
    'GetQuotasV3QuotaSetSnapshotsSaResult',
    'GetQuotasV3QuotaSetSnapshotsSataResult',
    'GetQuotasV3QuotaSetSnapshotsSsdResult',
    'GetQuotasV3QuotaSetVolumeResult',
    'GetQuotasV3QuotaSetVolumesGpssdResult',
    'GetQuotasV3QuotaSetVolumesSaResult',
    'GetQuotasV3QuotaSetVolumesSataResult',
    'GetQuotasV3QuotaSetVolumesSsdResult',
    'GetSnapshotChainsSnapshotChainResult',
    'GetSnapshotGroupsSnapshotGroupResult',
    'GetSnapshotGroupsTagsTagResult',
    'GetSnapshotsSnapshotResult',
    'GetSnapshotsTagsTagResult',
    'GetSnapshotsV3SnapshotResult',
    'GetSnapshotsV5SnapshotResult',
    'GetSnapshotsV5SnapshotSnapshotChainResult',
    'GetVolumeTagsTagResult',
    'GetVolumeTransferDetailsV3TransferResult',
    'GetVolumeTransferDetailsV3TransferLinkResult',
    'GetVolumeTransfersTransferResult',
    'GetVolumeTransfersV3TransferResult',
    'GetVolumeTransfersV3TransferLinkResult',
    'GetVolumeTypeDetailV3VolumeTypeResult',
    'GetVolumeTypeDetailV3VolumeTypeExtraSpecResult',
    'GetVolumeTypesTypeResult',
    'GetVolumeTypesTypeExtraSpecResult',
    'GetVolumeTypesV3VolumeTypeResult',
    'GetVolumeTypesV3VolumeTypeExtraSpecResult',
    'GetVolumesByTagsMatchResult',
    'GetVolumesByTagsResourceResult',
    'GetVolumesByTagsResourceResourceDetailResult',
    'GetVolumesByTagsResourceResourceDetailAttachmentResult',
    'GetVolumesByTagsResourceResourceDetailLinkResult',
    'GetVolumesByTagsResourceTagResult',
    'GetVolumesByTagsTagResult',
    'GetVolumesV3VolumeResult',
    'GetVolumesV3VolumeAttachmentResult',
    'GetVolumesV3VolumeIopResult',
    'GetVolumesV3VolumeLinkResult',
    'GetVolumesV3VolumeThroughputResult',
    'GetVolumesVolumeResult',
    'GetVolumesVolumeAttachmentResult',
    'GetVolumesVolumeIopsAttributeResult',
    'GetVolumesVolumeLinkResult',
    'GetVolumesVolumeThroughputAttributeResult',
]

@pulumi.output_type
class SnapshotV5SnapshotChain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "snapshotCount":
            suggest = "snapshot_count"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotV5SnapshotChain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotV5SnapshotChain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotV5SnapshotChain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 capacity: Optional[_builtins.int] = None,
                 category: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 snapshot_count: Optional[_builtins.int] = None,
                 updated_at: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str availability_zone: The AZ to which the snapshot chain belongs.
        :param _builtins.int capacity: The total size of the snapshot chain.
        :param _builtins.str category: The category of snapshot chain.
        :param _builtins.str created_at: The time when the snapshot chain was created.
        :param _builtins.str id: The snapshot chain ID.
        :param _builtins.int snapshot_count: The number of snapshots on the snapshot chain.
        :param _builtins.str updated_at: The time when the snapshot chain was updated.
        :param _builtins.str volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if snapshot_count is not None:
            pulumi.set(__self__, "snapshot_count", snapshot_count)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        The AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.int]:
        """
        The total size of the snapshot chain.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        """
        The category of snapshot chain.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The snapshot chain ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> Optional[_builtins.int]:
        """
        The number of snapshots on the snapshot chain.
        """
        return pulumi.get(self, "snapshot_count")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedAt":
            suggest = "attached_at"
        elif key == "attachedVolumeId":
            suggest = "attached_volume_id"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_at: Optional[_builtins.str] = None,
                 attached_volume_id: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attached_volume_id: The ID of the attached disk.
        :param _builtins.str device: The device name.
        :param _builtins.str host_name: The name of the physical host housing the cloud server to which the disk is attached.
        :param _builtins.str id: The ID of the attachment information.
        :param _builtins.str instance_id: The ID of the server to which the disk is attached.
        :param _builtins.str volume_id: The disk ID.
        """
        if attached_at is not None:
            pulumi.set(__self__, "attached_at", attached_at)
        if attached_volume_id is not None:
            pulumi.set(__self__, "attached_volume_id", attached_volume_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> Optional[_builtins.str]:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachedVolumeId")
    def attached_volume_id(self) -> Optional[_builtins.str]:
        """
        The ID of the attached disk.
        """
        return pulumi.get(self, "attached_volume_id")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        """
        The device name.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The name of the physical host housing the cloud server to which the disk is attached.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the server to which the disk is attached.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeIopsAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeIopsAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeIopsAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeIopsAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The ID of the attachment information.
        :param _builtins.int total_val: The throughput.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        """
        The throughput.
        """
        return pulumi.get(self, "total_val")


@pulumi.output_type
class VolumeLink(dict):
    def __init__(__self__, *,
                 href: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class VolumeThroughputAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeThroughputAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeThroughputAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeThroughputAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The ID of the attachment information.
        :param _builtins.int total_val: The throughput.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        """
        The throughput.
        """
        return pulumi.get(self, "total_val")


@pulumi.output_type
class VolumeTransferV3Link(dict):
    def __init__(__self__, *,
                 href: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class VolumeV3Attachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedAt":
            suggest = "attached_at"
        elif key == "attachmentId":
            suggest = "attachment_id"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "serverId":
            suggest = "server_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeV3Attachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeV3Attachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeV3Attachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_at: Optional[_builtins.str] = None,
                 attachment_id: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 server_id: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attachment_id: The ID of the attachment information.
        :param _builtins.str device: The device name.
        :param _builtins.str host_name: The name of the physical host housing the cloud server to which the disk is attached.
        :param _builtins.str id: The throughput ID.
        :param _builtins.str server_id: The ID of the server to which the disk is attached.
        :param _builtins.str volume_id: The disk ID.
        """
        if attached_at is not None:
            pulumi.set(__self__, "attached_at", attached_at)
        if attachment_id is not None:
            pulumi.set(__self__, "attachment_id", attachment_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> Optional[_builtins.str]:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> Optional[_builtins.str]:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        """
        The device name.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The name of the physical host housing the cloud server to which the disk is attached.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The throughput ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[_builtins.str]:
        """
        The ID of the server to which the disk is attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeV3IopsAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeV3IopsAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeV3IopsAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeV3IopsAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The throughput ID.
        :param _builtins.int total_val: The throughput.
        :param _builtins.str volume_id: The disk ID.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The throughput ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        """
        The throughput.
        """
        return pulumi.get(self, "total_val")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeV3Link(dict):
    def __init__(__self__, *,
                 href: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class VolumeV3ThroughputAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeV3ThroughputAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeV3ThroughputAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeV3ThroughputAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The throughput ID.
        :param _builtins.int total_val: The throughput.
        :param _builtins.str volume_id: The disk ID.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The throughput ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        """
        The throughput.
        """
        return pulumi.get(self, "total_val")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumesBatchExpandVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newSize":
            suggest = "new_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumesBatchExpandVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumesBatchExpandVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumesBatchExpandVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 new_size: _builtins.int):
        """
        :param _builtins.str id: Specifies the volume ID.
        :param _builtins.int new_size: Specifies the new size of the to-be-expanded volume, in GiB.
               Must be greater than the current size. The maximum disk size: Data disk: `32,768` GiB, System disk: `1,024` GiB
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "new_size", new_size)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the volume ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="newSize")
    def new_size(self) -> _builtins.int:
        """
        Specifies the new size of the to-be-expanded volume, in GiB.
        Must be greater than the current size. The maximum disk size: Data disk: `32,768` GiB, System disk: `1,024` GiB
        """
        return pulumi.get(self, "new_size")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 is_available: _builtins.bool,
                 name: _builtins.str):
        """
        :param _builtins.bool is_available: Whether the availability zone is available.
        :param _builtins.str name: The name of availability zone.
        """
        pulumi.set(__self__, "is_available", is_available)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> _builtins.bool:
        """
        Whether the availability zone is available.
        """
        return pulumi.get(self, "is_available")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of availability zone.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAvailabilityZonesV3AvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 is_available: _builtins.bool,
                 name: _builtins.str):
        """
        :param _builtins.bool is_available: Whether the availability zone is available.
        :param _builtins.str name: The name of availability zone.
        """
        pulumi.set(__self__, "is_available", is_available)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> _builtins.bool:
        """
        Whether the availability zone is available.
        """
        return pulumi.get(self, "is_available")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of availability zone.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetQuotasQuotaSetResult(dict):
    def __init__(__self__, *,
                 backup_gigabytes: Sequence['outputs.GetQuotasQuotaSetBackupGigabyteResult'],
                 backups: Sequence['outputs.GetQuotasQuotaSetBackupResult'],
                 gigabytes: Sequence['outputs.GetQuotasQuotaSetGigabyteResult'],
                 gigabytes_essds: Sequence['outputs.GetQuotasQuotaSetGigabytesEssdResult'],
                 gigabytes_gpssds: Sequence['outputs.GetQuotasQuotaSetGigabytesGpssdResult'],
                 gigabytes_sas: Sequence['outputs.GetQuotasQuotaSetGigabytesSaResult'],
                 gigabytes_satas: Sequence['outputs.GetQuotasQuotaSetGigabytesSataResult'],
                 gigabytes_ssds: Sequence['outputs.GetQuotasQuotaSetGigabytesSsdResult'],
                 id: _builtins.str,
                 per_volume_gigabytes: Sequence['outputs.GetQuotasQuotaSetPerVolumeGigabyteResult'],
                 snapshots: Sequence['outputs.GetQuotasQuotaSetSnapshotResult'],
                 snapshots_essds: Sequence['outputs.GetQuotasQuotaSetSnapshotsEssdResult'],
                 snapshots_gpssds: Sequence['outputs.GetQuotasQuotaSetSnapshotsGpssdResult'],
                 snapshots_sas: Sequence['outputs.GetQuotasQuotaSetSnapshotsSaResult'],
                 snapshots_satas: Sequence['outputs.GetQuotasQuotaSetSnapshotsSataResult'],
                 snapshots_ssds: Sequence['outputs.GetQuotasQuotaSetSnapshotsSsdResult'],
                 volumes: Sequence['outputs.GetQuotasQuotaSetVolumeResult'],
                 volumes_essds: Sequence['outputs.GetQuotasQuotaSetVolumesEssdResult'],
                 volumes_gpssds: Sequence['outputs.GetQuotasQuotaSetVolumesGpssdResult'],
                 volumes_sas: Sequence['outputs.GetQuotasQuotaSetVolumesSaResult'],
                 volumes_satas: Sequence['outputs.GetQuotasQuotaSetVolumesSataResult'],
                 volumes_ssds: Sequence['outputs.GetQuotasQuotaSetVolumesSsdResult']):
        """
        :param Sequence['GetQuotasQuotaSetBackupGigabyteArgs'] backup_gigabytes: The backup size, in GiB.
        :param Sequence['GetQuotasQuotaSetBackupArgs'] backups: The number of backups.
        :param Sequence['GetQuotasQuotaSetGigabyteArgs'] gigabytes: The total capacity, in GiB.
        :param Sequence['GetQuotasQuotaSetGigabytesEssdArgs'] gigabytes_essds: The capacity (GiB) for extreme SSD disks.
        :param Sequence['GetQuotasQuotaSetGigabytesGpssdArgs'] gigabytes_gpssds: The capacity (GiB) for general purpose SSD disks.
        :param Sequence['GetQuotasQuotaSetGigabytesSaArgs'] gigabytes_sas: The capacity (GiB) for high I/O disks.
        :param Sequence['GetQuotasQuotaSetGigabytesSataArgs'] gigabytes_satas: The capacity (GiB) for common I/O disks.
        :param Sequence['GetQuotasQuotaSetGigabytesSsdArgs'] gigabytes_ssds: The capacity (GiB) for ultra-high I/O disks.
        :param _builtins.str id: The project ID.
        :param Sequence['GetQuotasQuotaSetPerVolumeGigabyteArgs'] per_volume_gigabytes: The capacity quota of a disk.
        :param Sequence['GetQuotasQuotaSetSnapshotArgs'] snapshots: The number of snapshots.
        :param Sequence['GetQuotasQuotaSetSnapshotsEssdArgs'] snapshots_essds: The number of snapshots for extreme SSD disks.
        :param Sequence['GetQuotasQuotaSetSnapshotsGpssdArgs'] snapshots_gpssds: The number of snapshots for general purpose SSD disks.
        :param Sequence['GetQuotasQuotaSetSnapshotsSaArgs'] snapshots_sas: The number of snapshots for high I/O disks.
        :param Sequence['GetQuotasQuotaSetSnapshotsSataArgs'] snapshots_satas: The number of snapshots for common I/O disks.
        :param Sequence['GetQuotasQuotaSetSnapshotsSsdArgs'] snapshots_ssds: The number of snapshots for ultra-high I/O disks.
        :param Sequence['GetQuotasQuotaSetVolumeArgs'] volumes: The number of disks.
        :param Sequence['GetQuotasQuotaSetVolumesEssdArgs'] volumes_essds: The number of extreme SSD disks.
        :param Sequence['GetQuotasQuotaSetVolumesGpssdArgs'] volumes_gpssds: The number of general purpose SSD disks.
        :param Sequence['GetQuotasQuotaSetVolumesSaArgs'] volumes_sas: The number of high I/O disks.
        :param Sequence['GetQuotasQuotaSetVolumesSataArgs'] volumes_satas: The number of common I/O disks.
        :param Sequence['GetQuotasQuotaSetVolumesSsdArgs'] volumes_ssds: The number of ultra-high I/O disks.
        """
        pulumi.set(__self__, "backup_gigabytes", backup_gigabytes)
        pulumi.set(__self__, "backups", backups)
        pulumi.set(__self__, "gigabytes", gigabytes)
        pulumi.set(__self__, "gigabytes_essds", gigabytes_essds)
        pulumi.set(__self__, "gigabytes_gpssds", gigabytes_gpssds)
        pulumi.set(__self__, "gigabytes_sas", gigabytes_sas)
        pulumi.set(__self__, "gigabytes_satas", gigabytes_satas)
        pulumi.set(__self__, "gigabytes_ssds", gigabytes_ssds)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "per_volume_gigabytes", per_volume_gigabytes)
        pulumi.set(__self__, "snapshots", snapshots)
        pulumi.set(__self__, "snapshots_essds", snapshots_essds)
        pulumi.set(__self__, "snapshots_gpssds", snapshots_gpssds)
        pulumi.set(__self__, "snapshots_sas", snapshots_sas)
        pulumi.set(__self__, "snapshots_satas", snapshots_satas)
        pulumi.set(__self__, "snapshots_ssds", snapshots_ssds)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "volumes_essds", volumes_essds)
        pulumi.set(__self__, "volumes_gpssds", volumes_gpssds)
        pulumi.set(__self__, "volumes_sas", volumes_sas)
        pulumi.set(__self__, "volumes_satas", volumes_satas)
        pulumi.set(__self__, "volumes_ssds", volumes_ssds)

    @_builtins.property
    @pulumi.getter(name="backupGigabytes")
    def backup_gigabytes(self) -> Sequence['outputs.GetQuotasQuotaSetBackupGigabyteResult']:
        """
        The backup size, in GiB.
        """
        return pulumi.get(self, "backup_gigabytes")

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetQuotasQuotaSetBackupResult']:
        """
        The number of backups.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter
    def gigabytes(self) -> Sequence['outputs.GetQuotasQuotaSetGigabyteResult']:
        """
        The total capacity, in GiB.
        """
        return pulumi.get(self, "gigabytes")

    @_builtins.property
    @pulumi.getter(name="gigabytesEssds")
    def gigabytes_essds(self) -> Sequence['outputs.GetQuotasQuotaSetGigabytesEssdResult']:
        """
        The capacity (GiB) for extreme SSD disks.
        """
        return pulumi.get(self, "gigabytes_essds")

    @_builtins.property
    @pulumi.getter(name="gigabytesGpssds")
    def gigabytes_gpssds(self) -> Sequence['outputs.GetQuotasQuotaSetGigabytesGpssdResult']:
        """
        The capacity (GiB) for general purpose SSD disks.
        """
        return pulumi.get(self, "gigabytes_gpssds")

    @_builtins.property
    @pulumi.getter(name="gigabytesSas")
    def gigabytes_sas(self) -> Sequence['outputs.GetQuotasQuotaSetGigabytesSaResult']:
        """
        The capacity (GiB) for high I/O disks.
        """
        return pulumi.get(self, "gigabytes_sas")

    @_builtins.property
    @pulumi.getter(name="gigabytesSatas")
    def gigabytes_satas(self) -> Sequence['outputs.GetQuotasQuotaSetGigabytesSataResult']:
        """
        The capacity (GiB) for common I/O disks.
        """
        return pulumi.get(self, "gigabytes_satas")

    @_builtins.property
    @pulumi.getter(name="gigabytesSsds")
    def gigabytes_ssds(self) -> Sequence['outputs.GetQuotasQuotaSetGigabytesSsdResult']:
        """
        The capacity (GiB) for ultra-high I/O disks.
        """
        return pulumi.get(self, "gigabytes_ssds")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="perVolumeGigabytes")
    def per_volume_gigabytes(self) -> Sequence['outputs.GetQuotasQuotaSetPerVolumeGigabyteResult']:
        """
        The capacity quota of a disk.
        """
        return pulumi.get(self, "per_volume_gigabytes")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotResult']:
        """
        The number of snapshots.
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter(name="snapshotsEssds")
    def snapshots_essds(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotsEssdResult']:
        """
        The number of snapshots for extreme SSD disks.
        """
        return pulumi.get(self, "snapshots_essds")

    @_builtins.property
    @pulumi.getter(name="snapshotsGpssds")
    def snapshots_gpssds(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotsGpssdResult']:
        """
        The number of snapshots for general purpose SSD disks.
        """
        return pulumi.get(self, "snapshots_gpssds")

    @_builtins.property
    @pulumi.getter(name="snapshotsSas")
    def snapshots_sas(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotsSaResult']:
        """
        The number of snapshots for high I/O disks.
        """
        return pulumi.get(self, "snapshots_sas")

    @_builtins.property
    @pulumi.getter(name="snapshotsSatas")
    def snapshots_satas(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotsSataResult']:
        """
        The number of snapshots for common I/O disks.
        """
        return pulumi.get(self, "snapshots_satas")

    @_builtins.property
    @pulumi.getter(name="snapshotsSsds")
    def snapshots_ssds(self) -> Sequence['outputs.GetQuotasQuotaSetSnapshotsSsdResult']:
        """
        The number of snapshots for ultra-high I/O disks.
        """
        return pulumi.get(self, "snapshots_ssds")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetQuotasQuotaSetVolumeResult']:
        """
        The number of disks.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="volumesEssds")
    def volumes_essds(self) -> Sequence['outputs.GetQuotasQuotaSetVolumesEssdResult']:
        """
        The number of extreme SSD disks.
        """
        return pulumi.get(self, "volumes_essds")

    @_builtins.property
    @pulumi.getter(name="volumesGpssds")
    def volumes_gpssds(self) -> Sequence['outputs.GetQuotasQuotaSetVolumesGpssdResult']:
        """
        The number of general purpose SSD disks.
        """
        return pulumi.get(self, "volumes_gpssds")

    @_builtins.property
    @pulumi.getter(name="volumesSas")
    def volumes_sas(self) -> Sequence['outputs.GetQuotasQuotaSetVolumesSaResult']:
        """
        The number of high I/O disks.
        """
        return pulumi.get(self, "volumes_sas")

    @_builtins.property
    @pulumi.getter(name="volumesSatas")
    def volumes_satas(self) -> Sequence['outputs.GetQuotasQuotaSetVolumesSataResult']:
        """
        The number of common I/O disks.
        """
        return pulumi.get(self, "volumes_satas")

    @_builtins.property
    @pulumi.getter(name="volumesSsds")
    def volumes_ssds(self) -> Sequence['outputs.GetQuotasQuotaSetVolumesSsdResult']:
        """
        The number of ultra-high I/O disks.
        """
        return pulumi.get(self, "volumes_ssds")


@pulumi.output_type
class GetQuotasQuotaSetBackupResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetBackupGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabytesEssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabytesGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabytesSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabytesSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetGigabytesSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetPerVolumeGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotsEssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotsGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotsSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotsSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetSnapshotsSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumeResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumesEssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumesGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumesSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumesSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasQuotaSetVolumesSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int,
                 reserved: _builtins.int):
        """
        :param _builtins.int in_use: The used quota.
        :param _builtins.int limit: The maximum quota.
        :param _builtins.int reserved: The reserved field.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        The used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def reserved(self) -> _builtins.int:
        """
        The reserved field.
        """
        return pulumi.get(self, "reserved")


@pulumi.output_type
class GetQuotasV3QuotaSetResult(dict):
    def __init__(__self__, *,
                 backup_gigabytes: Sequence['outputs.GetQuotasV3QuotaSetBackupGigabyteResult'],
                 backups: Sequence['outputs.GetQuotasV3QuotaSetBackupResult'],
                 gigabytes: Sequence['outputs.GetQuotasV3QuotaSetGigabyteResult'],
                 gigabytes_gpssds: Sequence['outputs.GetQuotasV3QuotaSetGigabytesGpssdResult'],
                 gigabytes_sas: Sequence['outputs.GetQuotasV3QuotaSetGigabytesSaResult'],
                 gigabytes_satas: Sequence['outputs.GetQuotasV3QuotaSetGigabytesSataResult'],
                 gigabytes_ssds: Sequence['outputs.GetQuotasV3QuotaSetGigabytesSsdResult'],
                 per_volume_gigabytes: Sequence['outputs.GetQuotasV3QuotaSetPerVolumeGigabyteResult'],
                 snapshots: Sequence['outputs.GetQuotasV3QuotaSetSnapshotResult'],
                 snapshots_gpssds: Sequence['outputs.GetQuotasV3QuotaSetSnapshotsGpssdResult'],
                 snapshots_sas: Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSaResult'],
                 snapshots_satas: Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSataResult'],
                 snapshots_ssds: Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSsdResult'],
                 volumes: Sequence['outputs.GetQuotasV3QuotaSetVolumeResult'],
                 volumes_gpssds: Sequence['outputs.GetQuotasV3QuotaSetVolumesGpssdResult'],
                 volumes_sas: Sequence['outputs.GetQuotasV3QuotaSetVolumesSaResult'],
                 volumes_satas: Sequence['outputs.GetQuotasV3QuotaSetVolumesSataResult'],
                 volumes_ssds: Sequence['outputs.GetQuotasV3QuotaSetVolumesSsdResult']):
        """
        :param Sequence['GetQuotasV3QuotaSetBackupGigabyteArgs'] backup_gigabytes: The backup size, in GiB.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetBackupArgs'] backups: The number of backups.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetGigabyteArgs'] gigabytes: The total capacity, in GiB.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetGigabytesGpssdArgs'] gigabytes_gpssds: The capacity (GiB) for general purpose ssd disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetGigabytesSaArgs'] gigabytes_sas: The capacity (GiB) for high I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetGigabytesSataArgs'] gigabytes_satas: The capacity (GiB) for common I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetGigabytesSsdArgs'] gigabytes_ssds: The capacity (GiB) for ultra - high I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetPerVolumeGigabyteArgs'] per_volume_gigabytes: The capacity quota of a disk.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetSnapshotArgs'] snapshots: The number of snapshots.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetSnapshotsGpssdArgs'] snapshots_gpssds: The number of snapshots for general purpose ssd disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetSnapshotsSaArgs'] snapshots_sas: The number of snapshots for high I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetSnapshotsSataArgs'] snapshots_satas: The number of snapshots for common I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetSnapshotsSsdArgs'] snapshots_ssds: The number of snapshots for ultra - high I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetVolumeArgs'] volumes: The number of disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetVolumesGpssdArgs'] volumes_gpssds: The number of general purpose ssd disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetVolumesSaArgs'] volumes_sas: The number of high I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetVolumesSataArgs'] volumes_satas: The number of common I/O disks.
               The quota_set_sub structure is documented below.
        :param Sequence['GetQuotasV3QuotaSetVolumesSsdArgs'] volumes_ssds: The number of ultra - high I/O disks.
               The quota_set_sub structure is documented below.
        """
        pulumi.set(__self__, "backup_gigabytes", backup_gigabytes)
        pulumi.set(__self__, "backups", backups)
        pulumi.set(__self__, "gigabytes", gigabytes)
        pulumi.set(__self__, "gigabytes_gpssds", gigabytes_gpssds)
        pulumi.set(__self__, "gigabytes_sas", gigabytes_sas)
        pulumi.set(__self__, "gigabytes_satas", gigabytes_satas)
        pulumi.set(__self__, "gigabytes_ssds", gigabytes_ssds)
        pulumi.set(__self__, "per_volume_gigabytes", per_volume_gigabytes)
        pulumi.set(__self__, "snapshots", snapshots)
        pulumi.set(__self__, "snapshots_gpssds", snapshots_gpssds)
        pulumi.set(__self__, "snapshots_sas", snapshots_sas)
        pulumi.set(__self__, "snapshots_satas", snapshots_satas)
        pulumi.set(__self__, "snapshots_ssds", snapshots_ssds)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "volumes_gpssds", volumes_gpssds)
        pulumi.set(__self__, "volumes_sas", volumes_sas)
        pulumi.set(__self__, "volumes_satas", volumes_satas)
        pulumi.set(__self__, "volumes_ssds", volumes_ssds)

    @_builtins.property
    @pulumi.getter(name="backupGigabytes")
    def backup_gigabytes(self) -> Sequence['outputs.GetQuotasV3QuotaSetBackupGigabyteResult']:
        """
        The backup size, in GiB.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "backup_gigabytes")

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetQuotasV3QuotaSetBackupResult']:
        """
        The number of backups.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter
    def gigabytes(self) -> Sequence['outputs.GetQuotasV3QuotaSetGigabyteResult']:
        """
        The total capacity, in GiB.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "gigabytes")

    @_builtins.property
    @pulumi.getter(name="gigabytesGpssds")
    def gigabytes_gpssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetGigabytesGpssdResult']:
        """
        The capacity (GiB) for general purpose ssd disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "gigabytes_gpssds")

    @_builtins.property
    @pulumi.getter(name="gigabytesSas")
    def gigabytes_sas(self) -> Sequence['outputs.GetQuotasV3QuotaSetGigabytesSaResult']:
        """
        The capacity (GiB) for high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "gigabytes_sas")

    @_builtins.property
    @pulumi.getter(name="gigabytesSatas")
    def gigabytes_satas(self) -> Sequence['outputs.GetQuotasV3QuotaSetGigabytesSataResult']:
        """
        The capacity (GiB) for common I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "gigabytes_satas")

    @_builtins.property
    @pulumi.getter(name="gigabytesSsds")
    def gigabytes_ssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetGigabytesSsdResult']:
        """
        The capacity (GiB) for ultra - high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "gigabytes_ssds")

    @_builtins.property
    @pulumi.getter(name="perVolumeGigabytes")
    def per_volume_gigabytes(self) -> Sequence['outputs.GetQuotasV3QuotaSetPerVolumeGigabyteResult']:
        """
        The capacity quota of a disk.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "per_volume_gigabytes")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetQuotasV3QuotaSetSnapshotResult']:
        """
        The number of snapshots.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter(name="snapshotsGpssds")
    def snapshots_gpssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetSnapshotsGpssdResult']:
        """
        The number of snapshots for general purpose ssd disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "snapshots_gpssds")

    @_builtins.property
    @pulumi.getter(name="snapshotsSas")
    def snapshots_sas(self) -> Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSaResult']:
        """
        The number of snapshots for high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "snapshots_sas")

    @_builtins.property
    @pulumi.getter(name="snapshotsSatas")
    def snapshots_satas(self) -> Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSataResult']:
        """
        The number of snapshots for common I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "snapshots_satas")

    @_builtins.property
    @pulumi.getter(name="snapshotsSsds")
    def snapshots_ssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetSnapshotsSsdResult']:
        """
        The number of snapshots for ultra - high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "snapshots_ssds")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetQuotasV3QuotaSetVolumeResult']:
        """
        The number of disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="volumesGpssds")
    def volumes_gpssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetVolumesGpssdResult']:
        """
        The number of general purpose ssd disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "volumes_gpssds")

    @_builtins.property
    @pulumi.getter(name="volumesSas")
    def volumes_sas(self) -> Sequence['outputs.GetQuotasV3QuotaSetVolumesSaResult']:
        """
        The number of high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "volumes_sas")

    @_builtins.property
    @pulumi.getter(name="volumesSatas")
    def volumes_satas(self) -> Sequence['outputs.GetQuotasV3QuotaSetVolumesSataResult']:
        """
        The number of common I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "volumes_satas")

    @_builtins.property
    @pulumi.getter(name="volumesSsds")
    def volumes_ssds(self) -> Sequence['outputs.GetQuotasV3QuotaSetVolumesSsdResult']:
        """
        The number of ultra - high I/O disks.
        The quota_set_sub structure is documented below.
        """
        return pulumi.get(self, "volumes_ssds")


@pulumi.output_type
class GetQuotasV3QuotaSetBackupResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetBackupGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetGigabytesGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetGigabytesSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetGigabytesSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetGigabytesSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetPerVolumeGigabyteResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetSnapshotResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetSnapshotsGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetSnapshotsSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetSnapshotsSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetSnapshotsSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetVolumeResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetVolumesGpssdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetVolumesSaResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetVolumesSataResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetQuotasV3QuotaSetVolumesSsdResult(dict):
    def __init__(__self__, *,
                 in_use: _builtins.int,
                 limit: _builtins.int):
        """
        :param _builtins.int in_use: Used quota.
        :param _builtins.int limit: Maximum quota.
        """
        pulumi.set(__self__, "in_use", in_use)
        pulumi.set(__self__, "limit", limit)

    @_builtins.property
    @pulumi.getter(name="inUse")
    def in_use(self) -> _builtins.int:
        """
        Used quota.
        """
        return pulumi.get(self, "in_use")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Maximum quota.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetSnapshotChainsSnapshotChainResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 capacity: _builtins.int,
                 category: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 snapshot_count: _builtins.int,
                 updated_at: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str availability_zone: The AZ to which the snapshot chain belongs.
        :param _builtins.int capacity: The total size of the snapshot chain.
        :param _builtins.str category: Specifies the category of snapshot chain.
               The valid values are **standard**, **backup** and **server_backup**.
        :param _builtins.str created_at: The time when the snapshot chain was created.
        :param _builtins.str id: Specifies the snapshot chain ID.
        :param _builtins.int snapshot_count: The number of snapshots on the snapshot chain.
        :param _builtins.str updated_at: The time when the snapshot chain was updated.
        :param _builtins.str volume_id: Specifies the disk ID to which the snapshot chains belong.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> _builtins.int:
        """
        The total size of the snapshot chain.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category of snapshot chain.
        The valid values are **standard**, **backup** and **server_backup**.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the snapshot chain ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> _builtins.int:
        """
        The number of snapshots on the snapshot chain.
        """
        return pulumi.get(self, "snapshot_count")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the disk ID to which the snapshot chains belong.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetSnapshotGroupsSnapshotGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 server_id: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The time when the snapshot group was created.
        :param _builtins.str description: The snapshot group description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
        :param _builtins.str id: Specifies the snapshot group ID.
        :param _builtins.str name: Specifies the snapshot group name.
        :param _builtins.str server_id: Specifies the server ID to which the snapshot group are attached.
        :param _builtins.str status: Specifies the snapshot group status.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs used to filter results. The value is in the following
               format: **[{"key":"key1","value":"value1"}]**
        :param _builtins.str updated_at: The time when the snapshot group was updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the snapshot group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The snapshot group description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID for filtering.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the snapshot group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the snapshot group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the server ID to which the snapshot group are attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the snapshot group status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs used to filter results. The value is in the following
        format: **[{"key":"key1","value":"value1"}]**
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the snapshot group was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSnapshotGroupsTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 dedicated_storage_id: _builtins.str,
                 dedicated_storage_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 metadata: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 progress: _builtins.str,
                 service_type: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str created_at: The cloudvolume snapshot creation time.
        :param _builtins.str dedicated_storage_id: The ID of the dedicated storage.
        :param _builtins.str dedicated_storage_name: The name of the dedicated storage.
        :param _builtins.str description: The cloudvolume snapshot description information.
        :param _builtins.str id: The data source ID of EVS cloudvolume snapshot.
        :param Mapping[str, _builtins.str] metadata: The user-defined metadata key-value pair.
        :param _builtins.str name: The name of cloudvolume snapshot. Maximum supported is 64 characters.
        :param _builtins.str progress: The snapshot creation progress.
        :param _builtins.str service_type: Service type. Only **EVS**, **DSS**, and **DESS** are supported.
        :param _builtins.int size: The cloudvolume snapshot size. Unit is GiB.
        :param _builtins.str status: The status of cloudvolume snapshot. Valid values are as follows:
               + **creating**: The cloudvolume snapshot is in the process of being created.
               + **available**: The cloudvolume snapshot is created successfully and can be used.
               + **error**: An error occurred during the creation process of the cloudvolume snapshot.
               + **deleting**: The cloudvolume snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the cloudvolume snapshot.
               + **rollbacking**: The cloudvolume snapshot is in the process of rolling back data.
               + **backing-up**: The status of the following two snapshots is **backing_up**:
               The snapshots that can create backup directly through the OpenStack native API.
               The snapshots created automatically during the process of creating a backup.
        :param _builtins.str updated_at: The cloudvolume snapshot update time.
        :param _builtins.str volume_id: The ID of the cloudvolume to which the snapshot belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The cloudvolume snapshot creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> _builtins.str:
        """
        The ID of the dedicated storage.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> _builtins.str:
        """
        The name of the dedicated storage.
        """
        return pulumi.get(self, "dedicated_storage_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The cloudvolume snapshot description information.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data source ID of EVS cloudvolume snapshot.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The user-defined metadata key-value pair.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of cloudvolume snapshot. Maximum supported is 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        The snapshot creation progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service type. Only **EVS**, **DSS**, and **DESS** are supported.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The cloudvolume snapshot size. Unit is GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of cloudvolume snapshot. Valid values are as follows:
        + **creating**: The cloudvolume snapshot is in the process of being created.
        + **available**: The cloudvolume snapshot is created successfully and can be used.
        + **error**: An error occurred during the creation process of the cloudvolume snapshot.
        + **deleting**: The cloudvolume snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the cloudvolume snapshot.
        + **rollbacking**: The cloudvolume snapshot is in the process of rolling back data.
        + **backing-up**: The status of the following two snapshots is **backing_up**:
        The snapshots that can create backup directly through the OpenStack native API.
        The snapshots created automatically during the process of creating a backup.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The cloudvolume snapshot update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the cloudvolume to which the snapshot belongs.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetSnapshotsTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotsV3SnapshotResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 metadata: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str created_at: The time when the snapshot was created.
        :param _builtins.str description: The description of the snapshot.
        :param _builtins.str id: The ID of the snapshot.
        :param Mapping[str, _builtins.str] metadata: The user-defined metadata key-value pair.
        :param _builtins.str name: Specifies the name of the snapshots. Supports a maximum of `255` characters. This field
               will undergo a fuzzy matching query, the query result is for all snapshots whose names contain this value.
        :param _builtins.int size: The size of the snapshot in GiB.
        :param _builtins.str status: Specifies the status of the snapshots.  
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param _builtins.str updated_at: The time when the snapshot was updated.
        :param _builtins.str volume_id: Specifies the disk ID corresponding to the snapshots.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the snapshot.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The user-defined metadata key-value pair.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the snapshots. Supports a maximum of `255` characters. This field
        will undergo a fuzzy matching query, the query result is for all snapshots whose names contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the snapshot in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the snapshots.  
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the snapshot was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the disk ID corresponding to the snapshots.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetSnapshotsV5SnapshotResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 category: _builtins.str,
                 cmk_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 encrypt_algorithm: _builtins.str,
                 encrypted: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 incremental: _builtins.bool,
                 instant_access: _builtins.bool,
                 instant_access_retention_at: _builtins.str,
                 name: _builtins.str,
                 progress: _builtins.str,
                 retention_at: _builtins.str,
                 size: _builtins.int,
                 snapshot_chains: Sequence['outputs.GetSnapshotsV5SnapshotSnapshotChainResult'],
                 snapshot_group_id: _builtins.str,
                 snapshot_type: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Specifies the AZ to which the snapshot chain belongs.
        :param _builtins.str category: The category of snapshot chain.
        :param _builtins.str cmk_id: The custom key for the disk id to which the encrypted snapshot belongs.
        :param _builtins.str created_at: The time when the snapshot chain was created.
        :param _builtins.str description: The snapshot description.
        :param _builtins.str encrypt_algorithm: The algorithm of the encrypted snapshot.
        :param _builtins.bool encrypted: Whether the snapshot is encrypted.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
        :param _builtins.str id: Specifies the snapshot ID.
        :param _builtins.bool incremental: Whether the snapshot is incremental snapshot.
        :param _builtins.bool instant_access: Whether the snapshot high-speed availability function is enabled. Possible values as follows:
               + **true**: Enable. Only SSD series cloud disks support this function.
               + **false**: Disable. The snapshot is an existing snapshot without the snapshot high-speed availability function enabled.
        :param _builtins.str instant_access_retention_at: The retention time of the snapshot high-speed availability function. After the
               retention time expires, the snapshot high-speed availability function will be automatically disabled.
        :param _builtins.str name: Specifies the snapshot name.
        :param _builtins.str progress: The snapshot creation progress.
        :param _builtins.str retention_at: The time which the snapshot ID retention at.
        :param _builtins.int size: The total size of the snapshot, in GiB.
        :param Sequence['GetSnapshotsV5SnapshotSnapshotChainArgs'] snapshot_chains: The snapshot chain list to which the snapshot belongs.
               The snapshot_chains structure is documented below.
        :param _builtins.str snapshot_group_id: Specifies the snapshot group ID.
        :param _builtins.str snapshot_type: Specifies the snapshot type.
        :param _builtins.str status: Specifies the snapshot status.
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs used to filter results. The value is in the following
               format: **{"key1":"value1"}**
        :param _builtins.str updated_at: The time when the snapshot chain was updated.
        :param _builtins.str volume_id: Specifies the ID of disk to which the snapshot belongs.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cmk_id", cmk_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encrypt_algorithm", encrypt_algorithm)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "instant_access", instant_access)
        pulumi.set(__self__, "instant_access_retention_at", instant_access_retention_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "retention_at", retention_at)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_chains", snapshot_chains)
        pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        pulumi.set(__self__, "snapshot_type", snapshot_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The category of snapshot chain.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> _builtins.str:
        """
        The custom key for the disk id to which the encrypted snapshot belongs.
        """
        return pulumi.get(self, "cmk_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The snapshot description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="encryptAlgorithm")
    def encrypt_algorithm(self) -> _builtins.str:
        """
        The algorithm of the encrypted snapshot.
        """
        return pulumi.get(self, "encrypt_algorithm")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the snapshot is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID for filtering.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the snapshot ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether the snapshot is incremental snapshot.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="instantAccess")
    def instant_access(self) -> _builtins.bool:
        """
        Whether the snapshot high-speed availability function is enabled. Possible values as follows:
        + **true**: Enable. Only SSD series cloud disks support this function.
        + **false**: Disable. The snapshot is an existing snapshot without the snapshot high-speed availability function enabled.
        """
        return pulumi.get(self, "instant_access")

    @_builtins.property
    @pulumi.getter(name="instantAccessRetentionAt")
    def instant_access_retention_at(self) -> _builtins.str:
        """
        The retention time of the snapshot high-speed availability function. After the
        retention time expires, the snapshot high-speed availability function will be automatically disabled.
        """
        return pulumi.get(self, "instant_access_retention_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the snapshot name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        The snapshot creation progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="retentionAt")
    def retention_at(self) -> _builtins.str:
        """
        The time which the snapshot ID retention at.
        """
        return pulumi.get(self, "retention_at")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The total size of the snapshot, in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotChains")
    def snapshot_chains(self) -> Sequence['outputs.GetSnapshotsV5SnapshotSnapshotChainResult']:
        """
        The snapshot chain list to which the snapshot belongs.
        The snapshot_chains structure is documented below.
        """
        return pulumi.get(self, "snapshot_chains")

    @_builtins.property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> _builtins.str:
        """
        Specifies the snapshot group ID.
        """
        return pulumi.get(self, "snapshot_group_id")

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> _builtins.str:
        """
        Specifies the snapshot type.
        """
        return pulumi.get(self, "snapshot_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the snapshot status.
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs used to filter results. The value is in the following
        format: **{"key1":"value1"}**
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the ID of disk to which the snapshot belongs.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetSnapshotsV5SnapshotSnapshotChainResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 capacity: _builtins.int,
                 category: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 snapshot_count: _builtins.int,
                 updated_at: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Specifies the AZ to which the snapshot chain belongs.
        :param _builtins.int capacity: The total size of the snapshot chain.
        :param _builtins.str category: The category of snapshot chain.
        :param _builtins.str created_at: The time when the snapshot chain was created.
        :param _builtins.str id: Specifies the snapshot ID.
        :param _builtins.int snapshot_count: The number of snapshots on the snapshot chain.
        :param _builtins.str updated_at: The time when the snapshot chain was updated.
        :param _builtins.str volume_id: Specifies the ID of disk to which the snapshot belongs.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> _builtins.int:
        """
        The total size of the snapshot chain.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The category of snapshot chain.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the snapshot ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> _builtins.int:
        """
        The number of snapshots on the snapshot chain.
        """
        return pulumi.get(self, "snapshot_count")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the ID of disk to which the snapshot belongs.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag.
        :param _builtins.str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumeTransferDetailsV3TransferResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 links: Sequence['outputs.GetVolumeTransferDetailsV3TransferLinkResult'],
                 name: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str created_at: The time when the transfer was created.
        :param _builtins.str id: The volume transfer ID.
        :param Sequence['GetVolumeTransferDetailsV3TransferLinkArgs'] links: The links of the cloud disk transfer record.
               The links structure is documented below.
        :param _builtins.str name: The volume transfer name.
        :param _builtins.str volume_id: The volume ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the transfer was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The volume transfer ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumeTransferDetailsV3TransferLinkResult']:
        """
        The links of the cloud disk transfer record.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The volume transfer name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTransferDetailsV3TransferLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumeTransfersTransferResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str id: The volume transfer ID.
        :param _builtins.str name: The volume transfer name.
        :param _builtins.str volume_id: The volume ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The volume transfer ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The volume transfer name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTransfersV3TransferResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 links: Sequence['outputs.GetVolumeTransfersV3TransferLinkResult'],
                 name: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str id: The volume transfer ID.
        :param Sequence['GetVolumeTransfersV3TransferLinkArgs'] links: The links to the cloud disk transfer record.
               The links structure is documented below.
        :param _builtins.str name: The volume transfer name.
        :param _builtins.str volume_id: The volume ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The volume transfer ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumeTransfersV3TransferLinkResult']:
        """
        The links to the cloud disk transfer record.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The volume transfer name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTransfersV3TransferLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumeTypeDetailV3VolumeTypeResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 extra_specs: Sequence['outputs.GetVolumeTypeDetailV3VolumeTypeExtraSpecResult'],
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The disk type description.
        :param Sequence['GetVolumeTypeDetailV3VolumeTypeExtraSpecArgs'] extra_specs: The disk type flavor.
               The extra_specs structure is documented below.
        :param _builtins.str id: The disk type ID.
        :param _builtins.str name: The disk type name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "extra_specs", extra_specs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The disk type description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extraSpecs")
    def extra_specs(self) -> Sequence['outputs.GetVolumeTypeDetailV3VolumeTypeExtraSpecResult']:
        """
        The disk type flavor.
        The extra_specs structure is documented below.
        """
        return pulumi.get(self, "extra_specs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The disk type name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVolumeTypeDetailV3VolumeTypeExtraSpecResult(dict):
    def __init__(__self__, *,
                 os_vendor_extended_sold_out_availability_zones: _builtins.str,
                 reskey_availability_zones: _builtins.str):
        """
        :param _builtins.str os_vendor_extended_sold_out_availability_zones: The list of AZs where the disk type has been sold out. Elements
               in the list are separated by commas (,).
        :param _builtins.str reskey_availability_zones: The list of AZs where the disk type is supported. Elements in the list are separated
               by commas (,). If this parameter is not specified, the disk type is supported in all AZs.
        """
        pulumi.set(__self__, "os_vendor_extended_sold_out_availability_zones", os_vendor_extended_sold_out_availability_zones)
        pulumi.set(__self__, "reskey_availability_zones", reskey_availability_zones)

    @_builtins.property
    @pulumi.getter(name="osVendorExtendedSoldOutAvailabilityZones")
    def os_vendor_extended_sold_out_availability_zones(self) -> _builtins.str:
        """
        The list of AZs where the disk type has been sold out. Elements
        in the list are separated by commas (,).
        """
        return pulumi.get(self, "os_vendor_extended_sold_out_availability_zones")

    @_builtins.property
    @pulumi.getter(name="reskeyAvailabilityZones")
    def reskey_availability_zones(self) -> _builtins.str:
        """
        The list of AZs where the disk type is supported. Elements in the list are separated
        by commas (,). If this parameter is not specified, the disk type is supported in all AZs.
        """
        return pulumi.get(self, "reskey_availability_zones")


@pulumi.output_type
class GetVolumeTypesTypeResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 extra_specs: Sequence['outputs.GetVolumeTypesTypeExtraSpecResult'],
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The volume type description.
        :param Sequence['GetVolumeTypesTypeExtraSpecArgs'] extra_specs: The volume type flavor.
        :param _builtins.str id: The volume type ID.
        :param _builtins.str name: The volume type name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "extra_specs", extra_specs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The volume type description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extraSpecs")
    def extra_specs(self) -> Sequence['outputs.GetVolumeTypesTypeExtraSpecResult']:
        """
        The volume type flavor.
        """
        return pulumi.get(self, "extra_specs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The volume type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The volume type name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVolumeTypesTypeExtraSpecResult(dict):
    def __init__(__self__, *,
                 available_availability_zones: _builtins.str,
                 sold_out_availability_zones: _builtins.str):
        """
        :param _builtins.str available_availability_zones: The list of availability zones where the volume type is supported.
               Multiple availability zones separated by commas (,).
               If this filed is empty, the volume type is supported all availability zones.
        :param _builtins.str sold_out_availability_zones: The list of availability zones where the volume type has been sold out.
               Multiple availability zones separated by commas (,).
        """
        pulumi.set(__self__, "available_availability_zones", available_availability_zones)
        pulumi.set(__self__, "sold_out_availability_zones", sold_out_availability_zones)

    @_builtins.property
    @pulumi.getter(name="availableAvailabilityZones")
    def available_availability_zones(self) -> _builtins.str:
        """
        The list of availability zones where the volume type is supported.
        Multiple availability zones separated by commas (,).
        If this filed is empty, the volume type is supported all availability zones.
        """
        return pulumi.get(self, "available_availability_zones")

    @_builtins.property
    @pulumi.getter(name="soldOutAvailabilityZones")
    def sold_out_availability_zones(self) -> _builtins.str:
        """
        The list of availability zones where the volume type has been sold out.
        Multiple availability zones separated by commas (,).
        """
        return pulumi.get(self, "sold_out_availability_zones")


@pulumi.output_type
class GetVolumeTypesV3VolumeTypeResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 extra_specs: Sequence['outputs.GetVolumeTypesV3VolumeTypeExtraSpecResult'],
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The volume type description.
        :param Sequence['GetVolumeTypesV3VolumeTypeExtraSpecArgs'] extra_specs: The volume type flavor.  
               The extra_specs structure is documented below.
        :param _builtins.str id: The volume type ID.
        :param _builtins.str name: The volume type name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "extra_specs", extra_specs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The volume type description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extraSpecs")
    def extra_specs(self) -> Sequence['outputs.GetVolumeTypesV3VolumeTypeExtraSpecResult']:
        """
        The volume type flavor.  
        The extra_specs structure is documented below.
        """
        return pulumi.get(self, "extra_specs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The volume type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The volume type name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVolumeTypesV3VolumeTypeExtraSpecResult(dict):
    def __init__(__self__, *,
                 availability_zones: _builtins.str,
                 sold_out_availability_zones: _builtins.str):
        """
        :param _builtins.str availability_zones: The list of availability zones where the volume type is supported.
               Multiple availability zones separated by commas (,).
               If this filed is empty, the volume type is supported all availability zones.
        :param _builtins.str sold_out_availability_zones: The list of availability zones where the volume type has been sold out.
               Multiple availability zones separated by commas (,).
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "sold_out_availability_zones", sold_out_availability_zones)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> _builtins.str:
        """
        The list of availability zones where the volume type is supported.
        Multiple availability zones separated by commas (,).
        If this filed is empty, the volume type is supported all availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="soldOutAvailabilityZones")
    def sold_out_availability_zones(self) -> _builtins.str:
        """
        The list of availability zones where the volume type has been sold out.
        Multiple availability zones separated by commas (,).
        """
        return pulumi.get(self, "sold_out_availability_zones")


@pulumi.output_type
class GetVolumesByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key of the resource match.
               Supported keys: **resource_name**, **service_type**.
        :param _builtins.str value: Specifies the value of the resource match.
               The value, which can contain a maximum of `255` characters. If **resource_name** is specified for `key`,
               the tag value uses a fuzzy match.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of the resource match.
        Supported keys: **resource_name**, **service_type**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the resource match.
        The value, which can contain a maximum of `255` characters. If **resource_name** is specified for `key`,
        the tag value uses a fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumesByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_details: Sequence['outputs.GetVolumesByTagsResourceResourceDetailResult'],
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetVolumesByTagsResourceTagResult']):
        """
        :param Sequence['GetVolumesByTagsResourceResourceDetailArgs'] resource_details: The resource details.
               The resource_detail structure is documented below.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name.
        :param Sequence['GetVolumesByTagsResourceTagArgs'] tags: Specifies the list of included tags.The key-value pairs of tags.
               A tag list can contain a maximum of `10` keys. Tag keys in a tag list must be unique.
               When multiple keys are specified in a tag list, only the disks having all specified keys are queried.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_details", resource_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetVolumesByTagsResourceResourceDetailResult']:
        """
        The resource details.
        The resource_detail structure is documented below.
        """
        return pulumi.get(self, "resource_details")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVolumesByTagsResourceTagResult']:
        """
        Specifies the list of included tags.The key-value pairs of tags.
        A tag list can contain a maximum of `10` keys. Tag keys in a tag list must be unique.
        When multiple keys are specified in a tag list, only the disks having all specified keys are queried.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVolumesByTagsResourceResourceDetailResult(dict):
    def __init__(__self__, *,
                 attachments: Sequence['outputs.GetVolumesByTagsResourceResourceDetailAttachmentResult'],
                 availability_zone: _builtins.str,
                 bootable: _builtins.str,
                 created_at: _builtins.str,
                 dedicated_storage_id: _builtins.str,
                 dedicated_storage_name: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 links: Sequence['outputs.GetVolumesByTagsResourceResourceDetailLinkResult'],
                 metadata: Mapping[str, _builtins.str],
                 multiattach: _builtins.bool,
                 name: _builtins.str,
                 os_vol_tenant_attr_tenant_id: _builtins.str,
                 service_type: _builtins.str,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 volume_image_metadata: Mapping[str, _builtins.str],
                 volume_type: _builtins.str,
                 wwn: _builtins.str):
        """
        :param Sequence['GetVolumesByTagsResourceResourceDetailAttachmentArgs'] attachments: The disk attachment information.
               The attachments structure is documented below.
        :param _builtins.str availability_zone: The AZ to which the disk belongs.
        :param _builtins.str bootable: Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        :param _builtins.str created_at: The time when the disk was created.
        :param _builtins.str dedicated_storage_id: The ID of the dedicated storage pool housing the disk.
        :param _builtins.str dedicated_storage_name: The name of the dedicated storage pool housing the disk.
        :param _builtins.str description: The disk description.
        :param _builtins.str enterprise_project_id: The ID of the enterprise project that the disk has been added to.
        :param _builtins.str id: The ID of the attached disk.
        :param Sequence['GetVolumesByTagsResourceResourceDetailLinkArgs'] links: The disk URI. The links structure is documented below.
        :param Mapping[str, _builtins.str] metadata: The disk metadata map. Possible keys are:
               + **__system__cmkid**: The encryption CMK ID in metadata.
               This parameter is used together with `__system__encrypted` for encryption.
               The length of cmkid is fixed at `36` bytes. For details about how to obtain the key ID, see Querying the Key List.
               + **__system__encrypted**: The encryption field in metadata.
               The value can be `0` (no encryption) or `1` (encryption). If this parameter is not specified,
               the encryption attribute of the disk is the same as that of the data source.
               If the disk is not created from a data source, the disk is not encrypted by default.
               + **hw_passthrough**: If this parameter value is **true**, the disk device type is SCSI,
               which allows ECS OSs to directly access the underlying storage media.
               SCSI reservation commands are supported. If this parameter is set to **false**, the disk device type is **VBD**,
               which is also the default type. VBD supports only simple SCSI read/write commands.
               If this parameter is not specified, the disk device type is **VBD**.
               + **orderID**: The parameter that describes the disk billing mode in metadata. If this parameter has a value,
               the disk is billed on a yearly/monthly basis. If not, the disk is billed on a pay-per-use basis.
        :param _builtins.bool multiattach: Whether the disk is shareable.
        :param _builtins.str name: The disk name.
        :param _builtins.str os_vol_tenant_attr_tenant_id: The ID of the tenant to which the disk belongs.
               The tenant ID is the same as the project ID.
        :param _builtins.str service_type: The service type. Supported values: **EVS**, **DSS**, **DESS**.
        :param _builtins.int size: The disk size, in GiB.
        :param _builtins.str snapshot_id: The snapshot ID. This parameter has a value if the disk is created from a snapshot.
        :param _builtins.str status: The disk status. For details, see "EVS Disk Status" in Elastic Volume Service User Guide.
               [reference](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html)
        :param Mapping[str, _builtins.str] tags: Specifies the list of included tags.The key-value pairs of tags.
               A tag list can contain a maximum of `10` keys. Tag keys in a tag list must be unique.
               When multiple keys are specified in a tag list, only the disks having all specified keys are queried.
               The tags structure is documented below.
        :param _builtins.str updated_at: The time when the disk was updated.
        :param Mapping[str, _builtins.str] volume_image_metadata: The metadata of the disk image.
        :param _builtins.str volume_type: The disk type. The value can be **SSD** (ultra-high I/O), **SAS** (high I/O), or **SATA** (common I/O).
        :param _builtins.str wwn: The unique identifier used when attaching the disk.
        """
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "multiattach", multiattach)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_vol_tenant_attr_tenant_id", os_vol_tenant_attr_tenant_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_image_metadata", volume_image_metadata)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "wwn", wwn)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetVolumesByTagsResourceResourceDetailAttachmentResult']:
        """
        The disk attachment information.
        The attachments structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The AZ to which the disk belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.str:
        """
        Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> _builtins.str:
        """
        The ID of the dedicated storage pool housing the disk.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> _builtins.str:
        """
        The name of the dedicated storage pool housing the disk.
        """
        return pulumi.get(self, "dedicated_storage_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The disk description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The ID of the enterprise project that the disk has been added to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumesByTagsResourceResourceDetailLinkResult']:
        """
        The disk URI. The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The disk metadata map. Possible keys are:
        + **__system__cmkid**: The encryption CMK ID in metadata.
        This parameter is used together with `__system__encrypted` for encryption.
        The length of cmkid is fixed at `36` bytes. For details about how to obtain the key ID, see Querying the Key List.
        + **__system__encrypted**: The encryption field in metadata.
        The value can be `0` (no encryption) or `1` (encryption). If this parameter is not specified,
        the encryption attribute of the disk is the same as that of the data source.
        If the disk is not created from a data source, the disk is not encrypted by default.
        + **hw_passthrough**: If this parameter value is **true**, the disk device type is SCSI,
        which allows ECS OSs to directly access the underlying storage media.
        SCSI reservation commands are supported. If this parameter is set to **false**, the disk device type is **VBD**,
        which is also the default type. VBD supports only simple SCSI read/write commands.
        If this parameter is not specified, the disk device type is **VBD**.
        + **orderID**: The parameter that describes the disk billing mode in metadata. If this parameter has a value,
        the disk is billed on a yearly/monthly basis. If not, the disk is billed on a pay-per-use basis.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def multiattach(self) -> _builtins.bool:
        """
        Whether the disk is shareable.
        """
        return pulumi.get(self, "multiattach")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The disk name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osVolTenantAttrTenantId")
    def os_vol_tenant_attr_tenant_id(self) -> _builtins.str:
        """
        The ID of the tenant to which the disk belongs.
        The tenant ID is the same as the project ID.
        """
        return pulumi.get(self, "os_vol_tenant_attr_tenant_id")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The service type. Supported values: **EVS**, **DSS**, **DESS**.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The disk size, in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The snapshot ID. This parameter has a value if the disk is created from a snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The disk status. For details, see "EVS Disk Status" in Elastic Volume Service User Guide.
        [reference](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html)
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the list of included tags.The key-value pairs of tags.
        A tag list can contain a maximum of `10` keys. Tag keys in a tag list must be unique.
        When multiple keys are specified in a tag list, only the disks having all specified keys are queried.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the disk was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> Mapping[str, _builtins.str]:
        """
        The metadata of the disk image.
        """
        return pulumi.get(self, "volume_image_metadata")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The disk type. The value can be **SSD** (ultra-high I/O), **SAS** (high I/O), or **SATA** (common I/O).
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> _builtins.str:
        """
        The unique identifier used when attaching the disk.
        """
        return pulumi.get(self, "wwn")


@pulumi.output_type
class GetVolumesByTagsResourceResourceDetailAttachmentResult(dict):
    def __init__(__self__, *,
                 attached_at: _builtins.str,
                 attachment_id: _builtins.str,
                 device: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 server_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attachment_id: The attachment ID.
        :param _builtins.str device: The device name.
        :param _builtins.str host_name: The name of the physical host housing the cloud server to which the disk is attached.
        :param _builtins.str id: The ID of the attached disk.
        :param _builtins.str server_id: The ID of the server to which the disk is attached.
        :param _builtins.str volume_id: The disk ID.
        """
        pulumi.set(__self__, "attached_at", attached_at)
        pulumi.set(__self__, "attachment_id", attachment_id)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> _builtins.str:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> _builtins.str:
        """
        The attachment ID.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device name.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The name of the physical host housing the cloud server to which the disk is attached.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the server to which the disk is attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesByTagsResourceResourceDetailLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumesByTagsResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource match.
               Supported keys: **resource_name**, **service_type**.
        :param _builtins.str value: Specifies the value of the resource match.
               The value, which can contain a maximum of `255` characters. If **resource_name** is specified for `key`,
               the tag value uses a fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource match.
        Supported keys: **resource_name**, **service_type**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource match.
        The value, which can contain a maximum of `255` characters. If **resource_name** is specified for `key`,
        the tag value uses a fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumesByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource match.
               Supported keys: **resource_name**, **service_type**.
        :param Sequence[_builtins.str] values: Specifies the list of values corresponding to the key.
               A tag list can contain a maximum of `10` values. Tag values in a tag list must be unique.
               If the tag value list is empty, disks that contain any key can be queried.
               When there are multiple values and the key requirements are met, disks that have any of the specified values are queried.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource match.
        Supported keys: **resource_name**, **service_type**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values corresponding to the key.
        A tag list can contain a maximum of `10` values. Tag values in a tag list must be unique.
        If the tag value list is empty, disks that contain any key can be queried.
        When there are multiple values and the key requirements are met, disks that have any of the specified values are queried.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVolumesV3VolumeResult(dict):
    def __init__(__self__, *,
                 attachments: Sequence['outputs.GetVolumesV3VolumeAttachmentResult'],
                 availability_zone: _builtins.str,
                 bootable: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 iops: Sequence['outputs.GetVolumesV3VolumeIopResult'],
                 links: Sequence['outputs.GetVolumesV3VolumeLinkResult'],
                 metadata: Mapping[str, _builtins.str],
                 multiattach: _builtins.bool,
                 name: _builtins.str,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 snapshot_policy_id: _builtins.str,
                 status: _builtins.str,
                 throughputs: Sequence['outputs.GetVolumesV3VolumeThroughputResult'],
                 updated_at: _builtins.str,
                 volume_image_metadata: Mapping[str, _builtins.str],
                 volume_type: _builtins.str):
        """
        :param Sequence['GetVolumesV3VolumeAttachmentArgs'] attachments: The disk attachment information.
               The attachments structure is documented below.
        :param _builtins.str availability_zone: Specifies the availability zone for the disks.
        :param _builtins.str bootable: Is it a boot disk. The valid value is **true** or **false**.
        :param _builtins.str created_at: The time when the disk was created.
        :param _builtins.str description: The description of the disk.
        :param _builtins.str id: The disk throughput identification.
        :param Sequence['GetVolumesV3VolumeIopArgs'] iops: The iops information of the disk is only returned when the disk type is **ESSD2** or **GPSSD2**.
               The iops structure is documented below.
        :param Sequence['GetVolumesV3VolumeLinkArgs'] links: The disk uri description information.
               The links structure is documented below.
        :param Mapping[str, _builtins.str] metadata: Specifies the disk metadata.
               Please pay attention to escape special characters before use. Please refer to the usage of example.
        :param _builtins.bool multiattach: Is it a shareable disk.
        :param _builtins.str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
               query result is for all disks whose names contain this value.
        :param _builtins.int size: The disk size, in GiB.
        :param _builtins.str snapshot_id: The snapshot ID. This attribute has a value if the disk is created from a snapshot.
        :param _builtins.str snapshot_policy_id: The snapshot policy ID bound to the disk.
        :param _builtins.str status: Specifies the disk status.  
               The valid values are as follows:
               + **creating**
               + **available**
               + **in-use**
               + **error**
               + **attaching**
               + **detaching**
               + **restoring-backup**
               + **backing-up**
               + **error_restoring**
               + **uploading**
               + **downloading**
               + **extending**
               + **error_extending**
               + **deleting**
               + **error_deleting**
               + **rollbacking**
               + **error_rollbacking**
               + **awaiting-transfer**
        :param Sequence['GetVolumesV3VolumeThroughputArgs'] throughputs: The throughput information of the disk is only returned when the disk type is **GPSD2**.
               The throughput structure is documented below.
        :param _builtins.str updated_at: The time when the disk was updated.
        :param Mapping[str, _builtins.str] volume_image_metadata: The metadata of disk image.
        :param _builtins.str volume_type: The disk type.  
               The valid values are as follows:
               + **SATA**: Ordinary IO disk (sold out).
               + **SAS**: High I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SSD**: Ultra-high I/O type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
        """
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "multiattach", multiattach)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "throughputs", throughputs)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volume_image_metadata", volume_image_metadata)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetVolumesV3VolumeAttachmentResult']:
        """
        The disk attachment information.
        The attachments structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the availability zone for the disks.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.str:
        """
        Is it a boot disk. The valid value is **true** or **false**.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the disk.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk throughput identification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Sequence['outputs.GetVolumesV3VolumeIopResult']:
        """
        The iops information of the disk is only returned when the disk type is **ESSD2** or **GPSSD2**.
        The iops structure is documented below.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumesV3VolumeLinkResult']:
        """
        The disk uri description information.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the disk metadata.
        Please pay attention to escape special characters before use. Please refer to the usage of example.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def multiattach(self) -> _builtins.bool:
        """
        Is it a shareable disk.
        """
        return pulumi.get(self, "multiattach")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name for the disks. This field will undergo a fuzzy matching query, the
        query result is for all disks whose names contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The disk size, in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The snapshot ID. This attribute has a value if the disk is created from a snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> _builtins.str:
        """
        The snapshot policy ID bound to the disk.
        """
        return pulumi.get(self, "snapshot_policy_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the disk status.  
        The valid values are as follows:
        + **creating**
        + **available**
        + **in-use**
        + **error**
        + **attaching**
        + **detaching**
        + **restoring-backup**
        + **backing-up**
        + **error_restoring**
        + **uploading**
        + **downloading**
        + **extending**
        + **error_extending**
        + **deleting**
        + **error_deleting**
        + **rollbacking**
        + **error_rollbacking**
        + **awaiting-transfer**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def throughputs(self) -> Sequence['outputs.GetVolumesV3VolumeThroughputResult']:
        """
        The throughput information of the disk is only returned when the disk type is **GPSD2**.
        The throughput structure is documented below.
        """
        return pulumi.get(self, "throughputs")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the disk was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> Mapping[str, _builtins.str]:
        """
        The metadata of disk image.
        """
        return pulumi.get(self, "volume_image_metadata")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The disk type.  
        The valid values are as follows:
        + **SATA**: Ordinary IO disk (sold out).
        + **SAS**: High I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SSD**: Ultra-high I/O type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetVolumesV3VolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 attached_at: _builtins.str,
                 attachment_id: _builtins.str,
                 device: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 server_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attachment_id: The ID corresponding to the attachment information.
        :param _builtins.str device: The device name to which the disk is attached.
        :param _builtins.str host_name: The name of the physical host housing the cloud server to which the disk is attached.
        :param _builtins.str id: The disk throughput identification.
        :param _builtins.str server_id: The ID of the server to which the disk is attached.
        :param _builtins.str volume_id: The disk ID.
        """
        pulumi.set(__self__, "attached_at", attached_at)
        pulumi.set(__self__, "attachment_id", attachment_id)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> _builtins.str:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> _builtins.str:
        """
        The ID corresponding to the attachment information.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device name to which the disk is attached.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The name of the physical host housing the cloud server to which the disk is attached.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk throughput identification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the server to which the disk is attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesV3VolumeIopResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.str,
                 id: _builtins.str,
                 total_val: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str frozened: The frozen tag.
        :param _builtins.str id: The disk throughput identification.
        :param _builtins.str total_val: The throughput size.
        :param _builtins.str volume_id: The disk ID.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.str:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk throughput identification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.str:
        """
        The throughput size.
        """
        return pulumi.get(self, "total_val")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesV3VolumeLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumesV3VolumeThroughputResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.bool,
                 id: _builtins.str,
                 total_val: _builtins.int,
                 volume_id: _builtins.str):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The disk throughput identification.
        :param _builtins.int total_val: The throughput size.
        :param _builtins.str volume_id: The disk ID.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.bool:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The disk throughput identification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.int:
        """
        The throughput size.
        """
        return pulumi.get(self, "total_val")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 attachments: Sequence['outputs.GetVolumesVolumeAttachmentResult'],
                 availability_zone: _builtins.str,
                 bootable: _builtins.bool,
                 create_at: _builtins.str,
                 dedicated_storage_id: _builtins.str,
                 dedicated_storage_name: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 iops: _builtins.int,
                 iops_attributes: Sequence['outputs.GetVolumesVolumeIopsAttributeResult'],
                 links: Sequence['outputs.GetVolumesVolumeLinkResult'],
                 metadata: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 serial_number: _builtins.str,
                 service_type: _builtins.str,
                 shareable: _builtins.bool,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 throughput: _builtins.int,
                 throughput_attributes: Sequence['outputs.GetVolumesVolumeThroughputAttributeResult'],
                 update_at: _builtins.str,
                 volume_image_metadata: Mapping[str, _builtins.str],
                 volume_type: _builtins.str,
                 wwn: _builtins.str):
        """
        :param Sequence['GetVolumesVolumeAttachmentArgs'] attachments: The disk attachment information. Structure is documented below.
        :param _builtins.str availability_zone: Specifies the availability zone for the disks.
        :param _builtins.bool bootable: Whether the disk is bootable.
        :param _builtins.str create_at: The time when the disk was created.
        :param _builtins.str dedicated_storage_id: Specifies the dedicated storage pool ID. All disks in the dedicated storage
               pool can be filtered by exact match.
        :param _builtins.str dedicated_storage_name: Specifies the dedicated storage pool name. All disks in the dedicated
               storage pool can be filtered by fuzzy match.
        :param _builtins.str description: The disk description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.int iops: the IOPS(Input/Output Operations Per Second) of the volume. Only valid when `volume_type` is **GPSSD2** or
               **ESSD2**.
        :param Sequence['GetVolumesVolumeIopsAttributeArgs'] iops_attributes: The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
               SSD V2 disk. The iops_attribute structure is documented below.
        :param Sequence['GetVolumesVolumeLinkArgs'] links: The disk URI. The links structure is documented below.
        :param Mapping[str, _builtins.str] metadata: Specifies the disk metadata.
               Please pay attention to escape special characters before use. Please refer to the usage of example.
        :param _builtins.str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
               query result is for all disks whose names contain this value.
        :param _builtins.str serial_number: The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
               disk mapping in the VM.
        :param _builtins.str service_type: Specifies the service type. Supported services are **EVS**, **DSS**, and **DESS**.
        :param _builtins.bool shareable: Specifies whether the disk is shareable.
        :param _builtins.int size: The disk size, in GB.
        :param _builtins.str snapshot_id: The snapshot ID. This attribute has a value if the disk is created from a snapshot.
        :param _builtins.str status: Specifies the disk status. The valid values are as following:
               + **FREEZED**
               + **BIND_ERROR**
               + **BINDING**
               + **PENDING_DELETE**
               + **PENDING_CREATE**
               + **NOTIFYING**
               + **NOTIFY_DELETE**
               + **PENDING_UPDATE**
               + **DOWN**
               + **ACTIVE**
               + **ELB**
               + **ERROR**
               + **VPN**
        :param Mapping[str, _builtins.str] tags: Specifies the included key/value pairs which associated with the desired disk.
        :param _builtins.int throughput: The throughput of the system disk. Only valid when `volume_type` is **GPSSD2**.
        :param Sequence['GetVolumesVolumeThroughputAttributeArgs'] throughput_attributes: The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
               The throughput_attribute structure is documented below.
        :param _builtins.str update_at: The time when the disk was updated.
        :param Mapping[str, _builtins.str] volume_image_metadata: The metadata of the disk image.
        :param _builtins.str volume_type: The disk type. Valid values are as follows:
               + **SAS**: High I/O type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
        :param _builtins.str wwn: The unique identifier used when attaching the disk.
        """
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "iops_attributes", iops_attributes)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "shareable", shareable)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "throughput", throughput)
        pulumi.set(__self__, "throughput_attributes", throughput_attributes)
        pulumi.set(__self__, "update_at", update_at)
        pulumi.set(__self__, "volume_image_metadata", volume_image_metadata)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "wwn", wwn)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetVolumesVolumeAttachmentResult']:
        """
        The disk attachment information. Structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the availability zone for the disks.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the disk is bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> _builtins.str:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> _builtins.str:
        """
        Specifies the dedicated storage pool ID. All disks in the dedicated storage
        pool can be filtered by exact match.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> _builtins.str:
        """
        Specifies the dedicated storage pool name. All disks in the dedicated
        storage pool can be filtered by fuzzy match.
        """
        return pulumi.get(self, "dedicated_storage_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The disk description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID for filtering.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.int:
        """
        the IOPS(Input/Output Operations Per Second) of the volume. Only valid when `volume_type` is **GPSSD2** or
        **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="iopsAttributes")
    def iops_attributes(self) -> Sequence['outputs.GetVolumesVolumeIopsAttributeResult']:
        """
        The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
        SSD V2 disk. The iops_attribute structure is documented below.
        """
        return pulumi.get(self, "iops_attributes")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumesVolumeLinkResult']:
        """
        The disk URI. The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the disk metadata.
        Please pay attention to escape special characters before use. Please refer to the usage of example.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name for the disks. This field will undergo a fuzzy matching query, the
        query result is for all disks whose names contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
        disk mapping in the VM.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Specifies the service type. Supported services are **EVS**, **DSS**, and **DESS**.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def shareable(self) -> _builtins.bool:
        """
        Specifies whether the disk is shareable.
        """
        return pulumi.get(self, "shareable")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The disk size, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The snapshot ID. This attribute has a value if the disk is created from a snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the disk status. The valid values are as following:
        + **FREEZED**
        + **BIND_ERROR**
        + **BINDING**
        + **PENDING_DELETE**
        + **PENDING_CREATE**
        + **NOTIFYING**
        + **NOTIFY_DELETE**
        + **PENDING_UPDATE**
        + **DOWN**
        + **ACTIVE**
        + **ELB**
        + **ERROR**
        + **VPN**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the included key/value pairs which associated with the desired disk.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> _builtins.int:
        """
        The throughput of the system disk. Only valid when `volume_type` is **GPSSD2**.
        """
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="throughputAttributes")
    def throughput_attributes(self) -> Sequence['outputs.GetVolumesVolumeThroughputAttributeResult']:
        """
        The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
        The throughput_attribute structure is documented below.
        """
        return pulumi.get(self, "throughput_attributes")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> _builtins.str:
        """
        The time when the disk was updated.
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> Mapping[str, _builtins.str]:
        """
        The metadata of the disk image.
        """
        return pulumi.get(self, "volume_image_metadata")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The disk type. Valid values are as follows:
        + **SAS**: High I/O type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> _builtins.str:
        """
        The unique identifier used when attaching the disk.
        """
        return pulumi.get(self, "wwn")


@pulumi.output_type
class GetVolumesVolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 attached_at: _builtins.str,
                 attached_mode: _builtins.str,
                 attached_volume_id: _builtins.str,
                 device_name: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 server_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attached_mode: The ID of the attachment information.
        :param _builtins.str attached_volume_id: The ID of the attached disk.
        :param _builtins.str device_name: The device name to which the disk is attached.
        :param _builtins.str host_name: The name of the physical host housing the cloud server to which the disk is attached.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.str server_id: Specifies the server ID to which the disks are attached.
        :param _builtins.str volume_id: Specifies the ID for the disk.
        """
        pulumi.set(__self__, "attached_at", attached_at)
        pulumi.set(__self__, "attached_mode", attached_mode)
        pulumi.set(__self__, "attached_volume_id", attached_volume_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> _builtins.str:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachedMode")
    def attached_mode(self) -> _builtins.str:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "attached_mode")

    @_builtins.property
    @pulumi.getter(name="attachedVolumeId")
    def attached_volume_id(self) -> _builtins.str:
        """
        The ID of the attached disk.
        """
        return pulumi.get(self, "attached_volume_id")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The device name to which the disk is attached.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The name of the physical host housing the cloud server to which the disk is attached.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the server ID to which the disks are attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the ID for the disk.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesVolumeIopsAttributeResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.bool,
                 id: _builtins.str,
                 total_val: _builtins.int):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.int total_val: The IOPS.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.bool:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.int:
        """
        The IOPS.
        """
        return pulumi.get(self, "total_val")


@pulumi.output_type
class GetVolumesVolumeLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        """
        :param _builtins.str href: The corresponding shortcut link.
        :param _builtins.str rel: The shortcut link marker name.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        The corresponding shortcut link.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        """
        The shortcut link marker name.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumesVolumeThroughputAttributeResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.bool,
                 id: _builtins.str,
                 total_val: _builtins.int):
        """
        :param _builtins.bool frozened: The frozen tag.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.int total_val: The IOPS.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.bool:
        """
        The frozen tag.
        """
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.int:
        """
        The IOPS.
        """
        return pulumi.get(self, "total_val")


