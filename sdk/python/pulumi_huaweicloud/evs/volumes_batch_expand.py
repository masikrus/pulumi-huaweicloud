# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumesBatchExpandArgs', 'VolumesBatchExpand']

@pulumi.input_type
class VolumesBatchExpandArgs:
    def __init__(__self__, *,
                 volumes: pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VolumesBatchExpand resource.
        :param pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]] volumes: Specifies the to-be-expanded volume list.
               The volumes structure is documented below.
        :param pulumi.Input[_builtins.bool] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when the disk in prepaid mode. Defaults to **false**. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
               
               <a name="volumes_struct"></a>
               The `volumes` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
        """
        pulumi.set(__self__, "volumes", volumes)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_auto_pay is not None:
            pulumi.set(__self__, "is_auto_pay", is_auto_pay)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]]:
        """
        Specifies the to-be-expanded volume list.
        The volumes structure is documented below.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when the disk in prepaid mode. Defaults to **false**. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.

        <a name="volumes_struct"></a>
        The `volumes` block supports:
        """
        return pulumi.get(self, "is_auto_pay")

    @is_auto_pay.setter
    def is_auto_pay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_pay", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VolumesBatchExpandState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]]] = None):
        """
        Input properties used for looking up and filtering VolumesBatchExpand resources.
        :param pulumi.Input[_builtins.bool] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when the disk in prepaid mode. Defaults to **false**. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
               
               <a name="volumes_struct"></a>
               The `volumes` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]] volumes: Specifies the to-be-expanded volume list.
               The volumes structure is documented below.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_auto_pay is not None:
            pulumi.set(__self__, "is_auto_pay", is_auto_pay)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when the disk in prepaid mode. Defaults to **false**. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.

        <a name="volumes_struct"></a>
        The `volumes` block supports:
        """
        return pulumi.get(self, "is_auto_pay")

    @is_auto_pay.setter
    def is_auto_pay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_pay", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]]]:
        """
        Specifies the to-be-expanded volume list.
        The volumes structure is documented below.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumesBatchExpandVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.type_token("huaweicloud:Evs/volumesBatchExpand:VolumesBatchExpand")
class VolumesBatchExpand(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumesBatchExpandVolumeArgs', 'VolumesBatchExpandVolumeArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages an EVS volumes expand resource within HuaweiCloud.

        > The current resource is a one-time action resource using to expand volumes. Deleting this resource will not reset
        the expanded volumes, but will only remove the resource information from the tfstate file.\\
        Using this resource may cause incompatible changes to other resources that contain volume size fields. Please use
        `lifecycle.ignore_changes` properly to handle unexpected changes.\\
        If the status of the to-be-expanded disk is available, there are no restrictions. If the status of the to-be-expanded
        disk is in-use, the restrictions are as follows:
        <br/>1. A shared disk cannot be expanded, which means that the value of multiattach must be false.
        <br/>2. The status of the server to which the disk attached must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        id = config.require_object("id")
        new_size = config.require_object("newSize")
        is_auto_pay = config.require_bool("isAutoPay")
        test = huaweicloud.evs.VolumesBatchExpand("test",
            volumes=[{
                "id": id,
                "new_size": new_size,
            }],
            is_auto_pay=is_auto_pay)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when the disk in prepaid mode. Defaults to **false**. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
               
               <a name="volumes_struct"></a>
               The `volumes` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumesBatchExpandVolumeArgs', 'VolumesBatchExpandVolumeArgsDict']]]] volumes: Specifies the to-be-expanded volume list.
               The volumes structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumesBatchExpandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS volumes expand resource within HuaweiCloud.

        > The current resource is a one-time action resource using to expand volumes. Deleting this resource will not reset
        the expanded volumes, but will only remove the resource information from the tfstate file.\\
        Using this resource may cause incompatible changes to other resources that contain volume size fields. Please use
        `lifecycle.ignore_changes` properly to handle unexpected changes.\\
        If the status of the to-be-expanded disk is available, there are no restrictions. If the status of the to-be-expanded
        disk is in-use, the restrictions are as follows:
        <br/>1. A shared disk cannot be expanded, which means that the value of multiattach must be false.
        <br/>2. The status of the server to which the disk attached must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        id = config.require_object("id")
        new_size = config.require_object("newSize")
        is_auto_pay = config.require_bool("isAutoPay")
        test = huaweicloud.evs.VolumesBatchExpand("test",
            volumes=[{
                "id": id,
                "new_size": new_size,
            }],
            is_auto_pay=is_auto_pay)
        ```

        :param str resource_name: The name of the resource.
        :param VolumesBatchExpandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumesBatchExpandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_pay: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumesBatchExpandVolumeArgs', 'VolumesBatchExpandVolumeArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumesBatchExpandArgs.__new__(VolumesBatchExpandArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_auto_pay"] = is_auto_pay
            __props__.__dict__["region"] = region
            if volumes is None and not opts.urn:
                raise TypeError("Missing required property 'volumes'")
            __props__.__dict__["volumes"] = volumes
        super(VolumesBatchExpand, __self__).__init__(
            'huaweicloud:Evs/volumesBatchExpand:VolumesBatchExpand',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_auto_pay: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumesBatchExpandVolumeArgs', 'VolumesBatchExpandVolumeArgsDict']]]]] = None) -> 'VolumesBatchExpand':
        """
        Get an existing VolumesBatchExpand resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] is_auto_pay: Specifies whether to pay immediately. This parameter is valid only
               when the disk in prepaid mode. Defaults to **false**. Possible values are:
               + **true**: An order is immediately paid from the account balance.
               + **false**: An order is not paid immediately after being created.
               
               <a name="volumes_struct"></a>
               The `volumes` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumesBatchExpandVolumeArgs', 'VolumesBatchExpandVolumeArgsDict']]]] volumes: Specifies the to-be-expanded volume list.
               The volumes structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumesBatchExpandState.__new__(_VolumesBatchExpandState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_auto_pay"] = is_auto_pay
        __props__.__dict__["region"] = region
        __props__.__dict__["volumes"] = volumes
        return VolumesBatchExpand(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isAutoPay")
    def is_auto_pay(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to pay immediately. This parameter is valid only
        when the disk in prepaid mode. Defaults to **false**. Possible values are:
        + **true**: An order is immediately paid from the account balance.
        + **false**: An order is not paid immediately after being created.

        <a name="volumes_struct"></a>
        The `volumes` block supports:
        """
        return pulumi.get(self, "is_auto_pay")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Sequence['outputs.VolumesBatchExpandVolume']]:
        """
        Specifies the to-be-expanded volume list.
        The volumes structure is documented below.
        """
        return pulumi.get(self, "volumes")

