# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VolumeTransferAccepterArgs', 'VolumeTransferAccepter']

@pulumi.input_type
class VolumeTransferAccepterArgs:
    def __init__(__self__, *,
                 auth_key: pulumi.Input[_builtins.str],
                 transfer_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VolumeTransferAccepter resource.
        :param pulumi.Input[_builtins.str] auth_key: Specifies the identity authentication key for volume transfer.
               When creating the volume transfer, the value of this field will be returned.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] transfer_id: Specifies the ID of the volume transfer record.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "transfer_id", transfer_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the identity authentication key for volume transfer.
        When creating the volume transfer, the value of this field will be returned.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_key", value)

    @_builtins.property
    @pulumi.getter(name="transferId")
    def transfer_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the volume transfer record.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "transfer_id")

    @transfer_id.setter
    def transfer_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "transfer_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VolumeTransferAccepterState:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VolumeTransferAccepter resources.
        :param pulumi.Input[_builtins.str] auth_key: Specifies the identity authentication key for volume transfer.
               When creating the volume transfer, the value of this field will be returned.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] transfer_id: Specifies the ID of the volume transfer record.
               Changing this parameter will create a new resource.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if transfer_id is not None:
            pulumi.set(__self__, "transfer_id", transfer_id)

    @_builtins.property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the identity authentication key for volume transfer.
        When creating the volume transfer, the value of this field will be returned.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="transferId")
    def transfer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the volume transfer record.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "transfer_id")

    @transfer_id.setter
    def transfer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transfer_id", value)


@pulumi.type_token("huaweicloud:Evs/volumeTransferAccepter:VolumeTransferAccepter")
class VolumeTransferAccepter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS volume transfer accepter resource within HuaweiCloud.

        > After successfully accepting the transfer of volume using this resource, the original volume transfer resource will
           no longer exist. Destroying resource does not change the current state of the accepter resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        transfer_id = config.require_object("transferId")
        auth_key = config.require_object("authKey")
        test = huaweicloud.evs.VolumeTransferAccepter("test",
            transfer_id=transfer_id,
            auth_key=auth_key)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_key: Specifies the identity authentication key for volume transfer.
               When creating the volume transfer, the value of this field will be returned.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] transfer_id: Specifies the ID of the volume transfer record.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeTransferAccepterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS volume transfer accepter resource within HuaweiCloud.

        > After successfully accepting the transfer of volume using this resource, the original volume transfer resource will
           no longer exist. Destroying resource does not change the current state of the accepter resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        transfer_id = config.require_object("transferId")
        auth_key = config.require_object("authKey")
        test = huaweicloud.evs.VolumeTransferAccepter("test",
            transfer_id=transfer_id,
            auth_key=auth_key)
        ```

        :param str resource_name: The name of the resource.
        :param VolumeTransferAccepterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeTransferAccepterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeTransferAccepterArgs.__new__(VolumeTransferAccepterArgs)

            if auth_key is None and not opts.urn:
                raise TypeError("Missing required property 'auth_key'")
            __props__.__dict__["auth_key"] = auth_key
            __props__.__dict__["region"] = region
            if transfer_id is None and not opts.urn:
                raise TypeError("Missing required property 'transfer_id'")
            __props__.__dict__["transfer_id"] = transfer_id
        super(VolumeTransferAccepter, __self__).__init__(
            'huaweicloud:Evs/volumeTransferAccepter:VolumeTransferAccepter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_key: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            transfer_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VolumeTransferAccepter':
        """
        Get an existing VolumeTransferAccepter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_key: Specifies the identity authentication key for volume transfer.
               When creating the volume transfer, the value of this field will be returned.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] transfer_id: Specifies the ID of the volume transfer record.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeTransferAccepterState.__new__(_VolumeTransferAccepterState)

        __props__.__dict__["auth_key"] = auth_key
        __props__.__dict__["region"] = region
        __props__.__dict__["transfer_id"] = transfer_id
        return VolumeTransferAccepter(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the identity authentication key for volume transfer.
        When creating the volume transfer, the value of this field will be returned.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auth_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="transferId")
    def transfer_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the volume transfer record.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "transfer_id")

