# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotsResult',
    'AwaitableGetSnapshotsResult',
    'get_snapshots',
    'get_snapshots_output',
]

@pulumi.output_type
class GetSnapshotsResult:
    """
    A collection of values returned by getSnapshots.
    """
    def __init__(__self__, availability_zone=None, dedicated_storage_id=None, dedicated_storage_name=None, enterprise_project_id=None, id=None, name=None, region=None, service_type=None, snapshot_id=None, snapshots=None, status=None, volume_id=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if dedicated_storage_id and not isinstance(dedicated_storage_id, str):
            raise TypeError("Expected argument 'dedicated_storage_id' to be a str")
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        if dedicated_storage_name and not isinstance(dedicated_storage_name, str):
            raise TypeError("Expected argument 'dedicated_storage_name' to be a str")
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> Optional[_builtins.str]:
        """
        The dedicated storage pool ID.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> Optional[_builtins.str]:
        """
        The dedicated storage pool name.
        """
        return pulumi.get(self, "dedicated_storage_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of cloudvolume snapshot. Maximum supported is 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service type. Valid values can be **EVS**, **DSS**, and **DESS**.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetSnapshotsSnapshotResult']:
        """
        A list of EVS cloudvolume snapshots.
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of cloudvolume snapshot. Valid values are as follows:
        + **creating**: The cloudvolume snapshot is in the process of being created.
        + **available**: The cloudvolume snapshot is created successfully and can be used.
        + **error**: An error occurred during the creation process of the cloudvolume snapshot.
        + **deleting**: The cloudvolume snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the cloudvolume snapshot.
        + **rollbacking**: The cloudvolume snapshot is in the process of rolling back data.
        + **backing-up**: The status of the following two snapshots is **backing_up**:
        The snapshots that can create backup directly through the OpenStack native API.
        The snapshots created automatically during the process of creating a backup.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The ID of the cloudvolume to which the snapshot belongs.
        """
        return pulumi.get(self, "volume_id")


class AwaitableGetSnapshotsResult(GetSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsResult(
            availability_zone=self.availability_zone,
            dedicated_storage_id=self.dedicated_storage_id,
            dedicated_storage_name=self.dedicated_storage_name,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            service_type=self.service_type,
            snapshot_id=self.snapshot_id,
            snapshots=self.snapshots,
            status=self.status,
            volume_id=self.volume_id)


def get_snapshots(availability_zone: Optional[_builtins.str] = None,
                  dedicated_storage_id: Optional[_builtins.str] = None,
                  dedicated_storage_name: Optional[_builtins.str] = None,
                  enterprise_project_id: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  service_type: Optional[_builtins.str] = None,
                  snapshot_id: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  volume_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsResult:
    """
    Use this data source to get a list of EVS cloudvolume snapshots.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_id = config.require_object("volumeId")
    snapshots = huaweicloud.Evs.get_snapshots(volume_id=volume_id)
    ```


    :param _builtins.str availability_zone: The availability zone of the cloudvolume to which the snapshot belongs.
    :param _builtins.str dedicated_storage_id: The ID of the dedicated storage.
    :param _builtins.str dedicated_storage_name: The name of the dedicated storage.
    :param _builtins.str enterprise_project_id: Specify the enterprise project ID to filter.
           If this field value is not specified, cloudvolume snapshots of all enterprise projects within
           authority scope will be queried.
    :param _builtins.str name: The name of cloudvolume snapshot. Maximum supported is 64 characters.
    :param _builtins.str region: The region in which to query the WAF dedicated domains.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_type: Service type. Only **EVS**, **DSS**, and **DESS** are supported.
    :param _builtins.str snapshot_id: Specify the snapshot ID to filter.
           You can pass in multiple ids to filter the query, for example: id=id1&id=id2&id=id3.
    :param _builtins.str status: The status of cloudvolume snapshot. Valid values are as follows:
           + **creating**: The cloudvolume snapshot is in the process of being created.
           + **available**: The cloudvolume snapshot is created successfully and can be used.
           + **error**: An error occurred during the creation process of the cloudvolume snapshot.
           + **deleting**: The cloudvolume snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the cloudvolume snapshot.
           + **rollbacking**: The cloudvolume snapshot is in the process of rolling back data.
           + **backing-up**: The status of the following two snapshots is **backing_up**:
           The snapshots that can create backup directly through the OpenStack native API.
           The snapshots created automatically during the process of creating a backup.
    :param _builtins.str volume_id: The ID of the cloudvolume to which the snapshot belongs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedStorageId'] = dedicated_storage_id
    __args__['dedicatedStorageName'] = dedicated_storage_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serviceType'] = service_type
    __args__['snapshotId'] = snapshot_id
    __args__['status'] = status
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getSnapshots:getSnapshots', __args__, opts=opts, typ=GetSnapshotsResult).value

    return AwaitableGetSnapshotsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        dedicated_storage_id=pulumi.get(__ret__, 'dedicated_storage_id'),
        dedicated_storage_name=pulumi.get(__ret__, 'dedicated_storage_name'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        service_type=pulumi.get(__ret__, 'service_type'),
        snapshot_id=pulumi.get(__ret__, 'snapshot_id'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        status=pulumi.get(__ret__, 'status'),
        volume_id=pulumi.get(__ret__, 'volume_id'))
def get_snapshots_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         dedicated_storage_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         dedicated_storage_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         service_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         snapshot_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         volume_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotsResult]:
    """
    Use this data source to get a list of EVS cloudvolume snapshots.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_id = config.require_object("volumeId")
    snapshots = huaweicloud.Evs.get_snapshots(volume_id=volume_id)
    ```


    :param _builtins.str availability_zone: The availability zone of the cloudvolume to which the snapshot belongs.
    :param _builtins.str dedicated_storage_id: The ID of the dedicated storage.
    :param _builtins.str dedicated_storage_name: The name of the dedicated storage.
    :param _builtins.str enterprise_project_id: Specify the enterprise project ID to filter.
           If this field value is not specified, cloudvolume snapshots of all enterprise projects within
           authority scope will be queried.
    :param _builtins.str name: The name of cloudvolume snapshot. Maximum supported is 64 characters.
    :param _builtins.str region: The region in which to query the WAF dedicated domains.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_type: Service type. Only **EVS**, **DSS**, and **DESS** are supported.
    :param _builtins.str snapshot_id: Specify the snapshot ID to filter.
           You can pass in multiple ids to filter the query, for example: id=id1&id=id2&id=id3.
    :param _builtins.str status: The status of cloudvolume snapshot. Valid values are as follows:
           + **creating**: The cloudvolume snapshot is in the process of being created.
           + **available**: The cloudvolume snapshot is created successfully and can be used.
           + **error**: An error occurred during the creation process of the cloudvolume snapshot.
           + **deleting**: The cloudvolume snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the cloudvolume snapshot.
           + **rollbacking**: The cloudvolume snapshot is in the process of rolling back data.
           + **backing-up**: The status of the following two snapshots is **backing_up**:
           The snapshots that can create backup directly through the OpenStack native API.
           The snapshots created automatically during the process of creating a backup.
    :param _builtins.str volume_id: The ID of the cloudvolume to which the snapshot belongs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedStorageId'] = dedicated_storage_id
    __args__['dedicatedStorageName'] = dedicated_storage_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serviceType'] = service_type
    __args__['snapshotId'] = snapshot_id
    __args__['status'] = status
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Evs/getSnapshots:getSnapshots', __args__, opts=opts, typ=GetSnapshotsResult)
    return __ret__.apply(lambda __response__: GetSnapshotsResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        dedicated_storage_id=pulumi.get(__response__, 'dedicated_storage_id'),
        dedicated_storage_name=pulumi.get(__response__, 'dedicated_storage_name'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        service_type=pulumi.get(__response__, 'service_type'),
        snapshot_id=pulumi.get(__response__, 'snapshot_id'),
        snapshots=pulumi.get(__response__, 'snapshots'),
        status=pulumi.get(__response__, 'status'),
        volume_id=pulumi.get(__response__, 'volume_id')))
