# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVolumesV3Result',
    'AwaitableGetVolumesV3Result',
    'get_volumes_v3',
    'get_volumes_v3_output',
]

@pulumi.output_type
class GetVolumesV3Result:
    """
    A collection of values returned by getVolumesV3.
    """
    def __init__(__self__, availability_zone=None, id=None, metadata=None, name=None, region=None, sort_dir=None, sort_key=None, status=None, volumes=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, str):
            raise TypeError("Expected argument 'metadata' to be a str")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        The availability zone of the disk.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[_builtins.str]:
        """
        The key-value pair disk metadata.  
        The valid key-value pairs are as follows:
        + **__system__cmkid**: The encryption CMK ID in metadata. When used in conjunction with `__system__encrypted`,
        it indicates the need for encryption. Fixed length of `36` bytes.
        + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
        When this field does not exist, the disk defaults to not encrypting.
        + **full_clone**: When creating a disk from a snapshot, if you need to use link cloning, please specify a value of `0`
        for this field.
        + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS operating
        system to directly access the underlying storage media and supports SCSI reservation commands. If this attribute is
        set to **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI
        read/write commands. If this attribute is not specified, the disk device type is VBD.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the disk.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the disk.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetVolumesV3VolumeResult']:
        """
        The detailed information list of the disks.
        The volumes structure is documented below.
        """
        return pulumi.get(self, "volumes")


class AwaitableGetVolumesV3Result(GetVolumesV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumesV3Result(
            availability_zone=self.availability_zone,
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            volumes=self.volumes)


def get_volumes_v3(availability_zone: Optional[_builtins.str] = None,
                   metadata: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   sort_dir: Optional[_builtins.str] = None,
                   sort_key: Optional[_builtins.str] = None,
                   status: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumesV3Result:
    """
    Use this data source to get the detailed information list of the EVS v3 disks within HuaweiCloud.


    :param _builtins.str availability_zone: Specifies the availability zone for the disks.
    :param _builtins.str metadata: Specifies the disk metadata.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param _builtins.str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
           query result is for all disks whose names contain this value.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the result sorting order.  
           The valid values are as follows:
           + **desc**: The descending order.
           + **asc**: The ascending order.
           
           Defaults to **desc**.
    :param _builtins.str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, **size**, or **created_at**, defaults to **created_at**.
    :param _builtins.str status: Specifies the disk status.  
           The valid values are as follows:
           + **creating**
           + **available**
           + **in-use**
           + **error**
           + **attaching**
           + **detaching**
           + **restoring-backup**
           + **backing-up**
           + **error_restoring**
           + **uploading**
           + **downloading**
           + **extending**
           + **error_extending**
           + **deleting**
           + **error_deleting**
           + **rollbacking**
           + **error_rollbacking**
           + **awaiting-transfer**
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['metadata'] = metadata
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getVolumesV3:getVolumesV3', __args__, opts=opts, typ=GetVolumesV3Result).value

    return AwaitableGetVolumesV3Result(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        volumes=pulumi.get(__ret__, 'volumes'))
def get_volumes_v3_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          metadata: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumesV3Result]:
    """
    Use this data source to get the detailed information list of the EVS v3 disks within HuaweiCloud.


    :param _builtins.str availability_zone: Specifies the availability zone for the disks.
    :param _builtins.str metadata: Specifies the disk metadata.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param _builtins.str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
           query result is for all disks whose names contain this value.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the result sorting order.  
           The valid values are as follows:
           + **desc**: The descending order.
           + **asc**: The ascending order.
           
           Defaults to **desc**.
    :param _builtins.str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, **size**, or **created_at**, defaults to **created_at**.
    :param _builtins.str status: Specifies the disk status.  
           The valid values are as follows:
           + **creating**
           + **available**
           + **in-use**
           + **error**
           + **attaching**
           + **detaching**
           + **restoring-backup**
           + **backing-up**
           + **error_restoring**
           + **uploading**
           + **downloading**
           + **extending**
           + **error_extending**
           + **deleting**
           + **error_deleting**
           + **rollbacking**
           + **error_rollbacking**
           + **awaiting-transfer**
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['metadata'] = metadata
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Evs/getVolumesV3:getVolumesV3', __args__, opts=opts, typ=GetVolumesV3Result)
    return __ret__.apply(lambda __response__: GetVolumesV3Result(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        volumes=pulumi.get(__response__, 'volumes')))
