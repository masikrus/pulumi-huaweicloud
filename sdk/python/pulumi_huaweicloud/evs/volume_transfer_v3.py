# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumeTransferV3Args', 'VolumeTransferV3']

@pulumi.input_type
class VolumeTransferV3Args:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VolumeTransferV3 resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the volume ID to be transferred.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the volume transfer record.
               Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the volume ID to be transferred.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the volume transfer record.
        Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VolumeTransferV3State:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTransferV3LinkArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VolumeTransferV3 resources.
        :param pulumi.Input[_builtins.str] auth_key: The identity authentication key for volume transfer.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the volume transfer record, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeTransferV3LinkArgs']]] links: The links to the cloud disk transfer record.
               The links structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the volume transfer record.
               Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the volume ID to be transferred.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identity authentication key for volume transfer.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_key", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the volume transfer record, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTransferV3LinkArgs']]]]:
        """
        The links to the cloud disk transfer record.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTransferV3LinkArgs']]]]):
        pulumi.set(self, "links", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the volume transfer record.
        Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the volume ID to be transferred.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Evs/volumeTransferV3:VolumeTransferV3")
class VolumeTransferV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS volume transfer (V3) resource within HuaweiCloud.

        > The transfer can only be created when the EVS volume is in the **available** state, other constraints that do not
           support transfer are as follows:
           <br/>1. Volumes with the prePaid billing mode do not support transfer.
           <br/>2. Frozen volumes do not support transfer.
           <br/>3. Encrypted volumes do not support transfer.
           <br/>4. Volumes with corresponding backups and snapshots do not support transfer.
           <br/>5. Volumes with backup policies do not support transfer.
           <br/>6. Volumes on DSS (Dedicated Storage Service) do not support transfer.
           <br/>7. Volumes on DESS (Dedicated Enterprise Storage Service) do not support transfer.
           <br/>8. EVS system disk does not support transfer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        test = huaweicloud.evs.VolumeTransferV3("test",
            volume_id=volume_id,
            name=name)
        ```

        ## Import

        Volumes can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/volumeTransferV3:VolumeTransferV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `auth_key`.

        It is generally recommended running pulumi preview after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_volume_transfer" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              auth_key, 
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the volume transfer record.
               Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the volume ID to be transferred.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeTransferV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS volume transfer (V3) resource within HuaweiCloud.

        > The transfer can only be created when the EVS volume is in the **available** state, other constraints that do not
           support transfer are as follows:
           <br/>1. Volumes with the prePaid billing mode do not support transfer.
           <br/>2. Frozen volumes do not support transfer.
           <br/>3. Encrypted volumes do not support transfer.
           <br/>4. Volumes with corresponding backups and snapshots do not support transfer.
           <br/>5. Volumes with backup policies do not support transfer.
           <br/>6. Volumes on DSS (Dedicated Storage Service) do not support transfer.
           <br/>7. Volumes on DESS (Dedicated Enterprise Storage Service) do not support transfer.
           <br/>8. EVS system disk does not support transfer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        test = huaweicloud.evs.VolumeTransferV3("test",
            volume_id=volume_id,
            name=name)
        ```

        ## Import

        Volumes can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/volumeTransferV3:VolumeTransferV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `auth_key`.

        It is generally recommended running pulumi preview after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_volume_transfer" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              auth_key, 
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param VolumeTransferV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeTransferV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeTransferV3Args.__new__(VolumeTransferV3Args)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["auth_key"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["links"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VolumeTransferV3, __self__).__init__(
            'huaweicloud:Evs/volumeTransferV3:VolumeTransferV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_key: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTransferV3LinkArgs', 'VolumeTransferV3LinkArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VolumeTransferV3':
        """
        Get an existing VolumeTransferV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_key: The identity authentication key for volume transfer.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the volume transfer record, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeTransferV3LinkArgs', 'VolumeTransferV3LinkArgsDict']]]] links: The links to the cloud disk transfer record.
               The links structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the volume transfer record.
               Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the volume ID to be transferred.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeTransferV3State.__new__(_VolumeTransferV3State)

        __props__.__dict__["auth_key"] = auth_key
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["volume_id"] = volume_id
        return VolumeTransferV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Output[_builtins.str]:
        """
        The identity authentication key for volume transfer.
        """
        return pulumi.get(self, "auth_key")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the volume transfer record, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.VolumeTransferV3Link']]:
        """
        The links to the cloud disk transfer record.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the volume transfer record.
        Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the volume ID to be transferred.
        """
        return pulumi.get(self, "volume_id")

