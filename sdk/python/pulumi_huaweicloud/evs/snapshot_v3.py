# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SnapshotV3Args', 'SnapshotV3']

@pulumi.input_type
class SnapshotV3Args:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata_origin: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SnapshotV3 resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.bool] force: Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the user-defined metadata key-value pair.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'metadata'.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_origin is not None:
            pulumi.set(__self__, "metadata_origin", metadata_origin)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the user-defined metadata key-value pair.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter(name="metadataOrigin")
    def metadata_origin(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'metadata'.
        """
        return pulumi.get(self, "metadata_origin")

    @metadata_origin.setter
    def metadata_origin(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata_origin", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SnapshotV3State:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata_origin: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SnapshotV3 resources.
        :param pulumi.Input[_builtins.str] created_at: The time when the snapshot was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.bool] force: Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the user-defined metadata key-value pair.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'metadata'.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: The size of the snapshot in GiB.
        :param pulumi.Input[_builtins.str] status: The status of the snapshot.
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param pulumi.Input[_builtins.str] updated_at: The time when the snapshot was updated.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_origin is not None:
            pulumi.set(__self__, "metadata_origin", metadata_origin)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the user-defined metadata key-value pair.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter(name="metadataOrigin")
    def metadata_origin(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'metadata'.
        """
        return pulumi.get(self, "metadata_origin")

    @metadata_origin.setter
    def metadata_origin(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata_origin", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the snapshot in GiB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the snapshot.
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the snapshot was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Evs/snapshotV3:SnapshotV3")
class SnapshotV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata_origin: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS snapshot (V3) resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        test = huaweicloud.evs.SnapshotV3("test",
            volume_id=volume_id,
            name=name)
        ```

        ## Import

        The EVS v3 snapshot can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/snapshotV3:SnapshotV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `metadata`, `force`.

        It is generally recommended running `pulumi preview` after importing the resource. You can then decide if changes should

        be applied to the resource, or the resource definition should be updated to align with the resource. Also, you can

        ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_snapshot" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              metadata, force,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.bool] force: Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the user-defined metadata key-value pair.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'metadata'.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS snapshot (V3) resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        test = huaweicloud.evs.SnapshotV3("test",
            volume_id=volume_id,
            name=name)
        ```

        ## Import

        The EVS v3 snapshot can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/snapshotV3:SnapshotV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `metadata`, `force`.

        It is generally recommended running `pulumi preview` after importing the resource. You can then decide if changes should

        be applied to the resource, or the resource definition should be updated to align with the resource. Also, you can

        ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_snapshot" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              metadata, force,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param SnapshotV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata_origin: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotV3Args.__new__(SnapshotV3Args)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["force"] = force
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_origin"] = metadata_origin
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(SnapshotV3, __self__).__init__(
            'huaweicloud:Evs/snapshotV3:SnapshotV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            force: Optional[pulumi.Input[_builtins.bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            metadata_origin: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SnapshotV3':
        """
        Get an existing SnapshotV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The time when the snapshot was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.bool] force: Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the user-defined metadata key-value pair.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'metadata'.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: The size of the snapshot in GiB.
        :param pulumi.Input[_builtins.str] status: The status of the snapshot.
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param pulumi.Input[_builtins.str] updated_at: The time when the snapshot was updated.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotV3State.__new__(_SnapshotV3State)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["force"] = force
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_origin"] = metadata_origin
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["volume_id"] = volume_id
        return SnapshotV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the flag for forcibly creating a snapshot. Defaults to **false**.
        """
        return pulumi.get(self, "force")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the user-defined metadata key-value pair.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="metadataOrigin")
    def metadata_origin(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'metadata'.
        """
        return pulumi.get(self, "metadata_origin")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        The size of the snapshot in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the snapshot.
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the snapshot was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

