# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotsV3Result',
    'AwaitableGetSnapshotsV3Result',
    'get_snapshots_v3',
    'get_snapshots_v3_output',
]

@pulumi.output_type
class GetSnapshotsV3Result:
    """
    A collection of values returned by getSnapshotsV3.
    """
    def __init__(__self__, id=None, name=None, region=None, snapshots=None, status=None, volume_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetSnapshotsV3SnapshotResult']:
        """
        The list of the snapshots.
        The snapshots structure is documented below.
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the snapshot.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The ID of the disk to which the snapshot belongs.
        """
        return pulumi.get(self, "volume_id")


class AwaitableGetSnapshotsV3Result(GetSnapshotsV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsV3Result(
            id=self.id,
            name=self.name,
            region=self.region,
            snapshots=self.snapshots,
            status=self.status,
            volume_id=self.volume_id)


def get_snapshots_v3(name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     volume_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsV3Result:
    """
    Use this data source to get the list of EVS v3 snapshots within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Evs.get_snapshots_v3()
    ```


    :param _builtins.str name: Specifies the name of the snapshots. Supports a maximum of `255` characters. This field
           will undergo a fuzzy matching query, the query result is for all snapshots whose names contain this value.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the snapshots.  
           The valid values are as follows:
           + **creating**: The snapshot is in the process of being created.
           + **available**: Snapshot created successfully, can be used.
           + **error**: An error occurred during the snapshot creation process.
           + **deleting**: The snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the snapshot.
           + **rollbacking**: The snapshot is in the process of rolling back data.
           + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
           snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
           system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
    :param _builtins.str volume_id: Specifies the disk ID corresponding to the snapshots.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getSnapshotsV3:getSnapshotsV3', __args__, opts=opts, typ=GetSnapshotsV3Result).value

    return AwaitableGetSnapshotsV3Result(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        status=pulumi.get(__ret__, 'status'),
        volume_id=pulumi.get(__ret__, 'volume_id'))
def get_snapshots_v3_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            volume_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotsV3Result]:
    """
    Use this data source to get the list of EVS v3 snapshots within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Evs.get_snapshots_v3()
    ```


    :param _builtins.str name: Specifies the name of the snapshots. Supports a maximum of `255` characters. This field
           will undergo a fuzzy matching query, the query result is for all snapshots whose names contain this value.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the snapshots.  
           The valid values are as follows:
           + **creating**: The snapshot is in the process of being created.
           + **available**: Snapshot created successfully, can be used.
           + **error**: An error occurred during the snapshot creation process.
           + **deleting**: The snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the snapshot.
           + **rollbacking**: The snapshot is in the process of rolling back data.
           + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
           snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
           system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
    :param _builtins.str volume_id: Specifies the disk ID corresponding to the snapshots.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Evs/getSnapshotsV3:getSnapshotsV3', __args__, opts=opts, typ=GetSnapshotsV3Result)
    return __ret__.apply(lambda __response__: GetSnapshotsV3Result(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        snapshots=pulumi.get(__response__, 'snapshots'),
        status=pulumi.get(__response__, 'status'),
        volume_id=pulumi.get(__response__, 'volume_id')))
