# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotsV5Result',
    'AwaitableGetSnapshotsV5Result',
    'get_snapshots_v5',
    'get_snapshots_v5_output',
]

@pulumi.output_type
class GetSnapshotsV5Result:
    """
    A collection of values returned by getSnapshotsV5.
    """
    def __init__(__self__, availability_zone=None, enterprise_project_id=None, id=None, ids=None, name=None, region=None, snapshot_chain_id=None, snapshot_group_id=None, snapshot_type=None, snapshots=None, sort_dir=None, sort_key=None, status=None, tag_key=None, tags=None, volume_id=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, str):
            raise TypeError("Expected argument 'ids' to be a str")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if snapshot_chain_id and not isinstance(snapshot_chain_id, str):
            raise TypeError("Expected argument 'snapshot_chain_id' to be a str")
        pulumi.set(__self__, "snapshot_chain_id", snapshot_chain_id)
        if snapshot_group_id and not isinstance(snapshot_group_id, str):
            raise TypeError("Expected argument 'snapshot_group_id' to be a str")
        pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_type and not isinstance(snapshot_type, str):
            raise TypeError("Expected argument 'snapshot_type' to be a str")
        pulumi.set(__self__, "snapshot_type", snapshot_type)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tag_key and not isinstance(tag_key, str):
            raise TypeError("Expected argument 'tag_key' to be a str")
        pulumi.set(__self__, "tag_key", tag_key)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        The AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project associated with the snapshot.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The snapshot chain ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The snapshot name. Snapshots with the prefix autobk_snapshot_ are automatically created by the system when
        you create a cloud disk backup. Do not perform the "Delete Cloud Disk Snapshot" or "Roll Back Snapshot to Cloud
        Disk" operations.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="snapshotChainId")
    def snapshot_chain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_chain_id")

    @_builtins.property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[_builtins.str]:
        """
        The snapshot group ID to which the snapshot belongs.
        """
        return pulumi.get(self, "snapshot_group_id")

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[_builtins.str]:
        """
        The snapshot created type. Possible values as follows:
        + **auto**: The snapshot created automatically.
        + **user**: The snapshot created manually.
        + **copy**: The snapshot created by copy.
        """
        return pulumi.get(self, "snapshot_type")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetSnapshotsV5SnapshotResult']:
        """
        The snapshot list.
        The snapshots structure is documented below.
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The snapshot status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        The tags list.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The ID of disk to which the snapshot chain belongs.
        """
        return pulumi.get(self, "volume_id")


class AwaitableGetSnapshotsV5Result(GetSnapshotsV5Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsV5Result(
            availability_zone=self.availability_zone,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ids=self.ids,
            name=self.name,
            region=self.region,
            snapshot_chain_id=self.snapshot_chain_id,
            snapshot_group_id=self.snapshot_group_id,
            snapshot_type=self.snapshot_type,
            snapshots=self.snapshots,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            tag_key=self.tag_key,
            tags=self.tags,
            volume_id=self.volume_id)


def get_snapshots_v5(availability_zone: Optional[_builtins.str] = None,
                     enterprise_project_id: Optional[_builtins.str] = None,
                     id: Optional[_builtins.str] = None,
                     ids: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     snapshot_chain_id: Optional[_builtins.str] = None,
                     snapshot_group_id: Optional[_builtins.str] = None,
                     snapshot_type: Optional[_builtins.str] = None,
                     sort_dir: Optional[_builtins.str] = None,
                     sort_key: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     tag_key: Optional[_builtins.str] = None,
                     tags: Optional[_builtins.str] = None,
                     volume_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsV5Result:
    """
    Use this data source to query the list of EVS v5 snapshots within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_id = config.require_object("volumeId")
    test = huaweicloud.Evs.get_snapshots_v5(volume_id=volume_id)
    ```


    :param _builtins.str availability_zone: Specifies the AZ to which the snapshot chain belongs.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
    :param _builtins.str id: Specifies the snapshot ID.
    :param _builtins.str ids: Specifies the snapshot IDs. The value is in the following
           format: **ids=id1,id2,...,idx**. Returns snapshot information corresponding to a valid id. Invalid ids will be ignored.
    :param _builtins.str name: Specifies the snapshot name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str snapshot_chain_id: Specifies the snapshot chain ID.
    :param _builtins.str snapshot_group_id: Specifies the snapshot group ID.
    :param _builtins.str snapshot_type: Specifies the snapshot type.
    :param _builtins.str sort_dir: Specifies the result sorting order. The default value is **desc**.
           + **desc**: The descending order.
           + **asc**: The ascending order.
    :param _builtins.str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, or **created_at**, and the default value is **created_at**.
    :param _builtins.str status: Specifies the snapshot status.
           The valid values are as follows:
           + **creating**: The snapshot is in the process of being created.
           + **available**: Snapshot created successfully, can be used.
           + **error**: An error occurred during the snapshot creation process.
           + **deleting**: The snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the snapshot.
           + **rollbacking**: The snapshot is in the process of rolling back data.
           + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
           snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
           system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
    :param _builtins.str tag_key: Specifies the tag name used to filter results.
    :param _builtins.str tags: Specifies the key/value pairs used to filter results. The value is in the following
           format: **{"key1":"value1"}**
    :param _builtins.str volume_id: Specifies the ID of disk to which the snapshot belongs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['region'] = region
    __args__['snapshotChainId'] = snapshot_chain_id
    __args__['snapshotGroupId'] = snapshot_group_id
    __args__['snapshotType'] = snapshot_type
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tagKey'] = tag_key
    __args__['tags'] = tags
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getSnapshotsV5:getSnapshotsV5', __args__, opts=opts, typ=GetSnapshotsV5Result).value

    return AwaitableGetSnapshotsV5Result(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        snapshot_chain_id=pulumi.get(__ret__, 'snapshot_chain_id'),
        snapshot_group_id=pulumi.get(__ret__, 'snapshot_group_id'),
        snapshot_type=pulumi.get(__ret__, 'snapshot_type'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        tag_key=pulumi.get(__ret__, 'tag_key'),
        tags=pulumi.get(__ret__, 'tags'),
        volume_id=pulumi.get(__ret__, 'volume_id'))
def get_snapshots_v5_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            ids: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_chain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            tag_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            volume_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotsV5Result]:
    """
    Use this data source to query the list of EVS v5 snapshots within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    volume_id = config.require_object("volumeId")
    test = huaweicloud.Evs.get_snapshots_v5(volume_id=volume_id)
    ```


    :param _builtins.str availability_zone: Specifies the AZ to which the snapshot chain belongs.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
    :param _builtins.str id: Specifies the snapshot ID.
    :param _builtins.str ids: Specifies the snapshot IDs. The value is in the following
           format: **ids=id1,id2,...,idx**. Returns snapshot information corresponding to a valid id. Invalid ids will be ignored.
    :param _builtins.str name: Specifies the snapshot name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str snapshot_chain_id: Specifies the snapshot chain ID.
    :param _builtins.str snapshot_group_id: Specifies the snapshot group ID.
    :param _builtins.str snapshot_type: Specifies the snapshot type.
    :param _builtins.str sort_dir: Specifies the result sorting order. The default value is **desc**.
           + **desc**: The descending order.
           + **asc**: The ascending order.
    :param _builtins.str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, or **created_at**, and the default value is **created_at**.
    :param _builtins.str status: Specifies the snapshot status.
           The valid values are as follows:
           + **creating**: The snapshot is in the process of being created.
           + **available**: Snapshot created successfully, can be used.
           + **error**: An error occurred during the snapshot creation process.
           + **deleting**: The snapshot is in the process of being deleted.
           + **error_deleting**: An error occurred during the deletion process of the snapshot.
           + **rollbacking**: The snapshot is in the process of rolling back data.
           + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
           snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
           system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
    :param _builtins.str tag_key: Specifies the tag name used to filter results.
    :param _builtins.str tags: Specifies the key/value pairs used to filter results. The value is in the following
           format: **{"key1":"value1"}**
    :param _builtins.str volume_id: Specifies the ID of disk to which the snapshot belongs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['region'] = region
    __args__['snapshotChainId'] = snapshot_chain_id
    __args__['snapshotGroupId'] = snapshot_group_id
    __args__['snapshotType'] = snapshot_type
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tagKey'] = tag_key
    __args__['tags'] = tags
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Evs/getSnapshotsV5:getSnapshotsV5', __args__, opts=opts, typ=GetSnapshotsV5Result)
    return __ret__.apply(lambda __response__: GetSnapshotsV5Result(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        snapshot_chain_id=pulumi.get(__response__, 'snapshot_chain_id'),
        snapshot_group_id=pulumi.get(__response__, 'snapshot_group_id'),
        snapshot_type=pulumi.get(__response__, 'snapshot_type'),
        snapshots=pulumi.get(__response__, 'snapshots'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        tag_key=pulumi.get(__response__, 'tag_key'),
        tags=pulumi.get(__response__, 'tags'),
        volume_id=pulumi.get(__response__, 'volume_id')))
