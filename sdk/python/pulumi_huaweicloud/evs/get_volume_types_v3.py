# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVolumeTypesV3Result',
    'AwaitableGetVolumeTypesV3Result',
    'get_volume_types_v3',
    'get_volume_types_v3_output',
]

@pulumi.output_type
class GetVolumeTypesV3Result:
    """
    A collection of values returned by getVolumeTypesV3.
    """
    def __init__(__self__, id=None, region=None, volume_types=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if volume_types and not isinstance(volume_types, list):
            raise TypeError("Expected argument 'volume_types' to be a list")
        pulumi.set(__self__, "volume_types", volume_types)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="volumeTypes")
    def volume_types(self) -> Sequence['outputs.GetVolumeTypesV3VolumeTypeResult']:
        """
        The list of volume types.  
        The volume_types structure is documented below.
        """
        return pulumi.get(self, "volume_types")


class AwaitableGetVolumeTypesV3Result(GetVolumeTypesV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeTypesV3Result(
            id=self.id,
            region=self.region,
            volume_types=self.volume_types)


def get_volume_types_v3(region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeTypesV3Result:
    """
    Use this data source to query the list of EVS v3 volume types within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Evs.get_volume_types_v3()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getVolumeTypesV3:getVolumeTypesV3', __args__, opts=opts, typ=GetVolumeTypesV3Result).value

    return AwaitableGetVolumeTypesV3Result(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        volume_types=pulumi.get(__ret__, 'volume_types'))
def get_volume_types_v3_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumeTypesV3Result]:
    """
    Use this data source to query the list of EVS v3 volume types within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Evs.get_volume_types_v3()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Evs/getVolumeTypesV3:getVolumeTypesV3', __args__, opts=opts, typ=GetVolumeTypesV3Result)
    return __ret__.apply(lambda __response__: GetVolumeTypesV3Result(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        volume_types=pulumi.get(__response__, 'volume_types')))
