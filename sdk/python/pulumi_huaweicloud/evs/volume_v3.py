# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumeV3Args', 'VolumeV3']

@pulumi.input_type
class VolumeV3Args:
    def __init__(__self__, *,
                 volume_type: pulumi.Input[_builtins.str],
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cascade: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disaster_recovery_azs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 multiattach: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 throughput: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a VolumeV3 resource.
        :param pulumi.Input[_builtins.str] volume_type: Specifies the disk type.  
               The Valid values are as follows:
               + **SATA**: Ordinary IO type.
               + **SAS**: High I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SSD**: Ultra-high I/O type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
               <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
               snapshot.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone for the disk.
               If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
               the disk creation fails.
        :param pulumi.Input[_builtins.bool] cascade: Specifies whether to delete all snapshots associated with disk.
               The value can be **true** or **false**. Defaults to **false**.
        :param pulumi.Input[_builtins.str] dedicated_storage_id: Specifies the ID of the DSS storage pool accommodating
               the disk.
        :param pulumi.Input[_builtins.str] description: Specifies the disk description. You can enter up to `85` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] disaster_recovery_azs: Specifies to create multiple AZs that support disaster
               recovery cloud hard drives.
               
               > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
               + Not supported to create a BMS system disk from a BMS image.
               + You can obtain this value by calling the dataSource `Ims.Image`.
        :param pulumi.Input[_builtins.int] iops: Specifies the IOPS(Input/Output Operations Per Second) for the volume.
               The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the key-value pair disk metadata. The length of the key and value
               should not exceed `255` bytes.
               The valid key-value pairs are as follows:
               + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
               for encryption.
               + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
               If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
               If the disk is not created from a data source, the disk is not encrypted by default.
               + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
               directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
               **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
               commands. If this attribute is not specified, the disk device type is VBD.
               
               > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
               <br/>2. There cannot be null value key value pairs in metadata.
        :param pulumi.Input[_builtins.bool] multiattach: Specifies whether the disk is shareable. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the disk name. You can enter up to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the disk size, in GB.
               For system disk, the valid value ranges from `1` GB to `1,024` GB.
               For data disk, the valid value ranges from `10` GB to `32,768` GB.
               
               > There are the following restrictions for configuring this field:
               <br/>1. This parameter is required when creating an empty disk.
               <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
               to the snapshot size.
               <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
               the minimum disk capacity required by min_disk in the image attributes.
               <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
               disk size is equal to the backup size.
               
               > Editing this field has the following restrictions:
               <br/>1. Shrinking the disk is not supported.
               <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
               <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
               the value of `multiattach` must be **false**.
               <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
               must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
               <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
               to view the limitations of disk capacity expansion.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the snapshot ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the disk.
        :param pulumi.Input[_builtins.int] throughput: Specifies the throughput for the volume. The Unit is MiB/s.
               The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
               This field can be changed only when the disk status is Available or In-use.
               
               > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
               [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        """
        pulumi.set(__self__, "volume_type", volume_type)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cascade is not None:
            pulumi.set(__self__, "cascade", cascade)
        if dedicated_storage_id is not None:
            pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disaster_recovery_azs is not None:
            pulumi.set(__self__, "disaster_recovery_azs", disaster_recovery_azs)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if multiattach is not None:
            pulumi.set(__self__, "multiattach", multiattach)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk type.  
        The Valid values are as follows:
        + **SATA**: Ordinary IO type.
        + **SAS**: High I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SSD**: Ultra-high I/O type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
        <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
        snapshot.
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone for the disk.
        If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
        the disk creation fails.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def cascade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all snapshots associated with disk.
        The value can be **true** or **false**. Defaults to **false**.
        """
        return pulumi.get(self, "cascade")

    @cascade.setter
    def cascade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cascade", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DSS storage pool accommodating
        the disk.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @dedicated_storage_id.setter
    def dedicated_storage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_storage_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk description. You can enter up to `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="disasterRecoveryAzs")
    def disaster_recovery_azs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies to create multiple AZs that support disaster
        recovery cloud hard drives.

        > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        """
        return pulumi.get(self, "disaster_recovery_azs")

    @disaster_recovery_azs.setter
    def disaster_recovery_azs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "disaster_recovery_azs", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        + Not supported to create a BMS system disk from a BMS image.
        + You can obtain this value by calling the dataSource `Ims.Image`.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the IOPS(Input/Output Operations Per Second) for the volume.
        The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key-value pair disk metadata. The length of the key and value
        should not exceed `255` bytes.
        The valid key-value pairs are as follows:
        + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
        for encryption.
        + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
        If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
        If the disk is not created from a data source, the disk is not encrypted by default.
        + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
        directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
        **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
        commands. If this attribute is not specified, the disk device type is VBD.

        > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
        <br/>2. There cannot be null value key value pairs in metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def multiattach(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the disk is shareable. Defaults to **false**.
        """
        return pulumi.get(self, "multiattach")

    @multiattach.setter
    def multiattach(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multiattach", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk name. You can enter up to `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk size, in GB.
        For system disk, the valid value ranges from `1` GB to `1,024` GB.
        For data disk, the valid value ranges from `10` GB to `32,768` GB.

        > There are the following restrictions for configuring this field:
        <br/>1. This parameter is required when creating an empty disk.
        <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
        to the snapshot size.
        <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
        the minimum disk capacity required by min_disk in the image attributes.
        <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
        disk size is equal to the backup size.

        > Editing this field has the following restrictions:
        <br/>1. Shrinking the disk is not supported.
        <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
        <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
        the value of `multiattach` must be **false**.
        <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
        must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
        <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
        to view the limitations of disk capacity expansion.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the snapshot ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the disk.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the throughput for the volume. The Unit is MiB/s.
        The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
        This field can be changed only when the disk status is Available or In-use.

        > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
        [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "throughput", value)


@pulumi.input_type
class _VolumeV3State:
    def __init__(__self__, *,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3AttachmentArgs']]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 bootable: Optional[pulumi.Input[_builtins.str]] = None,
                 cascade: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disaster_recovery_azs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 iops_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3IopsAttributeArgs']]]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3LinkArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 multiattach: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 throughput_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3ThroughputAttributeArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_image_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VolumeV3 resources.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeV3AttachmentArgs']]] attachments: The attachment information of the disk.  
               The attachments structure is documented below.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone for the disk.
               If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
               the disk creation fails.
        :param pulumi.Input[_builtins.str] bootable: Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        :param pulumi.Input[_builtins.bool] cascade: Specifies whether to delete all snapshots associated with disk.
               The value can be **true** or **false**. Defaults to **false**.
        :param pulumi.Input[_builtins.str] created_at: The time when the disk was created.
        :param pulumi.Input[_builtins.str] dedicated_storage_id: Specifies the ID of the DSS storage pool accommodating
               the disk.
        :param pulumi.Input[_builtins.str] description: Specifies the disk description. You can enter up to `85` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] disaster_recovery_azs: Specifies to create multiple AZs that support disaster
               recovery cloud hard drives.
               
               > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
               + Not supported to create a BMS system disk from a BMS image.
               + You can obtain this value by calling the dataSource `Ims.Image`.
        :param pulumi.Input[_builtins.int] iops: Specifies the IOPS(Input/Output Operations Per Second) for the volume.
               The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeV3IopsAttributeArgs']]] iops_attributes: The disk IOPS information. This field is returned only when the disk type is **ESSD2** or
               **GPSSD2**.
               The iops_attribute structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeV3LinkArgs']]] links: The disk URI.  
               The links structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the key-value pair disk metadata. The length of the key and value
               should not exceed `255` bytes.
               The valid key-value pairs are as follows:
               + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
               for encryption.
               + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
               If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
               If the disk is not created from a data source, the disk is not encrypted by default.
               + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
               directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
               **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
               commands. If this attribute is not specified, the disk device type is VBD.
               
               > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
               <br/>2. There cannot be null value key value pairs in metadata.
        :param pulumi.Input[_builtins.bool] multiattach: Specifies whether the disk is shareable. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the disk name. You can enter up to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the disk size, in GB.
               For system disk, the valid value ranges from `1` GB to `1,024` GB.
               For data disk, the valid value ranges from `10` GB to `32,768` GB.
               
               > There are the following restrictions for configuring this field:
               <br/>1. This parameter is required when creating an empty disk.
               <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
               to the snapshot size.
               <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
               the minimum disk capacity required by min_disk in the image attributes.
               <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
               disk size is equal to the backup size.
               
               > Editing this field has the following restrictions:
               <br/>1. Shrinking the disk is not supported.
               <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
               <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
               the value of `multiattach` must be **false**.
               <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
               must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
               <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
               to view the limitations of disk capacity expansion.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the snapshot ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        :param pulumi.Input[_builtins.str] snapshot_policy_id: The snapshot policy ID bound to the disk.
        :param pulumi.Input[_builtins.str] status: The disk status.  
               Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the disk.
        :param pulumi.Input[_builtins.int] throughput: Specifies the throughput for the volume. The Unit is MiB/s.
               The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
               This field can be changed only when the disk status is Available or In-use.
               
               > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
               [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        :param pulumi.Input[Sequence[pulumi.Input['VolumeV3ThroughputAttributeArgs']]] throughput_attributes: The disk throughput information. This field is returned only when the disk type is
               **GPSSD2**.
               The throughput_attribute structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The time when the disk was updated.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] volume_image_metadata: The metadata of the disk image.
        :param pulumi.Input[_builtins.str] volume_type: Specifies the disk type.  
               The Valid values are as follows:
               + **SATA**: Ordinary IO type.
               + **SAS**: High I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SSD**: Ultra-high I/O type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
               <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
               snapshot.
        """
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if cascade is not None:
            pulumi.set(__self__, "cascade", cascade)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dedicated_storage_id is not None:
            pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disaster_recovery_azs is not None:
            pulumi.set(__self__, "disaster_recovery_azs", disaster_recovery_azs)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if iops_attributes is not None:
            pulumi.set(__self__, "iops_attributes", iops_attributes)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if multiattach is not None:
            pulumi.set(__self__, "multiattach", multiattach)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshot_policy_id is not None:
            pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if throughput_attributes is not None:
            pulumi.set(__self__, "throughput_attributes", throughput_attributes)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_image_metadata is not None:
            pulumi.set(__self__, "volume_image_metadata", volume_image_metadata)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3AttachmentArgs']]]]:
        """
        The attachment information of the disk.  
        The attachments structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3AttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone for the disk.
        If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
        the disk creation fails.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        """
        return pulumi.get(self, "bootable")

    @bootable.setter
    def bootable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bootable", value)

    @_builtins.property
    @pulumi.getter
    def cascade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all snapshots associated with disk.
        The value can be **true** or **false**. Defaults to **false**.
        """
        return pulumi.get(self, "cascade")

    @cascade.setter
    def cascade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cascade", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DSS storage pool accommodating
        the disk.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @dedicated_storage_id.setter
    def dedicated_storage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_storage_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk description. You can enter up to `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="disasterRecoveryAzs")
    def disaster_recovery_azs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies to create multiple AZs that support disaster
        recovery cloud hard drives.

        > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        """
        return pulumi.get(self, "disaster_recovery_azs")

    @disaster_recovery_azs.setter
    def disaster_recovery_azs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "disaster_recovery_azs", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        + Not supported to create a BMS system disk from a BMS image.
        + You can obtain this value by calling the dataSource `Ims.Image`.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the IOPS(Input/Output Operations Per Second) for the volume.
        The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="iopsAttributes")
    def iops_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3IopsAttributeArgs']]]]:
        """
        The disk IOPS information. This field is returned only when the disk type is **ESSD2** or
        **GPSSD2**.
        The iops_attribute structure is documented below.
        """
        return pulumi.get(self, "iops_attributes")

    @iops_attributes.setter
    def iops_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3IopsAttributeArgs']]]]):
        pulumi.set(self, "iops_attributes", value)

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3LinkArgs']]]]:
        """
        The disk URI.  
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3LinkArgs']]]]):
        pulumi.set(self, "links", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key-value pair disk metadata. The length of the key and value
        should not exceed `255` bytes.
        The valid key-value pairs are as follows:
        + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
        for encryption.
        + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
        If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
        If the disk is not created from a data source, the disk is not encrypted by default.
        + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
        directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
        **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
        commands. If this attribute is not specified, the disk device type is VBD.

        > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
        <br/>2. There cannot be null value key value pairs in metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def multiattach(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the disk is shareable. Defaults to **false**.
        """
        return pulumi.get(self, "multiattach")

    @multiattach.setter
    def multiattach(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multiattach", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk name. You can enter up to `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk size, in GB.
        For system disk, the valid value ranges from `1` GB to `1,024` GB.
        For data disk, the valid value ranges from `10` GB to `32,768` GB.

        > There are the following restrictions for configuring this field:
        <br/>1. This parameter is required when creating an empty disk.
        <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
        to the snapshot size.
        <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
        the minimum disk capacity required by min_disk in the image attributes.
        <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
        disk size is equal to the backup size.

        > Editing this field has the following restrictions:
        <br/>1. Shrinking the disk is not supported.
        <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
        <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
        the value of `multiattach` must be **false**.
        <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
        must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
        <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
        to view the limitations of disk capacity expansion.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the snapshot ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot policy ID bound to the disk.
        """
        return pulumi.get(self, "snapshot_policy_id")

    @snapshot_policy_id.setter
    def snapshot_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The disk status.  
        Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the disk.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the throughput for the volume. The Unit is MiB/s.
        The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
        This field can be changed only when the disk status is Available or In-use.

        > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
        [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "throughput", value)

    @_builtins.property
    @pulumi.getter(name="throughputAttributes")
    def throughput_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3ThroughputAttributeArgs']]]]:
        """
        The disk throughput information. This field is returned only when the disk type is
        **GPSSD2**.
        The throughput_attribute structure is documented below.
        """
        return pulumi.get(self, "throughput_attributes")

    @throughput_attributes.setter
    def throughput_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeV3ThroughputAttributeArgs']]]]):
        pulumi.set(self, "throughput_attributes", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the disk was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The metadata of the disk image.
        """
        return pulumi.get(self, "volume_image_metadata")

    @volume_image_metadata.setter
    def volume_image_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volume_image_metadata", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk type.  
        The Valid values are as follows:
        + **SATA**: Ordinary IO type.
        + **SAS**: High I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SSD**: Ultra-high I/O type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
        <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
        snapshot.
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.type_token("huaweicloud:Evs/volumeV3:VolumeV3")
class VolumeV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cascade: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disaster_recovery_azs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 multiattach: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS v3 volume resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_type = config.require_object("volumeType")
        availability_zone = config.require_object("availabilityZone")
        image_id = config.require_object("imageId")
        name = config.require_object("name")
        size = config.require_object("size")
        test = huaweicloud.evs.VolumeV3("test",
            volume_type=volume_type,
            availability_zone=availability_zone,
            image_id=image_id,
            name=name,
            size=size,
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The EVS v3 volume can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/volumeV3:VolumeV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `volume_type`, `disaster_recovery_azs`,

        `dedicated_storage_id`, and `cascade`. It is generally recommended running pulumi preview after importing a disk.

        You can then decide if changes should be applied to the disk, or the resource definition should be updated to align

        with the disk. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_volume" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              volume_type, disaster_recovery_azs, dedicated_storage_id, cascade,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone for the disk.
               If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
               the disk creation fails.
        :param pulumi.Input[_builtins.bool] cascade: Specifies whether to delete all snapshots associated with disk.
               The value can be **true** or **false**. Defaults to **false**.
        :param pulumi.Input[_builtins.str] dedicated_storage_id: Specifies the ID of the DSS storage pool accommodating
               the disk.
        :param pulumi.Input[_builtins.str] description: Specifies the disk description. You can enter up to `85` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] disaster_recovery_azs: Specifies to create multiple AZs that support disaster
               recovery cloud hard drives.
               
               > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
               + Not supported to create a BMS system disk from a BMS image.
               + You can obtain this value by calling the dataSource `Ims.Image`.
        :param pulumi.Input[_builtins.int] iops: Specifies the IOPS(Input/Output Operations Per Second) for the volume.
               The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the key-value pair disk metadata. The length of the key and value
               should not exceed `255` bytes.
               The valid key-value pairs are as follows:
               + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
               for encryption.
               + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
               If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
               If the disk is not created from a data source, the disk is not encrypted by default.
               + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
               directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
               **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
               commands. If this attribute is not specified, the disk device type is VBD.
               
               > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
               <br/>2. There cannot be null value key value pairs in metadata.
        :param pulumi.Input[_builtins.bool] multiattach: Specifies whether the disk is shareable. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the disk name. You can enter up to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the disk size, in GB.
               For system disk, the valid value ranges from `1` GB to `1,024` GB.
               For data disk, the valid value ranges from `10` GB to `32,768` GB.
               
               > There are the following restrictions for configuring this field:
               <br/>1. This parameter is required when creating an empty disk.
               <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
               to the snapshot size.
               <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
               the minimum disk capacity required by min_disk in the image attributes.
               <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
               disk size is equal to the backup size.
               
               > Editing this field has the following restrictions:
               <br/>1. Shrinking the disk is not supported.
               <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
               <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
               the value of `multiattach` must be **false**.
               <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
               must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
               <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
               to view the limitations of disk capacity expansion.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the snapshot ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the disk.
        :param pulumi.Input[_builtins.int] throughput: Specifies the throughput for the volume. The Unit is MiB/s.
               The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
               This field can be changed only when the disk status is Available or In-use.
               
               > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
               [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        :param pulumi.Input[_builtins.str] volume_type: Specifies the disk type.  
               The Valid values are as follows:
               + **SATA**: Ordinary IO type.
               + **SAS**: High I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SSD**: Ultra-high I/O type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
               <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
               snapshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS v3 volume resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_type = config.require_object("volumeType")
        availability_zone = config.require_object("availabilityZone")
        image_id = config.require_object("imageId")
        name = config.require_object("name")
        size = config.require_object("size")
        test = huaweicloud.evs.VolumeV3("test",
            volume_type=volume_type,
            availability_zone=availability_zone,
            image_id=image_id,
            name=name,
            size=size,
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The EVS v3 volume can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/volumeV3:VolumeV3 test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `volume_type`, `disaster_recovery_azs`,

        `dedicated_storage_id`, and `cascade`. It is generally recommended running pulumi preview after importing a disk.

        You can then decide if changes should be applied to the disk, or the resource definition should be updated to align

        with the disk. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_evsv3_volume" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              volume_type, disaster_recovery_azs, dedicated_storage_id, cascade,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param VolumeV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cascade: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_storage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disaster_recovery_azs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 multiattach: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeV3Args.__new__(VolumeV3Args)

            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["cascade"] = cascade
            __props__.__dict__["dedicated_storage_id"] = dedicated_storage_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disaster_recovery_azs"] = disaster_recovery_azs
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["iops"] = iops
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["multiattach"] = multiattach
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["size"] = size
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["throughput"] = throughput
            if volume_type is None and not opts.urn:
                raise TypeError("Missing required property 'volume_type'")
            __props__.__dict__["volume_type"] = volume_type
            __props__.__dict__["attachments"] = None
            __props__.__dict__["bootable"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["iops_attributes"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["snapshot_policy_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["throughput_attributes"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["volume_image_metadata"] = None
        super(VolumeV3, __self__).__init__(
            'huaweicloud:Evs/volumeV3:VolumeV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3AttachmentArgs', 'VolumeV3AttachmentArgsDict']]]]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            bootable: Optional[pulumi.Input[_builtins.str]] = None,
            cascade: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_storage_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disaster_recovery_azs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.int]] = None,
            iops_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3IopsAttributeArgs', 'VolumeV3IopsAttributeArgsDict']]]]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3LinkArgs', 'VolumeV3LinkArgsDict']]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            multiattach: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            throughput: Optional[pulumi.Input[_builtins.int]] = None,
            throughput_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3ThroughputAttributeArgs', 'VolumeV3ThroughputAttributeArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            volume_image_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            volume_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'VolumeV3':
        """
        Get an existing VolumeV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3AttachmentArgs', 'VolumeV3AttachmentArgsDict']]]] attachments: The attachment information of the disk.  
               The attachments structure is documented below.
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone for the disk.
               If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
               the disk creation fails.
        :param pulumi.Input[_builtins.str] bootable: Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        :param pulumi.Input[_builtins.bool] cascade: Specifies whether to delete all snapshots associated with disk.
               The value can be **true** or **false**. Defaults to **false**.
        :param pulumi.Input[_builtins.str] created_at: The time when the disk was created.
        :param pulumi.Input[_builtins.str] dedicated_storage_id: Specifies the ID of the DSS storage pool accommodating
               the disk.
        :param pulumi.Input[_builtins.str] description: Specifies the disk description. You can enter up to `85` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] disaster_recovery_azs: Specifies to create multiple AZs that support disaster
               recovery cloud hard drives.
               
               > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
               + Not supported to create a BMS system disk from a BMS image.
               + You can obtain this value by calling the dataSource `Ims.Image`.
        :param pulumi.Input[_builtins.int] iops: Specifies the IOPS(Input/Output Operations Per Second) for the volume.
               The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3IopsAttributeArgs', 'VolumeV3IopsAttributeArgsDict']]]] iops_attributes: The disk IOPS information. This field is returned only when the disk type is **ESSD2** or
               **GPSSD2**.
               The iops_attribute structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3LinkArgs', 'VolumeV3LinkArgsDict']]]] links: The disk URI.  
               The links structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Specifies the key-value pair disk metadata. The length of the key and value
               should not exceed `255` bytes.
               The valid key-value pairs are as follows:
               + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
               for encryption.
               + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
               If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
               If the disk is not created from a data source, the disk is not encrypted by default.
               + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
               directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
               **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
               commands. If this attribute is not specified, the disk device type is VBD.
               
               > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
               <br/>2. There cannot be null value key value pairs in metadata.
        :param pulumi.Input[_builtins.bool] multiattach: Specifies whether the disk is shareable. Defaults to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the disk name. You can enter up to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the disk size, in GB.
               For system disk, the valid value ranges from `1` GB to `1,024` GB.
               For data disk, the valid value ranges from `10` GB to `32,768` GB.
               
               > There are the following restrictions for configuring this field:
               <br/>1. This parameter is required when creating an empty disk.
               <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
               to the snapshot size.
               <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
               the minimum disk capacity required by min_disk in the image attributes.
               <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
               disk size is equal to the backup size.
               
               > Editing this field has the following restrictions:
               <br/>1. Shrinking the disk is not supported.
               <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
               <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
               the value of `multiattach` must be **false**.
               <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
               must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
               <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
               to view the limitations of disk capacity expansion.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the snapshot ID from which to create the disk.  
               + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        :param pulumi.Input[_builtins.str] snapshot_policy_id: The snapshot policy ID bound to the disk.
        :param pulumi.Input[_builtins.str] status: The disk status.  
               Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the disk.
        :param pulumi.Input[_builtins.int] throughput: Specifies the throughput for the volume. The Unit is MiB/s.
               The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
               This field can be changed only when the disk status is Available or In-use.
               
               > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
               [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeV3ThroughputAttributeArgs', 'VolumeV3ThroughputAttributeArgsDict']]]] throughput_attributes: The disk throughput information. This field is returned only when the disk type is
               **GPSSD2**.
               The throughput_attribute structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The time when the disk was updated.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] volume_image_metadata: The metadata of the disk image.
        :param pulumi.Input[_builtins.str] volume_type: Specifies the disk type.  
               The Valid values are as follows:
               + **SATA**: Ordinary IO type.
               + **SAS**: High I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SSD**: Ultra-high I/O type.
               + **ESSD**: Extreme SSD type.
               + **GPSSD2**: General purpose SSD V2 type.
               + **ESSD2**: Extreme SSD V2 type.
               
               > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
               <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
               snapshot.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeV3State.__new__(_VolumeV3State)

        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["bootable"] = bootable
        __props__.__dict__["cascade"] = cascade
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dedicated_storage_id"] = dedicated_storage_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disaster_recovery_azs"] = disaster_recovery_azs
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["iops"] = iops
        __props__.__dict__["iops_attributes"] = iops_attributes
        __props__.__dict__["links"] = links
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["multiattach"] = multiattach
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["snapshot_policy_id"] = snapshot_policy_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["throughput"] = throughput
        __props__.__dict__["throughput_attributes"] = throughput_attributes
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["volume_image_metadata"] = volume_image_metadata
        __props__.__dict__["volume_type"] = volume_type
        return VolumeV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Sequence['outputs.VolumeV3Attachment']]:
        """
        The attachment information of the disk.  
        The attachments structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the availability zone for the disk.
        If the specified AZ does not exist or the specified AZ is different from the AZ where the backup is located,
        the disk creation fails.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter
    def cascade(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete all snapshots associated with disk.
        The value can be **true** or **false**. Defaults to **false**.
        """
        return pulumi.get(self, "cascade")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the DSS storage pool accommodating
        the disk.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the disk description. You can enter up to `85` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="disasterRecoveryAzs")
    def disaster_recovery_azs(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies to create multiple AZs that support disaster
        recovery cloud hard drives.

        > Specifies either `availability_zone` or `disaster_recovery_azs`, not both.
        """
        return pulumi.get(self, "disaster_recovery_azs")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        + Not supported to create a BMS system disk from a BMS image.
        + You can obtain this value by calling the dataSource `Ims.Image`.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the IOPS(Input/Output Operations Per Second) for the volume.
        The field is valid and required when `volume_type` is set to **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="iopsAttributes")
    def iops_attributes(self) -> pulumi.Output[Sequence['outputs.VolumeV3IopsAttribute']]:
        """
        The disk IOPS information. This field is returned only when the disk type is **ESSD2** or
        **GPSSD2**.
        The iops_attribute structure is documented below.
        """
        return pulumi.get(self, "iops_attributes")

    @_builtins.property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.VolumeV3Link']]:
        """
        The disk URI.  
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key-value pair disk metadata. The length of the key and value
        should not exceed `255` bytes.
        The valid key-value pairs are as follows:
        + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
        for encryption.
        + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
        If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
        If the disk is not created from a data source, the disk is not encrypted by default.
        + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to
        directly access the underlying storage media and supports SCSI reservation commands. If this attribute is set to
        **false**, the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write
        commands. If this attribute is not specified, the disk device type is VBD.

        > 1. You can also enter other key-value pairs according to the requirements for creating a disk.
        <br/>2. There cannot be null value key value pairs in metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def multiattach(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the disk is shareable. Defaults to **false**.
        """
        return pulumi.get(self, "multiattach")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the disk name. You can enter up to `64` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the disk size, in GB.
        For system disk, the valid value ranges from `1` GB to `1,024` GB.
        For data disk, the valid value ranges from `10` GB to `32,768` GB.

        > There are the following restrictions for configuring this field:
        <br/>1. This parameter is required when creating an empty disk.
        <br/>2. This parameter is required when creating a disk from a snapshot. The disk size must be greater than or equal
        to the snapshot size.
        <br/>3. This parameter is required when creating a disk from an image. The disk size must be greater than or equal to
        the minimum disk capacity required by min_disk in the image attributes.
        <br/>4. This parameter is optional when you create the disk from a backup. If this parameter is not specified, the
        disk size is equal to the backup size.

        > Editing this field has the following restrictions:
        <br/>1. Shrinking the disk is not supported.
        <br/>2. If the status of the to-be-expanded disk is **available**, there are no restrictions.
        <br/>3. If the status of the to-be-expanded disk is **in-use**, a shared disk cannot be expanded, which means that
        the value of `multiattach` must be **false**.
        <br/>4. If the status of the to-be-expanded disk is **in-use**, the status of the server to which the disk attached
        must be **ACTIVE**, **PAUSED**, **SUSPENDED**, or **SHUTOFF**.
        <br/>5. Please refer to [Notes and Constraints](https://support.huaweicloud.com/intl/en-us/productdesc-evs/evs_01_0085.html)
        to view the limitations of disk capacity expansion.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the snapshot ID from which to create the disk.  
        + Only one of `image_id` or `snapshot_id` can be specified, they cannot be used together.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot policy ID bound to the disk.
        """
        return pulumi.get(self, "snapshot_policy_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The disk status.  
        Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the disk.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the throughput for the volume. The Unit is MiB/s.
        The field is valid and required when `volume_type` is set to **GPSSD2**, other types cannot be set.
        This field can be changed only when the disk status is Available or In-use.

        > Before configuring the parameters `volume_type`, `iops`, and `throughput`, please refer to
        [Disk Types and Performance](https://support.huaweicloud.com/intl/en-us/productdesc-evs/en-us_topic_0014580744.html).
        """
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="throughputAttributes")
    def throughput_attributes(self) -> pulumi.Output[Sequence['outputs.VolumeV3ThroughputAttribute']]:
        """
        The disk throughput information. This field is returned only when the disk type is
        **GPSSD2**.
        The throughput_attribute structure is documented below.
        """
        return pulumi.get(self, "throughput_attributes")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the disk was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The metadata of the disk image.
        """
        return pulumi.get(self, "volume_image_metadata")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the disk type.  
        The Valid values are as follows:
        + **SATA**: Ordinary IO type.
        + **SAS**: High I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SSD**: Ultra-high I/O type.
        + **ESSD**: Extreme SSD type.
        + **GPSSD2**: General purpose SSD V2 type.
        + **ESSD2**: Extreme SSD V2 type.

        > 1. When the specified disk type does not exist in the availability zone, creating the disk fails.
        <br/>2. When creating a disk from a snapshot, the `volume_type` field must be consistent with the source disk of the
        snapshot.
        """
        return pulumi.get(self, "volume_type")

