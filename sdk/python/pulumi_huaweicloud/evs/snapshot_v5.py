# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnapshotV5Args', 'SnapshotV5']

@pulumi.input_type
class SnapshotV5Args:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 instant_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SnapshotV5 resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID for the snapshot.
        :param pulumi.Input[_builtins.bool] incremental: Specifies whether to create an incremental snapshot. Default is **true**.
        :param pulumi.Input[_builtins.bool] instant_access: Specifies whether to enable instant access for the snapshot. Possible values are
               **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
               or SATA. Only can be set **true** if it was **true** at created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to be associated with the snapshot.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if instant_access is not None:
            pulumi.set(__self__, "instant_access", instant_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID for the snapshot.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to create an incremental snapshot. Default is **true**.
        """
        return pulumi.get(self, "incremental")

    @incremental.setter
    def incremental(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental", value)

    @_builtins.property
    @pulumi.getter(name="instantAccess")
    def instant_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable instant access for the snapshot. Possible values are
        **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
        or SATA. Only can be set **true** if it was **true** at created.
        """
        return pulumi.get(self, "instant_access")

    @instant_access.setter
    def instant_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "instant_access", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to be associated with the snapshot.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SnapshotV5State:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 instant_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 instant_access_retention_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_at: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_chains: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotV5SnapshotChainArgs']]]] = None,
                 snapshot_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SnapshotV5 resources.
        :param pulumi.Input[_builtins.str] availability_zone: The AZ to which the snapshot chain belongs.
        :param pulumi.Input[_builtins.str] category: The category of snapshot chain.
        :param pulumi.Input[_builtins.str] cmk_id: The key ID of the volume to which the snapshot belongs.
        :param pulumi.Input[_builtins.str] created_at: The time when the snapshot chain was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.str] encrypt_algorithm: The algorithm of the encrypted snapshot.
        :param pulumi.Input[_builtins.bool] encrypted: Whether the snapshot is encrypted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID for the snapshot.
        :param pulumi.Input[_builtins.bool] incremental: Specifies whether to create an incremental snapshot. Default is **true**.
        :param pulumi.Input[_builtins.bool] instant_access: Specifies whether to enable instant access for the snapshot. Possible values are
               **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
               or SATA. Only can be set **true** if it was **true** at created.
        :param pulumi.Input[_builtins.str] instant_access_retention_at: The retention time of the snapshot high-speed availability function. After the
               retention time expires, the snapshot high-speed availability function will be automatically disabled.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] progress: The snapshot creation progress.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retention_at: The duration which the snapshot is retentained.
        :param pulumi.Input[_builtins.int] size: The size of the snapshot, in GiB.
        :param pulumi.Input[Sequence[pulumi.Input['SnapshotV5SnapshotChainArgs']]] snapshot_chains: The snapshot chain list to which the snapshot belongs.
               The snapshot_chains structure is documented below.
        :param pulumi.Input[_builtins.str] snapshot_group_id: The snapshot group ID to which the snapshot belongs.
        :param pulumi.Input[_builtins.str] snapshot_type: The snapshot creation source. Possible values as follows:
               + **auto**: The snapshot created automatically.
               + **user**: The snapshot created manually.
               + **copy**: The snapshot created by copy.
        :param pulumi.Input[_builtins.str] status: The status of the snapshot.
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to be associated with the snapshot.
        :param pulumi.Input[_builtins.str] updated_at: The time when the snapshot chain was updated.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if encrypt_algorithm is not None:
            pulumi.set(__self__, "encrypt_algorithm", encrypt_algorithm)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if incremental is not None:
            pulumi.set(__self__, "incremental", incremental)
        if instant_access is not None:
            pulumi.set(__self__, "instant_access", instant_access)
        if instant_access_retention_at is not None:
            pulumi.set(__self__, "instant_access_retention_at", instant_access_retention_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_at is not None:
            pulumi.set(__self__, "retention_at", retention_at)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_chains is not None:
            pulumi.set(__self__, "snapshot_chains", snapshot_chains)
        if snapshot_group_id is not None:
            pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_type is not None:
            pulumi.set(__self__, "snapshot_type", snapshot_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The category of snapshot chain.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key ID of the volume to which the snapshot belongs.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmk_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="encryptAlgorithm")
    def encrypt_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The algorithm of the encrypted snapshot.
        """
        return pulumi.get(self, "encrypt_algorithm")

    @encrypt_algorithm.setter
    def encrypt_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypt_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the snapshot is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "encrypted", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID for the snapshot.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to create an incremental snapshot. Default is **true**.
        """
        return pulumi.get(self, "incremental")

    @incremental.setter
    def incremental(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental", value)

    @_builtins.property
    @pulumi.getter(name="instantAccess")
    def instant_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable instant access for the snapshot. Possible values are
        **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
        or SATA. Only can be set **true** if it was **true** at created.
        """
        return pulumi.get(self, "instant_access")

    @instant_access.setter
    def instant_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "instant_access", value)

    @_builtins.property
    @pulumi.getter(name="instantAccessRetentionAt")
    def instant_access_retention_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The retention time of the snapshot high-speed availability function. After the
        retention time expires, the snapshot high-speed availability function will be automatically disabled.
        """
        return pulumi.get(self, "instant_access_retention_at")

    @instant_access_retention_at.setter
    def instant_access_retention_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instant_access_retention_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot creation progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionAt")
    def retention_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The duration which the snapshot is retentained.
        """
        return pulumi.get(self, "retention_at")

    @retention_at.setter
    def retention_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retention_at", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the snapshot, in GiB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotChains")
    def snapshot_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotV5SnapshotChainArgs']]]]:
        """
        The snapshot chain list to which the snapshot belongs.
        The snapshot_chains structure is documented below.
        """
        return pulumi.get(self, "snapshot_chains")

    @snapshot_chains.setter
    def snapshot_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotV5SnapshotChainArgs']]]]):
        pulumi.set(self, "snapshot_chains", value)

    @_builtins.property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot group ID to which the snapshot belongs.
        """
        return pulumi.get(self, "snapshot_group_id")

    @snapshot_group_id.setter
    def snapshot_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_group_id", value)

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot creation source. Possible values as follows:
        + **auto**: The snapshot created automatically.
        + **user**: The snapshot created manually.
        + **copy**: The snapshot created by copy.
        """
        return pulumi.get(self, "snapshot_type")

    @snapshot_type.setter
    def snapshot_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the snapshot.
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to be associated with the snapshot.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Evs/snapshotV5:SnapshotV5")
class SnapshotV5(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 instant_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EVS snapshot (V5) resource within HuaweiCloud.

        > Before using this resource, ensure that there is no snapshot being created under the volume.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        description = config.require_object("description")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        instant_access = config.require_object("instantAccess")
        incremental = config.require_object("incremental")
        test = huaweicloud.evs.SnapshotV5("test",
            volume_id=volume_id,
            name=name,
            description=description,
            enterprise_project_id=enterprise_project_id,
            instant_access=instant_access,
            incremental=incremental,
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        The EVS v5 snapshot can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/snapshotV5:SnapshotV5 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID for the snapshot.
        :param pulumi.Input[_builtins.bool] incremental: Specifies whether to create an incremental snapshot. Default is **true**.
        :param pulumi.Input[_builtins.bool] instant_access: Specifies whether to enable instant access for the snapshot. Possible values are
               **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
               or SATA. Only can be set **true** if it was **true** at created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to be associated with the snapshot.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotV5Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EVS snapshot (V5) resource within HuaweiCloud.

        > Before using this resource, ensure that there is no snapshot being created under the volume.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        name = config.require_object("name")
        description = config.require_object("description")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        instant_access = config.require_object("instantAccess")
        incremental = config.require_object("incremental")
        test = huaweicloud.evs.SnapshotV5("test",
            volume_id=volume_id,
            name=name,
            description=description,
            enterprise_project_id=enterprise_project_id,
            instant_access=instant_access,
            incremental=incremental,
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        The EVS v5 snapshot can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Evs/snapshotV5:SnapshotV5 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotV5Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotV5Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incremental: Optional[pulumi.Input[_builtins.bool]] = None,
                 instant_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotV5Args.__new__(SnapshotV5Args)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["incremental"] = incremental
            __props__.__dict__["instant_access"] = instant_access
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["availability_zone"] = None
            __props__.__dict__["category"] = None
            __props__.__dict__["cmk_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["encrypt_algorithm"] = None
            __props__.__dict__["encrypted"] = None
            __props__.__dict__["instant_access_retention_at"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["retention_at"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["snapshot_chains"] = None
            __props__.__dict__["snapshot_group_id"] = None
            __props__.__dict__["snapshot_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(SnapshotV5, __self__).__init__(
            'huaweicloud:Evs/snapshotV5:SnapshotV5',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            encrypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            incremental: Optional[pulumi.Input[_builtins.bool]] = None,
            instant_access: Optional[pulumi.Input[_builtins.bool]] = None,
            instant_access_retention_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            retention_at: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            snapshot_chains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SnapshotV5SnapshotChainArgs', 'SnapshotV5SnapshotChainArgsDict']]]]] = None,
            snapshot_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SnapshotV5':
        """
        Get an existing SnapshotV5 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_zone: The AZ to which the snapshot chain belongs.
        :param pulumi.Input[_builtins.str] category: The category of snapshot chain.
        :param pulumi.Input[_builtins.str] cmk_id: The key ID of the volume to which the snapshot belongs.
        :param pulumi.Input[_builtins.str] created_at: The time when the snapshot chain was created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the snapshot. Supports a maximum of `85` characters.
        :param pulumi.Input[_builtins.str] encrypt_algorithm: The algorithm of the encrypted snapshot.
        :param pulumi.Input[_builtins.bool] encrypted: Whether the snapshot is encrypted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID for the snapshot.
        :param pulumi.Input[_builtins.bool] incremental: Specifies whether to create an incremental snapshot. Default is **true**.
        :param pulumi.Input[_builtins.bool] instant_access: Specifies whether to enable instant access for the snapshot. Possible values are
               **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
               or SATA. Only can be set **true** if it was **true** at created.
        :param pulumi.Input[_builtins.str] instant_access_retention_at: The retention time of the snapshot high-speed availability function. After the
               retention time expires, the snapshot high-speed availability function will be automatically disabled.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the snapshot. Supports a maximum of `64` characters.
        :param pulumi.Input[_builtins.str] progress: The snapshot creation progress.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retention_at: The duration which the snapshot is retentained.
        :param pulumi.Input[_builtins.int] size: The size of the snapshot, in GiB.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SnapshotV5SnapshotChainArgs', 'SnapshotV5SnapshotChainArgsDict']]]] snapshot_chains: The snapshot chain list to which the snapshot belongs.
               The snapshot_chains structure is documented below.
        :param pulumi.Input[_builtins.str] snapshot_group_id: The snapshot group ID to which the snapshot belongs.
        :param pulumi.Input[_builtins.str] snapshot_type: The snapshot creation source. Possible values as follows:
               + **auto**: The snapshot created automatically.
               + **user**: The snapshot created manually.
               + **copy**: The snapshot created by copy.
        :param pulumi.Input[_builtins.str] status: The status of the snapshot.
               The valid values are as follows:
               + **creating**: The snapshot is in the process of being created.
               + **available**: Snapshot created successfully, can be used.
               + **error**: An error occurred during the snapshot creation process.
               + **deleting**: The snapshot is in the process of being deleted.
               + **error_deleting**: An error occurred during the deletion process of the snapshot.
               + **rollbacking**: The snapshot is in the process of rolling back data.
               + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
               snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
               system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to be associated with the snapshot.
        :param pulumi.Input[_builtins.str] updated_at: The time when the snapshot chain was updated.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the source cloud disk for the snapshot.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotV5State.__new__(_SnapshotV5State)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["category"] = category
        __props__.__dict__["cmk_id"] = cmk_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["encrypt_algorithm"] = encrypt_algorithm
        __props__.__dict__["encrypted"] = encrypted
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["incremental"] = incremental
        __props__.__dict__["instant_access"] = instant_access
        __props__.__dict__["instant_access_retention_at"] = instant_access_retention_at
        __props__.__dict__["name"] = name
        __props__.__dict__["progress"] = progress
        __props__.__dict__["region"] = region
        __props__.__dict__["retention_at"] = retention_at
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_chains"] = snapshot_chains
        __props__.__dict__["snapshot_group_id"] = snapshot_group_id
        __props__.__dict__["snapshot_type"] = snapshot_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["volume_id"] = volume_id
        return SnapshotV5(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        The AZ to which the snapshot chain belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[_builtins.str]:
        """
        The category of snapshot chain.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> pulumi.Output[_builtins.str]:
        """
        The key ID of the volume to which the snapshot belongs.
        """
        return pulumi.get(self, "cmk_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the snapshot chain was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the snapshot. Supports a maximum of `85` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="encryptAlgorithm")
    def encrypt_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The algorithm of the encrypted snapshot.
        """
        return pulumi.get(self, "encrypt_algorithm")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the snapshot is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID for the snapshot.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to create an incremental snapshot. Default is **true**.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="instantAccess")
    def instant_access(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable instant access for the snapshot. Possible values are
        **true** (enable) and **false** (disable). Default is **false**. The function not supported if the volume type is SAS
        or SATA. Only can be set **true** if it was **true** at created.
        """
        return pulumi.get(self, "instant_access")

    @_builtins.property
    @pulumi.getter(name="instantAccessRetentionAt")
    def instant_access_retention_at(self) -> pulumi.Output[_builtins.str]:
        """
        The retention time of the snapshot high-speed availability function. After the
        retention time expires, the snapshot high-speed availability function will be automatically disabled.
        """
        return pulumi.get(self, "instant_access_retention_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the snapshot. Supports a maximum of `64` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot creation progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="retentionAt")
    def retention_at(self) -> pulumi.Output[_builtins.str]:
        """
        The duration which the snapshot is retentained.
        """
        return pulumi.get(self, "retention_at")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        The size of the snapshot, in GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotChains")
    def snapshot_chains(self) -> pulumi.Output[Sequence['outputs.SnapshotV5SnapshotChain']]:
        """
        The snapshot chain list to which the snapshot belongs.
        The snapshot_chains structure is documented below.
        """
        return pulumi.get(self, "snapshot_chains")

    @_builtins.property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot group ID to which the snapshot belongs.
        """
        return pulumi.get(self, "snapshot_group_id")

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot creation source. Possible values as follows:
        + **auto**: The snapshot created automatically.
        + **user**: The snapshot created manually.
        + **copy**: The snapshot created by copy.
        """
        return pulumi.get(self, "snapshot_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the snapshot.
        The valid values are as follows:
        + **creating**: The snapshot is in the process of being created.
        + **available**: Snapshot created successfully, can be used.
        + **error**: An error occurred during the snapshot creation process.
        + **deleting**: The snapshot is in the process of being deleted.
        + **error_deleting**: An error occurred during the deletion process of the snapshot.
        + **rollbacking**: The snapshot is in the process of rolling back data.
        + **backing-up**: Through the OpenStack native API, backups can be created directly from snapshots, at this time, the
        snapshot status will change to **backing-up**. During the process of creating a backup of a disk through an API, the
        system will automatically create a snapshot, at this time, the snapshot status is **backing-up**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to be associated with the snapshot.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the snapshot chain was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source cloud disk for the snapshot.
        """
        return pulumi.get(self, "volume_id")

