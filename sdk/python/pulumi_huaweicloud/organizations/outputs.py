# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccountsAccountResult',
    'GetCloseAccountStatusCloseAccountStatusResult',
    'GetCreateAccountStatusCreateAccountStatusResult',
    'GetOrganizationalUnitsChildrenResult',
    'GetPoliciesPolicyResult',
    'GetPolicyAttachedEntitiesAttachedEntityResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetReceivedInvitationsHandshakeResult',
    'GetReceivedInvitationsHandshakeTargetResult',
    'GetResourceInstancesMatchResult',
    'GetResourceInstancesResourceResult',
    'GetResourceInstancesResourceTagResult',
    'GetResourceInstancesTagResult',
    'GetResourceTagsTagResult',
    'GetSentInvitationsHandshakeResult',
    'GetSentInvitationsHandshakeTargetResult',
    'GetTagPolicyServicesServiceResult',
    'GetTrustedServicesTrustedServiceResult',
]

@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 join_method: _builtins.str,
                 joined_at: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str description: The description of the account.
        :param _builtins.str id: The ID of the account.
        :param _builtins.str join_method: How the account joined an organization.
        :param _builtins.str joined_at: The time when the account joined an organization.
        :param _builtins.str name: Specifies the name of the account.
        :param _builtins.str status: The status of the account.
        :param _builtins.str urn: The uniform resource name of the account.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "join_method", join_method)
        pulumi.set(__self__, "joined_at", joined_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the account.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the account.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="joinMethod")
    def join_method(self) -> _builtins.str:
        """
        How the account joined an organization.
        """
        return pulumi.get(self, "join_method")

    @_builtins.property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> _builtins.str:
        """
        The time when the account joined an organization.
        """
        return pulumi.get(self, "joined_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the account.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        The uniform resource name of the account.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetCloseAccountStatusCloseAccountStatusResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 created_at: _builtins.str,
                 failure_reason: _builtins.str,
                 organization_id: _builtins.str,
                 state: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str account_id: Indicates the ID of an account.
        :param _builtins.str created_at: Indicates the date and time when the close account request was made.
        :param _builtins.str failure_reason: Indicates the reason for a request failure.
        :param _builtins.str organization_id: Indicates the ID of an organization.
        :param _builtins.str state: Indicates the Status of the close account request.
        :param _builtins.str updated_at: Indicates the date and time when the status of close account request was updated.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "failure_reason", failure_reason)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Indicates the ID of an account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the date and time when the close account request was made.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> _builtins.str:
        """
        Indicates the reason for a request failure.
        """
        return pulumi.get(self, "failure_reason")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        Indicates the ID of an organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the Status of the close account request.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the date and time when the status of close account request was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCreateAccountStatusCreateAccountStatusResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 account_name: _builtins.str,
                 completed_at: _builtins.str,
                 created_at: _builtins.str,
                 failure_reason: _builtins.str,
                 id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str account_id: Indicates the ID of the newly created account if any.
        :param _builtins.str account_name: Indicates the account name.
        :param _builtins.str completed_at: Indicates the date and time when the account was created and the request was completed.
        :param _builtins.str created_at: Indicates the date and time when the create account request was made.
        :param _builtins.str failure_reason: Indicates the reason for a request failure.
        :param _builtins.str id: Indicates the ID of a request.
        :param _builtins.str state: Indicates the status of the asynchronous request for creating an account.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "completed_at", completed_at)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "failure_reason", failure_reason)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Indicates the ID of the newly created account if any.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        Indicates the account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> _builtins.str:
        """
        Indicates the date and time when the account was created and the request was completed.
        """
        return pulumi.get(self, "completed_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the date and time when the create account request was made.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> _builtins.str:
        """
        Indicates the reason for a request failure.
        """
        return pulumi.get(self, "failure_reason")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of a request.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the status of the asynchronous request for creating an account.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetOrganizationalUnitsChildrenResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str created_at: The time when the organizational unit was created.
        :param _builtins.str id: The ID of the organizational unit.
        :param _builtins.str name: The name of the organizational unit.
        :param _builtins.str urn: The uniform resource name of the organizational unit.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the organizational unit was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the organizational unit.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the organizational unit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        The uniform resource name of the organizational unit.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 build_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str build_type: Specifies the build type of the policy.
               + **system**: system policy.
               + **custom**: custom policy.
        :param _builtins.str description: Specifies the description of the policy.
        :param _builtins.str id: Indicates the unique ID of the policy.
        :param _builtins.str name: Specifies the name of the policy.
        :param _builtins.str type: Specifies the type of the policy. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
        :param _builtins.str urn: Indicates the uniform resource name of the policy.
        """
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> _builtins.str:
        """
        Specifies the build type of the policy.
        + **system**: system policy.
        + **custom**: custom policy.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the unique ID of the policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the policy. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Indicates the uniform resource name of the policy.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetPolicyAttachedEntitiesAttachedEntityResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the entity.
        :param _builtins.str name: Indicates the name of the entity.
        :param _builtins.str type: Indicates the type of the entity.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the entity.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the entity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the entity.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: Indicates the quota information.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        Indicates the quota information.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int max: Indicates the maximum quota.
        :param _builtins.int min: Indicates the minimum quota.
        :param _builtins.int quota: Indicates the number of quotas.
        :param _builtins.str type: Indicates the quota type.
               It can be **account**, **organizational_unit** or **policy**.
        :param _builtins.int used: Indicates the used quantity.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        Indicates the maximum quota.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        Indicates the minimum quota.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the number of quotas.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the quota type.
        It can be **account**, **organizational_unit** or **policy**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the used quantity.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetReceivedInvitationsHandshakeResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 management_account_id: _builtins.str,
                 management_account_name: _builtins.str,
                 notes: _builtins.str,
                 organization_id: _builtins.str,
                 status: _builtins.str,
                 targets: Sequence['outputs.GetReceivedInvitationsHandshakeTargetResult'],
                 updated_at: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the date and time when an invitation (handshake) request was made.
        :param _builtins.str id: Indicates the unique ID of an invitation (handshake).
        :param _builtins.str management_account_id: Indicates the unique ID of the organization's management account.
        :param _builtins.str management_account_name: Indicates the name of the organization's management account.
        :param _builtins.str notes: Indicates the additional information that you want to include in the email to the recipient account owner.
        :param _builtins.str organization_id: Indicates the unique ID of an organization.
        :param _builtins.str status: Indicates the current state of the invitation (handshake).
               It can be **pending**, **accepted**, **cancelled**, **declined**, or **expired**.
        :param Sequence['GetReceivedInvitationsHandshakeTargetArgs'] targets: Indicates the unique ID of the invited account.
        :param _builtins.str updated_at: Indicates the date and time when an invitation (handshake) request was updated.
               The update method can be **accepted**, **canceled**, **declined**, or **expired**.
        :param _builtins.str urn: Indicates the uniform resource name of the invitation (handshake).
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "management_account_id", management_account_id)
        pulumi.set(__self__, "management_account_name", management_account_name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the date and time when an invitation (handshake) request was made.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the unique ID of an invitation (handshake).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managementAccountId")
    def management_account_id(self) -> _builtins.str:
        """
        Indicates the unique ID of the organization's management account.
        """
        return pulumi.get(self, "management_account_id")

    @_builtins.property
    @pulumi.getter(name="managementAccountName")
    def management_account_name(self) -> _builtins.str:
        """
        Indicates the name of the organization's management account.
        """
        return pulumi.get(self, "management_account_name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        Indicates the additional information that you want to include in the email to the recipient account owner.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        Indicates the unique ID of an organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the current state of the invitation (handshake).
        It can be **pending**, **accepted**, **cancelled**, **declined**, or **expired**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetReceivedInvitationsHandshakeTargetResult']:
        """
        Indicates the unique ID of the invited account.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the date and time when an invitation (handshake) request was updated.
        The update method can be **accepted**, **canceled**, **declined**, or **expired**.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Indicates the uniform resource name of the invitation (handshake).
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetReceivedInvitationsHandshakeTargetResult(dict):
    def __init__(__self__, *,
                 entity: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str entity: Indicates the value of the invited account.
               + If you choose **type:account**, you must provide the account ID.
               + If you choose **type:email**, you must specify the email address that is associated with the account.
        :param _builtins.str type: Indicates the type of the invited account. It can be account or email.
        """
        pulumi.set(__self__, "entity", entity)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def entity(self) -> _builtins.str:
        """
        Indicates the value of the invited account.
        + If you choose **type:account**, you must provide the account ID.
        + If you choose **type:email**, you must specify the email address that is associated with the account.
        """
        return pulumi.get(self, "entity")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the invited account. It can be account or email.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourceInstancesMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        :param _builtins.str value: Specifies the field value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the field value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetResourceInstancesResourceTagResult']):
        """
        :param _builtins.str resource_id: Indicates the resource ID.
        :param _builtins.str resource_name: Indicates the resource name.
        :param Sequence['GetResourceInstancesResourceTagArgs'] tags: Specifies the list of tags to be queried. A maximum of 10 keys can be queried at a time, and
               each key can contain a maximum of 10 values. The tag key cannot be left blank or be an empty string. Each key must be
               unique, and each value for a key must be unique. Resources that contain all keys and one or multiple values listed in
               tags will be found and returned.
               
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceInstancesResourceTagResult']:
        """
        Specifies the list of tags to be queried. A maximum of 10 keys can be queried at a time, and
        each key can contain a maximum of 10 values. The tag key cannot be left blank or be an empty string. Each key must be
        unique, and each value for a key must be unique. Resources that contain all keys and one or multiple values listed in
        tags will be found and returned.

        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceInstancesResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        :param _builtins.str value: Specifies the field value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the field value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values of the tag.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the key of the tag.
        :param Sequence[_builtins.str] values: Indicates the list of values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSentInvitationsHandshakeResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 management_account_id: _builtins.str,
                 management_account_name: _builtins.str,
                 notes: _builtins.str,
                 organization_id: _builtins.str,
                 status: _builtins.str,
                 targets: Sequence['outputs.GetSentInvitationsHandshakeTargetResult'],
                 updated_at: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the date and time when an invitation (handshake) request was made.
        :param _builtins.str id: Indicates the unique ID of an invitation (handshake).
        :param _builtins.str management_account_id: Indicates the unique ID of the organization's management account.
        :param _builtins.str management_account_name: Indicates the name of the organization's management account.
        :param _builtins.str notes: Indicates the additional information that you want to include in the email to the recipient account owner.
        :param _builtins.str organization_id: Indicates the unique ID of an organization.
        :param _builtins.str status: Indicates the current state of the invitation (handshake).
               It can be **pending**, **accepted**, **cancelled**, **declined**, or **expired**.
        :param Sequence['GetSentInvitationsHandshakeTargetArgs'] targets: Indicates the unique ID of the invited account.
        :param _builtins.str updated_at: Indicates the date and time when an invitation (handshake) request was updated.
               The update method can be **accepted**, **canceled**, **declined**, or **expired**.
        :param _builtins.str urn: Indicates the uniform resource name of the invitation (handshake).
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "management_account_id", management_account_id)
        pulumi.set(__self__, "management_account_name", management_account_name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the date and time when an invitation (handshake) request was made.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the unique ID of an invitation (handshake).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managementAccountId")
    def management_account_id(self) -> _builtins.str:
        """
        Indicates the unique ID of the organization's management account.
        """
        return pulumi.get(self, "management_account_id")

    @_builtins.property
    @pulumi.getter(name="managementAccountName")
    def management_account_name(self) -> _builtins.str:
        """
        Indicates the name of the organization's management account.
        """
        return pulumi.get(self, "management_account_name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        Indicates the additional information that you want to include in the email to the recipient account owner.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        Indicates the unique ID of an organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the current state of the invitation (handshake).
        It can be **pending**, **accepted**, **cancelled**, **declined**, or **expired**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetSentInvitationsHandshakeTargetResult']:
        """
        Indicates the unique ID of the invited account.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the date and time when an invitation (handshake) request was updated.
        The update method can be **accepted**, **canceled**, **declined**, or **expired**.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Indicates the uniform resource name of the invitation (handshake).
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetSentInvitationsHandshakeTargetResult(dict):
    def __init__(__self__, *,
                 entity: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str entity: Indicates the value of the invited account.
               + If you choose **type:account**, you must provide the account ID.
               + If you choose **type:email**, you must specify the email address that is associated with the account.
        :param _builtins.str type: Indicates the type of the invited account. It can be account or email.
        """
        pulumi.set(__self__, "entity", entity)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def entity(self) -> _builtins.str:
        """
        Indicates the value of the invited account.
        + If you choose **type:account**, you must provide the account ID.
        + If you choose **type:email**, you must specify the email address that is associated with the account.
        """
        return pulumi.get(self, "entity")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the invited account. It can be account or email.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTagPolicyServicesServiceResult(dict):
    def __init__(__self__, *,
                 resource_types: Sequence[_builtins.str],
                 service_name: _builtins.str,
                 support_all: _builtins.bool):
        """
        :param Sequence[_builtins.str] resource_types: Indicates the resource types.
        :param _builtins.str service_name: Indicates the service name of the service.
        :param _builtins.bool support_all: Indicates whether resource_type support all services (wildcard *).
        """
        pulumi.set(__self__, "resource_types", resource_types)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "support_all", support_all)

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the resource types.
        """
        return pulumi.get(self, "resource_types")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Indicates the service name of the service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="supportAll")
    def support_all(self) -> _builtins.bool:
        """
        Indicates whether resource_type support all services (wildcard *).
        """
        return pulumi.get(self, "support_all")


@pulumi.output_type
class GetTrustedServicesTrustedServiceResult(dict):
    def __init__(__self__, *,
                 enabled_at: _builtins.str,
                 service_principal: _builtins.str):
        """
        :param _builtins.str enabled_at: Indicates the date when the trusted service was integrated with Organizations
        :param _builtins.str service_principal: Indicates the name of a trusted service.
        """
        pulumi.set(__self__, "enabled_at", enabled_at)
        pulumi.set(__self__, "service_principal", service_principal)

    @_builtins.property
    @pulumi.getter(name="enabledAt")
    def enabled_at(self) -> _builtins.str:
        """
        Indicates the date when the trusted service was integrated with Organizations
        """
        return pulumi.get(self, "enabled_at")

    @_builtins.property
    @pulumi.getter(name="servicePrincipal")
    def service_principal(self) -> _builtins.str:
        """
        Indicates the name of a trusted service.
        """
        return pulumi.get(self, "service_principal")


