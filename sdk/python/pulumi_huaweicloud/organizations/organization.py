# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OrganizationArgs', 'Organization']

@pulumi.input_type
class OrganizationArgs:
    def __init__(__self__, *,
                 enabled_policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 root_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Organization resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enabled_policy_types: Specifies the list of Organizations policy types to enable in the
               Organization Root. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] root_tags: Specifies the key/value to attach to the root.
        """
        if enabled_policy_types is not None:
            pulumi.set(__self__, "enabled_policy_types", enabled_policy_types)
        if root_tags is not None:
            pulumi.set(__self__, "root_tags", root_tags)

    @_builtins.property
    @pulumi.getter(name="enabledPolicyTypes")
    def enabled_policy_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of Organizations policy types to enable in the
        Organization Root. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.
        """
        return pulumi.get(self, "enabled_policy_types")

    @enabled_policy_types.setter
    def enabled_policy_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enabled_policy_types", value)

    @_builtins.property
    @pulumi.getter(name="rootTags")
    def root_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the root.
        """
        return pulumi.get(self, "root_tags")

    @root_tags.setter
    def root_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "root_tags", value)


@pulumi.input_type
class _OrganizationState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled_policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 master_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 root_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_name: Optional[pulumi.Input[_builtins.str]] = None,
                 root_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 root_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Organization resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the organization was created.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enabled_policy_types: Specifies the list of Organizations policy types to enable in the
               Organization Root. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
        :param pulumi.Input[_builtins.str] master_account_id: Indicates the unique ID of the organization's management account.
        :param pulumi.Input[_builtins.str] master_account_name: Indicates the name of the organization's management account.
        :param pulumi.Input[_builtins.str] root_id: Indicates the ID of the root.
        :param pulumi.Input[_builtins.str] root_name: Indicates the name of the root.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] root_tags: Specifies the key/value to attach to the root.
        :param pulumi.Input[_builtins.str] root_urn: Indicates the urn of the root.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the organization.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled_policy_types is not None:
            pulumi.set(__self__, "enabled_policy_types", enabled_policy_types)
        if master_account_id is not None:
            pulumi.set(__self__, "master_account_id", master_account_id)
        if master_account_name is not None:
            pulumi.set(__self__, "master_account_name", master_account_name)
        if root_id is not None:
            pulumi.set(__self__, "root_id", root_id)
        if root_name is not None:
            pulumi.set(__self__, "root_name", root_name)
        if root_tags is not None:
            pulumi.set(__self__, "root_tags", root_tags)
        if root_urn is not None:
            pulumi.set(__self__, "root_urn", root_urn)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the organization was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enabledPolicyTypes")
    def enabled_policy_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of Organizations policy types to enable in the
        Organization Root. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.
        """
        return pulumi.get(self, "enabled_policy_types")

    @enabled_policy_types.setter
    def enabled_policy_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enabled_policy_types", value)

    @_builtins.property
    @pulumi.getter(name="masterAccountId")
    def master_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique ID of the organization's management account.
        """
        return pulumi.get(self, "master_account_id")

    @master_account_id.setter
    def master_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_account_id", value)

    @_builtins.property
    @pulumi.getter(name="masterAccountName")
    def master_account_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of the organization's management account.
        """
        return pulumi.get(self, "master_account_name")

    @master_account_name.setter
    def master_account_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_account_name", value)

    @_builtins.property
    @pulumi.getter(name="rootId")
    def root_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the root.
        """
        return pulumi.get(self, "root_id")

    @root_id.setter
    def root_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_id", value)

    @_builtins.property
    @pulumi.getter(name="rootName")
    def root_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of the root.
        """
        return pulumi.get(self, "root_name")

    @root_name.setter
    def root_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_name", value)

    @_builtins.property
    @pulumi.getter(name="rootTags")
    def root_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the root.
        """
        return pulumi.get(self, "root_tags")

    @root_tags.setter
    def root_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "root_tags", value)

    @_builtins.property
    @pulumi.getter(name="rootUrn")
    def root_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the urn of the root.
        """
        return pulumi.get(self, "root_urn")

    @root_urn.setter
    def root_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_urn", value)

    @_builtins.property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the uniform resource name of the organization.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "urn", value)


@pulumi.type_token("huaweicloud:organizations/organization:Organization")
class Organization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled_policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 root_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an Organizations organization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.organizations.Organization("test")
        ```

        ## Import

        The Organizations organization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/organization:Organization test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enabled_policy_types: Specifies the list of Organizations policy types to enable in the
               Organization Root. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] root_tags: Specifies the key/value to attach to the root.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OrganizationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Organizations organization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.organizations.Organization("test")
        ```

        ## Import

        The Organizations organization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/organization:Organization test <id>
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled_policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 root_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationArgs.__new__(OrganizationArgs)

            __props__.__dict__["enabled_policy_types"] = enabled_policy_types
            __props__.__dict__["root_tags"] = root_tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["master_account_id"] = None
            __props__.__dict__["master_account_name"] = None
            __props__.__dict__["root_id"] = None
            __props__.__dict__["root_name"] = None
            __props__.__dict__["root_urn"] = None
            __props__.__dict__["urn"] = None
        super(Organization, __self__).__init__(
            'huaweicloud:organizations/organization:Organization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enabled_policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            master_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            master_account_name: Optional[pulumi.Input[_builtins.str]] = None,
            root_id: Optional[pulumi.Input[_builtins.str]] = None,
            root_name: Optional[pulumi.Input[_builtins.str]] = None,
            root_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            root_urn: Optional[pulumi.Input[_builtins.str]] = None,
            urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'Organization':
        """
        Get an existing Organization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the organization was created.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enabled_policy_types: Specifies the list of Organizations policy types to enable in the
               Organization Root. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
        :param pulumi.Input[_builtins.str] master_account_id: Indicates the unique ID of the organization's management account.
        :param pulumi.Input[_builtins.str] master_account_name: Indicates the name of the organization's management account.
        :param pulumi.Input[_builtins.str] root_id: Indicates the ID of the root.
        :param pulumi.Input[_builtins.str] root_name: Indicates the name of the root.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] root_tags: Specifies the key/value to attach to the root.
        :param pulumi.Input[_builtins.str] root_urn: Indicates the urn of the root.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the organization.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationState.__new__(_OrganizationState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enabled_policy_types"] = enabled_policy_types
        __props__.__dict__["master_account_id"] = master_account_id
        __props__.__dict__["master_account_name"] = master_account_name
        __props__.__dict__["root_id"] = root_id
        __props__.__dict__["root_name"] = root_name
        __props__.__dict__["root_tags"] = root_tags
        __props__.__dict__["root_urn"] = root_urn
        __props__.__dict__["urn"] = urn
        return Organization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the organization was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enabledPolicyTypes")
    def enabled_policy_types(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of Organizations policy types to enable in the
        Organization Root. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.
        """
        return pulumi.get(self, "enabled_policy_types")

    @_builtins.property
    @pulumi.getter(name="masterAccountId")
    def master_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unique ID of the organization's management account.
        """
        return pulumi.get(self, "master_account_id")

    @_builtins.property
    @pulumi.getter(name="masterAccountName")
    def master_account_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of the organization's management account.
        """
        return pulumi.get(self, "master_account_name")

    @_builtins.property
    @pulumi.getter(name="rootId")
    def root_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the root.
        """
        return pulumi.get(self, "root_id")

    @_builtins.property
    @pulumi.getter(name="rootName")
    def root_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of the root.
        """
        return pulumi.get(self, "root_name")

    @_builtins.property
    @pulumi.getter(name="rootTags")
    def root_tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value to attach to the root.
        """
        return pulumi.get(self, "root_tags")

    @_builtins.property
    @pulumi.getter(name="rootUrn")
    def root_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the urn of the root.
        """
        return pulumi.get(self, "root_urn")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the uniform resource name of the organization.
        """
        return pulumi.get(self, "urn")

