# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyAttachedEntitiesResult',
    'AwaitableGetPolicyAttachedEntitiesResult',
    'get_policy_attached_entities',
    'get_policy_attached_entities_output',
]

@pulumi.output_type
class GetPolicyAttachedEntitiesResult:
    """
    A collection of values returned by getPolicyAttachedEntities.
    """
    def __init__(__self__, attached_entities=None, id=None, policy_id=None):
        if attached_entities and not isinstance(attached_entities, list):
            raise TypeError("Expected argument 'attached_entities' to be a list")
        pulumi.set(__self__, "attached_entities", attached_entities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="attachedEntities")
    def attached_entities(self) -> Sequence['outputs.GetPolicyAttachedEntitiesAttachedEntityResult']:
        """
        Indicates the entities that the specified policy is attached to.
        """
        return pulumi.get(self, "attached_entities")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")


class AwaitableGetPolicyAttachedEntitiesResult(GetPolicyAttachedEntitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyAttachedEntitiesResult(
            attached_entities=self.attached_entities,
            id=self.id,
            policy_id=self.policy_id)


def get_policy_attached_entities(policy_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyAttachedEntitiesResult:
    """
    Use this data source to get the list of the entities that the specified policy is attached to.


    :param _builtins.str policy_id: Specifies the ID of the policy.
    """
    __args__ = dict()
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:organizations/getPolicyAttachedEntities:getPolicyAttachedEntities', __args__, opts=opts, typ=GetPolicyAttachedEntitiesResult).value

    return AwaitableGetPolicyAttachedEntitiesResult(
        attached_entities=pulumi.get(__ret__, 'attached_entities'),
        id=pulumi.get(__ret__, 'id'),
        policy_id=pulumi.get(__ret__, 'policy_id'))
def get_policy_attached_entities_output(policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyAttachedEntitiesResult]:
    """
    Use this data source to get the list of the entities that the specified policy is attached to.


    :param _builtins.str policy_id: Specifies the ID of the policy.
    """
    __args__ = dict()
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:organizations/getPolicyAttachedEntities:getPolicyAttachedEntities', __args__, opts=opts, typ=GetPolicyAttachedEntitiesResult)
    return __ret__.apply(lambda __response__: GetPolicyAttachedEntitiesResult(
        attached_entities=pulumi.get(__response__, 'attached_entities'),
        id=pulumi.get(__response__, 'id'),
        policy_id=pulumi.get(__response__, 'policy_id')))
