# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetOrganizationResult',
    'AwaitableGetOrganizationResult',
    'get_organization',
    'get_organization_output',
]

@pulumi.output_type
class GetOrganizationResult:
    """
    A collection of values returned by getOrganization.
    """
    def __init__(__self__, created_at=None, enabled_policy_types=None, id=None, master_account_id=None, master_account_name=None, root_id=None, root_name=None, root_tags=None, root_urn=None, urn=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if enabled_policy_types and not isinstance(enabled_policy_types, list):
            raise TypeError("Expected argument 'enabled_policy_types' to be a list")
        pulumi.set(__self__, "enabled_policy_types", enabled_policy_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master_account_id and not isinstance(master_account_id, str):
            raise TypeError("Expected argument 'master_account_id' to be a str")
        pulumi.set(__self__, "master_account_id", master_account_id)
        if master_account_name and not isinstance(master_account_name, str):
            raise TypeError("Expected argument 'master_account_name' to be a str")
        pulumi.set(__self__, "master_account_name", master_account_name)
        if root_id and not isinstance(root_id, str):
            raise TypeError("Expected argument 'root_id' to be a str")
        pulumi.set(__self__, "root_id", root_id)
        if root_name and not isinstance(root_name, str):
            raise TypeError("Expected argument 'root_name' to be a str")
        pulumi.set(__self__, "root_name", root_name)
        if root_tags and not isinstance(root_tags, dict):
            raise TypeError("Expected argument 'root_tags' to be a dict")
        pulumi.set(__self__, "root_tags", root_tags)
        if root_urn and not isinstance(root_urn, str):
            raise TypeError("Expected argument 'root_urn' to be a str")
        pulumi.set(__self__, "root_urn", root_urn)
        if urn and not isinstance(urn, str):
            raise TypeError("Expected argument 'urn' to be a str")
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time when the organization was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enabledPolicyTypes")
    def enabled_policy_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of enabled Organizations policy types in the Organization Root.
        """
        return pulumi.get(self, "enabled_policy_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="masterAccountId")
    def master_account_id(self) -> _builtins.str:
        """
        Indicates the unique ID of the organization's management account.
        """
        return pulumi.get(self, "master_account_id")

    @_builtins.property
    @pulumi.getter(name="masterAccountName")
    def master_account_name(self) -> _builtins.str:
        """
        Indicates the name of the organization's management account.
        """
        return pulumi.get(self, "master_account_name")

    @_builtins.property
    @pulumi.getter(name="rootId")
    def root_id(self) -> _builtins.str:
        """
        Indicates the ID of the root.
        """
        return pulumi.get(self, "root_id")

    @_builtins.property
    @pulumi.getter(name="rootName")
    def root_name(self) -> _builtins.str:
        """
        Indicates the name of the root.
        """
        return pulumi.get(self, "root_name")

    @_builtins.property
    @pulumi.getter(name="rootTags")
    def root_tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value attached to the root.
        """
        return pulumi.get(self, "root_tags")

    @_builtins.property
    @pulumi.getter(name="rootUrn")
    def root_urn(self) -> _builtins.str:
        """
        Indicates the urn of the root.
        """
        return pulumi.get(self, "root_urn")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Indicates the uniform resource name of the organization.
        """
        return pulumi.get(self, "urn")


class AwaitableGetOrganizationResult(GetOrganizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationResult(
            created_at=self.created_at,
            enabled_policy_types=self.enabled_policy_types,
            id=self.id,
            master_account_id=self.master_account_id,
            master_account_name=self.master_account_name,
            root_id=self.root_id,
            root_name=self.root_name,
            root_tags=self.root_tags,
            root_urn=self.root_urn,
            urn=self.urn)


def get_organization(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationResult:
    """
    Use this data source to get the Organization info and the root info.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.organizations.get_organization()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:organizations/getOrganization:getOrganization', __args__, opts=opts, typ=GetOrganizationResult).value

    return AwaitableGetOrganizationResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        enabled_policy_types=pulumi.get(__ret__, 'enabled_policy_types'),
        id=pulumi.get(__ret__, 'id'),
        master_account_id=pulumi.get(__ret__, 'master_account_id'),
        master_account_name=pulumi.get(__ret__, 'master_account_name'),
        root_id=pulumi.get(__ret__, 'root_id'),
        root_name=pulumi.get(__ret__, 'root_name'),
        root_tags=pulumi.get(__ret__, 'root_tags'),
        root_urn=pulumi.get(__ret__, 'root_urn'),
        urn=pulumi.get(__ret__, 'urn'))
def get_organization_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationResult]:
    """
    Use this data source to get the Organization info and the root info.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.organizations.get_organization()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:organizations/getOrganization:getOrganization', __args__, opts=opts, typ=GetOrganizationResult)
    return __ret__.apply(lambda __response__: GetOrganizationResult(
        created_at=pulumi.get(__response__, 'created_at'),
        enabled_policy_types=pulumi.get(__response__, 'enabled_policy_types'),
        id=pulumi.get(__response__, 'id'),
        master_account_id=pulumi.get(__response__, 'master_account_id'),
        master_account_name=pulumi.get(__response__, 'master_account_name'),
        root_id=pulumi.get(__response__, 'root_id'),
        root_name=pulumi.get(__response__, 'root_name'),
        root_tags=pulumi.get(__response__, 'root_tags'),
        root_urn=pulumi.get(__response__, 'root_urn'),
        urn=pulumi.get(__response__, 'urn')))
