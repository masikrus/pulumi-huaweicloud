# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PolicyAttachArgs', 'PolicyAttach']

@pulumi.input_type
class PolicyAttachArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a PolicyAttach resource.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the unique ID of the root, OU, or account.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the ID of the policy.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the unique ID of the root, OU, or account.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "entity_id", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)


@pulumi.input_type
class _PolicyAttachState:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_name: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyAttach resources.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the unique ID of the root, OU, or account.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] entity_name: Indicates the name of the entity.
        :param pulumi.Input[_builtins.str] entity_type: Indicates the type of the entity.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the ID of the policy.
               
               Changing this parameter will create a new resource.
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_name is not None:
            pulumi.set(__self__, "entity_name", entity_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique ID of the root, OU, or account.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_id", value)

    @_builtins.property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of the entity.
        """
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_name", value)

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the type of the entity.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_type", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)


@pulumi.type_token("huaweicloud:organizations/policyAttach:PolicyAttach")
class PolicyAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Organizations policy attach resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        entity_id = config.require_object("entityId")
        test = huaweicloud.organizations.PolicyAttach("test",
            policy_id=policy_id,
            entity_id=entity_id)
        ```

        ## Import

        The organizations policy attach can be imported using the `policy_id` and `entity_id` separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/policyAttach:PolicyAttach test <policy_id>/<entity_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the unique ID of the root, OU, or account.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the ID of the policy.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Organizations policy attach resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        entity_id = config.require_object("entityId")
        test = huaweicloud.organizations.PolicyAttach("test",
            policy_id=policy_id,
            entity_id=entity_id)
        ```

        ## Import

        The organizations policy attach can be imported using the `policy_id` and `entity_id` separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/policyAttach:PolicyAttach test <policy_id>/<entity_id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyAttachArgs.__new__(PolicyAttachArgs)

            if entity_id is None and not opts.urn:
                raise TypeError("Missing required property 'entity_id'")
            __props__.__dict__["entity_id"] = entity_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["entity_name"] = None
            __props__.__dict__["entity_type"] = None
        super(PolicyAttach, __self__).__init__(
            'huaweicloud:organizations/policyAttach:PolicyAttach',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_id: Optional[pulumi.Input[_builtins.str]] = None,
            entity_name: Optional[pulumi.Input[_builtins.str]] = None,
            entity_type: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyAttach':
        """
        Get an existing PolicyAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the unique ID of the root, OU, or account.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] entity_name: Indicates the name of the entity.
        :param pulumi.Input[_builtins.str] entity_type: Indicates the type of the entity.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the ID of the policy.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyAttachState.__new__(_PolicyAttachState)

        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["entity_name"] = entity_name
        __props__.__dict__["entity_type"] = entity_type
        __props__.__dict__["policy_id"] = policy_id
        return PolicyAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique ID of the root, OU, or account.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "entity_id")

    @_builtins.property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of the entity.
        """
        return pulumi.get(self, "entity_name")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the type of the entity.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

