# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetEffectivePoliciesResult',
    'AwaitableGetEffectivePoliciesResult',
    'get_effective_policies',
    'get_effective_policies_output',
]

@pulumi.output_type
class GetEffectivePoliciesResult:
    """
    A collection of values returned by getEffectivePolicies.
    """
    def __init__(__self__, entity_id=None, id=None, last_updated_at=None, policy_content=None, policy_type=None, region=None):
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_updated_at and not isinstance(last_updated_at, str):
            raise TypeError("Expected argument 'last_updated_at' to be a str")
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        if policy_content and not isinstance(policy_content, str):
            raise TypeError("Expected argument 'policy_content' to be a str")
        pulumi.set(__self__, "policy_content", policy_content)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> _builtins.str:
        return pulumi.get(self, "entity_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> _builtins.str:
        """
        Indicates the time when the effective policy is mostly updated.
        """
        return pulumi.get(self, "last_updated_at")

    @_builtins.property
    @pulumi.getter(name="policyContent")
    def policy_content(self) -> _builtins.str:
        """
        Indicates the content of the effective policy.
        """
        return pulumi.get(self, "policy_content")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetEffectivePoliciesResult(GetEffectivePoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEffectivePoliciesResult(
            entity_id=self.entity_id,
            id=self.id,
            last_updated_at=self.last_updated_at,
            policy_content=self.policy_content,
            policy_type=self.policy_type,
            region=self.region)


def get_effective_policies(entity_id: Optional[_builtins.str] = None,
                           policy_type: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEffectivePoliciesResult:
    """
    Use this data source to get the effective policies of a specific type for the specified account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    entity_id = config.require_object("entityId")
    test = huaweicloud.organizations.get_effective_policies(entity_id=entity_id,
        policy_type="tag_policy")
    ```


    :param _builtins.str entity_id: Specifies the unique ID of an account.
           Currently, the effective policy of the root and organizational units cannot be queried.
    :param _builtins.str policy_type: Specifies the name of a policy type.
           Currently, the value **tag_policy** is available.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['entityId'] = entity_id
    __args__['policyType'] = policy_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:organizations/getEffectivePolicies:getEffectivePolicies', __args__, opts=opts, typ=GetEffectivePoliciesResult).value

    return AwaitableGetEffectivePoliciesResult(
        entity_id=pulumi.get(__ret__, 'entity_id'),
        id=pulumi.get(__ret__, 'id'),
        last_updated_at=pulumi.get(__ret__, 'last_updated_at'),
        policy_content=pulumi.get(__ret__, 'policy_content'),
        policy_type=pulumi.get(__ret__, 'policy_type'),
        region=pulumi.get(__ret__, 'region'))
def get_effective_policies_output(entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEffectivePoliciesResult]:
    """
    Use this data source to get the effective policies of a specific type for the specified account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    entity_id = config.require_object("entityId")
    test = huaweicloud.organizations.get_effective_policies(entity_id=entity_id,
        policy_type="tag_policy")
    ```


    :param _builtins.str entity_id: Specifies the unique ID of an account.
           Currently, the effective policy of the root and organizational units cannot be queried.
    :param _builtins.str policy_type: Specifies the name of a policy type.
           Currently, the value **tag_policy** is available.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['entityId'] = entity_id
    __args__['policyType'] = policy_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:organizations/getEffectivePolicies:getEffectivePolicies', __args__, opts=opts, typ=GetEffectivePoliciesResult)
    return __ret__.apply(lambda __response__: GetEffectivePoliciesResult(
        entity_id=pulumi.get(__response__, 'entity_id'),
        id=pulumi.get(__response__, 'id'),
        last_updated_at=pulumi.get(__response__, 'last_updated_at'),
        policy_content=pulumi.get(__response__, 'policy_content'),
        policy_type=pulumi.get(__response__, 'policy_type'),
        region=pulumi.get(__response__, 'region')))
