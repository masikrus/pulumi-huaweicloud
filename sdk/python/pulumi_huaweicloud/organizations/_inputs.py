# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetResourceInstancesMatchArgs',
    'GetResourceInstancesMatchArgsDict',
    'GetResourceInstancesTagArgs',
    'GetResourceInstancesTagArgsDict',
]

MYPY = False

if not MYPY:
    class GetResourceInstancesMatchArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        value: _builtins.str
        """
        Specifies the field value.
        """
elif False:
    GetResourceInstancesMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesMatchArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        :param _builtins.str value: Specifies the field value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the field value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetResourceInstancesTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values of the tag.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetResourceInstancesTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field name, and must be unique. Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values of the tag.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


