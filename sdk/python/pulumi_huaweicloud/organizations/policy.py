# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[_builtins.str] content: Specifies the policy text content to be added to the new policy. For details, see the
               following documents:
               <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
               <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        :param pulumi.Input[_builtins.str] type: Specifies the type of the policy to be created. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description to be assigned to the policy. It can contain 1 to 512
               characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
               English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
               characters cannot be spaces.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the policy.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy text content to be added to the new policy. For details, see the
        following documents:
        <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
        <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the policy to be created. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description to be assigned to the policy. It can contain 1 to 512
        characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
        English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
        characters cannot be spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[_builtins.str] content: Specifies the policy text content to be added to the new policy. For details, see the
               following documents:
               <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
               <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        :param pulumi.Input[_builtins.str] description: Specifies the description to be assigned to the policy. It can contain 1 to 512
               characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
               English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
               characters cannot be spaces.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the policy.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the policy to be created. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the policy.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy text content to be added to the new policy. For details, see the
        following documents:
        <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
        <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description to be assigned to the policy. It can contain 1 to 512
        characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
        English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
        characters cannot be spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the policy to be created. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the uniform resource name of the policy.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "urn", value)


@pulumi.type_token("huaweicloud:organizations/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Organizations policy resource within HuaweiCloud.

        ## Example Usage

        ### Create service control policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        scp_policy = huaweicloud.organizations.Policy("scp_policy",
            name="test_policy_name",
            type="service_control_policy",
            content=json.dumps({
                "Version": "5.0",
                "Statement": [{
                    "Effect": "Deny",
                    "Action": [],
                }],
            }))
        ```

        ### Create tag policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        tag_policy = huaweicloud.organizations.Policy("tag_policy",
            name="test_policy_name",
            type="tag_policy",
            content=json.dumps({
                "tags": {
                    "test_tag": {
                        "test_key": {
                            "@@assign": "test_tag",
                        },
                    },
                },
            }))
        ```

        ## Import

        The organizations policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/policy:Policy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the policy text content to be added to the new policy. For details, see the
               following documents:
               <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
               <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        :param pulumi.Input[_builtins.str] description: Specifies the description to be assigned to the policy. It can contain 1 to 512
               characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
               English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
               characters cannot be spaces.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the policy.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the policy to be created. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Organizations policy resource within HuaweiCloud.

        ## Example Usage

        ### Create service control policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        scp_policy = huaweicloud.organizations.Policy("scp_policy",
            name="test_policy_name",
            type="service_control_policy",
            content=json.dumps({
                "Version": "5.0",
                "Statement": [{
                    "Effect": "Deny",
                    "Action": [],
                }],
            }))
        ```

        ### Create tag policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        tag_policy = huaweicloud.organizations.Policy("tag_policy",
            name="test_policy_name",
            type="tag_policy",
            content=json.dumps({
                "tags": {
                    "test_tag": {
                        "test_key": {
                            "@@assign": "test_tag",
                        },
                    },
                },
            }))
        ```

        ## Import

        The organizations policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/policy:Policy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["urn"] = None
        super(Policy, __self__).__init__(
            'huaweicloud:organizations/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the policy text content to be added to the new policy. For details, see the
               following documents:
               <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
               <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        :param pulumi.Input[_builtins.str] description: Specifies the description to be assigned to the policy. It can contain 1 to 512
               characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
               English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
               characters cannot be spaces.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the policy.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the policy to be created. Value options:
               + **service_control_policy**: service control policy.
               + **tag_policy**: tag policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] urn: Indicates the uniform resource name of the policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["content"] = content
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["urn"] = urn
        return Policy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy text content to be added to the new policy. For details, see the
        following documents:
        <br/> For service control policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0033.html).
        <br/> For tag policy: [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-organizations/org_03_0068.html).
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description to be assigned to the policy. It can contain 1 to 512
        characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name to be assigned to the policy. It can contain 1 to 64 characters, only
        English and Chinese letters, digits, underscore (_), hyphens (-) and spaces are allowed and the first and last
        characters cannot be spaces.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value to attach to the policy.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the policy to be created. Value options:
        + **service_control_policy**: service control policy.
        + **tag_policy**: tag policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the uniform resource name of the policy.
        """
        return pulumi.get(self, "urn")

