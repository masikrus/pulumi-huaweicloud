# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TrustedServiceArgs', 'TrustedService']

@pulumi.input_type
class TrustedServiceArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a TrustedService resource.
        :param pulumi.Input[_builtins.str] service: Specifies the name of the trusted service principal.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the trusted service principal.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class _TrustedServiceState:
    def __init__(__self__, *,
                 enabled_at: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TrustedService resources.
        :param pulumi.Input[_builtins.str] enabled_at: Indicates the date when the trusted service was integrated with Organizations.
        :param pulumi.Input[_builtins.str] service: Specifies the name of the trusted service principal.
               
               Changing this parameter will create a new resource.
        """
        if enabled_at is not None:
            pulumi.set(__self__, "enabled_at", enabled_at)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter(name="enabledAt")
    def enabled_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the date when the trusted service was integrated with Organizations.
        """
        return pulumi.get(self, "enabled_at")

    @enabled_at.setter
    def enabled_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enabled_at", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the trusted service principal.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)


@pulumi.type_token("huaweicloud:organizations/trustedService:TrustedService")
class TrustedService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Organizations trusted service resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.organizations.TrustedService("test", service="service.AOM")
        ```

        ## Import

        The organizations trusted service can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/trustedService:TrustedService test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] service: Specifies the name of the trusted service principal.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrustedServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Organizations trusted service resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.organizations.TrustedService("test", service="service.AOM")
        ```

        ## Import

        The organizations trusted service can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:organizations/trustedService:TrustedService test <id>
        ```

        :param str resource_name: The name of the resource.
        :param TrustedServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrustedServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrustedServiceArgs.__new__(TrustedServiceArgs)

            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            __props__.__dict__["enabled_at"] = None
        super(TrustedService, __self__).__init__(
            'huaweicloud:organizations/trustedService:TrustedService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled_at: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None) -> 'TrustedService':
        """
        Get an existing TrustedService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enabled_at: Indicates the date when the trusted service was integrated with Organizations.
        :param pulumi.Input[_builtins.str] service: Specifies the name of the trusted service principal.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrustedServiceState.__new__(_TrustedServiceState)

        __props__.__dict__["enabled_at"] = enabled_at
        __props__.__dict__["service"] = service
        return TrustedService(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enabledAt")
    def enabled_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the date when the trusted service was integrated with Organizations.
        """
        return pulumi.get(self, "enabled_at")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the trusted service principal.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

