# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetParametersForImportResult',
    'AwaitableGetParametersForImportResult',
    'get_parameters_for_import',
    'get_parameters_for_import_output',
]

@pulumi.output_type
class GetParametersForImportResult:
    """
    A collection of values returned by getParametersForImport.
    """
    def __init__(__self__, expiration_time=None, id=None, import_token=None, key_id=None, public_key=None, region=None, sequence=None, wrapping_algorithm=None):
        if expiration_time and not isinstance(expiration_time, int):
            raise TypeError("Expected argument 'expiration_time' to be a int")
        pulumi.set(__self__, "expiration_time", expiration_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_token and not isinstance(import_token, str):
            raise TypeError("Expected argument 'import_token' to be a str")
        pulumi.set(__self__, "import_token", import_token)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sequence and not isinstance(sequence, str):
            raise TypeError("Expected argument 'sequence' to be a str")
        pulumi.set(__self__, "sequence", sequence)
        if wrapping_algorithm and not isinstance(wrapping_algorithm, str):
            raise TypeError("Expected argument 'wrapping_algorithm' to be a str")
        pulumi.set(__self__, "wrapping_algorithm", wrapping_algorithm)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> _builtins.int:
        """
        The import parameter expiration time. The format is 10-digit timestamp in second.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="importToken")
    def import_token(self) -> _builtins.str:
        """
        The key import token.
        """
        return pulumi.get(self, "import_token")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        """
        The public key of the DEK material, in Base64 format.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="wrappingAlgorithm")
    def wrapping_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "wrapping_algorithm")


class AwaitableGetParametersForImportResult(GetParametersForImportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParametersForImportResult(
            expiration_time=self.expiration_time,
            id=self.id,
            import_token=self.import_token,
            key_id=self.key_id,
            public_key=self.public_key,
            region=self.region,
            sequence=self.sequence,
            wrapping_algorithm=self.wrapping_algorithm)


def get_parameters_for_import(key_id: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              sequence: Optional[_builtins.str] = None,
                              wrapping_algorithm: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParametersForImportResult:
    """
    Use this data source to get parameters required for importing a key, including an import token and a public key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    key_id = config.require_object("keyId")
    wrapping_algorithm = config.require_object("wrappingAlgorithm")
    test = huaweicloud.Dew.get_parameters_for_import(key_id=key_id,
        wrapping_algorithm=wrapping_algorithm)
    ```


    :param _builtins.str key_id: Specifies the key ID. It should be `36` bytes and match the regular expression
           **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
           For example, **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
    :param _builtins.str region: Specifies the region in which to obtain the KMS parameters.
           If omitted, the provider-level region will be used.
    :param _builtins.str sequence: Specifies the `36` bytes sequence number of a request message.
           For Example, **919c82d4-8046-4722-9094-35c3c6524cff**.
    :param _builtins.str wrapping_algorithm: Specifies the encryption algorithm of key materials.
           The valid values are **RSAES_OAEP_SHA_256** and **SM2_ENCRYPT**.
           
           > Some regions do not support **SM2_ENCRYPT** import type.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['sequence'] = sequence
    __args__['wrappingAlgorithm'] = wrapping_algorithm
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dew/getParametersForImport:getParametersForImport', __args__, opts=opts, typ=GetParametersForImportResult).value

    return AwaitableGetParametersForImportResult(
        expiration_time=pulumi.get(__ret__, 'expiration_time'),
        id=pulumi.get(__ret__, 'id'),
        import_token=pulumi.get(__ret__, 'import_token'),
        key_id=pulumi.get(__ret__, 'key_id'),
        public_key=pulumi.get(__ret__, 'public_key'),
        region=pulumi.get(__ret__, 'region'),
        sequence=pulumi.get(__ret__, 'sequence'),
        wrapping_algorithm=pulumi.get(__ret__, 'wrapping_algorithm'))
def get_parameters_for_import_output(key_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     sequence: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     wrapping_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetParametersForImportResult]:
    """
    Use this data source to get parameters required for importing a key, including an import token and a public key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    key_id = config.require_object("keyId")
    wrapping_algorithm = config.require_object("wrappingAlgorithm")
    test = huaweicloud.Dew.get_parameters_for_import(key_id=key_id,
        wrapping_algorithm=wrapping_algorithm)
    ```


    :param _builtins.str key_id: Specifies the key ID. It should be `36` bytes and match the regular expression
           **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
           For example, **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
    :param _builtins.str region: Specifies the region in which to obtain the KMS parameters.
           If omitted, the provider-level region will be used.
    :param _builtins.str sequence: Specifies the `36` bytes sequence number of a request message.
           For Example, **919c82d4-8046-4722-9094-35c3c6524cff**.
    :param _builtins.str wrapping_algorithm: Specifies the encryption algorithm of key materials.
           The valid values are **RSAES_OAEP_SHA_256** and **SM2_ENCRYPT**.
           
           > Some regions do not support **SM2_ENCRYPT** import type.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['sequence'] = sequence
    __args__['wrappingAlgorithm'] = wrapping_algorithm
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dew/getParametersForImport:getParametersForImport', __args__, opts=opts, typ=GetParametersForImportResult)
    return __ret__.apply(lambda __response__: GetParametersForImportResult(
        expiration_time=pulumi.get(__response__, 'expiration_time'),
        id=pulumi.get(__response__, 'id'),
        import_token=pulumi.get(__response__, 'import_token'),
        key_id=pulumi.get(__response__, 'key_id'),
        public_key=pulumi.get(__response__, 'public_key'),
        region=pulumi.get(__response__, 'region'),
        sequence=pulumi.get(__response__, 'sequence'),
        wrapping_algorithm=pulumi.get(__response__, 'wrapping_algorithm')))
