# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KeyMaterialArgs', 'KeyMaterial']

@pulumi.input_type
class KeyMaterialArgs:
    def __init__(__self__, *,
                 encrypted_key_material: pulumi.Input[_builtins.str],
                 import_token: pulumi.Input[_builtins.str],
                 key_id: pulumi.Input[_builtins.str],
                 encrypted_privatekey: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KeyMaterial resource.
        :param pulumi.Input[_builtins.str] encrypted_key_material: Specifies the encrypted symmetric key material in Base64 format.
               The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
               If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
               This value is obtained refer to
               [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] import_token: Specifies the key import token in Base64 format.
               The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
               obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_id: Specifies the ID of the KMS key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] encrypted_privatekey: Specifies the private key encrypted using a temporary
               intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
               and equals(=). This parameter is required for importing an asymmetric key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] expiration_time: Specifies the expiration time of the key material.
               This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
               offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
               The time must be greater than the current time. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "encrypted_key_material", encrypted_key_material)
        pulumi.set(__self__, "import_token", import_token)
        pulumi.set(__self__, "key_id", key_id)
        if encrypted_privatekey is not None:
            pulumi.set(__self__, "encrypted_privatekey", encrypted_privatekey)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="encryptedKeyMaterial")
    def encrypted_key_material(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the encrypted symmetric key material in Base64 format.
        The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
        If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
        This value is obtained refer to
        [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_key_material")

    @encrypted_key_material.setter
    def encrypted_key_material(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "encrypted_key_material", value)

    @_builtins.property
    @pulumi.getter(name="importToken")
    def import_token(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key import token in Base64 format.
        The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
        obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "import_token")

    @import_token.setter
    def import_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "import_token", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the KMS key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="encryptedPrivatekey")
    def encrypted_privatekey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key encrypted using a temporary
        intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
        and equals(=). This parameter is required for importing an asymmetric key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_privatekey")

    @encrypted_privatekey.setter
    def encrypted_privatekey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypted_privatekey", value)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expiration time of the key material.
        This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
        offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
        The time must be greater than the current time. Changing this creates a new resource.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_time", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _KeyMaterialState:
    def __init__(__self__, *,
                 encrypted_key_material: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted_privatekey: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 import_token: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_state: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usage: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KeyMaterial resources.
        :param pulumi.Input[_builtins.str] encrypted_key_material: Specifies the encrypted symmetric key material in Base64 format.
               The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
               If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
               This value is obtained refer to
               [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] encrypted_privatekey: Specifies the private key encrypted using a temporary
               intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
               and equals(=). This parameter is required for importing an asymmetric key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] expiration_time: Specifies the expiration time of the key material.
               This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
               offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
               The time must be greater than the current time. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] import_token: Specifies the key import token in Base64 format.
               The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
               obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_id: Specifies the ID of the KMS key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_state: The status of the kms key. The valid values are as follows:
               **1**: To be activated
               **2**: Enabled.
               **3**: Disabled.
               **4**: Pending deletion.
               **5**: Pending import.
        :param pulumi.Input[_builtins.str] key_usage: The key usage. The value can be **ENCRYPT_DECRYPT** or **SIGN_VERIFY**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if encrypted_key_material is not None:
            pulumi.set(__self__, "encrypted_key_material", encrypted_key_material)
        if encrypted_privatekey is not None:
            pulumi.set(__self__, "encrypted_privatekey", encrypted_privatekey)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if import_token is not None:
            pulumi.set(__self__, "import_token", import_token)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_state is not None:
            pulumi.set(__self__, "key_state", key_state)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="encryptedKeyMaterial")
    def encrypted_key_material(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encrypted symmetric key material in Base64 format.
        The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
        If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
        This value is obtained refer to
        [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_key_material")

    @encrypted_key_material.setter
    def encrypted_key_material(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypted_key_material", value)

    @_builtins.property
    @pulumi.getter(name="encryptedPrivatekey")
    def encrypted_privatekey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key encrypted using a temporary
        intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
        and equals(=). This parameter is required for importing an asymmetric key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_privatekey")

    @encrypted_privatekey.setter
    def encrypted_privatekey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypted_privatekey", value)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expiration time of the key material.
        This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
        offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
        The time must be greater than the current time. Changing this creates a new resource.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_time", value)

    @_builtins.property
    @pulumi.getter(name="importToken")
    def import_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key import token in Base64 format.
        The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
        obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "import_token")

    @import_token.setter
    def import_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_token", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the KMS key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="keyState")
    def key_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the kms key. The valid values are as follows:
        **1**: To be activated
        **2**: Enabled.
        **3**: Disabled.
        **4**: Pending deletion.
        **5**: Pending import.
        """
        return pulumi.get(self, "key_state")

    @key_state.setter
    def key_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_state", value)

    @_builtins.property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key usage. The value can be **ENCRYPT_DECRYPT** or **SIGN_VERIFY**.
        """
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_usage", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dew/keyMaterial:KeyMaterial")
class KeyMaterial(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encrypted_key_material: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted_privatekey: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 import_token: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a KMS key material resource within HuaweiCloud.

        > NOTE: Please confirm that the state of the imported key is pending import.

        ## Example Usage

        variable "key_id" {}
        variable "import_token" {}
        variable "encrypted_key_material" {}

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dew.KeyMaterial("test",
            key_id=key_id,
            import_token=import_token,
            encrypted_key_material=encrypted_key_material)
        ```

        ## Import

        The KMS key material can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/keyMaterial:KeyMaterial test 7056d636-ac60-4663-8a6c-82d3c32c1c64
        ```

        Note that the imported state may not be identical to your resource definition,

        due to `import_token`, `encrypted_key_material` and `encrypted_privatekey` are missing from the API response.

        It is generally recommended running `pulumi preview` after importing a KMS key material.

        You can then decide if changes should be applied to the KMS key material, or the resource

        definition should be updated to align with the KMS key material. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_kms_key_material" "test" {

            ...

          lifecycle {

            ignore_changes = [ import_token, encrypted_key_material, encrypted_privatekey ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] encrypted_key_material: Specifies the encrypted symmetric key material in Base64 format.
               The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
               If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
               This value is obtained refer to
               [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] encrypted_privatekey: Specifies the private key encrypted using a temporary
               intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
               and equals(=). This parameter is required for importing an asymmetric key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] expiration_time: Specifies the expiration time of the key material.
               This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
               offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
               The time must be greater than the current time. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] import_token: Specifies the key import token in Base64 format.
               The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
               obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_id: Specifies the ID of the KMS key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyMaterialArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KMS key material resource within HuaweiCloud.

        > NOTE: Please confirm that the state of the imported key is pending import.

        ## Example Usage

        variable "key_id" {}
        variable "import_token" {}
        variable "encrypted_key_material" {}

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dew.KeyMaterial("test",
            key_id=key_id,
            import_token=import_token,
            encrypted_key_material=encrypted_key_material)
        ```

        ## Import

        The KMS key material can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/keyMaterial:KeyMaterial test 7056d636-ac60-4663-8a6c-82d3c32c1c64
        ```

        Note that the imported state may not be identical to your resource definition,

        due to `import_token`, `encrypted_key_material` and `encrypted_privatekey` are missing from the API response.

        It is generally recommended running `pulumi preview` after importing a KMS key material.

        You can then decide if changes should be applied to the KMS key material, or the resource

        definition should be updated to align with the KMS key material. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_kms_key_material" "test" {

            ...

          lifecycle {

            ignore_changes = [ import_token, encrypted_key_material, encrypted_privatekey ]

          }

        }

        :param str resource_name: The name of the resource.
        :param KeyMaterialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyMaterialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encrypted_key_material: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted_privatekey: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 import_token: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyMaterialArgs.__new__(KeyMaterialArgs)

            if encrypted_key_material is None and not opts.urn:
                raise TypeError("Missing required property 'encrypted_key_material'")
            __props__.__dict__["encrypted_key_material"] = encrypted_key_material
            __props__.__dict__["encrypted_privatekey"] = encrypted_privatekey
            __props__.__dict__["expiration_time"] = expiration_time
            if import_token is None and not opts.urn:
                raise TypeError("Missing required property 'import_token'")
            __props__.__dict__["import_token"] = import_token
            if key_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_id'")
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["region"] = region
            __props__.__dict__["key_state"] = None
            __props__.__dict__["key_usage"] = None
        super(KeyMaterial, __self__).__init__(
            'huaweicloud:Dew/keyMaterial:KeyMaterial',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            encrypted_key_material: Optional[pulumi.Input[_builtins.str]] = None,
            encrypted_privatekey: Optional[pulumi.Input[_builtins.str]] = None,
            expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
            import_token: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_state: Optional[pulumi.Input[_builtins.str]] = None,
            key_usage: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'KeyMaterial':
        """
        Get an existing KeyMaterial resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] encrypted_key_material: Specifies the encrypted symmetric key material in Base64 format.
               The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
               If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
               This value is obtained refer to
               [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] encrypted_privatekey: Specifies the private key encrypted using a temporary
               intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
               and equals(=). This parameter is required for importing an asymmetric key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] expiration_time: Specifies the expiration time of the key material.
               This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
               offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
               The time must be greater than the current time. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] import_token: Specifies the key import token in Base64 format.
               The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
               obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_id: Specifies the ID of the KMS key.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] key_state: The status of the kms key. The valid values are as follows:
               **1**: To be activated
               **2**: Enabled.
               **3**: Disabled.
               **4**: Pending deletion.
               **5**: Pending import.
        :param pulumi.Input[_builtins.str] key_usage: The key usage. The value can be **ENCRYPT_DECRYPT** or **SIGN_VERIFY**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyMaterialState.__new__(_KeyMaterialState)

        __props__.__dict__["encrypted_key_material"] = encrypted_key_material
        __props__.__dict__["encrypted_privatekey"] = encrypted_privatekey
        __props__.__dict__["expiration_time"] = expiration_time
        __props__.__dict__["import_token"] = import_token
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_state"] = key_state
        __props__.__dict__["key_usage"] = key_usage
        __props__.__dict__["region"] = region
        return KeyMaterial(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="encryptedKeyMaterial")
    def encrypted_key_material(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the encrypted symmetric key material in Base64 format.
        The value contains `344` to `360` characters, including letters, digits, slashes(/) and equals(=).
        If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
        This value is obtained refer to
        [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0089.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_key_material")

    @_builtins.property
    @pulumi.getter(name="encryptedPrivatekey")
    def encrypted_privatekey(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the private key encrypted using a temporary
        intermediate key. The value contains `200` to `6144` characters, including letters, digits, slashes(/)
        and equals(=). This parameter is required for importing an asymmetric key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "encrypted_privatekey")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the expiration time of the key material.
        This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
        offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
        The time must be greater than the current time. Changing this creates a new resource.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter(name="importToken")
    def import_token(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key import token in Base64 format.
        The value contains `200` to `6144` characters, including letters, digits, slashes(/) and equals(=). This value is
        obtained through the interface [Obtaining Key Import Parameters](https://support.huaweicloud.com/intl/en-us/api-dew/CreateParametersForImport.html).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "import_token")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the KMS key.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyState")
    def key_state(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the kms key. The valid values are as follows:
        **1**: To be activated
        **2**: Enabled.
        **3**: Disabled.
        **4**: Pending deletion.
        **5**: Pending import.
        """
        return pulumi.get(self, "key_state")

    @_builtins.property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Output[_builtins.str]:
        """
        The key usage. The value can be **ENCRYPT_DECRYPT** or **SIGN_VERIFY**.
        """
        return pulumi.get(self, "key_usage")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

