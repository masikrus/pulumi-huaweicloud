# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EventArgs', 'Event']

@pulumi.input_type
class EventArgs:
    def __init__(__self__, *,
                 event_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 notification_target_id: pulumi.Input[_builtins.str],
                 notification_target_name: pulumi.Input[_builtins.str],
                 notification_target_type: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Event resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] event_types: Specifies the event type list. Valid values are:
               + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
               + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
               + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
               + **SECRET_DELETED**: Triggered when a secret is deleted.
        :param pulumi.Input[_builtins.str] notification_target_id: Specifies the notification target ID.
               Currently, only SMN topic URN is supported.
        :param pulumi.Input[_builtins.str] notification_target_name: Specifies the notification target name.
               Currently, only SMN topic name is supported.
        :param pulumi.Input[_builtins.str] notification_target_type: Specifies the notification target type.
               Currently, only **SMN** is supported.
        :param pulumi.Input[_builtins.str] status: Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
               Only the event in **ENABLED** status can be triggered.
        :param pulumi.Input[_builtins.str] name: Specifies the event name. The valid length is limited from `1` to `64`.
               Only letters, digits, underscores (_) and hyphens (-) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "event_types", event_types)
        pulumi.set(__self__, "notification_target_id", notification_target_id)
        pulumi.set(__self__, "notification_target_name", notification_target_name)
        pulumi.set(__self__, "notification_target_type", notification_target_type)
        pulumi.set(__self__, "status", status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the event type list. Valid values are:
        + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
        + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
        + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
        + **SECRET_DELETED**: Triggered when a secret is deleted.
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "event_types", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the notification target ID.
        Currently, only SMN topic URN is supported.
        """
        return pulumi.get(self, "notification_target_id")

    @notification_target_id.setter
    def notification_target_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target_id", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the notification target name.
        Currently, only SMN topic name is supported.
        """
        return pulumi.get(self, "notification_target_name")

    @notification_target_name.setter
    def notification_target_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target_name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the notification target type.
        Currently, only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
        Only the event in **ENABLED** status can be triggered.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event name. The valid length is limited from `1` to `64`.
        Only letters, digits, underscores (_) and hyphens (-) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EventState:
    def __init__(__self__, *,
                 event_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Event resources.
        :param pulumi.Input[_builtins.str] event_id: The event ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] event_types: Specifies the event type list. Valid values are:
               + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
               + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
               + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
               + **SECRET_DELETED**: Triggered when a secret is deleted.
        :param pulumi.Input[_builtins.str] name: Specifies the event name. The valid length is limited from `1` to `64`.
               Only letters, digits, underscores (_) and hyphens (-) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] notification_target_id: Specifies the notification target ID.
               Currently, only SMN topic URN is supported.
        :param pulumi.Input[_builtins.str] notification_target_name: Specifies the notification target name.
               Currently, only SMN topic name is supported.
        :param pulumi.Input[_builtins.str] notification_target_type: Specifies the notification target type.
               Currently, only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
               Only the event in **ENABLED** status can be triggered.
        """
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if event_types is not None:
            pulumi.set(__self__, "event_types", event_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_target_id is not None:
            pulumi.set(__self__, "notification_target_id", notification_target_id)
        if notification_target_name is not None:
            pulumi.set(__self__, "notification_target_name", notification_target_name)
        if notification_target_type is not None:
            pulumi.set(__self__, "notification_target_type", notification_target_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The event ID.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_id", value)

    @_builtins.property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the event type list. Valid values are:
        + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
        + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
        + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
        + **SECRET_DELETED**: Triggered when a secret is deleted.
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "event_types", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event name. The valid length is limited from `1` to `64`.
        Only letters, digits, underscores (_) and hyphens (-) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the notification target ID.
        Currently, only SMN topic URN is supported.
        """
        return pulumi.get(self, "notification_target_id")

    @notification_target_id.setter
    def notification_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target_id", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the notification target name.
        Currently, only SMN topic name is supported.
        """
        return pulumi.get(self, "notification_target_name")

    @notification_target_name.setter
    def notification_target_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target_name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the notification target type.
        Currently, only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
        Only the event in **ENABLED** status can be triggered.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Dew/event:Event")
class Event(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CSMS (Cloud Secret Management Service) event resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        notification_target_type = config.require_object("notificationTargetType")
        notification_target_id = config.require_object("notificationTargetId")
        notification_target_name = config.require_object("notificationTargetName")
        test = huaweicloud.dew.Event("test",
            name="test_name",
            event_types=[
                "SECRET_VERSION_CREATED",
                "SECRET_ROTATED",
            ],
            status="ENABLED",
            notification_target_type=notification_target_type,
            notification_target_id=notification_target_id,
            notification_target_name=notification_target_name)
        ```

        ## Import

        The CSMS event can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/event:Event test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] event_types: Specifies the event type list. Valid values are:
               + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
               + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
               + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
               + **SECRET_DELETED**: Triggered when a secret is deleted.
        :param pulumi.Input[_builtins.str] name: Specifies the event name. The valid length is limited from `1` to `64`.
               Only letters, digits, underscores (_) and hyphens (-) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] notification_target_id: Specifies the notification target ID.
               Currently, only SMN topic URN is supported.
        :param pulumi.Input[_builtins.str] notification_target_name: Specifies the notification target name.
               Currently, only SMN topic name is supported.
        :param pulumi.Input[_builtins.str] notification_target_type: Specifies the notification target type.
               Currently, only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
               Only the event in **ENABLED** status can be triggered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CSMS (Cloud Secret Management Service) event resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        notification_target_type = config.require_object("notificationTargetType")
        notification_target_id = config.require_object("notificationTargetId")
        notification_target_name = config.require_object("notificationTargetName")
        test = huaweicloud.dew.Event("test",
            name="test_name",
            event_types=[
                "SECRET_VERSION_CREATED",
                "SECRET_ROTATED",
            ],
            status="ENABLED",
            notification_target_type=notification_target_type,
            notification_target_id=notification_target_id,
            notification_target_name=notification_target_name)
        ```

        ## Import

        The CSMS event can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/event:Event test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EventArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventArgs.__new__(EventArgs)

            if event_types is None and not opts.urn:
                raise TypeError("Missing required property 'event_types'")
            __props__.__dict__["event_types"] = event_types
            __props__.__dict__["name"] = name
            if notification_target_id is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_id'")
            __props__.__dict__["notification_target_id"] = notification_target_id
            if notification_target_name is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_name'")
            __props__.__dict__["notification_target_name"] = notification_target_name
            if notification_target_type is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_type'")
            __props__.__dict__["notification_target_type"] = notification_target_type
            __props__.__dict__["region"] = region
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["event_id"] = None
        super(Event, __self__).__init__(
            'huaweicloud:Dew/event:Event',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_id: Optional[pulumi.Input[_builtins.str]] = None,
            event_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target_id: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'Event':
        """
        Get an existing Event resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] event_id: The event ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] event_types: Specifies the event type list. Valid values are:
               + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
               + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
               + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
               + **SECRET_DELETED**: Triggered when a secret is deleted.
        :param pulumi.Input[_builtins.str] name: Specifies the event name. The valid length is limited from `1` to `64`.
               Only letters, digits, underscores (_) and hyphens (-) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] notification_target_id: Specifies the notification target ID.
               Currently, only SMN topic URN is supported.
        :param pulumi.Input[_builtins.str] notification_target_name: Specifies the notification target name.
               Currently, only SMN topic name is supported.
        :param pulumi.Input[_builtins.str] notification_target_type: Specifies the notification target type.
               Currently, only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
               Only the event in **ENABLED** status can be triggered.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventState.__new__(_EventState)

        __props__.__dict__["event_id"] = event_id
        __props__.__dict__["event_types"] = event_types
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_target_id"] = notification_target_id
        __props__.__dict__["notification_target_name"] = notification_target_name
        __props__.__dict__["notification_target_type"] = notification_target_type
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return Event(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="eventId")
    def event_id(self) -> pulumi.Output[_builtins.str]:
        """
        The event ID.
        """
        return pulumi.get(self, "event_id")

    @_builtins.property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the event type list. Valid values are:
        + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
        + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
        + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
        + **SECRET_DELETED**: Triggered when a secret is deleted.
        """
        return pulumi.get(self, "event_types")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the event name. The valid length is limited from `1` to `64`.
        Only letters, digits, underscores (_) and hyphens (-) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the notification target ID.
        Currently, only SMN topic URN is supported.
        """
        return pulumi.get(self, "notification_target_id")

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the notification target name.
        Currently, only SMN topic name is supported.
        """
        return pulumi.get(self, "notification_target_name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the notification target type.
        Currently, only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
        Only the event in **ENABLED** status can be triggered.
        """
        return pulumi.get(self, "status")

