# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AliasAssociateArgs', 'AliasAssociate']

@pulumi.input_type
class AliasAssociateArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[_builtins.str],
                 target_key_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AliasAssociate resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the key, it can only be prefixed with **alias/**.
               
               > And the alias must be an alias already used by other keys.
        :param pulumi.Input[_builtins.str] target_key_id: Specifies the target key ID used to bind the alias.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "target_key_id", target_key_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alias of the key, it can only be prefixed with **alias/**.

        > And the alias must be an alias already used by other keys.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="targetKeyId")
    def target_key_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target key ID used to bind the alias.
        """
        return pulumi.get(self, "target_key_id")

    @target_key_id.setter
    def target_key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_key_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AliasAssociateState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AliasAssociate resources.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the key, it can only be prefixed with **alias/**.
               
               > And the alias must be an alias already used by other keys.
        :param pulumi.Input[_builtins.str] alias_urn: The alias resource locator.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the alias.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_key_id: Specifies the target key ID used to bind the alias.
        :param pulumi.Input[_builtins.str] update_time: The update time of the alias.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if alias_urn is not None:
            pulumi.set(__self__, "alias_urn", alias_urn)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_key_id is not None:
            pulumi.set(__self__, "target_key_id", target_key_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias of the key, it can only be prefixed with **alias/**.

        > And the alias must be an alias already used by other keys.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="aliasUrn")
    def alias_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The alias resource locator.
        """
        return pulumi.get(self, "alias_urn")

    @alias_urn.setter
    def alias_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias_urn", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the alias.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetKeyId")
    def target_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target key ID used to bind the alias.
        """
        return pulumi.get(self, "target_key_id")

    @target_key_id.setter
    def target_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_key_id", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the alias.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("huaweicloud:Dew/aliasAssociate:AliasAssociate")
class AliasAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a KMS alias associate resource within HuaweiCloud.

          > This resource relies on the alias created by the Dew.Alias resource to associate with the target key.

          > When the alias is associated with the target key, the alias on the original key will be destroyed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_key_id = config.require_object("targetKeyId")
        alias = config.require_object("alias")
        test = huaweicloud.dew.AliasAssociate("test",
            target_key_id=target_key_id,
            alias=alias)
        ```

        ## Import

        The KMS alias can be imported using `target_key_id` and `alias`, separated by a question mark (?), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/aliasAssociate:AliasAssociate test <target_key_id>?<alias>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the key, it can only be prefixed with **alias/**.
               
               > And the alias must be an alias already used by other keys.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_key_id: Specifies the target key ID used to bind the alias.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AliasAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KMS alias associate resource within HuaweiCloud.

          > This resource relies on the alias created by the Dew.Alias resource to associate with the target key.

          > When the alias is associated with the target key, the alias on the original key will be destroyed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_key_id = config.require_object("targetKeyId")
        alias = config.require_object("alias")
        test = huaweicloud.dew.AliasAssociate("test",
            target_key_id=target_key_id,
            alias=alias)
        ```

        ## Import

        The KMS alias can be imported using `target_key_id` and `alias`, separated by a question mark (?), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/aliasAssociate:AliasAssociate test <target_key_id>?<alias>
        ```

        :param str resource_name: The name of the resource.
        :param AliasAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AliasAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AliasAssociateArgs.__new__(AliasAssociateArgs)

            if alias is None and not opts.urn:
                raise TypeError("Missing required property 'alias'")
            __props__.__dict__["alias"] = alias
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if target_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_key_id'")
            __props__.__dict__["target_key_id"] = target_key_id
            __props__.__dict__["alias_urn"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(AliasAssociate, __self__).__init__(
            'huaweicloud:Dew/aliasAssociate:AliasAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'AliasAssociate':
        """
        Get an existing AliasAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the key, it can only be prefixed with **alias/**.
               
               > And the alias must be an alias already used by other keys.
        :param pulumi.Input[_builtins.str] alias_urn: The alias resource locator.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the alias.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_key_id: Specifies the target key ID used to bind the alias.
        :param pulumi.Input[_builtins.str] update_time: The update time of the alias.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AliasAssociateState.__new__(_AliasAssociateState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["alias_urn"] = alias_urn
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["target_key_id"] = target_key_id
        __props__.__dict__["update_time"] = update_time
        return AliasAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alias of the key, it can only be prefixed with **alias/**.

        > And the alias must be an alias already used by other keys.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="aliasUrn")
    def alias_urn(self) -> pulumi.Output[_builtins.str]:
        """
        The alias resource locator.
        """
        return pulumi.get(self, "alias_urn")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the alias.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetKeyId")
    def target_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target key ID used to bind the alias.
        """
        return pulumi.get(self, "target_key_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the alias.
        """
        return pulumi.get(self, "update_time")

