# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DecryptDatakeyArgs', 'DecryptDatakey']

@pulumi.input_type
class DecryptDatakeyArgs:
    def __init__(__self__, *,
                 cipher_text: pulumi.Input[_builtins.str],
                 datakey_cipher_length: pulumi.Input[_builtins.str],
                 key_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DecryptDatakey resource.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the DEK ciphertext and metadata in hexadecimal string.
               The value is the `cipher_text` in the result of encrypting the data key.
        :param pulumi.Input[_builtins.str] datakey_cipher_length: Specifies the byte length of the DEK ciphertext.
               The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
               For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] sequence: Specifies the sequence number of the request message, `36` bytes.
               For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        pulumi.set(__self__, "cipher_text", cipher_text)
        pulumi.set(__self__, "datakey_cipher_length", datakey_cipher_length)
        pulumi.set(__self__, "key_id", key_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DEK ciphertext and metadata in hexadecimal string.
        The value is the `cipher_text` in the result of encrypting the data key.
        """
        return pulumi.get(self, "cipher_text")

    @cipher_text.setter
    def cipher_text(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cipher_text", value)

    @_builtins.property
    @pulumi.getter(name="datakeyCipherLength")
    def datakey_cipher_length(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the byte length of the DEK ciphertext.
        The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        """
        return pulumi.get(self, "datakey_cipher_length")

    @datakey_cipher_length.setter
    def datakey_cipher_length(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datakey_cipher_length", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key ID.
        The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
        For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the sequence number of the request message, `36` bytes.
        For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence", value)


@pulumi.input_type
class _DecryptDatakeyState:
    def __init__(__self__, *,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 data_key: Optional[pulumi.Input[_builtins.str]] = None,
                 datakey_cipher_length: Optional[pulumi.Input[_builtins.str]] = None,
                 datakey_dgst: Optional[pulumi.Input[_builtins.str]] = None,
                 datakey_length: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DecryptDatakey resources.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the DEK ciphertext and metadata in hexadecimal string.
               The value is the `cipher_text` in the result of encrypting the data key.
        :param pulumi.Input[_builtins.str] data_key: The DEK plaintext in hexadecimal string.
        :param pulumi.Input[_builtins.str] datakey_cipher_length: Specifies the byte length of the DEK ciphertext.
               The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        :param pulumi.Input[_builtins.str] datakey_dgst: The SHA256 value of the DEK plaintext in hexadecimal string.
        :param pulumi.Input[_builtins.str] datakey_length: The byte length of DEK plaintext.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
               For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] sequence: Specifies the sequence number of the request message, `36` bytes.
               For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        if cipher_text is not None:
            pulumi.set(__self__, "cipher_text", cipher_text)
        if data_key is not None:
            pulumi.set(__self__, "data_key", data_key)
        if datakey_cipher_length is not None:
            pulumi.set(__self__, "datakey_cipher_length", datakey_cipher_length)
        if datakey_dgst is not None:
            pulumi.set(__self__, "datakey_dgst", datakey_dgst)
        if datakey_length is not None:
            pulumi.set(__self__, "datakey_length", datakey_length)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DEK ciphertext and metadata in hexadecimal string.
        The value is the `cipher_text` in the result of encrypting the data key.
        """
        return pulumi.get(self, "cipher_text")

    @cipher_text.setter
    def cipher_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_text", value)

    @_builtins.property
    @pulumi.getter(name="dataKey")
    def data_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DEK plaintext in hexadecimal string.
        """
        return pulumi.get(self, "data_key")

    @data_key.setter
    def data_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_key", value)

    @_builtins.property
    @pulumi.getter(name="datakeyCipherLength")
    def datakey_cipher_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the byte length of the DEK ciphertext.
        The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        """
        return pulumi.get(self, "datakey_cipher_length")

    @datakey_cipher_length.setter
    def datakey_cipher_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datakey_cipher_length", value)

    @_builtins.property
    @pulumi.getter(name="datakeyDgst")
    def datakey_dgst(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SHA256 value of the DEK plaintext in hexadecimal string.
        """
        return pulumi.get(self, "datakey_dgst")

    @datakey_dgst.setter
    def datakey_dgst(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datakey_dgst", value)

    @_builtins.property
    @pulumi.getter(name="datakeyLength")
    def datakey_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The byte length of DEK plaintext.
        """
        return pulumi.get(self, "datakey_length")

    @datakey_length.setter
    def datakey_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datakey_length", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key ID.
        The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
        For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the sequence number of the request message, `36` bytes.
        For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence", value)


@pulumi.type_token("huaweicloud:Dew/decryptDatakey:DecryptDatakey")
class DecryptDatakey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 datakey_cipher_length: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a KMS decrypt datakey resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not recover the decrypted datakey,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_id = config.require_object("keyId")
        cipher_text = config.require_object("cipherText")
        datakey_cipher_length = config.require_object("datakeyCipherLength")
        test = huaweicloud.dew.DecryptDatakey("test",
            key_id=key_id,
            cipher_text=cipher_text,
            datakey_cipher_length=datakey_cipher_length)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the DEK ciphertext and metadata in hexadecimal string.
               The value is the `cipher_text` in the result of encrypting the data key.
        :param pulumi.Input[_builtins.str] datakey_cipher_length: Specifies the byte length of the DEK ciphertext.
               The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
               For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] sequence: Specifies the sequence number of the request message, `36` bytes.
               For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DecryptDatakeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KMS decrypt datakey resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not recover the decrypted datakey,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_id = config.require_object("keyId")
        cipher_text = config.require_object("cipherText")
        datakey_cipher_length = config.require_object("datakeyCipherLength")
        test = huaweicloud.dew.DecryptDatakey("test",
            key_id=key_id,
            cipher_text=cipher_text,
            datakey_cipher_length=datakey_cipher_length)
        ```

        :param str resource_name: The name of the resource.
        :param DecryptDatakeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DecryptDatakeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 datakey_cipher_length: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DecryptDatakeyArgs.__new__(DecryptDatakeyArgs)

            if cipher_text is None and not opts.urn:
                raise TypeError("Missing required property 'cipher_text'")
            __props__.__dict__["cipher_text"] = cipher_text
            if datakey_cipher_length is None and not opts.urn:
                raise TypeError("Missing required property 'datakey_cipher_length'")
            __props__.__dict__["datakey_cipher_length"] = datakey_cipher_length
            __props__.__dict__["enable_force_new"] = enable_force_new
            if key_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_id'")
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["region"] = region
            __props__.__dict__["sequence"] = sequence
            __props__.__dict__["data_key"] = None
            __props__.__dict__["datakey_dgst"] = None
            __props__.__dict__["datakey_length"] = None
        super(DecryptDatakey, __self__).__init__(
            'huaweicloud:Dew/decryptDatakey:DecryptDatakey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
            data_key: Optional[pulumi.Input[_builtins.str]] = None,
            datakey_cipher_length: Optional[pulumi.Input[_builtins.str]] = None,
            datakey_dgst: Optional[pulumi.Input[_builtins.str]] = None,
            datakey_length: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sequence: Optional[pulumi.Input[_builtins.str]] = None) -> 'DecryptDatakey':
        """
        Get an existing DecryptDatakey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the DEK ciphertext and metadata in hexadecimal string.
               The value is the `cipher_text` in the result of encrypting the data key.
        :param pulumi.Input[_builtins.str] data_key: The DEK plaintext in hexadecimal string.
        :param pulumi.Input[_builtins.str] datakey_cipher_length: Specifies the byte length of the DEK ciphertext.
               The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        :param pulumi.Input[_builtins.str] datakey_dgst: The SHA256 value of the DEK plaintext in hexadecimal string.
        :param pulumi.Input[_builtins.str] datakey_length: The byte length of DEK plaintext.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
               For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] sequence: Specifies the sequence number of the request message, `36` bytes.
               For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DecryptDatakeyState.__new__(_DecryptDatakeyState)

        __props__.__dict__["cipher_text"] = cipher_text
        __props__.__dict__["data_key"] = data_key
        __props__.__dict__["datakey_cipher_length"] = datakey_cipher_length
        __props__.__dict__["datakey_dgst"] = datakey_dgst
        __props__.__dict__["datakey_length"] = datakey_length
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["region"] = region
        __props__.__dict__["sequence"] = sequence
        return DecryptDatakey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DEK ciphertext and metadata in hexadecimal string.
        The value is the `cipher_text` in the result of encrypting the data key.
        """
        return pulumi.get(self, "cipher_text")

    @_builtins.property
    @pulumi.getter(name="dataKey")
    def data_key(self) -> pulumi.Output[_builtins.str]:
        """
        The DEK plaintext in hexadecimal string.
        """
        return pulumi.get(self, "data_key")

    @_builtins.property
    @pulumi.getter(name="datakeyCipherLength")
    def datakey_cipher_length(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the byte length of the DEK ciphertext.
        The valid value ranges from `1` to `1024`, with a commonly used value of `64`.
        """
        return pulumi.get(self, "datakey_cipher_length")

    @_builtins.property
    @pulumi.getter(name="datakeyDgst")
    def datakey_dgst(self) -> pulumi.Output[_builtins.str]:
        """
        The SHA256 value of the DEK plaintext in hexadecimal string.
        """
        return pulumi.get(self, "datakey_dgst")

    @_builtins.property
    @pulumi.getter(name="datakeyLength")
    def datakey_length(self) -> pulumi.Output[_builtins.str]:
        """
        The byte length of DEK plaintext.
        """
        return pulumi.get(self, "datakey_length")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key ID.
        The valid length is `36` bytes, meeting regular match **^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$**.
        For example: **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the sequence number of the request message, `36` bytes.
        For example: **919c82d4-8046-4722-9094-35c3c6524cff**.
        """
        return pulumi.get(self, "sequence")

