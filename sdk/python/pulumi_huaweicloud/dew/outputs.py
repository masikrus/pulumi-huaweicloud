# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'KeypairAssociateServer',
    'KeypairAssociateServerAuth',
    'KeypairDisassociateServer',
    'KeypairDisassociateServerAuth',
    'GetCustomKeysByTagsMatchResult',
    'GetCustomKeysByTagsResourceResult',
    'GetCustomKeysByTagsResourceResourceDetailResult',
    'GetCustomKeysByTagsResourceTagResult',
    'GetCustomKeysByTagsTagResult',
    'GetEventsEventResult',
    'GetEventsEventNotificationResult',
    'GetFailedTasksTaskResult',
    'GetGrantsGrantResult',
    'GetKeypairsKeypairResult',
    'GetKeysKeyResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetRunningTasksTaskResult',
    'GetSecretVersionsVersionResult',
    'GetSecretsByTagsMatchResult',
    'GetSecretsByTagsResourceResult',
    'GetSecretsByTagsResourceResourceDetailResult',
    'GetSecretsByTagsResourceSysTagResult',
    'GetSecretsByTagsResourceTagResult',
    'GetSecretsByTagsTagResult',
    'GetSecretsSecretResult',
    'GetTasksTaskResult',
]

@pulumi.output_type
class KeypairAssociateServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePassword":
            suggest = "disable_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeypairAssociateServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeypairAssociateServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeypairAssociateServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 auth: Optional['outputs.KeypairAssociateServerAuth'] = None,
                 disable_password: Optional[_builtins.bool] = None,
                 port: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies ID of the ECS which need to associate (replace or reset) the SSH keypair.
        :param 'KeypairAssociateServerAuthArgs' auth: Specifies the authentication information.
               The auth structure is documented below.
        :param _builtins.bool disable_password: Specifies whether the password is disabled.
               The valid values are as follows:
               + **true**: Indicates disable SSH login for virtual machines.
               + **false**: Indicates enable SSH login for virtual machines. Defaults to **false**.
               
               <a name="server_auth"></a>
               The `auth` block supports:
        :param _builtins.int port: Specifies the SSH listening port. The default value is `22`.
               
               > When the ECS is shut down, the operation (associate, disassociate, reset) `port` is fixed at `22` and cannot be configured.
               At the same time, `auth` can not be set. When the ECS is turned on, the operation (associate,replace) `port` can be configured
               and defaults to `22`, and `auth` is required, otherwise the operation will fail.
        """
        pulumi.set(__self__, "id", id)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if disable_password is not None:
            pulumi.set(__self__, "disable_password", disable_password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies ID of the ECS which need to associate (replace or reset) the SSH keypair.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def auth(self) -> Optional['outputs.KeypairAssociateServerAuth']:
        """
        Specifies the authentication information.
        The auth structure is documented below.
        """
        return pulumi.get(self, "auth")

    @_builtins.property
    @pulumi.getter(name="disablePassword")
    def disable_password(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the password is disabled.
        The valid values are as follows:
        + **true**: Indicates disable SSH login for virtual machines.
        + **false**: Indicates enable SSH login for virtual machines. Defaults to **false**.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
        return pulumi.get(self, "disable_password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the operation (associate, disassociate, reset) `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the operation (associate,replace) `port` can be configured
        and defaults to `22`, and `auth` is required, otherwise the operation will fail.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class KeypairAssociateServerAuth(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the value of the key depending on the `type`.
               When the `type` is set to **password**, it represents the password.
               When the `type` is set to **keypair**, it represents the private key.
        :param _builtins.str type: Specifies the value of the authentication type.
               The valid values are **password** and **keypair**.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the authentication type.
        The valid values are **password** and **keypair**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KeypairDisassociateServer(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 auth: Optional['outputs.KeypairDisassociateServerAuth'] = None,
                 port: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies ID of the ECS which need to disassociate the SSH keypair.
        :param 'KeypairDisassociateServerAuthArgs' auth: Specifies the authentication information. This parameter is required for replacement
               and not required for reset.
               The auth structure is documented below.
        :param _builtins.int port: Specifies the SSH listening port. The default value is `22`.
               
               > When the ECS is shut down, the disassociate `port` is fixed at `22` and cannot be configured.
               At the same time, `auth` can not be set. When the ECS is turned on, the disassociate `port` can be
               configured and defaults to `22`, and `auth` is required, otherwise the operation will fail.
               
               <a name="server_auth"></a>
               The `auth` block supports:
        """
        pulumi.set(__self__, "id", id)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies ID of the ECS which need to disassociate the SSH keypair.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def auth(self) -> Optional['outputs.KeypairDisassociateServerAuth']:
        """
        Specifies the authentication information. This parameter is required for replacement
        and not required for reset.
        The auth structure is documented below.
        """
        return pulumi.get(self, "auth")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the disassociate `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the disassociate `port` can be
        configured and defaults to `22`, and `auth` is required, otherwise the operation will fail.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class KeypairDisassociateServerAuth(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the value of the key depending on the `type`.
               When the `type` is set to **password**, it represents the password.
               When the `type` is set to **keypair**, it represents the private key.
        :param _builtins.str type: Specifies the value of an authentication type.
               The valid values are **password** and **keypair**.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the value of an authentication type.
        The valid values are **password** and **keypair**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCustomKeysByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the field to be matched, for example, **resource_name**.
        :param _builtins.str value: Specifies the value to be matched. It contains a maximum of `255` characters and
               cannot be empty.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value to be matched. It contains a maximum of `255` characters and
        cannot be empty.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomKeysByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_details: Sequence['outputs.GetCustomKeysByTagsResourceResourceDetailResult'],
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetCustomKeysByTagsResourceTagResult']):
        """
        :param Sequence['GetCustomKeysByTagsResourceResourceDetailArgs'] resource_details: The key details.
               The resource_detail structure is documented below.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name. This parameter is an empty string by default.
        :param Sequence['GetCustomKeysByTagsResourceTagArgs'] tags: Specifies the tag list, which is a collection of key-value pairs.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_details", resource_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetCustomKeysByTagsResourceResourceDetailResult']:
        """
        The key details.
        The resource_detail structure is documented below.
        """
        return pulumi.get(self, "resource_details")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name. This parameter is an empty string by default.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetCustomKeysByTagsResourceTagResult']:
        """
        Specifies the tag list, which is a collection of key-value pairs.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetCustomKeysByTagsResourceResourceDetailResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 default_key_flag: _builtins.str,
                 domain_id: _builtins.str,
                 expiration_time: _builtins.str,
                 key_alias: _builtins.str,
                 key_description: _builtins.str,
                 key_id: _builtins.str,
                 key_label: _builtins.str,
                 key_rotation_enabled: _builtins.str,
                 key_spec: _builtins.str,
                 key_state: _builtins.str,
                 key_type: _builtins.str,
                 key_usage: _builtins.str,
                 keystore_id: _builtins.str,
                 origin: _builtins.str,
                 partition_type: _builtins.str,
                 realm: _builtins.str,
                 scheduled_deletion_date: _builtins.str,
                 sys_enterprise_project_id: _builtins.str):
        """
        :param _builtins.str creation_date: The time when the key was created. The timestamp indicates the total seconds past the start of
               the epoch date (January 1, 1970).
        :param _builtins.str default_key_flag: The master key identifier. The valid values are as follows:  
               + **1**: Indicates default master keys.
               + **2**: Indicates non-default master keys.
        :param _builtins.str domain_id: The user domain ID.
        :param _builtins.str expiration_time: The time when the key material expires. The timestamp indicates the total seconds past the start of
               the epoch date **(January 1, 1970)**.
        :param _builtins.str key_alias: The key alias.
        :param _builtins.str key_description: The key description.
        :param _builtins.str key_id: The CMK ID.
        :param _builtins.str key_label: The key label in the encryption machine.
        :param _builtins.str key_rotation_enabled: The key rotation status. The default value is **false**, indicating that key rotation is disabled.
        :param _builtins.str key_spec: The key generation algorithm. The values can be **AES_256**, **SM4**, **RSA_2048**, **RSA_3072**,
               **RSA_4096**, **EC_P256**, **EC_P384**, **SM2**.
        :param _builtins.str key_state: The key status, which matches the regular expression **^[1-5]{1}$**. The valid values are as follows:  
               + **1**: Indicates to be activated.
               + **2**: Indicates enabled.
               + **3**: Indicates disabled.
               + **4**: Indicates pending deletion.
               + **5**: Indicates pending import.
        :param _builtins.str key_type: The key type.
        :param _builtins.str key_usage: The CMK usage. The value can be **ENCRYPT_DECRYPT**, **SIGN_VERIFY**.
        :param _builtins.str keystore_id: The keystore ID.
        :param _builtins.str origin: The key source. The valid values are as follows:  
               + **kms**: Indicates the key material was generated by KMS.
               + **external**: Indicates the key material was imported.
        :param _builtins.str partition_type: The partition type, enumerated as follows:  
               + **1**: Indicates professional version.
        :param _builtins.str realm: The key realm.
        :param _builtins.str scheduled_deletion_date: The time when the key was scheduled to be deleted. The timestamp indicates the total
               seconds past the start of the epoch date **(January 1, 1970)**.
        :param _builtins.str sys_enterprise_project_id: The enterprise project ID. Its default value is **0**.
               For users who have enabled the enterprise project function, this value indicates that resources are in the default
               enterprise project. For users who have not enabled the enterprise project function, this value indicates that resources
               are not in the default enterprise project.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "default_key_flag", default_key_flag)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "key_alias", key_alias)
        pulumi.set(__self__, "key_description", key_description)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_label", key_label)
        pulumi.set(__self__, "key_rotation_enabled", key_rotation_enabled)
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "key_state", key_state)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_usage", key_usage)
        pulumi.set(__self__, "keystore_id", keystore_id)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "partition_type", partition_type)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "scheduled_deletion_date", scheduled_deletion_date)
        pulumi.set(__self__, "sys_enterprise_project_id", sys_enterprise_project_id)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The time when the key was created. The timestamp indicates the total seconds past the start of
        the epoch date (January 1, 1970).
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="defaultKeyFlag")
    def default_key_flag(self) -> _builtins.str:
        """
        The master key identifier. The valid values are as follows:  
        + **1**: Indicates default master keys.
        + **2**: Indicates non-default master keys.
        """
        return pulumi.get(self, "default_key_flag")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The user domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> _builtins.str:
        """
        The time when the key material expires. The timestamp indicates the total seconds past the start of
        the epoch date **(January 1, 1970)**.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> _builtins.str:
        """
        The key alias.
        """
        return pulumi.get(self, "key_alias")

    @_builtins.property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> _builtins.str:
        """
        The key description.
        """
        return pulumi.get(self, "key_description")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        """
        The CMK ID.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyLabel")
    def key_label(self) -> _builtins.str:
        """
        The key label in the encryption machine.
        """
        return pulumi.get(self, "key_label")

    @_builtins.property
    @pulumi.getter(name="keyRotationEnabled")
    def key_rotation_enabled(self) -> _builtins.str:
        """
        The key rotation status. The default value is **false**, indicating that key rotation is disabled.
        """
        return pulumi.get(self, "key_rotation_enabled")

    @_builtins.property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> _builtins.str:
        """
        The key generation algorithm. The values can be **AES_256**, **SM4**, **RSA_2048**, **RSA_3072**,
        **RSA_4096**, **EC_P256**, **EC_P384**, **SM2**.
        """
        return pulumi.get(self, "key_spec")

    @_builtins.property
    @pulumi.getter(name="keyState")
    def key_state(self) -> _builtins.str:
        """
        The key status, which matches the regular expression **^[1-5]{1}$**. The valid values are as follows:  
        + **1**: Indicates to be activated.
        + **2**: Indicates enabled.
        + **3**: Indicates disabled.
        + **4**: Indicates pending deletion.
        + **5**: Indicates pending import.
        """
        return pulumi.get(self, "key_state")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        The key type.
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> _builtins.str:
        """
        The CMK usage. The value can be **ENCRYPT_DECRYPT**, **SIGN_VERIFY**.
        """
        return pulumi.get(self, "key_usage")

    @_builtins.property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> _builtins.str:
        """
        The keystore ID.
        """
        return pulumi.get(self, "keystore_id")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        The key source. The valid values are as follows:  
        + **kms**: Indicates the key material was generated by KMS.
        + **external**: Indicates the key material was imported.
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="partitionType")
    def partition_type(self) -> _builtins.str:
        """
        The partition type, enumerated as follows:  
        + **1**: Indicates professional version.
        """
        return pulumi.get(self, "partition_type")

    @_builtins.property
    @pulumi.getter
    def realm(self) -> _builtins.str:
        """
        The key realm.
        """
        return pulumi.get(self, "realm")

    @_builtins.property
    @pulumi.getter(name="scheduledDeletionDate")
    def scheduled_deletion_date(self) -> _builtins.str:
        """
        The time when the key was scheduled to be deleted. The timestamp indicates the total
        seconds past the start of the epoch date **(January 1, 1970)**.
        """
        return pulumi.get(self, "scheduled_deletion_date")

    @_builtins.property
    @pulumi.getter(name="sysEnterpriseProjectId")
    def sys_enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID. Its default value is **0**.
        For users who have enabled the enterprise project function, this value indicates that resources are in the default
        enterprise project. For users who have not enabled the enterprise project function, this value indicates that resources
        are not in the default enterprise project.
        """
        return pulumi.get(self, "sys_enterprise_project_id")


@pulumi.output_type
class GetCustomKeysByTagsResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the field to be matched, for example, **resource_name**.
        :param _builtins.str value: Specifies the value to be matched. It contains a maximum of `255` characters and
               cannot be empty.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value to be matched. It contains a maximum of `255` characters and
        cannot be empty.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomKeysByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the field to be matched, for example, **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the tag value set.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the tag value set.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEventsEventResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 event_id: _builtins.str,
                 event_types: Sequence[_builtins.str],
                 name: _builtins.str,
                 notifications: Sequence['outputs.GetEventsEventNotificationResult'],
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the time when the event created, in UTC format.
        :param _builtins.str event_id: Specifies the ID of the event.
        :param Sequence[_builtins.str] event_types: Indicates the event type. Valid values are:
               + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
               + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
               + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
               + **SECRET_DELETED**: Triggered when a secret is deleted.
        :param _builtins.str name: Specifies the name of the event.
        :param Sequence['GetEventsEventNotificationArgs'] notifications: Indicates the event notification list.
               The notification structure is documented below.
        :param _builtins.str status: Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
               Only the event in **ENABLED** status can be triggered.
        :param _builtins.str updated_at: Indicates the time when the event updated, in UTC format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_types", event_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time when the event created, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="eventId")
    def event_id(self) -> _builtins.str:
        """
        Specifies the ID of the event.
        """
        return pulumi.get(self, "event_id")

    @_builtins.property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the event type. Valid values are:
        + **SECRET_VERSION_CREATED**: Triggered when a version of a secret is created.
        + **SECRET_VERSION_EXPIRED**: Triggered when a secret version expires, and only once per expiration.
        + **SECRET_ROTATED**: Triggered when a secret is rotated. Currently, only RDS secrets can be automatically rotated.
        + **SECRET_DELETED**: Triggered when a secret is deleted.
        """
        return pulumi.get(self, "event_types")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetEventsEventNotificationResult']:
        """
        Indicates the event notification list.
        The notification structure is documented below.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the event status. Valid values are **ENABLED** and **DISABLED**.
        Only the event in **ENABLED** status can be triggered.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the time when the event updated, in UTC format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEventsEventNotificationResult(dict):
    def __init__(__self__, *,
                 target_id: _builtins.str,
                 target_name: _builtins.str,
                 target_type: _builtins.str):
        """
        :param _builtins.str target_id: Indicates the object ID of the event notification.
        :param _builtins.str target_name: Indicates the object name of the event notification.
        :param _builtins.str target_type: Indicates the object type of the event notification.
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Indicates the object ID of the event notification.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        Indicates the object name of the event notification.
        """
        return pulumi.get(self, "target_name")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> _builtins.str:
        """
        Indicates the object type of the event notification.
        """
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetFailedTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 keypair_name: _builtins.str,
                 operate_type: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 task_error_code: _builtins.str,
                 task_error_msg: _builtins.str,
                 task_time: _builtins.str):
        """
        :param _builtins.str id: The ID of the task.
        :param _builtins.str keypair_name: The name of the keypair associated with the task.
        :param _builtins.str operate_type: The operation type of the task.
               The value can be **FAILED_RESET**, **FAILED_REPLACE** or **FAILED_UNBIND**.
        :param _builtins.str server_id: The ID of the instance associated with the task.
        :param _builtins.str server_name: The name of the instance associated with the task.
        :param _builtins.str task_error_code: The error code of the task execution failure.
        :param _builtins.str task_error_msg: The error information of the task execution failure.
        :param _builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_error_code", task_error_code)
        pulumi.set(__self__, "task_error_msg", task_error_msg)
        pulumi.set(__self__, "task_time", task_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type of the task.
        The value can be **FAILED_RESET**, **FAILED_REPLACE** or **FAILED_UNBIND**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="taskErrorCode")
    def task_error_code(self) -> _builtins.str:
        """
        The error code of the task execution failure.
        """
        return pulumi.get(self, "task_error_code")

    @_builtins.property
    @pulumi.getter(name="taskErrorMsg")
    def task_error_msg(self) -> _builtins.str:
        """
        The error information of the task execution failure.
        """
        return pulumi.get(self, "task_error_msg")

    @_builtins.property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> _builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetGrantsGrantResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 grantee_principal: _builtins.str,
                 id: _builtins.str,
                 key_id: _builtins.str,
                 name: _builtins.str,
                 operations: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the grant, in RFC3339 format.
        :param _builtins.str creator: The ID of the user who created the grant.
        :param _builtins.str grantee_principal: The ID of the authorized user or account.
        :param _builtins.str id: The ID of the grant.
        :param _builtins.str key_id: Specifies the key ID to which the grants belong.
        :param _builtins.str name: The name of the grant.
        :param Sequence[_builtins.str] operations: List of granted operations.
        :param _builtins.str type: The authorization type.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "grantee_principal", grantee_principal)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the grant, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The ID of the user who created the grant.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> _builtins.str:
        """
        The ID of the authorized user or account.
        """
        return pulumi.get(self, "grantee_principal")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the grant.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        """
        Specifies the key ID to which the grants belong.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the grant.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence[_builtins.str]:
        """
        List of granted operations.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The authorization type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetKeypairsKeypairResult(dict):
    def __init__(__self__, *,
                 fingerprint: _builtins.str,
                 is_managed: _builtins.bool,
                 name: _builtins.str,
                 public_key: _builtins.str,
                 scope: _builtins.str):
        """
        :param _builtins.str fingerprint: Specifies the fingerprint of the keypair.
        :param _builtins.bool is_managed: Indicates whether the private key is managed by HuaweiCloud.
        :param _builtins.str name: Specifies the name of the keypair.
        :param _builtins.str public_key: Specifies the imported OpenSSH-formatted public key.
        :param _builtins.str scope: Indicates the scope of keypair. The value can be **account**or **user**.
        """
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "is_managed", is_managed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        """
        Specifies the fingerprint of the keypair.
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> _builtins.bool:
        """
        Indicates whether the private key is managed by HuaweiCloud.
        """
        return pulumi.get(self, "is_managed")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the keypair.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        """
        Specifies the imported OpenSSH-formatted public key.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Indicates the scope of keypair. The value can be **account**or **user**.
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetKeysKeyResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 default_key_flag: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 expiration_time: _builtins.str,
                 id: _builtins.str,
                 key_algorithm: _builtins.str,
                 key_alias: _builtins.str,
                 key_description: _builtins.str,
                 key_rotation_enabled: _builtins.str,
                 key_state: _builtins.str,
                 key_type: _builtins.str,
                 key_usage: _builtins.str,
                 keystore_id: _builtins.str,
                 origin: _builtins.str,
                 scheduled_deletion_date: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the key, in RFC3339 format.
        :param _builtins.str default_key_flag: The master key identifier.
               + **1**: Default master key.
               + **0**: Non-default master key.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the keys belong.
               
               > If the enterprise project function is not enabled, you do not need to set this parameter.
               <br/>If the enterprise project function is enabled, you can set this parameter. The default value is **all**,
               indedicate query the keys under all authorized enterprise projects.
        :param _builtins.str expiration_time: The expiration time of the key, in RFC3339 format.
        :param _builtins.str id: The key ID.
        :param _builtins.str key_algorithm: Specifies the key generation algorithm.
               The default value is **AES_256**. The valid values are as follow:
               + **AES_256**
               + **SM4**
               + **RSA_2048**
               + **RSA_3072**
               + **RSA_4096**
               + **EC_P256**
               + **EC_P384**
               + **SM2**
               + **ALL**
               
               >  If you want to query all keys (including asymmetric keys), you need to set the parameter value to **ALL**.
        :param _builtins.str key_alias: The key alias name.
        :param _builtins.str key_description: The key description.
        :param _builtins.str key_rotation_enabled: The key rotation status.
        :param _builtins.str key_state: Specifies the key current status.
               The valid values are as follow:
               + **1**: Waiting for activation.
               + **2**: Enabled.
               + **3**: Disabled.
               + **4**: Schedule deletion.
               + **5**: Waiting for import.
        :param _builtins.str key_type: The key type.
        :param _builtins.str key_usage: The key usage.
               + **ENCRYPT_DECRYPT**
               + **SIGN_VERIFY**
        :param _builtins.str keystore_id: The keystore ID to which the key belongs.
        :param _builtins.str origin: The key source.
               + **kms**: The key was generated by KMS.
               + **external**: The key was imported.
        :param _builtins.str scheduled_deletion_date: The scheduled deletion time of the key, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_key_flag", default_key_flag)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "key_alias", key_alias)
        pulumi.set(__self__, "key_description", key_description)
        pulumi.set(__self__, "key_rotation_enabled", key_rotation_enabled)
        pulumi.set(__self__, "key_state", key_state)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_usage", key_usage)
        pulumi.set(__self__, "keystore_id", keystore_id)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "scheduled_deletion_date", scheduled_deletion_date)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the key, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultKeyFlag")
    def default_key_flag(self) -> _builtins.str:
        """
        The master key identifier.
        + **1**: Default master key.
        + **0**: Non-default master key.
        """
        return pulumi.get(self, "default_key_flag")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID to which the keys belong.

        > If the enterprise project function is not enabled, you do not need to set this parameter.
        <br/>If the enterprise project function is enabled, you can set this parameter. The default value is **all**,
        indedicate query the keys under all authorized enterprise projects.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> _builtins.str:
        """
        The expiration time of the key, in RFC3339 format.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The key ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> _builtins.str:
        """
        Specifies the key generation algorithm.
        The default value is **AES_256**. The valid values are as follow:
        + **AES_256**
        + **SM4**
        + **RSA_2048**
        + **RSA_3072**
        + **RSA_4096**
        + **EC_P256**
        + **EC_P384**
        + **SM2**
        + **ALL**

        >  If you want to query all keys (including asymmetric keys), you need to set the parameter value to **ALL**.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> _builtins.str:
        """
        The key alias name.
        """
        return pulumi.get(self, "key_alias")

    @_builtins.property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> _builtins.str:
        """
        The key description.
        """
        return pulumi.get(self, "key_description")

    @_builtins.property
    @pulumi.getter(name="keyRotationEnabled")
    def key_rotation_enabled(self) -> _builtins.str:
        """
        The key rotation status.
        """
        return pulumi.get(self, "key_rotation_enabled")

    @_builtins.property
    @pulumi.getter(name="keyState")
    def key_state(self) -> _builtins.str:
        """
        Specifies the key current status.
        The valid values are as follow:
        + **1**: Waiting for activation.
        + **2**: Enabled.
        + **3**: Disabled.
        + **4**: Schedule deletion.
        + **5**: Waiting for import.
        """
        return pulumi.get(self, "key_state")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        The key type.
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> _builtins.str:
        """
        The key usage.
        + **ENCRYPT_DECRYPT**
        + **SIGN_VERIFY**
        """
        return pulumi.get(self, "key_usage")

    @_builtins.property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> _builtins.str:
        """
        The keystore ID to which the key belongs.
        """
        return pulumi.get(self, "keystore_id")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        The key source.
        + **kms**: The key was generated by KMS.
        + **external**: The key was imported.
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="scheduledDeletionDate")
    def scheduled_deletion_date(self) -> _builtins.str:
        """
        The scheduled deletion time of the key, in RFC3339 format.
        """
        return pulumi.get(self, "scheduled_deletion_date")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: The list of the resource quotas.
               The resources structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        The list of the resource quotas.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The total number of quotas.
        :param _builtins.str type: The type of the quotas. The valid values are as follows:
               + **CMK**: The user master key.
               + **grant_per_CMK**: The number of authorizations a user master key can create.
        :param _builtins.int used: The number of quotas used.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The total number of quotas.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the quotas. The valid values are as follows:
        + **CMK**: The user master key.
        + **grant_per_CMK**: The number of authorizations a user master key can create.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of quotas used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetRunningTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 keypair_name: _builtins.str,
                 operate_type: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 task_time: _builtins.str):
        """
        :param _builtins.str id: The ID of the task.
        :param _builtins.str keypair_name: The name of the keypair associated with the task.
        :param _builtins.str operate_type: The operation type of the task.
               The value can be **RUNNING**.
        :param _builtins.str server_id: The ID of the instance associated with the task.
        :param _builtins.str server_name: The name of the instance associated with the task.
        :param _builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_time", task_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type of the task.
        The value can be **RUNNING**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> _builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetSecretVersionsVersionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 expire_time: _builtins.str,
                 id: _builtins.str,
                 kms_key_id: _builtins.str,
                 secret_name: _builtins.str,
                 version_stages: Sequence[_builtins.str]):
        """
        :param _builtins.str created_at: The creation time of the secret version, in RFC3339 format.
        :param _builtins.str expire_time: The expiration time of the secret version, in RFC3339 format.
        :param _builtins.str id: The ID of the secret version.
        :param _builtins.str kms_key_id: The ID of the KMS key associated the secret.
        :param _builtins.str secret_name: Specifies the secret name to which the versions belong.
        :param Sequence[_builtins.str] version_stages: The secret version status list.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "version_stages", version_stages)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the secret version, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The expiration time of the secret version, in RFC3339 format.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the secret version.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> _builtins.str:
        """
        The ID of the KMS key associated the secret.
        """
        return pulumi.get(self, "kms_key_id")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        """
        Specifies the secret name to which the versions belong.
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter(name="versionStages")
    def version_stages(self) -> Sequence[_builtins.str]:
        """
        The secret version status list.
        """
        return pulumi.get(self, "version_stages")


@pulumi.output_type
class GetSecretsByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param _builtins.str value: Specifies the field for fuzzy match, maximum of `255` characters are allowed.
               If it is left blank, a null value is returned.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the field for fuzzy match, maximum of `255` characters are allowed.
        If it is left blank, a null value is returned.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecretsByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_details: Sequence['outputs.GetSecretsByTagsResourceResourceDetailResult'],
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 sys_tags: Sequence['outputs.GetSecretsByTagsResourceSysTagResult'],
                 tags: Sequence['outputs.GetSecretsByTagsResourceTagResult']):
        """
        :param Sequence['GetSecretsByTagsResourceResourceDetailArgs'] resource_details: The secret detail.
        :param _builtins.str resource_id: The secret ID.
        :param _builtins.str resource_name: The secret name.
        :param Sequence['GetSecretsByTagsResourceSysTagArgs'] sys_tags: The system tag list.
        :param Sequence['GetSecretsByTagsResourceTagArgs'] tags: Specifies the list of tags, the maximum of tags is `10`.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_details", resource_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "sys_tags", sys_tags)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetSecretsByTagsResourceResourceDetailResult']:
        """
        The secret detail.
        """
        return pulumi.get(self, "resource_details")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The secret ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The secret name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Sequence['outputs.GetSecretsByTagsResourceSysTagResult']:
        """
        The system tag list.
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSecretsByTagsResourceTagResult']:
        """
        Specifies the list of tags, the maximum of tags is `10`.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSecretsByTagsResourceResourceDetailResult(dict):
    def __init__(__self__, *,
                 auto_rotation: _builtins.bool,
                 create_time: _builtins.int,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 event_subscriptions: Sequence[_builtins.str],
                 id: _builtins.str,
                 kms_key_id: _builtins.str,
                 name: _builtins.str,
                 next_rotation_time: _builtins.int,
                 rotation_config: _builtins.str,
                 rotation_period: _builtins.str,
                 rotation_time: _builtins.int,
                 scheduled_delete_time: _builtins.int,
                 secret_type: _builtins.str,
                 state: _builtins.str,
                 update_time: _builtins.int):
        """
        :param _builtins.bool auto_rotation: Automatic rotation. The valid values are as follows:
               + **true**: Enabled.
               + **false**: Disabled.
        :param _builtins.int create_time: The creation time of the secret, the value is a timestamp.
        :param _builtins.str description: The description of the secret.
        :param _builtins.str enterprise_project_id: The enterprise project ID.
        :param Sequence[_builtins.str] event_subscriptions: The list of events subscribed to by secret.
        :param _builtins.str id: The ID of the secret.
        :param _builtins.str kms_key_id: The ID of KMS key used to encrypt secret.
        :param _builtins.str name: The secret name.
        :param _builtins.int next_rotation_time: The next rotation time of the secret, the value is a timestamp.
        :param _builtins.str rotation_config: The secret rotation config. Valid when `auto_rotation` is **true**.
        :param _builtins.str rotation_period: The secret rotation period. Valid when `auto_rotation` is **true**.
        :param _builtins.int rotation_time: The rotation time of the secret, the value is a timestamp.
        :param _builtins.int scheduled_delete_time: The time of the secret to be scheduled deleted, the value is a timestamp.
        :param _builtins.str secret_type: The secret type. The valid values are as follows:
               + **COMMON**: shared secret (default), which is used to store sensitive information in an application system.
               + **RDS**: RDS secret, which is used to store RDS account information. (no longer supported, replaced by RDS-FG).
               + **RDS-FG**: RDS secret, which is used to store RDS account information.
               + **GaussDB-FG**: TaurusDB secret, which is used to store TaurusDB account information.
        :param _builtins.str state: The secret status. The valid values are as follows:
               + **ENABLED**: Indicates enabled status.
               + **DISABLED**: Indicates disabled status.
               + **PENDING_DELETE**: Indicates pending deletion status.
               + **FROZEN**: Indicates frozen state.
        :param _builtins.int update_time: The update time of the secret, the value is a timestamp.
        """
        pulumi.set(__self__, "auto_rotation", auto_rotation)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "event_subscriptions", event_subscriptions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_rotation_time", next_rotation_time)
        pulumi.set(__self__, "rotation_config", rotation_config)
        pulumi.set(__self__, "rotation_period", rotation_period)
        pulumi.set(__self__, "rotation_time", rotation_time)
        pulumi.set(__self__, "scheduled_delete_time", scheduled_delete_time)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="autoRotation")
    def auto_rotation(self) -> _builtins.bool:
        """
        Automatic rotation. The valid values are as follows:
        + **true**: Enabled.
        + **false**: Disabled.
        """
        return pulumi.get(self, "auto_rotation")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        The creation time of the secret, the value is a timestamp.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> Sequence[_builtins.str]:
        """
        The list of events subscribed to by secret.
        """
        return pulumi.get(self, "event_subscriptions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the secret.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> _builtins.str:
        """
        The ID of KMS key used to encrypt secret.
        """
        return pulumi.get(self, "kms_key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The secret name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextRotationTime")
    def next_rotation_time(self) -> _builtins.int:
        """
        The next rotation time of the secret, the value is a timestamp.
        """
        return pulumi.get(self, "next_rotation_time")

    @_builtins.property
    @pulumi.getter(name="rotationConfig")
    def rotation_config(self) -> _builtins.str:
        """
        The secret rotation config. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "rotation_config")

    @_builtins.property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> _builtins.str:
        """
        The secret rotation period. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "rotation_period")

    @_builtins.property
    @pulumi.getter(name="rotationTime")
    def rotation_time(self) -> _builtins.int:
        """
        The rotation time of the secret, the value is a timestamp.
        """
        return pulumi.get(self, "rotation_time")

    @_builtins.property
    @pulumi.getter(name="scheduledDeleteTime")
    def scheduled_delete_time(self) -> _builtins.int:
        """
        The time of the secret to be scheduled deleted, the value is a timestamp.
        """
        return pulumi.get(self, "scheduled_delete_time")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        The secret type. The valid values are as follows:
        + **COMMON**: shared secret (default), which is used to store sensitive information in an application system.
        + **RDS**: RDS secret, which is used to store RDS account information. (no longer supported, replaced by RDS-FG).
        + **RDS-FG**: RDS secret, which is used to store RDS account information.
        + **GaussDB-FG**: TaurusDB secret, which is used to store TaurusDB account information.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The secret status. The valid values are as follows:
        + **ENABLED**: Indicates enabled status.
        + **DISABLED**: Indicates disabled status.
        + **PENDING_DELETE**: Indicates pending deletion status.
        + **FROZEN**: Indicates frozen state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time of the secret, the value is a timestamp.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSecretsByTagsResourceSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param _builtins.str value: Specifies the field for fuzzy match, maximum of `255` characters are allowed.
               If it is left blank, a null value is returned.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the field for fuzzy match, maximum of `255` characters are allowed.
        If it is left blank, a null value is returned.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecretsByTagsResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param _builtins.str value: Specifies the field for fuzzy match, maximum of `255` characters are allowed.
               If it is left blank, a null value is returned.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the field for fuzzy match, maximum of `255` characters are allowed.
        If it is left blank, a null value is returned.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecretsByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the set of tag values, the maximum of values is `10`.
               If the tag list is empty, any value can be matched.
               A search result matches only one value.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the set of tag values, the maximum of values is `10`.
        If the tag list is empty, any value can be matched.
        A search result matches only one value.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecretsSecretResult(dict):
    def __init__(__self__, *,
                 auto_rotation: _builtins.bool,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 event_subscriptions: Sequence[_builtins.str],
                 id: _builtins.str,
                 kms_key_id: _builtins.str,
                 name: _builtins.str,
                 next_rotation_at: _builtins.str,
                 rotation_at: _builtins.str,
                 rotation_config: _builtins.str,
                 rotation_period: _builtins.str,
                 scheduled_deleted_at: _builtins.str,
                 secret_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.bool auto_rotation: Indicates whether to enable the secret automatic rotation.
        :param _builtins.str created_at: Indicates the time when the secret created, in UTC format.
        :param _builtins.str description: Indicates the secret description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param Sequence[_builtins.str] event_subscriptions: Indicates the list of events subscribed to by secret.
        :param _builtins.str id: The secret ID.
        :param _builtins.str kms_key_id: Indicates the ID of KMS key used to encrypt secret.
        :param _builtins.str name: Specifies the name of the secret.
        :param _builtins.str next_rotation_at: Indicates the secret next rotation time, in UTC format. Valid when `auto_rotation` is **true**.
        :param _builtins.str rotation_at: Indicates the secret rotation time, in UTC format. Valid when `auto_rotation` is **true**.
        :param _builtins.str rotation_config: Indicates the secret rotation config. Valid when `auto_rotation` is **true**.
        :param _builtins.str rotation_period: Indicates the secret rotation period. Valid when `auto_rotation` is **true**.
        :param _builtins.str scheduled_deleted_at: Indicates the time when the secret is scheduled to be deleted, in UTC format.
        :param _builtins.str secret_type: Indicates the secret type. Valid values are **COMMON** and **RDS**.
        :param _builtins.str status: Specifies the secret status. Valid values are **ENABLED**, **DISABLED**,
               **PENDING_DELETE** and **FROZEN**.
        :param _builtins.str updated_at: Indicates the time when the secret updated, in UTC format.
        """
        pulumi.set(__self__, "auto_rotation", auto_rotation)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "event_subscriptions", event_subscriptions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_rotation_at", next_rotation_at)
        pulumi.set(__self__, "rotation_at", rotation_at)
        pulumi.set(__self__, "rotation_config", rotation_config)
        pulumi.set(__self__, "rotation_period", rotation_period)
        pulumi.set(__self__, "scheduled_deleted_at", scheduled_deleted_at)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="autoRotation")
    def auto_rotation(self) -> _builtins.bool:
        """
        Indicates whether to enable the secret automatic rotation.
        """
        return pulumi.get(self, "auto_rotation")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time when the secret created, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the secret description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of events subscribed to by secret.
        """
        return pulumi.get(self, "event_subscriptions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The secret ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> _builtins.str:
        """
        Indicates the ID of KMS key used to encrypt secret.
        """
        return pulumi.get(self, "kms_key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextRotationAt")
    def next_rotation_at(self) -> _builtins.str:
        """
        Indicates the secret next rotation time, in UTC format. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "next_rotation_at")

    @_builtins.property
    @pulumi.getter(name="rotationAt")
    def rotation_at(self) -> _builtins.str:
        """
        Indicates the secret rotation time, in UTC format. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "rotation_at")

    @_builtins.property
    @pulumi.getter(name="rotationConfig")
    def rotation_config(self) -> _builtins.str:
        """
        Indicates the secret rotation config. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "rotation_config")

    @_builtins.property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> _builtins.str:
        """
        Indicates the secret rotation period. Valid when `auto_rotation` is **true**.
        """
        return pulumi.get(self, "rotation_period")

    @_builtins.property
    @pulumi.getter(name="scheduledDeletedAt")
    def scheduled_deleted_at(self) -> _builtins.str:
        """
        Indicates the time when the secret is scheduled to be deleted, in UTC format.
        """
        return pulumi.get(self, "scheduled_deleted_at")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        Indicates the secret type. Valid values are **COMMON** and **RDS**.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the secret status. Valid values are **ENABLED**, **DISABLED**,
        **PENDING_DELETE** and **FROZEN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the time when the secret updated, in UTC format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetTasksTaskResult(dict):
    def __init__(__self__, *,
                 attempt_nums: _builtins.int,
                 operate_type: _builtins.str,
                 rotation_func_urn: _builtins.str,
                 secret_name: _builtins.str,
                 task_error_code: _builtins.str,
                 task_error_msg: _builtins.str,
                 task_id: _builtins.str,
                 task_status: _builtins.str,
                 task_time: _builtins.int):
        """
        :param _builtins.int attempt_nums: The number of task attempts.
        :param _builtins.str operate_type: The rotation type.
        :param _builtins.str rotation_func_urn: The URN of a FunctionGraph function.
        :param _builtins.str secret_name: Specifies the name of the secret.
        :param _builtins.str task_error_code: The task error code.
        :param _builtins.str task_error_msg: The task error information.
        :param _builtins.str task_id: Specifies the task ID. This parameter cannot exist at the same time as other parameters.
        :param _builtins.str task_status: The task status.
        :param _builtins.int task_time: The time when a task is created.
        """
        pulumi.set(__self__, "attempt_nums", attempt_nums)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "rotation_func_urn", rotation_func_urn)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "task_error_code", task_error_code)
        pulumi.set(__self__, "task_error_msg", task_error_msg)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_time", task_time)

    @_builtins.property
    @pulumi.getter(name="attemptNums")
    def attempt_nums(self) -> _builtins.int:
        """
        The number of task attempts.
        """
        return pulumi.get(self, "attempt_nums")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The rotation type.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="rotationFuncUrn")
    def rotation_func_urn(self) -> _builtins.str:
        """
        The URN of a FunctionGraph function.
        """
        return pulumi.get(self, "rotation_func_urn")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        """
        Specifies the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter(name="taskErrorCode")
    def task_error_code(self) -> _builtins.str:
        """
        The task error code.
        """
        return pulumi.get(self, "task_error_code")

    @_builtins.property
    @pulumi.getter(name="taskErrorMsg")
    def task_error_msg(self) -> _builtins.str:
        """
        The task error information.
        """
        return pulumi.get(self, "task_error_msg")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        Specifies the task ID. This parameter cannot exist at the same time as other parameters.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> _builtins.str:
        """
        The task status.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> _builtins.int:
        """
        The time when a task is created.
        """
        return pulumi.get(self, "task_time")


