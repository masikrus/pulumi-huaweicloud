# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['GrantArgs', 'Grant']

@pulumi.input_type
class GrantArgs:
    def __init__(__self__, *,
                 grantee_principal: pulumi.Input[_builtins.str],
                 key_id: pulumi.Input[_builtins.str],
                 operations: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retiring_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Grant resource.
        :param pulumi.Input[_builtins.str] grantee_principal: The ID of the authorized user or account.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_id: Key ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] operations: List of granted operations.
               The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
               **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
               A value containing only **create-grant** is invalid.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Grant name.  
               It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
               digits, hyphens (-), underscores (_), colons (:), and slash(/).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retiring_principal: Specifies the ID of the retiring user who has the
               authority to retire the authorization. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type.
               The options are: **user**, **domain**. The default value is **user**.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "grantee_principal", grantee_principal)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "operations", operations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retiring_principal is not None:
            pulumi.set(__self__, "retiring_principal", retiring_principal)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the authorized user or account.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "grantee_principal")

    @grantee_principal.setter
    def grantee_principal(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "grantee_principal", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[_builtins.str]:
        """
        Key ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter
    def operations(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of granted operations.
        The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
        **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
        A value containing only **create-grant** is invalid.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "operations", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Grant name.  
        It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
        digits, hyphens (-), underscores (_), colons (:), and slash(/).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the retiring user who has the
        authority to retire the authorization. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "retiring_principal")

    @retiring_principal.setter
    def retiring_principal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retiring_principal", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization type.
        The options are: **user**, **domain**. The default value is **user**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _GrantState:
    def __init__(__self__, *,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 grantee_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retiring_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Grant resources.
        :param pulumi.Input[_builtins.str] creator: The ID of the creator.
        :param pulumi.Input[_builtins.str] grantee_principal: The ID of the authorized user or account.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_id: Key ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Grant name.  
               It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
               digits, hyphens (-), underscores (_), colons (:), and slash(/).
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] operations: List of granted operations.
               The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
               **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
               A value containing only **create-grant** is invalid.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retiring_principal: Specifies the ID of the retiring user who has the
               authority to retire the authorization. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type.
               The options are: **user**, **domain**. The default value is **user**.
               Changing this parameter will create a new resource.
        """
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if grantee_principal is not None:
            pulumi.set(__self__, "grantee_principal", grantee_principal)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retiring_principal is not None:
            pulumi.set(__self__, "retiring_principal", retiring_principal)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the creator.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the authorized user or account.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "grantee_principal")

    @grantee_principal.setter
    def grantee_principal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grantee_principal", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Grant name.  
        It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
        digits, hyphens (-), underscores (_), colons (:), and slash(/).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of granted operations.
        The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
        **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
        A value containing only **create-grant** is invalid.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "operations", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the retiring user who has the
        authority to retire the authorization. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "retiring_principal")

    @retiring_principal.setter
    def retiring_principal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retiring_principal", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization type.
        The options are: **user**, **domain**. The default value is **user**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Dew/grant:Grant")
class Grant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 grantee_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retiring_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Users can create authorizations for other IAM users or accounts,
        granting them permission to use their own master key (CMK),
        and a maximum of 100 authorizations can be created under one master key.

        ## Example Usage

        ## Import

        The kms grant can be imported using

        `key_id`, `grant_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/grant:Grant test <key_id>/<grant_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] grantee_principal: The ID of the authorized user or account.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_id: Key ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Grant name.  
               It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
               digits, hyphens (-), underscores (_), colons (:), and slash(/).
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] operations: List of granted operations.
               The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
               **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
               A value containing only **create-grant** is invalid.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retiring_principal: Specifies the ID of the retiring user who has the
               authority to retire the authorization. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type.
               The options are: **user**, **domain**. The default value is **user**.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Users can create authorizations for other IAM users or accounts,
        granting them permission to use their own master key (CMK),
        and a maximum of 100 authorizations can be created under one master key.

        ## Example Usage

        ## Import

        The kms grant can be imported using

        `key_id`, `grant_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/grant:Grant test <key_id>/<grant_id>
        ```

        :param str resource_name: The name of the resource.
        :param GrantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 grantee_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retiring_principal: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrantArgs.__new__(GrantArgs)

            if grantee_principal is None and not opts.urn:
                raise TypeError("Missing required property 'grantee_principal'")
            __props__.__dict__["grantee_principal"] = grantee_principal
            if key_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_id'")
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["name"] = name
            if operations is None and not opts.urn:
                raise TypeError("Missing required property 'operations'")
            __props__.__dict__["operations"] = operations
            __props__.__dict__["region"] = region
            __props__.__dict__["retiring_principal"] = retiring_principal
            __props__.__dict__["type"] = type
            __props__.__dict__["creator"] = None
        super(Grant, __self__).__init__(
            'huaweicloud:Dew/grant:Grant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            grantee_principal: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            retiring_principal: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Grant':
        """
        Get an existing Grant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creator: The ID of the creator.
        :param pulumi.Input[_builtins.str] grantee_principal: The ID of the authorized user or account.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_id: Key ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Grant name.  
               It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
               digits, hyphens (-), underscores (_), colons (:), and slash(/).
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] operations: List of granted operations.
               The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
               **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
               A value containing only **create-grant** is invalid.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] retiring_principal: Specifies the ID of the retiring user who has the
               authority to retire the authorization. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type.
               The options are: **user**, **domain**. The default value is **user**.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrantState.__new__(_GrantState)

        __props__.__dict__["creator"] = creator
        __props__.__dict__["grantee_principal"] = grantee_principal
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operations"] = operations
        __props__.__dict__["region"] = region
        __props__.__dict__["retiring_principal"] = retiring_principal
        __props__.__dict__["type"] = type
        return Grant(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the authorized user or account.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "grantee_principal")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Key ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Grant name.  
        It must be `1` to `255` characters long, start with a letter, and contain only letters (case-sensitive),
        digits, hyphens (-), underscores (_), colons (:), and slash(/).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of granted operations.
        The options are: **create-datakey**, **create-datakey-without-plaintext**, **encrypt-datakey**,
        **decrypt-datakey**, **describe-key**, **create-grant**, **retire-grant**, **encrypt-data**, **decrypt-data**
        A value containing only **create-grant** is invalid.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the retiring user who has the
        authority to retire the authorization. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "retiring_principal")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authorization type.
        The options are: **user**, **domain**. The default value is **user**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

