# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DedicatedKeystoreArgs', 'DedicatedKeystore']

@pulumi.input_type
class DedicatedKeystoreArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[_builtins.str],
                 hsm_ca_cert: pulumi.Input[_builtins.str],
                 hsm_cluster_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DedicatedKeystore resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of a dedicated keystore. The valid length is limited from
               `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
               forward slashes (/) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_ca_cert: Specifies the CA certificate of the dedicated HSM cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_cluster_id: Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
               Changing this parameter will create a new resource.
               
               > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
               machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
               work order consultation for details.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "hsm_ca_cert", hsm_ca_cert)
        pulumi.set(__self__, "hsm_cluster_id", hsm_cluster_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alias of a dedicated keystore. The valid length is limited from
        `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
        forward slashes (/) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="hsmCaCert")
    def hsm_ca_cert(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CA certificate of the dedicated HSM cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hsm_ca_cert")

    @hsm_ca_cert.setter
    def hsm_ca_cert(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hsm_ca_cert", value)

    @_builtins.property
    @pulumi.getter(name="hsmClusterId")
    def hsm_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
        Changing this parameter will create a new resource.

        > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
        machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
        work order consultation for details.
        """
        return pulumi.get(self, "hsm_cluster_id")

    @hsm_cluster_id.setter
    def hsm_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hsm_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DedicatedKeystoreState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_ca_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DedicatedKeystore resources.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of a dedicated keystore. The valid length is limited from
               `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
               forward slashes (/) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_ca_cert: Specifies the CA certificate of the dedicated HSM cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_cluster_id: Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
               Changing this parameter will create a new resource.
               
               > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
               machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
               work order consultation for details.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if hsm_ca_cert is not None:
            pulumi.set(__self__, "hsm_ca_cert", hsm_ca_cert)
        if hsm_cluster_id is not None:
            pulumi.set(__self__, "hsm_cluster_id", hsm_cluster_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias of a dedicated keystore. The valid length is limited from
        `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
        forward slashes (/) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="hsmCaCert")
    def hsm_ca_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CA certificate of the dedicated HSM cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hsm_ca_cert")

    @hsm_ca_cert.setter
    def hsm_ca_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hsm_ca_cert", value)

    @_builtins.property
    @pulumi.getter(name="hsmClusterId")
    def hsm_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
        Changing this parameter will create a new resource.

        > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
        machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
        work order consultation for details.
        """
        return pulumi.get(self, "hsm_cluster_id")

    @hsm_cluster_id.setter
    def hsm_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hsm_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dew/dedicatedKeystore:DedicatedKeystore")
class DedicatedKeystore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_ca_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a KMS (Key Management Service) dedicated keystore resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hsm_cluster_id = config.require_object("hsmClusterId")
        hsm_ca_cert = config.require_object("hsmCaCert")
        test = huaweicloud.dew.DedicatedKeystore("test",
            alias="test_name",
            hsm_cluster_id=hsm_cluster_id,
            hsm_ca_cert=hsm_ca_cert)
        ```

        ## Import

        The KMS dedicated keystore can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/dedicatedKeystore:DedicatedKeystore test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `hsm_ca_cert`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_kms_dedicated_keystore" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              hsm_ca_cert,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of a dedicated keystore. The valid length is limited from
               `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
               forward slashes (/) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_ca_cert: Specifies the CA certificate of the dedicated HSM cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_cluster_id: Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
               Changing this parameter will create a new resource.
               
               > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
               machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
               work order consultation for details.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DedicatedKeystoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KMS (Key Management Service) dedicated keystore resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        hsm_cluster_id = config.require_object("hsmClusterId")
        hsm_ca_cert = config.require_object("hsmCaCert")
        test = huaweicloud.dew.DedicatedKeystore("test",
            alias="test_name",
            hsm_cluster_id=hsm_cluster_id,
            hsm_ca_cert=hsm_ca_cert)
        ```

        ## Import

        The KMS dedicated keystore can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/dedicatedKeystore:DedicatedKeystore test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `hsm_ca_cert`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_kms_dedicated_keystore" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              hsm_ca_cert,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DedicatedKeystoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DedicatedKeystoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_ca_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DedicatedKeystoreArgs.__new__(DedicatedKeystoreArgs)

            if alias is None and not opts.urn:
                raise TypeError("Missing required property 'alias'")
            __props__.__dict__["alias"] = alias
            if hsm_ca_cert is None and not opts.urn:
                raise TypeError("Missing required property 'hsm_ca_cert'")
            __props__.__dict__["hsm_ca_cert"] = hsm_ca_cert
            if hsm_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'hsm_cluster_id'")
            __props__.__dict__["hsm_cluster_id"] = hsm_cluster_id
            __props__.__dict__["region"] = region
        super(DedicatedKeystore, __self__).__init__(
            'huaweicloud:Dew/dedicatedKeystore:DedicatedKeystore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            hsm_ca_cert: Optional[pulumi.Input[_builtins.str]] = None,
            hsm_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DedicatedKeystore':
        """
        Get an existing DedicatedKeystore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of a dedicated keystore. The valid length is limited from
               `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
               forward slashes (/) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_ca_cert: Specifies the CA certificate of the dedicated HSM cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] hsm_cluster_id: Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
               Changing this parameter will create a new resource.
               
               > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
               machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
               work order consultation for details.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DedicatedKeystoreState.__new__(_DedicatedKeystoreState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["hsm_ca_cert"] = hsm_ca_cert
        __props__.__dict__["hsm_cluster_id"] = hsm_cluster_id
        __props__.__dict__["region"] = region
        return DedicatedKeystore(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alias of a dedicated keystore. The valid length is limited from
        `1` to `255`. Only digits, uppercase letters, lowercase letters, underscores (_), hyphens (-), colons (:) and
        forward slashes (/) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="hsmCaCert")
    def hsm_ca_cert(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CA certificate of the dedicated HSM cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "hsm_ca_cert")

    @_builtins.property
    @pulumi.getter(name="hsmClusterId")
    def hsm_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a dedicated HSM cluster that has no dedicated keystore.
        Changing this parameter will create a new resource.

        > The dedicated HSM cluster must be active. The cluster can be activated only after adding the master cryptographic
        machine and non-master cryptographic machine. Currently, only some encryption machine models are supported. Support
        work order consultation for details.
        """
        return pulumi.get(self, "hsm_cluster_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

