# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataEncryptDecryptArgs', 'DataEncryptDecrypt']

@pulumi.input_type
class DataEncryptDecryptArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataEncryptDecrypt resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Changing this will create a new resource.
               The valid values are as follow:
               + **encrypt**
               + **decrypt**
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the ciphertext to be decrypted.
               Changing this will create a new resource.
               It must be `188` to `5,648` characters long.
               
               > This parameter is mandatory for decryption operation.
        :param pulumi.Input[_builtins.str] encryption_algorithm: Specifies the data encryption algorithm.
               Changing this will create a new resource.
               The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
               + **SYMMETRIC_DEFAULT**
               + **RSAES_OAEP_SHA_256**
               + **SM2_ENCRYPT**
               
               > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               Changing this will create a new resource.
               
               > This parameter is mandatory for encryption operation.
               <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
               for decryption operation.
        :param pulumi.Input[_builtins.str] plain_text: Specifies the plaintext to be encrypted.
               Changing this will create a new resource.
               It must be `1` to `4,096` bytes long.
               
               > This parameter is mandatory for encryption operation.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "action", action)
        if cipher_text is not None:
            pulumi.set(__self__, "cipher_text", cipher_text)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if plain_text is not None:
            pulumi.set(__self__, "plain_text", plain_text)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type.
        Changing this will create a new resource.
        The valid values are as follow:
        + **encrypt**
        + **decrypt**
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ciphertext to be decrypted.
        Changing this will create a new resource.
        It must be `188` to `5,648` characters long.

        > This parameter is mandatory for decryption operation.
        """
        return pulumi.get(self, "cipher_text")

    @cipher_text.setter
    def cipher_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_text", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data encryption algorithm.
        Changing this will create a new resource.
        The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
        + **SYMMETRIC_DEFAULT**
        + **RSAES_OAEP_SHA_256**
        + **SM2_ENCRYPT**

        > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key ID.
        Changing this will create a new resource.

        > This parameter is mandatory for encryption operation.
        <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
        for decryption operation.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext to be encrypted.
        Changing this will create a new resource.
        It must be `1` to `4,096` bytes long.

        > This parameter is mandatory for encryption operation.
        """
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_text", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataEncryptDecryptState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 cipher_data: Optional[pulumi.Input[_builtins.str]] = None,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_data: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataEncryptDecrypt resources.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Changing this will create a new resource.
               The valid values are as follow:
               + **encrypt**
               + **decrypt**
        :param pulumi.Input[_builtins.str] cipher_data: The encrypted ciphertext, encoding Base64.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the ciphertext to be decrypted.
               Changing this will create a new resource.
               It must be `188` to `5,648` characters long.
               
               > This parameter is mandatory for decryption operation.
        :param pulumi.Input[_builtins.str] encryption_algorithm: Specifies the data encryption algorithm.
               Changing this will create a new resource.
               The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
               + **SYMMETRIC_DEFAULT**
               + **RSAES_OAEP_SHA_256**
               + **SM2_ENCRYPT**
               
               > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               Changing this will create a new resource.
               
               > This parameter is mandatory for encryption operation.
               <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
               for decryption operation.
        :param pulumi.Input[_builtins.str] plain_data: The decrypted plaintext.
        :param pulumi.Input[_builtins.str] plain_text: Specifies the plaintext to be encrypted.
               Changing this will create a new resource.
               It must be `1` to `4,096` bytes long.
               
               > This parameter is mandatory for encryption operation.
        :param pulumi.Input[_builtins.str] plain_text_base64: The Base64 value in plaintext.
               In asymmetric encryption, if the encrypted plaintext contains invisible characters, the Base64 value will be
               used as the decryption result.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cipher_data is not None:
            pulumi.set(__self__, "cipher_data", cipher_data)
        if cipher_text is not None:
            pulumi.set(__self__, "cipher_text", cipher_text)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if plain_data is not None:
            pulumi.set(__self__, "plain_data", plain_data)
        if plain_text is not None:
            pulumi.set(__self__, "plain_text", plain_text)
        if plain_text_base64 is not None:
            pulumi.set(__self__, "plain_text_base64", plain_text_base64)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type.
        Changing this will create a new resource.
        The valid values are as follow:
        + **encrypt**
        + **decrypt**
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="cipherData")
    def cipher_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The encrypted ciphertext, encoding Base64.
        """
        return pulumi.get(self, "cipher_data")

    @cipher_data.setter
    def cipher_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_data", value)

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ciphertext to be decrypted.
        Changing this will create a new resource.
        It must be `188` to `5,648` characters long.

        > This parameter is mandatory for decryption operation.
        """
        return pulumi.get(self, "cipher_text")

    @cipher_text.setter
    def cipher_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_text", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data encryption algorithm.
        Changing this will create a new resource.
        The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
        + **SYMMETRIC_DEFAULT**
        + **RSAES_OAEP_SHA_256**
        + **SM2_ENCRYPT**

        > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key ID.
        Changing this will create a new resource.

        > This parameter is mandatory for encryption operation.
        <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
        for decryption operation.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="plainData")
    def plain_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The decrypted plaintext.
        """
        return pulumi.get(self, "plain_data")

    @plain_data.setter
    def plain_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_data", value)

    @_builtins.property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext to be encrypted.
        Changing this will create a new resource.
        It must be `1` to `4,096` bytes long.

        > This parameter is mandatory for encryption operation.
        """
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_text", value)

    @_builtins.property
    @pulumi.getter(name="plainTextBase64")
    def plain_text_base64(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Base64 value in plaintext.
        In asymmetric encryption, if the encrypted plaintext contains invisible characters, the Base64 value will be
        used as the decryption result.
        """
        return pulumi.get(self, "plain_text_base64")

    @plain_text_base64.setter
    def plain_text_base64(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_text_base64", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dew/dataEncryptDecrypt:DataEncryptDecrypt")
class DataEncryptDecrypt(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a data encryption or decryption resource within HuaweiCloud.

        > Destroying this resource will not change the current status.

        > If you use an asymmetric key to encrypt data, record the selected key ID and encryption algorithm. To decrypt data,
          you need to provider the same key ID and encryption algorithm, or the decryption will fail.

        ## Example Usage

        ### encrypt data

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_id = config.require_object("keyId")
        plain_text = config.require_object("plainText")
        test = huaweicloud.dew.DataEncryptDecrypt("test",
            key_id=key_id,
            action="encrypt",
            plain_text=plain_text)
        ```

        ### decrypt data

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cipher_text = config.require_object("cipherText")
        test = huaweicloud.dew.DataEncryptDecrypt("test",
            action="decrypt",
            cipher_text=cipher_text)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Changing this will create a new resource.
               The valid values are as follow:
               + **encrypt**
               + **decrypt**
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the ciphertext to be decrypted.
               Changing this will create a new resource.
               It must be `188` to `5,648` characters long.
               
               > This parameter is mandatory for decryption operation.
        :param pulumi.Input[_builtins.str] encryption_algorithm: Specifies the data encryption algorithm.
               Changing this will create a new resource.
               The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
               + **SYMMETRIC_DEFAULT**
               + **RSAES_OAEP_SHA_256**
               + **SM2_ENCRYPT**
               
               > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               Changing this will create a new resource.
               
               > This parameter is mandatory for encryption operation.
               <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
               for decryption operation.
        :param pulumi.Input[_builtins.str] plain_text: Specifies the plaintext to be encrypted.
               Changing this will create a new resource.
               It must be `1` to `4,096` bytes long.
               
               > This parameter is mandatory for encryption operation.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataEncryptDecryptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a data encryption or decryption resource within HuaweiCloud.

        > Destroying this resource will not change the current status.

        > If you use an asymmetric key to encrypt data, record the selected key ID and encryption algorithm. To decrypt data,
          you need to provider the same key ID and encryption algorithm, or the decryption will fail.

        ## Example Usage

        ### encrypt data

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_id = config.require_object("keyId")
        plain_text = config.require_object("plainText")
        test = huaweicloud.dew.DataEncryptDecrypt("test",
            key_id=key_id,
            action="encrypt",
            plain_text=plain_text)
        ```

        ### decrypt data

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cipher_text = config.require_object("cipherText")
        test = huaweicloud.dew.DataEncryptDecrypt("test",
            action="decrypt",
            cipher_text=cipher_text)
        ```

        :param str resource_name: The name of the resource.
        :param DataEncryptDecryptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataEncryptDecryptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataEncryptDecryptArgs.__new__(DataEncryptDecryptArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["cipher_text"] = cipher_text
            __props__.__dict__["encryption_algorithm"] = encryption_algorithm
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["plain_text"] = plain_text
            __props__.__dict__["region"] = region
            __props__.__dict__["cipher_data"] = None
            __props__.__dict__["plain_data"] = None
            __props__.__dict__["plain_text_base64"] = None
        super(DataEncryptDecrypt, __self__).__init__(
            'huaweicloud:Dew/dataEncryptDecrypt:DataEncryptDecrypt',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            cipher_data: Optional[pulumi.Input[_builtins.str]] = None,
            cipher_text: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            plain_data: Optional[pulumi.Input[_builtins.str]] = None,
            plain_text: Optional[pulumi.Input[_builtins.str]] = None,
            plain_text_base64: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataEncryptDecrypt':
        """
        Get an existing DataEncryptDecrypt resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Changing this will create a new resource.
               The valid values are as follow:
               + **encrypt**
               + **decrypt**
        :param pulumi.Input[_builtins.str] cipher_data: The encrypted ciphertext, encoding Base64.
        :param pulumi.Input[_builtins.str] cipher_text: Specifies the ciphertext to be decrypted.
               Changing this will create a new resource.
               It must be `188` to `5,648` characters long.
               
               > This parameter is mandatory for decryption operation.
        :param pulumi.Input[_builtins.str] encryption_algorithm: Specifies the data encryption algorithm.
               Changing this will create a new resource.
               The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
               + **SYMMETRIC_DEFAULT**
               + **RSAES_OAEP_SHA_256**
               + **SM2_ENCRYPT**
               
               > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        :param pulumi.Input[_builtins.str] key_id: Specifies the key ID.
               Changing this will create a new resource.
               
               > This parameter is mandatory for encryption operation.
               <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
               for decryption operation.
        :param pulumi.Input[_builtins.str] plain_data: The decrypted plaintext.
        :param pulumi.Input[_builtins.str] plain_text: Specifies the plaintext to be encrypted.
               Changing this will create a new resource.
               It must be `1` to `4,096` bytes long.
               
               > This parameter is mandatory for encryption operation.
        :param pulumi.Input[_builtins.str] plain_text_base64: The Base64 value in plaintext.
               In asymmetric encryption, if the encrypted plaintext contains invisible characters, the Base64 value will be
               used as the decryption result.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataEncryptDecryptState.__new__(_DataEncryptDecryptState)

        __props__.__dict__["action"] = action
        __props__.__dict__["cipher_data"] = cipher_data
        __props__.__dict__["cipher_text"] = cipher_text
        __props__.__dict__["encryption_algorithm"] = encryption_algorithm
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["plain_data"] = plain_data
        __props__.__dict__["plain_text"] = plain_text
        __props__.__dict__["plain_text_base64"] = plain_text_base64
        __props__.__dict__["region"] = region
        return DataEncryptDecrypt(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type.
        Changing this will create a new resource.
        The valid values are as follow:
        + **encrypt**
        + **decrypt**
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="cipherData")
    def cipher_data(self) -> pulumi.Output[_builtins.str]:
        """
        The encrypted ciphertext, encoding Base64.
        """
        return pulumi.get(self, "cipher_data")

    @_builtins.property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ciphertext to be decrypted.
        Changing this will create a new resource.
        It must be `188` to `5,648` characters long.

        > This parameter is mandatory for decryption operation.
        """
        return pulumi.get(self, "cipher_text")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the data encryption algorithm.
        Changing this will create a new resource.
        The valid values are as follow, the default value is **SYMMETRIC_DEFAULT**.
        + **SYMMETRIC_DEFAULT**
        + **RSAES_OAEP_SHA_256**
        + **SM2_ENCRYPT**

        > If the key used is an asymmetric key, this parameter must be specified for encryption or decryption operation.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the key ID.
        Changing this will create a new resource.

        > This parameter is mandatory for encryption operation.
        <br/>If the ciphertext is encrypted using an asymmetric key, this parameter must be specified
        for decryption operation.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="plainData")
    def plain_data(self) -> pulumi.Output[_builtins.str]:
        """
        The decrypted plaintext.
        """
        return pulumi.get(self, "plain_data")

    @_builtins.property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plaintext to be encrypted.
        Changing this will create a new resource.
        It must be `1` to `4,096` bytes long.

        > This parameter is mandatory for encryption operation.
        """
        return pulumi.get(self, "plain_text")

    @_builtins.property
    @pulumi.getter(name="plainTextBase64")
    def plain_text_base64(self) -> pulumi.Output[_builtins.str]:
        """
        The Base64 value in plaintext.
        In asymmetric encryption, if the encrypted plaintext contains invisible characters, the Base64 value will be
        used as the decryption result.
        """
        return pulumi.get(self, "plain_text_base64")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

