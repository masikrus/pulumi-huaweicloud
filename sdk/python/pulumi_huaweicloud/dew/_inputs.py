# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'KeypairAssociateServerArgs',
    'KeypairAssociateServerArgsDict',
    'KeypairAssociateServerAuthArgs',
    'KeypairAssociateServerAuthArgsDict',
    'KeypairDisassociateServerArgs',
    'KeypairDisassociateServerArgsDict',
    'KeypairDisassociateServerAuthArgs',
    'KeypairDisassociateServerAuthArgsDict',
    'GetCustomKeysByTagsMatchArgs',
    'GetCustomKeysByTagsMatchArgsDict',
    'GetCustomKeysByTagsTagArgs',
    'GetCustomKeysByTagsTagArgsDict',
    'GetSecretsByTagsMatchArgs',
    'GetSecretsByTagsMatchArgsDict',
    'GetSecretsByTagsTagArgs',
    'GetSecretsByTagsTagArgsDict',
]

MYPY = False

if not MYPY:
    class KeypairAssociateServerArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies ID of the ECS which need to associate (replace or reset) the SSH keypair.
        """
        auth: NotRequired[pulumi.Input['KeypairAssociateServerAuthArgsDict']]
        """
        Specifies the authentication information.
        The auth structure is documented below.
        """
        disable_password: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the password is disabled.
        The valid values are as follows:
        + **true**: Indicates disable SSH login for virtual machines.
        + **false**: Indicates enable SSH login for virtual machines. Defaults to **false**.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the operation (associate, disassociate, reset) `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the operation (associate,replace) `port` can be configured
        and defaults to `22`, and `auth` is required, otherwise the operation will fail.
        """
elif False:
    KeypairAssociateServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeypairAssociateServerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 auth: Optional[pulumi.Input['KeypairAssociateServerAuthArgs']] = None,
                 disable_password: Optional[pulumi.Input[_builtins.bool]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies ID of the ECS which need to associate (replace or reset) the SSH keypair.
        :param pulumi.Input['KeypairAssociateServerAuthArgs'] auth: Specifies the authentication information.
               The auth structure is documented below.
        :param pulumi.Input[_builtins.bool] disable_password: Specifies whether the password is disabled.
               The valid values are as follows:
               + **true**: Indicates disable SSH login for virtual machines.
               + **false**: Indicates enable SSH login for virtual machines. Defaults to **false**.
               
               <a name="server_auth"></a>
               The `auth` block supports:
        :param pulumi.Input[_builtins.int] port: Specifies the SSH listening port. The default value is `22`.
               
               > When the ECS is shut down, the operation (associate, disassociate, reset) `port` is fixed at `22` and cannot be configured.
               At the same time, `auth` can not be set. When the ECS is turned on, the operation (associate,replace) `port` can be configured
               and defaults to `22`, and `auth` is required, otherwise the operation will fail.
        """
        pulumi.set(__self__, "id", id)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if disable_password is not None:
            pulumi.set(__self__, "disable_password", disable_password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the ECS which need to associate (replace or reset) the SSH keypair.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['KeypairAssociateServerAuthArgs']]:
        """
        Specifies the authentication information.
        The auth structure is documented below.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['KeypairAssociateServerAuthArgs']]):
        pulumi.set(self, "auth", value)

    @_builtins.property
    @pulumi.getter(name="disablePassword")
    def disable_password(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the password is disabled.
        The valid values are as follows:
        + **true**: Indicates disable SSH login for virtual machines.
        + **false**: Indicates enable SSH login for virtual machines. Defaults to **false**.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
        return pulumi.get(self, "disable_password")

    @disable_password.setter
    def disable_password(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_password", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the operation (associate, disassociate, reset) `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the operation (associate,replace) `port` can be configured
        and defaults to `22`, and `auth` is required, otherwise the operation will fail.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class KeypairAssociateServerAuthArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the authentication type.
        The valid values are **password** and **keypair**.
        """
elif False:
    KeypairAssociateServerAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeypairAssociateServerAuthArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the value of the key depending on the `type`.
               When the `type` is set to **password**, it represents the password.
               When the `type` is set to **keypair**, it represents the private key.
        :param pulumi.Input[_builtins.str] type: Specifies the value of the authentication type.
               The valid values are **password** and **keypair**.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the authentication type.
        The valid values are **password** and **keypair**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class KeypairDisassociateServerArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies ID of the ECS which need to disassociate the SSH keypair.
        """
        auth: NotRequired[pulumi.Input['KeypairDisassociateServerAuthArgsDict']]
        """
        Specifies the authentication information. This parameter is required for replacement
        and not required for reset.
        The auth structure is documented below.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the disassociate `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the disassociate `port` can be
        configured and defaults to `22`, and `auth` is required, otherwise the operation will fail.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
elif False:
    KeypairDisassociateServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeypairDisassociateServerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 auth: Optional[pulumi.Input['KeypairDisassociateServerAuthArgs']] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies ID of the ECS which need to disassociate the SSH keypair.
        :param pulumi.Input['KeypairDisassociateServerAuthArgs'] auth: Specifies the authentication information. This parameter is required for replacement
               and not required for reset.
               The auth structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the SSH listening port. The default value is `22`.
               
               > When the ECS is shut down, the disassociate `port` is fixed at `22` and cannot be configured.
               At the same time, `auth` can not be set. When the ECS is turned on, the disassociate `port` can be
               configured and defaults to `22`, and `auth` is required, otherwise the operation will fail.
               
               <a name="server_auth"></a>
               The `auth` block supports:
        """
        pulumi.set(__self__, "id", id)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the ECS which need to disassociate the SSH keypair.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['KeypairDisassociateServerAuthArgs']]:
        """
        Specifies the authentication information. This parameter is required for replacement
        and not required for reset.
        The auth structure is documented below.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['KeypairDisassociateServerAuthArgs']]):
        pulumi.set(self, "auth", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the SSH listening port. The default value is `22`.

        > When the ECS is shut down, the disassociate `port` is fixed at `22` and cannot be configured.
        At the same time, `auth` can not be set. When the ECS is turned on, the disassociate `port` can be
        configured and defaults to `22`, and `auth` is required, otherwise the operation will fail.

        <a name="server_auth"></a>
        The `auth` block supports:
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class KeypairDisassociateServerAuthArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of an authentication type.
        The valid values are **password** and **keypair**.
        """
elif False:
    KeypairDisassociateServerAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeypairDisassociateServerAuthArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the value of the key depending on the `type`.
               When the `type` is set to **password**, it represents the password.
               When the `type` is set to **keypair**, it represents the private key.
        :param pulumi.Input[_builtins.str] type: Specifies the value of an authentication type.
               The valid values are **password** and **keypair**.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the key depending on the `type`.
        When the `type` is set to **password**, it represents the password.
        When the `type` is set to **keypair**, it represents the private key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of an authentication type.
        The valid values are **password** and **keypair**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GetCustomKeysByTagsMatchArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        value: NotRequired[_builtins.str]
        """
        Specifies the value to be matched. It contains a maximum of `255` characters and
        cannot be empty.
        """
elif False:
    GetCustomKeysByTagsMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCustomKeysByTagsMatchArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the field to be matched, for example, **resource_name**.
        :param _builtins.str value: Specifies the value to be matched. It contains a maximum of `255` characters and
               cannot be empty.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value to be matched. It contains a maximum of `255` characters and
        cannot be empty.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCustomKeysByTagsTagArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        values: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the tag value set.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetCustomKeysByTagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCustomKeysByTagsTagArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the field to be matched, for example, **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the tag value set.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the field to be matched, for example, **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the tag value set.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetSecretsByTagsMatchArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        value: NotRequired[_builtins.str]
        """
        Specifies the field for fuzzy match, maximum of `255` characters are allowed.
        If it is left blank, a null value is returned.
        """
elif False:
    GetSecretsByTagsMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretsByTagsMatchArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param _builtins.str value: Specifies the field for fuzzy match, maximum of `255` characters are allowed.
               If it is left blank, a null value is returned.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the field for fuzzy match, maximum of `255` characters are allowed.
        If it is left blank, a null value is returned.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetSecretsByTagsTagArgsDict(TypedDict):
        key: NotRequired[_builtins.str]
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        values: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the set of tag values, the maximum of values is `10`.
        If the tag list is empty, any value can be matched.
        A search result matches only one value.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetSecretsByTagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretsByTagsTagArgs:
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the search field, the valid value is **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the set of tag values, the maximum of values is `10`.
               If the tag list is empty, any value can be matched.
               A search result matches only one value.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the search field, the valid value is **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the set of tag values, the maximum of values is `10`.
        If the tag list is empty, any value can be matched.
        A search result matches only one value.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "values", value)


