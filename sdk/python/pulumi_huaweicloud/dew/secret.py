# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SecretArgs', 'Secret']

@pulumi.input_type
class SecretArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_subscriptions: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_binary: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_text: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Secret resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of a secret.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the secret belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] event_subscriptions: Specifies the event list associated with the secret.
               Currently, only one event can be associated.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the expiration time of a secret, `expire_time` can only be edited
               when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
               from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
               
               > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
               will be triggered. For example, `1729243021000`.
        :param pulumi.Input[_builtins.str] kms_key_id: Specifies the ID of the KMS key used to encrypt secrets.
               If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
               The default key is automatically created by the CSMS.
               Use this data source
               dew_get_keys
               to get the KMS key.
        :param pulumi.Input[_builtins.str] name: Specifies the secret name. The maximum length is 64 characters.
               Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secrets.
               If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        :param pulumi.Input[_builtins.str] secret_binary: Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
               the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
               
               > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
               `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
               <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        :param pulumi.Input[_builtins.str] secret_text: Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
               it in the initial version of the secret. The maximum size is 32 KB.
        :param pulumi.Input[_builtins.str] secret_type: Specifies the type of the secret.
               Currently, only supported **COMMON**. The default value is **COMMON**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of a CSMS secrets, key/value pair format.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_subscriptions is not None:
            pulumi.set(__self__, "event_subscriptions", event_subscriptions)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_binary is not None:
            pulumi.set(__self__, "secret_binary", secret_binary)
        if secret_text is not None:
            pulumi.set(__self__, "secret_text", secret_text)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of a secret.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the secret belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event list associated with the secret.
        Currently, only one event can be associated.
        """
        return pulumi.get(self, "event_subscriptions")

    @event_subscriptions.setter
    def event_subscriptions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_subscriptions", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the expiration time of a secret, `expire_time` can only be edited
        when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
        from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.

        > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
        will be triggered. For example, `1729243021000`.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the KMS key used to encrypt secrets.
        If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
        The default key is automatically created by the CSMS.
        Use this data source
        dew_get_keys
        to get the KMS key.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret name. The maximum length is 64 characters.
        Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CSMS secrets.
        If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretBinary")
    def secret_binary(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
        the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.

        > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
        `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
        <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        """
        return pulumi.get(self, "secret_binary")

    @secret_binary.setter
    def secret_binary(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_binary", value)

    @_builtins.property
    @pulumi.getter(name="secretText")
    def secret_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
        it in the initial version of the secret. The maximum size is 32 KB.
        """
        return pulumi.get(self, "secret_text")

    @secret_text.setter
    def secret_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_text", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the secret.
        Currently, only supported **COMMON**. The default value is **COMMON**.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of a CSMS secrets, key/value pair format.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SecretState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_subscriptions: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_binary: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_text: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Secret resources.
        :param pulumi.Input[_builtins.str] create_time: Time when the CSMS secrets created, in UTC format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of a secret.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the secret belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] event_subscriptions: Specifies the event list associated with the secret.
               Currently, only one event can be associated.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the expiration time of a secret, `expire_time` can only be edited
               when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
               from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
               
               > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
               will be triggered. For example, `1729243021000`.
        :param pulumi.Input[_builtins.str] kms_key_id: Specifies the ID of the KMS key used to encrypt secrets.
               If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
               The default key is automatically created by the CSMS.
               Use this data source
               dew_get_keys
               to get the KMS key.
        :param pulumi.Input[_builtins.str] latest_version: The latest version id.
        :param pulumi.Input[_builtins.str] name: Specifies the secret name. The maximum length is 64 characters.
               Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secrets.
               If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        :param pulumi.Input[_builtins.str] secret_binary: Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
               the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
               
               > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
               `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
               <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        :param pulumi.Input[_builtins.str] secret_id: The secret ID in UUID format.
        :param pulumi.Input[_builtins.str] secret_text: Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
               it in the initial version of the secret. The maximum size is 32 KB.
        :param pulumi.Input[_builtins.str] secret_type: Specifies the type of the secret.
               Currently, only supported **COMMON**. The default value is **COMMON**.
        :param pulumi.Input[_builtins.str] status: The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of a CSMS secrets, key/value pair format.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] version_stages: The secret version status list.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_subscriptions is not None:
            pulumi.set(__self__, "event_subscriptions", event_subscriptions)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_binary is not None:
            pulumi.set(__self__, "secret_binary", secret_binary)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_text is not None:
            pulumi.set(__self__, "secret_text", secret_text)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version_stages is not None:
            pulumi.set(__self__, "version_stages", version_stages)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time when the CSMS secrets created, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of a secret.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the secret belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event list associated with the secret.
        Currently, only one event can be associated.
        """
        return pulumi.get(self, "event_subscriptions")

    @event_subscriptions.setter
    def event_subscriptions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_subscriptions", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the expiration time of a secret, `expire_time` can only be edited
        when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
        from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.

        > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
        will be triggered. For example, `1729243021000`.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the KMS key used to encrypt secrets.
        If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
        The default key is automatically created by the CSMS.
        Use this data source
        dew_get_keys
        to get the KMS key.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest version id.
        """
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "latest_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret name. The maximum length is 64 characters.
        Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CSMS secrets.
        If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretBinary")
    def secret_binary(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
        the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.

        > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
        `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
        <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        """
        return pulumi.get(self, "secret_binary")

    @secret_binary.setter
    def secret_binary(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_binary", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret ID in UUID format.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter(name="secretText")
    def secret_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
        it in the initial version of the secret. The maximum size is 32 KB.
        """
        return pulumi.get(self, "secret_text")

    @secret_text.setter
    def secret_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_text", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the secret.
        Currently, only supported **COMMON**. The default value is **COMMON**.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of a CSMS secrets, key/value pair format.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="versionStages")
    def version_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The secret version status list.
        """
        return pulumi.get(self, "version_stages")

    @version_stages.setter
    def version_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "version_stages", value)


@pulumi.type_token("huaweicloud:Dew/secret:Secret")
class Secret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_subscriptions: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_binary: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_text: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages CSMS(Cloud Secret Management Service) secrets within HuaweiCloud.

        ## Example Usage

        ### Encrypt Plaintext

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test1 = huaweicloud.dew.Secret("test1",
            name="test_secret",
            secret_text="this is a password")
        ```

        ### Encrypt JSON Data

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test2 = huaweicloud.dew.Secret("test2",
            name="mysql_admin",
            secret_text=json.dumps({
                "username": "admin",
                "password": "123456",
            }))
        ```

        ### Encrypt String Binary

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        secret_binary = config.require_object("secretBinary")
        test3 = huaweicloud.dew.Secret("test3",
            name="test_binary",
            secret_binary=secret_binary)
        ```

        ## Import

        CSMS secret can be imported using the ID and the name of secret, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/secret:Secret test <id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of a secret.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the secret belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] event_subscriptions: Specifies the event list associated with the secret.
               Currently, only one event can be associated.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the expiration time of a secret, `expire_time` can only be edited
               when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
               from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
               
               > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
               will be triggered. For example, `1729243021000`.
        :param pulumi.Input[_builtins.str] kms_key_id: Specifies the ID of the KMS key used to encrypt secrets.
               If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
               The default key is automatically created by the CSMS.
               Use this data source
               dew_get_keys
               to get the KMS key.
        :param pulumi.Input[_builtins.str] name: Specifies the secret name. The maximum length is 64 characters.
               Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secrets.
               If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        :param pulumi.Input[_builtins.str] secret_binary: Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
               the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
               
               > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
               `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
               <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        :param pulumi.Input[_builtins.str] secret_text: Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
               it in the initial version of the secret. The maximum size is 32 KB.
        :param pulumi.Input[_builtins.str] secret_type: Specifies the type of the secret.
               Currently, only supported **COMMON**. The default value is **COMMON**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of a CSMS secrets, key/value pair format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecretArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSMS(Cloud Secret Management Service) secrets within HuaweiCloud.

        ## Example Usage

        ### Encrypt Plaintext

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test1 = huaweicloud.dew.Secret("test1",
            name="test_secret",
            secret_text="this is a password")
        ```

        ### Encrypt JSON Data

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test2 = huaweicloud.dew.Secret("test2",
            name="mysql_admin",
            secret_text=json.dumps({
                "username": "admin",
                "password": "123456",
            }))
        ```

        ### Encrypt String Binary

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        secret_binary = config.require_object("secretBinary")
        test3 = huaweicloud.dew.Secret("test3",
            name="test_binary",
            secret_binary=secret_binary)
        ```

        ## Import

        CSMS secret can be imported using the ID and the name of secret, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/secret:Secret test <id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param SecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_subscriptions: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_binary: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_text: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretArgs.__new__(SecretArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["event_subscriptions"] = event_subscriptions
            __props__.__dict__["expire_time"] = expire_time
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["secret_binary"] = None if secret_binary is None else pulumi.Output.secret(secret_binary)
            __props__.__dict__["secret_text"] = None if secret_text is None else pulumi.Output.secret(secret_text)
            __props__.__dict__["secret_type"] = secret_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["create_time"] = None
            __props__.__dict__["latest_version"] = None
            __props__.__dict__["secret_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["version_stages"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretBinary", "secretText"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Secret, __self__).__init__(
            'huaweicloud:Dew/secret:Secret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            event_subscriptions: Optional[pulumi.Input[_builtins.str]] = None,
            expire_time: Optional[pulumi.Input[_builtins.int]] = None,
            kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            latest_version: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_binary: Optional[pulumi.Input[_builtins.str]] = None,
            secret_id: Optional[pulumi.Input[_builtins.str]] = None,
            secret_text: Optional[pulumi.Input[_builtins.str]] = None,
            secret_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            version_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'Secret':
        """
        Get an existing Secret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] create_time: Time when the CSMS secrets created, in UTC format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of a secret.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the secret belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] event_subscriptions: Specifies the event list associated with the secret.
               Currently, only one event can be associated.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the expiration time of a secret, `expire_time` can only be edited
               when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
               from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
               
               > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
               will be triggered. For example, `1729243021000`.
        :param pulumi.Input[_builtins.str] kms_key_id: Specifies the ID of the KMS key used to encrypt secrets.
               If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
               The default key is automatically created by the CSMS.
               Use this data source
               dew_get_keys
               to get the KMS key.
        :param pulumi.Input[_builtins.str] latest_version: The latest version id.
        :param pulumi.Input[_builtins.str] name: Specifies the secret name. The maximum length is 64 characters.
               Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secrets.
               If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        :param pulumi.Input[_builtins.str] secret_binary: Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
               the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
               
               > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
               `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
               <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        :param pulumi.Input[_builtins.str] secret_id: The secret ID in UUID format.
        :param pulumi.Input[_builtins.str] secret_text: Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
               it in the initial version of the secret. The maximum size is 32 KB.
        :param pulumi.Input[_builtins.str] secret_type: Specifies the type of the secret.
               Currently, only supported **COMMON**. The default value is **COMMON**.
        :param pulumi.Input[_builtins.str] status: The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of a CSMS secrets, key/value pair format.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] version_stages: The secret version status list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecretState.__new__(_SecretState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["event_subscriptions"] = event_subscriptions
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["latest_version"] = latest_version
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_binary"] = secret_binary
        __props__.__dict__["secret_id"] = secret_id
        __props__.__dict__["secret_text"] = secret_text
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["version_stages"] = version_stages
        return Secret(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        Time when the CSMS secrets created, in UTC format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of a secret.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the secret belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the event list associated with the secret.
        Currently, only one event can be associated.
        """
        return pulumi.get(self, "event_subscriptions")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the expiration time of a secret, `expire_time` can only be edited
        when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
        from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.

        > Due to API reasons, please ensure that the last three digits of the millisecond timestamp are `0`, otherwise changes
        will be triggered. For example, `1729243021000`.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the KMS key used to encrypt secrets.
        If this parameter is not specified when creating the secret, the default master key **csms/default** will be used.
        The default key is automatically created by the CSMS.
        Use this data source
        dew_get_keys
        to get the KMS key.
        """
        return pulumi.get(self, "kms_key_id")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> pulumi.Output[_builtins.str]:
        """
        The latest version id.
        """
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the secret name. The maximum length is 64 characters.
        Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the CSMS secrets.
        If omitted, the provider-level region will be used. Changing this setting will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretBinary")
    def secret_binary(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
        the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.

        > 1. One of the fields `secret_text` and `secret_binary` must be configured, and can not be specified both together. The
        `secret_text` and `secret_binary` are sensitive, and we store their hashes in the state file.
        <br/>2. Whenever the `secret_text` or `secret_binary` parameters are changed, the latest version is incremented.
        """
        return pulumi.get(self, "secret_binary")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Output[_builtins.str]:
        """
        The secret ID in UUID format.
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="secretText")
    def secret_text(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
        it in the initial version of the secret. The maximum size is 32 KB.
        """
        return pulumi.get(self, "secret_text")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the secret.
        Currently, only supported **COMMON**. The default value is **COMMON**.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the tags of a CSMS secrets, key/value pair format.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="versionStages")
    def version_stages(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The secret version status list.
        """
        return pulumi.get(self, "version_stages")

