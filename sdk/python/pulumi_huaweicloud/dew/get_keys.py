# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKeysResult',
    'AwaitableGetKeysResult',
    'get_keys',
    'get_keys_output',
]

@pulumi.output_type
class GetKeysResult:
    """
    A collection of values returned by getKeys.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, key_algorithm=None, key_state=None, keys=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_algorithm and not isinstance(key_algorithm, str):
            raise TypeError("Expected argument 'key_algorithm' to be a str")
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_state and not isinstance(key_state, str):
            raise TypeError("Expected argument 'key_state' to be a str")
        pulumi.set(__self__, "key_state", key_state)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID to which the key belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[_builtins.str]:
        """
        The key generation algorithm.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="keyState")
    def key_state(self) -> Optional[_builtins.str]:
        """
        The key current status.
        """
        return pulumi.get(self, "key_state")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetKeysKeyResult']:
        """
        The list of the keys.
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetKeysResult(GetKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeysResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            key_algorithm=self.key_algorithm,
            key_state=self.key_state,
            keys=self.keys,
            region=self.region)


def get_keys(enterprise_project_id: Optional[_builtins.str] = None,
             key_algorithm: Optional[_builtins.str] = None,
             key_state: Optional[_builtins.str] = None,
             region: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKeysResult:
    """
    Use this data source to get a list of keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dew.get_keys()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the keys belong.
           
           > If the enterprise project function is not enabled, you do not need to set this parameter.
           <br/>If the enterprise project function is enabled, you can set this parameter. The default value is **all**,
           indedicate query the keys under all authorized enterprise projects.
    :param _builtins.str key_algorithm: Specifies the key generation algorithm.
           The default value is **AES_256**. The valid values are as follow:
           + **AES_256**
           + **SM4**
           + **RSA_2048**
           + **RSA_3072**
           + **RSA_4096**
           + **EC_P256**
           + **EC_P384**
           + **SM2**
           + **ALL**
           
           >  If you want to query all keys (including asymmetric keys), you need to set the parameter value to **ALL**.
    :param _builtins.str key_state: Specifies the key current status.
           The valid values are as follow:
           + **1**: Waiting for activation.
           + **2**: Enabled.
           + **3**: Disabled.
           + **4**: Schedule deletion.
           + **5**: Waiting for import.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['keyAlgorithm'] = key_algorithm
    __args__['keyState'] = key_state
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dew/getKeys:getKeys', __args__, opts=opts, typ=GetKeysResult).value

    return AwaitableGetKeysResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        key_algorithm=pulumi.get(__ret__, 'key_algorithm'),
        key_state=pulumi.get(__ret__, 'key_state'),
        keys=pulumi.get(__ret__, 'keys'),
        region=pulumi.get(__ret__, 'region'))
def get_keys_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    key_algorithm: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    key_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKeysResult]:
    """
    Use this data source to get a list of keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dew.get_keys()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the keys belong.
           
           > If the enterprise project function is not enabled, you do not need to set this parameter.
           <br/>If the enterprise project function is enabled, you can set this parameter. The default value is **all**,
           indedicate query the keys under all authorized enterprise projects.
    :param _builtins.str key_algorithm: Specifies the key generation algorithm.
           The default value is **AES_256**. The valid values are as follow:
           + **AES_256**
           + **SM4**
           + **RSA_2048**
           + **RSA_3072**
           + **RSA_4096**
           + **EC_P256**
           + **EC_P384**
           + **SM2**
           + **ALL**
           
           >  If you want to query all keys (including asymmetric keys), you need to set the parameter value to **ALL**.
    :param _builtins.str key_state: Specifies the key current status.
           The valid values are as follow:
           + **1**: Waiting for activation.
           + **2**: Enabled.
           + **3**: Disabled.
           + **4**: Schedule deletion.
           + **5**: Waiting for import.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['keyAlgorithm'] = key_algorithm
    __args__['keyState'] = key_state
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dew/getKeys:getKeys', __args__, opts=opts, typ=GetKeysResult)
    return __ret__.apply(lambda __response__: GetKeysResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        key_algorithm=pulumi.get(__response__, 'key_algorithm'),
        key_state=pulumi.get(__response__, 'key_state'),
        keys=pulumi.get(__response__, 'keys'),
        region=pulumi.get(__response__, 'region')))
