# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSecretsByTagsResult',
    'AwaitableGetSecretsByTagsResult',
    'get_secrets_by_tags',
    'get_secrets_by_tags_output',
]

@pulumi.output_type
class GetSecretsByTagsResult:
    """
    A collection of values returned by getSecretsByTags.
    """
    def __init__(__self__, action=None, id=None, matches=None, region=None, resource_instances=None, resources=None, sequence=None, tags=None, total_count=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_instances and not isinstance(resource_instances, str):
            raise TypeError("Expected argument 'resource_instances' to be a str")
        pulumi.set(__self__, "resource_instances", resource_instances)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if sequence and not isinstance(sequence, str):
            raise TypeError("Expected argument 'sequence' to be a str")
        pulumi.set(__self__, "sequence", sequence)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetSecretsByTagsMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceInstances")
    def resource_instances(self) -> _builtins.str:
        return pulumi.get(self, "resource_instances")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetSecretsByTagsResourceResult']:
        """
        The list of the filtered secrets.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetSecretsByTagsTagResult']]:
        """
        The tag list.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total number of the filtered secrets.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetSecretsByTagsResult(GetSecretsByTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretsByTagsResult(
            action=self.action,
            id=self.id,
            matches=self.matches,
            region=self.region,
            resource_instances=self.resource_instances,
            resources=self.resources,
            sequence=self.sequence,
            tags=self.tags,
            total_count=self.total_count)


def get_secrets_by_tags(action: Optional[_builtins.str] = None,
                        matches: Optional[Sequence[Union['GetSecretsByTagsMatchArgs', 'GetSecretsByTagsMatchArgsDict']]] = None,
                        region: Optional[_builtins.str] = None,
                        resource_instances: Optional[_builtins.str] = None,
                        sequence: Optional[_builtins.str] = None,
                        tags: Optional[Sequence[Union['GetSecretsByTagsTagArgs', 'GetSecretsByTagsTagArgsDict']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretsByTagsResult:
    """
    Use this data source to get a list of the secrets by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_instances = config.require_object("resourceInstances")
    action = config.require_object("action")
    test = huaweicloud.Dew.get_secrets_by_tags(resource_instances=resource_instances,
        action=action)
    ```


    :param _builtins.str action: Specifies the operation type. The valid values are as follows:
           + **filter**: Indicates filtering secrets.
           + **count**: Indicates the total number of secrets.
    :param Sequence[Union['GetSecretsByTagsMatchArgs', 'GetSecretsByTagsMatchArgsDict']] matches: Specifies the key-value pair to be matched.
           The matches structure is documented below.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_instances: Specifies the resource instances, the valid value is **resource_instances**.
    :param _builtins.str sequence: Specifies the `36` byte sequence number of a request message.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param Sequence[Union['GetSecretsByTagsTagArgs', 'GetSecretsByTagsTagArgsDict']] tags: Specifies the list of tags, the maximum of tags is `10`.
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceInstances'] = resource_instances
    __args__['sequence'] = sequence
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dew/getSecretsByTags:getSecretsByTags', __args__, opts=opts, typ=GetSecretsByTagsResult).value

    return AwaitableGetSecretsByTagsResult(
        action=pulumi.get(__ret__, 'action'),
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        resource_instances=pulumi.get(__ret__, 'resource_instances'),
        resources=pulumi.get(__ret__, 'resources'),
        sequence=pulumi.get(__ret__, 'sequence'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_secrets_by_tags_output(action: Optional[pulumi.Input[_builtins.str]] = None,
                               matches: Optional[pulumi.Input[Optional[Sequence[Union['GetSecretsByTagsMatchArgs', 'GetSecretsByTagsMatchArgsDict']]]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               resource_instances: Optional[pulumi.Input[_builtins.str]] = None,
                               sequence: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               tags: Optional[pulumi.Input[Optional[Sequence[Union['GetSecretsByTagsTagArgs', 'GetSecretsByTagsTagArgsDict']]]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecretsByTagsResult]:
    """
    Use this data source to get a list of the secrets by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_instances = config.require_object("resourceInstances")
    action = config.require_object("action")
    test = huaweicloud.Dew.get_secrets_by_tags(resource_instances=resource_instances,
        action=action)
    ```


    :param _builtins.str action: Specifies the operation type. The valid values are as follows:
           + **filter**: Indicates filtering secrets.
           + **count**: Indicates the total number of secrets.
    :param Sequence[Union['GetSecretsByTagsMatchArgs', 'GetSecretsByTagsMatchArgsDict']] matches: Specifies the key-value pair to be matched.
           The matches structure is documented below.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_instances: Specifies the resource instances, the valid value is **resource_instances**.
    :param _builtins.str sequence: Specifies the `36` byte sequence number of a request message.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param Sequence[Union['GetSecretsByTagsTagArgs', 'GetSecretsByTagsTagArgsDict']] tags: Specifies the list of tags, the maximum of tags is `10`.
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceInstances'] = resource_instances
    __args__['sequence'] = sequence
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dew/getSecretsByTags:getSecretsByTags', __args__, opts=opts, typ=GetSecretsByTagsResult)
    return __ret__.apply(lambda __response__: GetSecretsByTagsResult(
        action=pulumi.get(__response__, 'action'),
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        resource_instances=pulumi.get(__response__, 'resource_instances'),
        resources=pulumi.get(__response__, 'resources'),
        sequence=pulumi.get(__response__, 'sequence'),
        tags=pulumi.get(__response__, 'tags'),
        total_count=pulumi.get(__response__, 'total_count')))
