# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SecretVersionStateArgs', 'SecretVersionState']

@pulumi.input_type
class SecretVersionStateArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[_builtins.str],
                 version_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecretVersionState resource.
        :param pulumi.Input[_builtins.str] secret_name: Specifies the name of the secret to which the secret version state
               belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version_id: Specifies the ID of the secret version.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the secret version state.
               Changing this parameter will create a new secret version.
               Only letters, digits, underscores(_) and hyphens(-) are allowed.
               The valid length is limited from `1` to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secret version state.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "version_id", version_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the secret to which the secret version state
        belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the secret version.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the secret version state.
        Changing this parameter will create a new secret version.
        Only letters, digits, underscores(_) and hyphens(-) are allowed.
        The valid length is limited from `1` to `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CSMS secret version state.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SecretVersionStateState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecretVersionState resources.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the secret version state.
               Changing this parameter will create a new secret version.
               Only letters, digits, underscores(_) and hyphens(-) are allowed.
               The valid length is limited from `1` to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secret version state.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_name: Specifies the name of the secret to which the secret version state
               belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the secret version state, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version_id: Specifies the ID of the secret version.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the secret version state.
        Changing this parameter will create a new secret version.
        Only letters, digits, underscores(_) and hyphens(-) are allowed.
        The valid length is limited from `1` to `64` characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CSMS secret version state.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the secret to which the secret version state
        belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last update time of the secret version state, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the secret version.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)


@pulumi.type_token("huaweicloud:Dew/secretVersionState:SecretVersionState")
class SecretVersionState(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CSMS secret version state resource within HuaweiCloud.

        > A secret supports a maximum of `12` secret version states, each secret version state can identify only one
          secret version.
          <br>If you add a secret version state in use to a new secret version, the secret version state will be
          automatically removed from the old secret version.
          <br>**SYSCURRENT** and **SYSPREVIOUS** are built-in states, not support deletion.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        secret_name = config.require_object("secretName")
        name = config.require_object("name")
        version_id = config.require_object("versionId")
        test = huaweicloud.dew.SecretVersionState("test",
            secret_name=secret_name,
            name=name,
            version_id=version_id)
        ```

        ## Import

        The secret version state can be imported using the related `secret_name` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/secretVersionState:SecretVersionState test <secret_name>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the secret version state.
               Changing this parameter will create a new secret version.
               Only letters, digits, underscores(_) and hyphens(-) are allowed.
               The valid length is limited from `1` to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secret version state.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_name: Specifies the name of the secret to which the secret version state
               belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version_id: Specifies the ID of the secret version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretVersionStateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CSMS secret version state resource within HuaweiCloud.

        > A secret supports a maximum of `12` secret version states, each secret version state can identify only one
          secret version.
          <br>If you add a secret version state in use to a new secret version, the secret version state will be
          automatically removed from the old secret version.
          <br>**SYSCURRENT** and **SYSPREVIOUS** are built-in states, not support deletion.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        secret_name = config.require_object("secretName")
        name = config.require_object("name")
        version_id = config.require_object("versionId")
        test = huaweicloud.dew.SecretVersionState("test",
            secret_name=secret_name,
            name=name,
            version_id=version_id)
        ```

        ## Import

        The secret version state can be imported using the related `secret_name` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dew/secretVersionState:SecretVersionState test <secret_name>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param SecretVersionStateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretVersionStateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretVersionStateArgs.__new__(SecretVersionStateArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            if version_id is None and not opts.urn:
                raise TypeError("Missing required property 'version_id'")
            __props__.__dict__["version_id"] = version_id
            __props__.__dict__["updated_at"] = None
        super(SecretVersionState, __self__).__init__(
            'huaweicloud:Dew/secretVersionState:SecretVersionState',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_name: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecretVersionState':
        """
        Get an existing SecretVersionState resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the secret version state.
               Changing this parameter will create a new secret version.
               Only letters, digits, underscores(_) and hyphens(-) are allowed.
               The valid length is limited from `1` to `64` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CSMS secret version state.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_name: Specifies the name of the secret to which the secret version state
               belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the secret version state, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version_id: Specifies the ID of the secret version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecretVersionStateState.__new__(_SecretVersionStateState)

        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version_id"] = version_id
        return SecretVersionState(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the secret version state.
        Changing this parameter will create a new secret version.
        Only letters, digits, underscores(_) and hyphens(-) are allowed.
        The valid length is limited from `1` to `64` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the CSMS secret version state.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the secret to which the secret version state
        belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The last update time of the secret version state, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the secret version.
        """
        return pulumi.get(self, "version_id")

