# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPublicKeyResult',
    'AwaitableGetPublicKeyResult',
    'get_public_key',
    'get_public_key_output',
]

@pulumi.output_type
class GetPublicKeyResult:
    """
    A collection of values returned by getPublicKey.
    """
    def __init__(__self__, id=None, key_id=None, public_key=None, region=None, sequence=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sequence and not isinstance(sequence, str):
            raise TypeError("Expected argument 'sequence' to be a str")
        pulumi.set(__self__, "sequence", sequence)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        """
        The information of the public key.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sequence")


class AwaitableGetPublicKeyResult(GetPublicKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicKeyResult(
            id=self.id,
            key_id=self.key_id,
            public_key=self.public_key,
            region=self.region,
            sequence=self.sequence)


def get_public_key(key_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   sequence: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicKeyResult:
    """
    Use this data source to get the information of the public key which is a specified asymmetric key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    key_id = config.require_object("keyId")
    test = huaweicloud.Dew.get_public_key(key_id=key_id)
    ```


    :param _builtins.str key_id: Specifies the ID of the key which is `36` bytes and meeting regular matching as
           `^ [0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$`. For example,
           **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sequence: Specifies the request sequence number which is a `36` byte serial number.  
           For example, **919c82d4-8046-4722-9094-35c3c6524cff**.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['sequence'] = sequence
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dew/getPublicKey:getPublicKey', __args__, opts=opts, typ=GetPublicKeyResult).value

    return AwaitableGetPublicKeyResult(
        id=pulumi.get(__ret__, 'id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        public_key=pulumi.get(__ret__, 'public_key'),
        region=pulumi.get(__ret__, 'region'),
        sequence=pulumi.get(__ret__, 'sequence'))
def get_public_key_output(key_id: Optional[pulumi.Input[_builtins.str]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          sequence: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPublicKeyResult]:
    """
    Use this data source to get the information of the public key which is a specified asymmetric key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    key_id = config.require_object("keyId")
    test = huaweicloud.Dew.get_public_key(key_id=key_id)
    ```


    :param _builtins.str key_id: Specifies the ID of the key which is `36` bytes and meeting regular matching as
           `^ [0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$`. For example,
           **0d0466b0-e727-4d9c-b35d-f84bb474a37f**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sequence: Specifies the request sequence number which is a `36` byte serial number.  
           For example, **919c82d4-8046-4722-9094-35c3c6524cff**.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['sequence'] = sequence
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dew/getPublicKey:getPublicKey', __args__, opts=opts, typ=GetPublicKeyResult)
    return __ret__.apply(lambda __response__: GetPublicKeyResult(
        id=pulumi.get(__response__, 'id'),
        key_id=pulumi.get(__response__, 'key_id'),
        public_key=pulumi.get(__response__, 'public_key'),
        region=pulumi.get(__response__, 'region'),
        sequence=pulumi.get(__response__, 'sequence')))
