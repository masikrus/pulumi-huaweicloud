# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KeypairAssociateArgs', 'KeypairAssociate']

@pulumi.input_type
class KeypairAssociateArgs:
    def __init__(__self__, *,
                 keypair_name: pulumi.Input[_builtins.str],
                 server: pulumi.Input['KeypairAssociateServerArgs'],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KeypairAssociate resource.
        :param pulumi.Input[_builtins.str] keypair_name: Specifies the name of SSH keypair.
        :param pulumi.Input['KeypairAssociateServerArgs'] server: Specifies the ECS information that requires associating keypair.
               These public images which are not supported to associate keypair are as follows:
               **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
               **Euler 64bit** and **CentOS Stream 8 64bit**.
               
               The server structure is documented below.
               
               <a name="kps_server"></a>
               The `server` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "server", server)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of SSH keypair.
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Input['KeypairAssociateServerArgs']:
        """
        Specifies the ECS information that requires associating keypair.
        These public images which are not supported to associate keypair are as follows:
        **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
        **Euler 64bit** and **CentOS Stream 8 64bit**.

        The server structure is documented below.

        <a name="kps_server"></a>
        The `server` block supports:
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input['KeypairAssociateServerArgs']):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _KeypairAssociateState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input['KeypairAssociateServerArgs']] = None):
        """
        Input properties used for looking up and filtering KeypairAssociate resources.
        :param pulumi.Input[_builtins.str] keypair_name: Specifies the name of SSH keypair.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['KeypairAssociateServerArgs'] server: Specifies the ECS information that requires associating keypair.
               These public images which are not supported to associate keypair are as follows:
               **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
               **Euler 64bit** and **CentOS Stream 8 64bit**.
               
               The server structure is documented below.
               
               <a name="kps_server"></a>
               The `server` block supports:
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if keypair_name is not None:
            pulumi.set(__self__, "keypair_name", keypair_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of SSH keypair.
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input['KeypairAssociateServerArgs']]:
        """
        Specifies the ECS information that requires associating keypair.
        These public images which are not supported to associate keypair are as follows:
        **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
        **Euler 64bit** and **CentOS Stream 8 64bit**.

        The server structure is documented below.

        <a name="kps_server"></a>
        The `server` block supports:
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input['KeypairAssociateServerArgs']]):
        pulumi.set(self, "server", value)


@pulumi.type_token("huaweicloud:Dew/keypairAssociate:KeypairAssociate")
class KeypairAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[Union['KeypairAssociateServerArgs', 'KeypairAssociateServerArgsDict']]] = None,
                 __props__=None):
        """
        Manages a KPS keypair associate resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        > There are several prerequisites for using this resource:\\
          <br/>1. The image ECS used must be the puclic image provided by HuaweiCloud.\\
          <br/>2. The operation of keypair is achieved by modifying the server's `/root/.ssh/authorized_keys` file.
          Please ensure that the file has not been modified before using the keypair, otherwise the operation will fail.\\
          <br/>3. The SSH port of the ECS security group needs to be opened for network segment `100.125.0.0/16` in advance.\\
          <br/>4. There can be at most `10` ECS associating keypair simultaneously.

        > Please refer to the API document link for more precautions\\
          [reference](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0071.html).

        ## Example Usage

        ### Associate/Replace SSH keypair with ECS opened

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        keypair_name = config.require_object("keypairName")
        server_id = config.require_object("serverId")
        port = config.require_object("port")
        type = config.require_object("type")
        key = config.require_object("key")
        test = huaweicloud.dew.KeypairAssociate("test",
            keypair_name=keypair_name,
            server={
                "id": server_id,
                "port": port,
                "auth": {
                    "type": type,
                    "key": key,
                },
            })
        ```

        ### Associate/Reset SSH keypair with ECS closed

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        keypair_name = config.require_object("keypairName")
        server_id = config.require_object("serverId")
        test = huaweicloud.dew.KeypairAssociate("test",
            keypair_name=keypair_name,
            server={
                "id": server_id,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] keypair_name: Specifies the name of SSH keypair.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['KeypairAssociateServerArgs', 'KeypairAssociateServerArgsDict']] server: Specifies the ECS information that requires associating keypair.
               These public images which are not supported to associate keypair are as follows:
               **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
               **Euler 64bit** and **CentOS Stream 8 64bit**.
               
               The server structure is documented below.
               
               <a name="kps_server"></a>
               The `server` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeypairAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KPS keypair associate resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        > There are several prerequisites for using this resource:\\
          <br/>1. The image ECS used must be the puclic image provided by HuaweiCloud.\\
          <br/>2. The operation of keypair is achieved by modifying the server's `/root/.ssh/authorized_keys` file.
          Please ensure that the file has not been modified before using the keypair, otherwise the operation will fail.\\
          <br/>3. The SSH port of the ECS security group needs to be opened for network segment `100.125.0.0/16` in advance.\\
          <br/>4. There can be at most `10` ECS associating keypair simultaneously.

        > Please refer to the API document link for more precautions\\
          [reference](https://support.huaweicloud.com/intl/en-us/usermanual-dew/dew_01_0071.html).

        ## Example Usage

        ### Associate/Replace SSH keypair with ECS opened

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        keypair_name = config.require_object("keypairName")
        server_id = config.require_object("serverId")
        port = config.require_object("port")
        type = config.require_object("type")
        key = config.require_object("key")
        test = huaweicloud.dew.KeypairAssociate("test",
            keypair_name=keypair_name,
            server={
                "id": server_id,
                "port": port,
                "auth": {
                    "type": type,
                    "key": key,
                },
            })
        ```

        ### Associate/Reset SSH keypair with ECS closed

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        keypair_name = config.require_object("keypairName")
        server_id = config.require_object("serverId")
        test = huaweicloud.dew.KeypairAssociate("test",
            keypair_name=keypair_name,
            server={
                "id": server_id,
            })
        ```

        :param str resource_name: The name of the resource.
        :param KeypairAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeypairAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[Union['KeypairAssociateServerArgs', 'KeypairAssociateServerArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeypairAssociateArgs.__new__(KeypairAssociateArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if keypair_name is None and not opts.urn:
                raise TypeError("Missing required property 'keypair_name'")
            __props__.__dict__["keypair_name"] = keypair_name
            __props__.__dict__["region"] = region
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
        super(KeypairAssociate, __self__).__init__(
            'huaweicloud:Dew/keypairAssociate:KeypairAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server: Optional[pulumi.Input[Union['KeypairAssociateServerArgs', 'KeypairAssociateServerArgsDict']]] = None) -> 'KeypairAssociate':
        """
        Get an existing KeypairAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] keypair_name: Specifies the name of SSH keypair.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['KeypairAssociateServerArgs', 'KeypairAssociateServerArgsDict']] server: Specifies the ECS information that requires associating keypair.
               These public images which are not supported to associate keypair are as follows:
               **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
               **Euler 64bit** and **CentOS Stream 8 64bit**.
               
               The server structure is documented below.
               
               <a name="kps_server"></a>
               The `server` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeypairAssociateState.__new__(_KeypairAssociateState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["keypair_name"] = keypair_name
        __props__.__dict__["region"] = region
        __props__.__dict__["server"] = server
        return KeypairAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of SSH keypair.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Output['outputs.KeypairAssociateServer']:
        """
        Specifies the ECS information that requires associating keypair.
        These public images which are not supported to associate keypair are as follows:
        **CoreOS**, **OpenEuler**, **FreeBSD（Other）**, **Kylin V10 64bit**, **UnionTech OS Server 20**,
        **Euler 64bit** and **CentOS Stream 8 64bit**.

        The server structure is documented below.

        <a name="kps_server"></a>
        The `server` block supports:
        """
        return pulumi.get(self, "server")

