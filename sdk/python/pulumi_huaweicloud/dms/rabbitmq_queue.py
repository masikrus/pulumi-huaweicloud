# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RabbitmqQueueArgs', 'RabbitmqQueue']

@pulumi.input_type
class RabbitmqQueueArgs:
    def __init__(__self__, *,
                 auto_delete: pulumi.Input[_builtins.bool],
                 instance_id: pulumi.Input[_builtins.str],
                 vhost: pulumi.Input[_builtins.str],
                 dead_letter_exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_letter_routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 durable: Optional[pulumi.Input[_builtins.bool]] = None,
                 lazy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 message_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RabbitmqQueue resource.
        :param pulumi.Input[_builtins.bool] auto_delete: Specifies whether to enable auto delete.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
               
               > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] dead_letter_exchange: Specifies the name of the dead letter exchange.
               It's required when `dead_letter_routing_key` is specified.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] dead_letter_routing_key: Specifies the routing key of the dead letter exchange.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] durable: Specifies whether to enable durable. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] lazy_mode: Specifies the lazy mode. Valid value is **lazy**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] message_ttl: Specifies how long a message in this queue can be retained.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the queue name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "auto_delete", auto_delete)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "vhost", vhost)
        if dead_letter_exchange is not None:
            pulumi.set(__self__, "dead_letter_exchange", dead_letter_exchange)
        if dead_letter_routing_key is not None:
            pulumi.set(__self__, "dead_letter_routing_key", dead_letter_routing_key)
        if durable is not None:
            pulumi.set(__self__, "durable", durable)
        if lazy_mode is not None:
            pulumi.set(__self__, "lazy_mode", lazy_mode)
        if message_ttl is not None:
            pulumi.set(__self__, "message_ttl", message_ttl)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to enable auto delete.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.

        > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vhost", value)

    @_builtins.property
    @pulumi.getter(name="deadLetterExchange")
    def dead_letter_exchange(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dead letter exchange.
        It's required when `dead_letter_routing_key` is specified.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_exchange")

    @dead_letter_exchange.setter
    def dead_letter_exchange(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_letter_exchange", value)

    @_builtins.property
    @pulumi.getter(name="deadLetterRoutingKey")
    def dead_letter_routing_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the routing key of the dead letter exchange.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_routing_key")

    @dead_letter_routing_key.setter
    def dead_letter_routing_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_letter_routing_key", value)

    @_builtins.property
    @pulumi.getter
    def durable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable durable. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "durable")

    @durable.setter
    def durable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "durable", value)

    @_builtins.property
    @pulumi.getter(name="lazyMode")
    def lazy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lazy mode. Valid value is **lazy**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "lazy_mode")

    @lazy_mode.setter
    def lazy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lazy_mode", value)

    @_builtins.property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies how long a message in this queue can be retained.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_ttl")

    @message_ttl.setter
    def message_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "message_ttl", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RabbitmqQueueState:
    def __init__(__self__, *,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 consumer_details: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueConsumerDetailArgs']]]] = None,
                 consumers: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_letter_exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_letter_routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 durable: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lazy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 message_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 messages: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueQueueBindingArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RabbitmqQueue resources.
        :param pulumi.Input[_builtins.bool] auto_delete: Specifies whether to enable auto delete.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueConsumerDetailArgs']]] consumer_details: Indicates the details of subscribed consumers.
               The consumer_details structure is documented below.
        :param pulumi.Input[_builtins.int] consumers: Indicates the connected consumers.
        :param pulumi.Input[_builtins.str] dead_letter_exchange: Specifies the name of the dead letter exchange.
               It's required when `dead_letter_routing_key` is specified.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] dead_letter_routing_key: Specifies the routing key of the dead letter exchange.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] durable: Specifies whether to enable durable. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] lazy_mode: Specifies the lazy mode. Valid value is **lazy**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] message_ttl: Specifies how long a message in this queue can be retained.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] messages: Indicates the accumulated messages.
        :param pulumi.Input[_builtins.str] name: Specifies the queue name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] policy: Indicates the policy.
        :param pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueQueueBindingArgs']]] queue_bindings: Indicates the bindings to this queue.
               The queue_bindings structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
               
               > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if consumer_details is not None:
            pulumi.set(__self__, "consumer_details", consumer_details)
        if consumers is not None:
            pulumi.set(__self__, "consumers", consumers)
        if dead_letter_exchange is not None:
            pulumi.set(__self__, "dead_letter_exchange", dead_letter_exchange)
        if dead_letter_routing_key is not None:
            pulumi.set(__self__, "dead_letter_routing_key", dead_letter_routing_key)
        if durable is not None:
            pulumi.set(__self__, "durable", durable)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lazy_mode is not None:
            pulumi.set(__self__, "lazy_mode", lazy_mode)
        if message_ttl is not None:
            pulumi.set(__self__, "message_ttl", message_ttl)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if queue_bindings is not None:
            pulumi.set(__self__, "queue_bindings", queue_bindings)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable auto delete.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="consumerDetails")
    def consumer_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueConsumerDetailArgs']]]]:
        """
        Indicates the details of subscribed consumers.
        The consumer_details structure is documented below.
        """
        return pulumi.get(self, "consumer_details")

    @consumer_details.setter
    def consumer_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueConsumerDetailArgs']]]]):
        pulumi.set(self, "consumer_details", value)

    @_builtins.property
    @pulumi.getter
    def consumers(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the connected consumers.
        """
        return pulumi.get(self, "consumers")

    @consumers.setter
    def consumers(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "consumers", value)

    @_builtins.property
    @pulumi.getter(name="deadLetterExchange")
    def dead_letter_exchange(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dead letter exchange.
        It's required when `dead_letter_routing_key` is specified.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_exchange")

    @dead_letter_exchange.setter
    def dead_letter_exchange(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_letter_exchange", value)

    @_builtins.property
    @pulumi.getter(name="deadLetterRoutingKey")
    def dead_letter_routing_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the routing key of the dead letter exchange.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_routing_key")

    @dead_letter_routing_key.setter
    def dead_letter_routing_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_letter_routing_key", value)

    @_builtins.property
    @pulumi.getter
    def durable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable durable. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "durable")

    @durable.setter
    def durable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "durable", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lazyMode")
    def lazy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lazy mode. Valid value is **lazy**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "lazy_mode")

    @lazy_mode.setter
    def lazy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lazy_mode", value)

    @_builtins.property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies how long a message in this queue can be retained.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_ttl")

    @message_ttl.setter
    def message_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "message_ttl", value)

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the accumulated messages.
        """
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "messages", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the policy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter(name="queueBindings")
    def queue_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueQueueBindingArgs']]]]:
        """
        Indicates the bindings to this queue.
        The queue_bindings structure is documented below.
        """
        return pulumi.get(self, "queue_bindings")

    @queue_bindings.setter
    def queue_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqQueueQueueBindingArgs']]]]):
        pulumi.set(self, "queue_bindings", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.

        > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vhost", value)


@pulumi.type_token("huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue")
class RabbitmqQueue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 dead_letter_exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_letter_routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 durable: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lazy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 message_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS RabbitMQ queue resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        vhost = config.require_object("vhost")
        name = config.require_object("name")
        exchange = config.require_object("exchange")
        routing_key = config.require_object("routingKey")
        test = huaweicloud.dms.RabbitmqQueue("test",
            instance_id=instance_id,
            vhost=vhost,
            name=name,
            auto_delete=False,
            durable=True,
            dead_letter_exchange=exchange,
            dead_letter_routing_key=routing_key,
            message_ttl=4,
            lazy_mode="lazy")
        ```

        ## Import

        The RabbitMQ queue can be imported using the `instance_id`, `vhost` and `name` separated by slashes or commas, but if

        `name` contains slashes, the import ID can only be separated by commas e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue test <instance_id>/<vhost>/<name>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue test <instance_id>,<vhost>,<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_delete: Specifies whether to enable auto delete.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] dead_letter_exchange: Specifies the name of the dead letter exchange.
               It's required when `dead_letter_routing_key` is specified.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] dead_letter_routing_key: Specifies the routing key of the dead letter exchange.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] durable: Specifies whether to enable durable. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] lazy_mode: Specifies the lazy mode. Valid value is **lazy**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] message_ttl: Specifies how long a message in this queue can be retained.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the queue name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
               
               > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqQueueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RabbitMQ queue resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        vhost = config.require_object("vhost")
        name = config.require_object("name")
        exchange = config.require_object("exchange")
        routing_key = config.require_object("routingKey")
        test = huaweicloud.dms.RabbitmqQueue("test",
            instance_id=instance_id,
            vhost=vhost,
            name=name,
            auto_delete=False,
            durable=True,
            dead_letter_exchange=exchange,
            dead_letter_routing_key=routing_key,
            message_ttl=4,
            lazy_mode="lazy")
        ```

        ## Import

        The RabbitMQ queue can be imported using the `instance_id`, `vhost` and `name` separated by slashes or commas, but if

        `name` contains slashes, the import ID can only be separated by commas e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue test <instance_id>/<vhost>/<name>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue test <instance_id>,<vhost>,<name>
        ```

        :param str resource_name: The name of the resource.
        :param RabbitmqQueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqQueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 dead_letter_exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_letter_routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 durable: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lazy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 message_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqQueueArgs.__new__(RabbitmqQueueArgs)

            if auto_delete is None and not opts.urn:
                raise TypeError("Missing required property 'auto_delete'")
            __props__.__dict__["auto_delete"] = auto_delete
            __props__.__dict__["dead_letter_exchange"] = dead_letter_exchange
            __props__.__dict__["dead_letter_routing_key"] = dead_letter_routing_key
            __props__.__dict__["durable"] = durable
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["lazy_mode"] = lazy_mode
            __props__.__dict__["message_ttl"] = message_ttl
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if vhost is None and not opts.urn:
                raise TypeError("Missing required property 'vhost'")
            __props__.__dict__["vhost"] = vhost
            __props__.__dict__["consumer_details"] = None
            __props__.__dict__["consumers"] = None
            __props__.__dict__["messages"] = None
            __props__.__dict__["policy"] = None
            __props__.__dict__["queue_bindings"] = None
        super(RabbitmqQueue, __self__).__init__(
            'huaweicloud:Dms/rabbitmqQueue:RabbitmqQueue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            consumer_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqQueueConsumerDetailArgs', 'RabbitmqQueueConsumerDetailArgsDict']]]]] = None,
            consumers: Optional[pulumi.Input[_builtins.int]] = None,
            dead_letter_exchange: Optional[pulumi.Input[_builtins.str]] = None,
            dead_letter_routing_key: Optional[pulumi.Input[_builtins.str]] = None,
            durable: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            lazy_mode: Optional[pulumi.Input[_builtins.str]] = None,
            message_ttl: Optional[pulumi.Input[_builtins.int]] = None,
            messages: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy: Optional[pulumi.Input[_builtins.str]] = None,
            queue_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqQueueQueueBindingArgs', 'RabbitmqQueueQueueBindingArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            vhost: Optional[pulumi.Input[_builtins.str]] = None) -> 'RabbitmqQueue':
        """
        Get an existing RabbitmqQueue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_delete: Specifies whether to enable auto delete.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqQueueConsumerDetailArgs', 'RabbitmqQueueConsumerDetailArgsDict']]]] consumer_details: Indicates the details of subscribed consumers.
               The consumer_details structure is documented below.
        :param pulumi.Input[_builtins.int] consumers: Indicates the connected consumers.
        :param pulumi.Input[_builtins.str] dead_letter_exchange: Specifies the name of the dead letter exchange.
               It's required when `dead_letter_routing_key` is specified.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] dead_letter_routing_key: Specifies the routing key of the dead letter exchange.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] durable: Specifies whether to enable durable. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] lazy_mode: Specifies the lazy mode. Valid value is **lazy**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] message_ttl: Specifies how long a message in this queue can be retained.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] messages: Indicates the accumulated messages.
        :param pulumi.Input[_builtins.str] name: Specifies the queue name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] policy: Indicates the policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqQueueQueueBindingArgs', 'RabbitmqQueueQueueBindingArgsDict']]]] queue_bindings: Indicates the bindings to this queue.
               The queue_bindings structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
               
               > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqQueueState.__new__(_RabbitmqQueueState)

        __props__.__dict__["auto_delete"] = auto_delete
        __props__.__dict__["consumer_details"] = consumer_details
        __props__.__dict__["consumers"] = consumers
        __props__.__dict__["dead_letter_exchange"] = dead_letter_exchange
        __props__.__dict__["dead_letter_routing_key"] = dead_letter_routing_key
        __props__.__dict__["durable"] = durable
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["lazy_mode"] = lazy_mode
        __props__.__dict__["message_ttl"] = message_ttl
        __props__.__dict__["messages"] = messages
        __props__.__dict__["name"] = name
        __props__.__dict__["policy"] = policy
        __props__.__dict__["queue_bindings"] = queue_bindings
        __props__.__dict__["region"] = region
        __props__.__dict__["vhost"] = vhost
        return RabbitmqQueue(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable auto delete.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="consumerDetails")
    def consumer_details(self) -> pulumi.Output[Sequence['outputs.RabbitmqQueueConsumerDetail']]:
        """
        Indicates the details of subscribed consumers.
        The consumer_details structure is documented below.
        """
        return pulumi.get(self, "consumer_details")

    @_builtins.property
    @pulumi.getter
    def consumers(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the connected consumers.
        """
        return pulumi.get(self, "consumers")

    @_builtins.property
    @pulumi.getter(name="deadLetterExchange")
    def dead_letter_exchange(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the dead letter exchange.
        It's required when `dead_letter_routing_key` is specified.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_exchange")

    @_builtins.property
    @pulumi.getter(name="deadLetterRoutingKey")
    def dead_letter_routing_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the routing key of the dead letter exchange.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dead_letter_routing_key")

    @_builtins.property
    @pulumi.getter
    def durable(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable durable. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "durable")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lazyMode")
    def lazy_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the lazy mode. Valid value is **lazy**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "lazy_mode")

    @_builtins.property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies how long a message in this queue can be retained.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_ttl")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the accumulated messages.
        """
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the queue name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the policy.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="queueBindings")
    def queue_bindings(self) -> pulumi.Output[Sequence['outputs.RabbitmqQueueQueueBinding']]:
        """
        Indicates the bindings to this queue.
        The queue_bindings structure is documented below.
        """
        return pulumi.get(self, "queue_bindings")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.

        > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "vhost")

