# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkaTopicProducersResult',
    'AwaitableGetKafkaTopicProducersResult',
    'get_kafka_topic_producers',
    'get_kafka_topic_producers_output',
]

@pulumi.output_type
class GetKafkaTopicProducersResult:
    """
    A collection of values returned by getKafkaTopicProducers.
    """
    def __init__(__self__, id=None, instance_id=None, producers=None, region=None, topic=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if producers and not isinstance(producers, list):
            raise TypeError("Expected argument 'producers' to be a list")
        pulumi.set(__self__, "producers", producers)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if topic and not isinstance(topic, str):
            raise TypeError("Expected argument 'topic' to be a str")
        pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def producers(self) -> Sequence['outputs.GetKafkaTopicProducersProducerResult']:
        """
        Indicates the producer list.
        """
        return pulumi.get(self, "producers")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        return pulumi.get(self, "topic")


class AwaitableGetKafkaTopicProducersResult(GetKafkaTopicProducersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaTopicProducersResult(
            id=self.id,
            instance_id=self.instance_id,
            producers=self.producers,
            region=self.region,
            topic=self.topic)


def get_kafka_topic_producers(instance_id: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              topic: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaTopicProducersResult:
    """
    Use this data source to get the list of Kafka topic producers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic = config.require_object("topic")
    test = huaweicloud.Dms.get_kafka_topic_producers(instance_id=instance_id,
        topic=topic)
    ```


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic: Specifies the topic name.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['topic'] = topic
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getKafkaTopicProducers:getKafkaTopicProducers', __args__, opts=opts, typ=GetKafkaTopicProducersResult).value

    return AwaitableGetKafkaTopicProducersResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        producers=pulumi.get(__ret__, 'producers'),
        region=pulumi.get(__ret__, 'region'),
        topic=pulumi.get(__ret__, 'topic'))
def get_kafka_topic_producers_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     topic: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKafkaTopicProducersResult]:
    """
    Use this data source to get the list of Kafka topic producers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic = config.require_object("topic")
    test = huaweicloud.Dms.get_kafka_topic_producers(instance_id=instance_id,
        topic=topic)
    ```


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic: Specifies the topic name.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['topic'] = topic
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getKafkaTopicProducers:getKafkaTopicProducers', __args__, opts=opts, typ=GetKafkaTopicProducersResult)
    return __ret__.apply(lambda __response__: GetKafkaTopicProducersResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        producers=pulumi.get(__response__, 'producers'),
        region=pulumi.get(__response__, 'region'),
        topic=pulumi.get(__response__, 'topic')))
