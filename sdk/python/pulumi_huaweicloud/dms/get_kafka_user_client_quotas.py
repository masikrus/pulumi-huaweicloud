# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkaUserClientQuotasResult',
    'AwaitableGetKafkaUserClientQuotasResult',
    'get_kafka_user_client_quotas',
    'get_kafka_user_client_quotas_output',
]

@pulumi.output_type
class GetKafkaUserClientQuotasResult:
    """
    A collection of values returned by getKafkaUserClientQuotas.
    """
    def __init__(__self__, client=None, id=None, instance_id=None, quotas=None, region=None, user=None):
        if client and not isinstance(client, str):
            raise TypeError("Expected argument 'client' to be a str")
        pulumi.set(__self__, "client", client)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def client(self) -> Optional[_builtins.str]:
        """
        Indicates the client ID.
        """
        return pulumi.get(self, "client")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetKafkaUserClientQuotasQuotaResult']:
        """
        Indicates the client quotas.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        Indicates the username.
        """
        return pulumi.get(self, "user")


class AwaitableGetKafkaUserClientQuotasResult(GetKafkaUserClientQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaUserClientQuotasResult(
            client=self.client,
            id=self.id,
            instance_id=self.instance_id,
            quotas=self.quotas,
            region=self.region,
            user=self.user)


def get_kafka_user_client_quotas(client: Optional[_builtins.str] = None,
                                 instance_id: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 user: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaUserClientQuotasResult:
    """
    Use this data source to get the list of Kafka instance user client quotas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dms.get_kafka_user_client_quotas(instance_id=instance_id)
    ```


    :param _builtins.str client: Specifies the client ID.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str user: Specifies the user name.
    """
    __args__ = dict()
    __args__['client'] = client
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['user'] = user
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getKafkaUserClientQuotas:getKafkaUserClientQuotas', __args__, opts=opts, typ=GetKafkaUserClientQuotasResult).value

    return AwaitableGetKafkaUserClientQuotasResult(
        client=pulumi.get(__ret__, 'client'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'),
        user=pulumi.get(__ret__, 'user'))
def get_kafka_user_client_quotas_output(client: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKafkaUserClientQuotasResult]:
    """
    Use this data source to get the list of Kafka instance user client quotas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dms.get_kafka_user_client_quotas(instance_id=instance_id)
    ```


    :param _builtins.str client: Specifies the client ID.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str user: Specifies the user name.
    """
    __args__ = dict()
    __args__['client'] = client
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['user'] = user
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getKafkaUserClientQuotas:getKafkaUserClientQuotas', __args__, opts=opts, typ=GetKafkaUserClientQuotasResult)
    return __ret__.apply(lambda __response__: GetKafkaUserClientQuotasResult(
        client=pulumi.get(__response__, 'client'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region'),
        user=pulumi.get(__response__, 'user')))
