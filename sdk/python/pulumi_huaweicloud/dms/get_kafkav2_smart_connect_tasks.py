# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkav2SmartConnectTasksResult',
    'AwaitableGetKafkav2SmartConnectTasksResult',
    'get_kafkav2_smart_connect_tasks',
    'get_kafkav2_smart_connect_tasks_output',
]

@pulumi.output_type
class GetKafkav2SmartConnectTasksResult:
    """
    A collection of values returned by getKafkav2SmartConnectTasks.
    """
    def __init__(__self__, id=None, instance_id=None, region=None, tasks=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetKafkav2SmartConnectTasksTaskResult']:
        """
        Indicates the smart connect task details.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetKafkav2SmartConnectTasksResult(GetKafkav2SmartConnectTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkav2SmartConnectTasksResult(
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            tasks=self.tasks)


def get_kafkav2_smart_connect_tasks(instance_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkav2SmartConnectTasksResult:
    """
    Use this data source to get the list of DMS kafka smart connect tasks.


    :param _builtins.str instance_id: Specifies the kafka instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getKafkav2SmartConnectTasks:getKafkav2SmartConnectTasks', __args__, opts=opts, typ=GetKafkav2SmartConnectTasksResult).value

    return AwaitableGetKafkav2SmartConnectTasksResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_kafkav2_smart_connect_tasks_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKafkav2SmartConnectTasksResult]:
    """
    Use this data source to get the list of DMS kafka smart connect tasks.


    :param _builtins.str instance_id: Specifies the kafka instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getKafkav2SmartConnectTasks:getKafkav2SmartConnectTasks', __args__, opts=opts, typ=GetKafkav2SmartConnectTasksResult)
    return __ret__.apply(lambda __response__: GetKafkav2SmartConnectTasksResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        tasks=pulumi.get(__response__, 'tasks')))
