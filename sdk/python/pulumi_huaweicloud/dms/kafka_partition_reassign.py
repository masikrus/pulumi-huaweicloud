# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KafkaPartitionReassignArgs', 'KafkaPartitionReassign']

@pulumi.input_type
class KafkaPartitionReassignArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 reassignments: pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]],
                 execute_at: Optional[pulumi.Input[_builtins.int]] = None,
                 is_schedule: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throttle: Optional[pulumi.Input[_builtins.int]] = None,
                 time_estimate: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a KafkaPartitionReassign resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]] reassignments: Specifies the reassignment plan.
               Changing this creates a new resource.
               The reassignments structure is documented below.
        :param pulumi.Input[_builtins.int] execute_at: Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
               It's required if `is_schedule` is **true**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_schedule: Specifies whether the task is scheduled. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] throttle: Specifies the reassignment threshold. Value can be specified ranges from `1`
               to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] time_estimate: Specifies whether to perform time estimation tasks. Defaults to **false**.
               Changing this creates a new resource.
               
               <a name="reassignments_struct"></a>
               The `reassignments` block supports:
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "reassignments", reassignments)
        if execute_at is not None:
            pulumi.set(__self__, "execute_at", execute_at)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if throttle is not None:
            pulumi.set(__self__, "throttle", throttle)
        if time_estimate is not None:
            pulumi.set(__self__, "time_estimate", time_estimate)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DMS kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def reassignments(self) -> pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]]:
        """
        Specifies the reassignment plan.
        Changing this creates a new resource.
        The reassignments structure is documented below.
        """
        return pulumi.get(self, "reassignments")

    @reassignments.setter
    def reassignments(self, value: pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]]):
        pulumi.set(self, "reassignments", value)

    @_builtins.property
    @pulumi.getter(name="executeAt")
    def execute_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
        It's required if `is_schedule` is **true**. Changing this creates a new resource.
        """
        return pulumi.get(self, "execute_at")

    @execute_at.setter
    def execute_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "execute_at", value)

    @_builtins.property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the task is scheduled. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_schedule", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def throttle(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the reassignment threshold. Value can be specified ranges from `1`
        to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "throttle")

    @throttle.setter
    def throttle(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "throttle", value)

    @_builtins.property
    @pulumi.getter(name="timeEstimate")
    def time_estimate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform time estimation tasks. Defaults to **false**.
        Changing this creates a new resource.

        <a name="reassignments_struct"></a>
        The `reassignments` block supports:
        """
        return pulumi.get(self, "time_estimate")

    @time_estimate.setter
    def time_estimate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "time_estimate", value)


@pulumi.input_type
class _KafkaPartitionReassignState:
    def __init__(__self__, *,
                 execute_at: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_schedule: Optional[pulumi.Input[_builtins.bool]] = None,
                 reassignment_time: Optional[pulumi.Input[_builtins.int]] = None,
                 reassignments: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 throttle: Optional[pulumi.Input[_builtins.int]] = None,
                 time_estimate: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering KafkaPartitionReassign resources.
        :param pulumi.Input[_builtins.int] execute_at: Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
               It's required if `is_schedule` is **true**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_schedule: Specifies whether the task is scheduled. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] reassignment_time: Indicates the estimated time, in seconds, and it's only returned for a time estimation task.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]] reassignments: Specifies the reassignment plan.
               Changing this creates a new resource.
               The reassignments structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] task_id: Indicates the task ID, and it's only returned for a partition reassignment task.
        :param pulumi.Input[_builtins.int] throttle: Specifies the reassignment threshold. Value can be specified ranges from `1`
               to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] time_estimate: Specifies whether to perform time estimation tasks. Defaults to **false**.
               Changing this creates a new resource.
               
               <a name="reassignments_struct"></a>
               The `reassignments` block supports:
        """
        if execute_at is not None:
            pulumi.set(__self__, "execute_at", execute_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if reassignment_time is not None:
            pulumi.set(__self__, "reassignment_time", reassignment_time)
        if reassignments is not None:
            pulumi.set(__self__, "reassignments", reassignments)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if throttle is not None:
            pulumi.set(__self__, "throttle", throttle)
        if time_estimate is not None:
            pulumi.set(__self__, "time_estimate", time_estimate)

    @_builtins.property
    @pulumi.getter(name="executeAt")
    def execute_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
        It's required if `is_schedule` is **true**. Changing this creates a new resource.
        """
        return pulumi.get(self, "execute_at")

    @execute_at.setter
    def execute_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "execute_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DMS kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the task is scheduled. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_schedule", value)

    @_builtins.property
    @pulumi.getter(name="reassignmentTime")
    def reassignment_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the estimated time, in seconds, and it's only returned for a time estimation task.
        """
        return pulumi.get(self, "reassignment_time")

    @reassignment_time.setter
    def reassignment_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "reassignment_time", value)

    @_builtins.property
    @pulumi.getter
    def reassignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]]]:
        """
        Specifies the reassignment plan.
        Changing this creates a new resource.
        The reassignments structure is documented below.
        """
        return pulumi.get(self, "reassignments")

    @reassignments.setter
    def reassignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaPartitionReassignReassignmentArgs']]]]):
        pulumi.set(self, "reassignments", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task ID, and it's only returned for a partition reassignment task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter
    def throttle(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the reassignment threshold. Value can be specified ranges from `1`
        to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "throttle")

    @throttle.setter
    def throttle(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "throttle", value)

    @_builtins.property
    @pulumi.getter(name="timeEstimate")
    def time_estimate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform time estimation tasks. Defaults to **false**.
        Changing this creates a new resource.

        <a name="reassignments_struct"></a>
        The `reassignments` block supports:
        """
        return pulumi.get(self, "time_estimate")

    @time_estimate.setter
    def time_estimate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "time_estimate", value)


@pulumi.type_token("huaweicloud:Dms/kafkaPartitionReassign:KafkaPartitionReassign")
class KafkaPartitionReassign(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 execute_at: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_schedule: Optional[pulumi.Input[_builtins.bool]] = None,
                 reassignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaPartitionReassignReassignmentArgs', 'KafkaPartitionReassignReassignmentArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throttle: Optional[pulumi.Input[_builtins.int]] = None,
                 time_estimate: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages a DMS kafka partition reassign resource within HuaweiCloud.

        ## Example Usage

        ### Create a partition reassignment task by manually specified assignment plan

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaPartitionReassign("test",
            instance_id=instance_id,
            reassignments=[{
                "topic": topic_name,
                "assignments": [
                    {
                        "partition": 0,
                        "partition_brokers": [
                            0,
                            1,
                            2,
                        ],
                    },
                    {
                        "partition": 1,
                        "partition_brokers": [
                            2,
                            0,
                            1,
                        ],
                    },
                    {
                        "partition": 2,
                        "partition_brokers": [
                            1,
                            2,
                            0,
                        ],
                    },
                ],
            }])
        ```

        ### Create a partition reassignment task by automatic assignment plan

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaPartitionReassign("test",
            instance_id=instance_id,
            reassignments=[{
                "topic": topic_name,
                "brokers": [
                    0,
                    1,
                    2,
                ],
                "replication_factor": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] execute_at: Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
               It's required if `is_schedule` is **true**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_schedule: Specifies whether the task is scheduled. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KafkaPartitionReassignReassignmentArgs', 'KafkaPartitionReassignReassignmentArgsDict']]]] reassignments: Specifies the reassignment plan.
               Changing this creates a new resource.
               The reassignments structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] throttle: Specifies the reassignment threshold. Value can be specified ranges from `1`
               to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] time_estimate: Specifies whether to perform time estimation tasks. Defaults to **false**.
               Changing this creates a new resource.
               
               <a name="reassignments_struct"></a>
               The `reassignments` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaPartitionReassignArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS kafka partition reassign resource within HuaweiCloud.

        ## Example Usage

        ### Create a partition reassignment task by manually specified assignment plan

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaPartitionReassign("test",
            instance_id=instance_id,
            reassignments=[{
                "topic": topic_name,
                "assignments": [
                    {
                        "partition": 0,
                        "partition_brokers": [
                            0,
                            1,
                            2,
                        ],
                    },
                    {
                        "partition": 1,
                        "partition_brokers": [
                            2,
                            0,
                            1,
                        ],
                    },
                    {
                        "partition": 2,
                        "partition_brokers": [
                            1,
                            2,
                            0,
                        ],
                    },
                ],
            }])
        ```

        ### Create a partition reassignment task by automatic assignment plan

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaPartitionReassign("test",
            instance_id=instance_id,
            reassignments=[{
                "topic": topic_name,
                "brokers": [
                    0,
                    1,
                    2,
                ],
                "replication_factor": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param KafkaPartitionReassignArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaPartitionReassignArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 execute_at: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_schedule: Optional[pulumi.Input[_builtins.bool]] = None,
                 reassignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaPartitionReassignReassignmentArgs', 'KafkaPartitionReassignReassignmentArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 throttle: Optional[pulumi.Input[_builtins.int]] = None,
                 time_estimate: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaPartitionReassignArgs.__new__(KafkaPartitionReassignArgs)

            __props__.__dict__["execute_at"] = execute_at
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_schedule"] = is_schedule
            if reassignments is None and not opts.urn:
                raise TypeError("Missing required property 'reassignments'")
            __props__.__dict__["reassignments"] = reassignments
            __props__.__dict__["region"] = region
            __props__.__dict__["throttle"] = throttle
            __props__.__dict__["time_estimate"] = time_estimate
            __props__.__dict__["reassignment_time"] = None
            __props__.__dict__["task_id"] = None
        super(KafkaPartitionReassign, __self__).__init__(
            'huaweicloud:Dms/kafkaPartitionReassign:KafkaPartitionReassign',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            execute_at: Optional[pulumi.Input[_builtins.int]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_schedule: Optional[pulumi.Input[_builtins.bool]] = None,
            reassignment_time: Optional[pulumi.Input[_builtins.int]] = None,
            reassignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaPartitionReassignReassignmentArgs', 'KafkaPartitionReassignReassignmentArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            throttle: Optional[pulumi.Input[_builtins.int]] = None,
            time_estimate: Optional[pulumi.Input[_builtins.bool]] = None) -> 'KafkaPartitionReassign':
        """
        Get an existing KafkaPartitionReassign resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] execute_at: Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
               It's required if `is_schedule` is **true**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_schedule: Specifies whether the task is scheduled. Defaults to **false**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] reassignment_time: Indicates the estimated time, in seconds, and it's only returned for a time estimation task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KafkaPartitionReassignReassignmentArgs', 'KafkaPartitionReassignReassignmentArgsDict']]]] reassignments: Specifies the reassignment plan.
               Changing this creates a new resource.
               The reassignments structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] task_id: Indicates the task ID, and it's only returned for a partition reassignment task.
        :param pulumi.Input[_builtins.int] throttle: Specifies the reassignment threshold. Value can be specified ranges from `1`
               to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] time_estimate: Specifies whether to perform time estimation tasks. Defaults to **false**.
               Changing this creates a new resource.
               
               <a name="reassignments_struct"></a>
               The `reassignments` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaPartitionReassignState.__new__(_KafkaPartitionReassignState)

        __props__.__dict__["execute_at"] = execute_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_schedule"] = is_schedule
        __props__.__dict__["reassignment_time"] = reassignment_time
        __props__.__dict__["reassignments"] = reassignments
        __props__.__dict__["region"] = region
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["throttle"] = throttle
        __props__.__dict__["time_estimate"] = time_estimate
        return KafkaPartitionReassign(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="executeAt")
    def execute_at(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the schedule time. The value is a UNIX timestamp, in **ms**.
        It's required if `is_schedule` is **true**. Changing this creates a new resource.
        """
        return pulumi.get(self, "execute_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DMS kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the task is scheduled. Defaults to **false**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "is_schedule")

    @_builtins.property
    @pulumi.getter(name="reassignmentTime")
    def reassignment_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the estimated time, in seconds, and it's only returned for a time estimation task.
        """
        return pulumi.get(self, "reassignment_time")

    @_builtins.property
    @pulumi.getter
    def reassignments(self) -> pulumi.Output[Sequence['outputs.KafkaPartitionReassignReassignment']]:
        """
        Specifies the reassignment plan.
        Changing this creates a new resource.
        The reassignments structure is documented below.
        """
        return pulumi.get(self, "reassignments")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task ID, and it's only returned for a partition reassignment task.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter
    def throttle(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the reassignment threshold. Value can be specified ranges from `1`
        to `300`. The unit is **MB/s**. Or specifies it to `-1`, indicating no throttling required.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "throttle")

    @_builtins.property
    @pulumi.getter(name="timeEstimate")
    def time_estimate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to perform time estimation tasks. Defaults to **false**.
        Changing this creates a new resource.

        <a name="reassignments_struct"></a>
        The `reassignments` block supports:
        """
        return pulumi.get(self, "time_estimate")

