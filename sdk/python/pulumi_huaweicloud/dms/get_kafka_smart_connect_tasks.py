# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkaSmartConnectTasksResult',
    'AwaitableGetKafkaSmartConnectTasksResult',
    'get_kafka_smart_connect_tasks',
    'get_kafka_smart_connect_tasks_output',
]

@pulumi.output_type
class GetKafkaSmartConnectTasksResult:
    """
    A collection of values returned by getKafkaSmartConnectTasks.
    """
    def __init__(__self__, connector_id=None, destination_type=None, id=None, region=None, status=None, task_id=None, task_name=None, tasks=None):
        if connector_id and not isinstance(connector_id, str):
            raise TypeError("Expected argument 'connector_id' to be a str")
        pulumi.set(__self__, "connector_id", connector_id)
        if destination_type and not isinstance(destination_type, str):
            raise TypeError("Expected argument 'destination_type' to be a str")
        pulumi.set(__self__, "destination_type", destination_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> _builtins.str:
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[_builtins.str]:
        """
        Indicates the destination type of the smart connect task.
        """
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the smart connect task. The value can be: **RUNNING**, **PAUSED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the smart connect task.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetKafkaSmartConnectTasksTaskResult']:
        """
        The list of smart connect tasks.
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetKafkaSmartConnectTasksResult(GetKafkaSmartConnectTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaSmartConnectTasksResult(
            connector_id=self.connector_id,
            destination_type=self.destination_type,
            id=self.id,
            region=self.region,
            status=self.status,
            task_id=self.task_id,
            task_name=self.task_name,
            tasks=self.tasks)


def get_kafka_smart_connect_tasks(connector_id: Optional[_builtins.str] = None,
                                  destination_type: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  status: Optional[_builtins.str] = None,
                                  task_id: Optional[_builtins.str] = None,
                                  task_name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaSmartConnectTasksResult:
    """
    Use this data source to get the list of DMS kafka smart connect tasks.


    :param _builtins.str connector_id: Specifies the connector ID of the kafka instance.
    :param _builtins.str destination_type: Specifies the destination type of the smart connect task.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the smart connect task. Value options: **RUNNING**, **PAUSED**.
    :param _builtins.str task_id: Specifies the ID of the smart connect task.
    :param _builtins.str task_name: Specifies the name of the smart connect task.
    """
    __args__ = dict()
    __args__['connectorId'] = connector_id
    __args__['destinationType'] = destination_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['taskId'] = task_id
    __args__['taskName'] = task_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getKafkaSmartConnectTasks:getKafkaSmartConnectTasks', __args__, opts=opts, typ=GetKafkaSmartConnectTasksResult).value

    return AwaitableGetKafkaSmartConnectTasksResult(
        connector_id=pulumi.get(__ret__, 'connector_id'),
        destination_type=pulumi.get(__ret__, 'destination_type'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        task_id=pulumi.get(__ret__, 'task_id'),
        task_name=pulumi.get(__ret__, 'task_name'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_kafka_smart_connect_tasks_output(connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         destination_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         task_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         task_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKafkaSmartConnectTasksResult]:
    """
    Use this data source to get the list of DMS kafka smart connect tasks.


    :param _builtins.str connector_id: Specifies the connector ID of the kafka instance.
    :param _builtins.str destination_type: Specifies the destination type of the smart connect task.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the smart connect task. Value options: **RUNNING**, **PAUSED**.
    :param _builtins.str task_id: Specifies the ID of the smart connect task.
    :param _builtins.str task_name: Specifies the name of the smart connect task.
    """
    __args__ = dict()
    __args__['connectorId'] = connector_id
    __args__['destinationType'] = destination_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['taskId'] = task_id
    __args__['taskName'] = task_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getKafkaSmartConnectTasks:getKafkaSmartConnectTasks', __args__, opts=opts, typ=GetKafkaSmartConnectTasksResult)
    return __ret__.apply(lambda __response__: GetKafkaSmartConnectTasksResult(
        connector_id=pulumi.get(__response__, 'connector_id'),
        destination_type=pulumi.get(__response__, 'destination_type'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        task_id=pulumi.get(__response__, 'task_id'),
        task_name=pulumi.get(__response__, 'task_name'),
        tasks=pulumi.get(__response__, 'tasks')))
