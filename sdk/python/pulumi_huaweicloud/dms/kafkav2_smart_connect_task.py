# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Kafkav2SmartConnectTaskArgs', 'Kafkav2SmartConnectTask']

@pulumi.input_type
class Kafkav2SmartConnectTaskArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 task_name: pulumi.Input[_builtins.str],
                 destination_task: Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_task: Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_later: Optional[pulumi.Input[_builtins.bool]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Kafkav2SmartConnectTask resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_name: Specifies the smart connect task name.
               Changing this parameter will create a new resource.
        :param pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs'] destination_task: Specifies the destination configuration of a smart connect task.
               The destination_task structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="dms_source_task"></a>
               The `source_task` block supports:
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs'] source_task: Specifies the source configuration of a smart connect task.
               The source_task structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task. Valid values are
               **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] start_later: Specifies whether to start a task later.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] topics: Specifies the topic names list of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > Exactly one of `topics`, `topics_regex` should be specified.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "task_name", task_name)
        if destination_task is not None:
            pulumi.set(__self__, "destination_task", destination_task)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_task is not None:
            pulumi.set(__self__, "source_task", source_task)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_later is not None:
            pulumi.set(__self__, "start_later", start_later)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_regex is not None:
            pulumi.set(__self__, "topics_regex", topics_regex)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the kafka instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the smart connect task name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="destinationTask")
    def destination_task(self) -> Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']]:
        """
        Specifies the destination configuration of a smart connect task.
        The destination_task structure is documented below.
        Changing this parameter will create a new resource.

        <a name="dms_source_task"></a>
        The `source_task` block supports:
        """
        return pulumi.get(self, "destination_task")

    @destination_task.setter
    def destination_task(self, value: Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']]):
        pulumi.set(self, "destination_task", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination type of the smart connect task.
        Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceTask")
    def source_task(self) -> Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']]:
        """
        Specifies the source configuration of a smart connect task.
        The source_task structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_task")

    @source_task.setter
    def source_task(self, value: Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']]):
        pulumi.set(self, "source_task", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source type of the smart connect task. Valid values are
        **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="startLater")
    def start_later(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start a task later.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_later")

    @start_later.setter
    def start_later(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_later", value)

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the topic names list of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "topics", value)

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

    @topics_regex.setter
    def topics_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics_regex", value)


@pulumi.input_type
class _Kafkav2SmartConnectTaskState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_task: Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_task: Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_later: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Kafkav2SmartConnectTask resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the smart connect task.
        :param pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs'] destination_task: Specifies the destination configuration of a smart connect task.
               The destination_task structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="dms_source_task"></a>
               The `source_task` block supports:
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs'] source_task: Specifies the source configuration of a smart connect task.
               The source_task structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task. Valid values are
               **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] start_later: Specifies whether to start a task later.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the smart connect task.
        :param pulumi.Input[_builtins.str] task_name: Specifies the smart connect task name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] topics: Specifies the topic names list of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > Exactly one of `topics`, `topics_regex` should be specified.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if destination_task is not None:
            pulumi.set(__self__, "destination_task", destination_task)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_task is not None:
            pulumi.set(__self__, "source_task", source_task)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_later is not None:
            pulumi.set(__self__, "start_later", start_later)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_regex is not None:
            pulumi.set(__self__, "topics_regex", topics_regex)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the smart connect task.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="destinationTask")
    def destination_task(self) -> Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']]:
        """
        Specifies the destination configuration of a smart connect task.
        The destination_task structure is documented below.
        Changing this parameter will create a new resource.

        <a name="dms_source_task"></a>
        The `source_task` block supports:
        """
        return pulumi.get(self, "destination_task")

    @destination_task.setter
    def destination_task(self, value: Optional[pulumi.Input['Kafkav2SmartConnectTaskDestinationTaskArgs']]):
        pulumi.set(self, "destination_task", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination type of the smart connect task.
        Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the kafka instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceTask")
    def source_task(self) -> Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']]:
        """
        Specifies the source configuration of a smart connect task.
        The source_task structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_task")

    @source_task.setter
    def source_task(self, value: Optional[pulumi.Input['Kafkav2SmartConnectTaskSourceTaskArgs']]):
        pulumi.set(self, "source_task", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source type of the smart connect task. Valid values are
        **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="startLater")
    def start_later(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start a task later.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_later")

    @start_later.setter
    def start_later(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_later", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the smart connect task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the smart connect task name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the topic names list of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "topics", value)

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

    @topics_regex.setter
    def topics_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics_regex", value)


@pulumi.type_token("huaweicloud:Dms/kafkav2SmartConnectTask:Kafkav2SmartConnectTask")
class Kafkav2SmartConnectTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskDestinationTaskArgs', 'Kafkav2SmartConnectTaskDestinationTaskArgsDict']]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskSourceTaskArgs', 'Kafkav2SmartConnectTaskSourceTaskArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_later: Optional[pulumi.Input[_builtins.bool]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage DMS kafka smart connect task resource within HuaweiCloud.

        ## Example Usage

        ### Create a task to dump Kafka data to OBS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        task_name = config.require_object("taskName")
        topics = config.require_object("topics")
        access_key = config.require_object("accessKey")
        secret_key = config.require_object("secretKey")
        obs_bucket_name = config.require_object("obsBucketName")
        obs_path = config.require_object("obsPath")
        test = huaweicloud.dms.Kafkav2SmartConnectTask("test",
            instance_id=instance_id,
            task_name=task_name,
            topics=topics,
            destination_type="OBS_SINK",
            destination_task={
                "consumer_strategy": "latest",
                "destination_file_type": "TEXT",
                "access_key": access_key,
                "secret_key": secret_key,
                "obs_bucket_name": obs_bucket_name,
                "obs_path": obs_path,
                "partition_format": "yyyy/MM/dd/HH/mm",
                "record_delimiter": "\\n",
                "deliver_time_interval": 300,
            })
        ```

        ### Create a Kafka data replication task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        task_name = config.require_object("taskName")
        peer_instance_id = config.require_object("peerInstanceId")
        test = huaweicloud.dms.Kafkav2SmartConnectTask("test",
            instance_id=instance_id,
            task_name=task_name,
            topics=["topic-test"],
            source_type="KAFKA_REPLICATOR_SOURCE",
            source_task={
                "peer_instance_id": peer_instance_id,
                "direction": "push",
                "replication_factor": 3,
                "task_num": 2,
                "provenance_header_enabled": False,
                "sync_consumer_offsets_enabled": False,
                "rename_topic_enabled": False,
                "consumer_strategy": "latest",
                "compression_type": "none",
                "topics_mappings": ["topic-test:topic-test-mapping"],
            })
        ```

        ## Import

        The kafka smart connect task can be imported using the kafka instance `instance_id` and `task_id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkav2SmartConnectTask:Kafkav2SmartConnectTask test <instance_id>/<task_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `start_later`, `destination_task.0.access_key`,

        `destination_task.0.secret_key` and `source_task.0.password`. It is generally recommended running `pulumi preview`

        after importing a kafka smart connect task. You can then decide if changes should be applied to the kafka smart connect

        task, or the resource definition should be updated to align with the kafka smart connect task. Also you can ignore

        changes as below.

        hcl

        resource "huaweicloud_dms_kafkav2_smart_connect_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              destination_task.0.access_key, destination_task.0.secret_key, source_task.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['Kafkav2SmartConnectTaskDestinationTaskArgs', 'Kafkav2SmartConnectTaskDestinationTaskArgsDict']] destination_task: Specifies the destination configuration of a smart connect task.
               The destination_task structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="dms_source_task"></a>
               The `source_task` block supports:
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['Kafkav2SmartConnectTaskSourceTaskArgs', 'Kafkav2SmartConnectTaskSourceTaskArgsDict']] source_task: Specifies the source configuration of a smart connect task.
               The source_task structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task. Valid values are
               **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] start_later: Specifies whether to start a task later.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_name: Specifies the smart connect task name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] topics: Specifies the topic names list of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > Exactly one of `topics`, `topics_regex` should be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Kafkav2SmartConnectTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka smart connect task resource within HuaweiCloud.

        ## Example Usage

        ### Create a task to dump Kafka data to OBS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        task_name = config.require_object("taskName")
        topics = config.require_object("topics")
        access_key = config.require_object("accessKey")
        secret_key = config.require_object("secretKey")
        obs_bucket_name = config.require_object("obsBucketName")
        obs_path = config.require_object("obsPath")
        test = huaweicloud.dms.Kafkav2SmartConnectTask("test",
            instance_id=instance_id,
            task_name=task_name,
            topics=topics,
            destination_type="OBS_SINK",
            destination_task={
                "consumer_strategy": "latest",
                "destination_file_type": "TEXT",
                "access_key": access_key,
                "secret_key": secret_key,
                "obs_bucket_name": obs_bucket_name,
                "obs_path": obs_path,
                "partition_format": "yyyy/MM/dd/HH/mm",
                "record_delimiter": "\\n",
                "deliver_time_interval": 300,
            })
        ```

        ### Create a Kafka data replication task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        task_name = config.require_object("taskName")
        peer_instance_id = config.require_object("peerInstanceId")
        test = huaweicloud.dms.Kafkav2SmartConnectTask("test",
            instance_id=instance_id,
            task_name=task_name,
            topics=["topic-test"],
            source_type="KAFKA_REPLICATOR_SOURCE",
            source_task={
                "peer_instance_id": peer_instance_id,
                "direction": "push",
                "replication_factor": 3,
                "task_num": 2,
                "provenance_header_enabled": False,
                "sync_consumer_offsets_enabled": False,
                "rename_topic_enabled": False,
                "consumer_strategy": "latest",
                "compression_type": "none",
                "topics_mappings": ["topic-test:topic-test-mapping"],
            })
        ```

        ## Import

        The kafka smart connect task can be imported using the kafka instance `instance_id` and `task_id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkav2SmartConnectTask:Kafkav2SmartConnectTask test <instance_id>/<task_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `start_later`, `destination_task.0.access_key`,

        `destination_task.0.secret_key` and `source_task.0.password`. It is generally recommended running `pulumi preview`

        after importing a kafka smart connect task. You can then decide if changes should be applied to the kafka smart connect

        task, or the resource definition should be updated to align with the kafka smart connect task. Also you can ignore

        changes as below.

        hcl

        resource "huaweicloud_dms_kafkav2_smart_connect_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              destination_task.0.access_key, destination_task.0.secret_key, source_task.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param Kafkav2SmartConnectTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Kafkav2SmartConnectTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskDestinationTaskArgs', 'Kafkav2SmartConnectTaskDestinationTaskArgsDict']]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskSourceTaskArgs', 'Kafkav2SmartConnectTaskSourceTaskArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_later: Optional[pulumi.Input[_builtins.bool]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Kafkav2SmartConnectTaskArgs.__new__(Kafkav2SmartConnectTaskArgs)

            __props__.__dict__["destination_task"] = destination_task
            __props__.__dict__["destination_type"] = destination_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["source_task"] = source_task
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["start_later"] = start_later
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["topics"] = topics
            __props__.__dict__["topics_regex"] = topics_regex
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(Kafkav2SmartConnectTask, __self__).__init__(
            'huaweicloud:Dms/kafkav2SmartConnectTask:Kafkav2SmartConnectTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            destination_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskDestinationTaskArgs', 'Kafkav2SmartConnectTaskDestinationTaskArgsDict']]] = None,
            destination_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_task: Optional[pulumi.Input[Union['Kafkav2SmartConnectTaskSourceTaskArgs', 'Kafkav2SmartConnectTaskSourceTaskArgsDict']]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            start_later: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            topics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            topics_regex: Optional[pulumi.Input[_builtins.str]] = None) -> 'Kafkav2SmartConnectTask':
        """
        Get an existing Kafkav2SmartConnectTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the smart connect task.
        :param pulumi.Input[Union['Kafkav2SmartConnectTaskDestinationTaskArgs', 'Kafkav2SmartConnectTaskDestinationTaskArgsDict']] destination_task: Specifies the destination configuration of a smart connect task.
               The destination_task structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="dms_source_task"></a>
               The `source_task` block supports:
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['Kafkav2SmartConnectTaskSourceTaskArgs', 'Kafkav2SmartConnectTaskSourceTaskArgsDict']] source_task: Specifies the source configuration of a smart connect task.
               The source_task structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task. Valid values are
               **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] start_later: Specifies whether to start a task later.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the smart connect task.
        :param pulumi.Input[_builtins.str] task_name: Specifies the smart connect task name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] topics: Specifies the topic names list of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > Exactly one of `topics`, `topics_regex` should be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Kafkav2SmartConnectTaskState.__new__(_Kafkav2SmartConnectTaskState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["destination_task"] = destination_task
        __props__.__dict__["destination_type"] = destination_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["source_task"] = source_task
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["start_later"] = start_later
        __props__.__dict__["status"] = status
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["topics"] = topics
        __props__.__dict__["topics_regex"] = topics_regex
        return Kafkav2SmartConnectTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time of the smart connect task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationTask")
    def destination_task(self) -> pulumi.Output[Optional['outputs.Kafkav2SmartConnectTaskDestinationTask']]:
        """
        Specifies the destination configuration of a smart connect task.
        The destination_task structure is documented below.
        Changing this parameter will create a new resource.

        <a name="dms_source_task"></a>
        The `source_task` block supports:
        """
        return pulumi.get(self, "destination_task")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the destination type of the smart connect task.
        Valid values are **OBS_SINK** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the kafka instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceTask")
    def source_task(self) -> pulumi.Output[Optional['outputs.Kafkav2SmartConnectTaskSourceTask']]:
        """
        Specifies the source configuration of a smart connect task.
        The source_task structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_task")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the source type of the smart connect task. Valid values are
        **KAFKA_REPLICATOR_SOURCE** and **NONE**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="startLater")
    def start_later(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to start a task later.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_later")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the smart connect task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the smart connect task name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter
    def topics(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the topic names list of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

