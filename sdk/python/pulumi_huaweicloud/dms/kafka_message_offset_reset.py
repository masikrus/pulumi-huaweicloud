# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KafkaMessageOffsetResetArgs', 'KafkaMessageOffsetReset']

@pulumi.input_type
class KafkaMessageOffsetResetArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 partition: pulumi.Input[_builtins.int],
                 message_offset: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KafkaMessageOffsetReset resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] partition: Specifies the partiton number.
               + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
               + If value is specific number, reset that partiton only.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] message_offset: Specifies the message offset.
               + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
               + If this offset is later than the current largest offset, the offset will be reset to the latest offset.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] timestamp: Specifies the time that the offset is to be reset to.
               The value is a Unix timestamp, in millisecond.
               + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
               + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.
               
               Changing this creates a new resource.
               
               > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
               with `timestamp`.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name. If it is empty, reset all topic.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "partition", partition)
        if message_offset is not None:
            pulumi.set(__self__, "message_offset", message_offset)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def partition(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the partiton number.
        + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
        + If value is specific number, reset that partiton only.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "partition", value)

    @_builtins.property
    @pulumi.getter(name="messageOffset")
    def message_offset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message offset.
        + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
        + If this offset is later than the current largest offset, the offset will be reset to the latest offset.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_offset")

    @message_offset.setter
    def message_offset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_offset", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time that the offset is to be reset to.
        The value is a Unix timestamp, in millisecond.
        + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
        + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.

        Changing this creates a new resource.

        > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
        with `timestamp`.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timestamp", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name. If it is empty, reset all topic.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.input_type
class _KafkaMessageOffsetResetState:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_offset: Optional[pulumi.Input[_builtins.str]] = None,
                 partition: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KafkaMessageOffsetReset resources.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] message_offset: Specifies the message offset.
               + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
               + If this offset is later than the current largest offset, the offset will be reset to the latest offset.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] partition: Specifies the partiton number.
               + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
               + If value is specific number, reset that partiton only.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] timestamp: Specifies the time that the offset is to be reset to.
               The value is a Unix timestamp, in millisecond.
               + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
               + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.
               
               Changing this creates a new resource.
               
               > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
               with `timestamp`.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name. If it is empty, reset all topic.
               Changing this creates a new resource.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if message_offset is not None:
            pulumi.set(__self__, "message_offset", message_offset)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="messageOffset")
    def message_offset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message offset.
        + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
        + If this offset is later than the current largest offset, the offset will be reset to the latest offset.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_offset")

    @message_offset.setter
    def message_offset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_offset", value)

    @_builtins.property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the partiton number.
        + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
        + If value is specific number, reset that partiton only.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "partition", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time that the offset is to be reset to.
        The value is a Unix timestamp, in millisecond.
        + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
        + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.

        Changing this creates a new resource.

        > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
        with `timestamp`.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timestamp", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name. If it is empty, reset all topic.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.type_token("huaweicloud:Dms/kafkaMessageOffsetReset:KafkaMessageOffsetReset")
class KafkaMessageOffsetReset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_offset: Optional[pulumi.Input[_builtins.str]] = None,
                 partition: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage DMS kafka message offset reset resource within HuaweiCloud.

        ## Example Usage

        ### Reset message offset for all topic with timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic="",
            partition=-1,
            timestamp="0")
        ```

        ### Reset message offset for all partition under specific topic with timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            partition=-1,
            timestamp="0")
        ```

        ### Reset message offset for all partition under specific topic with message offset

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            partition=-1,
            message_offset="0")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] message_offset: Specifies the message offset.
               + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
               + If this offset is later than the current largest offset, the offset will be reset to the latest offset.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] partition: Specifies the partiton number.
               + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
               + If value is specific number, reset that partiton only.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] timestamp: Specifies the time that the offset is to be reset to.
               The value is a Unix timestamp, in millisecond.
               + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
               + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.
               
               Changing this creates a new resource.
               
               > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
               with `timestamp`.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name. If it is empty, reset all topic.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaMessageOffsetResetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka message offset reset resource within HuaweiCloud.

        ## Example Usage

        ### Reset message offset for all topic with timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic="",
            partition=-1,
            timestamp="0")
        ```

        ### Reset message offset for all partition under specific topic with timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            partition=-1,
            timestamp="0")
        ```

        ### Reset message offset for all partition under specific topic with message offset

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        test = huaweicloud.dms.KafkaMessageOffsetReset("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            partition=-1,
            message_offset="0")
        ```

        :param str resource_name: The name of the resource.
        :param KafkaMessageOffsetResetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaMessageOffsetResetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_offset: Optional[pulumi.Input[_builtins.str]] = None,
                 partition: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaMessageOffsetResetArgs.__new__(KafkaMessageOffsetResetArgs)

            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["message_offset"] = message_offset
            if partition is None and not opts.urn:
                raise TypeError("Missing required property 'partition'")
            __props__.__dict__["partition"] = partition
            __props__.__dict__["region"] = region
            __props__.__dict__["timestamp"] = timestamp
            __props__.__dict__["topic"] = topic
        super(KafkaMessageOffsetReset, __self__).__init__(
            'huaweicloud:Dms/kafkaMessageOffsetReset:KafkaMessageOffsetReset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            message_offset: Optional[pulumi.Input[_builtins.str]] = None,
            partition: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None) -> 'KafkaMessageOffsetReset':
        """
        Get an existing KafkaMessageOffsetReset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] message_offset: Specifies the message offset.
               + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
               + If this offset is later than the current largest offset, the offset will be reset to the latest offset.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] partition: Specifies the partiton number.
               + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
               + If value is specific number, reset that partiton only.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] timestamp: Specifies the time that the offset is to be reset to.
               The value is a Unix timestamp, in millisecond.
               + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
               + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.
               
               Changing this creates a new resource.
               
               > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
               with `timestamp`.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name. If it is empty, reset all topic.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaMessageOffsetResetState.__new__(_KafkaMessageOffsetResetState)

        __props__.__dict__["group"] = group
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["message_offset"] = message_offset
        __props__.__dict__["partition"] = partition
        __props__.__dict__["region"] = region
        __props__.__dict__["timestamp"] = timestamp
        __props__.__dict__["topic"] = topic
        return KafkaMessageOffsetReset(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="messageOffset")
    def message_offset(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the message offset.
        + If this offset is earlier than the current earliest offset, the offset will be reset to the earliest offset.
        + If this offset is later than the current largest offset, the offset will be reset to the latest offset.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_offset")

    @_builtins.property
    @pulumi.getter
    def partition(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the partiton number.
        + If value is **-1**, reset all partitions. When `topic` is empty, only support reset all partitions.
        + If value is specific number, reset that partiton only.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "partition")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the time that the offset is to be reset to.
        The value is a Unix timestamp, in millisecond.
        + If this time is earlier than the current earliest timestamp, the offset will be reset to the earliest timestamp.
        + If this time is later than the current largest timestamp, the offset will be reset to the latest timestamp.

        Changing this creates a new resource.

        > Exactly one of `message_offset` and `timestamp` should be specified, when `topic` is empty, only support to reset
        with `timestamp`.
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the topic name. If it is empty, reset all topic.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

