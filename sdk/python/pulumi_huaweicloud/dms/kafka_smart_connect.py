# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KafkaSmartConnectArgs', 'KafkaSmartConnect']

@pulumi.input_type
class KafkaSmartConnectArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
                 node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KafkaSmartConnect resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] bandwidth: Specifies the bandwidth of the connector.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] node_count: Specifies the node count of the connector. Defaults to 2 and minimum is 2.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_spec_code: Specifies the storage specification code of the connector.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_spec_code is not None:
            pulumi.set(__self__, "storage_spec_code", storage_spec_code)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bandwidth of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the node count of the connector. Defaults to 2 and minimum is 2.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the storage specification code of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_spec_code")

    @storage_spec_code.setter
    def storage_spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_spec_code", value)


@pulumi.input_type
class _KafkaSmartConnectState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KafkaSmartConnect resources.
        :param pulumi.Input[_builtins.str] bandwidth: Specifies the bandwidth of the connector.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] node_count: Specifies the node count of the connector. Defaults to 2 and minimum is 2.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_spec_code: Specifies the storage specification code of the connector.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_spec_code is not None:
            pulumi.set(__self__, "storage_spec_code", storage_spec_code)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bandwidth of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the node count of the connector. Defaults to 2 and minimum is 2.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the storage specification code of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_spec_code")

    @storage_spec_code.setter
    def storage_spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_spec_code", value)


@pulumi.type_token("huaweicloud:Dms/kafkaSmartConnect:KafkaSmartConnect")
class KafkaSmartConnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage DMS kafka smart connect resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dms.KafkaSmartConnect("test",
            instance_id=instance_id,
            storage_spec_code="dms.physical.storage.ultra.v2",
            bandwidth="100MB",
            node_count=2)
        ```

        ## Import

        The kafka smart connect can be imported using the kafka `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaSmartConnect:KafkaSmartConnect test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bandwidth: Specifies the bandwidth of the connector.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] node_count: Specifies the node count of the connector. Defaults to 2 and minimum is 2.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_spec_code: Specifies the storage specification code of the connector.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaSmartConnectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka smart connect resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dms.KafkaSmartConnect("test",
            instance_id=instance_id,
            storage_spec_code="dms.physical.storage.ultra.v2",
            bandwidth="100MB",
            node_count=2)
        ```

        ## Import

        The kafka smart connect can be imported using the kafka `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaSmartConnect:KafkaSmartConnect test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param KafkaSmartConnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaSmartConnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaSmartConnectArgs.__new__(KafkaSmartConnectArgs)

            __props__.__dict__["bandwidth"] = bandwidth
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["region"] = region
            __props__.__dict__["storage_spec_code"] = storage_spec_code
        super(KafkaSmartConnect, __self__).__init__(
            'huaweicloud:Dms/kafkaSmartConnect:KafkaSmartConnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            node_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None) -> 'KafkaSmartConnect':
        """
        Get an existing KafkaSmartConnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bandwidth: Specifies the bandwidth of the connector.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] node_count: Specifies the node count of the connector. Defaults to 2 and minimum is 2.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_spec_code: Specifies the storage specification code of the connector.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaSmartConnectState.__new__(_KafkaSmartConnectState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["region"] = region
        __props__.__dict__["storage_spec_code"] = storage_spec_code
        return KafkaSmartConnect(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the bandwidth of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the node count of the connector. Defaults to 2 and minimum is 2.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the storage specification code of the connector.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_spec_code")

