# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KafkaUserClientQuotaArgs', 'KafkaUserClientQuota']

@pulumi.input_type
class KafkaUserClientQuotaArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 client: Optional[pulumi.Input[_builtins.str]] = None,
                 client_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 consumer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 producer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_default: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a KafkaUserClientQuota resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] client: Specifies the ID of the client to which the quota applies.
               It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] client_default: Specifies the client default configuration of the quota.
               If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
               `client` is not empty. Changing this parameter will create a new resource.
               
               > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        :param pulumi.Input[_builtins.int] consumer_byte_rate: Specifies an upper limit on the consumption rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
               
               > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        :param pulumi.Input[_builtins.int] producer_byte_rate: Specifies an upper limit on the prodction rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user: Specifies the user name to apply the quota. It must be empty
               if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] user_default: Specifies the user default configuration of the quota.
               If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
               is not empty. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if client is not None:
            pulumi.set(__self__, "client", client)
        if client_default is not None:
            pulumi.set(__self__, "client_default", client_default)
        if consumer_byte_rate is not None:
            pulumi.set(__self__, "consumer_byte_rate", consumer_byte_rate)
        if producer_byte_rate is not None:
            pulumi.set(__self__, "producer_byte_rate", producer_byte_rate)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_default is not None:
            pulumi.set(__self__, "user_default", user_default)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def client(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the client to which the quota applies.
        It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client", value)

    @_builtins.property
    @pulumi.getter(name="clientDefault")
    def client_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the client default configuration of the quota.
        If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
        `client` is not empty. Changing this parameter will create a new resource.

        > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        """
        return pulumi.get(self, "client_default")

    @client_default.setter
    def client_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_default", value)

    @_builtins.property
    @pulumi.getter(name="consumerByteRate")
    def consumer_byte_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies an upper limit on the consumption rate. The unit is B/s.
        If this parameter is left blank, no limit is set.

        > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        """
        return pulumi.get(self, "consumer_byte_rate")

    @consumer_byte_rate.setter
    def consumer_byte_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "consumer_byte_rate", value)

    @_builtins.property
    @pulumi.getter(name="producerByteRate")
    def producer_byte_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies an upper limit on the prodction rate. The unit is B/s.
        If this parameter is left blank, no limit is set.
        """
        return pulumi.get(self, "producer_byte_rate")

    @producer_byte_rate.setter
    def producer_byte_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "producer_byte_rate", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name to apply the quota. It must be empty
        if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="userDefault")
    def user_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the user default configuration of the quota.
        If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
        is not empty. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_default")

    @user_default.setter
    def user_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_default", value)


@pulumi.input_type
class _KafkaUserClientQuotaState:
    def __init__(__self__, *,
                 client: Optional[pulumi.Input[_builtins.str]] = None,
                 client_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 consumer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 producer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_default: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering KafkaUserClientQuota resources.
        :param pulumi.Input[_builtins.str] client: Specifies the ID of the client to which the quota applies.
               It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] client_default: Specifies the client default configuration of the quota.
               If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
               `client` is not empty. Changing this parameter will create a new resource.
               
               > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        :param pulumi.Input[_builtins.int] consumer_byte_rate: Specifies an upper limit on the consumption rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
               
               > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] producer_byte_rate: Specifies an upper limit on the prodction rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user: Specifies the user name to apply the quota. It must be empty
               if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] user_default: Specifies the user default configuration of the quota.
               If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
               is not empty. Changing this parameter will create a new resource.
        """
        if client is not None:
            pulumi.set(__self__, "client", client)
        if client_default is not None:
            pulumi.set(__self__, "client_default", client_default)
        if consumer_byte_rate is not None:
            pulumi.set(__self__, "consumer_byte_rate", consumer_byte_rate)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if producer_byte_rate is not None:
            pulumi.set(__self__, "producer_byte_rate", producer_byte_rate)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_default is not None:
            pulumi.set(__self__, "user_default", user_default)

    @_builtins.property
    @pulumi.getter
    def client(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the client to which the quota applies.
        It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client", value)

    @_builtins.property
    @pulumi.getter(name="clientDefault")
    def client_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the client default configuration of the quota.
        If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
        `client` is not empty. Changing this parameter will create a new resource.

        > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        """
        return pulumi.get(self, "client_default")

    @client_default.setter
    def client_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_default", value)

    @_builtins.property
    @pulumi.getter(name="consumerByteRate")
    def consumer_byte_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies an upper limit on the consumption rate. The unit is B/s.
        If this parameter is left blank, no limit is set.

        > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        """
        return pulumi.get(self, "consumer_byte_rate")

    @consumer_byte_rate.setter
    def consumer_byte_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "consumer_byte_rate", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="producerByteRate")
    def producer_byte_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies an upper limit on the prodction rate. The unit is B/s.
        If this parameter is left blank, no limit is set.
        """
        return pulumi.get(self, "producer_byte_rate")

    @producer_byte_rate.setter
    def producer_byte_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "producer_byte_rate", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name to apply the quota. It must be empty
        if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="userDefault")
    def user_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the user default configuration of the quota.
        If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
        is not empty. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_default")

    @user_default.setter
    def user_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_default", value)


@pulumi.type_token("huaweicloud:Dms/kafkaUserClientQuota:KafkaUserClientQuota")
class KafkaUserClientQuota(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client: Optional[pulumi.Input[_builtins.str]] = None,
                 client_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 consumer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 producer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manage DMS kafka user client quota resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dms.KafkaUserClientQuota("test",
            instance_id=instance_id,
            user="test_user",
            client="consumer_group",
            producer_byte_rate=2048,
            consumer_byte_rate=1024)
        ```

        ## Import

        The kafka user client quota can be imported using the kafka `instance_id`, `user`, `user_default`, `client` and `client_default`

        separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaUserClientQuota:KafkaUserClientQuota test <instance_id>/<user>/<user_default>/<client>/<client_default>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client: Specifies the ID of the client to which the quota applies.
               It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] client_default: Specifies the client default configuration of the quota.
               If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
               `client` is not empty. Changing this parameter will create a new resource.
               
               > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        :param pulumi.Input[_builtins.int] consumer_byte_rate: Specifies an upper limit on the consumption rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
               
               > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] producer_byte_rate: Specifies an upper limit on the prodction rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user: Specifies the user name to apply the quota. It must be empty
               if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] user_default: Specifies the user default configuration of the quota.
               If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
               is not empty. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaUserClientQuotaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka user client quota resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dms.KafkaUserClientQuota("test",
            instance_id=instance_id,
            user="test_user",
            client="consumer_group",
            producer_byte_rate=2048,
            consumer_byte_rate=1024)
        ```

        ## Import

        The kafka user client quota can be imported using the kafka `instance_id`, `user`, `user_default`, `client` and `client_default`

        separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaUserClientQuota:KafkaUserClientQuota test <instance_id>/<user>/<user_default>/<client>/<client_default>
        ```

        :param str resource_name: The name of the resource.
        :param KafkaUserClientQuotaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaUserClientQuotaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client: Optional[pulumi.Input[_builtins.str]] = None,
                 client_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 consumer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 producer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaUserClientQuotaArgs.__new__(KafkaUserClientQuotaArgs)

            __props__.__dict__["client"] = client
            __props__.__dict__["client_default"] = client_default
            __props__.__dict__["consumer_byte_rate"] = consumer_byte_rate
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["producer_byte_rate"] = producer_byte_rate
            __props__.__dict__["region"] = region
            __props__.__dict__["user"] = user
            __props__.__dict__["user_default"] = user_default
        super(KafkaUserClientQuota, __self__).__init__(
            'huaweicloud:Dms/kafkaUserClientQuota:KafkaUserClientQuota',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client: Optional[pulumi.Input[_builtins.str]] = None,
            client_default: Optional[pulumi.Input[_builtins.bool]] = None,
            consumer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            producer_byte_rate: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            user: Optional[pulumi.Input[_builtins.str]] = None,
            user_default: Optional[pulumi.Input[_builtins.bool]] = None) -> 'KafkaUserClientQuota':
        """
        Get an existing KafkaUserClientQuota resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client: Specifies the ID of the client to which the quota applies.
               It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] client_default: Specifies the client default configuration of the quota.
               If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
               `client` is not empty. Changing this parameter will create a new resource.
               
               > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        :param pulumi.Input[_builtins.int] consumer_byte_rate: Specifies an upper limit on the consumption rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
               
               > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] producer_byte_rate: Specifies an upper limit on the prodction rate. The unit is B/s.
               If this parameter is left blank, no limit is set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user: Specifies the user name to apply the quota. It must be empty
               if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] user_default: Specifies the user default configuration of the quota.
               If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
               is not empty. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaUserClientQuotaState.__new__(_KafkaUserClientQuotaState)

        __props__.__dict__["client"] = client
        __props__.__dict__["client_default"] = client_default
        __props__.__dict__["consumer_byte_rate"] = consumer_byte_rate
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["producer_byte_rate"] = producer_byte_rate
        __props__.__dict__["region"] = region
        __props__.__dict__["user"] = user
        __props__.__dict__["user_default"] = user_default
        return KafkaUserClientQuota(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def client(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the client to which the quota applies.
        It must be empty if the value of `client_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "client")

    @_builtins.property
    @pulumi.getter(name="clientDefault")
    def client_default(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the client default configuration of the quota.
        If `client_default` is **true**, the quota applies to all clients. It can not be **true** if the value of
        `client` is not empty. Changing this parameter will create a new resource.

        > **NOTE:** At least one of `user`, `user_default`, `client` and `client_default` must be specified.
        """
        return pulumi.get(self, "client_default")

    @_builtins.property
    @pulumi.getter(name="consumerByteRate")
    def consumer_byte_rate(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies an upper limit on the consumption rate. The unit is B/s.
        If this parameter is left blank, no limit is set.

        > **NOTE:** At least one of `producer_byte_rate` and `consumer_byte_rate` must be specified.
        """
        return pulumi.get(self, "consumer_byte_rate")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="producerByteRate")
    def producer_byte_rate(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies an upper limit on the prodction rate. The unit is B/s.
        If this parameter is left blank, no limit is set.
        """
        return pulumi.get(self, "producer_byte_rate")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the user name to apply the quota. It must be empty
        if the value of `user_default` is **true**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userDefault")
    def user_default(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the user default configuration of the quota.
        If `user_default` is **true**, the quota applies to all users. It can not be **true** if the value of `user`
        is not empty. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_default")

