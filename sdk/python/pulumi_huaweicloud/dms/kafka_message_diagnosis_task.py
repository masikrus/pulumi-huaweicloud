# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KafkaMessageDiagnosisTaskArgs', 'KafkaMessageDiagnosisTask']

@pulumi.input_type
class KafkaMessageDiagnosisTaskArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 topic_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KafkaMessageDiagnosisTask resource.
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic_name: Specifies the topic name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "topic_name", topic_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _KafkaMessageDiagnosisTaskState:
    def __init__(__self__, *,
                 accumulated_partitions: Optional[pulumi.Input[_builtins.int]] = None,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 diagnosis_dimension_lists: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs']]]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KafkaMessageDiagnosisTask resources.
        :param pulumi.Input[_builtins.int] accumulated_partitions: Indicates the number of partitions where accumulated messages are found.
        :param pulumi.Input[_builtins.str] begin_time: Indicates the diagnosis task start time.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs']]] diagnosis_dimension_lists: Indicates the diagnosis dimensions.
               The diagnosis_dimension_list structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: Indicates the diagnosis task end time.
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of a message stack diagnosis task.
               Value can be as follows:
               + **diagnosing**
               + **failed**
               + **finished**
        :param pulumi.Input[_builtins.str] topic_name: Specifies the topic name.
               Changing this creates a new resource.
        """
        if accumulated_partitions is not None:
            pulumi.set(__self__, "accumulated_partitions", accumulated_partitions)
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if diagnosis_dimension_lists is not None:
            pulumi.set(__self__, "diagnosis_dimension_lists", diagnosis_dimension_lists)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @_builtins.property
    @pulumi.getter(name="accumulatedPartitions")
    def accumulated_partitions(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of partitions where accumulated messages are found.
        """
        return pulumi.get(self, "accumulated_partitions")

    @accumulated_partitions.setter
    def accumulated_partitions(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accumulated_partitions", value)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the diagnosis task start time.
        """
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "begin_time", value)

    @_builtins.property
    @pulumi.getter(name="diagnosisDimensionLists")
    def diagnosis_dimension_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs']]]]:
        """
        Indicates the diagnosis dimensions.
        The diagnosis_dimension_list structure is documented below.
        """
        return pulumi.get(self, "diagnosis_dimension_lists")

    @diagnosis_dimension_lists.setter
    def diagnosis_dimension_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs']]]]):
        pulumi.set(self, "diagnosis_dimension_lists", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the diagnosis task end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of a message stack diagnosis task.
        Value can be as follows:
        + **diagnosing**
        + **failed**
        + **finished**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.type_token("huaweicloud:Dms/kafkaMessageDiagnosisTask:KafkaMessageDiagnosisTask")
class KafkaMessageDiagnosisTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage DMS kafka message diagnosis task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group_name = config.require_object("groupName")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaMessageDiagnosisTask("test",
            instance_id=instance_id,
            group_name=group_name,
            topic_name=topic_name)
        ```

        ## Import

        The kafka smart message diagnosis task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaMessageDiagnosisTask:KafkaMessageDiagnosisTask test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic_name: Specifies the topic name.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaMessageDiagnosisTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka message diagnosis task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group_name = config.require_object("groupName")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaMessageDiagnosisTask("test",
            instance_id=instance_id,
            group_name=group_name,
            topic_name=topic_name)
        ```

        ## Import

        The kafka smart message diagnosis task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaMessageDiagnosisTask:KafkaMessageDiagnosisTask test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param KafkaMessageDiagnosisTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaMessageDiagnosisTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaMessageDiagnosisTaskArgs.__new__(KafkaMessageDiagnosisTaskArgs)

            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["accumulated_partitions"] = None
            __props__.__dict__["begin_time"] = None
            __props__.__dict__["diagnosis_dimension_lists"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["status"] = None
        super(KafkaMessageDiagnosisTask, __self__).__init__(
            'huaweicloud:Dms/kafkaMessageDiagnosisTask:KafkaMessageDiagnosisTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accumulated_partitions: Optional[pulumi.Input[_builtins.int]] = None,
            begin_time: Optional[pulumi.Input[_builtins.str]] = None,
            diagnosis_dimension_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs', 'KafkaMessageDiagnosisTaskDiagnosisDimensionListArgsDict']]]]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            group_name: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            topic_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'KafkaMessageDiagnosisTask':
        """
        Get an existing KafkaMessageDiagnosisTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] accumulated_partitions: Indicates the number of partitions where accumulated messages are found.
        :param pulumi.Input[_builtins.str] begin_time: Indicates the diagnosis task start time.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageDiagnosisTaskDiagnosisDimensionListArgs', 'KafkaMessageDiagnosisTaskDiagnosisDimensionListArgsDict']]]] diagnosis_dimension_lists: Indicates the diagnosis dimensions.
               The diagnosis_dimension_list structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: Indicates the diagnosis task end time.
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the kafka instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of a message stack diagnosis task.
               Value can be as follows:
               + **diagnosing**
               + **failed**
               + **finished**
        :param pulumi.Input[_builtins.str] topic_name: Specifies the topic name.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaMessageDiagnosisTaskState.__new__(_KafkaMessageDiagnosisTaskState)

        __props__.__dict__["accumulated_partitions"] = accumulated_partitions
        __props__.__dict__["begin_time"] = begin_time
        __props__.__dict__["diagnosis_dimension_lists"] = diagnosis_dimension_lists
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["topic_name"] = topic_name
        return KafkaMessageDiagnosisTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accumulatedPartitions")
    def accumulated_partitions(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of partitions where accumulated messages are found.
        """
        return pulumi.get(self, "accumulated_partitions")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the diagnosis task start time.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="diagnosisDimensionLists")
    def diagnosis_dimension_lists(self) -> pulumi.Output[Sequence['outputs.KafkaMessageDiagnosisTaskDiagnosisDimensionList']]:
        """
        Indicates the diagnosis dimensions.
        The diagnosis_dimension_list structure is documented below.
        """
        return pulumi.get(self, "diagnosis_dimension_lists")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the diagnosis task end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the kafka instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of a message stack diagnosis task.
        Value can be as follows:
        + **diagnosing**
        + **failed**
        + **finished**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_name")

