# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRocketmqDeadLetterMessagesResult',
    'AwaitableGetRocketmqDeadLetterMessagesResult',
    'get_rocketmq_dead_letter_messages',
    'get_rocketmq_dead_letter_messages_output',
]

@pulumi.output_type
class GetRocketmqDeadLetterMessagesResult:
    """
    A collection of values returned by getRocketmqDeadLetterMessages.
    """
    def __init__(__self__, id=None, instance_id=None, messages=None, msg_id_lists=None, region=None, topic=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if msg_id_lists and not isinstance(msg_id_lists, list):
            raise TypeError("Expected argument 'msg_id_lists' to be a list")
        pulumi.set(__self__, "msg_id_lists", msg_id_lists)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if topic and not isinstance(topic, str):
            raise TypeError("Expected argument 'topic' to be a str")
        pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.GetRocketmqDeadLetterMessagesMessageResult']:
        """
        All dead letter messages that match the filter parameters.  
        The messages structure is documented below.
        """
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter(name="msgIdLists")
    def msg_id_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "msg_id_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        """
        The name of the topic to which the dead letter message belongs.
        """
        return pulumi.get(self, "topic")


class AwaitableGetRocketmqDeadLetterMessagesResult(GetRocketmqDeadLetterMessagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRocketmqDeadLetterMessagesResult(
            id=self.id,
            instance_id=self.instance_id,
            messages=self.messages,
            msg_id_lists=self.msg_id_lists,
            region=self.region,
            topic=self.topic)


def get_rocketmq_dead_letter_messages(instance_id: Optional[_builtins.str] = None,
                                      msg_id_lists: Optional[Sequence[_builtins.str]] = None,
                                      region: Optional[_builtins.str] = None,
                                      topic: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRocketmqDeadLetterMessagesResult:
    """
    Use this data source to get the list of RocketMQ dead letter messages within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic_name = config.require_object("topicName")
    msg_id_list = config.require_object("msgIdList")
    test = huaweicloud.Dms.get_rocketmq_dead_letter_messages(instance_id=instance_id,
        topic=topic_name,
        msg_id_lists=msg_id_list)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RocketMQ instance.
    :param Sequence[_builtins.str] msg_id_lists: Specifies the list of dead letter message IDs.
    :param _builtins.str region: Specifies the region where the dead letter messages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str topic: Specifies the name of the topic to which the dead letter messages belong.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['msgIdLists'] = msg_id_lists
    __args__['region'] = region
    __args__['topic'] = topic
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getRocketmqDeadLetterMessages:getRocketmqDeadLetterMessages', __args__, opts=opts, typ=GetRocketmqDeadLetterMessagesResult).value

    return AwaitableGetRocketmqDeadLetterMessagesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        messages=pulumi.get(__ret__, 'messages'),
        msg_id_lists=pulumi.get(__ret__, 'msg_id_lists'),
        region=pulumi.get(__ret__, 'region'),
        topic=pulumi.get(__ret__, 'topic'))
def get_rocketmq_dead_letter_messages_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             msg_id_lists: Optional[pulumi.Input[Sequence[_builtins.str]]] = None,
                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             topic: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRocketmqDeadLetterMessagesResult]:
    """
    Use this data source to get the list of RocketMQ dead letter messages within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic_name = config.require_object("topicName")
    msg_id_list = config.require_object("msgIdList")
    test = huaweicloud.Dms.get_rocketmq_dead_letter_messages(instance_id=instance_id,
        topic=topic_name,
        msg_id_lists=msg_id_list)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RocketMQ instance.
    :param Sequence[_builtins.str] msg_id_lists: Specifies the list of dead letter message IDs.
    :param _builtins.str region: Specifies the region where the dead letter messages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str topic: Specifies the name of the topic to which the dead letter messages belong.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['msgIdLists'] = msg_id_lists
    __args__['region'] = region
    __args__['topic'] = topic
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getRocketmqDeadLetterMessages:getRocketmqDeadLetterMessages', __args__, opts=opts, typ=GetRocketmqDeadLetterMessagesResult)
    return __ret__.apply(lambda __response__: GetRocketmqDeadLetterMessagesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        messages=pulumi.get(__response__, 'messages'),
        msg_id_lists=pulumi.get(__response__, 'msg_id_lists'),
        region=pulumi.get(__response__, 'region'),
        topic=pulumi.get(__response__, 'topic')))
