# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RabbitmqUserArgs', 'RabbitmqUser']

@pulumi.input_type
class RabbitmqUserArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 secret_key: pulumi.Input[_builtins.str],
                 vhosts: pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RabbitmqUser resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the user name. It starts with a letter, consists of 7 to 64
               characters, and contains only letters, digits, hyphens (-), and underscores (_).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the user password. It consists of 8 to 32 characters.
               Contain at least three of the following character types:
               + Uppercase letters
               + Lowercase letters
               + Digits
               + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?
               
               It cannot be the user name or the user name spelled backwards.
        :param pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]] vhosts: Specifies the virtual hosts to be granted permissions for.
               The vhosts structure is documented below.
               
               <a name="block--vhosts"></a>
               The `vhosts` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "vhosts", vhosts)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user name. It starts with a letter, consists of 7 to 64
        characters, and contains only letters, digits, hyphens (-), and underscores (_).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user password. It consists of 8 to 32 characters.
        Contain at least three of the following character types:
        + Uppercase letters
        + Lowercase letters
        + Digits
        + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?

        It cannot be the user name or the user name spelled backwards.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]]:
        """
        Specifies the virtual hosts to be granted permissions for.
        The vhosts structure is documented below.

        <a name="block--vhosts"></a>
        The `vhosts` block supports:
        """
        return pulumi.get(self, "vhosts")

    @vhosts.setter
    def vhosts(self, value: pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]]):
        pulumi.set(self, "vhosts", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RabbitmqUserState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]]] = None):
        """
        Input properties used for looking up and filtering RabbitmqUser resources.
        :param pulumi.Input[_builtins.str] access_key: Specifies the user name. It starts with a letter, consists of 7 to 64
               characters, and contains only letters, digits, hyphens (-), and underscores (_).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the user password. It consists of 8 to 32 characters.
               Contain at least three of the following character types:
               + Uppercase letters
               + Lowercase letters
               + Digits
               + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?
               
               It cannot be the user name or the user name spelled backwards.
        :param pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]] vhosts: Specifies the virtual hosts to be granted permissions for.
               The vhosts structure is documented below.
               
               <a name="block--vhosts"></a>
               The `vhosts` block supports:
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if vhosts is not None:
            pulumi.set(__self__, "vhosts", vhosts)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name. It starts with a letter, consists of 7 to 64
        characters, and contains only letters, digits, hyphens (-), and underscores (_).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user password. It consists of 8 to 32 characters.
        Contain at least three of the following character types:
        + Uppercase letters
        + Lowercase letters
        + Digits
        + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?

        It cannot be the user name or the user name spelled backwards.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]]]:
        """
        Specifies the virtual hosts to be granted permissions for.
        The vhosts structure is documented below.

        <a name="block--vhosts"></a>
        The `vhosts` block supports:
        """
        return pulumi.get(self, "vhosts")

    @vhosts.setter
    def vhosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RabbitmqUserVhostArgs']]]]):
        pulumi.set(self, "vhosts", value)


@pulumi.type_token("huaweicloud:Dms/rabbitmqUser:RabbitmqUser")
class RabbitmqUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqUserVhostArgs', 'RabbitmqUserVhostArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a DMS RabbitMQ user resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        user_name = config.require_object("userName")
        test = huaweicloud.dms.RabbitmqUser("test",
            instance_id=instance_id,
            access_key=user_name,
            secret_key="Terraform@123",
            vhosts=[{
                "vhost": "default",
                "conf": ".*",
                "write": ".*",
                "read": ".*",
            }])
        ```

        ## Import

        The RabbitMQ user can be imported using `instance_id` and `access_key` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqUser:RabbitmqUser test <instance_id>/<access_key>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the user name. It starts with a letter, consists of 7 to 64
               characters, and contains only letters, digits, hyphens (-), and underscores (_).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the user password. It consists of 8 to 32 characters.
               Contain at least three of the following character types:
               + Uppercase letters
               + Lowercase letters
               + Digits
               + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?
               
               It cannot be the user name or the user name spelled backwards.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqUserVhostArgs', 'RabbitmqUserVhostArgsDict']]]] vhosts: Specifies the virtual hosts to be granted permissions for.
               The vhosts structure is documented below.
               
               <a name="block--vhosts"></a>
               The `vhosts` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RabbitMQ user resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        user_name = config.require_object("userName")
        test = huaweicloud.dms.RabbitmqUser("test",
            instance_id=instance_id,
            access_key=user_name,
            secret_key="Terraform@123",
            vhosts=[{
                "vhost": "default",
                "conf": ".*",
                "write": ".*",
                "read": ".*",
            }])
        ```

        ## Import

        The RabbitMQ user can be imported using `instance_id` and `access_key` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqUser:RabbitmqUser test <instance_id>/<access_key>
        ```

        :param str resource_name: The name of the resource.
        :param RabbitmqUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqUserVhostArgs', 'RabbitmqUserVhostArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqUserArgs.__new__(RabbitmqUserArgs)

            if access_key is None and not opts.urn:
                raise TypeError("Missing required property 'access_key'")
            __props__.__dict__["access_key"] = access_key
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if secret_key is None and not opts.urn:
                raise TypeError("Missing required property 'secret_key'")
            __props__.__dict__["secret_key"] = None if secret_key is None else pulumi.Output.secret(secret_key)
            if vhosts is None and not opts.urn:
                raise TypeError("Missing required property 'vhosts'")
            __props__.__dict__["vhosts"] = vhosts
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RabbitmqUser, __self__).__init__(
            'huaweicloud:Dms/rabbitmqUser:RabbitmqUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqUserVhostArgs', 'RabbitmqUserVhostArgsDict']]]]] = None) -> 'RabbitmqUser':
        """
        Get an existing RabbitmqUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the user name. It starts with a letter, consists of 7 to 64
               characters, and contains only letters, digits, hyphens (-), and underscores (_).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the user password. It consists of 8 to 32 characters.
               Contain at least three of the following character types:
               + Uppercase letters
               + Lowercase letters
               + Digits
               + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?
               
               It cannot be the user name or the user name spelled backwards.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RabbitmqUserVhostArgs', 'RabbitmqUserVhostArgsDict']]]] vhosts: Specifies the virtual hosts to be granted permissions for.
               The vhosts structure is documented below.
               
               <a name="block--vhosts"></a>
               The `vhosts` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqUserState.__new__(_RabbitmqUserState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["vhosts"] = vhosts
        return RabbitmqUser(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user name. It starts with a letter, consists of 7 to 64
        characters, and contains only letters, digits, hyphens (-), and underscores (_).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user password. It consists of 8 to 32 characters.
        Contain at least three of the following character types:
        + Uppercase letters
        + Lowercase letters
        + Digits
        + Special characters `~!@#$%^&*()-_=+\\|[{}];:'",<.>/?

        It cannot be the user name or the user name spelled backwards.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> pulumi.Output[Sequence['outputs.RabbitmqUserVhost']]:
        """
        Specifies the virtual hosts to be granted permissions for.
        The vhosts structure is documented below.

        <a name="block--vhosts"></a>
        The `vhosts` block supports:
        """
        return pulumi.get(self, "vhosts")

