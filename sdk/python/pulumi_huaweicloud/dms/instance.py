# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 available_zones: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 engine: pulumi.Input[_builtins.str],
                 product_id: pulumi.Input[_builtins.str],
                 security_group_id: pulumi.Input[_builtins.str],
                 storage_space: pulumi.Input[_builtins.int],
                 storage_spec_code: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 access_user: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_begin: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_end: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_num: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 specification: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] available_zones: Indicates the ID of an AZ. The parameter value can not be left blank or an empty
               array. For details, see section Querying AZ Information.
        :param pulumi.Input[_builtins.str] engine: Indicates a message engine. Options: rabbitmq and kafka.
        :param pulumi.Input[_builtins.str] product_id: Indicates a product ID.
        :param pulumi.Input[_builtins.str] security_group_id: Indicates the ID of a security group.
        :param pulumi.Input[_builtins.int] storage_space: Indicates the message storage space. Value range:
               + Single-node RabbitMQ instance: 100–90000 GB
               + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
               Number of nodes to 90000 GB
               + Kafka instance with specification being 300 MB: 1200–90000 GB
               + Kafka instance with specification being 600 MB: 2400–90000 GB
               + Kafka instance with specification being 1200 MB: 4800–90000 GB
        :param pulumi.Input[_builtins.str] storage_spec_code: Indicates the storage I/O specification. Value range:
               
               Options for a RabbitMQ instance:
               + dms.physical.storage.normal
               + dms.physical.storage.high
               + dms.physical.storage.ultra
               
               Options for a Kafka instance:
               + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
               + When specification is 600 MB: dms.physical.storage.ultra
               + When specification is 1200 MB: dms.physical.storage.ultra
        :param pulumi.Input[_builtins.str] subnet_id: Indicates the ID of a subnet.
        :param pulumi.Input[_builtins.str] vpc_id: Indicates the ID of a VPC.
        :param pulumi.Input[_builtins.str] access_user: Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
               the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
               digits, and hyphens (-).
        :param pulumi.Input[_builtins.str] description: Indicates the description of an instance. It is a character string containing not
               more than 1024 characters.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the version of a message engine.
        :param pulumi.Input[_builtins.str] maintain_begin: Indicates the time at which a maintenance time window starts.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
               is left blank, parameter maintain_end is also blank. In this case, the system automatically
               allocates the default start time 02:00.
        :param pulumi.Input[_builtins.str] maintain_end: Indicates the time at which a maintenance time window ends.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The end time is four hours later than the start time. For example, if the start time is 22:00,
               the end time is 02:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
               blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
               the default end time 06:00.
        :param pulumi.Input[_builtins.str] name: Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
               64 characters, and supports only letters, digits, and hyphens (-).
        :param pulumi.Input[_builtins.int] partition_num: This parameter is mandatory when a Kafka instance is created. Indicates the maximum
               number of topics in a Kafka instance.
               + When specification is 300 MB: 900
               + When specification is 600 MB: 1800
               + When specification is 1200 MB: 1800
        :param pulumi.Input[_builtins.str] password: If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
               parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
               instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
               contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
               characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS instance resource.
        :param pulumi.Input[_builtins.str] specification: This parameter is mandatory if the engine is kafka. Indicates the baseline
               bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
               300 MB, 600 MB, 1200 MB.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the instance.
        """
        pulumi.set(__self__, "available_zones", available_zones)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if access_user is not None:
            pulumi.set(__self__, "access_user", access_user)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if maintain_begin is not None:
            pulumi.set(__self__, "maintain_begin", maintain_begin)
        if maintain_end is not None:
            pulumi.set(__self__, "maintain_end", maintain_end)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Indicates the ID of an AZ. The parameter value can not be left blank or an empty
        array. For details, see section Querying AZ Information.
        """
        return pulumi.get(self, "available_zones")

    @available_zones.setter
    def available_zones(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "available_zones", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates a message engine. Options: rabbitmq and kafka.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates a product ID.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Input[_builtins.int]:
        """
        Indicates the message storage space. Value range:
        + Single-node RabbitMQ instance: 100–90000 GB
        + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
        Number of nodes to 90000 GB
        + Kafka instance with specification being 300 MB: 1200–90000 GB
        + Kafka instance with specification being 600 MB: 2400–90000 GB
        + Kafka instance with specification being 1200 MB: 4800–90000 GB
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "storage_space", value)

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates the storage I/O specification. Value range:

        Options for a RabbitMQ instance:
        + dms.physical.storage.normal
        + dms.physical.storage.high
        + dms.physical.storage.ultra

        Options for a Kafka instance:
        + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
        + When specification is 600 MB: dms.physical.storage.ultra
        + When specification is 1200 MB: dms.physical.storage.ultra
        """
        return pulumi.get(self, "storage_spec_code")

    @storage_spec_code.setter
    def storage_spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_spec_code", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="accessUser")
    def access_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
        the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
        digits, and hyphens (-).
        """
        return pulumi.get(self, "access_user")

    @access_user.setter
    def access_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_user", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the description of an instance. It is a character string containing not
        more than 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version of a message engine.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time at which a maintenance time window starts.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
        is left blank, parameter maintain_end is also blank. In this case, the system automatically
        allocates the default start time 02:00.
        """
        return pulumi.get(self, "maintain_begin")

    @maintain_begin.setter
    def maintain_begin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maintain_begin", value)

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time at which a maintenance time window ends.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The end time is four hours later than the start time. For example, if the start time is 22:00,
        the end time is 02:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
        blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
        the default end time 06:00.
        """
        return pulumi.get(self, "maintain_end")

    @maintain_end.setter
    def maintain_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maintain_end", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
        64 characters, and supports only letters, digits, and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        This parameter is mandatory when a Kafka instance is created. Indicates the maximum
        number of topics in a Kafka instance.
        + When specification is 300 MB: 900
        + When specification is 600 MB: 1800
        + When specification is 1200 MB: 1800
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "partition_num", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
        parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
        instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
        contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
        characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the DMS instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This parameter is mandatory if the engine is kafka. Indicates the baseline
        bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
        300 MB, 600 MB, 1200 MB.
        """
        return pulumi.get(self, "specification")

    @specification.setter
    def specification(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "specification", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the instance.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 access_user: Optional[pulumi.Input[_builtins.str]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_begin: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_end: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_num: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 specification: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_space: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 used_storage_space: Optional[pulumi.Input[_builtins.int]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] access_user: Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
               the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
               digits, and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] available_zones: Indicates the ID of an AZ. The parameter value can not be left blank or an empty
               array. For details, see section Querying AZ Information.
        :param pulumi.Input[_builtins.str] connect_address: Indicates the IP address of an instance.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when an instance is created. The time is in the format of timestamp, that is, the
               offset milliseconds from 1970-01-01 00:00:00 UTC to the specified time.
        :param pulumi.Input[_builtins.str] description: Indicates the description of an instance. It is a character string containing not
               more than 1024 characters.
        :param pulumi.Input[_builtins.str] engine: Indicates a message engine. Options: rabbitmq and kafka.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the version of a message engine.
        :param pulumi.Input[_builtins.str] maintain_begin: Indicates the time at which a maintenance time window starts.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
               is left blank, parameter maintain_end is also blank. In this case, the system automatically
               allocates the default start time 02:00.
        :param pulumi.Input[_builtins.str] maintain_end: Indicates the time at which a maintenance time window ends.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The end time is four hours later than the start time. For example, if the start time is 22:00,
               the end time is 02:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
               blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
               the default end time 06:00.
        :param pulumi.Input[_builtins.str] name: Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
               64 characters, and supports only letters, digits, and hyphens (-).
        :param pulumi.Input[_builtins.int] partition_num: This parameter is mandatory when a Kafka instance is created. Indicates the maximum
               number of topics in a Kafka instance.
               + When specification is 300 MB: 900
               + When specification is 600 MB: 1800
               + When specification is 1200 MB: 1800
        :param pulumi.Input[_builtins.str] password: If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
               parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
               instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
               contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
               characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        :param pulumi.Input[_builtins.str] port: Indicates the port number of an instance.
        :param pulumi.Input[_builtins.str] product_id: Indicates a product ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS instance resource.
        :param pulumi.Input[_builtins.str] resource_spec_code: Indicates a resource specifications identifier.
        :param pulumi.Input[_builtins.str] security_group_id: Indicates the ID of a security group.
        :param pulumi.Input[_builtins.str] security_group_name: Indicates the name of a security group.
        :param pulumi.Input[_builtins.str] specification: This parameter is mandatory if the engine is kafka. Indicates the baseline
               bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
               300 MB, 600 MB, 1200 MB.
        :param pulumi.Input[_builtins.str] status: Indicates the status of an instance. For details, see section Instance Status.
        :param pulumi.Input[_builtins.int] storage_space: Indicates the message storage space. Value range:
               + Single-node RabbitMQ instance: 100–90000 GB
               + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
               Number of nodes to 90000 GB
               + Kafka instance with specification being 300 MB: 1200–90000 GB
               + Kafka instance with specification being 600 MB: 2400–90000 GB
               + Kafka instance with specification being 1200 MB: 4800–90000 GB
        :param pulumi.Input[_builtins.str] storage_spec_code: Indicates the storage I/O specification. Value range:
               
               Options for a RabbitMQ instance:
               + dms.physical.storage.normal
               + dms.physical.storage.high
               + dms.physical.storage.ultra
               
               Options for a Kafka instance:
               + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
               + When specification is 600 MB: dms.physical.storage.ultra
               + When specification is 1200 MB: dms.physical.storage.ultra
        :param pulumi.Input[_builtins.str] subnet_id: Indicates the ID of a subnet.
        :param pulumi.Input[_builtins.str] subnet_name: Indicates the name of a subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the instance.
        :param pulumi.Input[_builtins.str] type: Indicates an instance type. Options: "single" and "cluster"
        :param pulumi.Input[_builtins.int] used_storage_space: Indicates the used message storage space. Unit: GB
        :param pulumi.Input[_builtins.str] user_id: Indicates a user ID.
        :param pulumi.Input[_builtins.str] vpc_id: Indicates the ID of a VPC.
        """
        if access_user is not None:
            pulumi.set(__self__, "access_user", access_user)
        if available_zones is not None:
            pulumi.set(__self__, "available_zones", available_zones)
        if connect_address is not None:
            pulumi.set(__self__, "connect_address", connect_address)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if maintain_begin is not None:
            pulumi.set(__self__, "maintain_begin", maintain_begin)
        if maintain_end is not None:
            pulumi.set(__self__, "maintain_end", maintain_end)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_spec_code is not None:
            pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if storage_spec_code is not None:
            pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used_storage_space is not None:
            pulumi.set(__self__, "used_storage_space", used_storage_space)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="accessUser")
    def access_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
        the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
        digits, and hyphens (-).
        """
        return pulumi.get(self, "access_user")

    @access_user.setter
    def access_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_user", value)

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the ID of an AZ. The parameter value can not be left blank or an empty
        array. For details, see section Querying AZ Information.
        """
        return pulumi.get(self, "available_zones")

    @available_zones.setter
    def available_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "available_zones", value)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the IP address of an instance.
        """
        return pulumi.get(self, "connect_address")

    @connect_address.setter
    def connect_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_address", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when an instance is created. The time is in the format of timestamp, that is, the
        offset milliseconds from 1970-01-01 00:00:00 UTC to the specified time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the description of an instance. It is a character string containing not
        more than 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a message engine. Options: rabbitmq and kafka.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version of a message engine.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time at which a maintenance time window starts.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
        is left blank, parameter maintain_end is also blank. In this case, the system automatically
        allocates the default start time 02:00.
        """
        return pulumi.get(self, "maintain_begin")

    @maintain_begin.setter
    def maintain_begin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maintain_begin", value)

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time at which a maintenance time window ends.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The end time is four hours later than the start time. For example, if the start time is 22:00,
        the end time is 02:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
        blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
        the default end time 06:00.
        """
        return pulumi.get(self, "maintain_end")

    @maintain_end.setter
    def maintain_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maintain_end", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
        64 characters, and supports only letters, digits, and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "order_id", value)

    @_builtins.property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        This parameter is mandatory when a Kafka instance is created. Indicates the maximum
        number of topics in a Kafka instance.
        + When specification is 300 MB: 900
        + When specification is 600 MB: 1800
        + When specification is 1200 MB: 1800
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "partition_num", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
        parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
        instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
        contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
        characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the port number of an instance.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a product ID.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the DMS instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a resource specifications identifier.
        """
        return pulumi.get(self, "resource_spec_code")

    @resource_spec_code.setter
    def resource_spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_spec_code", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of a security group.
        """
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_name", value)

    @_builtins.property
    @pulumi.getter
    def specification(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This parameter is mandatory if the engine is kafka. Indicates the baseline
        bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
        300 MB, 600 MB, 1200 MB.
        """
        return pulumi.get(self, "specification")

    @specification.setter
    def specification(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "specification", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of an instance. For details, see section Instance Status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the message storage space. Value range:
        + Single-node RabbitMQ instance: 100–90000 GB
        + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
        Number of nodes to 90000 GB
        + Kafka instance with specification being 300 MB: 1200–90000 GB
        + Kafka instance with specification being 600 MB: 2400–90000 GB
        + Kafka instance with specification being 1200 MB: 4800–90000 GB
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "storage_space", value)

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the storage I/O specification. Value range:

        Options for a RabbitMQ instance:
        + dms.physical.storage.normal
        + dms.physical.storage.high
        + dms.physical.storage.ultra

        Options for a Kafka instance:
        + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
        + When specification is 600 MB: dms.physical.storage.ultra
        + When specification is 1200 MB: dms.physical.storage.ultra
        """
        return pulumi.get(self, "storage_spec_code")

    @storage_spec_code.setter
    def storage_spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_spec_code", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of a subnet.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the instance.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates an instance type. Options: "single" and "cluster"
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the used message storage space. Unit: GB
        """
        return pulumi.get(self, "used_storage_space")

    @used_storage_space.setter
    def used_storage_space(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "used_storage_space", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates a user ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_name")

    @vpc_name.setter
    def vpc_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_name", value)


@pulumi.type_token("huaweicloud:Dms/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_user: Optional[pulumi.Input[_builtins.str]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_begin: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_end: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_num: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 specification: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_space: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated, use `Dms.KafkaInstance` or
        `Dms.RabbitmqInstance` instead.

        Manages a DMS instance in the huaweicloud DMS Service.

        ## Example Usage

        ### Automatically detect the correct network

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        access_password = config.require_object("accessPassword")
        az1 = huaweicloud.Dms.get_az()
        product1 = huaweicloud.Dms.get_product(engine="rabbitmq",
            instance_type="single",
            version="3.7.17")
        secgroup1 = huaweicloud.vpc.Secgroup("secgroup_1",
            name="secgroup_1",
            description="secgroup_1")
        instance1 = huaweicloud.dms.Instance("instance_1",
            name=instance_name,
            engine="rabbitmq",
            access_user="user",
            password=access_password,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=secgroup1.id,
            available_zones=[az1.id],
            product_id=product1.id,
            engine_version=product1.version,
            storage_space=product1.storage,
            storage_spec_code=product1.storage_spec_code)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_user: Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
               the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
               digits, and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] available_zones: Indicates the ID of an AZ. The parameter value can not be left blank or an empty
               array. For details, see section Querying AZ Information.
        :param pulumi.Input[_builtins.str] description: Indicates the description of an instance. It is a character string containing not
               more than 1024 characters.
        :param pulumi.Input[_builtins.str] engine: Indicates a message engine. Options: rabbitmq and kafka.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the version of a message engine.
        :param pulumi.Input[_builtins.str] maintain_begin: Indicates the time at which a maintenance time window starts.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
               is left blank, parameter maintain_end is also blank. In this case, the system automatically
               allocates the default start time 02:00.
        :param pulumi.Input[_builtins.str] maintain_end: Indicates the time at which a maintenance time window ends.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The end time is four hours later than the start time. For example, if the start time is 22:00,
               the end time is 02:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
               blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
               the default end time 06:00.
        :param pulumi.Input[_builtins.str] name: Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
               64 characters, and supports only letters, digits, and hyphens (-).
        :param pulumi.Input[_builtins.int] partition_num: This parameter is mandatory when a Kafka instance is created. Indicates the maximum
               number of topics in a Kafka instance.
               + When specification is 300 MB: 900
               + When specification is 600 MB: 1800
               + When specification is 1200 MB: 1800
        :param pulumi.Input[_builtins.str] password: If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
               parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
               instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
               contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
               characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        :param pulumi.Input[_builtins.str] product_id: Indicates a product ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS instance resource.
        :param pulumi.Input[_builtins.str] security_group_id: Indicates the ID of a security group.
        :param pulumi.Input[_builtins.str] specification: This parameter is mandatory if the engine is kafka. Indicates the baseline
               bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
               300 MB, 600 MB, 1200 MB.
        :param pulumi.Input[_builtins.int] storage_space: Indicates the message storage space. Value range:
               + Single-node RabbitMQ instance: 100–90000 GB
               + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
               Number of nodes to 90000 GB
               + Kafka instance with specification being 300 MB: 1200–90000 GB
               + Kafka instance with specification being 600 MB: 2400–90000 GB
               + Kafka instance with specification being 1200 MB: 4800–90000 GB
        :param pulumi.Input[_builtins.str] storage_spec_code: Indicates the storage I/O specification. Value range:
               
               Options for a RabbitMQ instance:
               + dms.physical.storage.normal
               + dms.physical.storage.high
               + dms.physical.storage.ultra
               
               Options for a Kafka instance:
               + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
               + When specification is 600 MB: dms.physical.storage.ultra
               + When specification is 1200 MB: dms.physical.storage.ultra
        :param pulumi.Input[_builtins.str] subnet_id: Indicates the ID of a subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the instance.
        :param pulumi.Input[_builtins.str] vpc_id: Indicates the ID of a VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated, use `Dms.KafkaInstance` or
        `Dms.RabbitmqInstance` instead.

        Manages a DMS instance in the huaweicloud DMS Service.

        ## Example Usage

        ### Automatically detect the correct network

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        access_password = config.require_object("accessPassword")
        az1 = huaweicloud.Dms.get_az()
        product1 = huaweicloud.Dms.get_product(engine="rabbitmq",
            instance_type="single",
            version="3.7.17")
        secgroup1 = huaweicloud.vpc.Secgroup("secgroup_1",
            name="secgroup_1",
            description="secgroup_1")
        instance1 = huaweicloud.dms.Instance("instance_1",
            name=instance_name,
            engine="rabbitmq",
            access_user="user",
            password=access_password,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=secgroup1.id,
            available_zones=[az1.id],
            product_id=product1.id,
            engine_version=product1.version,
            storage_space=product1.storage,
            storage_spec_code=product1.storage_spec_code)
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_user: Optional[pulumi.Input[_builtins.str]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_begin: Optional[pulumi.Input[_builtins.str]] = None,
                 maintain_end: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_num: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 specification: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_space: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["access_user"] = access_user
            if available_zones is None and not opts.urn:
                raise TypeError("Missing required property 'available_zones'")
            __props__.__dict__["available_zones"] = available_zones
            __props__.__dict__["description"] = description
            if engine is None and not opts.urn:
                raise TypeError("Missing required property 'engine'")
            __props__.__dict__["engine"] = engine
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["maintain_begin"] = maintain_begin
            __props__.__dict__["maintain_end"] = maintain_end
            __props__.__dict__["name"] = name
            __props__.__dict__["partition_num"] = partition_num
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["region"] = region
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["specification"] = specification
            if storage_space is None and not opts.urn:
                raise TypeError("Missing required property 'storage_space'")
            __props__.__dict__["storage_space"] = storage_space
            if storage_spec_code is None and not opts.urn:
                raise TypeError("Missing required property 'storage_spec_code'")
            __props__.__dict__["storage_spec_code"] = storage_spec_code
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["connect_address"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["order_id"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["resource_spec_code"] = None
            __props__.__dict__["security_group_name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["subnet_name"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["used_storage_space"] = None
            __props__.__dict__["user_id"] = None
            __props__.__dict__["vpc_name"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'huaweicloud:Dms/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_user: Optional[pulumi.Input[_builtins.str]] = None,
            available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            connect_address: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            engine: Optional[pulumi.Input[_builtins.str]] = None,
            engine_version: Optional[pulumi.Input[_builtins.str]] = None,
            maintain_begin: Optional[pulumi.Input[_builtins.str]] = None,
            maintain_end: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            order_id: Optional[pulumi.Input[_builtins.str]] = None,
            partition_num: Optional[pulumi.Input[_builtins.int]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.str]] = None,
            product_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            specification: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            storage_space: Optional[pulumi.Input[_builtins.int]] = None,
            storage_spec_code: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            used_storage_space: Optional[pulumi.Input[_builtins.int]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_user: Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
               the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
               digits, and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] available_zones: Indicates the ID of an AZ. The parameter value can not be left blank or an empty
               array. For details, see section Querying AZ Information.
        :param pulumi.Input[_builtins.str] connect_address: Indicates the IP address of an instance.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when an instance is created. The time is in the format of timestamp, that is, the
               offset milliseconds from 1970-01-01 00:00:00 UTC to the specified time.
        :param pulumi.Input[_builtins.str] description: Indicates the description of an instance. It is a character string containing not
               more than 1024 characters.
        :param pulumi.Input[_builtins.str] engine: Indicates a message engine. Options: rabbitmq and kafka.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the version of a message engine.
        :param pulumi.Input[_builtins.str] maintain_begin: Indicates the time at which a maintenance time window starts.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
               is left blank, parameter maintain_end is also blank. In this case, the system automatically
               allocates the default start time 02:00.
        :param pulumi.Input[_builtins.str] maintain_end: Indicates the time at which a maintenance time window ends.
               Format: HH:mm:ss.
               The start time and end time of a maintenance time window must indicate the time segment of
               a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
               The end time is four hours later than the start time. For example, if the start time is 22:00,
               the end time is 02:00.
               Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
               blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
               the default end time 06:00.
        :param pulumi.Input[_builtins.str] name: Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
               64 characters, and supports only letters, digits, and hyphens (-).
        :param pulumi.Input[_builtins.int] partition_num: This parameter is mandatory when a Kafka instance is created. Indicates the maximum
               number of topics in a Kafka instance.
               + When specification is 300 MB: 900
               + When specification is 600 MB: 1800
               + When specification is 1200 MB: 1800
        :param pulumi.Input[_builtins.str] password: If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
               parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
               instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
               contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
               characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        :param pulumi.Input[_builtins.str] port: Indicates the port number of an instance.
        :param pulumi.Input[_builtins.str] product_id: Indicates a product ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS instance resource.
        :param pulumi.Input[_builtins.str] resource_spec_code: Indicates a resource specifications identifier.
        :param pulumi.Input[_builtins.str] security_group_id: Indicates the ID of a security group.
        :param pulumi.Input[_builtins.str] security_group_name: Indicates the name of a security group.
        :param pulumi.Input[_builtins.str] specification: This parameter is mandatory if the engine is kafka. Indicates the baseline
               bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
               300 MB, 600 MB, 1200 MB.
        :param pulumi.Input[_builtins.str] status: Indicates the status of an instance. For details, see section Instance Status.
        :param pulumi.Input[_builtins.int] storage_space: Indicates the message storage space. Value range:
               + Single-node RabbitMQ instance: 100–90000 GB
               + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
               Number of nodes to 90000 GB
               + Kafka instance with specification being 300 MB: 1200–90000 GB
               + Kafka instance with specification being 600 MB: 2400–90000 GB
               + Kafka instance with specification being 1200 MB: 4800–90000 GB
        :param pulumi.Input[_builtins.str] storage_spec_code: Indicates the storage I/O specification. Value range:
               
               Options for a RabbitMQ instance:
               + dms.physical.storage.normal
               + dms.physical.storage.high
               + dms.physical.storage.ultra
               
               Options for a Kafka instance:
               + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
               + When specification is 600 MB: dms.physical.storage.ultra
               + When specification is 1200 MB: dms.physical.storage.ultra
        :param pulumi.Input[_builtins.str] subnet_id: Indicates the ID of a subnet.
        :param pulumi.Input[_builtins.str] subnet_name: Indicates the name of a subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the instance.
        :param pulumi.Input[_builtins.str] type: Indicates an instance type. Options: "single" and "cluster"
        :param pulumi.Input[_builtins.int] used_storage_space: Indicates the used message storage space. Unit: GB
        :param pulumi.Input[_builtins.str] user_id: Indicates a user ID.
        :param pulumi.Input[_builtins.str] vpc_id: Indicates the ID of a VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["access_user"] = access_user
        __props__.__dict__["available_zones"] = available_zones
        __props__.__dict__["connect_address"] = connect_address
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["maintain_begin"] = maintain_begin
        __props__.__dict__["maintain_end"] = maintain_end
        __props__.__dict__["name"] = name
        __props__.__dict__["order_id"] = order_id
        __props__.__dict__["partition_num"] = partition_num
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_spec_code"] = resource_spec_code
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["security_group_name"] = security_group_name
        __props__.__dict__["specification"] = specification
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_space"] = storage_space
        __props__.__dict__["storage_spec_code"] = storage_spec_code
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["subnet_name"] = subnet_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["used_storage_space"] = used_storage_space
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpc_name"] = vpc_name
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessUser")
    def access_user(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Indicates a username. If the engine is rabbitmq, this parameter is mandatory. If
        the engine is kafka, this parameter is optional. A username consists of 4 to 64 characters and supports only letters,
        digits, and hyphens (-).
        """
        return pulumi.get(self, "access_user")

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the ID of an AZ. The parameter value can not be left blank or an empty
        array. For details, see section Querying AZ Information.
        """
        return pulumi.get(self, "available_zones")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the IP address of an instance.
        """
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when an instance is created. The time is in the format of timestamp, that is, the
        offset milliseconds from 1970-01-01 00:00:00 UTC to the specified time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the description of an instance. It is a character string containing not
        more than 1024 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates a message engine. Options: rabbitmq and kafka.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Indicates the version of a message engine.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time at which a maintenance time window starts.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
        is left blank, parameter maintain_end is also blank. In this case, the system automatically
        allocates the default start time 02:00.
        """
        return pulumi.get(self, "maintain_begin")

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time at which a maintenance time window ends.
        Format: HH:mm:ss.
        The start time and end time of a maintenance time window must indicate the time segment of
        a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
        The end time is four hours later than the start time. For example, if the start time is 22:00,
        the end time is 02:00.
        Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
        blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
        the default end time 06:00.
        """
        return pulumi.get(self, "maintain_end")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of an instance. An instance name starts with a letter, consists of 4 to
        64 characters, and supports only letters, digits, and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        This parameter is mandatory when a Kafka instance is created. Indicates the maximum
        number of topics in a Kafka instance.
        + When specification is 300 MB: 900
        + When specification is 600 MB: 1800
        + When specification is 1200 MB: 1800
        """
        return pulumi.get(self, "partition_num")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        If the engine is rabbitmq, this parameter is mandatory. If the engine is kafka, this
        parameter is mandatory when ssl_enable is true and is invalid when ssl_enable is false. Indicates the password of an
        instance. An instance password must meet the following complexity requirements: Must be 8 to 32 characters long. Must
        contain at least 2 of the following character types: lowercase letters, uppercase letters, digits, and special
        characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the port number of an instance.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates a product ID.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the DMS instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS instance resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates a resource specifications identifier.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of a security group.
        """
        return pulumi.get(self, "security_group_name")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> pulumi.Output[_builtins.str]:
        """
        This parameter is mandatory if the engine is kafka. Indicates the baseline
        bandwidth of a Kafka instance, that is, the maximum amount of data transferred per unit time. Unit: byte/s. Options:
        300 MB, 600 MB, 1200 MB.
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of an instance. For details, see section Instance Status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the message storage space. Value range:
        + Single-node RabbitMQ instance: 100–90000 GB
        + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB, 300 GB x
        Number of nodes to 90000 GB
        + Kafka instance with specification being 300 MB: 1200–90000 GB
        + Kafka instance with specification being 600 MB: 2400–90000 GB
        + Kafka instance with specification being 1200 MB: 4800–90000 GB
        """
        return pulumi.get(self, "storage_space")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the storage I/O specification. Value range:

        Options for a RabbitMQ instance:
        + dms.physical.storage.normal
        + dms.physical.storage.high
        + dms.physical.storage.ultra

        Options for a Kafka instance:
        + When specification is 300 MB: dms.physical.storage.high or dms.physical.storage.ultra
        + When specification is 600 MB: dms.physical.storage.ultra
        + When specification is 1200 MB: dms.physical.storage.ultra
        """
        return pulumi.get(self, "storage_spec_code")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of a subnet.
        """
        return pulumi.get(self, "subnet_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the instance.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates an instance type. Options: "single" and "cluster"
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the used message storage space. Unit: GB
        """
        return pulumi.get(self, "used_storage_space")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates a user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpc_name")

