# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RocketmqMessageSendArgs', 'RocketmqMessageSend']

@pulumi.input_type
class RocketmqMessageSendArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 topic: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RocketmqMessageSend resource.
        :param pulumi.Input[_builtins.str] body: Specifies the content of the message to be sent.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] topic: Specifies the name of the topic to send the message.
        :param pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]] property_lists: Specifies the list of message properties.  
               The property_list structure is documented below.
               
               <a name="rocketmq_message_send_property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message to be sent is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "topic", topic)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if property_lists is not None:
            pulumi.set(__self__, "property_lists", property_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the content of the message to be sent.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the topic to send the message.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]]:
        """
        Specifies the list of message properties.  
        The property_list structure is documented below.

        <a name="rocketmq_message_send_property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @property_lists.setter
    def property_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]]):
        pulumi.set(self, "property_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the message to be sent is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RocketmqMessageSendState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 broker_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 msg_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.int]] = None,
                 queue_offset: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RocketmqMessageSend resources.
        :param pulumi.Input[_builtins.str] body: Specifies the content of the message to be sent.
        :param pulumi.Input[_builtins.str] broker_name: The broker name of the message.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] msg_id: The ID of the message that was sent.
        :param pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]] property_lists: Specifies the list of message properties.  
               The property_list structure is documented below.
               
               <a name="rocketmq_message_send_property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.int] queue_id: The queue ID of the message.
        :param pulumi.Input[_builtins.int] queue_offset: The queue offset of the message.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message to be sent is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the name of the topic to send the message.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if broker_name is not None:
            pulumi.set(__self__, "broker_name", broker_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if msg_id is not None:
            pulumi.set(__self__, "msg_id", msg_id)
        if property_lists is not None:
            pulumi.set(__self__, "property_lists", property_lists)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if queue_offset is not None:
            pulumi.set(__self__, "queue_offset", queue_offset)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of the message to be sent.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="brokerName")
    def broker_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The broker name of the message.
        """
        return pulumi.get(self, "broker_name")

    @broker_name.setter
    def broker_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "broker_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="msgId")
    def msg_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the message that was sent.
        """
        return pulumi.get(self, "msg_id")

    @msg_id.setter
    def msg_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "msg_id", value)

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]]:
        """
        Specifies the list of message properties.  
        The property_list structure is documented below.

        <a name="rocketmq_message_send_property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @property_lists.setter
    def property_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketmqMessageSendPropertyListArgs']]]]):
        pulumi.set(self, "property_lists", value)

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The queue ID of the message.
        """
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "queue_id", value)

    @_builtins.property
    @pulumi.getter(name="queueOffset")
    def queue_offset(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The queue offset of the message.
        """
        return pulumi.get(self, "queue_offset")

    @queue_offset.setter
    def queue_offset(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "queue_offset", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the message to be sent is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the topic to send the message.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.type_token("huaweicloud:Dms/rocketmqMessageSend:RocketmqMessageSend")
class RocketmqMessageSend(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RocketmqMessageSendPropertyListArgs', 'RocketmqMessageSendPropertyListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to send a message to specified DMS RocketMQ topic within HuaweiCloud.

        > This resource is only a one-time action resource for sending message to specified RocketMQ topic. Deleting this
          resource will not clear the corresponding message record, but will only remove the resource information from the
          tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        body = config.require_object("body")
        property_list = config.require_object("propertyList")
        test = huaweicloud.dms.RocketmqMessageSend("test",
            property_lists=[{
                "name": entry["value"]["name"],
                "value": entry["value"]["value"],
            } for entry in [{"key": k, "value": v} for k, v in property_list]],
            instance_id=instance_id,
            topic=topic_name,
            body=body)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] body: Specifies the content of the message to be sent.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RocketmqMessageSendPropertyListArgs', 'RocketmqMessageSendPropertyListArgsDict']]]] property_lists: Specifies the list of message properties.  
               The property_list structure is documented below.
               
               <a name="rocketmq_message_send_property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message to be sent is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the name of the topic to send the message.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketmqMessageSendArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to send a message to specified DMS RocketMQ topic within HuaweiCloud.

        > This resource is only a one-time action resource for sending message to specified RocketMQ topic. Deleting this
          resource will not clear the corresponding message record, but will only remove the resource information from the
          tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        body = config.require_object("body")
        property_list = config.require_object("propertyList")
        test = huaweicloud.dms.RocketmqMessageSend("test",
            property_lists=[{
                "name": entry["value"]["name"],
                "value": entry["value"]["value"],
            } for entry in [{"key": k, "value": v} for k, v in property_list]],
            instance_id=instance_id,
            topic=topic_name,
            body=body)
        ```

        :param str resource_name: The name of the resource.
        :param RocketmqMessageSendArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketmqMessageSendArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RocketmqMessageSendPropertyListArgs', 'RocketmqMessageSendPropertyListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketmqMessageSendArgs.__new__(RocketmqMessageSendArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["property_lists"] = property_lists
            __props__.__dict__["region"] = region
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
            __props__.__dict__["broker_name"] = None
            __props__.__dict__["msg_id"] = None
            __props__.__dict__["queue_id"] = None
            __props__.__dict__["queue_offset"] = None
        super(RocketmqMessageSend, __self__).__init__(
            'huaweicloud:Dms/rocketmqMessageSend:RocketmqMessageSend',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[_builtins.str]] = None,
            broker_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            msg_id: Optional[pulumi.Input[_builtins.str]] = None,
            property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RocketmqMessageSendPropertyListArgs', 'RocketmqMessageSendPropertyListArgsDict']]]]] = None,
            queue_id: Optional[pulumi.Input[_builtins.int]] = None,
            queue_offset: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None) -> 'RocketmqMessageSend':
        """
        Get an existing RocketmqMessageSend resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] body: Specifies the content of the message to be sent.
        :param pulumi.Input[_builtins.str] broker_name: The broker name of the message.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] msg_id: The ID of the message that was sent.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RocketmqMessageSendPropertyListArgs', 'RocketmqMessageSendPropertyListArgsDict']]]] property_lists: Specifies the list of message properties.  
               The property_list structure is documented below.
               
               <a name="rocketmq_message_send_property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.int] queue_id: The queue ID of the message.
        :param pulumi.Input[_builtins.int] queue_offset: The queue offset of the message.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message to be sent is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the name of the topic to send the message.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketmqMessageSendState.__new__(_RocketmqMessageSendState)

        __props__.__dict__["body"] = body
        __props__.__dict__["broker_name"] = broker_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["msg_id"] = msg_id
        __props__.__dict__["property_lists"] = property_lists
        __props__.__dict__["queue_id"] = queue_id
        __props__.__dict__["queue_offset"] = queue_offset
        __props__.__dict__["region"] = region
        __props__.__dict__["topic"] = topic
        return RocketmqMessageSend(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content of the message to be sent.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="brokerName")
    def broker_name(self) -> pulumi.Output[_builtins.str]:
        """
        The broker name of the message.
        """
        return pulumi.get(self, "broker_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="msgId")
    def msg_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the message that was sent.
        """
        return pulumi.get(self, "msg_id")

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> pulumi.Output[Optional[Sequence['outputs.RocketmqMessageSendPropertyList']]]:
        """
        Specifies the list of message properties.  
        The property_list structure is documented below.

        <a name="rocketmq_message_send_property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> pulumi.Output[_builtins.int]:
        """
        The queue ID of the message.
        """
        return pulumi.get(self, "queue_id")

    @_builtins.property
    @pulumi.getter(name="queueOffset")
    def queue_offset(self) -> pulumi.Output[_builtins.int]:
        """
        The queue offset of the message.
        """
        return pulumi.get(self, "queue_offset")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the message to be sent is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the topic to send the message.
        """
        return pulumi.get(self, "topic")

