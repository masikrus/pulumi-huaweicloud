# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRabbitmqPluginsResult',
    'AwaitableGetRabbitmqPluginsResult',
    'get_rabbitmq_plugins',
    'get_rabbitmq_plugins_output',
]

@pulumi.output_type
class GetRabbitmqPluginsResult:
    """
    A collection of values returned by getRabbitmqPlugins.
    """
    def __init__(__self__, enable=None, id=None, instance_id=None, name=None, plugins=None, region=None, running=None, version=None):
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if running and not isinstance(running, bool):
            raise TypeError("Expected argument 'running' to be a bool")
        pulumi.set(__self__, "running", running)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the plugin is enabled.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the plugin.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetRabbitmqPluginsPluginResult']:
        """
        The list of the RabbitMQ plugins.
        The plugins structure is documented below.
        """
        return pulumi.get(self, "plugins")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the plugin is running.
        """
        return pulumi.get(self, "running")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the version of the plugin.
        """
        return pulumi.get(self, "version")


class AwaitableGetRabbitmqPluginsResult(GetRabbitmqPluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRabbitmqPluginsResult(
            enable=self.enable,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            plugins=self.plugins,
            region=self.region,
            running=self.running,
            version=self.version)


def get_rabbitmq_plugins(enable: Optional[_builtins.bool] = None,
                         instance_id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         running: Optional[_builtins.bool] = None,
                         version: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRabbitmqPluginsResult:
    """
    Use this data source to get the list of DMS RabbitMQ plugins.


    :param _builtins.bool enable: Specifies whether the plugin is enabled. Defaults to **false**.
    :param _builtins.str instance_id: Specifies the ID of the RabbitMQ instance.
    :param _builtins.str name: Specifies the name of the plugin.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.bool running: Specifies whether the plugin is running. Defaults to **false**.
    :param _builtins.str version: Specifies the version of the plugin.
    """
    __args__ = dict()
    __args__['enable'] = enable
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['running'] = running
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getRabbitmqPlugins:getRabbitmqPlugins', __args__, opts=opts, typ=GetRabbitmqPluginsResult).value

    return AwaitableGetRabbitmqPluginsResult(
        enable=pulumi.get(__ret__, 'enable'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        plugins=pulumi.get(__ret__, 'plugins'),
        region=pulumi.get(__ret__, 'region'),
        running=pulumi.get(__ret__, 'running'),
        version=pulumi.get(__ret__, 'version'))
def get_rabbitmq_plugins_output(enable: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                running: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRabbitmqPluginsResult]:
    """
    Use this data source to get the list of DMS RabbitMQ plugins.


    :param _builtins.bool enable: Specifies whether the plugin is enabled. Defaults to **false**.
    :param _builtins.str instance_id: Specifies the ID of the RabbitMQ instance.
    :param _builtins.str name: Specifies the name of the plugin.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.bool running: Specifies whether the plugin is running. Defaults to **false**.
    :param _builtins.str version: Specifies the version of the plugin.
    """
    __args__ = dict()
    __args__['enable'] = enable
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['running'] = running
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getRabbitmqPlugins:getRabbitmqPlugins', __args__, opts=opts, typ=GetRabbitmqPluginsResult)
    return __ret__.apply(lambda __response__: GetRabbitmqPluginsResult(
        enable=pulumi.get(__response__, 'enable'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        plugins=pulumi.get(__response__, 'plugins'),
        region=pulumi.get(__response__, 'region'),
        running=pulumi.get(__response__, 'running'),
        version=pulumi.get(__response__, 'version')))
