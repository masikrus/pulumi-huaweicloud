# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RabbitmqQueueMessageClearArgs', 'RabbitmqQueueMessageClear']

@pulumi.input_type
class RabbitmqQueueMessageClearArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 queue: pulumi.Input[_builtins.str],
                 vhost: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RabbitmqQueueMessageClear resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue: Specifies the queue name.
               Changing this creates a new resource.
               
               > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "vhost", vhost)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the queue name.
        Changing this creates a new resource.

        > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "queue", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vhost", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RabbitmqQueueMessageClearState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RabbitmqQueueMessageClear resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue: Specifies the queue name.
               Changing this creates a new resource.
               
               > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name.
        Changing this creates a new resource.

        > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vhost", value)


@pulumi.type_token("huaweicloud:Dms/rabbitmqQueueMessageClear:RabbitmqQueueMessageClear")
class RabbitmqQueueMessageClear(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS RabbitMQ queue message clear resource within HuaweiCloud.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue: Specifies the queue name.
               Changing this creates a new resource.
               
               > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqQueueMessageClearArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RabbitMQ queue message clear resource within HuaweiCloud.

        :param str resource_name: The name of the resource.
        :param RabbitmqQueueMessageClearArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqQueueMessageClearArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqQueueMessageClearArgs.__new__(RabbitmqQueueMessageClearArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if queue is None and not opts.urn:
                raise TypeError("Missing required property 'queue'")
            __props__.__dict__["queue"] = queue
            __props__.__dict__["region"] = region
            if vhost is None and not opts.urn:
                raise TypeError("Missing required property 'vhost'")
            __props__.__dict__["vhost"] = vhost
        super(RabbitmqQueueMessageClear, __self__).__init__(
            'huaweicloud:Dms/rabbitmqQueueMessageClear:RabbitmqQueueMessageClear',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            queue: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            vhost: Optional[pulumi.Input[_builtins.str]] = None) -> 'RabbitmqQueueMessageClear':
        """
        Get an existing RabbitmqQueueMessageClear resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue: Specifies the queue name.
               Changing this creates a new resource.
               
               > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqQueueMessageClearState.__new__(_RabbitmqQueueMessageClearState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["queue"] = queue
        __props__.__dict__["region"] = region
        __props__.__dict__["vhost"] = vhost
        return RabbitmqQueueMessageClear(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the queue name.
        Changing this creates a new resource.

        > If `vhost` and `queue` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the vhost name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

