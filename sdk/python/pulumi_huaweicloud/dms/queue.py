# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['QueueArgs', 'Queue']

@pulumi.input_type
class QueueArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_consume_count: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 redrive_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a Queue resource.
        :param pulumi.Input[_builtins.str] description: Indicates the basic information about a queue. The queue description must
               be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        :param pulumi.Input[_builtins.int] max_consume_count: This parameter is mandatory only when redrive_policy is set to enable.
               This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
               consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
               dead letter queue. The max_consume_count value range is 1–100.
        :param pulumi.Input[_builtins.str] name: Indicates the unique name of a queue. A string of 1 to 64 characters that
               contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        :param pulumi.Input[_builtins.str] queue_mode: Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
               Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
               Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
               are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
               NORMAL.
        :param pulumi.Input[_builtins.str] redrive_policy: Indicates whether to enable dead letter messages. Dead letter messages
               indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
               default value is 'disable'.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS queue resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS queue resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_consume_count is not None:
            pulumi.set(__self__, "max_consume_count", max_consume_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_mode is not None:
            pulumi.set(__self__, "queue_mode", queue_mode)
        if redrive_policy is not None:
            pulumi.set(__self__, "redrive_policy", redrive_policy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_hours is not None:
            pulumi.set(__self__, "retention_hours", retention_hours)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the basic information about a queue. The queue description must
        be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="maxConsumeCount")
    def max_consume_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        This parameter is mandatory only when redrive_policy is set to enable.
        This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
        consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
        dead letter queue. The max_consume_count value range is 1–100.
        """
        return pulumi.get(self, "max_consume_count")

    @max_consume_count.setter
    def max_consume_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_consume_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique name of a queue. A string of 1 to 64 characters that
        contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="queueMode")
    def queue_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
        Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
        Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
        are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
        NORMAL.
        """
        return pulumi.get(self, "queue_mode")

    @queue_mode.setter
    def queue_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_mode", value)

    @_builtins.property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates whether to enable dead letter messages. Dead letter messages
        indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
        default value is 'disable'.
        """
        return pulumi.get(self, "redrive_policy")

    @redrive_policy.setter
    def redrive_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redrive_policy", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the DMS queue resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS queue resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionHours")
    def retention_hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "retention_hours")

    @retention_hours.setter
    def retention_hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_hours", value)


@pulumi.input_type
class _QueueState:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_count: Optional[pulumi.Input[_builtins.int]] = None,
                 max_consume_count: Optional[pulumi.Input[_builtins.int]] = None,
                 max_msg_size_byte: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 produced_messages: Optional[pulumi.Input[_builtins.int]] = None,
                 queue_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 redrive_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation: Optional[pulumi.Input[_builtins.int]] = None,
                 retention_hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Queue resources.
        :param pulumi.Input[_builtins.str] created: Indicates the time when a queue is created.
        :param pulumi.Input[_builtins.str] description: Indicates the basic information about a queue. The queue description must
               be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        :param pulumi.Input[_builtins.int] group_count: Indicates the total number of consumer groups in a queue.
        :param pulumi.Input[_builtins.int] max_consume_count: This parameter is mandatory only when redrive_policy is set to enable.
               This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
               consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
               dead letter queue. The max_consume_count value range is 1–100.
        :param pulumi.Input[_builtins.int] max_msg_size_byte: Indicates the maximum message size (unit: byte) that is allowed in queue.
        :param pulumi.Input[_builtins.str] name: Indicates the unique name of a queue. A string of 1 to 64 characters that
               contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        :param pulumi.Input[_builtins.int] produced_messages: Indicates the total number of messages (not including the messages that have expired and been
               deleted) in a queue.
        :param pulumi.Input[_builtins.str] queue_mode: Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
               Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
               Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
               are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
               NORMAL.
        :param pulumi.Input[_builtins.str] redrive_policy: Indicates whether to enable dead letter messages. Dead letter messages
               indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
               default value is 'disable'.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS queue resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS queue resource.
        :param pulumi.Input[_builtins.int] reservation: Indicates the retention period (unit: min) of a message in a queue.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_count is not None:
            pulumi.set(__self__, "group_count", group_count)
        if max_consume_count is not None:
            pulumi.set(__self__, "max_consume_count", max_consume_count)
        if max_msg_size_byte is not None:
            pulumi.set(__self__, "max_msg_size_byte", max_msg_size_byte)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if produced_messages is not None:
            pulumi.set(__self__, "produced_messages", produced_messages)
        if queue_mode is not None:
            pulumi.set(__self__, "queue_mode", queue_mode)
        if redrive_policy is not None:
            pulumi.set(__self__, "redrive_policy", redrive_policy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reservation is not None:
            pulumi.set(__self__, "reservation", reservation)
        if retention_hours is not None:
            pulumi.set(__self__, "retention_hours", retention_hours)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when a queue is created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the basic information about a queue. The queue description must
        be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of consumer groups in a queue.
        """
        return pulumi.get(self, "group_count")

    @group_count.setter
    def group_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_count", value)

    @_builtins.property
    @pulumi.getter(name="maxConsumeCount")
    def max_consume_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        This parameter is mandatory only when redrive_policy is set to enable.
        This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
        consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
        dead letter queue. The max_consume_count value range is 1–100.
        """
        return pulumi.get(self, "max_consume_count")

    @max_consume_count.setter
    def max_consume_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_consume_count", value)

    @_builtins.property
    @pulumi.getter(name="maxMsgSizeByte")
    def max_msg_size_byte(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the maximum message size (unit: byte) that is allowed in queue.
        """
        return pulumi.get(self, "max_msg_size_byte")

    @max_msg_size_byte.setter
    def max_msg_size_byte(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_msg_size_byte", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique name of a queue. A string of 1 to 64 characters that
        contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="producedMessages")
    def produced_messages(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of messages (not including the messages that have expired and been
        deleted) in a queue.
        """
        return pulumi.get(self, "produced_messages")

    @produced_messages.setter
    def produced_messages(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "produced_messages", value)

    @_builtins.property
    @pulumi.getter(name="queueMode")
    def queue_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
        Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
        Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
        are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
        NORMAL.
        """
        return pulumi.get(self, "queue_mode")

    @queue_mode.setter
    def queue_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_mode", value)

    @_builtins.property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates whether to enable dead letter messages. Dead letter messages
        indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
        default value is 'disable'.
        """
        return pulumi.get(self, "redrive_policy")

    @redrive_policy.setter
    def redrive_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redrive_policy", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the DMS queue resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS queue resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the retention period (unit: min) of a message in a queue.
        """
        return pulumi.get(self, "reservation")

    @reservation.setter
    def reservation(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "reservation", value)

    @_builtins.property
    @pulumi.getter(name="retentionHours")
    def retention_hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "retention_hours")

    @retention_hours.setter
    def retention_hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_hours", value)


@pulumi.type_token("huaweicloud:Dms/queue:Queue")
class Queue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_consume_count: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 redrive_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_hours: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a DMS queue in the huaweicloud DMS Service.

        > **NOTE:** Distributed Message Service (Shared Edition) has withdrawn. Please use DMS for Kafka instead.

        ## Example Usage

        ### Automatically detect the correct network

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        queue1 = huaweicloud.dms.Queue("queue_1",
            name="queue_1",
            description="test create dms queue",
            queue_mode="FIFO",
            redrive_policy="enable",
            max_consume_count=80)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Indicates the basic information about a queue. The queue description must
               be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        :param pulumi.Input[_builtins.int] max_consume_count: This parameter is mandatory only when redrive_policy is set to enable.
               This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
               consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
               dead letter queue. The max_consume_count value range is 1–100.
        :param pulumi.Input[_builtins.str] name: Indicates the unique name of a queue. A string of 1 to 64 characters that
               contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        :param pulumi.Input[_builtins.str] queue_mode: Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
               Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
               Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
               are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
               NORMAL.
        :param pulumi.Input[_builtins.str] redrive_policy: Indicates whether to enable dead letter messages. Dead letter messages
               indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
               default value is 'disable'.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS queue resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS queue resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[QueueArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS queue in the huaweicloud DMS Service.

        > **NOTE:** Distributed Message Service (Shared Edition) has withdrawn. Please use DMS for Kafka instead.

        ## Example Usage

        ### Automatically detect the correct network

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        queue1 = huaweicloud.dms.Queue("queue_1",
            name="queue_1",
            description="test create dms queue",
            queue_mode="FIFO",
            redrive_policy="enable",
            max_consume_count=80)
        ```

        :param str resource_name: The name of the resource.
        :param QueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_consume_count: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 redrive_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_hours: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QueueArgs.__new__(QueueArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["max_consume_count"] = max_consume_count
            __props__.__dict__["name"] = name
            __props__.__dict__["queue_mode"] = queue_mode
            __props__.__dict__["redrive_policy"] = redrive_policy
            __props__.__dict__["region"] = region
            __props__.__dict__["retention_hours"] = retention_hours
            __props__.__dict__["created"] = None
            __props__.__dict__["group_count"] = None
            __props__.__dict__["max_msg_size_byte"] = None
            __props__.__dict__["produced_messages"] = None
            __props__.__dict__["reservation"] = None
        super(Queue, __self__).__init__(
            'huaweicloud:Dms/queue:Queue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group_count: Optional[pulumi.Input[_builtins.int]] = None,
            max_consume_count: Optional[pulumi.Input[_builtins.int]] = None,
            max_msg_size_byte: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            produced_messages: Optional[pulumi.Input[_builtins.int]] = None,
            queue_mode: Optional[pulumi.Input[_builtins.str]] = None,
            redrive_policy: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reservation: Optional[pulumi.Input[_builtins.int]] = None,
            retention_hours: Optional[pulumi.Input[_builtins.int]] = None) -> 'Queue':
        """
        Get an existing Queue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created: Indicates the time when a queue is created.
        :param pulumi.Input[_builtins.str] description: Indicates the basic information about a queue. The queue description must
               be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        :param pulumi.Input[_builtins.int] group_count: Indicates the total number of consumer groups in a queue.
        :param pulumi.Input[_builtins.int] max_consume_count: This parameter is mandatory only when redrive_policy is set to enable.
               This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
               consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
               dead letter queue. The max_consume_count value range is 1–100.
        :param pulumi.Input[_builtins.int] max_msg_size_byte: Indicates the maximum message size (unit: byte) that is allowed in queue.
        :param pulumi.Input[_builtins.str] name: Indicates the unique name of a queue. A string of 1 to 64 characters that
               contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        :param pulumi.Input[_builtins.int] produced_messages: Indicates the total number of messages (not including the messages that have expired and been
               deleted) in a queue.
        :param pulumi.Input[_builtins.str] queue_mode: Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
               Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
               Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
               are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
               NORMAL.
        :param pulumi.Input[_builtins.str] redrive_policy: Indicates whether to enable dead letter messages. Dead letter messages
               indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
               default value is 'disable'.
        :param pulumi.Input[_builtins.str] region: The region in which to create the DMS queue resource. If omitted, the
               provider-level region will be used. Changing this creates a new DMS queue resource.
        :param pulumi.Input[_builtins.int] reservation: Indicates the retention period (unit: min) of a message in a queue.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QueueState.__new__(_QueueState)

        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["group_count"] = group_count
        __props__.__dict__["max_consume_count"] = max_consume_count
        __props__.__dict__["max_msg_size_byte"] = max_msg_size_byte
        __props__.__dict__["name"] = name
        __props__.__dict__["produced_messages"] = produced_messages
        __props__.__dict__["queue_mode"] = queue_mode
        __props__.__dict__["redrive_policy"] = redrive_policy
        __props__.__dict__["region"] = region
        __props__.__dict__["reservation"] = reservation
        __props__.__dict__["retention_hours"] = retention_hours
        return Queue(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when a queue is created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the basic information about a queue. The queue description must
        be 0 to 160 characters in length, and does not contain angle brackets (<) and (>).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of consumer groups in a queue.
        """
        return pulumi.get(self, "group_count")

    @_builtins.property
    @pulumi.getter(name="maxConsumeCount")
    def max_consume_count(self) -> pulumi.Output[_builtins.int]:
        """
        This parameter is mandatory only when redrive_policy is set to enable.
        This parameter indicates the maximum number of allowed message consumption failures. When a message fails to be
        consumed after the number of consumption attempts of this message reaches this value, DMS stores this message into the
        dead letter queue. The max_consume_count value range is 1–100.
        """
        return pulumi.get(self, "max_consume_count")

    @_builtins.property
    @pulumi.getter(name="maxMsgSizeByte")
    def max_msg_size_byte(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the maximum message size (unit: byte) that is allowed in queue.
        """
        return pulumi.get(self, "max_msg_size_byte")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unique name of a queue. A string of 1 to 64 characters that
        contain a-z, A-Z, 0-9, hyphens (-), and underscores (_). The name cannot be modified once specified.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="producedMessages")
    def produced_messages(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of messages (not including the messages that have expired and been
        deleted) in a queue.
        """
        return pulumi.get(self, "produced_messages")

    @_builtins.property
    @pulumi.getter(name="queueMode")
    def queue_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the queue type. It only support 'NORMAL' and 'FIFO'. NORMAL:
        Standard queue. Best-effort ordering. Messages might be retrieved in an order different from which they were sent.
        Select standard queues when throughput is important. FIFO: First-ln-First-out (FIFO) queue. FIFO delivery. Messages
        are retrieved in the order they were sent. Select FIFO queues when the order of messages is important. Default value:
        NORMAL.
        """
        return pulumi.get(self, "queue_mode")

    @_builtins.property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates whether to enable dead letter messages. Dead letter messages
        indicate messages that cannot be normally consumed. The redrive_policy should be set to 'enable' or 'disable'. The
        default value is 'disable'.
        """
        return pulumi.get(self, "redrive_policy")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the DMS queue resource. If omitted, the
        provider-level region will be used. Changing this creates a new DMS queue resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the retention period (unit: min) of a message in a queue.
        """
        return pulumi.get(self, "reservation")

    @_builtins.property
    @pulumi.getter(name="retentionHours")
    def retention_hours(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "retention_hours")

