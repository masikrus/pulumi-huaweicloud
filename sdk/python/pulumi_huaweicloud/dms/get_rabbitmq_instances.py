# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRabbitmqInstancesResult',
    'AwaitableGetRabbitmqInstancesResult',
    'get_rabbitmq_instances',
    'get_rabbitmq_instances_output',
]

@pulumi.output_type
class GetRabbitmqInstancesResult:
    """
    A collection of values returned by getRabbitmqInstances.
    """
    def __init__(__self__, engine_version=None, enterprise_project_id=None, exact_match_name=None, flavor_id=None, id=None, instance_id=None, instances=None, name=None, region=None, status=None, type=None):
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if exact_match_name and not isinstance(exact_match_name, str):
            raise TypeError("Expected argument 'exact_match_name' to be a str")
        pulumi.set(__self__, "exact_match_name", exact_match_name)
        if flavor_id and not isinstance(flavor_id, str):
            raise TypeError("Expected argument 'flavor_id' to be a str")
        pulumi.set(__self__, "flavor_id", flavor_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[_builtins.str]:
        """
        Indicates the version of the RabbitMQ engine.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID to which the RabbitMQ instance belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="exactMatchName")
    def exact_match_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "exact_match_name")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[_builtins.str]:
        """
        Indicates the flavor ID of the RabbitMQ instance.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetRabbitmqInstancesInstanceResult']:
        """
        Indicates the list of RabbitMQ instances.
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the RabbitMQ instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the RabbitMQ instance. The value can be: **CREATING** **RUNNING**, **FAULTY**,
        **RESTARTING**, **STARTING**, **CHANGING**, **CHANGE FAILED**, **FROZEN**, **FREEZING**, **UPGRADING**, **EXTENDING**
        or **ROLLING BACK**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the RabbitMQ instance type. The value can be: **cluster** or **single**.
        """
        return pulumi.get(self, "type")


class AwaitableGetRabbitmqInstancesResult(GetRabbitmqInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRabbitmqInstancesResult(
            engine_version=self.engine_version,
            enterprise_project_id=self.enterprise_project_id,
            exact_match_name=self.exact_match_name,
            flavor_id=self.flavor_id,
            id=self.id,
            instance_id=self.instance_id,
            instances=self.instances,
            name=self.name,
            region=self.region,
            status=self.status,
            type=self.type)


def get_rabbitmq_instances(engine_version: Optional[_builtins.str] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           exact_match_name: Optional[_builtins.str] = None,
                           flavor_id: Optional[_builtins.str] = None,
                           instance_id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRabbitmqInstancesResult:
    """
    Use this data source to get the list of RabbitMQ instances.


    :param _builtins.str engine_version: Specifies the version of the RabbitMQ engine.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the RabbitMQ instance belongs.
    :param _builtins.str exact_match_name: Specifies whether to search for the instance that precisely matches
           a specified instance name. Value options: **true**, **false**. Defaults to **false**.
    :param _builtins.str flavor_id: Specifies the flavor ID of the RabbitMQ instance.
    :param _builtins.str instance_id: Specifies the ID of the RabbitMQ instance.
    :param _builtins.str name: Specifies the name of the RabbitMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the RabbitMQ instance. Value options: **CREATING** **RUNNING**,
           **FAULTY**,  **RESTARTING**, **STARTING**, **CHANGING**, **CHANGE FAILED**, **FROZEN**, **FREEZING**, **UPGRADING**,
           **EXTENDING**, **ROLLING BACK**.
    :param _builtins.str type: Specifies the RabbitMQ instance type. Value options: **cluster**, **single**.
    """
    __args__ = dict()
    __args__['engineVersion'] = engine_version
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['exactMatchName'] = exact_match_name
    __args__['flavorId'] = flavor_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getRabbitmqInstances:getRabbitmqInstances', __args__, opts=opts, typ=GetRabbitmqInstancesResult).value

    return AwaitableGetRabbitmqInstancesResult(
        engine_version=pulumi.get(__ret__, 'engine_version'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        exact_match_name=pulumi.get(__ret__, 'exact_match_name'),
        flavor_id=pulumi.get(__ret__, 'flavor_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_rabbitmq_instances_output(engine_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  exact_match_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  flavor_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRabbitmqInstancesResult]:
    """
    Use this data source to get the list of RabbitMQ instances.


    :param _builtins.str engine_version: Specifies the version of the RabbitMQ engine.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the RabbitMQ instance belongs.
    :param _builtins.str exact_match_name: Specifies whether to search for the instance that precisely matches
           a specified instance name. Value options: **true**, **false**. Defaults to **false**.
    :param _builtins.str flavor_id: Specifies the flavor ID of the RabbitMQ instance.
    :param _builtins.str instance_id: Specifies the ID of the RabbitMQ instance.
    :param _builtins.str name: Specifies the name of the RabbitMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the RabbitMQ instance. Value options: **CREATING** **RUNNING**,
           **FAULTY**,  **RESTARTING**, **STARTING**, **CHANGING**, **CHANGE FAILED**, **FROZEN**, **FREEZING**, **UPGRADING**,
           **EXTENDING**, **ROLLING BACK**.
    :param _builtins.str type: Specifies the RabbitMQ instance type. Value options: **cluster**, **single**.
    """
    __args__ = dict()
    __args__['engineVersion'] = engine_version
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['exactMatchName'] = exact_match_name
    __args__['flavorId'] = flavor_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getRabbitmqInstances:getRabbitmqInstances', __args__, opts=opts, typ=GetRabbitmqInstancesResult)
    return __ret__.apply(lambda __response__: GetRabbitmqInstancesResult(
        engine_version=pulumi.get(__response__, 'engine_version'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        exact_match_name=pulumi.get(__response__, 'exact_match_name'),
        flavor_id=pulumi.get(__response__, 'flavor_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
