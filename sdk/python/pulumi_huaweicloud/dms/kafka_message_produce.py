# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KafkaMessageProduceArgs', 'KafkaMessageProduce']

@pulumi.input_type
class KafkaMessageProduceArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 topic: pulumi.Input[_builtins.str],
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KafkaMessageProduce resource.
        :param pulumi.Input[_builtins.str] body: Specifies the message content.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]] property_lists: Specifies the topic partition information.
               Changing this creates a new resource.
               The property_list structure is documented below.
               
               <a name="block--property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "topic", topic)
        if property_lists is not None:
            pulumi.set(__self__, "property_lists", property_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the message content.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]]:
        """
        Specifies the topic partition information.
        Changing this creates a new resource.
        The property_list structure is documented below.

        <a name="block--property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @property_lists.setter
    def property_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]]):
        pulumi.set(self, "property_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _KafkaMessageProduceState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KafkaMessageProduce resources.
        :param pulumi.Input[_builtins.str] body: Specifies the message content.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]] property_lists: Specifies the topic partition information.
               Changing this creates a new resource.
               The property_list structure is documented below.
               
               <a name="block--property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if property_lists is not None:
            pulumi.set(__self__, "property_lists", property_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message content.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]]:
        """
        Specifies the topic partition information.
        Changing this creates a new resource.
        The property_list structure is documented below.

        <a name="block--property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @property_lists.setter
    def property_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KafkaMessageProducePropertyListArgs']]]]):
        pulumi.set(self, "property_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.type_token("huaweicloud:Dms/kafkaMessageProduce:KafkaMessageProduce")
class KafkaMessageProduce(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageProducePropertyListArgs', 'KafkaMessageProducePropertyListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS kafka message produce resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaMessageProduce("test",
            instance_id=instance_id,
            topic=topic_name,
            body="test",
            property_lists=[
                {
                    "name": "KEY",
                    "value": "testKey",
                },
                {
                    "name": "PARTITION",
                    "value": "1",
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] body: Specifies the message content.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageProducePropertyListArgs', 'KafkaMessageProducePropertyListArgsDict']]]] property_lists: Specifies the topic partition information.
               Changing this creates a new resource.
               The property_list structure is documented below.
               
               <a name="block--property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaMessageProduceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS kafka message produce resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        topic_name = config.require_object("topicName")
        test = huaweicloud.dms.KafkaMessageProduce("test",
            instance_id=instance_id,
            topic=topic_name,
            body="test",
            property_lists=[
                {
                    "name": "KEY",
                    "value": "testKey",
                },
                {
                    "name": "PARTITION",
                    "value": "1",
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param KafkaMessageProduceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaMessageProduceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageProducePropertyListArgs', 'KafkaMessageProducePropertyListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaMessageProduceArgs.__new__(KafkaMessageProduceArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["property_lists"] = property_lists
            __props__.__dict__["region"] = region
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
        super(KafkaMessageProduce, __self__).__init__(
            'huaweicloud:Dms/kafkaMessageProduce:KafkaMessageProduce',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            property_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageProducePropertyListArgs', 'KafkaMessageProducePropertyListArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None) -> 'KafkaMessageProduce':
        """
        Get an existing KafkaMessageProduce resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] body: Specifies the message content.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KafkaMessageProducePropertyListArgs', 'KafkaMessageProducePropertyListArgsDict']]]] property_lists: Specifies the topic partition information.
               Changing this creates a new resource.
               The property_list structure is documented below.
               
               <a name="block--property_list"></a>
               The `property_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaMessageProduceState.__new__(_KafkaMessageProduceState)

        __props__.__dict__["body"] = body
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["property_lists"] = property_lists
        __props__.__dict__["region"] = region
        __props__.__dict__["topic"] = topic
        return KafkaMessageProduce(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message content.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> pulumi.Output[Optional[Sequence['outputs.KafkaMessageProducePropertyList']]]:
        """
        Specifies the topic partition information.
        Changing this creates a new resource.
        The property_list structure is documented below.

        <a name="block--property_list"></a>
        The `property_list` block supports:
        """
        return pulumi.get(self, "property_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

