# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkaTopicsResult',
    'AwaitableGetKafkaTopicsResult',
    'get_kafka_topics',
    'get_kafka_topics_output',
]

@pulumi.output_type
class GetKafkaTopicsResult:
    """
    A collection of values returned by getKafkaTopics.
    """
    def __init__(__self__, id=None, instance_id=None, max_partitions=None, name=None, region=None, remain_partitions=None, topic_max_partitions=None, topics=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if max_partitions and not isinstance(max_partitions, int):
            raise TypeError("Expected argument 'max_partitions' to be a int")
        pulumi.set(__self__, "max_partitions", max_partitions)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remain_partitions and not isinstance(remain_partitions, int):
            raise TypeError("Expected argument 'remain_partitions' to be a int")
        pulumi.set(__self__, "remain_partitions", remain_partitions)
        if topic_max_partitions and not isinstance(topic_max_partitions, int):
            raise TypeError("Expected argument 'topic_max_partitions' to be a int")
        pulumi.set(__self__, "topic_max_partitions", topic_max_partitions)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="maxPartitions")
    def max_partitions(self) -> _builtins.int:
        """
        Indicates the total number of partitions.
        """
        return pulumi.get(self, "max_partitions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the configuration name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remainPartitions")
    def remain_partitions(self) -> _builtins.int:
        """
        Indicates the number of remaining partitions.
        """
        return pulumi.get(self, "remain_partitions")

    @_builtins.property
    @pulumi.getter(name="topicMaxPartitions")
    def topic_max_partitions(self) -> _builtins.int:
        """
        Indicates the maximum number of partitions in a single topic.
        """
        return pulumi.get(self, "topic_max_partitions")

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Sequence['outputs.GetKafkaTopicsTopicResult']:
        """
        Indicates the topic list.
        """
        return pulumi.get(self, "topics")


class AwaitableGetKafkaTopicsResult(GetKafkaTopicsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaTopicsResult(
            id=self.id,
            instance_id=self.instance_id,
            max_partitions=self.max_partitions,
            name=self.name,
            region=self.region,
            remain_partitions=self.remain_partitions,
            topic_max_partitions=self.topic_max_partitions,
            topics=self.topics)


def get_kafka_topics(instance_id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaTopicsResult:
    """
    Use this data source to get the list of Kafka instance topics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dms.get_kafka_topics(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DMS kafka instance ID.
    :param _builtins.str name: Specifies the topic name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getKafkaTopics:getKafkaTopics', __args__, opts=opts, typ=GetKafkaTopicsResult).value

    return AwaitableGetKafkaTopicsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        max_partitions=pulumi.get(__ret__, 'max_partitions'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        remain_partitions=pulumi.get(__ret__, 'remain_partitions'),
        topic_max_partitions=pulumi.get(__ret__, 'topic_max_partitions'),
        topics=pulumi.get(__ret__, 'topics'))
def get_kafka_topics_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKafkaTopicsResult]:
    """
    Use this data source to get the list of Kafka instance topics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dms.get_kafka_topics(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DMS kafka instance ID.
    :param _builtins.str name: Specifies the topic name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getKafkaTopics:getKafkaTopics', __args__, opts=opts, typ=GetKafkaTopicsResult)
    return __ret__.apply(lambda __response__: GetKafkaTopicsResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        max_partitions=pulumi.get(__response__, 'max_partitions'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        remain_partitions=pulumi.get(__response__, 'remain_partitions'),
        topic_max_partitions=pulumi.get(__response__, 'topic_max_partitions'),
        topics=pulumi.get(__response__, 'topics')))
