# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['GroupV1Args', 'GroupV1']

@pulumi.input_type
class GroupV1Args:
    def __init__(__self__, *,
                 queue_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a GroupV1 resource.
        """
        pulumi.set(__self__, "queue_id", queue_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "queue_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _GroupV1State:
    def __init__(__self__, *,
                 available_deadletters: Optional[pulumi.Input[_builtins.int]] = None,
                 available_messages: Optional[pulumi.Input[_builtins.int]] = None,
                 consumed_messages: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 produced_deadletters: Optional[pulumi.Input[_builtins.int]] = None,
                 produced_messages: Optional[pulumi.Input[_builtins.int]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering GroupV1 resources.
        """
        if available_deadletters is not None:
            pulumi.set(__self__, "available_deadletters", available_deadletters)
        if available_messages is not None:
            pulumi.set(__self__, "available_messages", available_messages)
        if consumed_messages is not None:
            pulumi.set(__self__, "consumed_messages", consumed_messages)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if produced_deadletters is not None:
            pulumi.set(__self__, "produced_deadletters", produced_deadletters)
        if produced_messages is not None:
            pulumi.set(__self__, "produced_messages", produced_messages)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="availableDeadletters")
    def available_deadletters(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "available_deadletters")

    @available_deadletters.setter
    def available_deadletters(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "available_deadletters", value)

    @_builtins.property
    @pulumi.getter(name="availableMessages")
    def available_messages(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "available_messages")

    @available_messages.setter
    def available_messages(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "available_messages", value)

    @_builtins.property
    @pulumi.getter(name="consumedMessages")
    def consumed_messages(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "consumed_messages")

    @consumed_messages.setter
    def consumed_messages(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "consumed_messages", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="producedDeadletters")
    def produced_deadletters(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "produced_deadletters")

    @produced_deadletters.setter
    def produced_deadletters(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "produced_deadletters", value)

    @_builtins.property
    @pulumi.getter(name="producedMessages")
    def produced_messages(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "produced_messages")

    @produced_messages.setter
    def produced_messages(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "produced_messages", value)

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dms/groupV1:GroupV1")
class GroupV1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a GroupV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupV1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GroupV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GroupV1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupV1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupV1Args.__new__(GroupV1Args)

            __props__.__dict__["name"] = name
            if queue_id is None and not opts.urn:
                raise TypeError("Missing required property 'queue_id'")
            __props__.__dict__["queue_id"] = queue_id
            __props__.__dict__["region"] = region
            __props__.__dict__["available_deadletters"] = None
            __props__.__dict__["available_messages"] = None
            __props__.__dict__["consumed_messages"] = None
            __props__.__dict__["produced_deadletters"] = None
            __props__.__dict__["produced_messages"] = None
        super(GroupV1, __self__).__init__(
            'huaweicloud:Dms/groupV1:GroupV1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            available_deadletters: Optional[pulumi.Input[_builtins.int]] = None,
            available_messages: Optional[pulumi.Input[_builtins.int]] = None,
            consumed_messages: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            produced_deadletters: Optional[pulumi.Input[_builtins.int]] = None,
            produced_messages: Optional[pulumi.Input[_builtins.int]] = None,
            queue_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'GroupV1':
        """
        Get an existing GroupV1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupV1State.__new__(_GroupV1State)

        __props__.__dict__["available_deadletters"] = available_deadletters
        __props__.__dict__["available_messages"] = available_messages
        __props__.__dict__["consumed_messages"] = consumed_messages
        __props__.__dict__["name"] = name
        __props__.__dict__["produced_deadletters"] = produced_deadletters
        __props__.__dict__["produced_messages"] = produced_messages
        __props__.__dict__["queue_id"] = queue_id
        __props__.__dict__["region"] = region
        return GroupV1(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availableDeadletters")
    def available_deadletters(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "available_deadletters")

    @_builtins.property
    @pulumi.getter(name="availableMessages")
    def available_messages(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "available_messages")

    @_builtins.property
    @pulumi.getter(name="consumedMessages")
    def consumed_messages(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "consumed_messages")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="producedDeadletters")
    def produced_deadletters(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "produced_deadletters")

    @_builtins.property
    @pulumi.getter(name="producedMessages")
    def produced_messages(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "produced_messages")

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "queue_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

