# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RabbitmqVhostArgs', 'RabbitmqVhost']

@pulumi.input_type
class RabbitmqVhostArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RabbitmqVhost resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the vhost name. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RabbitmqVhostState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tracing: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering RabbitmqVhost resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the vhost name. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] tracing: Indicates whether the message tracing is enabled.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the message tracing is enabled.
        """
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tracing", value)


@pulumi.type_token("huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost")
class RabbitmqVhost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS RabbitMQ vhost resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        name = config.require_object("name")
        test = huaweicloud.dms.RabbitmqVhost("test",
            instance_id=instance_id,
            name=name)
        ```

        ## Import

        The RabbitMQ vhost can be imported using the `instance_id` and `name` separated by a slash or a comma, but if `name`

        contains slashes, the import ID can only be separated by a comma, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost test <instance_id>/<name>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost test <instance_id>,<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the vhost name. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqVhostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RabbitMQ vhost resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        name = config.require_object("name")
        test = huaweicloud.dms.RabbitmqVhost("test",
            instance_id=instance_id,
            name=name)
        ```

        ## Import

        The RabbitMQ vhost can be imported using the `instance_id` and `name` separated by a slash or a comma, but if `name`

        contains slashes, the import ID can only be separated by a comma, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost test <instance_id>/<name>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost test <instance_id>,<name>
        ```

        :param str resource_name: The name of the resource.
        :param RabbitmqVhostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqVhostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqVhostArgs.__new__(RabbitmqVhostArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tracing"] = None
        super(RabbitmqVhost, __self__).__init__(
            'huaweicloud:Dms/rabbitmqVhost:RabbitmqVhost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tracing: Optional[pulumi.Input[_builtins.bool]] = None) -> 'RabbitmqVhost':
        """
        Get an existing RabbitmqVhost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the vhost name. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] tracing: Indicates whether the message tracing is enabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqVhostState.__new__(_RabbitmqVhostState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["tracing"] = tracing
        return RabbitmqVhost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tracing(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the message tracing is enabled.
        """
        return pulumi.get(self, "tracing")

