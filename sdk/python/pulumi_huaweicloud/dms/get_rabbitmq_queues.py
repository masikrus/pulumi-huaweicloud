# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRabbitmqQueuesResult',
    'AwaitableGetRabbitmqQueuesResult',
    'get_rabbitmq_queues',
    'get_rabbitmq_queues_output',
]

@pulumi.output_type
class GetRabbitmqQueuesResult:
    """
    A collection of values returned by getRabbitmqQueues.
    """
    def __init__(__self__, id=None, instance_id=None, queues=None, region=None, vhost=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if queues and not isinstance(queues, list):
            raise TypeError("Expected argument 'queues' to be a list")
        pulumi.set(__self__, "queues", queues)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vhost and not isinstance(vhost, str):
            raise TypeError("Expected argument 'vhost' to be a str")
        pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Sequence['outputs.GetRabbitmqQueuesQueueResult']:
        """
        Indicates the list of queues.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> _builtins.str:
        return pulumi.get(self, "vhost")


class AwaitableGetRabbitmqQueuesResult(GetRabbitmqQueuesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRabbitmqQueuesResult(
            id=self.id,
            instance_id=self.instance_id,
            queues=self.queues,
            region=self.region,
            vhost=self.vhost)


def get_rabbitmq_queues(instance_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        vhost: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRabbitmqQueuesResult:
    """
    Use this data source to get the list of DMS RabbitMQ queues.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    vhost = config.require_object("vhost")
    test = huaweicloud.Dms.get_rabbitmq_queues(instance_id=instance_id,
        vhost=vhost)
    ```


    :param _builtins.str instance_id: Specifies the DMS RabbitMQ instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str vhost: Specifies the vhost name.
           
           > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['vhost'] = vhost
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dms/getRabbitmqQueues:getRabbitmqQueues', __args__, opts=opts, typ=GetRabbitmqQueuesResult).value

    return AwaitableGetRabbitmqQueuesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        queues=pulumi.get(__ret__, 'queues'),
        region=pulumi.get(__ret__, 'region'),
        vhost=pulumi.get(__ret__, 'vhost'))
def get_rabbitmq_queues_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               vhost: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRabbitmqQueuesResult]:
    """
    Use this data source to get the list of DMS RabbitMQ queues.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    vhost = config.require_object("vhost")
    test = huaweicloud.Dms.get_rabbitmq_queues(instance_id=instance_id,
        vhost=vhost)
    ```


    :param _builtins.str instance_id: Specifies the DMS RabbitMQ instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str vhost: Specifies the vhost name.
           
           > If `vhost` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['vhost'] = vhost
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dms/getRabbitmqQueues:getRabbitmqQueues', __args__, opts=opts, typ=GetRabbitmqQueuesResult)
    return __ret__.apply(lambda __response__: GetRabbitmqQueuesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        queues=pulumi.get(__response__, 'queues'),
        region=pulumi.get(__response__, 'region'),
        vhost=pulumi.get(__response__, 'vhost')))
