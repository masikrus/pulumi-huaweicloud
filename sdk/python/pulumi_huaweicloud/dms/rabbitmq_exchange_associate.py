# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RabbitmqExchangeAssociateArgs', 'RabbitmqExchangeAssociate']

@pulumi.input_type
class RabbitmqExchangeAssociateArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[_builtins.str],
                 destination_type: pulumi.Input[_builtins.str],
                 exchange: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 vhost: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RabbitmqExchangeAssociate resource.
        :param pulumi.Input[_builtins.str] destination: Specifies the name of a target exchange or queue.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the type of the binding target.
               The options are **Exchange** and **Queue**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] exchange: Specifies the exchange name. Changing this creates a new resource.
               
               > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] routing_key: Specifies the binding key-value. Changing this creates a new resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "exchange", exchange)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "vhost", vhost)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of a target exchange or queue.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the binding target.
        The options are **Exchange** and **Queue**. Changing this creates a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter
    def exchange(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the exchange name. Changing this creates a new resource.

        > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "exchange")

    @exchange.setter
    def exchange(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "exchange", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vhost", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the binding key-value. Changing this creates a new resource.
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_key", value)


@pulumi.input_type
class _RabbitmqExchangeAssociateState:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 properties_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RabbitmqExchangeAssociate resources.
        :param pulumi.Input[_builtins.str] destination: Specifies the name of a target exchange or queue.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the type of the binding target.
               The options are **Exchange** and **Queue**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] exchange: Specifies the exchange name. Changing this creates a new resource.
               
               > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] properties_key: The URL-translated routing key.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] routing_key: Specifies the binding key-value. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name. Changing this creates a new resource.
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if exchange is not None:
            pulumi.set(__self__, "exchange", exchange)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if properties_key is not None:
            pulumi.set(__self__, "properties_key", properties_key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a target exchange or queue.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the binding target.
        The options are **Exchange** and **Queue**. Changing this creates a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter
    def exchange(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the exchange name. Changing this creates a new resource.

        > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "exchange")

    @exchange.setter
    def exchange(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exchange", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="propertiesKey")
    def properties_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL-translated routing key.
        """
        return pulumi.get(self, "properties_key")

    @properties_key.setter
    def properties_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "properties_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the binding key-value. Changing this creates a new resource.
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_key", value)

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vhost", value)


@pulumi.type_token("huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate")
class RabbitmqExchangeAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS RabbitMQ exchange association resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        vhost = config.require_object("vhost")
        exchange = config.require_object("exchange")
        destination = config.require_object("destination")
        routing_key = config.require_object("routingKey")
        test = huaweicloud.dms.RabbitmqExchangeAssociate("test",
            instance_id=instance_id,
            vhost=vhost,
            exchange=exchange,
            destination_type="Queue",
            destination=destination,
            routing_key=routing_key)
        ```

        ## Import

        The RabbitMQ exchange association can be imported using the `instance_id`, `vhost`, `exchange`, `destination_type`,

        `destination` and `routing_key` separated by commas.

        If `routing_key` is empty e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate test <instance_id>,<vhost>,<exchange>,<destination_type>,<destination>
        ```

        If `routing_key` is specified e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate test <instance_id>,<vhost>,<exchange>,<destination_type>,<destination>,<routing_key>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination: Specifies the name of a target exchange or queue.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the type of the binding target.
               The options are **Exchange** and **Queue**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] exchange: Specifies the exchange name. Changing this creates a new resource.
               
               > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] routing_key: Specifies the binding key-value. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqExchangeAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RabbitMQ exchange association resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        vhost = config.require_object("vhost")
        exchange = config.require_object("exchange")
        destination = config.require_object("destination")
        routing_key = config.require_object("routingKey")
        test = huaweicloud.dms.RabbitmqExchangeAssociate("test",
            instance_id=instance_id,
            vhost=vhost,
            exchange=exchange,
            destination_type="Queue",
            destination=destination,
            routing_key=routing_key)
        ```

        ## Import

        The RabbitMQ exchange association can be imported using the `instance_id`, `vhost`, `exchange`, `destination_type`,

        `destination` and `routing_key` separated by commas.

        If `routing_key` is empty e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate test <instance_id>,<vhost>,<exchange>,<destination_type>,<destination>
        ```

        If `routing_key` is specified e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate test <instance_id>,<vhost>,<exchange>,<destination_type>,<destination>,<routing_key>
        ```

        :param str resource_name: The name of the resource.
        :param RabbitmqExchangeAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqExchangeAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exchange: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_key: Optional[pulumi.Input[_builtins.str]] = None,
                 vhost: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqExchangeAssociateArgs.__new__(RabbitmqExchangeAssociateArgs)

            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if destination_type is None and not opts.urn:
                raise TypeError("Missing required property 'destination_type'")
            __props__.__dict__["destination_type"] = destination_type
            if exchange is None and not opts.urn:
                raise TypeError("Missing required property 'exchange'")
            __props__.__dict__["exchange"] = exchange
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["routing_key"] = routing_key
            if vhost is None and not opts.urn:
                raise TypeError("Missing required property 'vhost'")
            __props__.__dict__["vhost"] = vhost
            __props__.__dict__["properties_key"] = None
        super(RabbitmqExchangeAssociate, __self__).__init__(
            'huaweicloud:Dms/rabbitmqExchangeAssociate:RabbitmqExchangeAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            destination_type: Optional[pulumi.Input[_builtins.str]] = None,
            exchange: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            properties_key: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            routing_key: Optional[pulumi.Input[_builtins.str]] = None,
            vhost: Optional[pulumi.Input[_builtins.str]] = None) -> 'RabbitmqExchangeAssociate':
        """
        Get an existing RabbitmqExchangeAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination: Specifies the name of a target exchange or queue.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the type of the binding target.
               The options are **Exchange** and **Queue**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] exchange: Specifies the exchange name. Changing this creates a new resource.
               
               > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DMS RabbitMQ instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] properties_key: The URL-translated routing key.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] routing_key: Specifies the binding key-value. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vhost: Specifies the vhost name. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqExchangeAssociateState.__new__(_RabbitmqExchangeAssociateState)

        __props__.__dict__["destination"] = destination
        __props__.__dict__["destination_type"] = destination_type
        __props__.__dict__["exchange"] = exchange
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["properties_key"] = properties_key
        __props__.__dict__["region"] = region
        __props__.__dict__["routing_key"] = routing_key
        __props__.__dict__["vhost"] = vhost
        return RabbitmqExchangeAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of a target exchange or queue.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the binding target.
        The options are **Exchange** and **Queue**. Changing this creates a new resource.
        """
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter
    def exchange(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the exchange name. Changing this creates a new resource.

        > If `vhost` and `exchange` has slashes, please change them into **\\_\\_F_SLASH\\_\\_**.
        """
        return pulumi.get(self, "exchange")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DMS RabbitMQ instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="propertiesKey")
    def properties_key(self) -> pulumi.Output[_builtins.str]:
        """
        The URL-translated routing key.
        """
        return pulumi.get(self, "properties_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the binding key-value. Changing this creates a new resource.
        """
        return pulumi.get(self, "routing_key")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the vhost name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")

