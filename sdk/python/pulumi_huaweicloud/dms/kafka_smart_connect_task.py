# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KafkaSmartConnectTaskArgs', 'KafkaSmartConnectTask']

@pulumi.input_type
class KafkaSmartConnectTaskArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[_builtins.str],
                 connector_id: pulumi.Input[_builtins.str],
                 consumer_strategy: pulumi.Input[_builtins.str],
                 deliver_time_interval: pulumi.Input[_builtins.int],
                 destination_type: pulumi.Input[_builtins.str],
                 obs_bucket_name: pulumi.Input[_builtins.str],
                 partition_format: pulumi.Input[_builtins.str],
                 secret_key: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.str],
                 task_name: pulumi.Input[_builtins.str],
                 destination_file_type: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_path: Optional[pulumi.Input[_builtins.str]] = None,
                 record_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[_builtins.str]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KafkaSmartConnectTask resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the connector ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] consumer_strategy: Specifies the consumer strategy of the smart connect task.
               Changing this parameter will create a new resource.
               Value options:
               + **latest**: Read the latest data.
               + **earliest**: Read the earliest data.
        :param pulumi.Input[_builtins.int] deliver_time_interval: Specifies the deliver time interval of the smart connect task.
               The value should be between 30 and 900. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Only **OBS** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: Specifies the obs bucket name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] partition_format: Specifies the time directory format of the smart connect task.
               Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task.
               Only **BLOB** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_file_type: Specifies the destination file type of the smart connect task.
               Only **TEXT** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_path: Specifies the obs path of the smart connect task.
               Obs path is separated by a slash. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] record_delimiter: Specifies the record delimiter of the smart connect task.
               Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics: Specifies the topic names separated by a comma of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "consumer_strategy", consumer_strategy)
        pulumi.set(__self__, "deliver_time_interval", deliver_time_interval)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        pulumi.set(__self__, "partition_format", partition_format)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "task_name", task_name)
        if destination_file_type is not None:
            pulumi.set(__self__, "destination_file_type", destination_file_type)
        if obs_path is not None:
            pulumi.set(__self__, "obs_path", obs_path)
        if record_delimiter is not None:
            pulumi.set(__self__, "record_delimiter", record_delimiter)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_regex is not None:
            pulumi.set(__self__, "topics_regex", topics_regex)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the connector ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="consumerStrategy")
    def consumer_strategy(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the consumer strategy of the smart connect task.
        Changing this parameter will create a new resource.
        Value options:
        + **latest**: Read the latest data.
        + **earliest**: Read the earliest data.
        """
        return pulumi.get(self, "consumer_strategy")

    @consumer_strategy.setter
    def consumer_strategy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "consumer_strategy", value)

    @_builtins.property
    @pulumi.getter(name="deliverTimeInterval")
    def deliver_time_interval(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the deliver time interval of the smart connect task.
        The value should be between 30 and 900. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "deliver_time_interval")

    @deliver_time_interval.setter
    def deliver_time_interval(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "deliver_time_interval", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the destination type of the smart connect task.
        Only **OBS** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the obs bucket name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_bucket_name")

    @obs_bucket_name.setter
    def obs_bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "obs_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="partitionFormat")
    def partition_format(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the time directory format of the smart connect task.
        Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "partition_format")

    @partition_format.setter
    def partition_format(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "partition_format", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the secret access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the source type of the smart connect task.
        Only **BLOB** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="destinationFileType")
    def destination_file_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination file type of the smart connect task.
        Only **TEXT** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_file_type")

    @destination_file_type.setter
    def destination_file_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_file_type", value)

    @_builtins.property
    @pulumi.getter(name="obsPath")
    def obs_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the obs path of the smart connect task.
        Obs path is separated by a slash. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_path")

    @obs_path.setter
    def obs_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_path", value)

    @_builtins.property
    @pulumi.getter(name="recordDelimiter")
    def record_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the record delimiter of the smart connect task.
        Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "record_delimiter")

    @record_delimiter.setter
    def record_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_delimiter", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic names separated by a comma of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics", value)

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

    @topics_regex.setter
    def topics_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics_regex", value)


@pulumi.input_type
class _KafkaSmartConnectTaskState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 consumer_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deliver_time_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_file_type: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_path: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_format: Optional[pulumi.Input[_builtins.str]] = None,
                 record_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[_builtins.str]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KafkaSmartConnectTask resources.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the connector ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] consumer_strategy: Specifies the consumer strategy of the smart connect task.
               Changing this parameter will create a new resource.
               Value options:
               + **latest**: Read the latest data.
               + **earliest**: Read the earliest data.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the smart connect task.
        :param pulumi.Input[_builtins.int] deliver_time_interval: Specifies the deliver time interval of the smart connect task.
               The value should be between 30 and 900. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_file_type: Specifies the destination file type of the smart connect task.
               Only **TEXT** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Only **OBS** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: Specifies the obs bucket name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_path: Specifies the obs path of the smart connect task.
               Obs path is separated by a slash. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] partition_format: Specifies the time directory format of the smart connect task.
               Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] record_delimiter: Specifies the record delimiter of the smart connect task.
               Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task.
               Only **BLOB** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the smart connect task. The value can be **RUNNING**, **PAUSED**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics: Specifies the topic names separated by a comma of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if consumer_strategy is not None:
            pulumi.set(__self__, "consumer_strategy", consumer_strategy)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deliver_time_interval is not None:
            pulumi.set(__self__, "deliver_time_interval", deliver_time_interval)
        if destination_file_type is not None:
            pulumi.set(__self__, "destination_file_type", destination_file_type)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if obs_path is not None:
            pulumi.set(__self__, "obs_path", obs_path)
        if partition_format is not None:
            pulumi.set(__self__, "partition_format", partition_format)
        if record_delimiter is not None:
            pulumi.set(__self__, "record_delimiter", record_delimiter)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_regex is not None:
            pulumi.set(__self__, "topics_regex", topics_regex)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the connector ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="consumerStrategy")
    def consumer_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the consumer strategy of the smart connect task.
        Changing this parameter will create a new resource.
        Value options:
        + **latest**: Read the latest data.
        + **earliest**: Read the earliest data.
        """
        return pulumi.get(self, "consumer_strategy")

    @consumer_strategy.setter
    def consumer_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "consumer_strategy", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the smart connect task.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="deliverTimeInterval")
    def deliver_time_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the deliver time interval of the smart connect task.
        The value should be between 30 and 900. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "deliver_time_interval")

    @deliver_time_interval.setter
    def deliver_time_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "deliver_time_interval", value)

    @_builtins.property
    @pulumi.getter(name="destinationFileType")
    def destination_file_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination file type of the smart connect task.
        Only **TEXT** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_file_type")

    @destination_file_type.setter
    def destination_file_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_file_type", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination type of the smart connect task.
        Only **OBS** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the obs bucket name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_bucket_name")

    @obs_bucket_name.setter
    def obs_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="obsPath")
    def obs_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the obs path of the smart connect task.
        Obs path is separated by a slash. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_path")

    @obs_path.setter
    def obs_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_path", value)

    @_builtins.property
    @pulumi.getter(name="partitionFormat")
    def partition_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time directory format of the smart connect task.
        Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "partition_format")

    @partition_format.setter
    def partition_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "partition_format", value)

    @_builtins.property
    @pulumi.getter(name="recordDelimiter")
    def record_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the record delimiter of the smart connect task.
        Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "record_delimiter")

    @record_delimiter.setter
    def record_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_delimiter", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the secret access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source type of the smart connect task.
        Only **BLOB** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the smart connect task. The value can be **RUNNING**, **PAUSED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic names separated by a comma of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics", value)

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

    @topics_regex.setter
    def topics_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topics_regex", value)


@pulumi.type_token("huaweicloud:Dms/kafkaSmartConnectTask:KafkaSmartConnectTask")
class KafkaSmartConnectTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 consumer_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 deliver_time_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_file_type: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_path: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_format: Optional[pulumi.Input[_builtins.str]] = None,
                 record_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[_builtins.str]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage DMS kafka smart connect task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connector_id = config.require_object("connectorId")
        access_key = config.require_object("accessKey")
        secret_key = config.require_object("secretKey")
        test = huaweicloud.dms.KafkaSmartConnectTask("test",
            connector_id=connector_id,
            source_type="BLOB",
            task_name="task_test",
            destination_type="OBS",
            topics="topic-test",
            consumer_strategy="latest",
            destination_file_type="TEXT",
            access_key=access_key,
            secret_key=secret_key,
            obs_bucket_name="bucket-test",
            obs_path="path-test",
            partition_format="yyyy/MM/dd/HH/mm",
            record_delimiter="\\n",
            deliver_time_interval=300)
        ```

        ## Import

        The kafka smart connect task can be imported using the kafka instance `connector_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaSmartConnectTask:KafkaSmartConnectTask test <connector_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `source_type`, `access_key` and `secret_key`.

        It is generally recommended running `pulumi preview` after importing a kafka smart connect task.

        You can then decide if changes should be applied to the kafka smart connect task, or the resource definition

        should be updated to align with the kafka smart connect task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dms_kafka_smart_connect_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_type, access_key, secret_key,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the connector ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] consumer_strategy: Specifies the consumer strategy of the smart connect task.
               Changing this parameter will create a new resource.
               Value options:
               + **latest**: Read the latest data.
               + **earliest**: Read the earliest data.
        :param pulumi.Input[_builtins.int] deliver_time_interval: Specifies the deliver time interval of the smart connect task.
               The value should be between 30 and 900. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_file_type: Specifies the destination file type of the smart connect task.
               Only **TEXT** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Only **OBS** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: Specifies the obs bucket name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_path: Specifies the obs path of the smart connect task.
               Obs path is separated by a slash. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] partition_format: Specifies the time directory format of the smart connect task.
               Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] record_delimiter: Specifies the record delimiter of the smart connect task.
               Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task.
               Only **BLOB** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics: Specifies the topic names separated by a comma of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaSmartConnectTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage DMS kafka smart connect task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connector_id = config.require_object("connectorId")
        access_key = config.require_object("accessKey")
        secret_key = config.require_object("secretKey")
        test = huaweicloud.dms.KafkaSmartConnectTask("test",
            connector_id=connector_id,
            source_type="BLOB",
            task_name="task_test",
            destination_type="OBS",
            topics="topic-test",
            consumer_strategy="latest",
            destination_file_type="TEXT",
            access_key=access_key,
            secret_key=secret_key,
            obs_bucket_name="bucket-test",
            obs_path="path-test",
            partition_format="yyyy/MM/dd/HH/mm",
            record_delimiter="\\n",
            deliver_time_interval=300)
        ```

        ## Import

        The kafka smart connect task can be imported using the kafka instance `connector_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dms/kafkaSmartConnectTask:KafkaSmartConnectTask test <connector_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `source_type`, `access_key` and `secret_key`.

        It is generally recommended running `pulumi preview` after importing a kafka smart connect task.

        You can then decide if changes should be applied to the kafka smart connect task, or the resource definition

        should be updated to align with the kafka smart connect task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dms_kafka_smart_connect_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_type, access_key, secret_key,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param KafkaSmartConnectTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaSmartConnectTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 consumer_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 deliver_time_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_file_type: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_path: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_format: Optional[pulumi.Input[_builtins.str]] = None,
                 record_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topics: Optional[pulumi.Input[_builtins.str]] = None,
                 topics_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaSmartConnectTaskArgs.__new__(KafkaSmartConnectTaskArgs)

            if access_key is None and not opts.urn:
                raise TypeError("Missing required property 'access_key'")
            __props__.__dict__["access_key"] = access_key
            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            if consumer_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_strategy'")
            __props__.__dict__["consumer_strategy"] = consumer_strategy
            if deliver_time_interval is None and not opts.urn:
                raise TypeError("Missing required property 'deliver_time_interval'")
            __props__.__dict__["deliver_time_interval"] = deliver_time_interval
            __props__.__dict__["destination_file_type"] = destination_file_type
            if destination_type is None and not opts.urn:
                raise TypeError("Missing required property 'destination_type'")
            __props__.__dict__["destination_type"] = destination_type
            if obs_bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'obs_bucket_name'")
            __props__.__dict__["obs_bucket_name"] = obs_bucket_name
            __props__.__dict__["obs_path"] = obs_path
            if partition_format is None and not opts.urn:
                raise TypeError("Missing required property 'partition_format'")
            __props__.__dict__["partition_format"] = partition_format
            __props__.__dict__["record_delimiter"] = record_delimiter
            __props__.__dict__["region"] = region
            if secret_key is None and not opts.urn:
                raise TypeError("Missing required property 'secret_key'")
            __props__.__dict__["secret_key"] = None if secret_key is None else pulumi.Output.secret(secret_key)
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["topics"] = topics
            __props__.__dict__["topics_regex"] = topics_regex
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(KafkaSmartConnectTask, __self__).__init__(
            'huaweicloud:Dms/kafkaSmartConnectTask:KafkaSmartConnectTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[_builtins.str]] = None,
            connector_id: Optional[pulumi.Input[_builtins.str]] = None,
            consumer_strategy: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            deliver_time_interval: Optional[pulumi.Input[_builtins.int]] = None,
            destination_file_type: Optional[pulumi.Input[_builtins.str]] = None,
            destination_type: Optional[pulumi.Input[_builtins.str]] = None,
            obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            obs_path: Optional[pulumi.Input[_builtins.str]] = None,
            partition_format: Optional[pulumi.Input[_builtins.str]] = None,
            record_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            topics: Optional[pulumi.Input[_builtins.str]] = None,
            topics_regex: Optional[pulumi.Input[_builtins.str]] = None) -> 'KafkaSmartConnectTask':
        """
        Get an existing KafkaSmartConnectTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: Specifies the access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the connector ID of the kafka instance.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] consumer_strategy: Specifies the consumer strategy of the smart connect task.
               Changing this parameter will create a new resource.
               Value options:
               + **latest**: Read the latest data.
               + **earliest**: Read the earliest data.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the smart connect task.
        :param pulumi.Input[_builtins.int] deliver_time_interval: Specifies the deliver time interval of the smart connect task.
               The value should be between 30 and 900. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_file_type: Specifies the destination file type of the smart connect task.
               Only **TEXT** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] destination_type: Specifies the destination type of the smart connect task.
               Only **OBS** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: Specifies the obs bucket name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] obs_path: Specifies the obs path of the smart connect task.
               Obs path is separated by a slash. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] partition_format: Specifies the time directory format of the smart connect task.
               Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] record_delimiter: Specifies the record delimiter of the smart connect task.
               Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] secret_key: Specifies the secret access key used to access the OBS bucket.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the source type of the smart connect task.
               Only **BLOB** is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the smart connect task. The value can be **RUNNING**, **PAUSED**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics: Specifies the topic names separated by a comma of the smart connect task.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topics_regex: Specifies the regular expression of topic name for the smart connect task.
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaSmartConnectTaskState.__new__(_KafkaSmartConnectTaskState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["consumer_strategy"] = consumer_strategy
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deliver_time_interval"] = deliver_time_interval
        __props__.__dict__["destination_file_type"] = destination_file_type
        __props__.__dict__["destination_type"] = destination_type
        __props__.__dict__["obs_bucket_name"] = obs_bucket_name
        __props__.__dict__["obs_path"] = obs_path
        __props__.__dict__["partition_format"] = partition_format
        __props__.__dict__["record_delimiter"] = record_delimiter
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["status"] = status
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["topics"] = topics
        __props__.__dict__["topics_regex"] = topics_regex
        return KafkaSmartConnectTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the connector ID of the kafka instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="consumerStrategy")
    def consumer_strategy(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the consumer strategy of the smart connect task.
        Changing this parameter will create a new resource.
        Value options:
        + **latest**: Read the latest data.
        + **earliest**: Read the earliest data.
        """
        return pulumi.get(self, "consumer_strategy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time of the smart connect task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deliverTimeInterval")
    def deliver_time_interval(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the deliver time interval of the smart connect task.
        The value should be between 30 and 900. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "deliver_time_interval")

    @_builtins.property
    @pulumi.getter(name="destinationFileType")
    def destination_file_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the destination file type of the smart connect task.
        Only **TEXT** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_file_type")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the destination type of the smart connect task.
        Only **OBS** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the obs bucket name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_bucket_name")

    @_builtins.property
    @pulumi.getter(name="obsPath")
    def obs_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the obs path of the smart connect task.
        Obs path is separated by a slash. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "obs_path")

    @_builtins.property
    @pulumi.getter(name="partitionFormat")
    def partition_format(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the time directory format of the smart connect task.
        Value options: **yyyy**, **yyyy/MM**, **yyyy/MM/dd**, **yyyy/MM/dd/HH**, **yyyy/MM/dd/HH/mm**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "partition_format")

    @_builtins.property
    @pulumi.getter(name="recordDelimiter")
    def record_delimiter(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the record delimiter of the smart connect task.
        Value options: **,**, **;**, **|**, **\\n**, **""**. Defaults to **\\n**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "record_delimiter")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the secret access key used to access the OBS bucket.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the source type of the smart connect task.
        Only **BLOB** is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the smart connect task. The value can be **RUNNING**, **PAUSED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter
    def topics(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the topic names separated by a comma of the smart connect task.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topics")

    @_builtins.property
    @pulumi.getter(name="topicsRegex")
    def topics_regex(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression of topic name for the smart connect task.
        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `topics`, `topics_regex` should be specified.
        """
        return pulumi.get(self, "topics_regex")

