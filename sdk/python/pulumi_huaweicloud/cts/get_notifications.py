# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNotificationsResult',
    'AwaitableGetNotificationsResult',
    'get_notifications',
    'get_notifications_output',
]

@pulumi.output_type
class GetNotificationsResult:
    """
    A collection of values returned by getNotifications.
    """
    def __init__(__self__, id=None, name=None, notification_id=None, notifications=None, operation_type=None, region=None, status=None, topic_id=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notification_id and not isinstance(notification_id, str):
            raise TypeError("Expected argument 'notification_id' to be a str")
        pulumi.set(__self__, "notification_id", notification_id)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if operation_type and not isinstance(operation_type, str):
            raise TypeError("Expected argument 'operation_type' to be a str")
        pulumi.set(__self__, "operation_type", operation_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The CTS key event notification name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationId")
    def notification_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "notification_id")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetNotificationsNotificationResult']:
        """
        All CTS key event notifications that match the filter parameters.
        The notifications structure is documented below.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[_builtins.str]:
        """
        The type of operation.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of CTS key event notification.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[_builtins.str]:
        """
        The URN of the topic which CTS key event notification uses.
        """
        return pulumi.get(self, "topic_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetNotificationsResult(GetNotificationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotificationsResult(
            id=self.id,
            name=self.name,
            notification_id=self.notification_id,
            notifications=self.notifications,
            operation_type=self.operation_type,
            region=self.region,
            status=self.status,
            topic_id=self.topic_id,
            type=self.type)


def get_notifications(name: Optional[_builtins.str] = None,
                      notification_id: Optional[_builtins.str] = None,
                      operation_type: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      status: Optional[_builtins.str] = None,
                      topic_id: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotificationsResult:
    """
    Use this data source to get the list of CTS key event notifications within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    notification_type = config.require_object("notificationType")
    test = huaweicloud.Cts.get_notifications(type=notification_type)
    ```


    :param _builtins.str name: Specifies the name of CTS key event notification.
    :param _builtins.str notification_id: Specifies The ID of the CTS key event notification.
    :param _builtins.str operation_type: Specifies the type of operation that will send notifications.
           The value cand be **customized** or **complete**.
    :param _builtins.str region: Specifies the region in which to query the CTS key event notifications.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of CTS key event notification.
           The value can be **enabled** or **disabled**.
    :param _builtins.str topic_id: Specifies the URN of the topic which CTS key event notification uses.
    :param _builtins.str type: Specifies the type of CTS key event notification. The value can be **smn** or **fun**.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['notificationId'] = notification_id
    __args__['operationType'] = operation_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['topicId'] = topic_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getNotifications:getNotifications', __args__, opts=opts, typ=GetNotificationsResult).value

    return AwaitableGetNotificationsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notification_id=pulumi.get(__ret__, 'notification_id'),
        notifications=pulumi.get(__ret__, 'notifications'),
        operation_type=pulumi.get(__ret__, 'operation_type'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        type=pulumi.get(__ret__, 'type'))
def get_notifications_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             notification_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             operation_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             topic_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNotificationsResult]:
    """
    Use this data source to get the list of CTS key event notifications within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    notification_type = config.require_object("notificationType")
    test = huaweicloud.Cts.get_notifications(type=notification_type)
    ```


    :param _builtins.str name: Specifies the name of CTS key event notification.
    :param _builtins.str notification_id: Specifies The ID of the CTS key event notification.
    :param _builtins.str operation_type: Specifies the type of operation that will send notifications.
           The value cand be **customized** or **complete**.
    :param _builtins.str region: Specifies the region in which to query the CTS key event notifications.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of CTS key event notification.
           The value can be **enabled** or **disabled**.
    :param _builtins.str topic_id: Specifies the URN of the topic which CTS key event notification uses.
    :param _builtins.str type: Specifies the type of CTS key event notification. The value can be **smn** or **fun**.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['notificationId'] = notification_id
    __args__['operationType'] = operation_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['topicId'] = topic_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getNotifications:getNotifications', __args__, opts=opts, typ=GetNotificationsResult)
    return __ret__.apply(lambda __response__: GetNotificationsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        notification_id=pulumi.get(__response__, 'notification_id'),
        notifications=pulumi.get(__response__, 'notifications'),
        operation_type=pulumi.get(__response__, 'operation_type'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        topic_id=pulumi.get(__response__, 'topic_id'),
        type=pulumi.get(__response__, 'type')))
