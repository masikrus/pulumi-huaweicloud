# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'NotificationFilter',
    'NotificationOperation',
    'NotificationOperationUser',
    'GetNotificationsNotificationResult',
    'GetNotificationsNotificationFilterResult',
    'GetNotificationsNotificationOperationResult',
    'GetNotificationsNotificationOperationUserResult',
    'GetOperationsOperationResult',
    'GetQuotasResourceResult',
    'GetResourceTagsFilterMatchResult',
    'GetResourceTagsFilterResourceResult',
    'GetResourceTagsFilterResourceTagResult',
    'GetResourceTagsFilterTagResult',
    'GetResourceTagsTagResult',
    'GetResourcesResourceResult',
    'GetTagsTagResult',
    'GetTracesTraceResult',
    'GetTracesTraceUserResult',
    'GetTracesTraceUserDomainResult',
    'GetTrackersTrackerResult',
    'GetTrackersTrackerDataBucketResult',
    'GetTrackersTrackerLtResult',
    'GetTrackersTrackerManagementEventSelectorResult',
    'GetTrackersTrackerObsInfoResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class NotificationFilter(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 rules: Sequence[_builtins.str]):
        """
        :param _builtins.str condition: Specifies the relationship between multiple rules. The valid values are as follows:
               + **AND**: Effective after all filtering conditions are met.
               + **OR**: Effective when any one of the conditions is met.
        :param Sequence[_builtins.str] rules: Specifies an array of filtering rules. It consists of three parts,
               the first part is the **key**, the second part is the **rule**, and the third part is the **value**,
               the format is: **key != value**.
               + The **key** can be: **api_version**, **code**, **trace_rating**, **trace_type**, **resource_id** and
               **resource_name**.
               When the key is **api_version**, the value needs to follow the regular constraint: **^ (a-zA-Z0-9_ -.) {1,64}$**.
               When the key is **code**, the length range of value is from `1` to `256`.
               When the key is **trace_rating**, the value can be **normal**, **warning** or **incident**.
               When the key is **trace_type**, the value can be **ConsoleAction**, **ApiCall** or **SystemAction**.
               When the key is **resource_id**, the length range of value is from `1` to `350`.
               When the key is **resource_name**, the length range of value is from `1` to `256`.
               + The **rule** can be: **!=** or **=**.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        Specifies the relationship between multiple rules. The valid values are as follows:
        + **AND**: Effective after all filtering conditions are met.
        + **OR**: Effective when any one of the conditions is met.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of filtering rules. It consists of three parts,
        the first part is the **key**, the second part is the **rule**, and the third part is the **value**,
        the format is: **key != value**.
        + The **key** can be: **api_version**, **code**, **trace_rating**, **trace_type**, **resource_id** and
        **resource_name**.
        When the key is **api_version**, the value needs to follow the regular constraint: **^ (a-zA-Z0-9_ -.) {1,64}$**.
        When the key is **code**, the length range of value is from `1` to `256`.
        When the key is **trace_rating**, the value can be **normal**, **warning** or **incident**.
        When the key is **trace_type**, the value can be **ConsoleAction**, **ApiCall** or **SystemAction**.
        When the key is **resource_id**, the length range of value is from `1` to `350`.
        When the key is **resource_name**, the length range of value is from `1` to `256`.
        + The **rule** can be: **!=** or **=**.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class NotificationOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "traceNames":
            suggest = "trace_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: _builtins.str,
                 service: _builtins.str,
                 trace_names: Sequence[_builtins.str]):
        """
        :param _builtins.str resource: Specifies the resource type.
        :param _builtins.str service: Specifies the cloud service.
        :param Sequence[_builtins.str] trace_names: Specifies an array of trace names.
               
               <a name="CTS_Notification_OperationUsers"></a>
               The `operation_users` block supports:
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Specifies the cloud service.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of trace names.

        <a name="CTS_Notification_OperationUsers"></a>
        The `operation_users` block supports:
        """
        return pulumi.get(self, "trace_names")


@pulumi.output_type
class NotificationOperationUser(dict):
    def __init__(__self__, *,
                 group: _builtins.str,
                 users: Sequence[_builtins.str]):
        """
        :param _builtins.str group: Specifies the IAM user group name.
        :param Sequence[_builtins.str] users: Specifies an array of IAM users in the group.
               
               <a name="CTS_Notification_Filter"></a>
               The `filter` block supports:
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Specifies the IAM user group name.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of IAM users in the group.

        <a name="CTS_Notification_Filter"></a>
        The `filter` block supports:
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetNotificationsNotificationResult(dict):
    def __init__(__self__, *,
                 agency_name: _builtins.str,
                 created_at: _builtins.str,
                 filters: Sequence['outputs.GetNotificationsNotificationFilterResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 operation_type: _builtins.str,
                 operation_users: Sequence['outputs.GetNotificationsNotificationOperationUserResult'],
                 operations: Sequence['outputs.GetNotificationsNotificationOperationResult'],
                 status: _builtins.str,
                 topic_id: _builtins.str):
        """
        :param _builtins.str agency_name: The cloud service agency name.
        :param _builtins.str created_at: The creation time of the CTS key event notification.
        :param Sequence['GetNotificationsNotificationFilterArgs'] filters: Advanced filtering conditions for the CTS key event notification.
               The filter structure is documented below.
        :param _builtins.str id: The ID of the CTS key event notification.
        :param _builtins.str name: Specifies the name of CTS key event notification.
        :param _builtins.str operation_type: Specifies the type of operation that will send notifications.
               The value cand be **customized** or **complete**.
        :param Sequence['GetNotificationsNotificationOperationUserArgs'] operation_users: An array of users. Notifications will be sent when specified users
               perform specified operations.
               The operation_users structure is documented below.
        :param Sequence['GetNotificationsNotificationOperationArgs'] operations: An array of operations that will trigger notifications.
               The operations structure is documented below.
        :param _builtins.str status: Specifies the status of CTS key event notification.
               The value can be **enabled** or **disabled**.
        :param _builtins.str topic_id: Specifies the URN of the topic which CTS key event notification uses.
        """
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "operation_users", operation_users)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topic_id", topic_id)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> _builtins.str:
        """
        The cloud service agency name.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the CTS key event notification.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetNotificationsNotificationFilterResult']:
        """
        Advanced filtering conditions for the CTS key event notification.
        The filter structure is documented below.
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the CTS key event notification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of CTS key event notification.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        """
        Specifies the type of operation that will send notifications.
        The value cand be **customized** or **complete**.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="operationUsers")
    def operation_users(self) -> Sequence['outputs.GetNotificationsNotificationOperationUserResult']:
        """
        An array of users. Notifications will be sent when specified users
        perform specified operations.
        The operation_users structure is documented below.
        """
        return pulumi.get(self, "operation_users")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetNotificationsNotificationOperationResult']:
        """
        An array of operations that will trigger notifications.
        The operations structure is documented below.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of CTS key event notification.
        The value can be **enabled** or **disabled**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> _builtins.str:
        """
        Specifies the URN of the topic which CTS key event notification uses.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetNotificationsNotificationFilterResult(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 rules: Sequence[_builtins.str]):
        """
        :param _builtins.str condition: The relation between the rules.
        :param Sequence[_builtins.str] rules: The list of filter rules.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        The relation between the rules.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence[_builtins.str]:
        """
        The list of filter rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetNotificationsNotificationOperationResult(dict):
    def __init__(__self__, *,
                 resource: _builtins.str,
                 service: _builtins.str,
                 trace_names: Sequence[_builtins.str]):
        """
        :param _builtins.str resource: The type of resource.
        :param _builtins.str service: The type of cloud service.
        :param Sequence[_builtins.str] trace_names: An array of trace names.
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        """
        The type of resource.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        The type of cloud service.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> Sequence[_builtins.str]:
        """
        An array of trace names.
        """
        return pulumi.get(self, "trace_names")


@pulumi.output_type
class GetNotificationsNotificationOperationUserResult(dict):
    def __init__(__self__, *,
                 group: _builtins.str,
                 users: Sequence[_builtins.str]):
        """
        :param _builtins.str group: The IAM user group.
        :param Sequence[_builtins.str] users: An array of IAM user names in the group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        The IAM user group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence[_builtins.str]:
        """
        An array of IAM user names in the group.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetOperationsOperationResult(dict):
    def __init__(__self__, *,
                 operation_lists: Sequence[_builtins.str],
                 resource_type: _builtins.str,
                 service_type: _builtins.str):
        """
        :param Sequence[_builtins.str] operation_lists: The array of operation names.
        :param _builtins.str resource_type: Specifies the type of the resource on which operations are performed.
               If this parameter is used, `service_type` is mandatory.
        :param _builtins.str service_type: Specifies the type of the cloud service on which operations are performed.
        """
        pulumi.set(__self__, "operation_lists", operation_lists)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="operationLists")
    def operation_lists(self) -> Sequence[_builtins.str]:
        """
        The array of operation names.
        """
        return pulumi.get(self, "operation_lists")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the type of the resource on which operations are performed.
        If this parameter is used, `service_type` is mandatory.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Specifies the type of the cloud service on which operations are performed.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetQuotasResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The total number of resources.
        :param _builtins.str type: The resource type.
        :param _builtins.int used: The number of used resources.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The total number of resources.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of used resources.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourceTagsFilterMatchResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the match key.  
               The valid values is **resource_name**.
        :param _builtins.str value: Specifies the match value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the match key.  
        The valid values is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the match value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceTagsFilterResourceResult(dict):
    def __init__(__self__, *,
                 detail: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 tags: Sequence['outputs.GetResourceTagsFilterResourceTagResult']):
        """
        :param _builtins.str detail: The detailed information of the resource.
        :param _builtins.str id: The ID of the resource.
        :param _builtins.str name: The name of the resource.
        :param Sequence['GetResourceTagsFilterResourceTagArgs'] tags: Specifies the tag list for filtering resources.  
               The tags structure is documented below.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        The detailed information of the resource.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceTagsFilterResourceTagResult']:
        """
        Specifies the tag list for filtering resources.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceTagsFilterResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the match key.  
               The valid values is **resource_name**.
        :param _builtins.str value: Specifies the match value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.  
        The valid values is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the match value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceTagsFilterTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the match key.  
               The valid values is **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the tag values.
               
               <a name="cts_filter_resource_matches_arg"></a>
               The `matches` block supports:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the match key.  
        The valid values is **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the tag values.

        <a name="cts_filter_resource_matches_arg"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The tag key.
        :param _builtins.str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourcesResourceResult(dict):
    def __init__(__self__, *,
                 resources: Sequence[_builtins.str],
                 service_type: _builtins.str):
        """
        :param Sequence[_builtins.str] resources: The resources corresponding to the cloud services.
        :param _builtins.str service_type: The cloud service type.
        """
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence[_builtins.str]:
        """
        The resources corresponding to the cloud services.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The cloud service type.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tag key.
        :param Sequence[_builtins.str] values: The list of tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTracesTraceResult(dict):
    def __init__(__self__, *,
                 api_version: _builtins.str,
                 code: _builtins.str,
                 endpoint: _builtins.str,
                 location_info: _builtins.str,
                 message: _builtins.str,
                 operation_id: _builtins.str,
                 read_only: _builtins.bool,
                 record_time: _builtins.str,
                 request: _builtins.str,
                 request_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 resource_url: _builtins.str,
                 response: _builtins.str,
                 service_type: _builtins.str,
                 source_ip: _builtins.str,
                 time: _builtins.str,
                 trace_id: _builtins.str,
                 trace_name: _builtins.str,
                 trace_rating: _builtins.str,
                 trace_type: _builtins.str,
                 users: Sequence['outputs.GetTracesTraceUserResult']):
        """
        :param _builtins.str api_version: The version of the API called in the trace.
        :param _builtins.str code: The returned HTTP status code of the recorded operation.
        :param _builtins.str endpoint: The endpoint in the details page URL of the cloud resource on which the recorded operation was performed.
        :param _builtins.str location_info: The information required for fault locating after a request error occurred.
        :param _builtins.str message: The remarks added by other cloud services to the trace.
        :param _builtins.str operation_id: The operation ID of the trace.
        :param _builtins.bool read_only: Whether a user request is read-only.
        :param _builtins.str record_time: The time when a trace was recorded by CTS.
        :param _builtins.str request: The request body of the recorded operation.
        :param _builtins.str request_id: The ID of the request of the recorded operation.
        :param _builtins.str resource_id: Specifies the cloud resource ID.
               This parameter is valid only when **trace_type** is set to **system**.
        :param _builtins.str resource_name: Specifies the name of a resource.
               This parameter is valid only when **trace_type** is set to **system**.
               The value can contain uppercase letters.
        :param _builtins.str resource_type: Specifies the type of a resource.
               This parameter is valid only when **trace_type** is set to **system**.
        :param _builtins.str resource_url: The details page URL (excluding the endpoint) of the cloud resource.
        :param _builtins.str response: The response body of the recorded operation.
        :param _builtins.str service_type: Specifies the cloud service type.
               This parameter is valid only when **trace_type** is set to **system**.
        :param _builtins.str source_ip: The IP address of the tenant who performed the operation that triggered the trace.
        :param _builtins.str time: The time when a trace was generated.
        :param _builtins.str trace_id: Specifies the trace ID.
               If this parameter is specified, other query criteria will not take effect.
               This parameter is valid only when **trace_type** is set to **system**.
        :param _builtins.str trace_name: Specifies the trace name.
               This parameter is valid only when **trace_type** is set to **system**.
               The value can contain uppercase letters.
        :param _builtins.str trace_rating: Specifies the trace status.
               The value can be **normal**, **warning**, or **incident**.
               This parameter is valid only when **trace_type** is set to **system**.
        :param _builtins.str trace_type: Specifies the trace type.
               The value can be **system** (management trace) or **data** (data trace).
               The default value is **system**.
        :param Sequence['GetTracesTraceUserArgs'] users: Specifies the user name.
               This parameter is valid only when **trace_type** is set to **system**.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "location_info", location_info)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operation_id", operation_id)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "record_time", record_time)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "resource_url", resource_url)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "trace_id", trace_id)
        pulumi.set(__self__, "trace_name", trace_name)
        pulumi.set(__self__, "trace_rating", trace_rating)
        pulumi.set(__self__, "trace_type", trace_type)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        """
        The version of the API called in the trace.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The returned HTTP status code of the recorded operation.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The endpoint in the details page URL of the cloud resource on which the recorded operation was performed.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="locationInfo")
    def location_info(self) -> _builtins.str:
        """
        The information required for fault locating after a request error occurred.
        """
        return pulumi.get(self, "location_info")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The remarks added by other cloud services to the trace.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> _builtins.str:
        """
        The operation ID of the trace.
        """
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        """
        Whether a user request is read-only.
        """
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="recordTime")
    def record_time(self) -> _builtins.str:
        """
        The time when a trace was recorded by CTS.
        """
        return pulumi.get(self, "record_time")

    @_builtins.property
    @pulumi.getter
    def request(self) -> _builtins.str:
        """
        The request body of the recorded operation.
        """
        return pulumi.get(self, "request")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the request of the recorded operation.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the cloud resource ID.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the name of a resource.
        This parameter is valid only when **trace_type** is set to **system**.
        The value can contain uppercase letters.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the type of a resource.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> _builtins.str:
        """
        The details page URL (excluding the endpoint) of the cloud resource.
        """
        return pulumi.get(self, "resource_url")

    @_builtins.property
    @pulumi.getter
    def response(self) -> _builtins.str:
        """
        The response body of the recorded operation.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Specifies the cloud service type.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        The IP address of the tenant who performed the operation that triggered the trace.
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The time when a trace was generated.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="traceId")
    def trace_id(self) -> _builtins.str:
        """
        Specifies the trace ID.
        If this parameter is specified, other query criteria will not take effect.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "trace_id")

    @_builtins.property
    @pulumi.getter(name="traceName")
    def trace_name(self) -> _builtins.str:
        """
        Specifies the trace name.
        This parameter is valid only when **trace_type** is set to **system**.
        The value can contain uppercase letters.
        """
        return pulumi.get(self, "trace_name")

    @_builtins.property
    @pulumi.getter(name="traceRating")
    def trace_rating(self) -> _builtins.str:
        """
        Specifies the trace status.
        The value can be **normal**, **warning**, or **incident**.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "trace_rating")

    @_builtins.property
    @pulumi.getter(name="traceType")
    def trace_type(self) -> _builtins.str:
        """
        Specifies the trace type.
        The value can be **system** (management trace) or **data** (data trace).
        The default value is **system**.
        """
        return pulumi.get(self, "trace_type")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetTracesTraceUserResult']:
        """
        Specifies the user name.
        This parameter is valid only when **trace_type** is set to **system**.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetTracesTraceUserResult(dict):
    def __init__(__self__, *,
                 domains: Sequence['outputs.GetTracesTraceUserDomainResult'],
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param Sequence['GetTracesTraceUserDomainArgs'] domains: The domain information of the user who performed the operation that triggered the trace.
        :param _builtins.str id: The account ID.
        :param _builtins.str name: The account name.
        """
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetTracesTraceUserDomainResult']:
        """
        The domain information of the user who performed the operation that triggered the trace.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The account ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The account name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTracesTraceUserDomainResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The account ID.
        :param _builtins.str name: The account name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The account ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The account name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrackersTrackerResult(dict):
    def __init__(__self__, *,
                 agency_name: _builtins.str,
                 create_time: _builtins.str,
                 data_buckets: Sequence['outputs.GetTrackersTrackerDataBucketResult'],
                 detail: _builtins.str,
                 domain_id: _builtins.str,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 is_organization_tracker: _builtins.bool,
                 is_support_trace_files_encryption: _builtins.bool,
                 is_support_validate: _builtins.bool,
                 kms_id: _builtins.str,
                 lts: Sequence['outputs.GetTrackersTrackerLtResult'],
                 management_event_selectors: Sequence['outputs.GetTrackersTrackerManagementEventSelectorResult'],
                 name: _builtins.str,
                 obs_infos: Sequence['outputs.GetTrackersTrackerObsInfoResult'],
                 project_id: _builtins.str,
                 status: _builtins.str,
                 stream_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str agency_name: The name of a cloud service agency.
        :param _builtins.str create_time: The time when the tracker was created. The time is in UTC.
        :param Sequence['GetTrackersTrackerDataBucketArgs'] data_buckets: Information about the bucket tracked by a data tracker.
        :param _builtins.str detail: This parameter is returned only when the tracker status is **error**.
        :param _builtins.str domain_id: The ID of the account that the tracker belongs to.
        :param _builtins.str group_id: The ID of the LTS log group.
        :param _builtins.str id: The unique tracker ID.
        :param _builtins.bool is_organization_tracker: Whether system tracker to apply to my organization.
        :param _builtins.bool is_support_trace_files_encryption: Whether trace files are encrypted during transfer to an OBS bucket.
        :param _builtins.bool is_support_validate: Whether trace file verification is enabled.
        :param _builtins.str kms_id: The ID of the key used for trace file encryption.
        :param Sequence['GetTrackersTrackerLtArgs'] lts: The LTS configuration.
        :param Sequence['GetTrackersTrackerManagementEventSelectorArgs'] management_event_selectors: The management event selector.
        :param _builtins.str name: Specifies the tracker name.
               If this parameter is not specified, all trackers of a tenant will be queried.
        :param Sequence['GetTrackersTrackerObsInfoArgs'] obs_infos: Information about the bucket to which traces are transferred.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str status: Specifies the tracker status.
               The valid values are **enabled**, **disabled** and **error**.
        :param _builtins.str stream_id: The ID of the LTS log stream.
        :param _builtins.str type: Specifies the tracker type.
               The value can be **system** (management tracker) or **data** (data tracker).
        """
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_buckets", data_buckets)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_organization_tracker", is_organization_tracker)
        pulumi.set(__self__, "is_support_trace_files_encryption", is_support_trace_files_encryption)
        pulumi.set(__self__, "is_support_validate", is_support_validate)
        pulumi.set(__self__, "kms_id", kms_id)
        pulumi.set(__self__, "lts", lts)
        pulumi.set(__self__, "management_event_selectors", management_event_selectors)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "obs_infos", obs_infos)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> _builtins.str:
        """
        The name of a cloud service agency.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The time when the tracker was created. The time is in UTC.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="dataBuckets")
    def data_buckets(self) -> Sequence['outputs.GetTrackersTrackerDataBucketResult']:
        """
        Information about the bucket tracked by a data tracker.
        """
        return pulumi.get(self, "data_buckets")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        This parameter is returned only when the tracker status is **error**.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account that the tracker belongs to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The ID of the LTS log group.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique tracker ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isOrganizationTracker")
    def is_organization_tracker(self) -> _builtins.bool:
        """
        Whether system tracker to apply to my organization.
        """
        return pulumi.get(self, "is_organization_tracker")

    @_builtins.property
    @pulumi.getter(name="isSupportTraceFilesEncryption")
    def is_support_trace_files_encryption(self) -> _builtins.bool:
        """
        Whether trace files are encrypted during transfer to an OBS bucket.
        """
        return pulumi.get(self, "is_support_trace_files_encryption")

    @_builtins.property
    @pulumi.getter(name="isSupportValidate")
    def is_support_validate(self) -> _builtins.bool:
        """
        Whether trace file verification is enabled.
        """
        return pulumi.get(self, "is_support_validate")

    @_builtins.property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> _builtins.str:
        """
        The ID of the key used for trace file encryption.
        """
        return pulumi.get(self, "kms_id")

    @_builtins.property
    @pulumi.getter
    def lts(self) -> Sequence['outputs.GetTrackersTrackerLtResult']:
        """
        The LTS configuration.
        """
        return pulumi.get(self, "lts")

    @_builtins.property
    @pulumi.getter(name="managementEventSelectors")
    def management_event_selectors(self) -> Sequence['outputs.GetTrackersTrackerManagementEventSelectorResult']:
        """
        The management event selector.
        """
        return pulumi.get(self, "management_event_selectors")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the tracker name.
        If this parameter is not specified, all trackers of a tenant will be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="obsInfos")
    def obs_infos(self) -> Sequence['outputs.GetTrackersTrackerObsInfoResult']:
        """
        Information about the bucket to which traces are transferred.
        """
        return pulumi.get(self, "obs_infos")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the tracker status.
        The valid values are **enabled**, **disabled** and **error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> _builtins.str:
        """
        The ID of the LTS log stream.
        """
        return pulumi.get(self, "stream_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the tracker type.
        The value can be **system** (management tracker) or **data** (data tracker).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTrackersTrackerDataBucketResult(dict):
    def __init__(__self__, *,
                 data_bucket_name: _builtins.str,
                 data_events: Sequence[_builtins.str],
                 search_enabled: _builtins.bool):
        """
        :param _builtins.str data_bucket_name: Specifies the data bucket name.
        :param Sequence[_builtins.str] data_events: The list of the bucket event operation types.
        :param _builtins.bool search_enabled: Whether the logs of the tracked bucket can be searched.
        """
        pulumi.set(__self__, "data_bucket_name", data_bucket_name)
        pulumi.set(__self__, "data_events", data_events)
        pulumi.set(__self__, "search_enabled", search_enabled)

    @_builtins.property
    @pulumi.getter(name="dataBucketName")
    def data_bucket_name(self) -> _builtins.str:
        """
        Specifies the data bucket name.
        """
        return pulumi.get(self, "data_bucket_name")

    @_builtins.property
    @pulumi.getter(name="dataEvents")
    def data_events(self) -> Sequence[_builtins.str]:
        """
        The list of the bucket event operation types.
        """
        return pulumi.get(self, "data_events")

    @_builtins.property
    @pulumi.getter(name="searchEnabled")
    def search_enabled(self) -> _builtins.bool:
        """
        Whether the logs of the tracked bucket can be searched.
        """
        return pulumi.get(self, "search_enabled")


@pulumi.output_type
class GetTrackersTrackerLtResult(dict):
    def __init__(__self__, *,
                 is_lts_enabled: _builtins.bool,
                 log_group_name: _builtins.str,
                 log_topic_name: _builtins.str):
        """
        :param _builtins.bool is_lts_enabled: Whether traces are synchronized to LTS for trace search and analysis.
        :param _builtins.str log_group_name: The name of the log group that CTS creates in LTS.
        :param _builtins.str log_topic_name: The name of the log stream that CTS creates in LTS.
        """
        pulumi.set(__self__, "is_lts_enabled", is_lts_enabled)
        pulumi.set(__self__, "log_group_name", log_group_name)
        pulumi.set(__self__, "log_topic_name", log_topic_name)

    @_builtins.property
    @pulumi.getter(name="isLtsEnabled")
    def is_lts_enabled(self) -> _builtins.bool:
        """
        Whether traces are synchronized to LTS for trace search and analysis.
        """
        return pulumi.get(self, "is_lts_enabled")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> _builtins.str:
        """
        The name of the log group that CTS creates in LTS.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logTopicName")
    def log_topic_name(self) -> _builtins.str:
        """
        The name of the log stream that CTS creates in LTS.
        """
        return pulumi.get(self, "log_topic_name")


@pulumi.output_type
class GetTrackersTrackerManagementEventSelectorResult(dict):
    def __init__(__self__, *,
                 exclude_services: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_services: The cloud service that is not dumped.
        """
        pulumi.set(__self__, "exclude_services", exclude_services)

    @_builtins.property
    @pulumi.getter(name="excludeServices")
    def exclude_services(self) -> Sequence[_builtins.str]:
        """
        The cloud service that is not dumped.
        """
        return pulumi.get(self, "exclude_services")


@pulumi.output_type
class GetTrackersTrackerObsInfoResult(dict):
    def __init__(__self__, *,
                 bucket_lifecycle: _builtins.int,
                 bucket_name: _builtins.str,
                 compress_type: _builtins.str,
                 file_prefix_name: _builtins.str,
                 is_authorized_bucket: _builtins.bool,
                 is_obs_created: _builtins.bool,
                 is_sort_by_service: _builtins.bool):
        """
        :param _builtins.int bucket_lifecycle: Duration that traces are stored in the OBS bucket.
        :param _builtins.str bucket_name: The OBS bucket name.
        :param _builtins.str compress_type: The compression type.
        :param _builtins.str file_prefix_name: File name prefix to mark trace files that need to be stored in an OBS bucket.
        :param _builtins.bool is_authorized_bucket: Whether CTS has been granted permissions to perform operations on the OBS bucket.
        :param _builtins.bool is_obs_created: Whether the OBS bucket is automatically created by the tracker.
        :param _builtins.bool is_sort_by_service: Whether to sort the path by cloud service.
        """
        pulumi.set(__self__, "bucket_lifecycle", bucket_lifecycle)
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "compress_type", compress_type)
        pulumi.set(__self__, "file_prefix_name", file_prefix_name)
        pulumi.set(__self__, "is_authorized_bucket", is_authorized_bucket)
        pulumi.set(__self__, "is_obs_created", is_obs_created)
        pulumi.set(__self__, "is_sort_by_service", is_sort_by_service)

    @_builtins.property
    @pulumi.getter(name="bucketLifecycle")
    def bucket_lifecycle(self) -> _builtins.int:
        """
        Duration that traces are stored in the OBS bucket.
        """
        return pulumi.get(self, "bucket_lifecycle")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        The OBS bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="compressType")
    def compress_type(self) -> _builtins.str:
        """
        The compression type.
        """
        return pulumi.get(self, "compress_type")

    @_builtins.property
    @pulumi.getter(name="filePrefixName")
    def file_prefix_name(self) -> _builtins.str:
        """
        File name prefix to mark trace files that need to be stored in an OBS bucket.
        """
        return pulumi.get(self, "file_prefix_name")

    @_builtins.property
    @pulumi.getter(name="isAuthorizedBucket")
    def is_authorized_bucket(self) -> _builtins.bool:
        """
        Whether CTS has been granted permissions to perform operations on the OBS bucket.
        """
        return pulumi.get(self, "is_authorized_bucket")

    @_builtins.property
    @pulumi.getter(name="isObsCreated")
    def is_obs_created(self) -> _builtins.bool:
        """
        Whether the OBS bucket is automatically created by the tracker.
        """
        return pulumi.get(self, "is_obs_created")

    @_builtins.property
    @pulumi.getter(name="isSortByService")
    def is_sort_by_service(self) -> _builtins.bool:
        """
        Whether to sort the path by cloud service.
        """
        return pulumi.get(self, "is_sort_by_service")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The username.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The username.
        """
        return pulumi.get(self, "name")


