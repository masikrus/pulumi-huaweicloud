# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceTagsFilterResult',
    'AwaitableGetResourceTagsFilterResult',
    'get_resource_tags_filter',
    'get_resource_tags_filter_output',
]

@pulumi.output_type
class GetResourceTagsFilterResult:
    """
    A collection of values returned by getResourceTagsFilter.
    """
    def __init__(__self__, id=None, matches=None, region=None, resource_type=None, resources=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetResourceTagsFilterMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceTagsFilterResourceResult']:
        """
        The list of resources that match the filter conditions.  
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetResourceTagsFilterTagResult']]:
        """
        The tags associated with the resource.  
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


class AwaitableGetResourceTagsFilterResult(GetResourceTagsFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceTagsFilterResult(
            id=self.id,
            matches=self.matches,
            region=self.region,
            resource_type=self.resource_type,
            resources=self.resources,
            tags=self.tags)


def get_resource_tags_filter(matches: Optional[Sequence[Union['GetResourceTagsFilterMatchArgs', 'GetResourceTagsFilterMatchArgsDict']]] = None,
                             region: Optional[_builtins.str] = None,
                             resource_type: Optional[_builtins.str] = None,
                             tags: Optional[Sequence[Union['GetResourceTagsFilterTagArgs', 'GetResourceTagsFilterTagArgsDict']]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceTagsFilterResult:
    """
    Use this data source to filter CTS resources by tags within Huaweicloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cts.get_resource_tags_filter(tags=[
            {
                "key": "foo",
                "values": [
                    "bar",
                    "bax",
                ],
            },
            {
                "key": "test",
                "values": [
                    "alpha",
                    "beta",
                ],
            },
        ],
        matches=[{
            "key": "resource_name",
            "value": "example",
        }])
    ```


    :param Sequence[Union['GetResourceTagsFilterMatchArgs', 'GetResourceTagsFilterMatchArgsDict']] matches: Specifies the match conditions for filtering resources.  
           The matches structure is documented below.
           > It matches exactly when `matches.value` is empty string. Otherwise, it matches fuzzily.
           
           <a name="cts_filter_resource_tags_arg"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.  
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type to be queried.  
           The valid value is **cts-tracker**.
    :param Sequence[Union['GetResourceTagsFilterTagArgs', 'GetResourceTagsFilterTagArgsDict']] tags: Specifies the tag list for filtering resources.  
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getResourceTagsFilter:getResourceTagsFilter', __args__, opts=opts, typ=GetResourceTagsFilterResult).value

    return AwaitableGetResourceTagsFilterResult(
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'))
def get_resource_tags_filter_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetResourceTagsFilterMatchArgs', 'GetResourceTagsFilterMatchArgsDict']]]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                                    tags: Optional[pulumi.Input[Optional[Sequence[Union['GetResourceTagsFilterTagArgs', 'GetResourceTagsFilterTagArgsDict']]]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceTagsFilterResult]:
    """
    Use this data source to filter CTS resources by tags within Huaweicloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cts.get_resource_tags_filter(tags=[
            {
                "key": "foo",
                "values": [
                    "bar",
                    "bax",
                ],
            },
            {
                "key": "test",
                "values": [
                    "alpha",
                    "beta",
                ],
            },
        ],
        matches=[{
            "key": "resource_name",
            "value": "example",
        }])
    ```


    :param Sequence[Union['GetResourceTagsFilterMatchArgs', 'GetResourceTagsFilterMatchArgsDict']] matches: Specifies the match conditions for filtering resources.  
           The matches structure is documented below.
           > It matches exactly when `matches.value` is empty string. Otherwise, it matches fuzzily.
           
           <a name="cts_filter_resource_tags_arg"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.  
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type to be queried.  
           The valid value is **cts-tracker**.
    :param Sequence[Union['GetResourceTagsFilterTagArgs', 'GetResourceTagsFilterTagArgsDict']] tags: Specifies the tag list for filtering resources.  
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getResourceTagsFilter:getResourceTagsFilter', __args__, opts=opts, typ=GetResourceTagsFilterResult)
    return __ret__.apply(lambda __response__: GetResourceTagsFilterResult(
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags')))
