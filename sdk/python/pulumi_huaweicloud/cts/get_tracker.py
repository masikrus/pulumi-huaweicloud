# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetTrackerResult',
    'AwaitableGetTrackerResult',
    'get_tracker',
    'get_tracker_output',
]

@pulumi.output_type
class GetTrackerResult:
    """
    A collection of values returned by getTracker.
    """
    def __init__(__self__, bucket_name=None, file_prefix_name=None, id=None, is_send_all_key_operation=None, is_support_smn=None, need_notify_user_lists=None, operations=None, region=None, status=None, topic_id=None, tracker_name=None):
        if bucket_name and not isinstance(bucket_name, str):
            raise TypeError("Expected argument 'bucket_name' to be a str")
        pulumi.set(__self__, "bucket_name", bucket_name)
        if file_prefix_name and not isinstance(file_prefix_name, str):
            raise TypeError("Expected argument 'file_prefix_name' to be a str")
        pulumi.set(__self__, "file_prefix_name", file_prefix_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_send_all_key_operation and not isinstance(is_send_all_key_operation, bool):
            raise TypeError("Expected argument 'is_send_all_key_operation' to be a bool")
        pulumi.set(__self__, "is_send_all_key_operation", is_send_all_key_operation)
        if is_support_smn and not isinstance(is_support_smn, bool):
            raise TypeError("Expected argument 'is_support_smn' to be a bool")
        pulumi.set(__self__, "is_support_smn", is_support_smn)
        if need_notify_user_lists and not isinstance(need_notify_user_lists, list):
            raise TypeError("Expected argument 'need_notify_user_lists' to be a list")
        pulumi.set(__self__, "need_notify_user_lists", need_notify_user_lists)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if tracker_name and not isinstance(tracker_name, str):
            raise TypeError("Expected argument 'tracker_name' to be a str")
        pulumi.set(__self__, "tracker_name", tracker_name)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="filePrefixName")
    def file_prefix_name(self) -> _builtins.str:
        return pulumi.get(self, "file_prefix_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSendAllKeyOperation")
    def is_send_all_key_operation(self) -> _builtins.bool:
        """
        Specifies Typical or All operations for Trigger Condition.
        """
        return pulumi.get(self, "is_send_all_key_operation")

    @_builtins.property
    @pulumi.getter(name="isSupportSmn")
    def is_support_smn(self) -> _builtins.bool:
        """
        Specifies SMN support.
        """
        return pulumi.get(self, "is_support_smn")

    @_builtins.property
    @pulumi.getter(name="needNotifyUserLists")
    def need_notify_user_lists(self) -> Sequence[_builtins.str]:
        """
        The users using the login function.
        """
        return pulumi.get(self, "need_notify_user_lists")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence[_builtins.str]:
        """
        The trigger conditions for sending a notification
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> _builtins.str:
        """
        The theme of the SMN service.
        """
        return pulumi.get(self, "topic_id")

    @_builtins.property
    @pulumi.getter(name="trackerName")
    def tracker_name(self) -> _builtins.str:
        return pulumi.get(self, "tracker_name")


class AwaitableGetTrackerResult(GetTrackerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrackerResult(
            bucket_name=self.bucket_name,
            file_prefix_name=self.file_prefix_name,
            id=self.id,
            is_send_all_key_operation=self.is_send_all_key_operation,
            is_support_smn=self.is_support_smn,
            need_notify_user_lists=self.need_notify_user_lists,
            operations=self.operations,
            region=self.region,
            status=self.status,
            topic_id=self.topic_id,
            tracker_name=self.tracker_name)


def get_tracker(bucket_name: Optional[_builtins.str] = None,
                file_prefix_name: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                status: Optional[_builtins.str] = None,
                tracker_name: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrackerResult:
    """
    !> **WARNING:** It has been deprecated.

    CTS Tracker data source allows access of Cloud Tracker.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bucket_name = config.require_object("bucketName")
    tracker_v1 = huaweicloud.Cts.get_tracker(bucket_name=bucket_name)
    ```


    :param _builtins.str bucket_name: The OBS bucket name for a tracker.
    :param _builtins.str file_prefix_name: The prefix of a log that needs to be stored in an OBS bucket.
    :param _builtins.str region: The region in which to obtain the Cloud Trackers. If omitted, the provider-level region
           will be used.
    :param _builtins.str status: Status of a tracker.
    :param _builtins.str tracker_name: The tracker name.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['filePrefixName'] = file_prefix_name
    __args__['region'] = region
    __args__['status'] = status
    __args__['trackerName'] = tracker_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getTracker:getTracker', __args__, opts=opts, typ=GetTrackerResult).value

    return AwaitableGetTrackerResult(
        bucket_name=pulumi.get(__ret__, 'bucket_name'),
        file_prefix_name=pulumi.get(__ret__, 'file_prefix_name'),
        id=pulumi.get(__ret__, 'id'),
        is_send_all_key_operation=pulumi.get(__ret__, 'is_send_all_key_operation'),
        is_support_smn=pulumi.get(__ret__, 'is_support_smn'),
        need_notify_user_lists=pulumi.get(__ret__, 'need_notify_user_lists'),
        operations=pulumi.get(__ret__, 'operations'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        tracker_name=pulumi.get(__ret__, 'tracker_name'))
def get_tracker_output(bucket_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       file_prefix_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       tracker_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrackerResult]:
    """
    !> **WARNING:** It has been deprecated.

    CTS Tracker data source allows access of Cloud Tracker.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bucket_name = config.require_object("bucketName")
    tracker_v1 = huaweicloud.Cts.get_tracker(bucket_name=bucket_name)
    ```


    :param _builtins.str bucket_name: The OBS bucket name for a tracker.
    :param _builtins.str file_prefix_name: The prefix of a log that needs to be stored in an OBS bucket.
    :param _builtins.str region: The region in which to obtain the Cloud Trackers. If omitted, the provider-level region
           will be used.
    :param _builtins.str status: Status of a tracker.
    :param _builtins.str tracker_name: The tracker name.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['filePrefixName'] = file_prefix_name
    __args__['region'] = region
    __args__['status'] = status
    __args__['trackerName'] = tracker_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getTracker:getTracker', __args__, opts=opts, typ=GetTrackerResult)
    return __ret__.apply(lambda __response__: GetTrackerResult(
        bucket_name=pulumi.get(__response__, 'bucket_name'),
        file_prefix_name=pulumi.get(__response__, 'file_prefix_name'),
        id=pulumi.get(__response__, 'id'),
        is_send_all_key_operation=pulumi.get(__response__, 'is_send_all_key_operation'),
        is_support_smn=pulumi.get(__response__, 'is_support_smn'),
        need_notify_user_lists=pulumi.get(__response__, 'need_notify_user_lists'),
        operations=pulumi.get(__response__, 'operations'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        topic_id=pulumi.get(__response__, 'topic_id'),
        tracker_name=pulumi.get(__response__, 'tracker_name')))
