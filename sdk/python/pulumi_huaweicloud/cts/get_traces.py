# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTracesResult',
    'AwaitableGetTracesResult',
    'get_traces',
    'get_traces_output',
]

@pulumi.output_type
class GetTracesResult:
    """
    A collection of values returned by getTraces.
    """
    def __init__(__self__, from_=None, id=None, region=None, resource_id=None, resource_name=None, resource_type=None, service_type=None, to=None, trace_id=None, trace_name=None, trace_rating=None, trace_type=None, traces=None, tracker_name=None, user=None):
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if to and not isinstance(to, str):
            raise TypeError("Expected argument 'to' to be a str")
        pulumi.set(__self__, "to", to)
        if trace_id and not isinstance(trace_id, str):
            raise TypeError("Expected argument 'trace_id' to be a str")
        pulumi.set(__self__, "trace_id", trace_id)
        if trace_name and not isinstance(trace_name, str):
            raise TypeError("Expected argument 'trace_name' to be a str")
        pulumi.set(__self__, "trace_name", trace_name)
        if trace_rating and not isinstance(trace_rating, str):
            raise TypeError("Expected argument 'trace_rating' to be a str")
        pulumi.set(__self__, "trace_rating", trace_rating)
        if trace_type and not isinstance(trace_type, str):
            raise TypeError("Expected argument 'trace_type' to be a str")
        pulumi.set(__self__, "trace_type", trace_type)
        if traces and not isinstance(traces, list):
            raise TypeError("Expected argument 'traces' to be a list")
        pulumi.set(__self__, "traces", traces)
        if tracker_name and not isinstance(tracker_name, str):
            raise TypeError("Expected argument 'tracker_name' to be a str")
        pulumi.set(__self__, "tracker_name", tracker_name)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the cloud resource on which the recorded operation was performed.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        The name of the resource on which the recorded operation was performed.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of the resource on which the recorded operation was performed.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        The cloud service on which the recorded operation was performed.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def to(self) -> _builtins.str:
        return pulumi.get(self, "to")

    @_builtins.property
    @pulumi.getter(name="traceId")
    def trace_id(self) -> Optional[_builtins.str]:
        """
        The Trace ID.
        """
        return pulumi.get(self, "trace_id")

    @_builtins.property
    @pulumi.getter(name="traceName")
    def trace_name(self) -> Optional[_builtins.str]:
        """
        The trace name.
        """
        return pulumi.get(self, "trace_name")

    @_builtins.property
    @pulumi.getter(name="traceRating")
    def trace_rating(self) -> Optional[_builtins.str]:
        """
        The trace status.
        """
        return pulumi.get(self, "trace_rating")

    @_builtins.property
    @pulumi.getter(name="traceType")
    def trace_type(self) -> _builtins.str:
        """
        The trace type.
        """
        return pulumi.get(self, "trace_type")

    @_builtins.property
    @pulumi.getter
    def traces(self) -> Sequence['outputs.GetTracesTraceResult']:
        """
        The list of traces.
        """
        return pulumi.get(self, "traces")

    @_builtins.property
    @pulumi.getter(name="trackerName")
    def tracker_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_name")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        The information of the user who performed the operation that triggered the trace.
        """
        return pulumi.get(self, "user")


class AwaitableGetTracesResult(GetTracesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTracesResult(
            from_=self.from_,
            id=self.id,
            region=self.region,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            resource_type=self.resource_type,
            service_type=self.service_type,
            to=self.to,
            trace_id=self.trace_id,
            trace_name=self.trace_name,
            trace_rating=self.trace_rating,
            trace_type=self.trace_type,
            traces=self.traces,
            tracker_name=self.tracker_name,
            user=self.user)


def get_traces(from_: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               resource_id: Optional[_builtins.str] = None,
               resource_name: Optional[_builtins.str] = None,
               resource_type: Optional[_builtins.str] = None,
               service_type: Optional[_builtins.str] = None,
               to: Optional[_builtins.str] = None,
               trace_id: Optional[_builtins.str] = None,
               trace_name: Optional[_builtins.str] = None,
               trace_rating: Optional[_builtins.str] = None,
               trace_type: Optional[_builtins.str] = None,
               tracker_name: Optional[_builtins.str] = None,
               user: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTracesResult:
    """
    Use this data source to get the list of CTS traces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cts.get_traces(trace_type="system",
        from_=from_,
        to=to)
    ```


    :param _builtins.str from_: Specifies the start time.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the cloud resource ID.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str resource_name: Specifies the name of a resource.
           This parameter is valid only when **trace_type** is set to **system**.
           The value can contain uppercase letters.
    :param _builtins.str resource_type: Specifies the type of a resource.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str service_type: Specifies the cloud service type.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str to: Specifies the end time.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str trace_id: Specifies the trace ID.
           If this parameter is specified, other query criteria will not take effect.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str trace_name: Specifies the trace name.
           This parameter is valid only when **trace_type** is set to **system**.
           The value can contain uppercase letters.
    :param _builtins.str trace_rating: Specifies the trace status.
           The value can be **normal**, **warning**, or **incident**.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str trace_type: Specifies the trace type.
           The value can be **system** (management trace) or **data** (data trace).
           The default value is **system**.
    :param _builtins.str tracker_name: Specifies the tracker name.
           When **trace_type** is set to **system**, the value of this parameter is **system**.
           When **trace_type** is set to **data**, set this parameter to the name of a data tracker.
    :param _builtins.str user: Specifies the user name.
           This parameter is valid only when **trace_type** is set to **system**.
    """
    __args__ = dict()
    __args__['from'] = from_
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    __args__['to'] = to
    __args__['traceId'] = trace_id
    __args__['traceName'] = trace_name
    __args__['traceRating'] = trace_rating
    __args__['traceType'] = trace_type
    __args__['trackerName'] = tracker_name
    __args__['user'] = user
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getTraces:getTraces', __args__, opts=opts, typ=GetTracesResult).value

    return AwaitableGetTracesResult(
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        service_type=pulumi.get(__ret__, 'service_type'),
        to=pulumi.get(__ret__, 'to'),
        trace_id=pulumi.get(__ret__, 'trace_id'),
        trace_name=pulumi.get(__ret__, 'trace_name'),
        trace_rating=pulumi.get(__ret__, 'trace_rating'),
        trace_type=pulumi.get(__ret__, 'trace_type'),
        traces=pulumi.get(__ret__, 'traces'),
        tracker_name=pulumi.get(__ret__, 'tracker_name'),
        user=pulumi.get(__ret__, 'user'))
def get_traces_output(from_: Optional[pulumi.Input[_builtins.str]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      service_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      to: Optional[pulumi.Input[_builtins.str]] = None,
                      trace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      trace_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      trace_rating: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      trace_type: Optional[pulumi.Input[_builtins.str]] = None,
                      tracker_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTracesResult]:
    """
    Use this data source to get the list of CTS traces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cts.get_traces(trace_type="system",
        from_=from_,
        to=to)
    ```


    :param _builtins.str from_: Specifies the start time.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the cloud resource ID.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str resource_name: Specifies the name of a resource.
           This parameter is valid only when **trace_type** is set to **system**.
           The value can contain uppercase letters.
    :param _builtins.str resource_type: Specifies the type of a resource.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str service_type: Specifies the cloud service type.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str to: Specifies the end time.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str trace_id: Specifies the trace ID.
           If this parameter is specified, other query criteria will not take effect.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str trace_name: Specifies the trace name.
           This parameter is valid only when **trace_type** is set to **system**.
           The value can contain uppercase letters.
    :param _builtins.str trace_rating: Specifies the trace status.
           The value can be **normal**, **warning**, or **incident**.
           This parameter is valid only when **trace_type** is set to **system**.
    :param _builtins.str trace_type: Specifies the trace type.
           The value can be **system** (management trace) or **data** (data trace).
           The default value is **system**.
    :param _builtins.str tracker_name: Specifies the tracker name.
           When **trace_type** is set to **system**, the value of this parameter is **system**.
           When **trace_type** is set to **data**, set this parameter to the name of a data tracker.
    :param _builtins.str user: Specifies the user name.
           This parameter is valid only when **trace_type** is set to **system**.
    """
    __args__ = dict()
    __args__['from'] = from_
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    __args__['to'] = to
    __args__['traceId'] = trace_id
    __args__['traceName'] = trace_name
    __args__['traceRating'] = trace_rating
    __args__['traceType'] = trace_type
    __args__['trackerName'] = tracker_name
    __args__['user'] = user
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getTraces:getTraces', __args__, opts=opts, typ=GetTracesResult)
    return __ret__.apply(lambda __response__: GetTracesResult(
        from_=pulumi.get(__response__, 'from_'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        service_type=pulumi.get(__response__, 'service_type'),
        to=pulumi.get(__response__, 'to'),
        trace_id=pulumi.get(__response__, 'trace_id'),
        trace_name=pulumi.get(__response__, 'trace_name'),
        trace_rating=pulumi.get(__response__, 'trace_rating'),
        trace_type=pulumi.get(__response__, 'trace_type'),
        traces=pulumi.get(__response__, 'traces'),
        tracker_name=pulumi.get(__response__, 'tracker_name'),
        user=pulumi.get(__response__, 'user')))
