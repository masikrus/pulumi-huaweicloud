# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrackersResult',
    'AwaitableGetTrackersResult',
    'get_trackers',
    'get_trackers_output',
]

@pulumi.output_type
class GetTrackersResult:
    """
    A collection of values returned by getTrackers.
    """
    def __init__(__self__, data_bucket_name=None, id=None, name=None, region=None, status=None, tracker_id=None, trackers=None, type=None):
        if data_bucket_name and not isinstance(data_bucket_name, str):
            raise TypeError("Expected argument 'data_bucket_name' to be a str")
        pulumi.set(__self__, "data_bucket_name", data_bucket_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tracker_id and not isinstance(tracker_id, str):
            raise TypeError("Expected argument 'tracker_id' to be a str")
        pulumi.set(__self__, "tracker_id", tracker_id)
        if trackers and not isinstance(trackers, list):
            raise TypeError("Expected argument 'trackers' to be a list")
        pulumi.set(__self__, "trackers", trackers)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="dataBucketName")
    def data_bucket_name(self) -> Optional[_builtins.str]:
        """
        The OBS bucket name.
        """
        return pulumi.get(self, "data_bucket_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The tracker name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The tracker status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Sequence['outputs.GetTrackersTrackerResult']:
        """
        List of tracker information.
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The tracker type.
        """
        return pulumi.get(self, "type")


class AwaitableGetTrackersResult(GetTrackersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrackersResult(
            data_bucket_name=self.data_bucket_name,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            tracker_id=self.tracker_id,
            trackers=self.trackers,
            type=self.type)


def get_trackers(data_bucket_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrackersResult:
    """
    Use this data source to get the list of CTS trackers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    tracker_type = config.require_object("trackerType")
    test = huaweicloud.Cts.get_trackers(type=tracker_type)
    ```


    :param _builtins.str data_bucket_name: Specifies the data bucket name.
    :param _builtins.str name: Specifies the tracker name.
           If this parameter is not specified, all trackers of a tenant will be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the tracker status.
           The valid values are **enabled**, **disabled** and **error**.
    :param _builtins.str tracker_id: Specifies the tracker ID.
    :param _builtins.str type: Specifies the tracker type.
           The value can be **system** (management tracker) or **data** (data tracker).
    """
    __args__ = dict()
    __args__['dataBucketName'] = data_bucket_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['trackerId'] = tracker_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getTrackers:getTrackers', __args__, opts=opts, typ=GetTrackersResult).value

    return AwaitableGetTrackersResult(
        data_bucket_name=pulumi.get(__ret__, 'data_bucket_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        tracker_id=pulumi.get(__ret__, 'tracker_id'),
        trackers=pulumi.get(__ret__, 'trackers'),
        type=pulumi.get(__ret__, 'type'))
def get_trackers_output(data_bucket_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        tracker_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrackersResult]:
    """
    Use this data source to get the list of CTS trackers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    tracker_type = config.require_object("trackerType")
    test = huaweicloud.Cts.get_trackers(type=tracker_type)
    ```


    :param _builtins.str data_bucket_name: Specifies the data bucket name.
    :param _builtins.str name: Specifies the tracker name.
           If this parameter is not specified, all trackers of a tenant will be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the tracker status.
           The valid values are **enabled**, **disabled** and **error**.
    :param _builtins.str tracker_id: Specifies the tracker ID.
    :param _builtins.str type: Specifies the tracker type.
           The value can be **system** (management tracker) or **data** (data tracker).
    """
    __args__ = dict()
    __args__['dataBucketName'] = data_bucket_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['trackerId'] = tracker_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getTrackers:getTrackers', __args__, opts=opts, typ=GetTrackersResult)
    return __ret__.apply(lambda __response__: GetTrackersResult(
        data_bucket_name=pulumi.get(__response__, 'data_bucket_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        tracker_id=pulumi.get(__response__, 'tracker_id'),
        trackers=pulumi.get(__response__, 'trackers'),
        type=pulumi.get(__response__, 'type')))
