# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOperationsResult',
    'AwaitableGetOperationsResult',
    'get_operations',
    'get_operations_output',
]

@pulumi.output_type
class GetOperationsResult:
    """
    A collection of values returned by getOperations.
    """
    def __init__(__self__, id=None, operations=None, region=None, resource_type=None, service_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetOperationsOperationResult']:
        """
        All operations on the cloud service.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of the resource on which operations are performed.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        The type of the cloud service on which operations are performed.
        """
        return pulumi.get(self, "service_type")


class AwaitableGetOperationsResult(GetOperationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOperationsResult(
            id=self.id,
            operations=self.operations,
            region=self.region,
            resource_type=self.resource_type,
            service_type=self.service_type)


def get_operations(region: Optional[_builtins.str] = None,
                   resource_type: Optional[_builtins.str] = None,
                   service_type: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOperationsResult:
    """
    Use this data source to list all operations on a cloud service.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cts.get_operations()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the type of the resource on which operations are performed.
           If this parameter is used, `service_type` is mandatory.
    :param _builtins.str service_type: Specifies the type of the cloud service on which operations are performed.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cts/getOperations:getOperations', __args__, opts=opts, typ=GetOperationsResult).value

    return AwaitableGetOperationsResult(
        id=pulumi.get(__ret__, 'id'),
        operations=pulumi.get(__ret__, 'operations'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        service_type=pulumi.get(__ret__, 'service_type'))
def get_operations_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          service_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOperationsResult]:
    """
    Use this data source to list all operations on a cloud service.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cts.get_operations()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the type of the resource on which operations are performed.
           If this parameter is used, `service_type` is mandatory.
    :param _builtins.str service_type: Specifies the type of the cloud service on which operations are performed.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cts/getOperations:getOperations', __args__, opts=opts, typ=GetOperationsResult)
    return __ret__.apply(lambda __response__: GetOperationsResult(
        id=pulumi.get(__response__, 'id'),
        operations=pulumi.get(__response__, 'operations'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        service_type=pulumi.get(__response__, 'service_type')))
