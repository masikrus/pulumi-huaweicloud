# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClustersResult',
    'AwaitableGetClustersResult',
    'get_clusters',
    'get_clusters_output',
]

@pulumi.output_type
class GetClustersResult:
    """
    A collection of values returned by getClusters.
    """
    def __init__(__self__, clusters=None, enterprise_project_id=None, id=None, name=None, region=None, status=None, tags=None):
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetClustersClusterResult']:
        """
        The list of clusters.
        The clusters structure is documented below.
        """
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Cluster status.  
        The following options are supported:
        + **starting**: The cluster is being started.
        + **running**: The cluster is running.
        + **terminated**: The cluster has been terminated.
        + **failed**: The cluster fails.
        + **abnormal**: The cluster is abnormal.
        + **terminating**: The cluster is being terminated.
        + **frozen**: The cluster has been frozen.
        + **scaling-out**: The cluster is being scaled out.
        + **scaling-in**: The cluster is being scaled in.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        The tag information.
        """
        return pulumi.get(self, "tags")


class AwaitableGetClustersResult(GetClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClustersResult(
            clusters=self.clusters,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            tags=self.tags)


def get_clusters(enterprise_project_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 tags: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClustersResult:
    """
    Use this data source to get clusters of MapReduce.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Mrs.get_clusters(status="running")
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID used to query clusters in a specified
           enterprise project.
           The default value is **0**, indicating the default enterprise project.
    :param _builtins.str name: The name of cluster.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: The status of cluster.  
           The following options are supported:
           + **existing**: Query existing clusters, including all clusters except those in the deleted state
           and the yearly/monthly clusters in the Order processing or preparing state.
           + **history**: Quer historical clusters, including all the deleted clusters, clusters that fail to delete,
           clusters whose VMs fail to delete, and clusters whose database updates fail to delete.
           + **starting**: Query a list of clusters that are being started.
           + **running**: Query a list of running clusters.
           + **terminated**: Query a list of terminated clusters.
           + **failed**: Query a list of failed clusters.
           + **abnormal**: Query a list of abnormal clusters.
           + **terminating**: Query a list of clusters that are being terminated.
           + **frozen**: Query a list of frozen clusters.
           + **scaling-out**: Query a list of clusters that are being scaled out.
           + **scaling-in**: Query a list of clusters that are being scaled in.
    :param _builtins.str tags: You can search for a cluster by its tags.  
           If you specify multiple tags, the relationship between them is **AND**.
           The format of the tags parameter is **tags=k1\\*v1,k2\\*v2,k3\\*v3**.
           When the values of some tags are null, the format is **tags=k1,k2,k3\\*v3**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Mrs/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult).value

    return AwaitableGetClustersResult(
        clusters=pulumi.get(__ret__, 'clusters'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_clusters_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClustersResult]:
    """
    Use this data source to get clusters of MapReduce.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Mrs.get_clusters(status="running")
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID used to query clusters in a specified
           enterprise project.
           The default value is **0**, indicating the default enterprise project.
    :param _builtins.str name: The name of cluster.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: The status of cluster.  
           The following options are supported:
           + **existing**: Query existing clusters, including all clusters except those in the deleted state
           and the yearly/monthly clusters in the Order processing or preparing state.
           + **history**: Quer historical clusters, including all the deleted clusters, clusters that fail to delete,
           clusters whose VMs fail to delete, and clusters whose database updates fail to delete.
           + **starting**: Query a list of clusters that are being started.
           + **running**: Query a list of running clusters.
           + **terminated**: Query a list of terminated clusters.
           + **failed**: Query a list of failed clusters.
           + **abnormal**: Query a list of abnormal clusters.
           + **terminating**: Query a list of clusters that are being terminated.
           + **frozen**: Query a list of frozen clusters.
           + **scaling-out**: Query a list of clusters that are being scaled out.
           + **scaling-in**: Query a list of clusters that are being scaled in.
    :param _builtins.str tags: You can search for a cluster by its tags.  
           If you specify multiple tags, the relationship between them is **AND**.
           The format of the tags parameter is **tags=k1\\*v1,k2\\*v2,k3\\*v3**.
           When the values of some tags are null, the format is **tags=k1,k2,k3\\*v3**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Mrs/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult)
    return __ret__.apply(lambda __response__: GetClustersResult(
        clusters=pulumi.get(__response__, 'clusters'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
