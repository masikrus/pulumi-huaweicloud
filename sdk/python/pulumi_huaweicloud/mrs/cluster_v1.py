# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterV1Args', 'ClusterV1']

@pulumi.input_type
class ClusterV1Args:
    def __init__(__self__, *,
                 available_zone_id: pulumi.Input[_builtins.str],
                 billing_type: pulumi.Input[_builtins.int],
                 cluster_admin_secret: pulumi.Input[_builtins.str],
                 cluster_name: pulumi.Input[_builtins.str],
                 component_lists: pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]],
                 core_node_num: pulumi.Input[_builtins.int],
                 core_node_size: pulumi.Input[_builtins.str],
                 master_node_num: pulumi.Input[_builtins.int],
                 master_node_size: pulumi.Input[_builtins.str],
                 safe_mode: pulumi.Input[_builtins.int],
                 subnet_id: pulumi.Input[_builtins.str],
                 volume_size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 add_jobs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 log_collection: Optional[pulumi.Input[_builtins.int]] = None,
                 node_password: Optional[pulumi.Input[_builtins.str]] = None,
                 node_public_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ClusterV1 resource.
        """
        pulumi.set(__self__, "available_zone_id", available_zone_id)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "cluster_admin_secret", cluster_admin_secret)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "component_lists", component_lists)
        pulumi.set(__self__, "core_node_num", core_node_num)
        pulumi.set(__self__, "core_node_size", core_node_size)
        pulumi.set(__self__, "master_node_num", master_node_num)
        pulumi.set(__self__, "master_node_size", master_node_size)
        pulumi.set(__self__, "safe_mode", safe_mode)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if add_jobs is not None:
            pulumi.set(__self__, "add_jobs", add_jobs)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if log_collection is not None:
            pulumi.set(__self__, "log_collection", log_collection)
        if node_password is not None:
            pulumi.set(__self__, "node_password", node_password)
        if node_public_cert_name is not None:
            pulumi.set(__self__, "node_public_cert_name", node_public_cert_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="availableZoneId")
    def available_zone_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "available_zone_id")

    @available_zone_id.setter
    def available_zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "available_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "billing_type")

    @billing_type.setter
    def billing_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "billing_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterAdminSecret")
    def cluster_admin_secret(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster_admin_secret")

    @cluster_admin_secret.setter
    def cluster_admin_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_admin_secret", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]]:
        return pulumi.get(self, "component_lists")

    @component_lists.setter
    def component_lists(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]]):
        pulumi.set(self, "component_lists", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeNum")
    def core_node_num(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "core_node_num")

    @core_node_num.setter
    def core_node_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "core_node_num", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeSize")
    def core_node_size(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "core_node_size")

    @core_node_size.setter
    def core_node_size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "core_node_size", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeNum")
    def master_node_num(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "master_node_num")

    @master_node_num.setter
    def master_node_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "master_node_num", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeSize")
    def master_node_size(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "master_node_size")

    @master_node_size.setter
    def master_node_size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "master_node_size", value)

    @_builtins.property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "safe_mode")

    @safe_mode.setter
    def safe_mode(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "safe_mode", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "volume_size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="addJobs")
    def add_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]]:
        return pulumi.get(self, "add_jobs")

    @add_jobs.setter
    def add_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]]):
        pulumi.set(self, "add_jobs", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @_builtins.property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "log_collection")

    @log_collection.setter
    def log_collection(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "log_collection", value)

    @_builtins.property
    @pulumi.getter(name="nodePassword")
    def node_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "node_password")

    @node_password.setter
    def node_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_password", value)

    @_builtins.property
    @pulumi.getter(name="nodePublicCertName")
    def node_public_cert_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "node_public_cert_name")

    @node_public_cert_name.setter
    def node_public_cert_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_public_cert_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ClusterV1State:
    def __init__(__self__, *,
                 add_jobs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]] = None,
                 available_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 available_zone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 billing_type: Optional[pulumi.Input[_builtins.int]] = None,
                 charging_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_admin_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_state: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]]] = None,
                 core_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 core_node_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 core_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 core_node_spec_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 duration: Optional[pulumi.Input[_builtins.str]] = None,
                 error_info: Optional[pulumi.Input[_builtins.str]] = None,
                 external_alternate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 external_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 fee: Optional[pulumi.Input[_builtins.str]] = None,
                 hadoop_version: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 log_collection: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_spec_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_password: Optional[pulumi.Input[_builtins.str]] = None,
                 node_public_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_first: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 security_groups_id: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_security_groups_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 update_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vnc: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterV1 resources.
        """
        if add_jobs is not None:
            pulumi.set(__self__, "add_jobs", add_jobs)
        if available_zone_id is not None:
            pulumi.set(__self__, "available_zone_id", available_zone_id)
        if available_zone_name is not None:
            pulumi.set(__self__, "available_zone_name", available_zone_name)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)
        if charging_start_time is not None:
            pulumi.set(__self__, "charging_start_time", charging_start_time)
        if cluster_admin_secret is not None:
            pulumi.set(__self__, "cluster_admin_secret", cluster_admin_secret)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_state is not None:
            pulumi.set(__self__, "cluster_state", cluster_state)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if component_lists is not None:
            pulumi.set(__self__, "component_lists", component_lists)
        if core_node_num is not None:
            pulumi.set(__self__, "core_node_num", core_node_num)
        if core_node_product_id is not None:
            pulumi.set(__self__, "core_node_product_id", core_node_product_id)
        if core_node_size is not None:
            pulumi.set(__self__, "core_node_size", core_node_size)
        if core_node_spec_id is not None:
            pulumi.set(__self__, "core_node_spec_id", core_node_spec_id)
        if create_at is not None:
            pulumi.set(__self__, "create_at", create_at)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error_info is not None:
            pulumi.set(__self__, "error_info", error_info)
        if external_alternate_ip is not None:
            pulumi.set(__self__, "external_alternate_ip", external_alternate_ip)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if fee is not None:
            pulumi.set(__self__, "fee", fee)
        if hadoop_version is not None:
            pulumi.set(__self__, "hadoop_version", hadoop_version)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if log_collection is not None:
            pulumi.set(__self__, "log_collection", log_collection)
        if master_node_ip is not None:
            pulumi.set(__self__, "master_node_ip", master_node_ip)
        if master_node_num is not None:
            pulumi.set(__self__, "master_node_num", master_node_num)
        if master_node_product_id is not None:
            pulumi.set(__self__, "master_node_product_id", master_node_product_id)
        if master_node_size is not None:
            pulumi.set(__self__, "master_node_size", master_node_size)
        if master_node_spec_id is not None:
            pulumi.set(__self__, "master_node_spec_id", master_node_spec_id)
        if node_password is not None:
            pulumi.set(__self__, "node_password", node_password)
        if node_public_cert_name is not None:
            pulumi.set(__self__, "node_public_cert_name", node_public_cert_name)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if private_ip_first is not None:
            pulumi.set(__self__, "private_ip_first", private_ip_first)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if safe_mode is not None:
            pulumi.set(__self__, "safe_mode", safe_mode)
        if security_groups_id is not None:
            pulumi.set(__self__, "security_groups_id", security_groups_id)
        if slave_security_groups_id is not None:
            pulumi.set(__self__, "slave_security_groups_id", slave_security_groups_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_at is not None:
            pulumi.set(__self__, "update_at", update_at)
        if vnc is not None:
            pulumi.set(__self__, "vnc", vnc)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="addJobs")
    def add_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]]:
        return pulumi.get(self, "add_jobs")

    @add_jobs.setter
    def add_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1AddJobArgs']]]]):
        pulumi.set(self, "add_jobs", value)

    @_builtins.property
    @pulumi.getter(name="availableZoneId")
    def available_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "available_zone_id")

    @available_zone_id.setter
    def available_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "available_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="availableZoneName")
    def available_zone_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "available_zone_name")

    @available_zone_name.setter
    def available_zone_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "available_zone_name", value)

    @_builtins.property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "billing_type")

    @billing_type.setter
    def billing_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "billing_type", value)

    @_builtins.property
    @pulumi.getter(name="chargingStartTime")
    def charging_start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "charging_start_time")

    @charging_start_time.setter
    def charging_start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_start_time", value)

    @_builtins.property
    @pulumi.getter(name="clusterAdminSecret")
    def cluster_admin_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_admin_secret")

    @cluster_admin_secret.setter
    def cluster_admin_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_admin_secret", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterState")
    def cluster_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_state")

    @cluster_state.setter
    def cluster_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_state", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @_builtins.property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]]]:
        return pulumi.get(self, "component_lists")

    @component_lists.setter
    def component_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV1ComponentListArgs']]]]):
        pulumi.set(self, "component_lists", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeNum")
    def core_node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "core_node_num")

    @core_node_num.setter
    def core_node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "core_node_num", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeProductId")
    def core_node_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "core_node_product_id")

    @core_node_product_id.setter
    def core_node_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_node_product_id", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeSize")
    def core_node_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "core_node_size")

    @core_node_size.setter
    def core_node_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_node_size", value)

    @_builtins.property
    @pulumi.getter(name="coreNodeSpecId")
    def core_node_spec_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "core_node_spec_id")

    @core_node_spec_id.setter
    def core_node_spec_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_node_spec_id", value)

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "create_at")

    @create_at.setter
    def create_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_at", value)

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deployment_id", value)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "error_info")

    @error_info.setter
    def error_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_info", value)

    @_builtins.property
    @pulumi.getter(name="externalAlternateIp")
    def external_alternate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "external_alternate_ip")

    @external_alternate_ip.setter
    def external_alternate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_alternate_ip", value)

    @_builtins.property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_ip", value)

    @_builtins.property
    @pulumi.getter
    def fee(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fee")

    @fee.setter
    def fee(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fee", value)

    @_builtins.property
    @pulumi.getter(name="hadoopVersion")
    def hadoop_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hadoop_version")

    @hadoop_version.setter
    def hadoop_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hadoop_version", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "internal_ip", value)

    @_builtins.property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "log_collection")

    @log_collection.setter
    def log_collection(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "log_collection", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeIp")
    def master_node_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_node_ip")

    @master_node_ip.setter
    def master_node_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_node_ip", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeNum")
    def master_node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "master_node_num")

    @master_node_num.setter
    def master_node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "master_node_num", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeProductId")
    def master_node_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_node_product_id")

    @master_node_product_id.setter
    def master_node_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_node_product_id", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeSize")
    def master_node_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_node_size")

    @master_node_size.setter
    def master_node_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_node_size", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeSpecId")
    def master_node_spec_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_node_spec_id")

    @master_node_spec_id.setter
    def master_node_spec_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_node_spec_id", value)

    @_builtins.property
    @pulumi.getter(name="nodePassword")
    def node_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "node_password")

    @node_password.setter
    def node_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_password", value)

    @_builtins.property
    @pulumi.getter(name="nodePublicCertName")
    def node_public_cert_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "node_public_cert_name")

    @node_public_cert_name.setter
    def node_public_cert_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_public_cert_name", value)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "order_id", value)

    @_builtins.property
    @pulumi.getter(name="privateIpFirst")
    def private_ip_first(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_ip_first")

    @private_ip_first.setter
    def private_ip_first(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_first", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remark", value)

    @_builtins.property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "safe_mode")

    @safe_mode.setter
    def safe_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "safe_mode", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupsId")
    def security_groups_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "security_groups_id")

    @security_groups_id.setter
    def security_groups_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_groups_id", value)

    @_builtins.property
    @pulumi.getter(name="slaveSecurityGroupsId")
    def slave_security_groups_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slave_security_groups_id")

    @slave_security_groups_id.setter
    def slave_security_groups_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slave_security_groups_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "update_at")

    @update_at.setter
    def update_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_at", value)

    @_builtins.property
    @pulumi.getter
    def vnc(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vnc")

    @vnc.setter
    def vnc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vnc", value)

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "volume_size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Mrs/clusterV1:ClusterV1")
class ClusterV1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1AddJobArgs', 'ClusterV1AddJobArgsDict']]]]] = None,
                 available_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 billing_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_admin_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1ComponentListArgs', 'ClusterV1ComponentListArgsDict']]]]] = None,
                 core_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 core_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 log_collection: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 node_password: Optional[pulumi.Input[_builtins.str]] = None,
                 node_public_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ClusterV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterV1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClusterV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterV1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterV1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1AddJobArgs', 'ClusterV1AddJobArgsDict']]]]] = None,
                 available_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 billing_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_admin_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.int]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1ComponentListArgs', 'ClusterV1ComponentListArgsDict']]]]] = None,
                 core_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 core_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 log_collection: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 master_node_size: Optional[pulumi.Input[_builtins.str]] = None,
                 node_password: Optional[pulumi.Input[_builtins.str]] = None,
                 node_public_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterV1Args.__new__(ClusterV1Args)

            __props__.__dict__["add_jobs"] = add_jobs
            if available_zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'available_zone_id'")
            __props__.__dict__["available_zone_id"] = available_zone_id
            if billing_type is None and not opts.urn:
                raise TypeError("Missing required property 'billing_type'")
            __props__.__dict__["billing_type"] = billing_type
            if cluster_admin_secret is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_admin_secret'")
            __props__.__dict__["cluster_admin_secret"] = None if cluster_admin_secret is None else pulumi.Output.secret(cluster_admin_secret)
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["cluster_version"] = cluster_version
            if component_lists is None and not opts.urn:
                raise TypeError("Missing required property 'component_lists'")
            __props__.__dict__["component_lists"] = component_lists
            if core_node_num is None and not opts.urn:
                raise TypeError("Missing required property 'core_node_num'")
            __props__.__dict__["core_node_num"] = core_node_num
            if core_node_size is None and not opts.urn:
                raise TypeError("Missing required property 'core_node_size'")
            __props__.__dict__["core_node_size"] = core_node_size
            __props__.__dict__["log_collection"] = log_collection
            if master_node_num is None and not opts.urn:
                raise TypeError("Missing required property 'master_node_num'")
            __props__.__dict__["master_node_num"] = master_node_num
            if master_node_size is None and not opts.urn:
                raise TypeError("Missing required property 'master_node_size'")
            __props__.__dict__["master_node_size"] = master_node_size
            __props__.__dict__["node_password"] = None if node_password is None else pulumi.Output.secret(node_password)
            __props__.__dict__["node_public_cert_name"] = node_public_cert_name
            __props__.__dict__["region"] = region
            if safe_mode is None and not opts.urn:
                raise TypeError("Missing required property 'safe_mode'")
            __props__.__dict__["safe_mode"] = safe_mode
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'volume_size'")
            __props__.__dict__["volume_size"] = volume_size
            if volume_type is None and not opts.urn:
                raise TypeError("Missing required property 'volume_type'")
            __props__.__dict__["volume_type"] = volume_type
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["available_zone_name"] = None
            __props__.__dict__["charging_start_time"] = None
            __props__.__dict__["cluster_state"] = None
            __props__.__dict__["core_node_product_id"] = None
            __props__.__dict__["core_node_spec_id"] = None
            __props__.__dict__["create_at"] = None
            __props__.__dict__["deployment_id"] = None
            __props__.__dict__["duration"] = None
            __props__.__dict__["error_info"] = None
            __props__.__dict__["external_alternate_ip"] = None
            __props__.__dict__["external_ip"] = None
            __props__.__dict__["fee"] = None
            __props__.__dict__["hadoop_version"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["internal_ip"] = None
            __props__.__dict__["master_node_ip"] = None
            __props__.__dict__["master_node_product_id"] = None
            __props__.__dict__["master_node_spec_id"] = None
            __props__.__dict__["order_id"] = None
            __props__.__dict__["private_ip_first"] = None
            __props__.__dict__["remark"] = None
            __props__.__dict__["security_groups_id"] = None
            __props__.__dict__["slave_security_groups_id"] = None
            __props__.__dict__["update_at"] = None
            __props__.__dict__["vnc"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clusterAdminSecret", "nodePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ClusterV1, __self__).__init__(
            'huaweicloud:Mrs/clusterV1:ClusterV1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1AddJobArgs', 'ClusterV1AddJobArgsDict']]]]] = None,
            available_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
            available_zone_name: Optional[pulumi.Input[_builtins.str]] = None,
            billing_type: Optional[pulumi.Input[_builtins.int]] = None,
            charging_start_time: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_admin_secret: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_state: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.int]] = None,
            cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
            component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterV1ComponentListArgs', 'ClusterV1ComponentListArgsDict']]]]] = None,
            core_node_num: Optional[pulumi.Input[_builtins.int]] = None,
            core_node_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            core_node_size: Optional[pulumi.Input[_builtins.str]] = None,
            core_node_spec_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_at: Optional[pulumi.Input[_builtins.str]] = None,
            deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
            duration: Optional[pulumi.Input[_builtins.str]] = None,
            error_info: Optional[pulumi.Input[_builtins.str]] = None,
            external_alternate_ip: Optional[pulumi.Input[_builtins.str]] = None,
            external_ip: Optional[pulumi.Input[_builtins.str]] = None,
            fee: Optional[pulumi.Input[_builtins.str]] = None,
            hadoop_version: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            internal_ip: Optional[pulumi.Input[_builtins.str]] = None,
            log_collection: Optional[pulumi.Input[_builtins.int]] = None,
            master_node_ip: Optional[pulumi.Input[_builtins.str]] = None,
            master_node_num: Optional[pulumi.Input[_builtins.int]] = None,
            master_node_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            master_node_size: Optional[pulumi.Input[_builtins.str]] = None,
            master_node_spec_id: Optional[pulumi.Input[_builtins.str]] = None,
            node_password: Optional[pulumi.Input[_builtins.str]] = None,
            node_public_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
            order_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip_first: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remark: Optional[pulumi.Input[_builtins.str]] = None,
            safe_mode: Optional[pulumi.Input[_builtins.int]] = None,
            security_groups_id: Optional[pulumi.Input[_builtins.str]] = None,
            slave_security_groups_id: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            update_at: Optional[pulumi.Input[_builtins.str]] = None,
            vnc: Optional[pulumi.Input[_builtins.str]] = None,
            volume_size: Optional[pulumi.Input[_builtins.int]] = None,
            volume_type: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterV1':
        """
        Get an existing ClusterV1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterV1State.__new__(_ClusterV1State)

        __props__.__dict__["add_jobs"] = add_jobs
        __props__.__dict__["available_zone_id"] = available_zone_id
        __props__.__dict__["available_zone_name"] = available_zone_name
        __props__.__dict__["billing_type"] = billing_type
        __props__.__dict__["charging_start_time"] = charging_start_time
        __props__.__dict__["cluster_admin_secret"] = cluster_admin_secret
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_state"] = cluster_state
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["component_lists"] = component_lists
        __props__.__dict__["core_node_num"] = core_node_num
        __props__.__dict__["core_node_product_id"] = core_node_product_id
        __props__.__dict__["core_node_size"] = core_node_size
        __props__.__dict__["core_node_spec_id"] = core_node_spec_id
        __props__.__dict__["create_at"] = create_at
        __props__.__dict__["deployment_id"] = deployment_id
        __props__.__dict__["duration"] = duration
        __props__.__dict__["error_info"] = error_info
        __props__.__dict__["external_alternate_ip"] = external_alternate_ip
        __props__.__dict__["external_ip"] = external_ip
        __props__.__dict__["fee"] = fee
        __props__.__dict__["hadoop_version"] = hadoop_version
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["internal_ip"] = internal_ip
        __props__.__dict__["log_collection"] = log_collection
        __props__.__dict__["master_node_ip"] = master_node_ip
        __props__.__dict__["master_node_num"] = master_node_num
        __props__.__dict__["master_node_product_id"] = master_node_product_id
        __props__.__dict__["master_node_size"] = master_node_size
        __props__.__dict__["master_node_spec_id"] = master_node_spec_id
        __props__.__dict__["node_password"] = node_password
        __props__.__dict__["node_public_cert_name"] = node_public_cert_name
        __props__.__dict__["order_id"] = order_id
        __props__.__dict__["private_ip_first"] = private_ip_first
        __props__.__dict__["region"] = region
        __props__.__dict__["remark"] = remark
        __props__.__dict__["safe_mode"] = safe_mode
        __props__.__dict__["security_groups_id"] = security_groups_id
        __props__.__dict__["slave_security_groups_id"] = slave_security_groups_id
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_at"] = update_at
        __props__.__dict__["vnc"] = vnc
        __props__.__dict__["volume_size"] = volume_size
        __props__.__dict__["volume_type"] = volume_type
        __props__.__dict__["vpc_id"] = vpc_id
        return ClusterV1(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addJobs")
    def add_jobs(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterV1AddJob']]]:
        return pulumi.get(self, "add_jobs")

    @_builtins.property
    @pulumi.getter(name="availableZoneId")
    def available_zone_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "available_zone_id")

    @_builtins.property
    @pulumi.getter(name="availableZoneName")
    def available_zone_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "available_zone_name")

    @_builtins.property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "billing_type")

    @_builtins.property
    @pulumi.getter(name="chargingStartTime")
    def charging_start_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "charging_start_time")

    @_builtins.property
    @pulumi.getter(name="clusterAdminSecret")
    def cluster_admin_secret(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_admin_secret")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterState")
    def cluster_state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_state")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_version")

    @_builtins.property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> pulumi.Output[Sequence['outputs.ClusterV1ComponentList']]:
        return pulumi.get(self, "component_lists")

    @_builtins.property
    @pulumi.getter(name="coreNodeNum")
    def core_node_num(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "core_node_num")

    @_builtins.property
    @pulumi.getter(name="coreNodeProductId")
    def core_node_product_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "core_node_product_id")

    @_builtins.property
    @pulumi.getter(name="coreNodeSize")
    def core_node_size(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "core_node_size")

    @_builtins.property
    @pulumi.getter(name="coreNodeSpecId")
    def core_node_spec_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "core_node_spec_id")

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "error_info")

    @_builtins.property
    @pulumi.getter(name="externalAlternateIp")
    def external_alternate_ip(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "external_alternate_ip")

    @_builtins.property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "external_ip")

    @_builtins.property
    @pulumi.getter
    def fee(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "fee")

    @_builtins.property
    @pulumi.getter(name="hadoopVersion")
    def hadoop_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hadoop_version")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "internal_ip")

    @_builtins.property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "log_collection")

    @_builtins.property
    @pulumi.getter(name="masterNodeIp")
    def master_node_ip(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_node_ip")

    @_builtins.property
    @pulumi.getter(name="masterNodeNum")
    def master_node_num(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "master_node_num")

    @_builtins.property
    @pulumi.getter(name="masterNodeProductId")
    def master_node_product_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_node_product_id")

    @_builtins.property
    @pulumi.getter(name="masterNodeSize")
    def master_node_size(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_node_size")

    @_builtins.property
    @pulumi.getter(name="masterNodeSpecId")
    def master_node_spec_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_node_spec_id")

    @_builtins.property
    @pulumi.getter(name="nodePassword")
    def node_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "node_password")

    @_builtins.property
    @pulumi.getter(name="nodePublicCertName")
    def node_public_cert_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "node_public_cert_name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="privateIpFirst")
    def private_ip_first(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_ip_first")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def remark(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "remark")

    @_builtins.property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "safe_mode")

    @_builtins.property
    @pulumi.getter(name="securityGroupsId")
    def security_groups_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "security_groups_id")

    @_builtins.property
    @pulumi.getter(name="slaveSecurityGroupsId")
    def slave_security_groups_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slave_security_groups_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter
    def vnc(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vnc")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpc_id")

