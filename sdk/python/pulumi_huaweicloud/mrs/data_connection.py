# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataConnectionArgs', 'DataConnection']

@pulumi.input_type
class DataConnectionArgs:
    def __init__(__self__, *,
                 source_info: pulumi.Input['DataConnectionSourceInfoArgs'],
                 source_type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataConnection resource.
        :param pulumi.Input['DataConnectionSourceInfoArgs'] source_info: Information about the data source.  
               The source_info structure is documented below.
               
               <a name="DataConnection_SourceInfo"></a>
               The `source_info` block supports:
        :param pulumi.Input[_builtins.str] source_type: The type of data source.  
               The options are as follows:
               + **RDS_POSTGRES**: RDS PostgreSQL database.
               + **RDS_MYSQL**: RDS MySQL database.
               + **gaussdb-mysql**: GaussDB(for MySQL).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The data connection name.  
               The name can contain a maximum of 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "source_info", source_info)
        pulumi.set(__self__, "source_type", source_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="sourceInfo")
    def source_info(self) -> pulumi.Input['DataConnectionSourceInfoArgs']:
        """
        Information about the data source.  
        The source_info structure is documented below.

        <a name="DataConnection_SourceInfo"></a>
        The `source_info` block supports:
        """
        return pulumi.get(self, "source_info")

    @source_info.setter
    def source_info(self, value: pulumi.Input['DataConnectionSourceInfoArgs']):
        pulumi.set(self, "source_info", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of data source.  
        The options are as follows:
        + **RDS_POSTGRES**: RDS PostgreSQL database.
        + **RDS_MYSQL**: RDS MySQL database.
        + **gaussdb-mysql**: GaussDB(for MySQL).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data connection name.  
        The name can contain a maximum of 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataConnectionState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_info: Optional[pulumi.Input['DataConnectionSourceInfoArgs']] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 used_clusters: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataConnection resources.
        :param pulumi.Input[_builtins.str] name: The data connection name.  
               The name can contain a maximum of 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['DataConnectionSourceInfoArgs'] source_info: Information about the data source.  
               The source_info structure is documented below.
               
               <a name="DataConnection_SourceInfo"></a>
               The `source_info` block supports:
        :param pulumi.Input[_builtins.str] source_type: The type of data source.  
               The options are as follows:
               + **RDS_POSTGRES**: RDS PostgreSQL database.
               + **RDS_MYSQL**: RDS MySQL database.
               + **gaussdb-mysql**: GaussDB(for MySQL).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The status of the data connection.  
               The valid value are as follows:
               + **0**: data connections are available.
        :param pulumi.Input[_builtins.str] used_clusters: Cluster IDs that use this data connection, separated by commas.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_info is not None:
            pulumi.set(__self__, "source_info", source_info)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if used_clusters is not None:
            pulumi.set(__self__, "used_clusters", used_clusters)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data connection name.  
        The name can contain a maximum of 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceInfo")
    def source_info(self) -> Optional[pulumi.Input['DataConnectionSourceInfoArgs']]:
        """
        Information about the data source.  
        The source_info structure is documented below.

        <a name="DataConnection_SourceInfo"></a>
        The `source_info` block supports:
        """
        return pulumi.get(self, "source_info")

    @source_info.setter
    def source_info(self, value: Optional[pulumi.Input['DataConnectionSourceInfoArgs']]):
        pulumi.set(self, "source_info", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of data source.  
        The options are as follows:
        + **RDS_POSTGRES**: RDS PostgreSQL database.
        + **RDS_MYSQL**: RDS MySQL database.
        + **gaussdb-mysql**: GaussDB(for MySQL).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The status of the data connection.  
        The valid value are as follows:
        + **0**: data connections are available.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="usedClusters")
    def used_clusters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster IDs that use this data connection, separated by commas.
        """
        return pulumi.get(self, "used_clusters")

    @used_clusters.setter
    def used_clusters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "used_clusters", value)


@pulumi.type_token("huaweicloud:Mrs/dataConnection:DataConnection")
class DataConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_info: Optional[pulumi.Input[Union['DataConnectionSourceInfoArgs', 'DataConnectionSourceInfoArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a data connection resource of Mapreduce within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        db_instance_id = config.require_object("dbInstanceId")
        database = config.require_object("database")
        user_name = config.require_object("userName")
        password = config.require_object("password")
        test = huaweicloud.mrs.DataConnection("test",
            name="demo",
            source_type="RDS_MYSQL",
            source_info={
                "db_instance_id": db_instance_id,
                "db_name": database,
                "user_name": user_name,
                "password": password,
            })
        ```

        ## Import

        The data connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Mrs/dataConnection:DataConnection test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_info.0.password`.

        It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_mapreduce_data_connection" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_info.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The data connection name.  
               The name can contain a maximum of 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['DataConnectionSourceInfoArgs', 'DataConnectionSourceInfoArgsDict']] source_info: Information about the data source.  
               The source_info structure is documented below.
               
               <a name="DataConnection_SourceInfo"></a>
               The `source_info` block supports:
        :param pulumi.Input[_builtins.str] source_type: The type of data source.  
               The options are as follows:
               + **RDS_POSTGRES**: RDS PostgreSQL database.
               + **RDS_MYSQL**: RDS MySQL database.
               + **gaussdb-mysql**: GaussDB(for MySQL).
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a data connection resource of Mapreduce within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        db_instance_id = config.require_object("dbInstanceId")
        database = config.require_object("database")
        user_name = config.require_object("userName")
        password = config.require_object("password")
        test = huaweicloud.mrs.DataConnection("test",
            name="demo",
            source_type="RDS_MYSQL",
            source_info={
                "db_instance_id": db_instance_id,
                "db_name": database,
                "user_name": user_name,
                "password": password,
            })
        ```

        ## Import

        The data connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Mrs/dataConnection:DataConnection test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_info.0.password`.

        It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_mapreduce_data_connection" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_info.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DataConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_info: Optional[pulumi.Input[Union['DataConnectionSourceInfoArgs', 'DataConnectionSourceInfoArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataConnectionArgs.__new__(DataConnectionArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if source_info is None and not opts.urn:
                raise TypeError("Missing required property 'source_info'")
            __props__.__dict__["source_info"] = source_info
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["status"] = None
            __props__.__dict__["used_clusters"] = None
        super(DataConnection, __self__).__init__(
            'huaweicloud:Mrs/dataConnection:DataConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_info: Optional[pulumi.Input[Union['DataConnectionSourceInfoArgs', 'DataConnectionSourceInfoArgsDict']]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            used_clusters: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataConnection':
        """
        Get an existing DataConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The data connection name.  
               The name can contain a maximum of 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['DataConnectionSourceInfoArgs', 'DataConnectionSourceInfoArgsDict']] source_info: Information about the data source.  
               The source_info structure is documented below.
               
               <a name="DataConnection_SourceInfo"></a>
               The `source_info` block supports:
        :param pulumi.Input[_builtins.str] source_type: The type of data source.  
               The options are as follows:
               + **RDS_POSTGRES**: RDS PostgreSQL database.
               + **RDS_MYSQL**: RDS MySQL database.
               + **gaussdb-mysql**: GaussDB(for MySQL).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The status of the data connection.  
               The valid value are as follows:
               + **0**: data connections are available.
        :param pulumi.Input[_builtins.str] used_clusters: Cluster IDs that use this data connection, separated by commas.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataConnectionState.__new__(_DataConnectionState)

        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["source_info"] = source_info
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["status"] = status
        __props__.__dict__["used_clusters"] = used_clusters
        return DataConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The data connection name.  
        The name can contain a maximum of 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceInfo")
    def source_info(self) -> pulumi.Output['outputs.DataConnectionSourceInfo']:
        """
        Information about the data source.  
        The source_info structure is documented below.

        <a name="DataConnection_SourceInfo"></a>
        The `source_info` block supports:
        """
        return pulumi.get(self, "source_info")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of data source.  
        The options are as follows:
        + **RDS_POSTGRES**: RDS PostgreSQL database.
        + **RDS_MYSQL**: RDS MySQL database.
        + **gaussdb-mysql**: GaussDB(for MySQL).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        The status of the data connection.  
        The valid value are as follows:
        + **0**: data connections are available.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="usedClusters")
    def used_clusters(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster IDs that use this data connection, separated by commas.
        """
        return pulumi.get(self, "used_clusters")

