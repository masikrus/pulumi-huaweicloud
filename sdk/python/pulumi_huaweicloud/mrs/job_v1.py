# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['JobV1Args', 'JobV1']

@pulumi.input_type
class JobV1Args:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 jar_path: pulumi.Input[_builtins.str],
                 job_name: pulumi.Input[_builtins.str],
                 job_type: pulumi.Input[_builtins.int],
                 arguments: Optional[pulumi.Input[_builtins.str]] = None,
                 hive_script_path: Optional[pulumi.Input[_builtins.str]] = None,
                 input: Optional[pulumi.Input[_builtins.str]] = None,
                 is_protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_public: Optional[pulumi.Input[_builtins.bool]] = None,
                 job_log: Optional[pulumi.Input[_builtins.str]] = None,
                 output: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a JobV1 resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "jar_path", jar_path)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "job_type", job_type)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if hive_script_path is not None:
            pulumi.set(__self__, "hive_script_path", hive_script_path)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if job_log is not None:
            pulumi.set(__self__, "job_log", job_log)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="jarPath")
    def jar_path(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "jar_path")

    @jar_path.setter
    def jar_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "jar_path", value)

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "job_name", value)

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "job_type", value)

    @_builtins.property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arguments", value)

    @_builtins.property
    @pulumi.getter(name="hiveScriptPath")
    def hive_script_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hive_script_path")

    @hive_script_path.setter
    def hive_script_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hive_script_path", value)

    @_builtins.property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "input", value)

    @_builtins.property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_protected")

    @is_protected.setter
    def is_protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_protected", value)

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_public", value)

    @_builtins.property
    @pulumi.getter(name="jobLog")
    def job_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "job_log")

    @job_log.setter
    def job_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_log", value)

    @_builtins.property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "output", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _JobV1State:
    def __init__(__self__, *,
                 arguments: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hive_script_path: Optional[pulumi.Input[_builtins.str]] = None,
                 input: Optional[pulumi.Input[_builtins.str]] = None,
                 is_protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_public: Optional[pulumi.Input[_builtins.bool]] = None,
                 jar_path: Optional[pulumi.Input[_builtins.str]] = None,
                 job_log: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 job_state: Optional[pulumi.Input[_builtins.str]] = None,
                 job_type: Optional[pulumi.Input[_builtins.int]] = None,
                 output: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering JobV1 resources.
        """
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if hive_script_path is not None:
            pulumi.set(__self__, "hive_script_path", hive_script_path)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if jar_path is not None:
            pulumi.set(__self__, "jar_path", jar_path)
        if job_log is not None:
            pulumi.set(__self__, "job_log", job_log)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if job_state is not None:
            pulumi.set(__self__, "job_state", job_state)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arguments", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="hiveScriptPath")
    def hive_script_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hive_script_path")

    @hive_script_path.setter
    def hive_script_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hive_script_path", value)

    @_builtins.property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "input", value)

    @_builtins.property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_protected")

    @is_protected.setter
    def is_protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_protected", value)

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_public", value)

    @_builtins.property
    @pulumi.getter(name="jarPath")
    def jar_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "jar_path")

    @jar_path.setter
    def jar_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jar_path", value)

    @_builtins.property
    @pulumi.getter(name="jobLog")
    def job_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "job_log")

    @job_log.setter
    def job_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_log", value)

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_name", value)

    @_builtins.property
    @pulumi.getter(name="jobState")
    def job_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "job_state")

    @job_state.setter
    def job_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_state", value)

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "job_type", value)

    @_builtins.property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "output", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Mrs/jobV1:JobV1")
class JobV1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arguments: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hive_script_path: Optional[pulumi.Input[_builtins.str]] = None,
                 input: Optional[pulumi.Input[_builtins.str]] = None,
                 is_protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_public: Optional[pulumi.Input[_builtins.bool]] = None,
                 jar_path: Optional[pulumi.Input[_builtins.str]] = None,
                 job_log: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 job_type: Optional[pulumi.Input[_builtins.int]] = None,
                 output: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a JobV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobV1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a JobV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param JobV1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobV1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arguments: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hive_script_path: Optional[pulumi.Input[_builtins.str]] = None,
                 input: Optional[pulumi.Input[_builtins.str]] = None,
                 is_protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_public: Optional[pulumi.Input[_builtins.bool]] = None,
                 jar_path: Optional[pulumi.Input[_builtins.str]] = None,
                 job_log: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 job_type: Optional[pulumi.Input[_builtins.int]] = None,
                 output: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobV1Args.__new__(JobV1Args)

            __props__.__dict__["arguments"] = arguments
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["hive_script_path"] = hive_script_path
            __props__.__dict__["input"] = input
            __props__.__dict__["is_protected"] = is_protected
            __props__.__dict__["is_public"] = is_public
            if jar_path is None and not opts.urn:
                raise TypeError("Missing required property 'jar_path'")
            __props__.__dict__["jar_path"] = jar_path
            __props__.__dict__["job_log"] = job_log
            if job_name is None and not opts.urn:
                raise TypeError("Missing required property 'job_name'")
            __props__.__dict__["job_name"] = job_name
            if job_type is None and not opts.urn:
                raise TypeError("Missing required property 'job_type'")
            __props__.__dict__["job_type"] = job_type
            __props__.__dict__["output"] = output
            __props__.__dict__["region"] = region
            __props__.__dict__["job_state"] = None
        super(JobV1, __self__).__init__(
            'huaweicloud:Mrs/jobV1:JobV1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arguments: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            hive_script_path: Optional[pulumi.Input[_builtins.str]] = None,
            input: Optional[pulumi.Input[_builtins.str]] = None,
            is_protected: Optional[pulumi.Input[_builtins.bool]] = None,
            is_public: Optional[pulumi.Input[_builtins.bool]] = None,
            jar_path: Optional[pulumi.Input[_builtins.str]] = None,
            job_log: Optional[pulumi.Input[_builtins.str]] = None,
            job_name: Optional[pulumi.Input[_builtins.str]] = None,
            job_state: Optional[pulumi.Input[_builtins.str]] = None,
            job_type: Optional[pulumi.Input[_builtins.int]] = None,
            output: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'JobV1':
        """
        Get an existing JobV1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobV1State.__new__(_JobV1State)

        __props__.__dict__["arguments"] = arguments
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["hive_script_path"] = hive_script_path
        __props__.__dict__["input"] = input
        __props__.__dict__["is_protected"] = is_protected
        __props__.__dict__["is_public"] = is_public
        __props__.__dict__["jar_path"] = jar_path
        __props__.__dict__["job_log"] = job_log
        __props__.__dict__["job_name"] = job_name
        __props__.__dict__["job_state"] = job_state
        __props__.__dict__["job_type"] = job_type
        __props__.__dict__["output"] = output
        __props__.__dict__["region"] = region
        return JobV1(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def arguments(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "arguments")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="hiveScriptPath")
    def hive_script_path(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hive_script_path")

    @_builtins.property
    @pulumi.getter
    def input(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "input")

    @_builtins.property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_protected")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter(name="jarPath")
    def jar_path(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "jar_path")

    @_builtins.property
    @pulumi.getter(name="jobLog")
    def job_log(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "job_log")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="jobState")
    def job_state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "job_state")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter
    def output(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "output")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

