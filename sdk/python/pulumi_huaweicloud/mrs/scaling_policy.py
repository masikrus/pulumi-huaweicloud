# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScalingPolicyArgs', 'ScalingPolicy']

@pulumi.input_type
class ScalingPolicyArgs:
    def __init__(__self__, *,
                 auto_scaling_enable: pulumi.Input[_builtins.bool],
                 cluster_id: pulumi.Input[_builtins.str],
                 max_capacity: pulumi.Input[_builtins.int],
                 min_capacity: pulumi.Input[_builtins.int],
                 node_group: pulumi.Input[_builtins.str],
                 exec_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources_plans: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]] = None):
        """
        The set of arguments for constructing a ScalingPolicy resource.
        :param pulumi.Input[_builtins.bool] auto_scaling_enable: Whether to enable the auto scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: The MRS cluster ID to which the auto scaling policy applies.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_capacity: Maximum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
               
               <a name="ScalingPolicy_Rule"></a>
               The `rules` block supports:
        :param pulumi.Input[_builtins.int] min_capacity: Minimum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
        :param pulumi.Input[_builtins.str] node_group: Name of the node group to which the auto scaling policy applies.  
               Currently, only Task nodes support auto scaling rules.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]] exec_scripts: The list of custom scaling automation scripts.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The exec_scripts structure is documented below.
               
               <a name="ScalingPolicy_ResourcesPlan"></a>
               The `resources_plans` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]] resources_plans: The list of resources plans.  
               The resources_plans structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]] rules: The list of auto scaling rules.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The rules structure is documented below.
        """
        pulumi.set(__self__, "auto_scaling_enable", auto_scaling_enable)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "min_capacity", min_capacity)
        pulumi.set(__self__, "node_group", node_group)
        if exec_scripts is not None:
            pulumi.set(__self__, "exec_scripts", exec_scripts)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources_plans is not None:
            pulumi.set(__self__, "resources_plans", resources_plans)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter(name="autoScalingEnable")
    def auto_scaling_enable(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to enable the auto scaling policy.
        """
        return pulumi.get(self, "auto_scaling_enable")

    @auto_scaling_enable.setter
    def auto_scaling_enable(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "auto_scaling_enable", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The MRS cluster ID to which the auto scaling policy applies.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Input[_builtins.int]:
        """
        Maximum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.

        <a name="ScalingPolicy_Rule"></a>
        The `rules` block supports:
        """
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_capacity", value)

    @_builtins.property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Input[_builtins.int]:
        """
        Minimum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.
        """
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_capacity", value)

    @_builtins.property
    @pulumi.getter(name="nodeGroup")
    def node_group(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the node group to which the auto scaling policy applies.  
        Currently, only Task nodes support auto scaling rules.
        """
        return pulumi.get(self, "node_group")

    @node_group.setter
    def node_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "node_group", value)

    @_builtins.property
    @pulumi.getter(name="execScripts")
    def exec_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]]:
        """
        The list of custom scaling automation scripts.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The exec_scripts structure is documented below.

        <a name="ScalingPolicy_ResourcesPlan"></a>
        The `resources_plans` block supports:
        """
        return pulumi.get(self, "exec_scripts")

    @exec_scripts.setter
    def exec_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]]):
        pulumi.set(self, "exec_scripts", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcesPlans")
    def resources_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]]:
        """
        The list of resources plans.  
        The resources_plans structure is documented below.
        """
        return pulumi.get(self, "resources_plans")

    @resources_plans.setter
    def resources_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]]):
        pulumi.set(self, "resources_plans", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]]:
        """
        The list of auto scaling rules.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _ScalingPolicyState:
    def __init__(__self__, *,
                 auto_scaling_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 exec_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]] = None,
                 max_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 min_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 node_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources_plans: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering ScalingPolicy resources.
        :param pulumi.Input[_builtins.bool] auto_scaling_enable: Whether to enable the auto scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: The MRS cluster ID to which the auto scaling policy applies.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]] exec_scripts: The list of custom scaling automation scripts.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The exec_scripts structure is documented below.
               
               <a name="ScalingPolicy_ResourcesPlan"></a>
               The `resources_plans` block supports:
        :param pulumi.Input[_builtins.int] max_capacity: Maximum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
               
               <a name="ScalingPolicy_Rule"></a>
               The `rules` block supports:
        :param pulumi.Input[_builtins.int] min_capacity: Minimum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
        :param pulumi.Input[_builtins.str] node_group: Name of the node group to which the auto scaling policy applies.  
               Currently, only Task nodes support auto scaling rules.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]] resources_plans: The list of resources plans.  
               The resources_plans structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]] rules: The list of auto scaling rules.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The rules structure is documented below.
        """
        if auto_scaling_enable is not None:
            pulumi.set(__self__, "auto_scaling_enable", auto_scaling_enable)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if exec_scripts is not None:
            pulumi.set(__self__, "exec_scripts", exec_scripts)
        if max_capacity is not None:
            pulumi.set(__self__, "max_capacity", max_capacity)
        if min_capacity is not None:
            pulumi.set(__self__, "min_capacity", min_capacity)
        if node_group is not None:
            pulumi.set(__self__, "node_group", node_group)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources_plans is not None:
            pulumi.set(__self__, "resources_plans", resources_plans)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter(name="autoScalingEnable")
    def auto_scaling_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the auto scaling policy.
        """
        return pulumi.get(self, "auto_scaling_enable")

    @auto_scaling_enable.setter
    def auto_scaling_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_scaling_enable", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MRS cluster ID to which the auto scaling policy applies.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="execScripts")
    def exec_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]]:
        """
        The list of custom scaling automation scripts.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The exec_scripts structure is documented below.

        <a name="ScalingPolicy_ResourcesPlan"></a>
        The `resources_plans` block supports:
        """
        return pulumi.get(self, "exec_scripts")

    @exec_scripts.setter
    def exec_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyExecScriptArgs']]]]):
        pulumi.set(self, "exec_scripts", value)

    @_builtins.property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.

        <a name="ScalingPolicy_Rule"></a>
        The `rules` block supports:
        """
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_capacity", value)

    @_builtins.property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.
        """
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_capacity", value)

    @_builtins.property
    @pulumi.getter(name="nodeGroup")
    def node_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the node group to which the auto scaling policy applies.  
        Currently, only Task nodes support auto scaling rules.
        """
        return pulumi.get(self, "node_group")

    @node_group.setter
    def node_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_group", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcesPlans")
    def resources_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]]:
        """
        The list of resources plans.  
        The resources_plans structure is documented below.
        """
        return pulumi.get(self, "resources_plans")

    @resources_plans.setter
    def resources_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyResourcesPlanArgs']]]]):
        pulumi.set(self, "resources_plans", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]]:
        """
        The list of auto scaling rules.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.type_token("huaweicloud:Mrs/scalingPolicy:ScalingPolicy")
class ScalingPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 exec_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyExecScriptArgs', 'ScalingPolicyExecScriptArgsDict']]]]] = None,
                 max_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 min_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 node_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyResourcesPlanArgs', 'ScalingPolicyResourcesPlanArgsDict']]]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyRuleArgs', 'ScalingPolicyRuleArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a scaling policy of MapReduce cluster within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mrs_cluster_id = config.require_object("mrsClusterId")
        task_node_group_name = config.require_object("taskNodeGroupName")
        script_uri = config.require_object("scriptUri")
        test = huaweicloud.mrs.ScalingPolicy("test",
            cluster_id=mrs_cluster_id,
            node_group=task_node_group_name,
            auto_scaling_enable=True,
            min_capacity=4,
            max_capacity=10,
            resources_plans=[{
                "period_type": "daily",
                "start_time": "01:00",
                "end_time": "03:00",
                "min_capacity": 5,
                "max_capacity": 10,
            }],
            rules=[
                {
                    "name": "default-expand-1",
                    "adjustment_type": "scale_out",
                    "cool_down_minutes": 20,
                    "scaling_adjustment": 1,
                    "trigger": {
                        "metric_name": "YARNAppRunning",
                        "metric_value": "75",
                        "comparison_operator": "GT",
                        "evaluation_periods": 1,
                    },
                },
                {
                    "name": "default-shrink-1",
                    "adjustment_type": "scale_in",
                    "cool_down_minutes": 20,
                    "scaling_adjustment": 1,
                    "trigger": {
                        "metric_name": "YARNAppRunning",
                        "metric_value": "25",
                        "comparison_operator": "LT",
                        "evaluation_periods": 1,
                    },
                },
            ],
            exec_scripts=[{
                "name": "script_1",
                "uri": script_uri,
                "parameters": "",
                "nodes": [task_node_group_name],
                "active_master": False,
                "fail_action": "continue",
                "action_stage": "before_scale_out",
            }])
        ```

        ## Import

        The scaling policy of MapReduce cluster can be imported using `cluster_id`, `node_group`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Mrs/scalingPolicy:ScalingPolicy test <cluster_id>/<node_group>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `exec_scripts`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_mapreduce_scaling_policy" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              exec_scripts,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_scaling_enable: Whether to enable the auto scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: The MRS cluster ID to which the auto scaling policy applies.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyExecScriptArgs', 'ScalingPolicyExecScriptArgsDict']]]] exec_scripts: The list of custom scaling automation scripts.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The exec_scripts structure is documented below.
               
               <a name="ScalingPolicy_ResourcesPlan"></a>
               The `resources_plans` block supports:
        :param pulumi.Input[_builtins.int] max_capacity: Maximum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
               
               <a name="ScalingPolicy_Rule"></a>
               The `rules` block supports:
        :param pulumi.Input[_builtins.int] min_capacity: Minimum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
        :param pulumi.Input[_builtins.str] node_group: Name of the node group to which the auto scaling policy applies.  
               Currently, only Task nodes support auto scaling rules.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyResourcesPlanArgs', 'ScalingPolicyResourcesPlanArgsDict']]]] resources_plans: The list of resources plans.  
               The resources_plans structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyRuleArgs', 'ScalingPolicyRuleArgsDict']]]] rules: The list of auto scaling rules.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The rules structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScalingPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a scaling policy of MapReduce cluster within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mrs_cluster_id = config.require_object("mrsClusterId")
        task_node_group_name = config.require_object("taskNodeGroupName")
        script_uri = config.require_object("scriptUri")
        test = huaweicloud.mrs.ScalingPolicy("test",
            cluster_id=mrs_cluster_id,
            node_group=task_node_group_name,
            auto_scaling_enable=True,
            min_capacity=4,
            max_capacity=10,
            resources_plans=[{
                "period_type": "daily",
                "start_time": "01:00",
                "end_time": "03:00",
                "min_capacity": 5,
                "max_capacity": 10,
            }],
            rules=[
                {
                    "name": "default-expand-1",
                    "adjustment_type": "scale_out",
                    "cool_down_minutes": 20,
                    "scaling_adjustment": 1,
                    "trigger": {
                        "metric_name": "YARNAppRunning",
                        "metric_value": "75",
                        "comparison_operator": "GT",
                        "evaluation_periods": 1,
                    },
                },
                {
                    "name": "default-shrink-1",
                    "adjustment_type": "scale_in",
                    "cool_down_minutes": 20,
                    "scaling_adjustment": 1,
                    "trigger": {
                        "metric_name": "YARNAppRunning",
                        "metric_value": "25",
                        "comparison_operator": "LT",
                        "evaluation_periods": 1,
                    },
                },
            ],
            exec_scripts=[{
                "name": "script_1",
                "uri": script_uri,
                "parameters": "",
                "nodes": [task_node_group_name],
                "active_master": False,
                "fail_action": "continue",
                "action_stage": "before_scale_out",
            }])
        ```

        ## Import

        The scaling policy of MapReduce cluster can be imported using `cluster_id`, `node_group`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Mrs/scalingPolicy:ScalingPolicy test <cluster_id>/<node_group>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `exec_scripts`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_mapreduce_scaling_policy" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              exec_scripts,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ScalingPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScalingPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 exec_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyExecScriptArgs', 'ScalingPolicyExecScriptArgsDict']]]]] = None,
                 max_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 min_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 node_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyResourcesPlanArgs', 'ScalingPolicyResourcesPlanArgsDict']]]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyRuleArgs', 'ScalingPolicyRuleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScalingPolicyArgs.__new__(ScalingPolicyArgs)

            if auto_scaling_enable is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_enable'")
            __props__.__dict__["auto_scaling_enable"] = auto_scaling_enable
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["exec_scripts"] = exec_scripts
            if max_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'max_capacity'")
            __props__.__dict__["max_capacity"] = max_capacity
            if min_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'min_capacity'")
            __props__.__dict__["min_capacity"] = min_capacity
            if node_group is None and not opts.urn:
                raise TypeError("Missing required property 'node_group'")
            __props__.__dict__["node_group"] = node_group
            __props__.__dict__["region"] = region
            __props__.__dict__["resources_plans"] = resources_plans
            __props__.__dict__["rules"] = rules
        super(ScalingPolicy, __self__).__init__(
            'huaweicloud:Mrs/scalingPolicy:ScalingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scaling_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            exec_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyExecScriptArgs', 'ScalingPolicyExecScriptArgsDict']]]]] = None,
            max_capacity: Optional[pulumi.Input[_builtins.int]] = None,
            min_capacity: Optional[pulumi.Input[_builtins.int]] = None,
            node_group: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resources_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyResourcesPlanArgs', 'ScalingPolicyResourcesPlanArgsDict']]]]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyRuleArgs', 'ScalingPolicyRuleArgsDict']]]]] = None) -> 'ScalingPolicy':
        """
        Get an existing ScalingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_scaling_enable: Whether to enable the auto scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: The MRS cluster ID to which the auto scaling policy applies.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyExecScriptArgs', 'ScalingPolicyExecScriptArgsDict']]]] exec_scripts: The list of custom scaling automation scripts.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The exec_scripts structure is documented below.
               
               <a name="ScalingPolicy_ResourcesPlan"></a>
               The `resources_plans` block supports:
        :param pulumi.Input[_builtins.int] max_capacity: Maximum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
               
               <a name="ScalingPolicy_Rule"></a>
               The `rules` block supports:
        :param pulumi.Input[_builtins.int] min_capacity: Minimum number of the preserved nodes in a node group in a resource plan.
               Value range: 0 to 500.
        :param pulumi.Input[_builtins.str] node_group: Name of the node group to which the auto scaling policy applies.  
               Currently, only Task nodes support auto scaling rules.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyResourcesPlanArgs', 'ScalingPolicyResourcesPlanArgsDict']]]] resources_plans: The list of resources plans.  
               The resources_plans structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScalingPolicyRuleArgs', 'ScalingPolicyRuleArgsDict']]]] rules: The list of auto scaling rules.  
               When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
               The rules structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScalingPolicyState.__new__(_ScalingPolicyState)

        __props__.__dict__["auto_scaling_enable"] = auto_scaling_enable
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["exec_scripts"] = exec_scripts
        __props__.__dict__["max_capacity"] = max_capacity
        __props__.__dict__["min_capacity"] = min_capacity
        __props__.__dict__["node_group"] = node_group
        __props__.__dict__["region"] = region
        __props__.__dict__["resources_plans"] = resources_plans
        __props__.__dict__["rules"] = rules
        return ScalingPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoScalingEnable")
    def auto_scaling_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable the auto scaling policy.
        """
        return pulumi.get(self, "auto_scaling_enable")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The MRS cluster ID to which the auto scaling policy applies.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="execScripts")
    def exec_scripts(self) -> pulumi.Output[Optional[Sequence['outputs.ScalingPolicyExecScript']]]:
        """
        The list of custom scaling automation scripts.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The exec_scripts structure is documented below.

        <a name="ScalingPolicy_ResourcesPlan"></a>
        The `resources_plans` block supports:
        """
        return pulumi.get(self, "exec_scripts")

    @_builtins.property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Output[_builtins.int]:
        """
        Maximum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.

        <a name="ScalingPolicy_Rule"></a>
        The `rules` block supports:
        """
        return pulumi.get(self, "max_capacity")

    @_builtins.property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Output[_builtins.int]:
        """
        Minimum number of the preserved nodes in a node group in a resource plan.
        Value range: 0 to 500.
        """
        return pulumi.get(self, "min_capacity")

    @_builtins.property
    @pulumi.getter(name="nodeGroup")
    def node_group(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the node group to which the auto scaling policy applies.  
        Currently, only Task nodes support auto scaling rules.
        """
        return pulumi.get(self, "node_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcesPlans")
    def resources_plans(self) -> pulumi.Output[Optional[Sequence['outputs.ScalingPolicyResourcesPlan']]]:
        """
        The list of resources plans.  
        The resources_plans structure is documented below.
        """
        return pulumi.get(self, "resources_plans")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.ScalingPolicyRule']]]:
        """
        The list of auto scaling rules.  
        When auto scaling is enabled, either `resources_plans` or `rules` must be configured.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

