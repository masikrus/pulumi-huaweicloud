# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConferenceArgs', 'Conference']

@pulumi.input_type
class ConferenceArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[_builtins.int],
                 meeting_room_id: pulumi.Input[_builtins.str],
                 topic: pulumi.Input[_builtins.str],
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 account_password: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_key: Optional[pulumi.Input[_builtins.str]] = None,
                 aux_address: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input['ConferenceConfigurationArgs']] = None,
                 corp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cycle_params: Optional[pulumi.Input['ConferenceCycleParamsArgs']] = None,
                 encrypt_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 is_auto_record: Optional[pulumi.Input[_builtins.int]] = None,
                 is_record_aux_stream: Optional[pulumi.Input[_builtins.int]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 live_address: Optional[pulumi.Input[_builtins.str]] = None,
                 media_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 participant_number: Optional[pulumi.Input[_builtins.int]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]] = None,
                 record_auth_type: Optional[pulumi.Input[_builtins.int]] = None,
                 record_type: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 timezone_id: Optional[pulumi.Input[_builtins.int]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Conference resource.
        :param pulumi.Input[_builtins.int] duration: Specifies the duration of the conference, in minutes.
               The valid value is range from `15` to `1,440`, defaults to `30`.
               
               > After the conference starts, only support extend duration, shorten duration is not supported.
               And only the duration can be updated after the meeting starts.
        :param pulumi.Input[_builtins.str] meeting_room_id: Specifies the cloud meeting room ID.
        :param pulumi.Input[_builtins.str] topic: Specifies the conference topic. The topic can contain `1` to `128` characters.
        :param pulumi.Input[_builtins.str] account_name: Specifies the (HUAWEI Cloud meeting) user account name to which the
               meeting initiator belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] account_password: Specifies the user password.
               Required if `account_name` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the Third-party application.
               Changing this parameter will create a new resource.
               
               > You can apply for an application and obtain the App ID and App Key in the console.
        :param pulumi.Input[_builtins.str] app_key: Specifies the Key information of the Third-party APP.
               Required if `app_id` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] aux_address: Specifies the auxiliary streaming address, the maximum length is 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input['ConferenceConfigurationArgs'] configuration: Specifies the other conference configurations.
               The object structure is documented below.
               
               <a name="conference_participant"></a>
               The `participant` block supports:
        :param pulumi.Input[_builtins.str] corp_id: Specifies the corporation ID.
               Required if the application is used in multiple enterprises. Only available if `app_id` is set.
               Changing this parameter will create a new resource.
        :param pulumi.Input['ConferenceCycleParamsArgs'] cycle_params: Specifies the configurations of the cyclical conference.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] encrypt_mode: Specifies the conference media encryption mode.
               + **0**: Adaptive encryption.
               + **1**: Force encryption.
               + **2**: Do not encrypt.
               
               The default value is populated by enterprise-level configuration.
        :param pulumi.Input[_builtins.int] is_auto_record: Specifies whether the conference automatically starts recording, it only takes
               effect when the recording type is:
               + **1**: Automatically start recording.
               + **0**: Do not start recording automatically.
               
               The default value is `0` (not to start automatically).
        :param pulumi.Input[_builtins.int] is_record_aux_stream: Specifies whether to record auxiliary stream.
               + **0**: Do not record.
               + **1**: Record.
               
               Only available if `record_type` is `2` or `3`, and the default value is `0`.
        :param pulumi.Input[_builtins.str] language: Specifies the default language of the conference, the default value is defined by the
               conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
               The valid values are as follows:
               + **zh-CN**: Simplified Chinese.
               + **en-US**: US English.
        :param pulumi.Input[_builtins.str] live_address: Specifies the mainstream live broadcast address, with a maximum of 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] media_types: Specifies the conference media type list.
               It consists of one or more enumerations, and the valid values are as follows:
               + **Voice**: Voice.
               + **Video**: SD video.
               + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
               time, the system will select Video by default).
               + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        :param pulumi.Input[_builtins.int] participant_number: Specifies the number of parties in the conference, the maximum number of
               participants in the conference. Defaults to `0` (Unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]] participants: Specifies the attendee list.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] record_auth_type: Specifies the recording authentication method.
               + **0**: Viewable/downloadable via link.
               + **1**: Enterprise users can watch/download.
               + **2**: Attendees can watch/download.
               
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.int] record_type: Specifies the recording type.
               + **0**: Disabled.
               + **1**: Live broadcast.
               + **2**: Record and broadcast.
               + **3**: Live + Recording.
               
               The default value is `0` (disabled).
        :param pulumi.Input[_builtins.str] start_time: Specifies the conference start time (UTC time).
               The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
               There is no need to set if you book a cyclical conference.
               
               > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
               And the start time cannot be earlier than now.
        :param pulumi.Input[_builtins.int] timezone_id: Specifies the time zone information of the conference time in the conference
               notification. For time zone information, refer to the time zone mapping relationship.
               
               > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
               marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
               For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
               need to be filled in.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID of the participant.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "meeting_room_id", meeting_room_id)
        pulumi.set(__self__, "topic", topic)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_password is not None:
            pulumi.set(__self__, "account_password", account_password)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if aux_address is not None:
            pulumi.set(__self__, "aux_address", aux_address)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if corp_id is not None:
            pulumi.set(__self__, "corp_id", corp_id)
        if cycle_params is not None:
            pulumi.set(__self__, "cycle_params", cycle_params)
        if encrypt_mode is not None:
            pulumi.set(__self__, "encrypt_mode", encrypt_mode)
        if is_auto_record is not None:
            pulumi.set(__self__, "is_auto_record", is_auto_record)
        if is_record_aux_stream is not None:
            pulumi.set(__self__, "is_record_aux_stream", is_record_aux_stream)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if live_address is not None:
            pulumi.set(__self__, "live_address", live_address)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if participant_number is not None:
            pulumi.set(__self__, "participant_number", participant_number)
        if participants is not None:
            pulumi.set(__self__, "participants", participants)
        if record_auth_type is not None:
            pulumi.set(__self__, "record_auth_type", record_auth_type)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timezone_id is not None:
            pulumi.set(__self__, "timezone_id", timezone_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the duration of the conference, in minutes.
        The valid value is range from `15` to `1,440`, defaults to `30`.

        > After the conference starts, only support extend duration, shorten duration is not supported.
        And only the duration can be updated after the meeting starts.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="meetingRoomId")
    def meeting_room_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cloud meeting room ID.
        """
        return pulumi.get(self, "meeting_room_id")

    @meeting_room_id.setter
    def meeting_room_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "meeting_room_id", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the conference topic. The topic can contain `1` to `128` characters.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the (HUAWEI Cloud meeting) user account name to which the
        meeting initiator belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user password.
        Required if `account_name` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_password", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the Third-party application.
        Changing this parameter will create a new resource.

        > You can apply for an application and obtain the App ID and App Key in the console.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Key information of the Third-party APP.
        Required if `app_id` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_key", value)

    @_builtins.property
    @pulumi.getter(name="auxAddress")
    def aux_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the auxiliary streaming address, the maximum length is 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "aux_address")

    @aux_address.setter
    def aux_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aux_address", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ConferenceConfigurationArgs']]:
        """
        Specifies the other conference configurations.
        The object structure is documented below.

        <a name="conference_participant"></a>
        The `participant` block supports:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ConferenceConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="corpId")
    def corp_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the corporation ID.
        Required if the application is used in multiple enterprises. Only available if `app_id` is set.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "corp_id")

    @corp_id.setter
    def corp_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "corp_id", value)

    @_builtins.property
    @pulumi.getter(name="cycleParams")
    def cycle_params(self) -> Optional[pulumi.Input['ConferenceCycleParamsArgs']]:
        """
        Specifies the configurations of the cyclical conference.
        The object structure is documented below.
        """
        return pulumi.get(self, "cycle_params")

    @cycle_params.setter
    def cycle_params(self, value: Optional[pulumi.Input['ConferenceCycleParamsArgs']]):
        pulumi.set(self, "cycle_params", value)

    @_builtins.property
    @pulumi.getter(name="encryptMode")
    def encrypt_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the conference media encryption mode.
        + **0**: Adaptive encryption.
        + **1**: Force encryption.
        + **2**: Do not encrypt.

        The default value is populated by enterprise-level configuration.
        """
        return pulumi.get(self, "encrypt_mode")

    @encrypt_mode.setter
    def encrypt_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "encrypt_mode", value)

    @_builtins.property
    @pulumi.getter(name="isAutoRecord")
    def is_auto_record(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether the conference automatically starts recording, it only takes
        effect when the recording type is:
        + **1**: Automatically start recording.
        + **0**: Do not start recording automatically.

        The default value is `0` (not to start automatically).
        """
        return pulumi.get(self, "is_auto_record")

    @is_auto_record.setter
    def is_auto_record(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_auto_record", value)

    @_builtins.property
    @pulumi.getter(name="isRecordAuxStream")
    def is_record_aux_stream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to record auxiliary stream.
        + **0**: Do not record.
        + **1**: Record.

        Only available if `record_type` is `2` or `3`, and the default value is `0`.
        """
        return pulumi.get(self, "is_record_aux_stream")

    @is_record_aux_stream.setter
    def is_record_aux_stream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_record_aux_stream", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default language of the conference, the default value is defined by the
        conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
        The valid values are as follows:
        + **zh-CN**: Simplified Chinese.
        + **en-US**: US English.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="liveAddress")
    def live_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mainstream live broadcast address, with a maximum of 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "live_address")

    @live_address.setter
    def live_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "live_address", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the conference media type list.
        It consists of one or more enumerations, and the valid values are as follows:
        + **Voice**: Voice.
        + **Video**: SD video.
        + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
        time, the system will select Video by default).
        + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        """
        return pulumi.get(self, "media_types")

    @media_types.setter
    def media_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "media_types", value)

    @_builtins.property
    @pulumi.getter(name="participantNumber")
    def participant_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of parties in the conference, the maximum number of
        participants in the conference. Defaults to `0` (Unlimited).
        """
        return pulumi.get(self, "participant_number")

    @participant_number.setter
    def participant_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "participant_number", value)

    @_builtins.property
    @pulumi.getter
    def participants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]]:
        """
        Specifies the attendee list.
        The object structure is documented below.
        """
        return pulumi.get(self, "participants")

    @participants.setter
    def participants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]]):
        pulumi.set(self, "participants", value)

    @_builtins.property
    @pulumi.getter(name="recordAuthType")
    def record_auth_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the recording authentication method.
        + **0**: Viewable/downloadable via link.
        + **1**: Enterprise users can watch/download.
        + **2**: Attendees can watch/download.

        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "record_auth_type")

    @record_auth_type.setter
    def record_auth_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "record_auth_type", value)

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the recording type.
        + **0**: Disabled.
        + **1**: Live broadcast.
        + **2**: Record and broadcast.
        + **3**: Live + Recording.

        The default value is `0` (disabled).
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "record_type", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the conference start time (UTC time).
        The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
        There is no need to set if you book a cyclical conference.

        > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
        And the start time cannot be earlier than now.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="timezoneId")
    def timezone_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time zone information of the conference time in the conference
        notification. For time zone information, refer to the time zone mapping relationship.

        > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
        marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
        For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
        need to be filled in.
        """
        return pulumi.get(self, "timezone_id")

    @timezone_id.setter
    def timezone_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timezone_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user ID of the participant.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _ConferenceState:
    def __init__(__self__, *,
                 access_number: Optional[pulumi.Input[_builtins.str]] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 account_password: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_key: Optional[pulumi.Input[_builtins.str]] = None,
                 audience_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 aux_address: Optional[pulumi.Input[_builtins.str]] = None,
                 chair_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 conference_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conference_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input['ConferenceConfigurationArgs']] = None,
                 corp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cycle_params: Optional[pulumi.Input['ConferenceCycleParamsArgs']] = None,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 encrypt_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 guest_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_record: Optional[pulumi.Input[_builtins.int]] = None,
                 is_record_aux_stream: Optional[pulumi.Input[_builtins.int]] = None,
                 join_passwords: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceJoinPasswordArgs']]]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 live_address: Optional[pulumi.Input[_builtins.str]] = None,
                 media_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 meeting_room_id: Optional[pulumi.Input[_builtins.str]] = None,
                 participant_number: Optional[pulumi.Input[_builtins.int]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]] = None,
                 record_auth_type: Optional[pulumi.Input[_builtins.int]] = None,
                 record_type: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subconferences: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceSubconferenceArgs']]]] = None,
                 timezone_id: Optional[pulumi.Input[_builtins.int]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Conference resources.
        :param pulumi.Input[_builtins.str] access_number: The access number of the conference.
        :param pulumi.Input[_builtins.str] account_name: Specifies the (HUAWEI Cloud meeting) user account name to which the
               meeting initiator belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] account_password: Specifies the user password.
               Required if `account_name` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the Third-party application.
               Changing this parameter will create a new resource.
               
               > You can apply for an application and obtain the App ID and App Key in the console.
        :param pulumi.Input[_builtins.str] app_key: Specifies the Key information of the Third-party APP.
               Required if `app_id` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] audience_join_uri: The audience meeting link address.
        :param pulumi.Input[_builtins.str] aux_address: Specifies the auxiliary streaming address, the maximum length is 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.str] chair_join_uri: The host meeting link address.
        :param pulumi.Input[_builtins.str] conference_type: The conference type, the valid values are as follows:
               + **FUTURE**
               + **IMMEDIATELY**
               + **CYCLE**
        :param pulumi.Input[_builtins.str] conference_uuid: The conference UUID.
        :param pulumi.Input['ConferenceConfigurationArgs'] configuration: Specifies the other conference configurations.
               The object structure is documented below.
               
               <a name="conference_participant"></a>
               The `participant` block supports:
        :param pulumi.Input[_builtins.str] corp_id: Specifies the corporation ID.
               Required if the application is used in multiple enterprises. Only available if `app_id` is set.
               Changing this parameter will create a new resource.
        :param pulumi.Input['ConferenceCycleParamsArgs'] cycle_params: Specifies the configurations of the cyclical conference.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] duration: Specifies the duration of the conference, in minutes.
               The valid value is range from `15` to `1,440`, defaults to `30`.
               
               > After the conference starts, only support extend duration, shorten duration is not supported.
               And only the duration can be updated after the meeting starts.
        :param pulumi.Input[_builtins.int] encrypt_mode: Specifies the conference media encryption mode.
               + **0**: Adaptive encryption.
               + **1**: Force encryption.
               + **2**: Do not encrypt.
               
               The default value is populated by enterprise-level configuration.
        :param pulumi.Input[_builtins.str] guest_join_uri: The common attendee meeting link address.
        :param pulumi.Input[_builtins.int] is_auto_record: Specifies whether the conference automatically starts recording, it only takes
               effect when the recording type is:
               + **1**: Automatically start recording.
               + **0**: Do not start recording automatically.
               
               The default value is `0` (not to start automatically).
        :param pulumi.Input[_builtins.int] is_record_aux_stream: Specifies whether to record auxiliary stream.
               + **0**: Do not record.
               + **1**: Record.
               
               Only available if `record_type` is `2` or `3`, and the default value is `0`.
        :param pulumi.Input[Sequence[pulumi.Input['ConferenceJoinPasswordArgs']]] join_passwords: The meeting password.
               The join_password structure is documented below.
        :param pulumi.Input[_builtins.str] language: Specifies the default language of the conference, the default value is defined by the
               conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
               The valid values are as follows:
               + **zh-CN**: Simplified Chinese.
               + **en-US**: US English.
        :param pulumi.Input[_builtins.str] live_address: Specifies the mainstream live broadcast address, with a maximum of 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] media_types: Specifies the conference media type list.
               It consists of one or more enumerations, and the valid values are as follows:
               + **Voice**: Voice.
               + **Video**: SD video.
               + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
               time, the system will select Video by default).
               + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        :param pulumi.Input[_builtins.str] meeting_room_id: Specifies the cloud meeting room ID.
        :param pulumi.Input[_builtins.int] participant_number: Specifies the number of parties in the conference, the maximum number of
               participants in the conference. Defaults to `0` (Unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]] participants: Specifies the attendee list.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] record_auth_type: Specifies the recording authentication method.
               + **0**: Viewable/downloadable via link.
               + **1**: Enterprise users can watch/download.
               + **2**: Attendees can watch/download.
               
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.int] record_type: Specifies the recording type.
               + **0**: Disabled.
               + **1**: Live broadcast.
               + **2**: Record and broadcast.
               + **3**: Live + Recording.
               
               The default value is `0` (disabled).
        :param pulumi.Input[_builtins.str] start_time: Specifies the conference start time (UTC time).
               The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
               There is no need to set if you book a cyclical conference.
               
               > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
               And the start time cannot be earlier than now.
        :param pulumi.Input[_builtins.str] status: The conference status, the valid values are as follows:
               + **Schedule**: the conference is in schedule.
               + **Created**: The conference is in progress.
        :param pulumi.Input[Sequence[pulumi.Input['ConferenceSubconferenceArgs']]] subconferences: The list of periodic sub-conferences.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] timezone_id: Specifies the time zone information of the conference time in the conference
               notification. For time zone information, refer to the time zone mapping relationship.
               
               > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
               marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
               For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
               need to be filled in.
        :param pulumi.Input[_builtins.str] topic: Specifies the conference topic. The topic can contain `1` to `128` characters.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID of the participant.
        """
        if access_number is not None:
            pulumi.set(__self__, "access_number", access_number)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_password is not None:
            pulumi.set(__self__, "account_password", account_password)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if audience_join_uri is not None:
            pulumi.set(__self__, "audience_join_uri", audience_join_uri)
        if aux_address is not None:
            pulumi.set(__self__, "aux_address", aux_address)
        if chair_join_uri is not None:
            pulumi.set(__self__, "chair_join_uri", chair_join_uri)
        if conference_type is not None:
            pulumi.set(__self__, "conference_type", conference_type)
        if conference_uuid is not None:
            pulumi.set(__self__, "conference_uuid", conference_uuid)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if corp_id is not None:
            pulumi.set(__self__, "corp_id", corp_id)
        if cycle_params is not None:
            pulumi.set(__self__, "cycle_params", cycle_params)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if encrypt_mode is not None:
            pulumi.set(__self__, "encrypt_mode", encrypt_mode)
        if guest_join_uri is not None:
            pulumi.set(__self__, "guest_join_uri", guest_join_uri)
        if is_auto_record is not None:
            pulumi.set(__self__, "is_auto_record", is_auto_record)
        if is_record_aux_stream is not None:
            pulumi.set(__self__, "is_record_aux_stream", is_record_aux_stream)
        if join_passwords is not None:
            pulumi.set(__self__, "join_passwords", join_passwords)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if live_address is not None:
            pulumi.set(__self__, "live_address", live_address)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if meeting_room_id is not None:
            pulumi.set(__self__, "meeting_room_id", meeting_room_id)
        if participant_number is not None:
            pulumi.set(__self__, "participant_number", participant_number)
        if participants is not None:
            pulumi.set(__self__, "participants", participants)
        if record_auth_type is not None:
            pulumi.set(__self__, "record_auth_type", record_auth_type)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subconferences is not None:
            pulumi.set(__self__, "subconferences", subconferences)
        if timezone_id is not None:
            pulumi.set(__self__, "timezone_id", timezone_id)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="accessNumber")
    def access_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access number of the conference.
        """
        return pulumi.get(self, "access_number")

    @access_number.setter
    def access_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_number", value)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the (HUAWEI Cloud meeting) user account name to which the
        meeting initiator belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user password.
        Required if `account_name` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_password", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the Third-party application.
        Changing this parameter will create a new resource.

        > You can apply for an application and obtain the App ID and App Key in the console.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Key information of the Third-party APP.
        Required if `app_id` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_key", value)

    @_builtins.property
    @pulumi.getter(name="audienceJoinUri")
    def audience_join_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The audience meeting link address.
        """
        return pulumi.get(self, "audience_join_uri")

    @audience_join_uri.setter
    def audience_join_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audience_join_uri", value)

    @_builtins.property
    @pulumi.getter(name="auxAddress")
    def aux_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the auxiliary streaming address, the maximum length is 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "aux_address")

    @aux_address.setter
    def aux_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aux_address", value)

    @_builtins.property
    @pulumi.getter(name="chairJoinUri")
    def chair_join_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host meeting link address.
        """
        return pulumi.get(self, "chair_join_uri")

    @chair_join_uri.setter
    def chair_join_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chair_join_uri", value)

    @_builtins.property
    @pulumi.getter(name="conferenceType")
    def conference_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The conference type, the valid values are as follows:
        + **FUTURE**
        + **IMMEDIATELY**
        + **CYCLE**
        """
        return pulumi.get(self, "conference_type")

    @conference_type.setter
    def conference_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conference_type", value)

    @_builtins.property
    @pulumi.getter(name="conferenceUuid")
    def conference_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The conference UUID.
        """
        return pulumi.get(self, "conference_uuid")

    @conference_uuid.setter
    def conference_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conference_uuid", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ConferenceConfigurationArgs']]:
        """
        Specifies the other conference configurations.
        The object structure is documented below.

        <a name="conference_participant"></a>
        The `participant` block supports:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ConferenceConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="corpId")
    def corp_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the corporation ID.
        Required if the application is used in multiple enterprises. Only available if `app_id` is set.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "corp_id")

    @corp_id.setter
    def corp_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "corp_id", value)

    @_builtins.property
    @pulumi.getter(name="cycleParams")
    def cycle_params(self) -> Optional[pulumi.Input['ConferenceCycleParamsArgs']]:
        """
        Specifies the configurations of the cyclical conference.
        The object structure is documented below.
        """
        return pulumi.get(self, "cycle_params")

    @cycle_params.setter
    def cycle_params(self, value: Optional[pulumi.Input['ConferenceCycleParamsArgs']]):
        pulumi.set(self, "cycle_params", value)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the duration of the conference, in minutes.
        The valid value is range from `15` to `1,440`, defaults to `30`.

        > After the conference starts, only support extend duration, shorten duration is not supported.
        And only the duration can be updated after the meeting starts.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="encryptMode")
    def encrypt_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the conference media encryption mode.
        + **0**: Adaptive encryption.
        + **1**: Force encryption.
        + **2**: Do not encrypt.

        The default value is populated by enterprise-level configuration.
        """
        return pulumi.get(self, "encrypt_mode")

    @encrypt_mode.setter
    def encrypt_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "encrypt_mode", value)

    @_builtins.property
    @pulumi.getter(name="guestJoinUri")
    def guest_join_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The common attendee meeting link address.
        """
        return pulumi.get(self, "guest_join_uri")

    @guest_join_uri.setter
    def guest_join_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guest_join_uri", value)

    @_builtins.property
    @pulumi.getter(name="isAutoRecord")
    def is_auto_record(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether the conference automatically starts recording, it only takes
        effect when the recording type is:
        + **1**: Automatically start recording.
        + **0**: Do not start recording automatically.

        The default value is `0` (not to start automatically).
        """
        return pulumi.get(self, "is_auto_record")

    @is_auto_record.setter
    def is_auto_record(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_auto_record", value)

    @_builtins.property
    @pulumi.getter(name="isRecordAuxStream")
    def is_record_aux_stream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to record auxiliary stream.
        + **0**: Do not record.
        + **1**: Record.

        Only available if `record_type` is `2` or `3`, and the default value is `0`.
        """
        return pulumi.get(self, "is_record_aux_stream")

    @is_record_aux_stream.setter
    def is_record_aux_stream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_record_aux_stream", value)

    @_builtins.property
    @pulumi.getter(name="joinPasswords")
    def join_passwords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceJoinPasswordArgs']]]]:
        """
        The meeting password.
        The join_password structure is documented below.
        """
        return pulumi.get(self, "join_passwords")

    @join_passwords.setter
    def join_passwords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceJoinPasswordArgs']]]]):
        pulumi.set(self, "join_passwords", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default language of the conference, the default value is defined by the
        conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
        The valid values are as follows:
        + **zh-CN**: Simplified Chinese.
        + **en-US**: US English.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="liveAddress")
    def live_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mainstream live broadcast address, with a maximum of 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "live_address")

    @live_address.setter
    def live_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "live_address", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the conference media type list.
        It consists of one or more enumerations, and the valid values are as follows:
        + **Voice**: Voice.
        + **Video**: SD video.
        + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
        time, the system will select Video by default).
        + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        """
        return pulumi.get(self, "media_types")

    @media_types.setter
    def media_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "media_types", value)

    @_builtins.property
    @pulumi.getter(name="meetingRoomId")
    def meeting_room_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cloud meeting room ID.
        """
        return pulumi.get(self, "meeting_room_id")

    @meeting_room_id.setter
    def meeting_room_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "meeting_room_id", value)

    @_builtins.property
    @pulumi.getter(name="participantNumber")
    def participant_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of parties in the conference, the maximum number of
        participants in the conference. Defaults to `0` (Unlimited).
        """
        return pulumi.get(self, "participant_number")

    @participant_number.setter
    def participant_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "participant_number", value)

    @_builtins.property
    @pulumi.getter
    def participants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]]:
        """
        Specifies the attendee list.
        The object structure is documented below.
        """
        return pulumi.get(self, "participants")

    @participants.setter
    def participants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceParticipantArgs']]]]):
        pulumi.set(self, "participants", value)

    @_builtins.property
    @pulumi.getter(name="recordAuthType")
    def record_auth_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the recording authentication method.
        + **0**: Viewable/downloadable via link.
        + **1**: Enterprise users can watch/download.
        + **2**: Attendees can watch/download.

        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "record_auth_type")

    @record_auth_type.setter
    def record_auth_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "record_auth_type", value)

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the recording type.
        + **0**: Disabled.
        + **1**: Live broadcast.
        + **2**: Record and broadcast.
        + **3**: Live + Recording.

        The default value is `0` (disabled).
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "record_type", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the conference start time (UTC time).
        The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
        There is no need to set if you book a cyclical conference.

        > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
        And the start time cannot be earlier than now.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The conference status, the valid values are as follows:
        + **Schedule**: the conference is in schedule.
        + **Created**: The conference is in progress.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subconferences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceSubconferenceArgs']]]]:
        """
        The list of periodic sub-conferences.
        The object structure is documented below.
        """
        return pulumi.get(self, "subconferences")

    @subconferences.setter
    def subconferences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConferenceSubconferenceArgs']]]]):
        pulumi.set(self, "subconferences", value)

    @_builtins.property
    @pulumi.getter(name="timezoneId")
    def timezone_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time zone information of the conference time in the conference
        notification. For time zone information, refer to the time zone mapping relationship.

        > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
        marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
        For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
        need to be filled in.
        """
        return pulumi.get(self, "timezone_id")

    @timezone_id.setter
    def timezone_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timezone_id", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the conference topic. The topic can contain `1` to `128` characters.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user ID of the participant.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.type_token("huaweicloud:Meeting/conference:Conference")
class Conference(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 account_password: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_key: Optional[pulumi.Input[_builtins.str]] = None,
                 aux_address: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['ConferenceConfigurationArgs', 'ConferenceConfigurationArgsDict']]] = None,
                 corp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cycle_params: Optional[pulumi.Input[Union['ConferenceCycleParamsArgs', 'ConferenceCycleParamsArgsDict']]] = None,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 encrypt_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 is_auto_record: Optional[pulumi.Input[_builtins.int]] = None,
                 is_record_aux_stream: Optional[pulumi.Input[_builtins.int]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 live_address: Optional[pulumi.Input[_builtins.str]] = None,
                 media_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 meeting_room_id: Optional[pulumi.Input[_builtins.str]] = None,
                 participant_number: Optional[pulumi.Input[_builtins.int]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConferenceParticipantArgs', 'ConferenceParticipantArgsDict']]]]] = None,
                 record_auth_type: Optional[pulumi.Input[_builtins.int]] = None,
                 record_type: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 timezone_id: Optional[pulumi.Input[_builtins.int]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Conferences (only scheduled conference and progressing conference) can be imported using their `id` and authorization

        parameters, separated by slashes, e.g.

        Import a conference and authenticated by account.

        bash

        ```sh
        $ pulumi import huaweicloud:Meeting/conference:Conference test <id>/<account_name>/<account_password>
        ```

        Import a conference and authenticated by `APP ID`/`APP Key`.

        bash

        ```sh
        $ pulumi import huaweicloud:Meeting/conference:Conference test <id>/<app_id>/<app_key>/<corp_id>/<user_id>
        ```

        The slashes cannot be missing even corporation ID and user ID are empty.

        Note that importing is not supported for expired conferences and the start time of the meeting is not imported along

        with it. You can ignore this change as below.

        hcl

        resource "huaweicloud_meeting_conference" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              start_time,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the (HUAWEI Cloud meeting) user account name to which the
               meeting initiator belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] account_password: Specifies the user password.
               Required if `account_name` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the Third-party application.
               Changing this parameter will create a new resource.
               
               > You can apply for an application and obtain the App ID and App Key in the console.
        :param pulumi.Input[_builtins.str] app_key: Specifies the Key information of the Third-party APP.
               Required if `app_id` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] aux_address: Specifies the auxiliary streaming address, the maximum length is 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[Union['ConferenceConfigurationArgs', 'ConferenceConfigurationArgsDict']] configuration: Specifies the other conference configurations.
               The object structure is documented below.
               
               <a name="conference_participant"></a>
               The `participant` block supports:
        :param pulumi.Input[_builtins.str] corp_id: Specifies the corporation ID.
               Required if the application is used in multiple enterprises. Only available if `app_id` is set.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ConferenceCycleParamsArgs', 'ConferenceCycleParamsArgsDict']] cycle_params: Specifies the configurations of the cyclical conference.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] duration: Specifies the duration of the conference, in minutes.
               The valid value is range from `15` to `1,440`, defaults to `30`.
               
               > After the conference starts, only support extend duration, shorten duration is not supported.
               And only the duration can be updated after the meeting starts.
        :param pulumi.Input[_builtins.int] encrypt_mode: Specifies the conference media encryption mode.
               + **0**: Adaptive encryption.
               + **1**: Force encryption.
               + **2**: Do not encrypt.
               
               The default value is populated by enterprise-level configuration.
        :param pulumi.Input[_builtins.int] is_auto_record: Specifies whether the conference automatically starts recording, it only takes
               effect when the recording type is:
               + **1**: Automatically start recording.
               + **0**: Do not start recording automatically.
               
               The default value is `0` (not to start automatically).
        :param pulumi.Input[_builtins.int] is_record_aux_stream: Specifies whether to record auxiliary stream.
               + **0**: Do not record.
               + **1**: Record.
               
               Only available if `record_type` is `2` or `3`, and the default value is `0`.
        :param pulumi.Input[_builtins.str] language: Specifies the default language of the conference, the default value is defined by the
               conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
               The valid values are as follows:
               + **zh-CN**: Simplified Chinese.
               + **en-US**: US English.
        :param pulumi.Input[_builtins.str] live_address: Specifies the mainstream live broadcast address, with a maximum of 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] media_types: Specifies the conference media type list.
               It consists of one or more enumerations, and the valid values are as follows:
               + **Voice**: Voice.
               + **Video**: SD video.
               + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
               time, the system will select Video by default).
               + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        :param pulumi.Input[_builtins.str] meeting_room_id: Specifies the cloud meeting room ID.
        :param pulumi.Input[_builtins.int] participant_number: Specifies the number of parties in the conference, the maximum number of
               participants in the conference. Defaults to `0` (Unlimited).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConferenceParticipantArgs', 'ConferenceParticipantArgsDict']]]] participants: Specifies the attendee list.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] record_auth_type: Specifies the recording authentication method.
               + **0**: Viewable/downloadable via link.
               + **1**: Enterprise users can watch/download.
               + **2**: Attendees can watch/download.
               
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.int] record_type: Specifies the recording type.
               + **0**: Disabled.
               + **1**: Live broadcast.
               + **2**: Record and broadcast.
               + **3**: Live + Recording.
               
               The default value is `0` (disabled).
        :param pulumi.Input[_builtins.str] start_time: Specifies the conference start time (UTC time).
               The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
               There is no need to set if you book a cyclical conference.
               
               > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
               And the start time cannot be earlier than now.
        :param pulumi.Input[_builtins.int] timezone_id: Specifies the time zone information of the conference time in the conference
               notification. For time zone information, refer to the time zone mapping relationship.
               
               > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
               marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
               For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
               need to be filled in.
        :param pulumi.Input[_builtins.str] topic: Specifies the conference topic. The topic can contain `1` to `128` characters.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID of the participant.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConferenceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Conferences (only scheduled conference and progressing conference) can be imported using their `id` and authorization

        parameters, separated by slashes, e.g.

        Import a conference and authenticated by account.

        bash

        ```sh
        $ pulumi import huaweicloud:Meeting/conference:Conference test <id>/<account_name>/<account_password>
        ```

        Import a conference and authenticated by `APP ID`/`APP Key`.

        bash

        ```sh
        $ pulumi import huaweicloud:Meeting/conference:Conference test <id>/<app_id>/<app_key>/<corp_id>/<user_id>
        ```

        The slashes cannot be missing even corporation ID and user ID are empty.

        Note that importing is not supported for expired conferences and the start time of the meeting is not imported along

        with it. You can ignore this change as below.

        hcl

        resource "huaweicloud_meeting_conference" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              start_time,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ConferenceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConferenceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 account_password: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_key: Optional[pulumi.Input[_builtins.str]] = None,
                 aux_address: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['ConferenceConfigurationArgs', 'ConferenceConfigurationArgsDict']]] = None,
                 corp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cycle_params: Optional[pulumi.Input[Union['ConferenceCycleParamsArgs', 'ConferenceCycleParamsArgsDict']]] = None,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 encrypt_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 is_auto_record: Optional[pulumi.Input[_builtins.int]] = None,
                 is_record_aux_stream: Optional[pulumi.Input[_builtins.int]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 live_address: Optional[pulumi.Input[_builtins.str]] = None,
                 media_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 meeting_room_id: Optional[pulumi.Input[_builtins.str]] = None,
                 participant_number: Optional[pulumi.Input[_builtins.int]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConferenceParticipantArgs', 'ConferenceParticipantArgsDict']]]]] = None,
                 record_auth_type: Optional[pulumi.Input[_builtins.int]] = None,
                 record_type: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 timezone_id: Optional[pulumi.Input[_builtins.int]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConferenceArgs.__new__(ConferenceArgs)

            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["account_password"] = None if account_password is None else pulumi.Output.secret(account_password)
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["app_key"] = None if app_key is None else pulumi.Output.secret(app_key)
            __props__.__dict__["aux_address"] = aux_address
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["corp_id"] = corp_id
            __props__.__dict__["cycle_params"] = cycle_params
            if duration is None and not opts.urn:
                raise TypeError("Missing required property 'duration'")
            __props__.__dict__["duration"] = duration
            __props__.__dict__["encrypt_mode"] = encrypt_mode
            __props__.__dict__["is_auto_record"] = is_auto_record
            __props__.__dict__["is_record_aux_stream"] = is_record_aux_stream
            __props__.__dict__["language"] = language
            __props__.__dict__["live_address"] = live_address
            __props__.__dict__["media_types"] = media_types
            if meeting_room_id is None and not opts.urn:
                raise TypeError("Missing required property 'meeting_room_id'")
            __props__.__dict__["meeting_room_id"] = meeting_room_id
            __props__.__dict__["participant_number"] = participant_number
            __props__.__dict__["participants"] = participants
            __props__.__dict__["record_auth_type"] = record_auth_type
            __props__.__dict__["record_type"] = record_type
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["timezone_id"] = timezone_id
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["access_number"] = None
            __props__.__dict__["audience_join_uri"] = None
            __props__.__dict__["chair_join_uri"] = None
            __props__.__dict__["conference_type"] = None
            __props__.__dict__["conference_uuid"] = None
            __props__.__dict__["guest_join_uri"] = None
            __props__.__dict__["join_passwords"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["subconferences"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accountPassword", "appKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Conference, __self__).__init__(
            'huaweicloud:Meeting/conference:Conference',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_number: Optional[pulumi.Input[_builtins.str]] = None,
            account_name: Optional[pulumi.Input[_builtins.str]] = None,
            account_password: Optional[pulumi.Input[_builtins.str]] = None,
            app_id: Optional[pulumi.Input[_builtins.str]] = None,
            app_key: Optional[pulumi.Input[_builtins.str]] = None,
            audience_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
            aux_address: Optional[pulumi.Input[_builtins.str]] = None,
            chair_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
            conference_type: Optional[pulumi.Input[_builtins.str]] = None,
            conference_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            configuration: Optional[pulumi.Input[Union['ConferenceConfigurationArgs', 'ConferenceConfigurationArgsDict']]] = None,
            corp_id: Optional[pulumi.Input[_builtins.str]] = None,
            cycle_params: Optional[pulumi.Input[Union['ConferenceCycleParamsArgs', 'ConferenceCycleParamsArgsDict']]] = None,
            duration: Optional[pulumi.Input[_builtins.int]] = None,
            encrypt_mode: Optional[pulumi.Input[_builtins.int]] = None,
            guest_join_uri: Optional[pulumi.Input[_builtins.str]] = None,
            is_auto_record: Optional[pulumi.Input[_builtins.int]] = None,
            is_record_aux_stream: Optional[pulumi.Input[_builtins.int]] = None,
            join_passwords: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConferenceJoinPasswordArgs', 'ConferenceJoinPasswordArgsDict']]]]] = None,
            language: Optional[pulumi.Input[_builtins.str]] = None,
            live_address: Optional[pulumi.Input[_builtins.str]] = None,
            media_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            meeting_room_id: Optional[pulumi.Input[_builtins.str]] = None,
            participant_number: Optional[pulumi.Input[_builtins.int]] = None,
            participants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConferenceParticipantArgs', 'ConferenceParticipantArgsDict']]]]] = None,
            record_auth_type: Optional[pulumi.Input[_builtins.int]] = None,
            record_type: Optional[pulumi.Input[_builtins.int]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subconferences: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConferenceSubconferenceArgs', 'ConferenceSubconferenceArgsDict']]]]] = None,
            timezone_id: Optional[pulumi.Input[_builtins.int]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Conference':
        """
        Get an existing Conference resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_number: The access number of the conference.
        :param pulumi.Input[_builtins.str] account_name: Specifies the (HUAWEI Cloud meeting) user account name to which the
               meeting initiator belongs. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] account_password: Specifies the user password.
               Required if `account_name` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the Third-party application.
               Changing this parameter will create a new resource.
               
               > You can apply for an application and obtain the App ID and App Key in the console.
        :param pulumi.Input[_builtins.str] app_key: Specifies the Key information of the Third-party APP.
               Required if `app_id` is set. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] audience_join_uri: The audience meeting link address.
        :param pulumi.Input[_builtins.str] aux_address: Specifies the auxiliary streaming address, the maximum length is 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.str] chair_join_uri: The host meeting link address.
        :param pulumi.Input[_builtins.str] conference_type: The conference type, the valid values are as follows:
               + **FUTURE**
               + **IMMEDIATELY**
               + **CYCLE**
        :param pulumi.Input[_builtins.str] conference_uuid: The conference UUID.
        :param pulumi.Input[Union['ConferenceConfigurationArgs', 'ConferenceConfigurationArgsDict']] configuration: Specifies the other conference configurations.
               The object structure is documented below.
               
               <a name="conference_participant"></a>
               The `participant` block supports:
        :param pulumi.Input[_builtins.str] corp_id: Specifies the corporation ID.
               Required if the application is used in multiple enterprises. Only available if `app_id` is set.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ConferenceCycleParamsArgs', 'ConferenceCycleParamsArgsDict']] cycle_params: Specifies the configurations of the cyclical conference.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] duration: Specifies the duration of the conference, in minutes.
               The valid value is range from `15` to `1,440`, defaults to `30`.
               
               > After the conference starts, only support extend duration, shorten duration is not supported.
               And only the duration can be updated after the meeting starts.
        :param pulumi.Input[_builtins.int] encrypt_mode: Specifies the conference media encryption mode.
               + **0**: Adaptive encryption.
               + **1**: Force encryption.
               + **2**: Do not encrypt.
               
               The default value is populated by enterprise-level configuration.
        :param pulumi.Input[_builtins.str] guest_join_uri: The common attendee meeting link address.
        :param pulumi.Input[_builtins.int] is_auto_record: Specifies whether the conference automatically starts recording, it only takes
               effect when the recording type is:
               + **1**: Automatically start recording.
               + **0**: Do not start recording automatically.
               
               The default value is `0` (not to start automatically).
        :param pulumi.Input[_builtins.int] is_record_aux_stream: Specifies whether to record auxiliary stream.
               + **0**: Do not record.
               + **1**: Record.
               
               Only available if `record_type` is `2` or `3`, and the default value is `0`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConferenceJoinPasswordArgs', 'ConferenceJoinPasswordArgsDict']]]] join_passwords: The meeting password.
               The join_password structure is documented below.
        :param pulumi.Input[_builtins.str] language: Specifies the default language of the conference, the default value is defined by the
               conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
               The valid values are as follows:
               + **zh-CN**: Simplified Chinese.
               + **en-US**: US English.
        :param pulumi.Input[_builtins.str] live_address: Specifies the mainstream live broadcast address, with a maximum of 255 characters.
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] media_types: Specifies the conference media type list.
               It consists of one or more enumerations, and the valid values are as follows:
               + **Voice**: Voice.
               + **Video**: SD video.
               + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
               time, the system will select Video by default).
               + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        :param pulumi.Input[_builtins.str] meeting_room_id: Specifies the cloud meeting room ID.
        :param pulumi.Input[_builtins.int] participant_number: Specifies the number of parties in the conference, the maximum number of
               participants in the conference. Defaults to `0` (Unlimited).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConferenceParticipantArgs', 'ConferenceParticipantArgsDict']]]] participants: Specifies the attendee list.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] record_auth_type: Specifies the recording authentication method.
               + **0**: Viewable/downloadable via link.
               + **1**: Enterprise users can watch/download.
               + **2**: Attendees can watch/download.
               
               Only available if `record_type` is `2` or `3`.
        :param pulumi.Input[_builtins.int] record_type: Specifies the recording type.
               + **0**: Disabled.
               + **1**: Live broadcast.
               + **2**: Record and broadcast.
               + **3**: Live + Recording.
               
               The default value is `0` (disabled).
        :param pulumi.Input[_builtins.str] start_time: Specifies the conference start time (UTC time).
               The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
               There is no need to set if you book a cyclical conference.
               
               > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
               And the start time cannot be earlier than now.
        :param pulumi.Input[_builtins.str] status: The conference status, the valid values are as follows:
               + **Schedule**: the conference is in schedule.
               + **Created**: The conference is in progress.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConferenceSubconferenceArgs', 'ConferenceSubconferenceArgsDict']]]] subconferences: The list of periodic sub-conferences.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] timezone_id: Specifies the time zone information of the conference time in the conference
               notification. For time zone information, refer to the time zone mapping relationship.
               
               > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
               marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
               For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
               need to be filled in.
        :param pulumi.Input[_builtins.str] topic: Specifies the conference topic. The topic can contain `1` to `128` characters.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID of the participant.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConferenceState.__new__(_ConferenceState)

        __props__.__dict__["access_number"] = access_number
        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["account_password"] = account_password
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["app_key"] = app_key
        __props__.__dict__["audience_join_uri"] = audience_join_uri
        __props__.__dict__["aux_address"] = aux_address
        __props__.__dict__["chair_join_uri"] = chair_join_uri
        __props__.__dict__["conference_type"] = conference_type
        __props__.__dict__["conference_uuid"] = conference_uuid
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["corp_id"] = corp_id
        __props__.__dict__["cycle_params"] = cycle_params
        __props__.__dict__["duration"] = duration
        __props__.__dict__["encrypt_mode"] = encrypt_mode
        __props__.__dict__["guest_join_uri"] = guest_join_uri
        __props__.__dict__["is_auto_record"] = is_auto_record
        __props__.__dict__["is_record_aux_stream"] = is_record_aux_stream
        __props__.__dict__["join_passwords"] = join_passwords
        __props__.__dict__["language"] = language
        __props__.__dict__["live_address"] = live_address
        __props__.__dict__["media_types"] = media_types
        __props__.__dict__["meeting_room_id"] = meeting_room_id
        __props__.__dict__["participant_number"] = participant_number
        __props__.__dict__["participants"] = participants
        __props__.__dict__["record_auth_type"] = record_auth_type
        __props__.__dict__["record_type"] = record_type
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["subconferences"] = subconferences
        __props__.__dict__["timezone_id"] = timezone_id
        __props__.__dict__["topic"] = topic
        __props__.__dict__["user_id"] = user_id
        return Conference(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessNumber")
    def access_number(self) -> pulumi.Output[_builtins.str]:
        """
        The access number of the conference.
        """
        return pulumi.get(self, "access_number")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the (HUAWEI Cloud meeting) user account name to which the
        meeting initiator belongs. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the user password.
        Required if `account_name` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_password")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the Third-party application.
        Changing this parameter will create a new resource.

        > You can apply for an application and obtain the App ID and App Key in the console.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the Key information of the Third-party APP.
        Required if `app_id` is set. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_key")

    @_builtins.property
    @pulumi.getter(name="audienceJoinUri")
    def audience_join_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The audience meeting link address.
        """
        return pulumi.get(self, "audience_join_uri")

    @_builtins.property
    @pulumi.getter(name="auxAddress")
    def aux_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the auxiliary streaming address, the maximum length is 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "aux_address")

    @_builtins.property
    @pulumi.getter(name="chairJoinUri")
    def chair_join_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The host meeting link address.
        """
        return pulumi.get(self, "chair_join_uri")

    @_builtins.property
    @pulumi.getter(name="conferenceType")
    def conference_type(self) -> pulumi.Output[_builtins.str]:
        """
        The conference type, the valid values are as follows:
        + **FUTURE**
        + **IMMEDIATELY**
        + **CYCLE**
        """
        return pulumi.get(self, "conference_type")

    @_builtins.property
    @pulumi.getter(name="conferenceUuid")
    def conference_uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The conference UUID.
        """
        return pulumi.get(self, "conference_uuid")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.ConferenceConfiguration']]:
        """
        Specifies the other conference configurations.
        The object structure is documented below.

        <a name="conference_participant"></a>
        The `participant` block supports:
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="corpId")
    def corp_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the corporation ID.
        Required if the application is used in multiple enterprises. Only available if `app_id` is set.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "corp_id")

    @_builtins.property
    @pulumi.getter(name="cycleParams")
    def cycle_params(self) -> pulumi.Output['outputs.ConferenceCycleParams']:
        """
        Specifies the configurations of the cyclical conference.
        The object structure is documented below.
        """
        return pulumi.get(self, "cycle_params")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the duration of the conference, in minutes.
        The valid value is range from `15` to `1,440`, defaults to `30`.

        > After the conference starts, only support extend duration, shorten duration is not supported.
        And only the duration can be updated after the meeting starts.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="encryptMode")
    def encrypt_mode(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the conference media encryption mode.
        + **0**: Adaptive encryption.
        + **1**: Force encryption.
        + **2**: Do not encrypt.

        The default value is populated by enterprise-level configuration.
        """
        return pulumi.get(self, "encrypt_mode")

    @_builtins.property
    @pulumi.getter(name="guestJoinUri")
    def guest_join_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The common attendee meeting link address.
        """
        return pulumi.get(self, "guest_join_uri")

    @_builtins.property
    @pulumi.getter(name="isAutoRecord")
    def is_auto_record(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies whether the conference automatically starts recording, it only takes
        effect when the recording type is:
        + **1**: Automatically start recording.
        + **0**: Do not start recording automatically.

        The default value is `0` (not to start automatically).
        """
        return pulumi.get(self, "is_auto_record")

    @_builtins.property
    @pulumi.getter(name="isRecordAuxStream")
    def is_record_aux_stream(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies whether to record auxiliary stream.
        + **0**: Do not record.
        + **1**: Record.

        Only available if `record_type` is `2` or `3`, and the default value is `0`.
        """
        return pulumi.get(self, "is_record_aux_stream")

    @_builtins.property
    @pulumi.getter(name="joinPasswords")
    def join_passwords(self) -> pulumi.Output[Sequence['outputs.ConferenceJoinPassword']]:
        """
        The meeting password.
        The join_password structure is documented below.
        """
        return pulumi.get(self, "join_passwords")

    @_builtins.property
    @pulumi.getter
    def language(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the default language of the conference, the default value is defined by the
        conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
        The valid values are as follows:
        + **zh-CN**: Simplified Chinese.
        + **en-US**: US English.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="liveAddress")
    def live_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the mainstream live broadcast address, with a maximum of 255 characters.
        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "live_address")

    @_builtins.property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the conference media type list.
        It consists of one or more enumerations, and the valid values are as follows:
        + **Voice**: Voice.
        + **Video**: SD video.
        + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
        time, the system will select Video by default).
        + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
        """
        return pulumi.get(self, "media_types")

    @_builtins.property
    @pulumi.getter(name="meetingRoomId")
    def meeting_room_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cloud meeting room ID.
        """
        return pulumi.get(self, "meeting_room_id")

    @_builtins.property
    @pulumi.getter(name="participantNumber")
    def participant_number(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the number of parties in the conference, the maximum number of
        participants in the conference. Defaults to `0` (Unlimited).
        """
        return pulumi.get(self, "participant_number")

    @_builtins.property
    @pulumi.getter
    def participants(self) -> pulumi.Output[Optional[Sequence['outputs.ConferenceParticipant']]]:
        """
        Specifies the attendee list.
        The object structure is documented below.
        """
        return pulumi.get(self, "participants")

    @_builtins.property
    @pulumi.getter(name="recordAuthType")
    def record_auth_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the recording authentication method.
        + **0**: Viewable/downloadable via link.
        + **1**: Enterprise users can watch/download.
        + **2**: Attendees can watch/download.

        Only available if `record_type` is `2` or `3`.
        """
        return pulumi.get(self, "record_auth_type")

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the recording type.
        + **0**: Disabled.
        + **1**: Live broadcast.
        + **2**: Record and broadcast.
        + **3**: Live + Recording.

        The default value is `0` (disabled).
        """
        return pulumi.get(self, "record_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the conference start time (UTC time).
        The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
        There is no need to set if you book a cyclical conference.

        > If you want to start a conference at `08:00` (UTC+8), you need to specify the time with `00:00`.
        And the start time cannot be earlier than now.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The conference status, the valid values are as follows:
        + **Schedule**: the conference is in schedule.
        + **Created**: The conference is in progress.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subconferences(self) -> pulumi.Output[Sequence['outputs.ConferenceSubconference']]:
        """
        The list of periodic sub-conferences.
        The object structure is documented below.
        """
        return pulumi.get(self, "subconferences")

    @_builtins.property
    @pulumi.getter(name="timezoneId")
    def timezone_id(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the time zone information of the conference time in the conference
        notification. For time zone information, refer to the time zone mapping relationship.

        > For example: the timeZoneID `26`, time in the conference notification sent through HUAWEI CLOUD conference will be
        marked as "2021/11/11 Thursday 00:00 - 02:00 (GMT) Greenwich Standard When: Dublin, Edinburgh, Lisbon, London".
        For an aperiodic conference, if the conference notification is sent through a third-party system, this field does not
        need to be filled in.
        """
        return pulumi.get(self, "timezone_id")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the conference topic. The topic can contain `1` to `128` characters.
        """
        return pulumi.get(self, "topic")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user ID of the participant.
        """
        return pulumi.get(self, "user_id")

