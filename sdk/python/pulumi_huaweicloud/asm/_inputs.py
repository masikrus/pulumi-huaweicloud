# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MeshExtendParamsArgs',
    'MeshExtendParamsArgsDict',
    'MeshExtendParamsClusterArgs',
    'MeshExtendParamsClusterArgsDict',
    'MeshExtendParamsClusterInjectionArgs',
    'MeshExtendParamsClusterInjectionArgsDict',
    'MeshExtendParamsClusterInjectionNamespacesArgs',
    'MeshExtendParamsClusterInjectionNamespacesArgsDict',
    'MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs',
    'MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgsDict',
    'MeshExtendParamsClusterInstallationArgs',
    'MeshExtendParamsClusterInstallationArgsDict',
    'MeshExtendParamsClusterInstallationNodesArgs',
    'MeshExtendParamsClusterInstallationNodesArgsDict',
    'MeshExtendParamsClusterInstallationNodesFieldSelectorArgs',
    'MeshExtendParamsClusterInstallationNodesFieldSelectorArgsDict',
]

MYPY = False

if not MYPY:
    class MeshExtendParamsArgsDict(TypedDict):
        clusters: pulumi.Input[Sequence[pulumi.Input['MeshExtendParamsClusterArgsDict']]]
        """
        Specifies the cluster informations in the mesh.

        The clusters structure is documented below.

        <a name="extend_params_clusters_struct"></a>
        The `clusters` block supports:
        """
elif False:
    MeshExtendParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsArgs:
    def __init__(__self__, *,
                 clusters: pulumi.Input[Sequence[pulumi.Input['MeshExtendParamsClusterArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MeshExtendParamsClusterArgs']]] clusters: Specifies the cluster informations in the mesh.
               
               The clusters structure is documented below.
               
               <a name="extend_params_clusters_struct"></a>
               The `clusters` block supports:
        """
        pulumi.set(__self__, "clusters", clusters)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> pulumi.Input[Sequence[pulumi.Input['MeshExtendParamsClusterArgs']]]:
        """
        Specifies the cluster informations in the mesh.

        The clusters structure is documented below.

        <a name="extend_params_clusters_struct"></a>
        The `clusters` block supports:
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: pulumi.Input[Sequence[pulumi.Input['MeshExtendParamsClusterArgs']]]):
        pulumi.set(self, "clusters", value)


if not MYPY:
    class MeshExtendParamsClusterArgsDict(TypedDict):
        cluster_id: pulumi.Input[_builtins.str]
        """
        Specifies the cluster ID.
        """
        installation: pulumi.Input['MeshExtendParamsClusterInstallationArgsDict']
        """
        Specifies the mesh components installation configuration.

        The installation structure is documented below.
        """
        injection: NotRequired[pulumi.Input['MeshExtendParamsClusterInjectionArgsDict']]
        """
        Specifies the sidecar injection configuration.

        The injection structure is documented below.

        <a name="clusters_installation_struct"></a>
        The `installation` block supports:
        """
elif False:
    MeshExtendParamsClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 installation: pulumi.Input['MeshExtendParamsClusterInstallationArgs'],
                 injection: Optional[pulumi.Input['MeshExtendParamsClusterInjectionArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input['MeshExtendParamsClusterInstallationArgs'] installation: Specifies the mesh components installation configuration.
               
               The installation structure is documented below.
        :param pulumi.Input['MeshExtendParamsClusterInjectionArgs'] injection: Specifies the sidecar injection configuration.
               
               The injection structure is documented below.
               
               <a name="clusters_installation_struct"></a>
               The `installation` block supports:
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "installation", installation)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def installation(self) -> pulumi.Input['MeshExtendParamsClusterInstallationArgs']:
        """
        Specifies the mesh components installation configuration.

        The installation structure is documented below.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: pulumi.Input['MeshExtendParamsClusterInstallationArgs']):
        pulumi.set(self, "installation", value)

    @_builtins.property
    @pulumi.getter
    def injection(self) -> Optional[pulumi.Input['MeshExtendParamsClusterInjectionArgs']]:
        """
        Specifies the sidecar injection configuration.

        The injection structure is documented below.

        <a name="clusters_installation_struct"></a>
        The `installation` block supports:
        """
        return pulumi.get(self, "injection")

    @injection.setter
    def injection(self, value: Optional[pulumi.Input['MeshExtendParamsClusterInjectionArgs']]):
        pulumi.set(self, "injection", value)


if not MYPY:
    class MeshExtendParamsClusterInjectionArgsDict(TypedDict):
        namespaces: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesArgsDict']
        """
        Specifies the namespace of the sidecar injection.

        The namespaces structure is documented below.

        <a name="nodes_or_namespaces_struct"></a>
        The `namespaces` and `nodes` block support:
        """
elif False:
    MeshExtendParamsClusterInjectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInjectionArgs:
    def __init__(__self__, *,
                 namespaces: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesArgs']):
        """
        :param pulumi.Input['MeshExtendParamsClusterInjectionNamespacesArgs'] namespaces: Specifies the namespace of the sidecar injection.
               
               The namespaces structure is documented below.
               
               <a name="nodes_or_namespaces_struct"></a>
               The `namespaces` and `nodes` block support:
        """
        pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> pulumi.Input['MeshExtendParamsClusterInjectionNamespacesArgs']:
        """
        Specifies the namespace of the sidecar injection.

        The namespaces structure is documented below.

        <a name="nodes_or_namespaces_struct"></a>
        The `namespaces` and `nodes` block support:
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesArgs']):
        pulumi.set(self, "namespaces", value)


if not MYPY:
    class MeshExtendParamsClusterInjectionNamespacesArgsDict(TypedDict):
        field_selector: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgsDict']
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
elif False:
    MeshExtendParamsClusterInjectionNamespacesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInjectionNamespacesArgs:
    def __init__(__self__, *,
                 field_selector: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs']):
        """
        :param pulumi.Input['MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs'] field_selector: Specifies the field selector.
               
               The field_selector structure is documented below.
               
               <a name="field_selector_struct"></a>
               The `field_selector` block supports:
        """
        pulumi.set(__self__, "field_selector", field_selector)

    @_builtins.property
    @pulumi.getter(name="fieldSelector")
    def field_selector(self) -> pulumi.Input['MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs']:
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
        return pulumi.get(self, "field_selector")

    @field_selector.setter
    def field_selector(self, value: pulumi.Input['MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs']):
        pulumi.set(self, "field_selector", value)


if not MYPY:
    class MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the key of the selector.
        """
        operator: pulumi.Input[_builtins.str]
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the value of the selector.
        """
elif False:
    MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 operator: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the key of the selector.
        :param pulumi.Input[_builtins.str] operator: Specifies the operator of the selector.
               The value can be **In**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key of the selector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the value of the selector.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class MeshExtendParamsClusterInstallationArgsDict(TypedDict):
        nodes: pulumi.Input['MeshExtendParamsClusterInstallationNodesArgsDict']
        """
        Specifies the mesh components installation configuration.

        The nodes structure is documented below.

        <a name="clusters_injection_struct"></a>
        The `injection` block supports:
        """
elif False:
    MeshExtendParamsClusterInstallationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInstallationArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input['MeshExtendParamsClusterInstallationNodesArgs']):
        """
        :param pulumi.Input['MeshExtendParamsClusterInstallationNodesArgs'] nodes: Specifies the mesh components installation configuration.
               
               The nodes structure is documented below.
               
               <a name="clusters_injection_struct"></a>
               The `injection` block supports:
        """
        pulumi.set(__self__, "nodes", nodes)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Input['MeshExtendParamsClusterInstallationNodesArgs']:
        """
        Specifies the mesh components installation configuration.

        The nodes structure is documented below.

        <a name="clusters_injection_struct"></a>
        The `injection` block supports:
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input['MeshExtendParamsClusterInstallationNodesArgs']):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class MeshExtendParamsClusterInstallationNodesArgsDict(TypedDict):
        field_selector: pulumi.Input['MeshExtendParamsClusterInstallationNodesFieldSelectorArgsDict']
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
elif False:
    MeshExtendParamsClusterInstallationNodesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInstallationNodesArgs:
    def __init__(__self__, *,
                 field_selector: pulumi.Input['MeshExtendParamsClusterInstallationNodesFieldSelectorArgs']):
        """
        :param pulumi.Input['MeshExtendParamsClusterInstallationNodesFieldSelectorArgs'] field_selector: Specifies the field selector.
               
               The field_selector structure is documented below.
               
               <a name="field_selector_struct"></a>
               The `field_selector` block supports:
        """
        pulumi.set(__self__, "field_selector", field_selector)

    @_builtins.property
    @pulumi.getter(name="fieldSelector")
    def field_selector(self) -> pulumi.Input['MeshExtendParamsClusterInstallationNodesFieldSelectorArgs']:
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
        return pulumi.get(self, "field_selector")

    @field_selector.setter
    def field_selector(self, value: pulumi.Input['MeshExtendParamsClusterInstallationNodesFieldSelectorArgs']):
        pulumi.set(self, "field_selector", value)


if not MYPY:
    class MeshExtendParamsClusterInstallationNodesFieldSelectorArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the key of the selector.
        """
        operator: pulumi.Input[_builtins.str]
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the value of the selector.
        """
elif False:
    MeshExtendParamsClusterInstallationNodesFieldSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshExtendParamsClusterInstallationNodesFieldSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 operator: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the key of the selector.
        :param pulumi.Input[_builtins.str] operator: Specifies the operator of the selector.
               The value can be **In**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key of the selector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the value of the selector.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


