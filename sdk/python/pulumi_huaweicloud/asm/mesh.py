# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MeshArgs', 'Mesh']

@pulumi.input_type
class MeshArgs:
    def __init__(__self__, *,
                 extend_params: pulumi.Input['MeshExtendParamsArgs'],
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Mesh resource.
        :param pulumi.Input['MeshExtendParamsArgs'] extend_params: Specifies the extend parameters of the mesh.
               
               The extend_params structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the mesh type.
               The value can be **InCluster**.
        :param pulumi.Input[_builtins.str] version: Specifies the mesh version.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the mesh annotations in key/value format.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Specifies the mesh labels in key/value format.
        :param pulumi.Input[_builtins.str] name: Specifies mesh name.
               The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
               must starts with letters and can't end with hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the mesh.
               
               <a name="spec_extend_params_struct"></a>
               The `extend_params` block supports:
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> pulumi.Input['MeshExtendParamsArgs']:
        """
        Specifies the extend parameters of the mesh.

        The extend_params structure is documented below.
        """
        return pulumi.get(self, "extend_params")

    @extend_params.setter
    def extend_params(self, value: pulumi.Input['MeshExtendParamsArgs']):
        pulumi.set(self, "extend_params", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mesh type.
        The value can be **InCluster**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mesh version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mesh annotations in key/value format.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mesh labels in key/value format.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies mesh name.
        The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
        must starts with letters and can't end with hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the mesh.

        <a name="spec_extend_params_struct"></a>
        The `extend_params` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MeshState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_params: Optional[pulumi.Input['MeshExtendParamsArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Mesh resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the mesh annotations in key/value format.
        :param pulumi.Input[_builtins.str] created_at: The time when the mesh is created.
        :param pulumi.Input['MeshExtendParamsArgs'] extend_params: Specifies the extend parameters of the mesh.
               
               The extend_params structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Specifies the mesh labels in key/value format.
        :param pulumi.Input[_builtins.str] name: Specifies mesh name.
               The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
               must starts with letters and can't end with hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: The status of the mesh.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the mesh.
               
               <a name="spec_extend_params_struct"></a>
               The `extend_params` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the mesh type.
               The value can be **InCluster**.
        :param pulumi.Input[_builtins.str] version: Specifies the mesh version.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mesh annotations in key/value format.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the mesh is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[pulumi.Input['MeshExtendParamsArgs']]:
        """
        Specifies the extend parameters of the mesh.

        The extend_params structure is documented below.
        """
        return pulumi.get(self, "extend_params")

    @extend_params.setter
    def extend_params(self, value: Optional[pulumi.Input['MeshExtendParamsArgs']]):
        pulumi.set(self, "extend_params", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mesh labels in key/value format.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies mesh name.
        The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
        must starts with letters and can't end with hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the mesh.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the mesh.

        <a name="spec_extend_params_struct"></a>
        The `extend_params` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mesh type.
        The value can be **InCluster**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the mesh version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:asm/mesh:Mesh")
class Mesh(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_params: Optional[pulumi.Input[Union['MeshExtendParamsArgs', 'MeshExtendParamsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a ASM mesh resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        cluster_id = config.require_object("clusterId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.asm.Mesh("test",
            name=name,
            type="InCluster",
            version="1.18.7-r1",
            tags={
                "foo": "bar",
                "key": "value",
            },
            extend_params={
                "clusters": [{
                    "cluster_id": cluster_id,
                    "installation": {
                        "nodes": {
                            "field_selector": {
                                "key": "UID",
                                "operator": "In",
                                "values": [node_id],
                            },
                        },
                    },
                }],
            })
        ```

        ## Import

        The ASM mesh can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:asm/mesh:Mesh test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `extend_params`, `annotations`, `labels` and `tags`.

        It is generally recommended running `pulumi preview` after importing a mesh.

        You can then decide if changes should be applied to the mesh, or the resource definition should be updated to

        align with the mesh. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_asm_mesh" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              extend_params, annotations, labels, tags,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the mesh annotations in key/value format.
        :param pulumi.Input[Union['MeshExtendParamsArgs', 'MeshExtendParamsArgsDict']] extend_params: Specifies the extend parameters of the mesh.
               
               The extend_params structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Specifies the mesh labels in key/value format.
        :param pulumi.Input[_builtins.str] name: Specifies mesh name.
               The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
               must starts with letters and can't end with hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the mesh.
               
               <a name="spec_extend_params_struct"></a>
               The `extend_params` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the mesh type.
               The value can be **InCluster**.
        :param pulumi.Input[_builtins.str] version: Specifies the mesh version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MeshArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a ASM mesh resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        cluster_id = config.require_object("clusterId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.asm.Mesh("test",
            name=name,
            type="InCluster",
            version="1.18.7-r1",
            tags={
                "foo": "bar",
                "key": "value",
            },
            extend_params={
                "clusters": [{
                    "cluster_id": cluster_id,
                    "installation": {
                        "nodes": {
                            "field_selector": {
                                "key": "UID",
                                "operator": "In",
                                "values": [node_id],
                            },
                        },
                    },
                }],
            })
        ```

        ## Import

        The ASM mesh can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:asm/mesh:Mesh test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `extend_params`, `annotations`, `labels` and `tags`.

        It is generally recommended running `pulumi preview` after importing a mesh.

        You can then decide if changes should be applied to the mesh, or the resource definition should be updated to

        align with the mesh. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_asm_mesh" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              extend_params, annotations, labels, tags,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param MeshArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MeshArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_params: Optional[pulumi.Input[Union['MeshExtendParamsArgs', 'MeshExtendParamsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MeshArgs.__new__(MeshArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["enable_force_new"] = enable_force_new
            if extend_params is None and not opts.urn:
                raise TypeError("Missing required property 'extend_params'")
            __props__.__dict__["extend_params"] = extend_params
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(Mesh, __self__).__init__(
            'huaweicloud:asm/mesh:Mesh',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            extend_params: Optional[pulumi.Input[Union['MeshExtendParamsArgs', 'MeshExtendParamsArgsDict']]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Mesh':
        """
        Get an existing Mesh resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the mesh annotations in key/value format.
        :param pulumi.Input[_builtins.str] created_at: The time when the mesh is created.
        :param pulumi.Input[Union['MeshExtendParamsArgs', 'MeshExtendParamsArgsDict']] extend_params: Specifies the extend parameters of the mesh.
               
               The extend_params structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Specifies the mesh labels in key/value format.
        :param pulumi.Input[_builtins.str] name: Specifies mesh name.
               The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
               must starts with letters and can't end with hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] status: The status of the mesh.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the mesh.
               
               <a name="spec_extend_params_struct"></a>
               The `extend_params` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the mesh type.
               The value can be **InCluster**.
        :param pulumi.Input[_builtins.str] version: Specifies the mesh version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MeshState.__new__(_MeshState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["extend_params"] = extend_params
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        return Mesh(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the mesh annotations in key/value format.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the mesh is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> pulumi.Output['outputs.MeshExtendParams']:
        """
        Specifies the extend parameters of the mesh.

        The extend_params structure is documented below.
        """
        return pulumi.get(self, "extend_params")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the mesh labels in key/value format.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies mesh name.
        The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
        must starts with letters and can't end with hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the mesh.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the mesh.

        <a name="spec_extend_params_struct"></a>
        The `extend_params` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the mesh type.
        The value can be **InCluster**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the mesh version.
        """
        return pulumi.get(self, "version")

