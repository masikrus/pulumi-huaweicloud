# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'MeshExtendParams',
    'MeshExtendParamsCluster',
    'MeshExtendParamsClusterInjection',
    'MeshExtendParamsClusterInjectionNamespaces',
    'MeshExtendParamsClusterInjectionNamespacesFieldSelector',
    'MeshExtendParamsClusterInstallation',
    'MeshExtendParamsClusterInstallationNodes',
    'MeshExtendParamsClusterInstallationNodesFieldSelector',
    'GetMeshesItemResult',
    'GetMeshesItemExtendParamResult',
    'GetMeshesItemExtendParamClusterResult',
    'GetMeshesItemExtendParamClusterInjectionResult',
    'GetMeshesItemExtendParamClusterInjectionNamespaceResult',
    'GetMeshesItemExtendParamClusterInjectionNamespaceFieldSelectorResult',
    'GetMeshesItemExtendParamClusterInstallationResult',
    'GetMeshesItemExtendParamClusterInstallationNodeResult',
    'GetMeshesItemExtendParamClusterInstallationNodeFieldSelectorResult',
]

@pulumi.output_type
class MeshExtendParams(dict):
    def __init__(__self__, *,
                 clusters: Sequence['outputs.MeshExtendParamsCluster']):
        """
        :param Sequence['MeshExtendParamsClusterArgs'] clusters: Specifies the cluster informations in the mesh.
               
               The clusters structure is documented below.
               
               <a name="extend_params_clusters_struct"></a>
               The `clusters` block supports:
        """
        pulumi.set(__self__, "clusters", clusters)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.MeshExtendParamsCluster']:
        """
        Specifies the cluster informations in the mesh.

        The clusters structure is documented below.

        <a name="extend_params_clusters_struct"></a>
        The `clusters` block supports:
        """
        return pulumi.get(self, "clusters")


@pulumi.output_type
class MeshExtendParamsCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeshExtendParamsCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeshExtendParamsCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeshExtendParamsCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 installation: 'outputs.MeshExtendParamsClusterInstallation',
                 injection: Optional['outputs.MeshExtendParamsClusterInjection'] = None):
        """
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param 'MeshExtendParamsClusterInstallationArgs' installation: Specifies the mesh components installation configuration.
               
               The installation structure is documented below.
        :param 'MeshExtendParamsClusterInjectionArgs' injection: Specifies the sidecar injection configuration.
               
               The injection structure is documented below.
               
               <a name="clusters_installation_struct"></a>
               The `installation` block supports:
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "installation", installation)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def installation(self) -> 'outputs.MeshExtendParamsClusterInstallation':
        """
        Specifies the mesh components installation configuration.

        The installation structure is documented below.
        """
        return pulumi.get(self, "installation")

    @_builtins.property
    @pulumi.getter
    def injection(self) -> Optional['outputs.MeshExtendParamsClusterInjection']:
        """
        Specifies the sidecar injection configuration.

        The injection structure is documented below.

        <a name="clusters_installation_struct"></a>
        The `installation` block supports:
        """
        return pulumi.get(self, "injection")


@pulumi.output_type
class MeshExtendParamsClusterInjection(dict):
    def __init__(__self__, *,
                 namespaces: 'outputs.MeshExtendParamsClusterInjectionNamespaces'):
        """
        :param 'MeshExtendParamsClusterInjectionNamespacesArgs' namespaces: Specifies the namespace of the sidecar injection.
               
               The namespaces structure is documented below.
               
               <a name="nodes_or_namespaces_struct"></a>
               The `namespaces` and `nodes` block support:
        """
        pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> 'outputs.MeshExtendParamsClusterInjectionNamespaces':
        """
        Specifies the namespace of the sidecar injection.

        The namespaces structure is documented below.

        <a name="nodes_or_namespaces_struct"></a>
        The `namespaces` and `nodes` block support:
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class MeshExtendParamsClusterInjectionNamespaces(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelector":
            suggest = "field_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeshExtendParamsClusterInjectionNamespaces. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeshExtendParamsClusterInjectionNamespaces.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeshExtendParamsClusterInjectionNamespaces.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selector: 'outputs.MeshExtendParamsClusterInjectionNamespacesFieldSelector'):
        """
        :param 'MeshExtendParamsClusterInjectionNamespacesFieldSelectorArgs' field_selector: Specifies the field selector.
               
               The field_selector structure is documented below.
               
               <a name="field_selector_struct"></a>
               The `field_selector` block supports:
        """
        pulumi.set(__self__, "field_selector", field_selector)

    @_builtins.property
    @pulumi.getter(name="fieldSelector")
    def field_selector(self) -> 'outputs.MeshExtendParamsClusterInjectionNamespacesFieldSelector':
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
        return pulumi.get(self, "field_selector")


@pulumi.output_type
class MeshExtendParamsClusterInjectionNamespacesFieldSelector(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the selector.
        :param _builtins.str operator: Specifies the operator of the selector.
               The value can be **In**.
        :param Sequence[_builtins.str] values: Specifies the value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the selector.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the value of the selector.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class MeshExtendParamsClusterInstallation(dict):
    def __init__(__self__, *,
                 nodes: 'outputs.MeshExtendParamsClusterInstallationNodes'):
        """
        :param 'MeshExtendParamsClusterInstallationNodesArgs' nodes: Specifies the mesh components installation configuration.
               
               The nodes structure is documented below.
               
               <a name="clusters_injection_struct"></a>
               The `injection` block supports:
        """
        pulumi.set(__self__, "nodes", nodes)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> 'outputs.MeshExtendParamsClusterInstallationNodes':
        """
        Specifies the mesh components installation configuration.

        The nodes structure is documented below.

        <a name="clusters_injection_struct"></a>
        The `injection` block supports:
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class MeshExtendParamsClusterInstallationNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelector":
            suggest = "field_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeshExtendParamsClusterInstallationNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeshExtendParamsClusterInstallationNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeshExtendParamsClusterInstallationNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selector: 'outputs.MeshExtendParamsClusterInstallationNodesFieldSelector'):
        """
        :param 'MeshExtendParamsClusterInstallationNodesFieldSelectorArgs' field_selector: Specifies the field selector.
               
               The field_selector structure is documented below.
               
               <a name="field_selector_struct"></a>
               The `field_selector` block supports:
        """
        pulumi.set(__self__, "field_selector", field_selector)

    @_builtins.property
    @pulumi.getter(name="fieldSelector")
    def field_selector(self) -> 'outputs.MeshExtendParamsClusterInstallationNodesFieldSelector':
        """
        Specifies the field selector.

        The field_selector structure is documented below.

        <a name="field_selector_struct"></a>
        The `field_selector` block supports:
        """
        return pulumi.get(self, "field_selector")


@pulumi.output_type
class MeshExtendParamsClusterInstallationNodesFieldSelector(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the selector.
        :param _builtins.str operator: Specifies the operator of the selector.
               The value can be **In**.
        :param Sequence[_builtins.str] values: Specifies the value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the selector.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the operator of the selector.
        The value can be **In**.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the value of the selector.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetMeshesItemResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 created_at: _builtins.str,
                 extend_params: Sequence['outputs.GetMeshesItemExtendParamResult'],
                 id: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: The mesh annotations in key/value format.
        :param _builtins.str created_at: The time when the mesh is created.
        :param Sequence['GetMeshesItemExtendParamArgs'] extend_params: The extend parameters of the mesh.
        :param _builtins.str id: The mesh ID.
        :param Mapping[str, _builtins.str] labels: The mesh labels in key/value format.
        :param _builtins.str name: The mesh name.
               The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
               must starts with letters and can't end with hyphens (-).
        :param _builtins.str status: The status of the mesh.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the mesh.
        :param _builtins.str type: The mesh type.
        :param _builtins.str version: The mesh version.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The mesh annotations in key/value format.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the mesh is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Sequence['outputs.GetMeshesItemExtendParamResult']:
        """
        The extend parameters of the mesh.
        """
        return pulumi.get(self, "extend_params")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The mesh ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        The mesh labels in key/value format.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The mesh name.
        The name consists of 4 to 64 characters, including letters, digits and hyphens (-),
        must starts with letters and can't end with hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the mesh.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the mesh.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The mesh type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The mesh version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMeshesItemExtendParamResult(dict):
    def __init__(__self__, *,
                 clusters: Sequence['outputs.GetMeshesItemExtendParamClusterResult']):
        """
        :param Sequence['GetMeshesItemExtendParamClusterArgs'] clusters: The cluster informations in the mesh.
        """
        pulumi.set(__self__, "clusters", clusters)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterResult']:
        """
        The cluster informations in the mesh.
        """
        return pulumi.get(self, "clusters")


@pulumi.output_type
class GetMeshesItemExtendParamClusterResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 injections: Sequence['outputs.GetMeshesItemExtendParamClusterInjectionResult'],
                 installations: Sequence['outputs.GetMeshesItemExtendParamClusterInstallationResult']):
        """
        :param _builtins.str cluster_id: The cluster ID.
        :param Sequence['GetMeshesItemExtendParamClusterInjectionArgs'] injections: The sidecar injection configuration.
        :param Sequence['GetMeshesItemExtendParamClusterInstallationArgs'] installations: The mesh components installation configuration.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "injections", injections)
        pulumi.set(__self__, "installations", installations)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def injections(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInjectionResult']:
        """
        The sidecar injection configuration.
        """
        return pulumi.get(self, "injections")

    @_builtins.property
    @pulumi.getter
    def installations(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInstallationResult']:
        """
        The mesh components installation configuration.
        """
        return pulumi.get(self, "installations")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInjectionResult(dict):
    def __init__(__self__, *,
                 namespaces: Sequence['outputs.GetMeshesItemExtendParamClusterInjectionNamespaceResult']):
        """
        :param Sequence['GetMeshesItemExtendParamClusterInjectionNamespaceArgs'] namespaces: The namespace of the sidecar injection.
        """
        pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInjectionNamespaceResult']:
        """
        The namespace of the sidecar injection.
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInjectionNamespaceResult(dict):
    def __init__(__self__, *,
                 field_selectors: Sequence['outputs.GetMeshesItemExtendParamClusterInjectionNamespaceFieldSelectorResult']):
        """
        :param Sequence['GetMeshesItemExtendParamClusterInjectionNamespaceFieldSelectorArgs'] field_selectors: The field selector.
        """
        pulumi.set(__self__, "field_selectors", field_selectors)

    @_builtins.property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInjectionNamespaceFieldSelectorResult']:
        """
        The field selector.
        """
        return pulumi.get(self, "field_selectors")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInjectionNamespaceFieldSelectorResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the selector.
        :param _builtins.str operator: The operator of the selector.
        :param Sequence[_builtins.str] values: The value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the selector.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator of the selector.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value of the selector.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInstallationResult(dict):
    def __init__(__self__, *,
                 nodes: Sequence['outputs.GetMeshesItemExtendParamClusterInstallationNodeResult']):
        """
        :param Sequence['GetMeshesItemExtendParamClusterInstallationNodeArgs'] nodes: The nodes to install mesh components.
        """
        pulumi.set(__self__, "nodes", nodes)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInstallationNodeResult']:
        """
        The nodes to install mesh components.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInstallationNodeResult(dict):
    def __init__(__self__, *,
                 field_selectors: Sequence['outputs.GetMeshesItemExtendParamClusterInstallationNodeFieldSelectorResult']):
        """
        :param Sequence['GetMeshesItemExtendParamClusterInstallationNodeFieldSelectorArgs'] field_selectors: The field selector.
        """
        pulumi.set(__self__, "field_selectors", field_selectors)

    @_builtins.property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Sequence['outputs.GetMeshesItemExtendParamClusterInstallationNodeFieldSelectorResult']:
        """
        The field selector.
        """
        return pulumi.get(self, "field_selectors")


@pulumi.output_type
class GetMeshesItemExtendParamClusterInstallationNodeFieldSelectorResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operator: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the selector.
        :param _builtins.str operator: The operator of the selector.
        :param Sequence[_builtins.str] values: The value of the selector.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the selector.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator of the selector.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value of the selector.
        """
        return pulumi.get(self, "values")


