# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationRepository',
    'ApplicationStackResource',
    'AsyncInvokeConfigurationOnFailure',
    'AsyncInvokeConfigurationOnSuccess',
    'FunctionCustomImage',
    'FunctionFuncMount',
    'FunctionNetworkController',
    'FunctionNetworkControllerTriggerAccessVpc',
    'FunctionReservedInstance',
    'FunctionReservedInstanceTacticsConfig',
    'FunctionReservedInstanceTacticsConfigCronConfig',
    'FunctionReservedInstanceTacticsConfigMetricConfig',
    'FunctionV2CustomImage',
    'FunctionV2FuncMount',
    'FunctionV2NetworkController',
    'FunctionV2NetworkControllerTriggerAccessVpc',
    'FunctionV2ReservedInstance',
    'FunctionV2ReservedInstanceTacticsConfig',
    'FunctionV2ReservedInstanceTacticsConfigCronConfig',
    'FunctionV2ReservedInstanceTacticsConfigMetricConfig',
    'FunctionV2Version',
    'FunctionV2VersionAliases',
    'FunctionVersion',
    'FunctionVersionAliases',
    'TriggerApig',
    'TriggerDis',
    'TriggerKafka',
    'TriggerLts',
    'TriggerObs',
    'TriggerSmn',
    'TriggerTimer',
    'GetApplicationTemplatesTemplateResult',
    'GetApplicationsApplicationResult',
    'GetDependenciesPackageResult',
    'GetDependenciesPackageVersionResult',
    'GetDependencyVersionsVersionResult',
    'GetFunctionEventsEventResult',
    'GetFunctionTagsSysTagResult',
    'GetFunctionTagsTagResult',
    'GetFunctionTriggersTriggerResult',
    'GetFunctionsFunctionResult',
    'GetQuotasQuotaResult',
    'GetResourceTagsSysTagResult',
    'GetResourceTagsTagResult',
]

@pulumi.output_type
class ApplicationRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsUrl":
            suggest = "https_url"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 https_url: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 web_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str https_url: The HTTP address of the repository.
        :param _builtins.str project_id: The project ID of the repository.
        :param _builtins.str status: The repository status.
        :param _builtins.str web_url: The repository link.
        """
        if https_url is not None:
            pulumi.set(__self__, "https_url", https_url)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter(name="httpsUrl")
    def https_url(self) -> Optional[_builtins.str]:
        """
        The HTTP address of the repository.
        """
        return pulumi.get(self, "https_url")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        The project ID of the repository.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The repository status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[_builtins.str]:
        """
        The repository link.
        """
        return pulumi.get(self, "web_url")


@pulumi.output_type
class ApplicationStackResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "logicalResourceName":
            suggest = "logical_resource_name"
        elif key == "logicalResourceType":
            suggest = "logical_resource_type"
        elif key == "physicalResourceId":
            suggest = "physical_resource_id"
        elif key == "physicalResourceName":
            suggest = "physical_resource_name"
        elif key == "resourceStatus":
            suggest = "resource_status"
        elif key == "statusMessage":
            suggest = "status_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStackResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStackResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStackResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[_builtins.str] = None,
                 href: Optional[_builtins.str] = None,
                 logical_resource_name: Optional[_builtins.str] = None,
                 logical_resource_type: Optional[_builtins.str] = None,
                 physical_resource_id: Optional[_builtins.str] = None,
                 physical_resource_name: Optional[_builtins.str] = None,
                 resource_status: Optional[_builtins.str] = None,
                 status_message: Optional[_builtins.str] = None):
        """
        :param _builtins.str display_name: The cloud service name.
        :param _builtins.str href: The hyperlink.
        :param _builtins.str logical_resource_name: The logical resource name.
        :param _builtins.str logical_resource_type: The logical resource type.
        :param _builtins.str physical_resource_id: The physical resource ID.
        :param _builtins.str physical_resource_name: The physical resource name.
        :param _builtins.str resource_status: The status of resource.
        :param _builtins.str status_message: The status information.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if logical_resource_name is not None:
            pulumi.set(__self__, "logical_resource_name", logical_resource_name)
        if logical_resource_type is not None:
            pulumi.set(__self__, "logical_resource_type", logical_resource_type)
        if physical_resource_id is not None:
            pulumi.set(__self__, "physical_resource_id", physical_resource_id)
        if physical_resource_name is not None:
            pulumi.set(__self__, "physical_resource_name", physical_resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The cloud service name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The hyperlink.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="logicalResourceName")
    def logical_resource_name(self) -> Optional[_builtins.str]:
        """
        The logical resource name.
        """
        return pulumi.get(self, "logical_resource_name")

    @_builtins.property
    @pulumi.getter(name="logicalResourceType")
    def logical_resource_type(self) -> Optional[_builtins.str]:
        """
        The logical resource type.
        """
        return pulumi.get(self, "logical_resource_type")

    @_builtins.property
    @pulumi.getter(name="physicalResourceId")
    def physical_resource_id(self) -> Optional[_builtins.str]:
        """
        The physical resource ID.
        """
        return pulumi.get(self, "physical_resource_id")

    @_builtins.property
    @pulumi.getter(name="physicalResourceName")
    def physical_resource_name(self) -> Optional[_builtins.str]:
        """
        The physical resource name.
        """
        return pulumi.get(self, "physical_resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[_builtins.str]:
        """
        The status of resource.
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[_builtins.str]:
        """
        The status information.
        """
        return pulumi.get(self, "status_message")


@pulumi.output_type
class AsyncInvokeConfigurationOnFailure(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 param: _builtins.str):
        """
        :param _builtins.str destination: Specifies the object type.  
               The valid values are as follows:
               + **OBS**
               + **SMN**
               + **DIS**
               + **FunctionGraph**
        :param _builtins.str param: Specifies the parameters (map object in JSON format) corresponding to the target service.
               + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
               expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
               + The **SMN** objects include: `topic_urn`.
               + The **DIS** objects include: `stream_name`.
               + The **FunctionGraph** objects include: `func_urn` (function URN).
               
               > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
               corresponding service.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "param", param)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the object type.  
        The valid values are as follows:
        + **OBS**
        + **SMN**
        + **DIS**
        + **FunctionGraph**
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def param(self) -> _builtins.str:
        """
        Specifies the parameters (map object in JSON format) corresponding to the target service.
        + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
        expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
        + The **SMN** objects include: `topic_urn`.
        + The **DIS** objects include: `stream_name`.
        + The **FunctionGraph** objects include: `func_urn` (function URN).

        > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
        corresponding service.
        """
        return pulumi.get(self, "param")


@pulumi.output_type
class AsyncInvokeConfigurationOnSuccess(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 param: _builtins.str):
        """
        :param _builtins.str destination: Specifies the object type.  
               The valid values are as follows:
               + **OBS**
               + **SMN**
               + **DIS**
               + **FunctionGraph**
        :param _builtins.str param: Specifies the parameters (map object in JSON format) corresponding to the target service.
               + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
               expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
               + The **SMN** objects include: `topic_urn`.
               + The **DIS** objects include: `stream_name`.
               + The **FunctionGraph** objects include: `func_urn` (function URN).
               
               > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
               corresponding service.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "param", param)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the object type.  
        The valid values are as follows:
        + **OBS**
        + **SMN**
        + **DIS**
        + **FunctionGraph**
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def param(self) -> _builtins.str:
        """
        Specifies the parameters (map object in JSON format) corresponding to the target service.
        + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
        expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
        + The **SMN** objects include: `topic_urn`.
        + The **DIS** objects include: `stream_name`.
        + The **FunctionGraph** objects include: `func_urn` (function URN).

        > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
        corresponding service.
        """
        return pulumi.get(self, "param")


@pulumi.output_type
class FunctionCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: _builtins.str,
                 args: Optional[_builtins.str] = None,
                 command: Optional[_builtins.str] = None,
                 user_group_id: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: Specifies the URL of SWR image, the URL must start with `swr.`.
        :param _builtins.str args: Specifies the command line arguments used to start the SWR image.  
               If multiple arguments are separated by commas (,). e.g. `-args,value`.
               If this parameter is not specified, the CMD in the image configuration will be used by default.
        :param _builtins.str command: Specifies the startup commands of the SWR image.  
               Multiple commands are separated by commas (,). e.g. `/bin/sh`.
               If this parameter is not specified, the entrypoint or CMD in the image configuration will be used by default.
        :param _builtins.str user_group_id: The user group ID that used to run SWR image.
        :param _builtins.str user_id: The user ID that used to run SWR image.
        :param _builtins.str working_dir: Specifies the working directory of the SWR image.  
               If not specified, the default value is `/`.
               Currently, the folder path can only be set to `/` and it cannot be created or modified.
               
               <a name="function_versions"></a>
               The `versions` block supports:
        """
        pulumi.set(__self__, "url", url)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Specifies the URL of SWR image, the URL must start with `swr.`.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[_builtins.str]:
        """
        Specifies the command line arguments used to start the SWR image.  
        If multiple arguments are separated by commas (,). e.g. `-args,value`.
        If this parameter is not specified, the CMD in the image configuration will be used by default.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[_builtins.str]:
        """
        Specifies the startup commands of the SWR image.  
        Multiple commands are separated by commas (,). e.g. `/bin/sh`.
        If this parameter is not specified, the entrypoint or CMD in the image configuration will be used by default.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[_builtins.str]:
        """
        The user group ID that used to run SWR image.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The user ID that used to run SWR image.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        Specifies the working directory of the SWR image.  
        If not specified, the default value is `/`.
        Currently, the folder path can only be set to `/` and it cannot be created or modified.

        <a name="function_versions"></a>
        The `versions` block supports:
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class FunctionFuncMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountPath":
            suggest = "local_mount_path"
        elif key == "mountResource":
            suggest = "mount_resource"
        elif key == "mountSharePath":
            suggest = "mount_share_path"
        elif key == "mountType":
            suggest = "mount_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionFuncMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionFuncMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionFuncMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_path: _builtins.str,
                 mount_resource: _builtins.str,
                 mount_share_path: _builtins.str,
                 mount_type: _builtins.str,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str local_mount_path: Specifies the function access path.
               
               <a name="function_custom_image"></a>
               The `custom_image` block supports:
        :param _builtins.str mount_resource: Specifies the ID of the mounted resource (corresponding cloud service).
        :param _builtins.str mount_share_path: Specifies the remote mount path, e.g. **192.168.0.12:/data**.
        :param _builtins.str mount_type: Specifies the mount type.
               + **sfs**
               + **sfsTurbo**
               + **ecs**
        :param _builtins.str status: The mount status.
        """
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_resource", mount_resource)
        pulumi.set(__self__, "mount_share_path", mount_share_path)
        pulumi.set(__self__, "mount_type", mount_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> _builtins.str:
        """
        Specifies the function access path.

        <a name="function_custom_image"></a>
        The `custom_image` block supports:
        """
        return pulumi.get(self, "local_mount_path")

    @_builtins.property
    @pulumi.getter(name="mountResource")
    def mount_resource(self) -> _builtins.str:
        """
        Specifies the ID of the mounted resource (corresponding cloud service).
        """
        return pulumi.get(self, "mount_resource")

    @_builtins.property
    @pulumi.getter(name="mountSharePath")
    def mount_share_path(self) -> _builtins.str:
        """
        Specifies the remote mount path, e.g. **192.168.0.12:/data**.
        """
        return pulumi.get(self, "mount_share_path")

    @_builtins.property
    @pulumi.getter(name="mountType")
    def mount_type(self) -> _builtins.str:
        """
        Specifies the mount type.
        + **sfs**
        + **sfsTurbo**
        + **ecs**
        """
        return pulumi.get(self, "mount_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The mount status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FunctionNetworkController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePublicNetwork":
            suggest = "disable_public_network"
        elif key == "triggerAccessVpcs":
            suggest = "trigger_access_vpcs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionNetworkController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionNetworkController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionNetworkController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_public_network: Optional[_builtins.bool] = None,
                 trigger_access_vpcs: Optional[Sequence['outputs.FunctionNetworkControllerTriggerAccessVpc']] = None):
        """
        :param _builtins.bool disable_public_network: Specifies whether to disable the public network access.
               
               <a name="function_network_controller_trigger_access_vpcs"></a>
               The `trigger_access_vpcs` block supports:
        :param Sequence['FunctionNetworkControllerTriggerAccessVpcArgs'] trigger_access_vpcs: Specifies the configuration of the VPCs that can trigger the function.  
               The trigger_access_vpcs structure is documented below.
        """
        if disable_public_network is not None:
            pulumi.set(__self__, "disable_public_network", disable_public_network)
        if trigger_access_vpcs is not None:
            pulumi.set(__self__, "trigger_access_vpcs", trigger_access_vpcs)

    @_builtins.property
    @pulumi.getter(name="disablePublicNetwork")
    def disable_public_network(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to disable the public network access.

        <a name="function_network_controller_trigger_access_vpcs"></a>
        The `trigger_access_vpcs` block supports:
        """
        return pulumi.get(self, "disable_public_network")

    @_builtins.property
    @pulumi.getter(name="triggerAccessVpcs")
    def trigger_access_vpcs(self) -> Optional[Sequence['outputs.FunctionNetworkControllerTriggerAccessVpc']]:
        """
        Specifies the configuration of the VPCs that can trigger the function.  
        The trigger_access_vpcs structure is documented below.
        """
        return pulumi.get(self, "trigger_access_vpcs")


@pulumi.output_type
class FunctionNetworkControllerTriggerAccessVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"
        elif key == "vpcName":
            suggest = "vpc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionNetworkControllerTriggerAccessVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionNetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionNetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: Optional[_builtins.str] = None,
                 vpc_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str vpc_id: Specifies the ID of the VPC that can trigger the function.
        :param _builtins.str vpc_name: Specifies the name of the VPC that can trigger the function.
        """
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class FunctionReservedInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qualifierName":
            suggest = "qualifier_name"
        elif key == "qualifierType":
            suggest = "qualifier_type"
        elif key == "idleMode":
            suggest = "idle_mode"
        elif key == "tacticsConfig":
            suggest = "tactics_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionReservedInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionReservedInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionReservedInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.int,
                 qualifier_name: _builtins.str,
                 qualifier_type: _builtins.str,
                 idle_mode: Optional[_builtins.bool] = None,
                 tactics_config: Optional['outputs.FunctionReservedInstanceTacticsConfig'] = None):
        """
        :param _builtins.int count: Specifies the number of reserved instance to which the policy belongs.  
               The valid value is range from `0` to `1,000`.
               
               > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.
        :param _builtins.str qualifier_name: Specifies the version name or alias name.
        :param _builtins.str qualifier_type: Specifies the qualifier type of reserved instance.  
               The valid values are as follows:
               + **version**
               + **alias**
               
               > Reserved instances cannot be configured for both a function alias and the corresponding version.
               <br>For example, if the alias of the `latest` version is `1.0` and reserved instances have been configured for this
               version, no more instances can be configured for alias `1.0`.
        :param _builtins.bool idle_mode: Specifies whether to enable the idle mode.  
               Defaults to **false**.
               If this parameter is enabled, reserved instances are initialized and the mode change needs some time to take effect.
               You will still be billed at the price of reserved instances for non-idle mode in this period.
        :param 'FunctionReservedInstanceTacticsConfigArgs' tactics_config: Specifies the auto scaling policies for reserved instance.  
               The tactics_config structure is documented below.
               
               <a name="function_reserved_instances_tactics_config"></a>
               The `tactics_config` block supports:
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "qualifier_name", qualifier_name)
        pulumi.set(__self__, "qualifier_type", qualifier_type)
        if idle_mode is not None:
            pulumi.set(__self__, "idle_mode", idle_mode)
        if tactics_config is not None:
            pulumi.set(__self__, "tactics_config", tactics_config)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of reserved instance to which the policy belongs.  
        The valid value is range from `0` to `1,000`.

        > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="qualifierName")
    def qualifier_name(self) -> _builtins.str:
        """
        Specifies the version name or alias name.
        """
        return pulumi.get(self, "qualifier_name")

    @_builtins.property
    @pulumi.getter(name="qualifierType")
    def qualifier_type(self) -> _builtins.str:
        """
        Specifies the qualifier type of reserved instance.  
        The valid values are as follows:
        + **version**
        + **alias**

        > Reserved instances cannot be configured for both a function alias and the corresponding version.
        <br>For example, if the alias of the `latest` version is `1.0` and reserved instances have been configured for this
        version, no more instances can be configured for alias `1.0`.
        """
        return pulumi.get(self, "qualifier_type")

    @_builtins.property
    @pulumi.getter(name="idleMode")
    def idle_mode(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the idle mode.  
        Defaults to **false**.
        If this parameter is enabled, reserved instances are initialized and the mode change needs some time to take effect.
        You will still be billed at the price of reserved instances for non-idle mode in this period.
        """
        return pulumi.get(self, "idle_mode")

    @_builtins.property
    @pulumi.getter(name="tacticsConfig")
    def tactics_config(self) -> Optional['outputs.FunctionReservedInstanceTacticsConfig']:
        """
        Specifies the auto scaling policies for reserved instance.  
        The tactics_config structure is documented below.

        <a name="function_reserved_instances_tactics_config"></a>
        The `tactics_config` block supports:
        """
        return pulumi.get(self, "tactics_config")


@pulumi.output_type
class FunctionReservedInstanceTacticsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronConfigs":
            suggest = "cron_configs"
        elif key == "metricConfigs":
            suggest = "metric_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionReservedInstanceTacticsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionReservedInstanceTacticsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionReservedInstanceTacticsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_configs: Optional[Sequence['outputs.FunctionReservedInstanceTacticsConfigCronConfig']] = None,
                 metric_configs: Optional[Sequence['outputs.FunctionReservedInstanceTacticsConfigMetricConfig']] = None):
        """
        :param Sequence['FunctionReservedInstanceTacticsConfigCronConfigArgs'] cron_configs: Specifies the list of scheduled policy configurations.  
               The cron_configs structure is documented below.
        :param Sequence['FunctionReservedInstanceTacticsConfigMetricConfigArgs'] metric_configs: Specifies the list of metric policy configurations.  
               The metric_configs structure is documented below.
               
               > Submit a service ticket to open this function (metric policy), for the way please refer to
               the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html).
               
               <a name="function_reserved_instances_tactics_config_cron_configs"></a>
               The `cron_configs` block supports:
        """
        if cron_configs is not None:
            pulumi.set(__self__, "cron_configs", cron_configs)
        if metric_configs is not None:
            pulumi.set(__self__, "metric_configs", metric_configs)

    @_builtins.property
    @pulumi.getter(name="cronConfigs")
    def cron_configs(self) -> Optional[Sequence['outputs.FunctionReservedInstanceTacticsConfigCronConfig']]:
        """
        Specifies the list of scheduled policy configurations.  
        The cron_configs structure is documented below.
        """
        return pulumi.get(self, "cron_configs")

    @_builtins.property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Optional[Sequence['outputs.FunctionReservedInstanceTacticsConfigMetricConfig']]:
        """
        Specifies the list of metric policy configurations.  
        The metric_configs structure is documented below.

        > Submit a service ticket to open this function (metric policy), for the way please refer to
        the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html).

        <a name="function_reserved_instances_tactics_config_cron_configs"></a>
        The `cron_configs` block supports:
        """
        return pulumi.get(self, "metric_configs")


@pulumi.output_type
class FunctionReservedInstanceTacticsConfigCronConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredTime":
            suggest = "expired_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionReservedInstanceTacticsConfigCronConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.int,
                 cron: _builtins.str,
                 expired_time: _builtins.int,
                 name: _builtins.str,
                 start_time: _builtins.int):
        """
        :param _builtins.int count: Specifies the number of reserved instance to which the policy belongs.  
               The valid value is range from `0` to `1,000`.
               
               > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.
        :param _builtins.str cron: Specifies the cron expression.  
               For the syntax, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-functiongraph/functiongraph_01_0908.html).
        :param _builtins.int expired_time: Specifies the expiration timestamp of the policy. The unit is `s`, e.g. **1740560074**.
               
               <a name="function_reserved_instances_tactics_metric_configs"></a>
               The `metric_configs` block supports:
        :param _builtins.str name: Specifies the name of metric policy.  
               The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
               allowed. The name must start with a letter and ending with a letter or digit.
        :param _builtins.int start_time: Specifies the effective timestamp of policy. The unit is `s`, e.g. **1740560074**.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cron", cron)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of reserved instance to which the policy belongs.  
        The valid value is range from `0` to `1,000`.

        > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> _builtins.str:
        """
        Specifies the cron expression.  
        For the syntax, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-functiongraph/functiongraph_01_0908.html).
        """
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> _builtins.int:
        """
        Specifies the expiration timestamp of the policy. The unit is `s`, e.g. **1740560074**.

        <a name="function_reserved_instances_tactics_metric_configs"></a>
        The `metric_configs` block supports:
        """
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of metric policy.  
        The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
        allowed. The name must start with a letter and ending with a letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Specifies the effective timestamp of policy. The unit is `s`, e.g. **1740560074**.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class FunctionReservedInstanceTacticsConfigMetricConfig(dict):
    def __init__(__self__, *,
                 min: _builtins.int,
                 name: _builtins.str,
                 threshold: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int min: Specifies the minimun of traffic.  
               The valid value is range from `0` to `1,000`.
               
               > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.
               
               <a name="function_network_controller"></a>
               The `network_controller` block supports:
        :param _builtins.str name: Specifies the name of metric policy.  
               The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
               allowed. The name must start with a letter and ending with a letter or digit.
        :param _builtins.int threshold: Specifies the metric policy threshold.  
               The valid value is range from `1` to `99`.
        :param _builtins.str type: Specifies the type of metric policy.  
               The valid value is as follows:
               + **Concurrency**: Reserved instance usage.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        Specifies the minimun of traffic.  
        The valid value is range from `0` to `1,000`.

        > The number of reserved instances must be greater than or equal to the number of reserved instances in the basic configuration.

        <a name="function_network_controller"></a>
        The `network_controller` block supports:
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of metric policy.  
        The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
        allowed. The name must start with a letter and ending with a letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Specifies the metric policy threshold.  
        The valid value is range from `1` to `99`.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of metric policy.  
        The valid value is as follows:
        + **Concurrency**: Reserved instance usage.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionV2CustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2CustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2CustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2CustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: _builtins.str,
                 args: Optional[_builtins.str] = None,
                 command: Optional[_builtins.str] = None,
                 user_group_id: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None,
                 working_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: The URL of SWR image.
        :param _builtins.str args: The command line arguments used to start the SWR image.
        :param _builtins.str command: The startup commands of the SWR image.
        :param _builtins.str user_group_id: The user group ID that used to run SWR image.
        :param _builtins.str user_id: The user ID that used to run SWR image.
        :param _builtins.str working_dir: The working directory of the SWR image.
        """
        pulumi.set(__self__, "url", url)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The URL of SWR image.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[_builtins.str]:
        """
        The command line arguments used to start the SWR image.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[_builtins.str]:
        """
        The startup commands of the SWR image.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[_builtins.str]:
        """
        The user group ID that used to run SWR image.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The user ID that used to run SWR image.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[_builtins.str]:
        """
        The working directory of the SWR image.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class FunctionV2FuncMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountPath":
            suggest = "local_mount_path"
        elif key == "mountResource":
            suggest = "mount_resource"
        elif key == "mountSharePath":
            suggest = "mount_share_path"
        elif key == "mountType":
            suggest = "mount_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2FuncMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2FuncMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2FuncMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_path: _builtins.str,
                 mount_resource: _builtins.str,
                 mount_share_path: _builtins.str,
                 mount_type: _builtins.str,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str local_mount_path: The function access path.
        :param _builtins.str mount_resource: The ID of the mounted resource (corresponding cloud service).
        :param _builtins.str mount_share_path: The remote mount path.
        :param _builtins.str mount_type: The mount type.
        :param _builtins.str status: The mount status.
        """
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_resource", mount_resource)
        pulumi.set(__self__, "mount_share_path", mount_share_path)
        pulumi.set(__self__, "mount_type", mount_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> _builtins.str:
        """
        The function access path.
        """
        return pulumi.get(self, "local_mount_path")

    @_builtins.property
    @pulumi.getter(name="mountResource")
    def mount_resource(self) -> _builtins.str:
        """
        The ID of the mounted resource (corresponding cloud service).
        """
        return pulumi.get(self, "mount_resource")

    @_builtins.property
    @pulumi.getter(name="mountSharePath")
    def mount_share_path(self) -> _builtins.str:
        """
        The remote mount path.
        """
        return pulumi.get(self, "mount_share_path")

    @_builtins.property
    @pulumi.getter(name="mountType")
    def mount_type(self) -> _builtins.str:
        """
        The mount type.
        """
        return pulumi.get(self, "mount_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The mount status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FunctionV2NetworkController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePublicNetwork":
            suggest = "disable_public_network"
        elif key == "triggerAccessVpcs":
            suggest = "trigger_access_vpcs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2NetworkController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2NetworkController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2NetworkController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_public_network: Optional[_builtins.bool] = None,
                 trigger_access_vpcs: Optional[Sequence['outputs.FunctionV2NetworkControllerTriggerAccessVpc']] = None):
        """
        :param _builtins.bool disable_public_network: Whether to disable the public network access.
        :param Sequence['FunctionV2NetworkControllerTriggerAccessVpcArgs'] trigger_access_vpcs: The configuration of the VPCs that can trigger the function.
        """
        if disable_public_network is not None:
            pulumi.set(__self__, "disable_public_network", disable_public_network)
        if trigger_access_vpcs is not None:
            pulumi.set(__self__, "trigger_access_vpcs", trigger_access_vpcs)

    @_builtins.property
    @pulumi.getter(name="disablePublicNetwork")
    def disable_public_network(self) -> Optional[_builtins.bool]:
        """
        Whether to disable the public network access.
        """
        return pulumi.get(self, "disable_public_network")

    @_builtins.property
    @pulumi.getter(name="triggerAccessVpcs")
    def trigger_access_vpcs(self) -> Optional[Sequence['outputs.FunctionV2NetworkControllerTriggerAccessVpc']]:
        """
        The configuration of the VPCs that can trigger the function.
        """
        return pulumi.get(self, "trigger_access_vpcs")


@pulumi.output_type
class FunctionV2NetworkControllerTriggerAccessVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"
        elif key == "vpcName":
            suggest = "vpc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2NetworkControllerTriggerAccessVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2NetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2NetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: Optional[_builtins.str] = None,
                 vpc_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str vpc_id: The ID of the VPC that can trigger the function.
        :param _builtins.str vpc_name: The ID of the VPC that can trigger the function.
        """
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class FunctionV2ReservedInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qualifierName":
            suggest = "qualifier_name"
        elif key == "qualifierType":
            suggest = "qualifier_type"
        elif key == "idleMode":
            suggest = "idle_mode"
        elif key == "tacticsConfig":
            suggest = "tactics_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2ReservedInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2ReservedInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2ReservedInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.int,
                 qualifier_name: _builtins.str,
                 qualifier_type: _builtins.str,
                 idle_mode: Optional[_builtins.bool] = None,
                 tactics_config: Optional['outputs.FunctionV2ReservedInstanceTacticsConfig'] = None):
        """
        :param _builtins.int count: The number of reserved instance.
        :param _builtins.str qualifier_name: The version name or alias name.
        :param _builtins.str qualifier_type: The qualifier type of reserved instance.
        :param _builtins.bool idle_mode: Whether to enable the idle mode.
        :param 'FunctionV2ReservedInstanceTacticsConfigArgs' tactics_config: The auto scaling policies for reserved instance.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "qualifier_name", qualifier_name)
        pulumi.set(__self__, "qualifier_type", qualifier_type)
        if idle_mode is not None:
            pulumi.set(__self__, "idle_mode", idle_mode)
        if tactics_config is not None:
            pulumi.set(__self__, "tactics_config", tactics_config)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of reserved instance.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="qualifierName")
    def qualifier_name(self) -> _builtins.str:
        """
        The version name or alias name.
        """
        return pulumi.get(self, "qualifier_name")

    @_builtins.property
    @pulumi.getter(name="qualifierType")
    def qualifier_type(self) -> _builtins.str:
        """
        The qualifier type of reserved instance.
        """
        return pulumi.get(self, "qualifier_type")

    @_builtins.property
    @pulumi.getter(name="idleMode")
    def idle_mode(self) -> Optional[_builtins.bool]:
        """
        Whether to enable the idle mode.
        """
        return pulumi.get(self, "idle_mode")

    @_builtins.property
    @pulumi.getter(name="tacticsConfig")
    def tactics_config(self) -> Optional['outputs.FunctionV2ReservedInstanceTacticsConfig']:
        """
        The auto scaling policies for reserved instance.
        """
        return pulumi.get(self, "tactics_config")


@pulumi.output_type
class FunctionV2ReservedInstanceTacticsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronConfigs":
            suggest = "cron_configs"
        elif key == "metricConfigs":
            suggest = "metric_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2ReservedInstanceTacticsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2ReservedInstanceTacticsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2ReservedInstanceTacticsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_configs: Optional[Sequence['outputs.FunctionV2ReservedInstanceTacticsConfigCronConfig']] = None,
                 metric_configs: Optional[Sequence['outputs.FunctionV2ReservedInstanceTacticsConfigMetricConfig']] = None):
        """
        :param Sequence['FunctionV2ReservedInstanceTacticsConfigCronConfigArgs'] cron_configs: The list of scheduled policy configurations.
        :param Sequence['FunctionV2ReservedInstanceTacticsConfigMetricConfigArgs'] metric_configs: The list of metric policy configurations.
        """
        if cron_configs is not None:
            pulumi.set(__self__, "cron_configs", cron_configs)
        if metric_configs is not None:
            pulumi.set(__self__, "metric_configs", metric_configs)

    @_builtins.property
    @pulumi.getter(name="cronConfigs")
    def cron_configs(self) -> Optional[Sequence['outputs.FunctionV2ReservedInstanceTacticsConfigCronConfig']]:
        """
        The list of scheduled policy configurations.
        """
        return pulumi.get(self, "cron_configs")

    @_builtins.property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Optional[Sequence['outputs.FunctionV2ReservedInstanceTacticsConfigMetricConfig']]:
        """
        The list of metric policy configurations.
        """
        return pulumi.get(self, "metric_configs")


@pulumi.output_type
class FunctionV2ReservedInstanceTacticsConfigCronConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredTime":
            suggest = "expired_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2ReservedInstanceTacticsConfigCronConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2ReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2ReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.int,
                 cron: _builtins.str,
                 expired_time: _builtins.int,
                 name: _builtins.str,
                 start_time: _builtins.int):
        """
        :param _builtins.int count: The number of reserved instance to which the policy belongs.
        :param _builtins.str cron: The cron expression.
        :param _builtins.int expired_time: The expiration timestamp of the policy.
        :param _builtins.str name: The name of scheduled policy configuration.
        :param _builtins.int start_time: The effective timestamp of policy.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cron", cron)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of reserved instance to which the policy belongs.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> _builtins.str:
        """
        The cron expression.
        """
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> _builtins.int:
        """
        The expiration timestamp of the policy.
        """
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of scheduled policy configuration.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        The effective timestamp of policy.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class FunctionV2ReservedInstanceTacticsConfigMetricConfig(dict):
    def __init__(__self__, *,
                 min: _builtins.int,
                 name: _builtins.str,
                 threshold: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int min: The minimun of traffic.
        :param _builtins.str name: The name of metric policy.
        :param _builtins.int threshold: The metric policy threshold.
        :param _builtins.str type: The type of metric policy.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The minimun of traffic.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of metric policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        The metric policy threshold.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of metric policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionV2Version(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 aliases: Optional['outputs.FunctionV2VersionAliases'] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The version name.
        :param 'FunctionV2VersionAliasesArgs' aliases: The aliases management for specified version.
        :param _builtins.str description: The description of the version.
        """
        pulumi.set(__self__, "name", name)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The version name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional['outputs.FunctionV2VersionAliases']:
        """
        The aliases management for specified version.
        """
        return pulumi.get(self, "aliases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the version.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class FunctionV2VersionAliases(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVersionStrategy":
            suggest = "additional_version_strategy"
        elif key == "additionalVersionWeights":
            suggest = "additional_version_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionV2VersionAliases. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionV2VersionAliases.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionV2VersionAliases.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 additional_version_strategy: Optional[_builtins.str] = None,
                 additional_version_weights: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The name of the version alias.
        :param _builtins.str additional_version_strategy: The description of the version alias.
        :param _builtins.str additional_version_weights: The percentage grayscale configuration of the version alias.
        :param _builtins.str description: The description of the version alias.
        """
        pulumi.set(__self__, "name", name)
        if additional_version_strategy is not None:
            pulumi.set(__self__, "additional_version_strategy", additional_version_strategy)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the version alias.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="additionalVersionStrategy")
    def additional_version_strategy(self) -> Optional[_builtins.str]:
        """
        The description of the version alias.
        """
        return pulumi.get(self, "additional_version_strategy")

    @_builtins.property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[_builtins.str]:
        """
        The percentage grayscale configuration of the version alias.
        """
        return pulumi.get(self, "additional_version_weights")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the version alias.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class FunctionVersion(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 aliases: Optional['outputs.FunctionVersionAliases'] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of metric policy.  
               The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
               allowed. The name must start with a letter and ending with a letter or digit.
        :param 'FunctionVersionAliasesArgs' aliases: Specifies the aliases management for specified version.  
               The aliases structure is documented below.
               
               > 1. A version can configure at most **one** alias.
               <br>2. A function can have a maximum of `10` aliases.
               
               <a name="function_versions_aliases"></a>
               The `aliases` block supports:
        :param _builtins.str description: Specifies the description of the version alias.
        """
        pulumi.set(__self__, "name", name)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of metric policy.  
        The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
        allowed. The name must start with a letter and ending with a letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional['outputs.FunctionVersionAliases']:
        """
        Specifies the aliases management for specified version.  
        The aliases structure is documented below.

        > 1. A version can configure at most **one** alias.
        <br>2. A function can have a maximum of `10` aliases.

        <a name="function_versions_aliases"></a>
        The `aliases` block supports:
        """
        return pulumi.get(self, "aliases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the version alias.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class FunctionVersionAliases(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVersionStrategy":
            suggest = "additional_version_strategy"
        elif key == "additionalVersionWeights":
            suggest = "additional_version_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionVersionAliases. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionVersionAliases.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionVersionAliases.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 additional_version_strategy: Optional[_builtins.str] = None,
                 additional_version_weights: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of metric policy.  
               The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
               allowed. The name must start with a letter and ending with a letter or digit.
        :param _builtins.str additional_version_strategy: Specifies the rule grayscale configuration of the version
               alias, in JSON format.
               
               > Only one of `additional_version_weights` and `additional_version_strategy` can be configured.
               
               <a name="function_reserved_instances"></a>
               The `reserved_instances` block supports:
        :param _builtins.str additional_version_weights: Specifies the percentage grayscale configuration of the version
               alias, in JSON format.
        :param _builtins.str description: Specifies the description of the version alias.
        """
        pulumi.set(__self__, "name", name)
        if additional_version_strategy is not None:
            pulumi.set(__self__, "additional_version_strategy", additional_version_strategy)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of metric policy.  
        The valid length is limited from `1` to `60` characters, only letters, digits, hyphens (-), and underscores (_) are
        allowed. The name must start with a letter and ending with a letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="additionalVersionStrategy")
    def additional_version_strategy(self) -> Optional[_builtins.str]:
        """
        Specifies the rule grayscale configuration of the version
        alias, in JSON format.

        > Only one of `additional_version_weights` and `additional_version_strategy` can be configured.

        <a name="function_reserved_instances"></a>
        The `reserved_instances` block supports:
        """
        return pulumi.get(self, "additional_version_strategy")

    @_builtins.property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[_builtins.str]:
        """
        Specifies the percentage grayscale configuration of the version
        alias, in JSON format.
        """
        return pulumi.get(self, "additional_version_weights")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the version alias.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class TriggerApig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiName":
            suggest = "api_name"
        elif key == "envName":
            suggest = "env_name"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "securityAuthentication":
            suggest = "security_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerApig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerApig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerApig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_name: _builtins.str,
                 env_name: _builtins.str,
                 group_id: _builtins.str,
                 instance_id: Optional[_builtins.str] = None,
                 request_protocol: Optional[_builtins.str] = None,
                 security_authentication: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str api_name: Specifies the API name. Changing this will create a new trigger resource.
        :param _builtins.str env_name: Specifies the API environment name.
               Changing this will create a new trigger resource.
        :param _builtins.str group_id: Specifies the ID of the APIG group to which the API belongs.
               Changing this will create a new trigger resource.
        :param _builtins.str instance_id: Specifies the ID of the APIG dedicated instance to which the API belongs.
               Required if the `type` is `DEDICATEDGATEWAY`. Changing this will create a new trigger resource.
        :param _builtins.str request_protocol: Specifies the request protocol of the API. The valid value are
               **HTTP** and **HTTPS**. Default to **HTTPS**. Changing this will create a new trigger resource.
        :param _builtins.str security_authentication: Specifies the security authentication mode. The valid values
               are **NONE**, **APP** and **IAM**, default to **IAM**. Changing this will create a new trigger resource.
        :param _builtins.int timeout: Specifies the timeout for request sending. The valid value is range form
               `1` to `60,000`, default to `5,000`. Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_lts"></a>
               The `lts` block supports:
        """
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "group_id", group_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if security_authentication is not None:
            pulumi.set(__self__, "security_authentication", security_authentication)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> _builtins.str:
        """
        Specifies the API name. Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        Specifies the API environment name.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the ID of the APIG group to which the API belongs.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the APIG dedicated instance to which the API belongs.
        Required if the `type` is `DEDICATEDGATEWAY`. Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the request protocol of the API. The valid value are
        **HTTP** and **HTTPS**. Default to **HTTPS**. Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> Optional[_builtins.str]:
        """
        Specifies the security authentication mode. The valid values
        are **NONE**, **APP** and **IAM**, default to **IAM**. Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "security_authentication")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the timeout for request sending. The valid value is range form
        `1` to `60,000`, default to `5,000`. Changing this will create a new trigger resource.

        <a name="fgs_trigger_lts"></a>
        The `lts` block supports:
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class TriggerDis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxFetchBytes":
            suggest = "max_fetch_bytes"
        elif key == "pullPeriod":
            suggest = "pull_period"
        elif key == "serialEnable":
            suggest = "serial_enable"
        elif key == "startingPosition":
            suggest = "starting_position"
        elif key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerDis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerDis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerDis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_fetch_bytes: _builtins.int,
                 pull_period: _builtins.int,
                 serial_enable: _builtins.bool,
                 starting_position: _builtins.str,
                 stream_name: _builtins.str):
        """
        :param _builtins.int max_fetch_bytes: Specifies the maximum volume of data that can be obtained for a single
               request, in Byte. Only the records with a size smaller than this value can be obtained.
               The valid value is range from `1,024` to `4,194,304`.
               Changing this will create a new trigger resource.
        :param _builtins.int pull_period: Specifies the interval at which data is pulled from the specified stream.
               The valid value is range from `2` to `60,000`.
               Changing this will create a new trigger resource.
        :param _builtins.bool serial_enable: Specifies the determines whether to pull data only after the data pulled
               in the last period has been processed.
               Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_kafka"></a>
               The `kafka` block supports:
        :param _builtins.str starting_position: Specifies the type of starting position for DIS queue.
               The valid values are as follows:
               + **TRIM_HORIZON**: Starts reading from the earliest data stored in the partitions.
               + **LATEST**: Starts reading from the latest data stored in the partitions.
               Changing this will create a new trigger resource.
        :param _builtins.str stream_name: Specifies the name of the DIS stream resource.
               Changing this will create a new trigger resource.
        """
        pulumi.set(__self__, "max_fetch_bytes", max_fetch_bytes)
        pulumi.set(__self__, "pull_period", pull_period)
        pulumi.set(__self__, "serial_enable", serial_enable)
        pulumi.set(__self__, "starting_position", starting_position)
        pulumi.set(__self__, "stream_name", stream_name)

    @_builtins.property
    @pulumi.getter(name="maxFetchBytes")
    def max_fetch_bytes(self) -> _builtins.int:
        """
        Specifies the maximum volume of data that can be obtained for a single
        request, in Byte. Only the records with a size smaller than this value can be obtained.
        The valid value is range from `1,024` to `4,194,304`.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "max_fetch_bytes")

    @_builtins.property
    @pulumi.getter(name="pullPeriod")
    def pull_period(self) -> _builtins.int:
        """
        Specifies the interval at which data is pulled from the specified stream.
        The valid value is range from `2` to `60,000`.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "pull_period")

    @_builtins.property
    @pulumi.getter(name="serialEnable")
    def serial_enable(self) -> _builtins.bool:
        """
        Specifies the determines whether to pull data only after the data pulled
        in the last period has been processed.
        Changing this will create a new trigger resource.

        <a name="fgs_trigger_kafka"></a>
        The `kafka` block supports:
        """
        return pulumi.get(self, "serial_enable")

    @_builtins.property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> _builtins.str:
        """
        Specifies the type of starting position for DIS queue.
        The valid values are as follows:
        + **TRIM_HORIZON**: Starts reading from the earliest data stored in the partitions.
        + **LATEST**: Starts reading from the latest data stored in the partitions.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "starting_position")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> _builtins.str:
        """
        Specifies the name of the DIS stream resource.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class TriggerKafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "topicIds":
            suggest = "topic_ids"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerKafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerKafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerKafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 topic_ids: Sequence[_builtins.str],
                 batch_size: Optional[_builtins.int] = None,
                 password: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str instance_id: Specifies the ID of the APIG dedicated instance to which the API belongs.
               Required if the `type` is `DEDICATEDGATEWAY`. Changing this will create a new trigger resource.
        :param Sequence[_builtins.str] topic_ids: Specifies one or more topic IDs of DMS kafka instance.
               Changing this will create a new trigger resource.
        :param _builtins.int batch_size: Specifies the The number of messages consumed from the topic each time.
               The valid value is range from `1` to `1,000`. Defaults to `100`.
               Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_apig"></a>
               The `apig` block supports:
        :param _builtins.str password: Specifies the password for logging in to the Kafka Manager.
               Changing this will create a new trigger resource.
        :param _builtins.str user_name: Specifies the username for logging in to the Kafka Manager.
               Changing this will create a new trigger resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "topic_ids", topic_ids)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the APIG dedicated instance to which the API belongs.
        Required if the `type` is `DEDICATEDGATEWAY`. Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="topicIds")
    def topic_ids(self) -> Sequence[_builtins.str]:
        """
        Specifies one or more topic IDs of DMS kafka instance.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "topic_ids")

    @_builtins.property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[_builtins.int]:
        """
        Specifies the The number of messages consumed from the topic each time.
        The valid value is range from `1` to `1,000`. Defaults to `100`.
        Changing this will create a new trigger resource.

        <a name="fgs_trigger_apig"></a>
        The `apig` block supports:
        """
        return pulumi.get(self, "batch_size")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Specifies the password for logging in to the Kafka Manager.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the username for logging in to the Kafka Manager.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TriggerLts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logTopicId":
            suggest = "log_topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerLts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerLts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerLts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: _builtins.str,
                 log_topic_id: _builtins.str):
        """
        :param _builtins.str log_group_id: Specifies the log group ID.
               Changing this will create a new trigger resource.
        :param _builtins.str log_topic_id: Specifies the log stream ID.
               Changing this will create a new trigger resource.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_topic_id", log_topic_id)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        Specifies the log group ID.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> _builtins.str:
        """
        Specifies the log stream ID.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "log_topic_id")


@pulumi.output_type
class TriggerObs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "eventNotificationName":
            suggest = "event_notification_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerObs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerObs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerObs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: _builtins.str,
                 event_notification_name: _builtins.str,
                 events: Sequence[_builtins.str],
                 prefix: Optional[_builtins.str] = None,
                 suffix: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket_name: Specifies the OBS bucket name.
               Changing this will create a new trigger resource.
        :param _builtins.str event_notification_name: Specifies the event notification name.
               Changing this will create a new trigger resource.
        :param Sequence[_builtins.str] events: Specifies the events that can trigger functions.
               Changing this will create a new trigger resource.
               The valid values are as follows:
               + **ObjectCreated**, **Put**, **Post**, **Copy** and **CompleteMultipartUpload**.
               + **ObjectRemoved**, **Delete** and **DeleteMarkerCreated**.
               
               > **NOTE:** If **ObjectCreated** is configured, **Put**, **Post**, **Copy** and **CompleteMultipartUpload** cannot
               be configured. If **ObjectRemoved** is configured, **Delete** and **DeleteMarkerCreated** cannot be configured.
        :param _builtins.str prefix: Specifies the prefix to limit notifications to objects beginning with this keyword.
               Changing this will create a new trigger resource.
        :param _builtins.str suffix: Specifies the suffix to limit notifications to objects ending with this keyword.
               Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_smn"></a>
               The `smn` block supports:
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "event_notification_name", event_notification_name)
        pulumi.set(__self__, "events", events)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        Specifies the OBS bucket name.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="eventNotificationName")
    def event_notification_name(self) -> _builtins.str:
        """
        Specifies the event notification name.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "event_notification_name")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Sequence[_builtins.str]:
        """
        Specifies the events that can trigger functions.
        Changing this will create a new trigger resource.
        The valid values are as follows:
        + **ObjectCreated**, **Put**, **Post**, **Copy** and **CompleteMultipartUpload**.
        + **ObjectRemoved**, **Delete** and **DeleteMarkerCreated**.

        > **NOTE:** If **ObjectCreated** is configured, **Put**, **Post**, **Copy** and **CompleteMultipartUpload** cannot
        be configured. If **ObjectRemoved** is configured, **Delete** and **DeleteMarkerCreated** cannot be configured.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix to limit notifications to objects beginning with this keyword.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def suffix(self) -> Optional[_builtins.str]:
        """
        Specifies the suffix to limit notifications to objects ending with this keyword.
        Changing this will create a new trigger resource.

        <a name="fgs_trigger_smn"></a>
        The `smn` block supports:
        """
        return pulumi.get(self, "suffix")


@pulumi.output_type
class TriggerSmn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicUrn":
            suggest = "topic_urn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerSmn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerSmn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerSmn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_urn: _builtins.str):
        """
        :param _builtins.str topic_urn: Specifies the Uniform Resource Name (URN) for SMN topic.
               Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_dis"></a>
               The `dis` block supports:
        """
        pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        """
        Specifies the Uniform Resource Name (URN) for SMN topic.
        Changing this will create a new trigger resource.

        <a name="fgs_trigger_dis"></a>
        The `dis` block supports:
        """
        return pulumi.get(self, "topic_urn")


@pulumi.output_type
class TriggerTimer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleType":
            suggest = "schedule_type"
        elif key == "additionalInformation":
            suggest = "additional_information"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerTimer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerTimer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerTimer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 schedule: _builtins.str,
                 schedule_type: _builtins.str,
                 additional_information: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the trigger name, which can contains of `1` to `64` characters.
               The name must start with a letter, only letters, digits, hyphens (-) and underscores (_) are allowed.
               Changing this will create a new trigger resource.
        :param _builtins.str schedule: Specifies the time schedule.
               For the rate type, schedule is composed of time and time unit.
               The time unit supports minutes (m), hours (h) and days (d).
               For the corn expression, please refer to the HuaweiCloud
               [document](https://support.huaweicloud.com/en-us/usermanual-functiongraph/functiongraph_01_0908.html).
               Changing this will create a new trigger resource.
        :param _builtins.str schedule_type: Specifies the type of the time schedule.
               The valid values are **Rate** and **Cron**.
               Changing this will create a new trigger resource.
        :param _builtins.str additional_information: Specifies the event used by the timer to trigger the function.
               Changing this will create a new trigger resource.
               
               <a name="fgs_trigger_obs"></a>
               The `obs` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "schedule_type", schedule_type)
        if additional_information is not None:
            pulumi.set(__self__, "additional_information", additional_information)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the trigger name, which can contains of `1` to `64` characters.
        The name must start with a letter, only letters, digits, hyphens (-) and underscores (_) are allowed.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        Specifies the time schedule.
        For the rate type, schedule is composed of time and time unit.
        The time unit supports minutes (m), hours (h) and days (d).
        For the corn expression, please refer to the HuaweiCloud
        [document](https://support.huaweicloud.com/en-us/usermanual-functiongraph/functiongraph_01_0908.html).
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> _builtins.str:
        """
        Specifies the type of the time schedule.
        The valid values are **Rate** and **Cron**.
        Changing this will create a new trigger resource.
        """
        return pulumi.get(self, "schedule_type")

    @_builtins.property
    @pulumi.getter(name="additionalInformation")
    def additional_information(self) -> Optional[_builtins.str]:
        """
        Specifies the event used by the timer to trigger the function.
        Changing this will create a new trigger resource.

        <a name="fgs_trigger_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "additional_information")


@pulumi.output_type
class GetApplicationTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 runtime: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str category: Specifies the category used to query the application templates.
        :param _builtins.str description: The description of template.
        :param _builtins.str id: The template ID.
        :param _builtins.str name: The template name.
        :param _builtins.str runtime: Specifies the runtime name used to query the application templates.  
               The valid values are as follows:
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Node.js16.17**
               + **Node.js18.15**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Python3.10**
               + **Java8**
               + **Java11**
               + **Go1.x**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **http**
               + **PHP7.3**
               + **Custom**
        :param _builtins.str type: The type of the function application.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category used to query the application templates.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the runtime name used to query the application templates.  
        The valid values are as follows:
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Node.js16.17**
        + **Node.js18.15**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Python3.10**
        + **Java8**
        + **Java11**
        + **Go1.x**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **http**
        + **PHP7.3**
        + **Custom**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the function application.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the application to be queried.
        :param _builtins.str id: The ID of application.
        :param _builtins.str name: Specifies the application name used to query specified application.
        :param _builtins.str status: Specifies the status of the application to be queried.  
               The valid values are as follows:
               + **success**: The application created successfully.
               + **repoFail**: The application repository creation failed.
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the application to be queried.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the application name used to query specified application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the application to be queried.  
        The valid values are as follows:
        + **success**: The application created successfully.
        + **repoFail**: The application repository creation failed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDependenciesPackageResult(dict):
    def __init__(__self__, *,
                 etag: _builtins.str,
                 file_name: _builtins.str,
                 id: _builtins.str,
                 link: _builtins.str,
                 name: _builtins.str,
                 owner: _builtins.str,
                 runtime: _builtins.str,
                 size: _builtins.int,
                 versions: Sequence['outputs.GetDependenciesPackageVersionResult']):
        """
        :param _builtins.str etag: The unique ID of the dependency package.
        :param _builtins.str file_name: The file name of the stored dependency package.
        :param _builtins.str id: The ID of the dependency package version.
        :param _builtins.str link: The OBS bucket path where the dependency package is located (FunctionGraph serivce side).
        :param _builtins.str name: Specifies the name of the dependency package.
        :param _builtins.str owner: The owner of the dependency package.
        :param _builtins.str runtime: Specifies the runtime of the dependency package.  
               The valid values are as follows:
               + **Java8**
               + **Java11**
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Node.js16.17**
               + **Node.js18.15**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Python3.10**
               + **Go1.x**
               + **C#(.NET Core 2.0)**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **Custom**
               + **PHP7.3**
               + **Cangjie1.0**
               + **http**
               + **Custom Image**
        :param _builtins.int size: The size of the dependency package.
        :param Sequence['GetDependenciesPackageVersionArgs'] versions: The list of the versions for the dependency package.
               The versions structure is documented below.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        The unique ID of the dependency package.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        The file name of the stored dependency package.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the dependency package version.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def link(self) -> _builtins.str:
        """
        The OBS bucket path where the dependency package is located (FunctionGraph serivce side).
        """
        return pulumi.get(self, "link")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the dependency package.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The owner of the dependency package.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the runtime of the dependency package.  
        The valid values are as follows:
        + **Java8**
        + **Java11**
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Node.js16.17**
        + **Node.js18.15**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Python3.10**
        + **Go1.x**
        + **C#(.NET Core 2.0)**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **Custom**
        + **PHP7.3**
        + **Cangjie1.0**
        + **http**
        + **Custom Image**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the dependency package.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetDependenciesPackageVersionResult']:
        """
        The list of the versions for the dependency package.
        The versions structure is documented below.
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetDependenciesPackageVersionResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str id: The ID of the dependency package version.
        :param _builtins.int version: The dependency package version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the dependency package version.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The dependency package version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDependencyVersionsVersionResult(dict):
    def __init__(__self__, *,
                 dependency_id: _builtins.str,
                 dependency_name: _builtins.str,
                 description: _builtins.str,
                 etag: _builtins.str,
                 id: _builtins.str,
                 link: _builtins.str,
                 owner: _builtins.str,
                 runtime: _builtins.str,
                 size: _builtins.int,
                 version: _builtins.int):
        """
        :param _builtins.str dependency_id: Specifies the ID of the dependency package to which the versions belong.
        :param _builtins.str dependency_name: The name of the dependency package corresponding to the version.
        :param _builtins.str description: The description of the dependency package version.
        :param _builtins.str etag: The unique ID of the dependency.
        :param _builtins.str id: The ID of the dependency package version.
        :param _builtins.str link: The OBS bucket path where the dependency package version is located.
        :param _builtins.str owner: The dependency owner, `public` indicates a public dependency.
        :param _builtins.str runtime: Specifies the runtime of the dependency package version.  
               The valid values are as follows:
               + **Java8**
               + **Java11**
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Go1.8**
               + **Go1.x**
               + **C#(.NET Core 2.0)**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **Custom**
               + **PHP 7.3**
               + **http**
        :param _builtins.int size: The size of the ZIP file used by the dependency package version, in bytes.
        :param _builtins.int version: Specifies the version of the dependency package.
        """
        pulumi.set(__self__, "dependency_id", dependency_id)
        pulumi.set(__self__, "dependency_name", dependency_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="dependencyId")
    def dependency_id(self) -> _builtins.str:
        """
        Specifies the ID of the dependency package to which the versions belong.
        """
        return pulumi.get(self, "dependency_id")

    @_builtins.property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> _builtins.str:
        """
        The name of the dependency package corresponding to the version.
        """
        return pulumi.get(self, "dependency_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the dependency package version.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        The unique ID of the dependency.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the dependency package version.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def link(self) -> _builtins.str:
        """
        The OBS bucket path where the dependency package version is located.
        """
        return pulumi.get(self, "link")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The dependency owner, `public` indicates a public dependency.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the runtime of the dependency package version.  
        The valid values are as follows:
        + **Java8**
        + **Java11**
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Go1.8**
        + **Go1.x**
        + **C#(.NET Core 2.0)**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **Custom**
        + **PHP 7.3**
        + **http**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the ZIP file used by the dependency package version, in bytes.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Specifies the version of the dependency package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFunctionEventsEventResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str id: The event ID.
        :param _builtins.str name: The event name.
        :param _builtins.str updated_at: The latest update time of the function event, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The event ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The event name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the function event, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFunctionTagsSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag.
        :param _builtins.str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag.
        :param _builtins.str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionTriggersTriggerResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 event_data: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the function trigger, in RFC3339 format.
        :param _builtins.str event_data: The detailed configuration of the function trigger.
        :param _builtins.str id: The ID of the function trigger.
        :param _builtins.str status: Specifies status of the function trigger.
               The valid values are as follows:
               + **ACTIVE**
               + **DISABLED**
        :param _builtins.str type: Specifies type of the function trigger.
               The valid values are as follows:
               + **TIMER**
               + **APIG**
               + **CTS**
               + **DDS**
               + **DMS**
               + **DIS**
               + **LTS**
               + **OBS**
               + **SMN**
               + **KAFKA**
               + **RABBITMQ**
               + **DEDICATEDGATEWAY**
               + **OPENSOURCEKAFKA**
               + **APIC**
               + **GAUSSMONGO**
               + **EVENTGRID**
               + **IOTDA**
        :param _builtins.str updated_at: The latest update time of the function trigger, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "event_data", event_data)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the function trigger, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="eventData")
    def event_data(self) -> _builtins.str:
        """
        The detailed configuration of the function trigger.
        """
        return pulumi.get(self, "event_data")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the function trigger.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies status of the function trigger.
        The valid values are as follows:
        + **ACTIVE**
        + **DISABLED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies type of the function trigger.
        The valid values are as follows:
        + **TIMER**
        + **APIG**
        + **CTS**
        + **DDS**
        + **DMS**
        + **DIS**
        + **LTS**
        + **OBS**
        + **SMN**
        + **KAFKA**
        + **RABBITMQ**
        + **DEDICATEDGATEWAY**
        + **OPENSOURCEKAFKA**
        + **APIC**
        + **GAUSSMONGO**
        + **EVENTGRID**
        + **IOTDA**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the function trigger, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 agency: _builtins.str,
                 app_agency: _builtins.str,
                 code_filename: _builtins.str,
                 code_type: _builtins.str,
                 code_url: _builtins.str,
                 description: _builtins.str,
                 encrypted_user_data: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 functiongraph_version: _builtins.str,
                 handler: _builtins.str,
                 initializer_handler: _builtins.str,
                 initializer_timeout: _builtins.int,
                 log_group_id: _builtins.str,
                 log_stream_id: _builtins.str,
                 max_instance_num: _builtins.str,
                 memory_size: _builtins.int,
                 name: _builtins.str,
                 network_id: _builtins.str,
                 package: _builtins.str,
                 runtime: _builtins.str,
                 timeout: _builtins.int,
                 urn: _builtins.str,
                 user_data: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str agency: The IAM agency name for the function configuration.
        :param _builtins.str app_agency: The IAM agency name for the function execution.
        :param _builtins.str code_filename: The name of the function file.
        :param _builtins.str code_type: The function code type.
               + **inline**: inline code.
               + **zip**: ZIP file.
               + **jar**: JAR file or java functions.
               + **obs**: function code stored in an OBS bucket.
        :param _builtins.str code_url: The code URL.
        :param _builtins.str description: The description of the function.
        :param _builtins.str encrypted_user_data: The custom user data (key/value pairs) defined to be encrypted for the function.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the functions belong.
        :param _builtins.str functiongraph_version: The functionGraph version.
        :param _builtins.str handler: The entry point of the function.
        :param _builtins.str initializer_handler: The initializer of the function.
        :param _builtins.int initializer_timeout: The maximum duration the function can be initialized.
        :param _builtins.str log_group_id: The LTS log group ID.
        :param _builtins.str log_stream_id: The LTS log stream ID.
        :param _builtins.str max_instance_num: The maximum number of instances for a single function.
        :param _builtins.int memory_size: The memory size allocated to the function, the unit is MB.
        :param _builtins.str name: Specifies the function name used to query the specified function.
        :param _builtins.str network_id: The network ID of subnet to which the function belongs.
        :param _builtins.str package: The package name that the function used.
        :param _builtins.str runtime: Specifies the dependency package runtime used to query the functions.  
               The valid values are as follows:
               + **Java8**
               + **Java11**
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Node.js16.17**
               + **Node.js18.15**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Python3.10**
               + **Go1.x**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **Custom**
               + **PHP7.3**
               + **http**
               + **Custom Image**
               + **Cangjie1.0**
        :param _builtins.int timeout: The timeout interval of the function.
        :param _builtins.str urn: Specifies the function URN used to query the specified function.
        :param _builtins.str user_data: The custom user data (key/value pairs) defined for the function.
        :param _builtins.str version: The function version.
        :param _builtins.str vpc_id: The VPC ID to which the function belongs.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "app_agency", app_agency)
        pulumi.set(__self__, "code_filename", code_filename)
        pulumi.set(__self__, "code_type", code_type)
        pulumi.set(__self__, "code_url", code_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encrypted_user_data", encrypted_user_data)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "functiongraph_version", functiongraph_version)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "initializer_handler", initializer_handler)
        pulumi.set(__self__, "initializer_timeout", initializer_timeout)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "max_instance_num", max_instance_num)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urn", urn)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> _builtins.str:
        """
        The IAM agency name for the function configuration.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="appAgency")
    def app_agency(self) -> _builtins.str:
        """
        The IAM agency name for the function execution.
        """
        return pulumi.get(self, "app_agency")

    @_builtins.property
    @pulumi.getter(name="codeFilename")
    def code_filename(self) -> _builtins.str:
        """
        The name of the function file.
        """
        return pulumi.get(self, "code_filename")

    @_builtins.property
    @pulumi.getter(name="codeType")
    def code_type(self) -> _builtins.str:
        """
        The function code type.
        + **inline**: inline code.
        + **zip**: ZIP file.
        + **jar**: JAR file or java functions.
        + **obs**: function code stored in an OBS bucket.
        """
        return pulumi.get(self, "code_type")

    @_builtins.property
    @pulumi.getter(name="codeUrl")
    def code_url(self) -> _builtins.str:
        """
        The code URL.
        """
        return pulumi.get(self, "code_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="encryptedUserData")
    def encrypted_user_data(self) -> _builtins.str:
        """
        The custom user data (key/value pairs) defined to be encrypted for the function.
        """
        return pulumi.get(self, "encrypted_user_data")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the functions belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="functiongraphVersion")
    def functiongraph_version(self) -> _builtins.str:
        """
        The functionGraph version.
        """
        return pulumi.get(self, "functiongraph_version")

    @_builtins.property
    @pulumi.getter
    def handler(self) -> _builtins.str:
        """
        The entry point of the function.
        """
        return pulumi.get(self, "handler")

    @_builtins.property
    @pulumi.getter(name="initializerHandler")
    def initializer_handler(self) -> _builtins.str:
        """
        The initializer of the function.
        """
        return pulumi.get(self, "initializer_handler")

    @_builtins.property
    @pulumi.getter(name="initializerTimeout")
    def initializer_timeout(self) -> _builtins.int:
        """
        The maximum duration the function can be initialized.
        """
        return pulumi.get(self, "initializer_timeout")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        The LTS log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> _builtins.str:
        """
        The LTS log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="maxInstanceNum")
    def max_instance_num(self) -> _builtins.str:
        """
        The maximum number of instances for a single function.
        """
        return pulumi.get(self, "max_instance_num")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> _builtins.int:
        """
        The memory size allocated to the function, the unit is MB.
        """
        return pulumi.get(self, "memory_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the function name used to query the specified function.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        The network ID of subnet to which the function belongs.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def package(self) -> _builtins.str:
        """
        The package name that the function used.
        """
        return pulumi.get(self, "package")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the dependency package runtime used to query the functions.  
        The valid values are as follows:
        + **Java8**
        + **Java11**
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Node.js16.17**
        + **Node.js18.15**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Python3.10**
        + **Go1.x**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **Custom**
        + **PHP7.3**
        + **http**
        + **Custom Image**
        + **Cangjie1.0**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout interval of the function.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Specifies the function URN used to query the specified function.
        """
        return pulumi.get(self, "urn")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The custom user data (key/value pairs) defined for the function.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The function version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC ID to which the function belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 limit: _builtins.int,
                 type: _builtins.str,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int limit: The number of available quota.
        :param _builtins.str type: The resource type corresponding to quota.
               + **fgs_func_scale_down_timeout**: Release time of idle function instances in FunctionGraph `v1`.
               + **fgs_func_occurs**: Indicates instance quota for functions in FunctionGraph `v1` and reserved instance quota for
               functions in FunctionGraph `v2`.
               + **fgs_func_pat_idle_time**: Release time of idle PAT in VPC function.
               + **fgs_func_num**: User function quantity quota.
               + **fgs_func_code_size**: Total code size quota of user functions.
               + **fgs_workflow_num**: Function flow quantity quota.
               + **fgs_on_demand_instance_limit**: Maximum number of instances per function in FunctionGraph `v2`.
               + **fgs_func_qos_limit**: Instance quantity quota of user functions.
        :param _builtins.str unit: The unit of usage.
        :param _builtins.int used: The number of quota used.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The number of available quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type corresponding to quota.
        + **fgs_func_scale_down_timeout**: Release time of idle function instances in FunctionGraph `v1`.
        + **fgs_func_occurs**: Indicates instance quota for functions in FunctionGraph `v1` and reserved instance quota for
        functions in FunctionGraph `v2`.
        + **fgs_func_pat_idle_time**: Release time of idle PAT in VPC function.
        + **fgs_func_num**: User function quantity quota.
        + **fgs_func_code_size**: Total code size quota of user functions.
        + **fgs_workflow_num**: Function flow quantity quota.
        + **fgs_on_demand_instance_limit**: Maximum number of instances per function in FunctionGraph `v2`.
        + **fgs_func_qos_limit**: Instance quantity quota of user functions.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of usage.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of quota used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourceTagsSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


