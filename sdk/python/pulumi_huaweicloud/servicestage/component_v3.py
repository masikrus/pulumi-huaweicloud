# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComponentV3Args', 'ComponentV3']

@pulumi.input_type
class ComponentV3Args:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 refer_resources: pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]],
                 runtime_stack: pulumi.Input['ComponentV3RuntimeStackArgs'],
                 source: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 affinities: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]] = None,
                 anti_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]] = None,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 config_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metric: Optional[pulumi.Input['ComponentV3CustomMetricArgs']] = None,
                 deploy_strategy: Optional[pulumi.Input['ComponentV3DeployStrategyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]] = None,
                 external_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]] = None,
                 jvm_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 limit_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 liveness_probe: Optional[pulumi.Input['ComponentV3LivenessProbeArgs']] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]] = None,
                 mesher: Optional[pulumi.Input['ComponentV3MesherArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_start: Optional[pulumi.Input['ComponentV3PostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ComponentV3PreStopArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replica: Optional[pulumi.Input[_builtins.int]] = None,
                 request_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 request_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 tomcat_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 update_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_content: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComponentV3 resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the component belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID where the component is deployed.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]] refer_resources: Specifies the configuration of the reference resources.  
               The refer_resources structure is documented below.
        :param pulumi.Input['ComponentV3RuntimeStackArgs'] runtime_stack: Specifies the configuration of the runtime stack.  
               The runtime_stack structure is documented below.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the source configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        :param pulumi.Input[_builtins.str] version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]] affinities: Specifies the affinity configuration of the component.  
               The affinity structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]] anti_affinities: Specifies the anti-affinity configuration of the component.  
               The anti_affinity structure is documented below.
        :param pulumi.Input[_builtins.str] build: Specifies the build configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        :param pulumi.Input[_builtins.str] command: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] config_mode: Specifies the configuration mode of the component.
               The valid values are as follows:
               + **yaml**
        :param pulumi.Input['ComponentV3CustomMetricArgs'] custom_metric: Specifies the configuration of the monitor metric.  
               The custom_metric structure is documented below.
        :param pulumi.Input['ComponentV3DeployStrategyArgs'] deploy_strategy: Specifies the configuration of the deploy strategy.  
               The deploy_strategy structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the component.  
               The value can contain a maximum of `128` characters.
               
               > The value of the `description` cannot be set to empty value by updating.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]] envs: Specifies the configuration of the environment variables.  
               The envs structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]] external_accesses: Specifies the configuration of the external accesses.  
               The external_accesses structure is documented below.
        :param pulumi.Input[_builtins.str] jvm_opts: Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
               If there are multiple parameters, separate them by spaces.
               If this parameter is left blank, the default value is used.
        :param pulumi.Input[_builtins.float] limit_cpu: Specifies the maximum number of the CPU limit.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] limit_memory: Specifies the maximum number of the memory limit.  
               The unit is **GiB**.
        :param pulumi.Input['ComponentV3LivenessProbeArgs'] liveness_probe: Specifies the liveness probe configuration of the component.  
               The liveness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]] logs: Specifies the configuration of the logs collection.  
               The logs structure is documented below.
        :param pulumi.Input['ComponentV3MesherArgs'] mesher: Specifies the configuration of the access mesher.  
               The mesher structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input['ComponentV3PostStartArgs'] post_start: Specifies the post start configuration.  
               The post_start structure is documented below.
        :param pulumi.Input['ComponentV3PreStopArgs'] pre_stop: Specifies the pre stop configuration.  
               The pre_stop structure is documented below.
        :param pulumi.Input['ComponentV3ReadinessProbeArgs'] readiness_probe: Specifies the readiness probe configuration of the component.  
               The readiness_probe structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] replica: Specifies the replica number of the component.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.float] request_cpu: Specifies the number of the CPU request resources.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] request_memory: Specifies the number of the memory request resources.  
               The unit is **GiB**.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]] storages: Specifies the storage configuration.  
               The storages structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the component.
               
               <a name="servicestage_v3_component_runtime_stack"></a>
               The `runtime_stack` block supports:
        :param pulumi.Input[_builtins.str] timezone: Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] tomcat_opts: Specifies the configuration of the tomcat server, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        :param pulumi.Input[_builtins.str] update_strategy: Specifies the configuration of the update strategy, in JSON format.
        :param pulumi.Input[_builtins.str] workload_content: Specifies the workload content of the component.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "refer_resources", refer_resources)
        pulumi.set(__self__, "runtime_stack", runtime_stack)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "version", version)
        if affinities is not None:
            pulumi.set(__self__, "affinities", affinities)
        if anti_affinities is not None:
            pulumi.set(__self__, "anti_affinities", anti_affinities)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config_mode is not None:
            pulumi.set(__self__, "config_mode", config_mode)
        if custom_metric is not None:
            pulumi.set(__self__, "custom_metric", custom_metric)
        if deploy_strategy is not None:
            pulumi.set(__self__, "deploy_strategy", deploy_strategy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if external_accesses is not None:
            pulumi.set(__self__, "external_accesses", external_accesses)
        if jvm_opts is not None:
            pulumi.set(__self__, "jvm_opts", jvm_opts)
        if limit_cpu is not None:
            pulumi.set(__self__, "limit_cpu", limit_cpu)
        if limit_memory is not None:
            pulumi.set(__self__, "limit_memory", limit_memory)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if mesher is not None:
            pulumi.set(__self__, "mesher", mesher)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replica is not None:
            pulumi.set(__self__, "replica", replica)
        if request_cpu is not None:
            pulumi.set(__self__, "request_cpu", request_cpu)
        if request_memory is not None:
            pulumi.set(__self__, "request_memory", request_memory)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tomcat_opts is not None:
            pulumi.set(__self__, "tomcat_opts", tomcat_opts)
        if update_strategy is not None:
            pulumi.set(__self__, "update_strategy", update_strategy)
        if workload_content is not None:
            pulumi.set(__self__, "workload_content", workload_content)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID to which the component belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment ID where the component is deployed.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="referResources")
    def refer_resources(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]]:
        """
        Specifies the configuration of the reference resources.  
        The refer_resources structure is documented below.
        """
        return pulumi.get(self, "refer_resources")

    @refer_resources.setter
    def refer_resources(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]]):
        pulumi.set(self, "refer_resources", value)

    @_builtins.property
    @pulumi.getter(name="runtimeStack")
    def runtime_stack(self) -> pulumi.Input['ComponentV3RuntimeStackArgs']:
        """
        Specifies the configuration of the runtime stack.  
        The runtime_stack structure is documented below.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "runtime_stack")

    @runtime_stack.setter
    def runtime_stack(self, value: pulumi.Input['ComponentV3RuntimeStackArgs']):
        pulumi.set(self, "runtime_stack", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the source configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]]:
        """
        Specifies the affinity configuration of the component.  
        The affinity structure is documented below.
        """
        return pulumi.get(self, "affinities")

    @affinities.setter
    def affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]]):
        pulumi.set(self, "affinities", value)

    @_builtins.property
    @pulumi.getter(name="antiAffinities")
    def anti_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]]:
        """
        Specifies the anti-affinity configuration of the component.  
        The anti_affinity structure is documented below.
        """
        return pulumi.get(self, "anti_affinities")

    @anti_affinities.setter
    def anti_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]]):
        pulumi.set(self, "anti_affinities", value)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        """
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build", value)

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter(name="configMode")
    def config_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration mode of the component.
        The valid values are as follows:
        + **yaml**
        """
        return pulumi.get(self, "config_mode")

    @config_mode.setter
    def config_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_mode", value)

    @_builtins.property
    @pulumi.getter(name="customMetric")
    def custom_metric(self) -> Optional[pulumi.Input['ComponentV3CustomMetricArgs']]:
        """
        Specifies the configuration of the monitor metric.  
        The custom_metric structure is documented below.
        """
        return pulumi.get(self, "custom_metric")

    @custom_metric.setter
    def custom_metric(self, value: Optional[pulumi.Input['ComponentV3CustomMetricArgs']]):
        pulumi.set(self, "custom_metric", value)

    @_builtins.property
    @pulumi.getter(name="deployStrategy")
    def deploy_strategy(self) -> Optional[pulumi.Input['ComponentV3DeployStrategyArgs']]:
        """
        Specifies the configuration of the deploy strategy.  
        The deploy_strategy structure is documented below.
        """
        return pulumi.get(self, "deploy_strategy")

    @deploy_strategy.setter
    def deploy_strategy(self, value: Optional[pulumi.Input['ComponentV3DeployStrategyArgs']]):
        pulumi.set(self, "deploy_strategy", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the component.  
        The value can contain a maximum of `128` characters.

        > The value of the `description` cannot be set to empty value by updating.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]]:
        """
        Specifies the configuration of the environment variables.  
        The envs structure is documented below.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @_builtins.property
    @pulumi.getter(name="externalAccesses")
    def external_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]]:
        """
        Specifies the configuration of the external accesses.  
        The external_accesses structure is documented below.
        """
        return pulumi.get(self, "external_accesses")

    @external_accesses.setter
    def external_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]]):
        pulumi.set(self, "external_accesses", value)

    @_builtins.property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
        If there are multiple parameters, separate them by spaces.
        If this parameter is left blank, the default value is used.
        """
        return pulumi.get(self, "jvm_opts")

    @jvm_opts.setter
    def jvm_opts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jvm_opts", value)

    @_builtins.property
    @pulumi.getter(name="limitCpu")
    def limit_cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the maximum number of the CPU limit.  
        The unit is **Core**.
        """
        return pulumi.get(self, "limit_cpu")

    @limit_cpu.setter
    def limit_cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "limit_cpu", value)

    @_builtins.property
    @pulumi.getter(name="limitMemory")
    def limit_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the maximum number of the memory limit.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "limit_memory")

    @limit_memory.setter
    def limit_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "limit_memory", value)

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ComponentV3LivenessProbeArgs']]:
        """
        Specifies the liveness probe configuration of the component.  
        The liveness_probe structure is documented below.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ComponentV3LivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]]:
        """
        Specifies the configuration of the logs collection.  
        The logs structure is documented below.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]]):
        pulumi.set(self, "logs", value)

    @_builtins.property
    @pulumi.getter
    def mesher(self) -> Optional[pulumi.Input['ComponentV3MesherArgs']]:
        """
        Specifies the configuration of the access mesher.  
        The mesher structure is documented below.
        """
        return pulumi.get(self, "mesher")

    @mesher.setter
    def mesher(self, value: Optional[pulumi.Input['ComponentV3MesherArgs']]):
        pulumi.set(self, "mesher", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ComponentV3PostStartArgs']]:
        """
        Specifies the post start configuration.  
        The post_start structure is documented below.
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ComponentV3PostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ComponentV3PreStopArgs']]:
        """
        Specifies the pre stop configuration.  
        The pre_stop structure is documented below.
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ComponentV3PreStopArgs']]):
        pulumi.set(self, "pre_stop", value)

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']]:
        """
        Specifies the readiness probe configuration of the component.  
        The readiness_probe structure is documented below.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the component is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replica(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the replica number of the component.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "replica")

    @replica.setter
    def replica(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replica", value)

    @_builtins.property
    @pulumi.getter(name="requestCpu")
    def request_cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of the CPU request resources.  
        The unit is **Core**.
        """
        return pulumi.get(self, "request_cpu")

    @request_cpu.setter
    def request_cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "request_cpu", value)

    @_builtins.property
    @pulumi.getter(name="requestMemory")
    def request_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of the memory request resources.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "request_memory")

    @request_memory.setter
    def request_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "request_memory", value)

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]]:
        """
        Specifies the storage configuration.  
        The storages structure is documented below.
        """
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the component.

        <a name="servicestage_v3_component_runtime_stack"></a>
        The `runtime_stack` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter(name="tomcatOpts")
    def tomcat_opts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration of the tomcat server, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        """
        return pulumi.get(self, "tomcat_opts")

    @tomcat_opts.setter
    def tomcat_opts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tomcat_opts", value)

    @_builtins.property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration of the update strategy, in JSON format.
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_strategy", value)

    @_builtins.property
    @pulumi.getter(name="workloadContent")
    def workload_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workload content of the component.
        """
        return pulumi.get(self, "workload_content")

    @workload_content.setter
    def workload_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_content", value)


@pulumi.input_type
class _ComponentV3State:
    def __init__(__self__, *,
                 affinities: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]] = None,
                 anti_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 build_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 command_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 config_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metric: Optional[pulumi.Input['ComponentV3CustomMetricArgs']] = None,
                 deploy_strategy: Optional[pulumi.Input['ComponentV3DeployStrategyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]] = None,
                 external_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]] = None,
                 jvm_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 limit_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 liveness_probe: Optional[pulumi.Input['ComponentV3LivenessProbeArgs']] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]] = None,
                 mesher: Optional[pulumi.Input['ComponentV3MesherArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_start: Optional[pulumi.Input['ComponentV3PostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ComponentV3PreStopArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']] = None,
                 refer_resources: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replica: Optional[pulumi.Input[_builtins.int]] = None,
                 request_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 request_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 runtime_stack: Optional[pulumi.Input['ComponentV3RuntimeStackArgs']] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 source_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 tomcat_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 tomcat_opts_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 update_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 update_strategy_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_content: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComponentV3 resources.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]] affinities: Specifies the affinity configuration of the component.  
               The affinity structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]] anti_affinities: Specifies the anti-affinity configuration of the component.  
               The anti_affinity structure is documented below.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the component belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] build: Specifies the build configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        :param pulumi.Input[_builtins.str] build_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'build'.
        :param pulumi.Input[_builtins.str] command: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] command_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'command'.
        :param pulumi.Input[_builtins.str] config_mode: Specifies the configuration mode of the component.
               The valid values are as follows:
               + **yaml**
        :param pulumi.Input[_builtins.str] created_at: The creation time of the component, in RFC3339 format.
        :param pulumi.Input['ComponentV3CustomMetricArgs'] custom_metric: Specifies the configuration of the monitor metric.  
               The custom_metric structure is documented below.
        :param pulumi.Input['ComponentV3DeployStrategyArgs'] deploy_strategy: Specifies the configuration of the deploy strategy.  
               The deploy_strategy structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the component.  
               The value can contain a maximum of `128` characters.
               
               > The value of the `description` cannot be set to empty value by updating.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID where the component is deployed.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]] envs: Specifies the configuration of the environment variables.  
               The envs structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]] external_accesses: Specifies the configuration of the external accesses.  
               The external_accesses structure is documented below.
        :param pulumi.Input[_builtins.str] jvm_opts: Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
               If there are multiple parameters, separate them by spaces.
               If this parameter is left blank, the default value is used.
        :param pulumi.Input[_builtins.float] limit_cpu: Specifies the maximum number of the CPU limit.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] limit_memory: Specifies the maximum number of the memory limit.  
               The unit is **GiB**.
        :param pulumi.Input['ComponentV3LivenessProbeArgs'] liveness_probe: Specifies the liveness probe configuration of the component.  
               The liveness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]] logs: Specifies the configuration of the logs collection.  
               The logs structure is documented below.
        :param pulumi.Input['ComponentV3MesherArgs'] mesher: Specifies the configuration of the access mesher.  
               The mesher structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input['ComponentV3PostStartArgs'] post_start: Specifies the post start configuration.  
               The post_start structure is documented below.
        :param pulumi.Input['ComponentV3PreStopArgs'] pre_stop: Specifies the pre stop configuration.  
               The pre_stop structure is documented below.
        :param pulumi.Input['ComponentV3ReadinessProbeArgs'] readiness_probe: Specifies the readiness probe configuration of the component.  
               The readiness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]] refer_resources: Specifies the configuration of the reference resources.  
               The refer_resources structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] replica: Specifies the replica number of the component.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.float] request_cpu: Specifies the number of the CPU request resources.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] request_memory: Specifies the number of the memory request resources.  
               The unit is **GiB**.
        :param pulumi.Input['ComponentV3RuntimeStackArgs'] runtime_stack: Specifies the configuration of the runtime stack.  
               The runtime_stack structure is documented below.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the source configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        :param pulumi.Input[_builtins.str] source_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'source'.
        :param pulumi.Input[_builtins.str] status: The status of the component.
               + **RUNNING**
               + **PENDING**
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]] storages: Specifies the storage configuration.  
               The storages structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the component.
               
               <a name="servicestage_v3_component_runtime_stack"></a>
               The `runtime_stack` block supports:
        :param pulumi.Input[_builtins.str] timezone: Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] tomcat_opts: Specifies the configuration of the tomcat server, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        :param pulumi.Input[_builtins.str] tomcat_opts_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'tomcat_opts'.
        :param pulumi.Input[_builtins.str] update_strategy: Specifies the configuration of the update strategy, in JSON format.
        :param pulumi.Input[_builtins.str] update_strategy_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'update_strategy'.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the component, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        :param pulumi.Input[_builtins.str] workload_content: Specifies the workload content of the component.
        """
        if affinities is not None:
            pulumi.set(__self__, "affinities", affinities)
        if anti_affinities is not None:
            pulumi.set(__self__, "anti_affinities", anti_affinities)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if build_origin is not None:
            pulumi.set(__self__, "build_origin", build_origin)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if command_origin is not None:
            pulumi.set(__self__, "command_origin", command_origin)
        if config_mode is not None:
            pulumi.set(__self__, "config_mode", config_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_metric is not None:
            pulumi.set(__self__, "custom_metric", custom_metric)
        if deploy_strategy is not None:
            pulumi.set(__self__, "deploy_strategy", deploy_strategy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if external_accesses is not None:
            pulumi.set(__self__, "external_accesses", external_accesses)
        if jvm_opts is not None:
            pulumi.set(__self__, "jvm_opts", jvm_opts)
        if limit_cpu is not None:
            pulumi.set(__self__, "limit_cpu", limit_cpu)
        if limit_memory is not None:
            pulumi.set(__self__, "limit_memory", limit_memory)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if mesher is not None:
            pulumi.set(__self__, "mesher", mesher)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if refer_resources is not None:
            pulumi.set(__self__, "refer_resources", refer_resources)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replica is not None:
            pulumi.set(__self__, "replica", replica)
        if request_cpu is not None:
            pulumi.set(__self__, "request_cpu", request_cpu)
        if request_memory is not None:
            pulumi.set(__self__, "request_memory", request_memory)
        if runtime_stack is not None:
            pulumi.set(__self__, "runtime_stack", runtime_stack)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_origin is not None:
            pulumi.set(__self__, "source_origin", source_origin)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tomcat_opts is not None:
            pulumi.set(__self__, "tomcat_opts", tomcat_opts)
        if tomcat_opts_origin is not None:
            pulumi.set(__self__, "tomcat_opts_origin", tomcat_opts_origin)
        if update_strategy is not None:
            pulumi.set(__self__, "update_strategy", update_strategy)
        if update_strategy_origin is not None:
            pulumi.set(__self__, "update_strategy_origin", update_strategy_origin)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if workload_content is not None:
            pulumi.set(__self__, "workload_content", workload_content)

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]]:
        """
        Specifies the affinity configuration of the component.  
        The affinity structure is documented below.
        """
        return pulumi.get(self, "affinities")

    @affinities.setter
    def affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityArgs']]]]):
        pulumi.set(self, "affinities", value)

    @_builtins.property
    @pulumi.getter(name="antiAffinities")
    def anti_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]]:
        """
        Specifies the anti-affinity configuration of the component.  
        The anti_affinity structure is documented below.
        """
        return pulumi.get(self, "anti_affinities")

    @anti_affinities.setter
    def anti_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityArgs']]]]):
        pulumi.set(self, "anti_affinities", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID to which the component belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        """
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build", value)

    @_builtins.property
    @pulumi.getter(name="buildOrigin")
    def build_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'build'.
        """
        return pulumi.get(self, "build_origin")

    @build_origin.setter
    def build_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_origin", value)

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter(name="commandOrigin")
    def command_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'command'.
        """
        return pulumi.get(self, "command_origin")

    @command_origin.setter
    def command_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_origin", value)

    @_builtins.property
    @pulumi.getter(name="configMode")
    def config_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration mode of the component.
        The valid values are as follows:
        + **yaml**
        """
        return pulumi.get(self, "config_mode")

    @config_mode.setter
    def config_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="customMetric")
    def custom_metric(self) -> Optional[pulumi.Input['ComponentV3CustomMetricArgs']]:
        """
        Specifies the configuration of the monitor metric.  
        The custom_metric structure is documented below.
        """
        return pulumi.get(self, "custom_metric")

    @custom_metric.setter
    def custom_metric(self, value: Optional[pulumi.Input['ComponentV3CustomMetricArgs']]):
        pulumi.set(self, "custom_metric", value)

    @_builtins.property
    @pulumi.getter(name="deployStrategy")
    def deploy_strategy(self) -> Optional[pulumi.Input['ComponentV3DeployStrategyArgs']]:
        """
        Specifies the configuration of the deploy strategy.  
        The deploy_strategy structure is documented below.
        """
        return pulumi.get(self, "deploy_strategy")

    @deploy_strategy.setter
    def deploy_strategy(self, value: Optional[pulumi.Input['ComponentV3DeployStrategyArgs']]):
        pulumi.set(self, "deploy_strategy", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the component.  
        The value can contain a maximum of `128` characters.

        > The value of the `description` cannot be set to empty value by updating.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment ID where the component is deployed.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]]:
        """
        Specifies the configuration of the environment variables.  
        The envs structure is documented below.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3EnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @_builtins.property
    @pulumi.getter(name="externalAccesses")
    def external_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]]:
        """
        Specifies the configuration of the external accesses.  
        The external_accesses structure is documented below.
        """
        return pulumi.get(self, "external_accesses")

    @external_accesses.setter
    def external_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ExternalAccessArgs']]]]):
        pulumi.set(self, "external_accesses", value)

    @_builtins.property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
        If there are multiple parameters, separate them by spaces.
        If this parameter is left blank, the default value is used.
        """
        return pulumi.get(self, "jvm_opts")

    @jvm_opts.setter
    def jvm_opts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jvm_opts", value)

    @_builtins.property
    @pulumi.getter(name="limitCpu")
    def limit_cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the maximum number of the CPU limit.  
        The unit is **Core**.
        """
        return pulumi.get(self, "limit_cpu")

    @limit_cpu.setter
    def limit_cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "limit_cpu", value)

    @_builtins.property
    @pulumi.getter(name="limitMemory")
    def limit_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the maximum number of the memory limit.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "limit_memory")

    @limit_memory.setter
    def limit_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "limit_memory", value)

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ComponentV3LivenessProbeArgs']]:
        """
        Specifies the liveness probe configuration of the component.  
        The liveness_probe structure is documented below.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ComponentV3LivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]]:
        """
        Specifies the configuration of the logs collection.  
        The logs structure is documented below.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3LogArgs']]]]):
        pulumi.set(self, "logs", value)

    @_builtins.property
    @pulumi.getter
    def mesher(self) -> Optional[pulumi.Input['ComponentV3MesherArgs']]:
        """
        Specifies the configuration of the access mesher.  
        The mesher structure is documented below.
        """
        return pulumi.get(self, "mesher")

    @mesher.setter
    def mesher(self, value: Optional[pulumi.Input['ComponentV3MesherArgs']]):
        pulumi.set(self, "mesher", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ComponentV3PostStartArgs']]:
        """
        Specifies the post start configuration.  
        The post_start structure is documented below.
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ComponentV3PostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ComponentV3PreStopArgs']]:
        """
        Specifies the pre stop configuration.  
        The pre_stop structure is documented below.
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ComponentV3PreStopArgs']]):
        pulumi.set(self, "pre_stop", value)

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']]:
        """
        Specifies the readiness probe configuration of the component.  
        The readiness_probe structure is documented below.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ComponentV3ReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @_builtins.property
    @pulumi.getter(name="referResources")
    def refer_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]]]:
        """
        Specifies the configuration of the reference resources.  
        The refer_resources structure is documented below.
        """
        return pulumi.get(self, "refer_resources")

    @refer_resources.setter
    def refer_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3ReferResourceArgs']]]]):
        pulumi.set(self, "refer_resources", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the component is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replica(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the replica number of the component.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "replica")

    @replica.setter
    def replica(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replica", value)

    @_builtins.property
    @pulumi.getter(name="requestCpu")
    def request_cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of the CPU request resources.  
        The unit is **Core**.
        """
        return pulumi.get(self, "request_cpu")

    @request_cpu.setter
    def request_cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "request_cpu", value)

    @_builtins.property
    @pulumi.getter(name="requestMemory")
    def request_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of the memory request resources.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "request_memory")

    @request_memory.setter
    def request_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "request_memory", value)

    @_builtins.property
    @pulumi.getter(name="runtimeStack")
    def runtime_stack(self) -> Optional[pulumi.Input['ComponentV3RuntimeStackArgs']]:
        """
        Specifies the configuration of the runtime stack.  
        The runtime_stack structure is documented below.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "runtime_stack")

    @runtime_stack.setter
    def runtime_stack(self, value: Optional[pulumi.Input['ComponentV3RuntimeStackArgs']]):
        pulumi.set(self, "runtime_stack", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sourceOrigin")
    def source_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'source'.
        """
        return pulumi.get(self, "source_origin")

    @source_origin.setter
    def source_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_origin", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the component.
        + **RUNNING**
        + **PENDING**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]]:
        """
        Specifies the storage configuration.  
        The storages structure is documented below.
        """
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the component.

        <a name="servicestage_v3_component_runtime_stack"></a>
        The `runtime_stack` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter(name="tomcatOpts")
    def tomcat_opts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration of the tomcat server, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        """
        return pulumi.get(self, "tomcat_opts")

    @tomcat_opts.setter
    def tomcat_opts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tomcat_opts", value)

    @_builtins.property
    @pulumi.getter(name="tomcatOptsOrigin")
    def tomcat_opts_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'tomcat_opts'.
        """
        return pulumi.get(self, "tomcat_opts_origin")

    @tomcat_opts_origin.setter
    def tomcat_opts_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tomcat_opts_origin", value)

    @_builtins.property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration of the update strategy, in JSON format.
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_strategy", value)

    @_builtins.property
    @pulumi.getter(name="updateStrategyOrigin")
    def update_strategy_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'update_strategy'.
        """
        return pulumi.get(self, "update_strategy_origin")

    @update_strategy_origin.setter
    def update_strategy_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_strategy_origin", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="workloadContent")
    def workload_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workload content of the component.
        """
        return pulumi.get(self, "workload_content")

    @workload_content.setter
    def workload_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_content", value)


@pulumi.type_token("huaweicloud:ServiceStage/componentV3:ComponentV3")
class ComponentV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AffinityArgs', 'ComponentV3AffinityArgsDict']]]]] = None,
                 anti_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AntiAffinityArgs', 'ComponentV3AntiAffinityArgsDict']]]]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 config_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metric: Optional[pulumi.Input[Union['ComponentV3CustomMetricArgs', 'ComponentV3CustomMetricArgsDict']]] = None,
                 deploy_strategy: Optional[pulumi.Input[Union['ComponentV3DeployStrategyArgs', 'ComponentV3DeployStrategyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3EnvArgs', 'ComponentV3EnvArgsDict']]]]] = None,
                 external_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ExternalAccessArgs', 'ComponentV3ExternalAccessArgsDict']]]]] = None,
                 jvm_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 limit_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 liveness_probe: Optional[pulumi.Input[Union['ComponentV3LivenessProbeArgs', 'ComponentV3LivenessProbeArgsDict']]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3LogArgs', 'ComponentV3LogArgsDict']]]]] = None,
                 mesher: Optional[pulumi.Input[Union['ComponentV3MesherArgs', 'ComponentV3MesherArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_start: Optional[pulumi.Input[Union['ComponentV3PostStartArgs', 'ComponentV3PostStartArgsDict']]] = None,
                 pre_stop: Optional[pulumi.Input[Union['ComponentV3PreStopArgs', 'ComponentV3PreStopArgsDict']]] = None,
                 readiness_probe: Optional[pulumi.Input[Union['ComponentV3ReadinessProbeArgs', 'ComponentV3ReadinessProbeArgsDict']]] = None,
                 refer_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ReferResourceArgs', 'ComponentV3ReferResourceArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replica: Optional[pulumi.Input[_builtins.int]] = None,
                 request_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 request_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 runtime_stack: Optional[pulumi.Input[Union['ComponentV3RuntimeStackArgs', 'ComponentV3RuntimeStackArgsDict']]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3StorageArgs', 'ComponentV3StorageArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 tomcat_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 update_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_content: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a component resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_id = config.require_object("applicationId")
        environment_id = config.require_object("environmentId")
        component_name = config.require_object("componentName")
        ims_docker_image_url = config.require_object("imsDockerImageUrl")
        associated_cce_cluster_id = config.require_object("associatedCceClusterId")
        associated_cse_engine_id = config.require_object("associatedCseEngineId")
        test = huaweicloud.servicestage.ComponentV3("test",
            application_id=application_id,
            environment_id=environment_id,
            name=component_name,
            runtime_stack={
                "deploy_mode": "container",
                "name": "Docker",
                "type": "Docker",
            },
            source=json.dumps({
                "auth": "iam",
                "kind": "image",
                "storage": "swr",
                "url": ims_docker_image_url,
            }),
            version="1.0.1",
            replica=2,
            refer_resources=[
                {
                    "id": associated_cce_cluster_id,
                    "type": "cce",
                    "parameters": json.dumps({
                        "namespace": "default",
                        "type": "VirtualMachine",
                    }),
                },
                {
                    "id": associated_cse_engine_id,
                    "type": "cse",
                },
            ],
            tags={
                "foo": "bar",
            },
            description="Created by terraform script",
            limit_cpu=0.25,
            limit_memory=0.5,
            request_cpu=0.25,
            request_memory=0.5,
            envs=[{
                "name": "env_name",
                "value": "env_value",
            }],
            storages=[{
                "type": "HostPath",
                "name": "%[2]s",
                "parameters": json.dumps({
                    "default_mode": 0,
                    "path": "/tmp",
                }),
                "mounts": [{
                    "path": "/category",
                    "sub_path": "sub",
                    "read_only": False,
                }],
            }],
            command=json.dumps({
                "args": ["-a"],
                "command": ["ls"],
            }),
            post_start={
                "commands": ["test"],
                "type": "command",
            },
            pre_stop={
                "commands": ["test"],
                "type": "command",
            },
            mesher={
                "port": 60,
            },
            timezone="Asia/Shanghai",
            logs=[{
                "log_path": "/tmp",
                "rotate": "Hourly",
                "host_path": "/tmp",
                "host_extend_path": "PodName",
            }],
            custom_metric={
                "path": "/tmp",
                "port": 600,
                "dimensions": "cpu_usage,mem_usage",
            },
            affinities=[
                {
                    "condition": "required",
                    "kind": "node",
                    "match_expressions": [{
                        "key": "affinity1",
                        "value": "foo",
                        "operation": "In",
                    }],
                    "weight": 100,
                },
                {
                    "condition": "preferred",
                    "kind": "node",
                    "match_expressions": [{
                        "key": "affinity2",
                        "value": "bar",
                        "operation": "NotIn",
                    }],
                    "weight": 1,
                },
            ],
            anti_affinities=[
                {
                    "condition": "required",
                    "kind": "pod",
                    "match_expressions": [{
                        "key": "anit-affinity1",
                        "operation": "Exists",
                    }],
                    "weight": 100,
                },
                {
                    "condition": "preferred",
                    "kind": "pod",
                    "match_expressions": [{
                        "key": "anti-affinity2",
                        "operation": "DoesNotExist",
                    }],
                    "weight": 1,
                },
            ],
            liveness_probe={
                "type": "tcp",
                "delay": 30,
                "timeout": 30,
                "port": 800,
            },
            readiness_probe={
                "type": "http",
                "delay": 30,
                "timeout": 30,
                "scheme": "HTTPS",
                "host": "127.0.0.1",
                "port": 8000,
                "path": "/v1/test",
            })
        ```

        ## Import

        Components can be imported using `application_id` and `id` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/componentV3:ComponentV3 test <application_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to attributes missing from the API

        response, security or some other reason.

        The missing attribute is `workload_content`, `tags`.

        It is generally recommended running `pulumi preview` after importing resource.

        You can decide if changes should be applied to resource, or the definition should be updated to align with the resource.

        Also you can ignore changes as below.

        hcl

        resource "huaweicloud_servicestagev3_component" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              workload_content, tags,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AffinityArgs', 'ComponentV3AffinityArgsDict']]]] affinities: Specifies the affinity configuration of the component.  
               The affinity structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AntiAffinityArgs', 'ComponentV3AntiAffinityArgsDict']]]] anti_affinities: Specifies the anti-affinity configuration of the component.  
               The anti_affinity structure is documented below.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the component belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] build: Specifies the build configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        :param pulumi.Input[_builtins.str] command: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] config_mode: Specifies the configuration mode of the component.
               The valid values are as follows:
               + **yaml**
        :param pulumi.Input[Union['ComponentV3CustomMetricArgs', 'ComponentV3CustomMetricArgsDict']] custom_metric: Specifies the configuration of the monitor metric.  
               The custom_metric structure is documented below.
        :param pulumi.Input[Union['ComponentV3DeployStrategyArgs', 'ComponentV3DeployStrategyArgsDict']] deploy_strategy: Specifies the configuration of the deploy strategy.  
               The deploy_strategy structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the component.  
               The value can contain a maximum of `128` characters.
               
               > The value of the `description` cannot be set to empty value by updating.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID where the component is deployed.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3EnvArgs', 'ComponentV3EnvArgsDict']]]] envs: Specifies the configuration of the environment variables.  
               The envs structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ExternalAccessArgs', 'ComponentV3ExternalAccessArgsDict']]]] external_accesses: Specifies the configuration of the external accesses.  
               The external_accesses structure is documented below.
        :param pulumi.Input[_builtins.str] jvm_opts: Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
               If there are multiple parameters, separate them by spaces.
               If this parameter is left blank, the default value is used.
        :param pulumi.Input[_builtins.float] limit_cpu: Specifies the maximum number of the CPU limit.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] limit_memory: Specifies the maximum number of the memory limit.  
               The unit is **GiB**.
        :param pulumi.Input[Union['ComponentV3LivenessProbeArgs', 'ComponentV3LivenessProbeArgsDict']] liveness_probe: Specifies the liveness probe configuration of the component.  
               The liveness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3LogArgs', 'ComponentV3LogArgsDict']]]] logs: Specifies the configuration of the logs collection.  
               The logs structure is documented below.
        :param pulumi.Input[Union['ComponentV3MesherArgs', 'ComponentV3MesherArgsDict']] mesher: Specifies the configuration of the access mesher.  
               The mesher structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input[Union['ComponentV3PostStartArgs', 'ComponentV3PostStartArgsDict']] post_start: Specifies the post start configuration.  
               The post_start structure is documented below.
        :param pulumi.Input[Union['ComponentV3PreStopArgs', 'ComponentV3PreStopArgsDict']] pre_stop: Specifies the pre stop configuration.  
               The pre_stop structure is documented below.
        :param pulumi.Input[Union['ComponentV3ReadinessProbeArgs', 'ComponentV3ReadinessProbeArgsDict']] readiness_probe: Specifies the readiness probe configuration of the component.  
               The readiness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ReferResourceArgs', 'ComponentV3ReferResourceArgsDict']]]] refer_resources: Specifies the configuration of the reference resources.  
               The refer_resources structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] replica: Specifies the replica number of the component.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.float] request_cpu: Specifies the number of the CPU request resources.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] request_memory: Specifies the number of the memory request resources.  
               The unit is **GiB**.
        :param pulumi.Input[Union['ComponentV3RuntimeStackArgs', 'ComponentV3RuntimeStackArgsDict']] runtime_stack: Specifies the configuration of the runtime stack.  
               The runtime_stack structure is documented below.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the source configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3StorageArgs', 'ComponentV3StorageArgsDict']]]] storages: Specifies the storage configuration.  
               The storages structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the component.
               
               <a name="servicestage_v3_component_runtime_stack"></a>
               The `runtime_stack` block supports:
        :param pulumi.Input[_builtins.str] timezone: Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] tomcat_opts: Specifies the configuration of the tomcat server, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        :param pulumi.Input[_builtins.str] update_strategy: Specifies the configuration of the update strategy, in JSON format.
        :param pulumi.Input[_builtins.str] version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        :param pulumi.Input[_builtins.str] workload_content: Specifies the workload content of the component.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a component resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_id = config.require_object("applicationId")
        environment_id = config.require_object("environmentId")
        component_name = config.require_object("componentName")
        ims_docker_image_url = config.require_object("imsDockerImageUrl")
        associated_cce_cluster_id = config.require_object("associatedCceClusterId")
        associated_cse_engine_id = config.require_object("associatedCseEngineId")
        test = huaweicloud.servicestage.ComponentV3("test",
            application_id=application_id,
            environment_id=environment_id,
            name=component_name,
            runtime_stack={
                "deploy_mode": "container",
                "name": "Docker",
                "type": "Docker",
            },
            source=json.dumps({
                "auth": "iam",
                "kind": "image",
                "storage": "swr",
                "url": ims_docker_image_url,
            }),
            version="1.0.1",
            replica=2,
            refer_resources=[
                {
                    "id": associated_cce_cluster_id,
                    "type": "cce",
                    "parameters": json.dumps({
                        "namespace": "default",
                        "type": "VirtualMachine",
                    }),
                },
                {
                    "id": associated_cse_engine_id,
                    "type": "cse",
                },
            ],
            tags={
                "foo": "bar",
            },
            description="Created by terraform script",
            limit_cpu=0.25,
            limit_memory=0.5,
            request_cpu=0.25,
            request_memory=0.5,
            envs=[{
                "name": "env_name",
                "value": "env_value",
            }],
            storages=[{
                "type": "HostPath",
                "name": "%[2]s",
                "parameters": json.dumps({
                    "default_mode": 0,
                    "path": "/tmp",
                }),
                "mounts": [{
                    "path": "/category",
                    "sub_path": "sub",
                    "read_only": False,
                }],
            }],
            command=json.dumps({
                "args": ["-a"],
                "command": ["ls"],
            }),
            post_start={
                "commands": ["test"],
                "type": "command",
            },
            pre_stop={
                "commands": ["test"],
                "type": "command",
            },
            mesher={
                "port": 60,
            },
            timezone="Asia/Shanghai",
            logs=[{
                "log_path": "/tmp",
                "rotate": "Hourly",
                "host_path": "/tmp",
                "host_extend_path": "PodName",
            }],
            custom_metric={
                "path": "/tmp",
                "port": 600,
                "dimensions": "cpu_usage,mem_usage",
            },
            affinities=[
                {
                    "condition": "required",
                    "kind": "node",
                    "match_expressions": [{
                        "key": "affinity1",
                        "value": "foo",
                        "operation": "In",
                    }],
                    "weight": 100,
                },
                {
                    "condition": "preferred",
                    "kind": "node",
                    "match_expressions": [{
                        "key": "affinity2",
                        "value": "bar",
                        "operation": "NotIn",
                    }],
                    "weight": 1,
                },
            ],
            anti_affinities=[
                {
                    "condition": "required",
                    "kind": "pod",
                    "match_expressions": [{
                        "key": "anit-affinity1",
                        "operation": "Exists",
                    }],
                    "weight": 100,
                },
                {
                    "condition": "preferred",
                    "kind": "pod",
                    "match_expressions": [{
                        "key": "anti-affinity2",
                        "operation": "DoesNotExist",
                    }],
                    "weight": 1,
                },
            ],
            liveness_probe={
                "type": "tcp",
                "delay": 30,
                "timeout": 30,
                "port": 800,
            },
            readiness_probe={
                "type": "http",
                "delay": 30,
                "timeout": 30,
                "scheme": "HTTPS",
                "host": "127.0.0.1",
                "port": 8000,
                "path": "/v1/test",
            })
        ```

        ## Import

        Components can be imported using `application_id` and `id` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/componentV3:ComponentV3 test <application_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to attributes missing from the API

        response, security or some other reason.

        The missing attribute is `workload_content`, `tags`.

        It is generally recommended running `pulumi preview` after importing resource.

        You can decide if changes should be applied to resource, or the definition should be updated to align with the resource.

        Also you can ignore changes as below.

        hcl

        resource "huaweicloud_servicestagev3_component" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              workload_content, tags,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ComponentV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AffinityArgs', 'ComponentV3AffinityArgsDict']]]]] = None,
                 anti_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AntiAffinityArgs', 'ComponentV3AntiAffinityArgsDict']]]]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 config_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metric: Optional[pulumi.Input[Union['ComponentV3CustomMetricArgs', 'ComponentV3CustomMetricArgsDict']]] = None,
                 deploy_strategy: Optional[pulumi.Input[Union['ComponentV3DeployStrategyArgs', 'ComponentV3DeployStrategyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3EnvArgs', 'ComponentV3EnvArgsDict']]]]] = None,
                 external_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ExternalAccessArgs', 'ComponentV3ExternalAccessArgsDict']]]]] = None,
                 jvm_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 limit_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 liveness_probe: Optional[pulumi.Input[Union['ComponentV3LivenessProbeArgs', 'ComponentV3LivenessProbeArgsDict']]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3LogArgs', 'ComponentV3LogArgsDict']]]]] = None,
                 mesher: Optional[pulumi.Input[Union['ComponentV3MesherArgs', 'ComponentV3MesherArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_start: Optional[pulumi.Input[Union['ComponentV3PostStartArgs', 'ComponentV3PostStartArgsDict']]] = None,
                 pre_stop: Optional[pulumi.Input[Union['ComponentV3PreStopArgs', 'ComponentV3PreStopArgsDict']]] = None,
                 readiness_probe: Optional[pulumi.Input[Union['ComponentV3ReadinessProbeArgs', 'ComponentV3ReadinessProbeArgsDict']]] = None,
                 refer_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ReferResourceArgs', 'ComponentV3ReferResourceArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replica: Optional[pulumi.Input[_builtins.int]] = None,
                 request_cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 request_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 runtime_stack: Optional[pulumi.Input[Union['ComponentV3RuntimeStackArgs', 'ComponentV3RuntimeStackArgsDict']]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3StorageArgs', 'ComponentV3StorageArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 tomcat_opts: Optional[pulumi.Input[_builtins.str]] = None,
                 update_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_content: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentV3Args.__new__(ComponentV3Args)

            __props__.__dict__["affinities"] = affinities
            __props__.__dict__["anti_affinities"] = anti_affinities
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["build"] = build
            __props__.__dict__["command"] = command
            __props__.__dict__["config_mode"] = config_mode
            __props__.__dict__["custom_metric"] = custom_metric
            __props__.__dict__["deploy_strategy"] = deploy_strategy
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["envs"] = envs
            __props__.__dict__["external_accesses"] = external_accesses
            __props__.__dict__["jvm_opts"] = jvm_opts
            __props__.__dict__["limit_cpu"] = limit_cpu
            __props__.__dict__["limit_memory"] = limit_memory
            __props__.__dict__["liveness_probe"] = liveness_probe
            __props__.__dict__["logs"] = logs
            __props__.__dict__["mesher"] = mesher
            __props__.__dict__["name"] = name
            __props__.__dict__["post_start"] = post_start
            __props__.__dict__["pre_stop"] = pre_stop
            __props__.__dict__["readiness_probe"] = readiness_probe
            if refer_resources is None and not opts.urn:
                raise TypeError("Missing required property 'refer_resources'")
            __props__.__dict__["refer_resources"] = refer_resources
            __props__.__dict__["region"] = region
            __props__.__dict__["replica"] = replica
            __props__.__dict__["request_cpu"] = request_cpu
            __props__.__dict__["request_memory"] = request_memory
            if runtime_stack is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_stack'")
            __props__.__dict__["runtime_stack"] = runtime_stack
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["storages"] = storages
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["tomcat_opts"] = tomcat_opts
            __props__.__dict__["update_strategy"] = update_strategy
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["workload_content"] = workload_content
            __props__.__dict__["build_origin"] = None
            __props__.__dict__["command_origin"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["source_origin"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tomcat_opts_origin"] = None
            __props__.__dict__["update_strategy_origin"] = None
            __props__.__dict__["updated_at"] = None
        super(ComponentV3, __self__).__init__(
            'huaweicloud:ServiceStage/componentV3:ComponentV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AffinityArgs', 'ComponentV3AffinityArgsDict']]]]] = None,
            anti_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AntiAffinityArgs', 'ComponentV3AntiAffinityArgsDict']]]]] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            build: Optional[pulumi.Input[_builtins.str]] = None,
            build_origin: Optional[pulumi.Input[_builtins.str]] = None,
            command: Optional[pulumi.Input[_builtins.str]] = None,
            command_origin: Optional[pulumi.Input[_builtins.str]] = None,
            config_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            custom_metric: Optional[pulumi.Input[Union['ComponentV3CustomMetricArgs', 'ComponentV3CustomMetricArgsDict']]] = None,
            deploy_strategy: Optional[pulumi.Input[Union['ComponentV3DeployStrategyArgs', 'ComponentV3DeployStrategyArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            envs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3EnvArgs', 'ComponentV3EnvArgsDict']]]]] = None,
            external_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ExternalAccessArgs', 'ComponentV3ExternalAccessArgsDict']]]]] = None,
            jvm_opts: Optional[pulumi.Input[_builtins.str]] = None,
            limit_cpu: Optional[pulumi.Input[_builtins.float]] = None,
            limit_memory: Optional[pulumi.Input[_builtins.float]] = None,
            liveness_probe: Optional[pulumi.Input[Union['ComponentV3LivenessProbeArgs', 'ComponentV3LivenessProbeArgsDict']]] = None,
            logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3LogArgs', 'ComponentV3LogArgsDict']]]]] = None,
            mesher: Optional[pulumi.Input[Union['ComponentV3MesherArgs', 'ComponentV3MesherArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            post_start: Optional[pulumi.Input[Union['ComponentV3PostStartArgs', 'ComponentV3PostStartArgsDict']]] = None,
            pre_stop: Optional[pulumi.Input[Union['ComponentV3PreStopArgs', 'ComponentV3PreStopArgsDict']]] = None,
            readiness_probe: Optional[pulumi.Input[Union['ComponentV3ReadinessProbeArgs', 'ComponentV3ReadinessProbeArgsDict']]] = None,
            refer_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ReferResourceArgs', 'ComponentV3ReferResourceArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replica: Optional[pulumi.Input[_builtins.int]] = None,
            request_cpu: Optional[pulumi.Input[_builtins.float]] = None,
            request_memory: Optional[pulumi.Input[_builtins.float]] = None,
            runtime_stack: Optional[pulumi.Input[Union['ComponentV3RuntimeStackArgs', 'ComponentV3RuntimeStackArgsDict']]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            source_origin: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3StorageArgs', 'ComponentV3StorageArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            timezone: Optional[pulumi.Input[_builtins.str]] = None,
            tomcat_opts: Optional[pulumi.Input[_builtins.str]] = None,
            tomcat_opts_origin: Optional[pulumi.Input[_builtins.str]] = None,
            update_strategy: Optional[pulumi.Input[_builtins.str]] = None,
            update_strategy_origin: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            workload_content: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComponentV3':
        """
        Get an existing ComponentV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AffinityArgs', 'ComponentV3AffinityArgsDict']]]] affinities: Specifies the affinity configuration of the component.  
               The affinity structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3AntiAffinityArgs', 'ComponentV3AntiAffinityArgsDict']]]] anti_affinities: Specifies the anti-affinity configuration of the component.  
               The anti_affinity structure is documented below.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the component belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] build: Specifies the build configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        :param pulumi.Input[_builtins.str] build_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'build'.
        :param pulumi.Input[_builtins.str] command: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] command_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'command'.
        :param pulumi.Input[_builtins.str] config_mode: Specifies the configuration mode of the component.
               The valid values are as follows:
               + **yaml**
        :param pulumi.Input[_builtins.str] created_at: The creation time of the component, in RFC3339 format.
        :param pulumi.Input[Union['ComponentV3CustomMetricArgs', 'ComponentV3CustomMetricArgsDict']] custom_metric: Specifies the configuration of the monitor metric.  
               The custom_metric structure is documented below.
        :param pulumi.Input[Union['ComponentV3DeployStrategyArgs', 'ComponentV3DeployStrategyArgsDict']] deploy_strategy: Specifies the configuration of the deploy strategy.  
               The deploy_strategy structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the component.  
               The value can contain a maximum of `128` characters.
               
               > The value of the `description` cannot be set to empty value by updating.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID where the component is deployed.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3EnvArgs', 'ComponentV3EnvArgsDict']]]] envs: Specifies the configuration of the environment variables.  
               The envs structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ExternalAccessArgs', 'ComponentV3ExternalAccessArgsDict']]]] external_accesses: Specifies the configuration of the external accesses.  
               The external_accesses structure is documented below.
        :param pulumi.Input[_builtins.str] jvm_opts: Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
               If there are multiple parameters, separate them by spaces.
               If this parameter is left blank, the default value is used.
        :param pulumi.Input[_builtins.float] limit_cpu: Specifies the maximum number of the CPU limit.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] limit_memory: Specifies the maximum number of the memory limit.  
               The unit is **GiB**.
        :param pulumi.Input[Union['ComponentV3LivenessProbeArgs', 'ComponentV3LivenessProbeArgsDict']] liveness_probe: Specifies the liveness probe configuration of the component.  
               The liveness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3LogArgs', 'ComponentV3LogArgsDict']]]] logs: Specifies the configuration of the logs collection.  
               The logs structure is documented below.
        :param pulumi.Input[Union['ComponentV3MesherArgs', 'ComponentV3MesherArgsDict']] mesher: Specifies the configuration of the access mesher.  
               The mesher structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input[Union['ComponentV3PostStartArgs', 'ComponentV3PostStartArgsDict']] post_start: Specifies the post start configuration.  
               The post_start structure is documented below.
        :param pulumi.Input[Union['ComponentV3PreStopArgs', 'ComponentV3PreStopArgsDict']] pre_stop: Specifies the pre stop configuration.  
               The pre_stop structure is documented below.
        :param pulumi.Input[Union['ComponentV3ReadinessProbeArgs', 'ComponentV3ReadinessProbeArgsDict']] readiness_probe: Specifies the readiness probe configuration of the component.  
               The readiness_probe structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3ReferResourceArgs', 'ComponentV3ReferResourceArgsDict']]]] refer_resources: Specifies the configuration of the reference resources.  
               The refer_resources structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] replica: Specifies the replica number of the component.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.float] request_cpu: Specifies the number of the CPU request resources.  
               The unit is **Core**.
        :param pulumi.Input[_builtins.float] request_memory: Specifies the number of the memory request resources.  
               The unit is **GiB**.
        :param pulumi.Input[Union['ComponentV3RuntimeStackArgs', 'ComponentV3RuntimeStackArgsDict']] runtime_stack: Specifies the configuration of the runtime stack.  
               The runtime_stack structure is documented below.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the source configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        :param pulumi.Input[_builtins.str] source_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'source'.
        :param pulumi.Input[_builtins.str] status: The status of the component.
               + **RUNNING**
               + **PENDING**
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentV3StorageArgs', 'ComponentV3StorageArgsDict']]]] storages: Specifies the storage configuration.  
               The storages structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the component.
               
               <a name="servicestage_v3_component_runtime_stack"></a>
               The `runtime_stack` block supports:
        :param pulumi.Input[_builtins.str] timezone: Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        :param pulumi.Input[_builtins.str] tomcat_opts: Specifies the configuration of the tomcat server, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        :param pulumi.Input[_builtins.str] tomcat_opts_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'tomcat_opts'.
        :param pulumi.Input[_builtins.str] update_strategy: Specifies the configuration of the update strategy, in JSON format.
        :param pulumi.Input[_builtins.str] update_strategy_origin: The script configuration value of this change is also the original value used for comparison with the new value next
               time the change is made. The corresponding parameter name is 'update_strategy'.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the component, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        :param pulumi.Input[_builtins.str] workload_content: Specifies the workload content of the component.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentV3State.__new__(_ComponentV3State)

        __props__.__dict__["affinities"] = affinities
        __props__.__dict__["anti_affinities"] = anti_affinities
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["build"] = build
        __props__.__dict__["build_origin"] = build_origin
        __props__.__dict__["command"] = command
        __props__.__dict__["command_origin"] = command_origin
        __props__.__dict__["config_mode"] = config_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_metric"] = custom_metric
        __props__.__dict__["deploy_strategy"] = deploy_strategy
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["envs"] = envs
        __props__.__dict__["external_accesses"] = external_accesses
        __props__.__dict__["jvm_opts"] = jvm_opts
        __props__.__dict__["limit_cpu"] = limit_cpu
        __props__.__dict__["limit_memory"] = limit_memory
        __props__.__dict__["liveness_probe"] = liveness_probe
        __props__.__dict__["logs"] = logs
        __props__.__dict__["mesher"] = mesher
        __props__.__dict__["name"] = name
        __props__.__dict__["post_start"] = post_start
        __props__.__dict__["pre_stop"] = pre_stop
        __props__.__dict__["readiness_probe"] = readiness_probe
        __props__.__dict__["refer_resources"] = refer_resources
        __props__.__dict__["region"] = region
        __props__.__dict__["replica"] = replica
        __props__.__dict__["request_cpu"] = request_cpu
        __props__.__dict__["request_memory"] = request_memory
        __props__.__dict__["runtime_stack"] = runtime_stack
        __props__.__dict__["source"] = source
        __props__.__dict__["source_origin"] = source_origin
        __props__.__dict__["status"] = status
        __props__.__dict__["storages"] = storages
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["tomcat_opts"] = tomcat_opts
        __props__.__dict__["tomcat_opts_origin"] = tomcat_opts_origin
        __props__.__dict__["update_strategy"] = update_strategy
        __props__.__dict__["update_strategy_origin"] = update_strategy_origin
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        __props__.__dict__["workload_content"] = workload_content
        return ComponentV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def affinities(self) -> pulumi.Output[Sequence['outputs.ComponentV3Affinity']]:
        """
        Specifies the affinity configuration of the component.  
        The affinity structure is documented below.
        """
        return pulumi.get(self, "affinities")

    @_builtins.property
    @pulumi.getter(name="antiAffinities")
    def anti_affinities(self) -> pulumi.Output[Sequence['outputs.ComponentV3AntiAffinity']]:
        """
        Specifies the anti-affinity configuration of the component.  
        The anti_affinity structure is documented below.
        """
        return pulumi.get(self, "anti_affinities")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application ID to which the component belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def build(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the build configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056060_table7559740).
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="buildOrigin")
    def build_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'build'.
        """
        return pulumi.get(self, "build_origin")

    @_builtins.property
    @pulumi.getter
    def command(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter(name="commandOrigin")
    def command_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'command'.
        """
        return pulumi.get(self, "command_origin")

    @_builtins.property
    @pulumi.getter(name="configMode")
    def config_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration mode of the component.
        The valid values are as follows:
        + **yaml**
        """
        return pulumi.get(self, "config_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customMetric")
    def custom_metric(self) -> pulumi.Output['outputs.ComponentV3CustomMetric']:
        """
        Specifies the configuration of the monitor metric.  
        The custom_metric structure is documented below.
        """
        return pulumi.get(self, "custom_metric")

    @_builtins.property
    @pulumi.getter(name="deployStrategy")
    def deploy_strategy(self) -> pulumi.Output['outputs.ComponentV3DeployStrategy']:
        """
        Specifies the configuration of the deploy strategy.  
        The deploy_strategy structure is documented below.
        """
        return pulumi.get(self, "deploy_strategy")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the component.  
        The value can contain a maximum of `128` characters.

        > The value of the `description` cannot be set to empty value by updating.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment ID where the component is deployed.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def envs(self) -> pulumi.Output[Sequence['outputs.ComponentV3Env']]:
        """
        Specifies the configuration of the environment variables.  
        The envs structure is documented below.
        """
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter(name="externalAccesses")
    def external_accesses(self) -> pulumi.Output[Sequence['outputs.ComponentV3ExternalAccess']]:
        """
        Specifies the configuration of the external accesses.  
        The external_accesses structure is documented below.
        """
        return pulumi.get(self, "external_accesses")

    @_builtins.property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the JVM parameters of the component. e.g. **-Xms256m -Xmx1024m**.  
        If there are multiple parameters, separate them by spaces.
        If this parameter is left blank, the default value is used.
        """
        return pulumi.get(self, "jvm_opts")

    @_builtins.property
    @pulumi.getter(name="limitCpu")
    def limit_cpu(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the maximum number of the CPU limit.  
        The unit is **Core**.
        """
        return pulumi.get(self, "limit_cpu")

    @_builtins.property
    @pulumi.getter(name="limitMemory")
    def limit_memory(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the maximum number of the memory limit.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "limit_memory")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> pulumi.Output['outputs.ComponentV3LivenessProbe']:
        """
        Specifies the liveness probe configuration of the component.  
        The liveness_probe structure is documented below.
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> pulumi.Output[Sequence['outputs.ComponentV3Log']]:
        """
        Specifies the configuration of the logs collection.  
        The logs structure is documented below.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter
    def mesher(self) -> pulumi.Output['outputs.ComponentV3Mesher']:
        """
        Specifies the configuration of the access mesher.  
        The mesher structure is documented below.
        """
        return pulumi.get(self, "mesher")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> pulumi.Output['outputs.ComponentV3PostStart']:
        """
        Specifies the post start configuration.  
        The post_start structure is documented below.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> pulumi.Output['outputs.ComponentV3PreStop']:
        """
        Specifies the pre stop configuration.  
        The pre_stop structure is documented below.
        """
        return pulumi.get(self, "pre_stop")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> pulumi.Output['outputs.ComponentV3ReadinessProbe']:
        """
        Specifies the readiness probe configuration of the component.  
        The readiness_probe structure is documented below.
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter(name="referResources")
    def refer_resources(self) -> pulumi.Output[Sequence['outputs.ComponentV3ReferResource']]:
        """
        Specifies the configuration of the reference resources.  
        The refer_resources structure is documented below.
        """
        return pulumi.get(self, "refer_resources")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the component is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def replica(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the replica number of the component.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter(name="requestCpu")
    def request_cpu(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the number of the CPU request resources.  
        The unit is **Core**.
        """
        return pulumi.get(self, "request_cpu")

    @_builtins.property
    @pulumi.getter(name="requestMemory")
    def request_memory(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the number of the memory request resources.  
        The unit is **GiB**.
        """
        return pulumi.get(self, "request_memory")

    @_builtins.property
    @pulumi.getter(name="runtimeStack")
    def runtime_stack(self) -> pulumi.Output['outputs.ComponentV3RuntimeStack']:
        """
        Specifies the configuration of the runtime stack.  
        The runtime_stack structure is documented below.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "runtime_stack")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the source configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__en-us_topic_0220056058_ref28944532).
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sourceOrigin")
    def source_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'source'.
        """
        return pulumi.get(self, "source_origin")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the component.
        + **RUNNING**
        + **PENDING**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def storages(self) -> pulumi.Output[Sequence['outputs.ComponentV3Storage']]:
        """
        Specifies the storage configuration.  
        The storages structure is documented below.
        """
        return pulumi.get(self, "storages")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the component.

        <a name="servicestage_v3_component_runtime_stack"></a>
        The `runtime_stack` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the time zone in which the component runs, e.g. **Asia/Shanghai**.
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="tomcatOpts")
    def tomcat_opts(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration of the tomcat server, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table2836191954317).
        """
        return pulumi.get(self, "tomcat_opts")

    @_builtins.property
    @pulumi.getter(name="tomcatOptsOrigin")
    def tomcat_opts_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'tomcat_opts'.
        """
        return pulumi.get(self, "tomcat_opts_origin")

    @_builtins.property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the configuration of the update strategy, in JSON format.
        """
        return pulumi.get(self, "update_strategy")

    @_builtins.property
    @pulumi.getter(name="updateStrategyOrigin")
    def update_strategy_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with the new value next
        time the change is made. The corresponding parameter name is 'update_strategy'.
        """
        return pulumi.get(self, "update_strategy_origin")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workloadContent")
    def workload_content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workload content of the component.
        """
        return pulumi.get(self, "workload_content")

