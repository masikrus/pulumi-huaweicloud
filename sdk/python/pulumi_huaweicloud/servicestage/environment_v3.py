# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EnvironmentV3Args', 'EnvironmentV3']

@pulumi.input_type
class EnvironmentV3Args:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[_builtins.str],
                 deploy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a EnvironmentV3 resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the environment belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] deploy_mode: Specifies the deploy mode of the environment.  
               + **virtualmachine**: Virtual machine.
               + **container**: Kubernetes.
               + **mixed**: Both virtual machine and Kubernetes.
               
               Defaults to **mixed**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the environment.  
               The value can contain a maximum of `128` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the environment belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the environment that used to filter resource.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if deploy_mode is not None:
            pulumi.set(__self__, "deploy_mode", deploy_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the VPC ID to which the environment belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deploy mode of the environment.  
        + **virtualmachine**: Virtual machine.
        + **container**: Kubernetes.
        + **mixed**: Both virtual machine and Kubernetes.

        Defaults to **mixed**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deploy_mode", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the environment.  
        The value can contain a maximum of `128` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the environment belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the environment that used to filter resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _EnvironmentV3State:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 deploy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EnvironmentV3 resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] creator: The creator name of the environment.
        :param pulumi.Input[_builtins.str] deploy_mode: Specifies the deploy mode of the environment.  
               + **virtualmachine**: Virtual machine.
               + **container**: Kubernetes.
               + **mixed**: Both virtual machine and Kubernetes.
               
               Defaults to **mixed**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the environment.  
               The value can contain a maximum of `128` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the environment belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the environment that used to filter resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the environment belongs.  
               Changing this will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if deploy_mode is not None:
            pulumi.set(__self__, "deploy_mode", deploy_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator name of the environment.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deploy mode of the environment.  
        + **virtualmachine**: Virtual machine.
        + **container**: Kubernetes.
        + **mixed**: Both virtual machine and Kubernetes.

        Defaults to **mixed**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deploy_mode", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the environment.  
        The value can contain a maximum of `128` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the environment belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the environment that used to filter resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID to which the environment belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:ServiceStage/environmentV3:EnvironmentV3")
class EnvironmentV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deploy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        env_name = config.require_object("envName")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.servicestage.EnvironmentV3("test",
            vpc_id=vpc_id,
            name=env_name,
            deploy_mode="mixed",
            description="Created by terraform script",
            enterprise_project_id=enterprise_project_id,
            tags={
                "foo": "bar",
                "owner": "terraform",
            })
        ```

        ## Import

        Environments can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/environmentV3:EnvironmentV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] deploy_mode: Specifies the deploy mode of the environment.  
               + **virtualmachine**: Virtual machine.
               + **container**: Kubernetes.
               + **mixed**: Both virtual machine and Kubernetes.
               
               Defaults to **mixed**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the environment.  
               The value can contain a maximum of `128` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the environment belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the environment that used to filter resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the environment belongs.  
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnvironmentV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        env_name = config.require_object("envName")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.servicestage.EnvironmentV3("test",
            vpc_id=vpc_id,
            name=env_name,
            deploy_mode="mixed",
            description="Created by terraform script",
            enterprise_project_id=enterprise_project_id,
            tags={
                "foo": "bar",
                "owner": "terraform",
            })
        ```

        ## Import

        Environments can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/environmentV3:EnvironmentV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deploy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentV3Args.__new__(EnvironmentV3Args)

            __props__.__dict__["deploy_mode"] = deploy_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["updated_at"] = None
        super(EnvironmentV3, __self__).__init__(
            'huaweicloud:ServiceStage/environmentV3:EnvironmentV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            deploy_mode: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'EnvironmentV3':
        """
        Get an existing EnvironmentV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] creator: The creator name of the environment.
        :param pulumi.Input[_builtins.str] deploy_mode: Specifies the deploy mode of the environment.  
               + **virtualmachine**: Virtual machine.
               + **container**: Kubernetes.
               + **mixed**: Both virtual machine and Kubernetes.
               
               Defaults to **mixed**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the environment.  
               The value can contain a maximum of `128` characters.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the environment belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the environment that used to filter resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID to which the environment belongs.  
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentV3State.__new__(_EnvironmentV3State)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator"] = creator
        __props__.__dict__["deploy_mode"] = deploy_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return EnvironmentV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        The creator name of the environment.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the deploy mode of the environment.  
        + **virtualmachine**: Virtual machine.
        + **container**: Kubernetes.
        + **mixed**: Both virtual machine and Kubernetes.

        Defaults to **mixed**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the environment.  
        The value can contain a maximum of `128` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the environment belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the environment that used to filter resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID to which the environment belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

