# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ComponentActionV3Args', 'ComponentActionV3']

@pulumi.input_type
class ComponentActionV3Args:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 application_id: pulumi.Input[_builtins.str],
                 component_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComponentActionV3 resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type of the component execution.  
               The valid values are as follows:
               + **start**
               + **stop**
               + **restart**
               + **scale**
               + **rollback**
               + **rollback_current**
               + **continue_deploy**
               + **check_gray_release**
               + **modify_gray_rule**
               + **sync_workload**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the componnet belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to be operated.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] parameters: Specifies the metadata of this action request.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component to be operated is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "component_id", component_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action type of the component execution.  
        The valid values are as follows:
        + **start**
        + **stop**
        + **restart**
        + **scale**
        + **rollback**
        + **rollback_current**
        + **continue_deploy**
        + **check_gray_release**
        + **modify_gray_rule**
        + **sync_workload**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID to which the componnet belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the component to be operated.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the metadata of this action request.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the component to be operated is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ComponentActionV3State:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComponentActionV3 resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action type of the component execution.  
               The valid values are as follows:
               + **start**
               + **stop**
               + **restart**
               + **scale**
               + **rollback**
               + **rollback_current**
               + **continue_deploy**
               + **check_gray_release**
               + **modify_gray_rule**
               + **sync_workload**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the componnet belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to be operated.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] parameters: Specifies the metadata of this action request.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component to be operated is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action type of the component execution.  
        The valid values are as follows:
        + **start**
        + **stop**
        + **restart**
        + **scale**
        + **rollback**
        + **rollback_current**
        + **continue_deploy**
        + **check_gray_release**
        + **modify_gray_rule**
        + **sync_workload**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID to which the componnet belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the component to be operated.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the metadata of this action request.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the component to be operated is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:ServiceStage/componentActionV3:ComponentActionV3")
class ComponentActionV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to operate ServiceStage component within HuaweiCloud.

        > This resource is only a one-time action resource for operating component. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type of the component execution.  
               The valid values are as follows:
               + **start**
               + **stop**
               + **restart**
               + **scale**
               + **rollback**
               + **rollback_current**
               + **continue_deploy**
               + **check_gray_release**
               + **modify_gray_rule**
               + **sync_workload**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the componnet belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to be operated.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] parameters: Specifies the metadata of this action request.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component to be operated is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentActionV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to operate ServiceStage component within HuaweiCloud.

        > This resource is only a one-time action resource for operating component. Deleting this resource will not clear
           the corresponding request record, but will only remove the resource information from the tfstate file.

        :param str resource_name: The name of the resource.
        :param ComponentActionV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentActionV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentActionV3Args.__new__(ComponentActionV3Args)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if component_id is None and not opts.urn:
                raise TypeError("Missing required property 'component_id'")
            __props__.__dict__["component_id"] = component_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
        super(ComponentActionV3, __self__).__init__(
            'huaweicloud:ServiceStage/componentActionV3:ComponentActionV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            component_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComponentActionV3':
        """
        Get an existing ComponentActionV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type of the component execution.  
               The valid values are as follows:
               + **start**
               + **stop**
               + **restart**
               + **scale**
               + **rollback**
               + **rollback_current**
               + **continue_deploy**
               + **check_gray_release**
               + **modify_gray_rule**
               + **sync_workload**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID to which the componnet belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to be operated.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] parameters: Specifies the metadata of this action request.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the component to be operated is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentActionV3State.__new__(_ComponentActionV3State)

        __props__.__dict__["action"] = action
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["component_id"] = component_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["region"] = region
        return ComponentActionV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action type of the component execution.  
        The valid values are as follows:
        + **start**
        + **stop**
        + **restart**
        + **scale**
        + **rollback**
        + **rollback_current**
        + **continue_deploy**
        + **check_gray_release**
        + **modify_gray_rule**
        + **sync_workload**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application ID to which the componnet belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the component to be operated.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the metadata of this action request.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the component to be operated is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

