# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationConfigurationV3Configuration',
    'ApplicationConfigurationV3ConfigurationEnv',
    'ApplicationEnvironment',
    'ApplicationEnvironmentVariable',
    'ComponentBuilder',
    'ComponentInstanceArtifact',
    'ComponentInstanceArtifactProperties',
    'ComponentInstanceConfiguration',
    'ComponentInstanceConfigurationEnvVariable',
    'ComponentInstanceConfigurationLifecycle',
    'ComponentInstanceConfigurationLifecycleEntrypoint',
    'ComponentInstanceConfigurationLifecyclePostStart',
    'ComponentInstanceConfigurationLifecyclePostStartParameters',
    'ComponentInstanceConfigurationLifecyclePreStop',
    'ComponentInstanceConfigurationLifecyclePreStopParameters',
    'ComponentInstanceConfigurationLogCollectionPolicy',
    'ComponentInstanceConfigurationLogCollectionPolicyContainerMounting',
    'ComponentInstanceConfigurationProbe',
    'ComponentInstanceConfigurationProbeLiveness',
    'ComponentInstanceConfigurationProbeLivenessCommandParam',
    'ComponentInstanceConfigurationProbeLivenessHttpParam',
    'ComponentInstanceConfigurationProbeLivenessTcpParam',
    'ComponentInstanceConfigurationProbeReadiness',
    'ComponentInstanceConfigurationProbeReadinessCommandParam',
    'ComponentInstanceConfigurationProbeReadinessHttpParam',
    'ComponentInstanceConfigurationProbeReadinessTcpParam',
    'ComponentInstanceConfigurationScheduler',
    'ComponentInstanceConfigurationSchedulerAffinity',
    'ComponentInstanceConfigurationSchedulerAntiAffinity',
    'ComponentInstanceConfigurationStorage',
    'ComponentInstanceConfigurationStorageMount',
    'ComponentInstanceConfigurationStorageParameter',
    'ComponentInstanceConfigurationStrategy',
    'ComponentInstanceExternalAccess',
    'ComponentInstanceReferResource',
    'ComponentSource',
    'ComponentSourceProperties',
    'ComponentV3Affinity',
    'ComponentV3AffinityMatchExpression',
    'ComponentV3AntiAffinity',
    'ComponentV3AntiAffinityMatchExpression',
    'ComponentV3CustomMetric',
    'ComponentV3DeployStrategy',
    'ComponentV3Env',
    'ComponentV3ExternalAccess',
    'ComponentV3LivenessProbe',
    'ComponentV3Log',
    'ComponentV3Mesher',
    'ComponentV3PostStart',
    'ComponentV3PreStop',
    'ComponentV3ReadinessProbe',
    'ComponentV3ReferResource',
    'ComponentV3RuntimeStack',
    'ComponentV3Storage',
    'ComponentV3StorageMount',
    'ConfigurationV3Component',
    'EnvironmentAssociateV3Resource',
    'EnvironmentBasicResource',
    'EnvironmentOptionalResource',
    'GetApplicationsV3ApplicationResult',
    'GetComponentRecordsV3RecordResult',
    'GetComponentRecordsV3RecordJobResult',
    'GetComponentRecordsV3RecordJobJobInfoResult',
    'GetComponentRuntimesRuntimeResult',
    'GetComponentUsedResourcesV3ApplicationResult',
    'GetComponentUsedResourcesV3EnvironmentResult',
    'GetComponentsV3ComponentResult',
    'GetComponentsV3ComponentExternalAccessResult',
    'GetComponentsV3ComponentReferResourceResult',
    'GetComponentsV3ComponentRuntimeStackResult',
    'GetEnvironmentsV3EnvironmentResult',
    'GetInnerRuntimeStacksV3RuntimeStackResult',
    'GetRuntimeStacksV3RuntimeStackResult',
]

@pulumi.output_type
class ApplicationConfigurationV3Configuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignStrategy":
            suggest = "assign_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationConfigurationV3Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationConfigurationV3Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationConfigurationV3Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 envs: Sequence['outputs.ApplicationConfigurationV3ConfigurationEnv'],
                 assign_strategy: Optional[_builtins.bool] = None):
        """
        :param Sequence['ApplicationConfigurationV3ConfigurationEnvArgs'] envs: Specifies the list of the environment variables.  
               The env structure is documented below.
        :param _builtins.bool assign_strategy: Specifies whether the effective strategy is the continuously effective.  
               The valid values are as follows:
               + **true**: First time effective. Application-level environment variables only take effect when the component is
               first created, and subsequent modifications of the application-level environment variables will not be synchronized
               with the environment variables in the component.
               + **false**: Continuously effective. Environment variables during component upgrades are updated according to the
               application-level environment variables.
               
               Defaults to **false**.
               
               <a name="servicestage_v3_application_configuration_env"></a>
               The `env` block supports:
        """
        pulumi.set(__self__, "envs", envs)
        if assign_strategy is not None:
            pulumi.set(__self__, "assign_strategy", assign_strategy)

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.ApplicationConfigurationV3ConfigurationEnv']:
        """
        Specifies the list of the environment variables.  
        The env structure is documented below.
        """
        return pulumi.get(self, "envs")

    @_builtins.property
    @pulumi.getter(name="assignStrategy")
    def assign_strategy(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the effective strategy is the continuously effective.  
        The valid values are as follows:
        + **true**: First time effective. Application-level environment variables only take effect when the component is
        first created, and subsequent modifications of the application-level environment variables will not be synchronized
        with the environment variables in the component.
        + **false**: Continuously effective. Environment variables during component upgrades are updated according to the
        application-level environment variables.

        Defaults to **false**.

        <a name="servicestage_v3_application_configuration_env"></a>
        The `env` block supports:
        """
        return pulumi.get(self, "assign_strategy")


@pulumi.output_type
class ApplicationConfigurationV3ConfigurationEnv(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the environment variable.  
               The valid length is limited from `1` to `64`, only Chinese characters, English letters, digits, hyphens (-),
               underscores (\\_) and dots (.) are allowed.
               The name must start with an English letter, hyphen (-) or underscore (\\_).
               
               > Variable names must be unique within the same application environment.
        :param _builtins.str value: Specifies the value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the environment variable.  
        The valid length is limited from `1` to `64`, only Chinese characters, English letters, digits, hyphens (-),
        underscores (\\_) and dots (.) are allowed.
        The name must start with an English letter, hyphen (-) or underscore (\\_).

        > Variable names must be unique within the same application environment.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationEnvironment(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 variables: Sequence['outputs.ApplicationEnvironmentVariable']):
        """
        :param _builtins.str id: Specifies the environment ID to which the variables belongs.
        :param Sequence['ApplicationEnvironmentVariableArgs'] variables: Specifies the list of environment variables.
               The object structure is documented below.
               
               <a name="servicestage_app_variables"></a>
               The `variable` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the environment ID to which the variables belongs.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.ApplicationEnvironmentVariable']:
        """
        Specifies the list of environment variables.
        The object structure is documented below.

        <a name="servicestage_app_variables"></a>
        The `variable` block supports:
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationEnvironmentVariable(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the variable name. The name can contain `1` to `64` characters, only letters,
               digits, underscores (_), hyphens (-) and dots (.) are allowed. The name cannot start with a digit or dot.
        :param _builtins.str value: Specifies the variable value. The value can contain a maximum of `2,048` characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the variable name. The name can contain `1` to `64` characters, only letters,
        digits, underscores (_), hyphens (-) and dots (.) are allowed. The name cannot start with a digit or dot.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the variable value. The value can contain a maximum of `2,048` characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentBuilder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "dockerfilePath":
            suggest = "dockerfile_path"
        elif key == "nodeLabel":
            suggest = "node_label"
        elif key == "usePublicCluster":
            suggest = "use_public_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentBuilder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentBuilder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentBuilder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 organization: _builtins.str,
                 cluster_name: Optional[_builtins.str] = None,
                 cluster_type: Optional[_builtins.str] = None,
                 cmd: Optional[_builtins.str] = None,
                 dockerfile_path: Optional[_builtins.str] = None,
                 node_label: Optional[Mapping[str, _builtins.str]] = None,
                 use_public_cluster: Optional[_builtins.bool] = None):
        """
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param _builtins.str organization: Specifies the organization name.
               The organization is usually **domain name**. You can find out in the organization management of SWR.
        :param _builtins.str cluster_name: Specifies the cluster Name.
        :param _builtins.str cluster_type: Specifies the cluster type.
        :param _builtins.str cmd: Specifies the build command. If omitted, the default command will be used.
               + About the  default command or script: build.sh in the root directory will be preferentially executed.
               If build.sh does not exist, the code will be compiled using the common method of the selected language,
               for example, mvn clean package for Java.
               + About the custom command: Commands will be customized using the selected language.
               Alternatively, the default command or script will be used after build.sh is modified.
        :param _builtins.str dockerfile_path: Specifies the file path for dockerfile.
        :param Mapping[str, _builtins.str] node_label: Specifies the filter labels for CCE nodes.
               
               > Before using the label, please make sure that the node is bound to the EIP and can access the public network.
               
               <a name="servicestage_component_properties"></a>
               The `properties` block supports:
        :param _builtins.bool use_public_cluster: Specifies whether to use the public cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "organization", organization)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cmd is not None:
            pulumi.set(__self__, "cmd", cmd)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if node_label is not None:
            pulumi.set(__self__, "node_label", node_label)
        if use_public_cluster is not None:
            pulumi.set(__self__, "use_public_cluster", use_public_cluster)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the organization name.
        The organization is usually **domain name**. You can find out in the organization management of SWR.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        Specifies the cluster Name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[_builtins.str]:
        """
        Specifies the cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter
    def cmd(self) -> Optional[_builtins.str]:
        """
        Specifies the build command. If omitted, the default command will be used.
        + About the  default command or script: build.sh in the root directory will be preferentially executed.
        If build.sh does not exist, the code will be compiled using the common method of the selected language,
        for example, mvn clean package for Java.
        + About the custom command: Commands will be customized using the selected language.
        Alternatively, the default command or script will be used after build.sh is modified.
        """
        return pulumi.get(self, "cmd")

    @_builtins.property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[_builtins.str]:
        """
        Specifies the file path for dockerfile.
        """
        return pulumi.get(self, "dockerfile_path")

    @_builtins.property
    @pulumi.getter(name="nodeLabel")
    def node_label(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the filter labels for CCE nodes.

        > Before using the label, please make sure that the node is bound to the EIP and can access the public network.

        <a name="servicestage_component_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "node_label")

    @_builtins.property
    @pulumi.getter(name="usePublicCluster")
    def use_public_cluster(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to use the public cluster.
        """
        return pulumi.get(self, "use_public_cluster")


@pulumi.output_type
class ComponentInstanceArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 storage: _builtins.str,
                 type: _builtins.str,
                 url: _builtins.str,
                 auth_type: Optional[_builtins.str] = None,
                 properties: Optional['outputs.ComponentInstanceArtifactProperties'] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the configuration item.
        :param _builtins.str storage: Specifies the data storage configuration.
               The object structure is documented below.
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param _builtins.str url: Specifies the software package or image address.
               For a component deployed on a VM, this parameter is the software package address.
               For a component deployed based on a container, this parameter is the image address or component name:v${index}.
               The latter indicates that the component source code or the image automatically built using the software package
               will be used.
        :param _builtins.str auth_type: Specifies the authentication mode.
               The valid values are **iam** and **none**. Defaults to **iam**.
        :param 'ComponentInstanceArtifactPropertiesArgs' properties: Specifies the properties of the OBS object.
               This parameter is available only `storage` is **obs**.
               The object structure is documented below.
               
               <a name="servicestage_properties"></a>
               The `properties` block supports:
        :param _builtins.str version: Specifies the version number.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> _builtins.str:
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        return pulumi.get(self, "storage")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Specifies the software package or image address.
        For a component deployed on a VM, this parameter is the software package address.
        For a component deployed based on a container, this parameter is the image address or component name:v${index}.
        The latter indicates that the component source code or the image automatically built using the software package
        will be used.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication mode.
        The valid values are **iam** and **none**. Defaults to **iam**.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ComponentInstanceArtifactProperties']:
        """
        Specifies the properties of the OBS object.
        This parameter is available only `storage` is **obs**.
        The object structure is documented below.

        <a name="servicestage_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ComponentInstanceArtifactProperties(dict):
    def __init__(__self__, *,
                 bucket: Optional[_builtins.str] = None,
                 endpoint: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: Specifies the OBS bucket name.
        :param _builtins.str endpoint: Specifies the OBS bucket endpoint.
        :param _builtins.str key: Specifies the key name of the OBS object.
               
               <a name="servicestage_configuration"></a>
               The `configuration` block supports:
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the OBS bucket name.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[_builtins.str]:
        """
        Specifies the OBS bucket endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key name of the OBS object.

        <a name="servicestage_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ComponentInstanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envVariables":
            suggest = "env_variables"
        elif key == "logCollectionPolicies":
            suggest = "log_collection_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env_variables: Optional[Sequence['outputs.ComponentInstanceConfigurationEnvVariable']] = None,
                 lifecycle: Optional['outputs.ComponentInstanceConfigurationLifecycle'] = None,
                 log_collection_policies: Optional[Sequence['outputs.ComponentInstanceConfigurationLogCollectionPolicy']] = None,
                 probe: Optional['outputs.ComponentInstanceConfigurationProbe'] = None,
                 scheduler: Optional['outputs.ComponentInstanceConfigurationScheduler'] = None,
                 storages: Optional[Sequence['outputs.ComponentInstanceConfigurationStorage']] = None,
                 strategy: Optional['outputs.ComponentInstanceConfigurationStrategy'] = None):
        """
        :param Sequence['ComponentInstanceConfigurationEnvVariableArgs'] env_variables: Specifies the environment variables.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationLifecycleArgs' lifecycle: Specifies the lifecycle.
               The object structure is documented below.
        :param Sequence['ComponentInstanceConfigurationLogCollectionPolicyArgs'] log_collection_policies: Specifies the policies of the log collection.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationProbeArgs' probe: Specifies the variable value.
               The object structure is documented below.
               
               <a name="servicestage_env_variables"></a>
               The `env_variable` block supports:
        :param 'ComponentInstanceConfigurationSchedulerArgs' scheduler: Specifies the scheduling policy.
               The key indicates the component name. In the Docker container scenario, key indicates the container name.
               If the source parameters of a component specify the software package source, this parameter is optional, and the
               software package source of the component is inherited by default. Otherwise, this parameter is required.
               The object structure is documented below.
        :param Sequence['ComponentInstanceConfigurationStorageArgs'] storages: Specifies the data storage configuration.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationStrategyArgs' strategy: Specifies the upgrade policy.
               The object structure is documented below.
        """
        if env_variables is not None:
            pulumi.set(__self__, "env_variables", env_variables)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if log_collection_policies is not None:
            pulumi.set(__self__, "log_collection_policies", log_collection_policies)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @_builtins.property
    @pulumi.getter(name="envVariables")
    def env_variables(self) -> Optional[Sequence['outputs.ComponentInstanceConfigurationEnvVariable']]:
        """
        Specifies the environment variables.
        The object structure is documented below.
        """
        return pulumi.get(self, "env_variables")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.ComponentInstanceConfigurationLifecycle']:
        """
        Specifies the lifecycle.
        The object structure is documented below.
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="logCollectionPolicies")
    def log_collection_policies(self) -> Optional[Sequence['outputs.ComponentInstanceConfigurationLogCollectionPolicy']]:
        """
        Specifies the policies of the log collection.
        The object structure is documented below.
        """
        return pulumi.get(self, "log_collection_policies")

    @_builtins.property
    @pulumi.getter
    def probe(self) -> Optional['outputs.ComponentInstanceConfigurationProbe']:
        """
        Specifies the variable value.
        The object structure is documented below.

        <a name="servicestage_env_variables"></a>
        The `env_variable` block supports:
        """
        return pulumi.get(self, "probe")

    @_builtins.property
    @pulumi.getter
    def scheduler(self) -> Optional['outputs.ComponentInstanceConfigurationScheduler']:
        """
        Specifies the scheduling policy.
        The key indicates the component name. In the Docker container scenario, key indicates the container name.
        If the source parameters of a component specify the software package source, this parameter is optional, and the
        software package source of the component is inherited by default. Otherwise, this parameter is required.
        The object structure is documented below.
        """
        return pulumi.get(self, "scheduler")

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.ComponentInstanceConfigurationStorage']]:
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        return pulumi.get(self, "storages")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ComponentInstanceConfigurationStrategy']:
        """
        Specifies the upgrade policy.
        The object structure is documented below.
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class ComponentInstanceConfigurationEnvVariable(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the configuration item.
        :param _builtins.str value: Specifies the variable value.
               
               <a name="servicestage_storages"></a>
               The `storage` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the variable value.

        <a name="servicestage_storages"></a>
        The `storage` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentInstanceConfigurationLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entrypoint: Optional['outputs.ComponentInstanceConfigurationLifecycleEntrypoint'] = None,
                 post_start: Optional['outputs.ComponentInstanceConfigurationLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.ComponentInstanceConfigurationLifecyclePreStop'] = None):
        """
        :param 'ComponentInstanceConfigurationLifecycleEntrypointArgs' entrypoint: Specifies the startup commands.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationLifecyclePostStartArgs' post_start: Specifies the post-start processing.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationLifecyclePreStopArgs' pre_stop: Specifies the pre-stop processing.
               The object structure is documented below.
               
               <a name="servicestage_log_collection_policies"></a>
               The `log_collection_policy` block supports:
        """
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter
    def entrypoint(self) -> Optional['outputs.ComponentInstanceConfigurationLifecycleEntrypoint']:
        """
        Specifies the startup commands.
        The object structure is documented below.
        """
        return pulumi.get(self, "entrypoint")

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.ComponentInstanceConfigurationLifecyclePostStart']:
        """
        Specifies the post-start processing.
        The object structure is documented below.
        """
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.ComponentInstanceConfigurationLifecyclePreStop']:
        """
        Specifies the pre-stop processing.
        The object structure is documented below.

        <a name="servicestage_log_collection_policies"></a>
        The `log_collection_policy` block supports:
        """
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class ComponentInstanceConfigurationLifecycleEntrypoint(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] args: Specifies the running parameters.
               
               <a name="servicestage_lifecycle_process"></a>
               The `post_start` and `pre_stop` block supports:
        :param Sequence[_builtins.str] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        """
        Specifies the running parameters.

        <a name="servicestage_lifecycle_process"></a>
        The `post_start` and `pre_stop` block supports:
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class ComponentInstanceConfigurationLifecyclePostStart(dict):
    def __init__(__self__, *,
                 parameters: 'outputs.ComponentInstanceConfigurationLifecyclePostStartParameters',
                 type: _builtins.str):
        """
        :param 'ComponentInstanceConfigurationLifecyclePostStartParametersArgs' parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> 'outputs.ComponentInstanceConfigurationLifecyclePostStartParameters':
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentInstanceConfigurationLifecyclePostStartParameters(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        :param _builtins.str host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        :param _builtins.str path: Specifies the request path.
        :param _builtins.int port: Specifies the listening port of the application component process.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentInstanceConfigurationLifecyclePreStop(dict):
    def __init__(__self__, *,
                 parameters: 'outputs.ComponentInstanceConfigurationLifecyclePreStopParameters',
                 type: _builtins.str):
        """
        :param 'ComponentInstanceConfigurationLifecyclePreStopParametersArgs' parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> 'outputs.ComponentInstanceConfigurationLifecyclePreStopParameters':
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentInstanceConfigurationLifecyclePreStopParameters(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        :param _builtins.str host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        :param _builtins.str path: Specifies the request path.
        :param _builtins.int port: Specifies the listening port of the application component process.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentInstanceConfigurationLogCollectionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerMountings":
            suggest = "container_mountings"
        elif key == "hostPath":
            suggest = "host_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationLogCollectionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationLogCollectionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationLogCollectionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_mountings: Sequence['outputs.ComponentInstanceConfigurationLogCollectionPolicyContainerMounting'],
                 host_path: Optional[_builtins.str] = None):
        """
        :param Sequence['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs'] container_mountings: Specifies the configurations of the container mounting.
               The object structure is documented below.
        :param _builtins.str host_path: Specifies the The host path that will be mounted to the specified container path.
               
               <a name="servicestage_container_mounting"></a>
               The `container_mounting` block supports:
        """
        pulumi.set(__self__, "container_mountings", container_mountings)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)

    @_builtins.property
    @pulumi.getter(name="containerMountings")
    def container_mountings(self) -> Sequence['outputs.ComponentInstanceConfigurationLogCollectionPolicyContainerMounting']:
        """
        Specifies the configurations of the container mounting.
        The object structure is documented below.
        """
        return pulumi.get(self, "container_mountings")

    @_builtins.property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[_builtins.str]:
        """
        Specifies the The host path that will be mounted to the specified container path.

        <a name="servicestage_container_mounting"></a>
        The `container_mounting` block supports:
        """
        return pulumi.get(self, "host_path")


@pulumi.output_type
class ComponentInstanceConfigurationLogCollectionPolicyContainerMounting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agingPeriod":
            suggest = "aging_period"
        elif key == "hostExtendPath":
            suggest = "host_extend_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationLogCollectionPolicyContainerMounting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationLogCollectionPolicyContainerMounting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationLogCollectionPolicyContainerMounting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 aging_period: Optional[_builtins.str] = None,
                 host_extend_path: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: Specifies the request path.
        :param _builtins.str aging_period: Specifies the aging period.
               The valid values are **Hourly**, **Daily** and **Weekly**. The default value is **Hourly**.
               
               <a name="servicestage_entrypoint"></a>
               The `entrypoint` block supports:
        :param _builtins.str host_extend_path: Specifies the extended host path.
               This parameter can be configured only when `host_path` is configured.
               The valid values are as follows:
               + **PodUID**
               + **PodName**
               + **PodUID/ContainerName**
               + **PodName/ContainerName**
        """
        pulumi.set(__self__, "path", path)
        if aging_period is not None:
            pulumi.set(__self__, "aging_period", aging_period)
        if host_extend_path is not None:
            pulumi.set(__self__, "host_extend_path", host_extend_path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="agingPeriod")
    def aging_period(self) -> Optional[_builtins.str]:
        """
        Specifies the aging period.
        The valid values are **Hourly**, **Daily** and **Weekly**. The default value is **Hourly**.

        <a name="servicestage_entrypoint"></a>
        The `entrypoint` block supports:
        """
        return pulumi.get(self, "aging_period")

    @_builtins.property
    @pulumi.getter(name="hostExtendPath")
    def host_extend_path(self) -> Optional[_builtins.str]:
        """
        Specifies the extended host path.
        This parameter can be configured only when `host_path` is configured.
        The valid values are as follows:
        + **PodUID**
        + **PodName**
        + **PodUID/ContainerName**
        + **PodName/ContainerName**
        """
        return pulumi.get(self, "host_extend_path")


@pulumi.output_type
class ComponentInstanceConfigurationProbe(dict):
    def __init__(__self__, *,
                 liveness: Optional['outputs.ComponentInstanceConfigurationProbeLiveness'] = None,
                 readiness: Optional['outputs.ComponentInstanceConfigurationProbeReadiness'] = None):
        """
        :param 'ComponentInstanceConfigurationProbeLivenessArgs' liveness: Specifies the component liveness probe.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationProbeReadinessArgs' readiness: Specifies the component service probe.
               The object structure is documented below.
               
               <a name="servicestage_probe_detail"></a>
               The `liveness` and `readiness` block supports:
        """
        if liveness is not None:
            pulumi.set(__self__, "liveness", liveness)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @_builtins.property
    @pulumi.getter
    def liveness(self) -> Optional['outputs.ComponentInstanceConfigurationProbeLiveness']:
        """
        Specifies the component liveness probe.
        The object structure is documented below.
        """
        return pulumi.get(self, "liveness")

    @_builtins.property
    @pulumi.getter
    def readiness(self) -> Optional['outputs.ComponentInstanceConfigurationProbeReadiness']:
        """
        Specifies the component service probe.
        The object structure is documented below.

        <a name="servicestage_probe_detail"></a>
        The `liveness` and `readiness` block supports:
        """
        return pulumi.get(self, "readiness")


@pulumi.output_type
class ComponentInstanceConfigurationProbeLiveness(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandParam":
            suggest = "command_param"
        elif key == "httpParam":
            suggest = "http_param"
        elif key == "tcpParam":
            suggest = "tcp_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationProbeLiveness. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationProbeLiveness.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationProbeLiveness.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 command_param: Optional['outputs.ComponentInstanceConfigurationProbeLivenessCommandParam'] = None,
                 delay: Optional[_builtins.int] = None,
                 http_param: Optional['outputs.ComponentInstanceConfigurationProbeLivenessHttpParam'] = None,
                 tcp_param: Optional['outputs.ComponentInstanceConfigurationProbeLivenessTcpParam'] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param 'ComponentInstanceConfigurationProbeLivenessCommandParamArgs' command_param: Specifies the commands. Required if `type` is **command**.
               The object structure is documented below.
        :param _builtins.int delay: Specifies the interval between the startup and detection.
        :param 'ComponentInstanceConfigurationProbeLivenessHttpParamArgs' http_param: Specifies the commands. Required if `type` is **http**.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationProbeLivenessTcpParamArgs' tcp_param: Specifies the commands. Required if `type` is **tcp**.
               The object structure is documented below.
        :param _builtins.int timeout: Specifies the detection timeout interval.
               
               <a name="servicestage_command_param"></a>
               The `command_param` block supports:
        """
        pulumi.set(__self__, "type", type)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if http_param is not None:
            pulumi.set(__self__, "http_param", http_param)
        if tcp_param is not None:
            pulumi.set(__self__, "tcp_param", tcp_param)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeLivenessCommandParam']:
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[_builtins.int]:
        """
        Specifies the interval between the startup and detection.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter(name="httpParam")
    def http_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeLivenessHttpParam']:
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        return pulumi.get(self, "http_param")

    @_builtins.property
    @pulumi.getter(name="tcpParam")
    def tcp_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeLivenessTcpParam']:
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        return pulumi.get(self, "tcp_param")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ComponentInstanceConfigurationProbeLivenessCommandParam(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class ComponentInstanceConfigurationProbeLivenessHttpParam(dict):
    def __init__(__self__, *,
                 path: _builtins.str,
                 port: _builtins.int,
                 scheme: _builtins.str,
                 host: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: Specifies the request path.
        :param _builtins.int port: Specifies the listening port of the application component process.
        :param _builtins.str scheme: Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        :param _builtins.str host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "scheme")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")


@pulumi.output_type
class ComponentInstanceConfigurationProbeLivenessTcpParam(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        """
        :param _builtins.int port: Specifies the listening port of the application component process.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentInstanceConfigurationProbeReadiness(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandParam":
            suggest = "command_param"
        elif key == "httpParam":
            suggest = "http_param"
        elif key == "tcpParam":
            suggest = "tcp_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationProbeReadiness. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationProbeReadiness.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationProbeReadiness.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 command_param: Optional['outputs.ComponentInstanceConfigurationProbeReadinessCommandParam'] = None,
                 delay: Optional[_builtins.int] = None,
                 http_param: Optional['outputs.ComponentInstanceConfigurationProbeReadinessHttpParam'] = None,
                 tcp_param: Optional['outputs.ComponentInstanceConfigurationProbeReadinessTcpParam'] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param 'ComponentInstanceConfigurationProbeReadinessCommandParamArgs' command_param: Specifies the commands. Required if `type` is **command**.
               The object structure is documented below.
        :param _builtins.int delay: Specifies the interval between the startup and detection.
        :param 'ComponentInstanceConfigurationProbeReadinessHttpParamArgs' http_param: Specifies the commands. Required if `type` is **http**.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationProbeReadinessTcpParamArgs' tcp_param: Specifies the commands. Required if `type` is **tcp**.
               The object structure is documented below.
        :param _builtins.int timeout: Specifies the detection timeout interval.
               
               <a name="servicestage_command_param"></a>
               The `command_param` block supports:
        """
        pulumi.set(__self__, "type", type)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if http_param is not None:
            pulumi.set(__self__, "http_param", http_param)
        if tcp_param is not None:
            pulumi.set(__self__, "tcp_param", tcp_param)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeReadinessCommandParam']:
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[_builtins.int]:
        """
        Specifies the interval between the startup and detection.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter(name="httpParam")
    def http_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeReadinessHttpParam']:
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        return pulumi.get(self, "http_param")

    @_builtins.property
    @pulumi.getter(name="tcpParam")
    def tcp_param(self) -> Optional['outputs.ComponentInstanceConfigurationProbeReadinessTcpParam']:
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        return pulumi.get(self, "tcp_param")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ComponentInstanceConfigurationProbeReadinessCommandParam(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class ComponentInstanceConfigurationProbeReadinessHttpParam(dict):
    def __init__(__self__, *,
                 path: _builtins.str,
                 port: _builtins.int,
                 scheme: _builtins.str,
                 host: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: Specifies the request path.
        :param _builtins.int port: Specifies the listening port of the application component process.
        :param _builtins.str scheme: Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        :param _builtins.str host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "scheme")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")


@pulumi.output_type
class ComponentInstanceConfigurationProbeReadinessTcpParam(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        """
        :param _builtins.int port: Specifies the listening port of the application component process.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentInstanceConfigurationScheduler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "antiAffinity":
            suggest = "anti_affinity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationScheduler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationScheduler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationScheduler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affinity: Optional['outputs.ComponentInstanceConfigurationSchedulerAffinity'] = None,
                 anti_affinity: Optional['outputs.ComponentInstanceConfigurationSchedulerAntiAffinity'] = None):
        """
        :param 'ComponentInstanceConfigurationSchedulerAffinityArgs' affinity: Specifies the commands.
               The object structure is documented below.
        :param 'ComponentInstanceConfigurationSchedulerAntiAffinityArgs' anti_affinity: Specifies the commands.
               The object structure is documented below.
               
               <a name="servicestage_affinity"></a>
               The `affinity` and `anti_affinity` block supports:
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if anti_affinity is not None:
            pulumi.set(__self__, "anti_affinity", anti_affinity)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ComponentInstanceConfigurationSchedulerAffinity']:
        """
        Specifies the commands.
        The object structure is documented below.
        """
        return pulumi.get(self, "affinity")

    @_builtins.property
    @pulumi.getter(name="antiAffinity")
    def anti_affinity(self) -> Optional['outputs.ComponentInstanceConfigurationSchedulerAntiAffinity']:
        """
        Specifies the commands.
        The object structure is documented below.

        <a name="servicestage_affinity"></a>
        The `affinity` and `anti_affinity` block supports:
        """
        return pulumi.get(self, "anti_affinity")


@pulumi.output_type
class ComponentInstanceConfigurationSchedulerAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "instanceNames":
            suggest = "instance_names"
        elif key == "privateIps":
            suggest = "private_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationSchedulerAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationSchedulerAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationSchedulerAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[_builtins.str]] = None,
                 instance_names: Optional[Sequence[_builtins.str]] = None,
                 private_ips: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] availability_zones: Specifies the AZ list.
        :param Sequence[_builtins.str] instance_names: Specifies the list of component instance names.
               
               <a name="servicestage_probe"></a>
               The `probe` block supports:
        :param Sequence[_builtins.str] private_ips: Specifies the node private IP address list.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if instance_names is not None:
            pulumi.set(__self__, "instance_names", instance_names)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the AZ list.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        return pulumi.get(self, "instance_names")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the node private IP address list.
        """
        return pulumi.get(self, "private_ips")


@pulumi.output_type
class ComponentInstanceConfigurationSchedulerAntiAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "instanceNames":
            suggest = "instance_names"
        elif key == "privateIps":
            suggest = "private_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationSchedulerAntiAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationSchedulerAntiAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationSchedulerAntiAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[_builtins.str]] = None,
                 instance_names: Optional[Sequence[_builtins.str]] = None,
                 private_ips: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] availability_zones: Specifies the AZ list.
        :param Sequence[_builtins.str] instance_names: Specifies the list of component instance names.
               
               <a name="servicestage_probe"></a>
               The `probe` block supports:
        :param Sequence[_builtins.str] private_ips: Specifies the node private IP address list.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if instance_names is not None:
            pulumi.set(__self__, "instance_names", instance_names)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the AZ list.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        return pulumi.get(self, "instance_names")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the node private IP address list.
        """
        return pulumi.get(self, "private_ips")


@pulumi.output_type
class ComponentInstanceConfigurationStorage(dict):
    def __init__(__self__, *,
                 mounts: Sequence['outputs.ComponentInstanceConfigurationStorageMount'],
                 parameter: 'outputs.ComponentInstanceConfigurationStorageParameter',
                 type: _builtins.str):
        """
        :param Sequence['ComponentInstanceConfigurationStorageMountArgs'] mounts: Specifies the directory mounted to the container.
               The object structure is documented below.
               
               <a name="servicestage_storage_parameters"></a>
               The `parameter` block supports:
        :param 'ComponentInstanceConfigurationStorageParameterArgs' parameter: Specifies the storage parameters.
               The object structure is documented below.
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "mounts", mounts)
        pulumi.set(__self__, "parameter", parameter)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def mounts(self) -> Sequence['outputs.ComponentInstanceConfigurationStorageMount']:
        """
        Specifies the directory mounted to the container.
        The object structure is documented below.

        <a name="servicestage_storage_parameters"></a>
        The `parameter` block supports:
        """
        return pulumi.get(self, "mounts")

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> 'outputs.ComponentInstanceConfigurationStorageParameter':
        """
        Specifies the storage parameters.
        The object structure is documented below.
        """
        return pulumi.get(self, "parameter")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentInstanceConfigurationStorageMount(dict):
    def __init__(__self__, *,
                 path: _builtins.str,
                 readonly: _builtins.bool,
                 subpath: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: Specifies the request path.
        :param _builtins.bool readonly: Specifies the mounted disk permission is read-only or read-write.
               + **true**: read-only.
               + **false**: read-write.
        :param _builtins.str subpath: Specifies the subpath of the mounted disk.
               This parameter is applicable to `http` type.
               
               <a name="servicestage_strategy"></a>
               The `strategy` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "readonly", readonly)
        if subpath is not None:
            pulumi.set(__self__, "subpath", subpath)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Specifies the mounted disk permission is read-only or read-write.
        + **true**: read-only.
        + **false**: read-write.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter
    def subpath(self) -> Optional[_builtins.str]:
        """
        Specifies the subpath of the mounted disk.
        This parameter is applicable to `http` type.

        <a name="servicestage_strategy"></a>
        The `strategy` block supports:
        """
        return pulumi.get(self, "subpath")


@pulumi.output_type
class ComponentInstanceConfigurationStorageParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimName":
            suggest = "claim_name"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentInstanceConfigurationStorageParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentInstanceConfigurationStorageParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentInstanceConfigurationStorageParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 claim_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 secret_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str claim_name: Specifies the PVC name.
        :param _builtins.str name: Specifies the configuration item.
        :param _builtins.str path: Specifies the request path.
        :param _builtins.str secret_name: Specifies the Secret name. Required if the storage `type` is **Secret**.
               
               <a name="servicestage_storage_mounts"></a>
               The `mount` block supports:
        """
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[_builtins.str]:
        """
        Specifies the PVC name.
        """
        return pulumi.get(self, "claim_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[_builtins.str]:
        """
        Specifies the Secret name. Required if the storage `type` is **Secret**.

        <a name="servicestage_storage_mounts"></a>
        The `mount` block supports:
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ComponentInstanceConfigurationStrategy(dict):
    def __init__(__self__, *,
                 upgrade: Optional[_builtins.str] = None):
        """
        :param _builtins.str upgrade: Specifies the upgrade policy.
               The valid values are **Recreate** or **RollingUpdate**. The default value is **RollingUpdate**.
               The **Recreate** indicates in-place upgrade while the **RollingUpdate** indicates rolling upgrade.
               
               <a name="servicestage_lifecycle"></a>
               The `lifecycle` block supports:
        """
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)

    @_builtins.property
    @pulumi.getter
    def upgrade(self) -> Optional[_builtins.str]:
        """
        Specifies the upgrade policy.
        The valid values are **Recreate** or **RollingUpdate**. The default value is **RollingUpdate**.
        The **Recreate** indicates in-place upgrade while the **RollingUpdate** indicates rolling upgrade.

        <a name="servicestage_lifecycle"></a>
        The `lifecycle` block supports:
        """
        return pulumi.get(self, "upgrade")


@pulumi.output_type
class ComponentInstanceExternalAccess(dict):
    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Specifies the access address. For example: `www.example.com`.
        :param _builtins.int port: Specifies the listening port of the application component process.
        :param _builtins.str protocol: Specifies the protocol. The valid values are **HTTP** and **HTTPS**.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Specifies the access address. For example: `www.example.com`.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ComponentInstanceReferResource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 alias: Optional[_builtins.str] = None,
                 parameters: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str id: Specifies the resource ID.
               If the `type` is set to **ecs**, the value of this parameter must be **Default**.
        :param _builtins.str type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param _builtins.str alias: Specifies the application alias, which is provided only in DCS scenario.
               The valid values are: **distributed_session**, **distributed_cache** and **distributed_session, distributed_cache**.
               Defaults to **distributed_session, distributed_cache**.
        :param Mapping[str, _builtins.str] parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        If the `type` is set to **ecs**, the value of this parameter must be **Default**.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[_builtins.str]:
        """
        Specifies the application alias, which is provided only in DCS scenario.
        The valid values are: **distributed_session**, **distributed_cache** and **distributed_session, distributed_cache**.
        Defaults to **distributed_session, distributed_cache**.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ComponentSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoNamespace":
            suggest = "repo_namespace"
        elif key == "repoRef":
            suggest = "repo_ref"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 url: _builtins.str,
                 authorization: Optional[_builtins.str] = None,
                 properties: Optional['outputs.ComponentSourceProperties'] = None,
                 repo_namespace: Optional[_builtins.str] = None,
                 repo_ref: Optional[_builtins.str] = None,
                 storage_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of repository source or storage.
               The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
        :param _builtins.str url: Specifies the URL of the repository or package storage.
        :param _builtins.str authorization: Specifies the authorization name.
               This parameter and `storage_type` are alternative.
        :param 'ComponentSourcePropertiesArgs' properties: Specifies the component builder's properties.
               The object structure is documented below.
               
               <a name="servicestage_component_builder"></a>
               The `builder` block supports:
        :param _builtins.str repo_namespace: Specifies the namespace name.
        :param _builtins.str repo_ref: Specifies the name of the branch of the code repository.
               The default value is `master`.
        :param _builtins.str storage_type: Specifies the storage type, such as **obs**, **swr**.
               This parameter is conflict with `repo_ref` and `repo_namespace`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if repo_namespace is not None:
            pulumi.set(__self__, "repo_namespace", repo_namespace)
        if repo_ref is not None:
            pulumi.set(__self__, "repo_ref", repo_ref)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of repository source or storage.
        The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Specifies the URL of the repository or package storage.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[_builtins.str]:
        """
        Specifies the authorization name.
        This parameter and `storage_type` are alternative.
        """
        return pulumi.get(self, "authorization")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ComponentSourceProperties']:
        """
        Specifies the component builder's properties.
        The object structure is documented below.

        <a name="servicestage_component_builder"></a>
        The `builder` block supports:
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="repoNamespace")
    def repo_namespace(self) -> Optional[_builtins.str]:
        """
        Specifies the namespace name.
        """
        return pulumi.get(self, "repo_namespace")

    @_builtins.property
    @pulumi.getter(name="repoRef")
    def repo_ref(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the branch of the code repository.
        The default value is `master`.
        """
        return pulumi.get(self, "repo_ref")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[_builtins.str]:
        """
        Specifies the storage type, such as **obs**, **swr**.
        This parameter is conflict with `repo_ref` and `repo_namespace`.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ComponentSourceProperties(dict):
    def __init__(__self__, *,
                 bucket: Optional[_builtins.str] = None,
                 endpoint: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: Specifies the bucket name of obs.
        :param _builtins.str endpoint: Specifies the endpoint of obs.
        :param _builtins.str key: Specifies the key of obs.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        Specifies the bucket name of obs.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[_builtins.str]:
        """
        Specifies the endpoint of obs.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of obs.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ComponentV3Affinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3Affinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3Affinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3Affinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: _builtins.str,
                 kind: _builtins.str,
                 match_expressions: Sequence['outputs.ComponentV3AffinityMatchExpression'],
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str condition: Specifies the condition type of the (anti) affinity rule.
        :param _builtins.str kind: Specifies the kind of the (anti) affinity rule.
        :param Sequence['ComponentV3AffinityMatchExpressionArgs'] match_expressions: Specifies the list of the match rules for (anti) affinity.  
               The match_expressions structure is documented below.
        :param _builtins.int weight: Specifies the weight of the (anti) affinity rule.  
               The valid value is range from `1` to `100`.
               
               <a name="servicestage_v3_component_affinity_match_expressions"></a>
               The `match_expressions` block supports:
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "match_expressions", match_expressions)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Specifies the kind of the (anti) affinity rule.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.ComponentV3AffinityMatchExpression']:
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ComponentV3AffinityMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operation: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key of the match rule.
        :param _builtins.str operation: Specifies the operation of the match rule.
        :param _builtins.str value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match rule.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        Specifies the operation of the match rule.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentV3AntiAffinity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3AntiAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3AntiAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3AntiAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: _builtins.str,
                 kind: _builtins.str,
                 match_expressions: Sequence['outputs.ComponentV3AntiAffinityMatchExpression'],
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str condition: Specifies the condition type of the (anti) affinity rule.
        :param _builtins.str kind: Specifies the kind of the (anti) affinity rule.
        :param Sequence['ComponentV3AntiAffinityMatchExpressionArgs'] match_expressions: Specifies the list of the match rules for (anti) affinity.  
               The match_expressions structure is documented below.
        :param _builtins.int weight: Specifies the weight of the (anti) affinity rule.  
               The valid value is range from `1` to `100`.
               
               <a name="servicestage_v3_component_affinity_match_expressions"></a>
               The `match_expressions` block supports:
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "match_expressions", match_expressions)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Specifies the kind of the (anti) affinity rule.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.ComponentV3AntiAffinityMatchExpression']:
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        return pulumi.get(self, "match_expressions")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ComponentV3AntiAffinityMatchExpression(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 operation: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key of the match rule.
        :param _builtins.str operation: Specifies the operation of the match rule.
        :param _builtins.str value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match rule.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        Specifies the operation of the match rule.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentV3CustomMetric(dict):
    def __init__(__self__, *,
                 dimensions: _builtins.str,
                 path: _builtins.str,
                 port: _builtins.int):
        """
        :param _builtins.str dimensions: Specifies the monitoring dimension, such as **cpu_usage**, **mem_usage** or
               **cpu_usage,mem_usage** (separated by a comma).
               
               <a name="servicestage_v3_component_affinity"></a>
               The `affinity` and `anti_affinity` blocks support:
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> _builtins.str:
        """
        Specifies the monitoring dimension, such as **cpu_usage**, **mem_usage** or
        **cpu_usage,mem_usage** (separated by a comma).

        <a name="servicestage_v3_component_affinity"></a>
        The `affinity` and `anti_affinity` blocks support:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentV3DeployStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grayRelease":
            suggest = "gray_release"
        elif key == "grayReleaseOrigin":
            suggest = "gray_release_origin"
        elif key == "rollingRelease":
            suggest = "rolling_release"
        elif key == "rollingReleaseOrigin":
            suggest = "rolling_release_origin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3DeployStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3DeployStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3DeployStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 gray_release: Optional[_builtins.str] = None,
                 gray_release_origin: Optional[_builtins.str] = None,
                 rolling_release: Optional[_builtins.str] = None,
                 rolling_release_origin: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param _builtins.str gray_release: Specifies the gray release parameters, in JSON format.  
               Required if the `type` is **GrayRelease**.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table888818707).
               
               <a name="servicestage_v3_component_lifecycle"></a>
               The `post_start` and `pre_stop` blocks support:
        :param _builtins.str gray_release_origin: The script configuration value of this change is also the original value used for comparison with
               the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.gray_release'.
        :param _builtins.str rolling_release: Specifies the rolling release parameters, in JSON format.  
               Required if the `type` is **RollingRelease**.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table4696103920).
        :param _builtins.str rolling_release_origin: The script configuration value of this change is also the original value used for comparison with
               the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.rolling_release'.
        """
        pulumi.set(__self__, "type", type)
        if gray_release is not None:
            pulumi.set(__self__, "gray_release", gray_release)
        if gray_release_origin is not None:
            pulumi.set(__self__, "gray_release_origin", gray_release_origin)
        if rolling_release is not None:
            pulumi.set(__self__, "rolling_release", rolling_release)
        if rolling_release_origin is not None:
            pulumi.set(__self__, "rolling_release_origin", rolling_release_origin)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="grayRelease")
    def gray_release(self) -> Optional[_builtins.str]:
        """
        Specifies the gray release parameters, in JSON format.  
        Required if the `type` is **GrayRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table888818707).

        <a name="servicestage_v3_component_lifecycle"></a>
        The `post_start` and `pre_stop` blocks support:
        """
        return pulumi.get(self, "gray_release")

    @_builtins.property
    @pulumi.getter(name="grayReleaseOrigin")
    def gray_release_origin(self) -> Optional[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.gray_release'.
        """
        return pulumi.get(self, "gray_release_origin")

    @_builtins.property
    @pulumi.getter(name="rollingRelease")
    def rolling_release(self) -> Optional[_builtins.str]:
        """
        Specifies the rolling release parameters, in JSON format.  
        Required if the `type` is **RollingRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table4696103920).
        """
        return pulumi.get(self, "rolling_release")

    @_builtins.property
    @pulumi.getter(name="rollingReleaseOrigin")
    def rolling_release_origin(self) -> Optional[_builtins.str]:
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.rolling_release'.
        """
        return pulumi.get(self, "rolling_release_origin")


@pulumi.output_type
class ComponentV3Env(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param _builtins.str value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentV3ExternalAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardPort":
            suggest = "forward_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3ExternalAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3ExternalAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3ExternalAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: _builtins.str,
                 address: Optional[_builtins.str] = None,
                 forward_port: Optional[_builtins.int] = None):
        """
        :param _builtins.str protocol: Specifies the protocol of the external access.
        :param _builtins.str address: Specifies the address of the external access.
        :param _builtins.int forward_port: Specifies the forward port of the external access.
        """
        pulumi.set(__self__, "protocol", protocol)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if forward_port is not None:
            pulumi.set(__self__, "forward_port", forward_port)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the external access.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Specifies the address of the external access.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="forwardPort")
    def forward_port(self) -> Optional[_builtins.int]:
        """
        Specifies the forward port of the external access.
        """
        return pulumi.get(self, "forward_port")


@pulumi.output_type
class ComponentV3LivenessProbe(dict):
    def __init__(__self__, *,
                 delay: _builtins.int,
                 timeout: _builtins.int,
                 type: _builtins.str,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.int delay: Specifies the delay time of the probe.
        :param _builtins.int timeout: Specifies the timeout of the probe.
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param Sequence[_builtins.str] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param _builtins.str host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param _builtins.str scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> _builtins.int:
        """
        Specifies the delay time of the probe.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Specifies the timeout of the probe.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ComponentV3Log(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostExtendPath":
            suggest = "host_extend_path"
        elif key == "hostPath":
            suggest = "host_path"
        elif key == "logPath":
            suggest = "log_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3Log. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3Log.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3Log.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_extend_path: _builtins.str,
                 host_path: _builtins.str,
                 log_path: _builtins.str,
                 rotate: _builtins.str):
        """
        :param _builtins.str host_extend_path: Specifies the extension path of the host.
               + **None**: the extended path is not used.
               + **PodUID**: extend the host path based on the pod ID.
               + **PodName**: extend the host path based on the pod name.
               + **PodUID/ContainerName**: extend the host path based on the pod ID and container name.
               + **PodName/ContainerName**: extend the host path based on the pod name and container name.
               
               <a name="servicestage_v3_component_custom_metric"></a>
               The `custom_metric` block supports:
        :param _builtins.str host_path: Specifies the mounted host path, e.g. **/tmp**.
        :param _builtins.str log_path: Specifies the log path of the container, e.g. **/tmp**.
        :param _builtins.str rotate: Specifies the interval for dumping logs.
               + **Hourly**
               + **Daily**
               + **Weekly**
        """
        pulumi.set(__self__, "host_extend_path", host_extend_path)
        pulumi.set(__self__, "host_path", host_path)
        pulumi.set(__self__, "log_path", log_path)
        pulumi.set(__self__, "rotate", rotate)

    @_builtins.property
    @pulumi.getter(name="hostExtendPath")
    def host_extend_path(self) -> _builtins.str:
        """
        Specifies the extension path of the host.
        + **None**: the extended path is not used.
        + **PodUID**: extend the host path based on the pod ID.
        + **PodName**: extend the host path based on the pod name.
        + **PodUID/ContainerName**: extend the host path based on the pod ID and container name.
        + **PodName/ContainerName**: extend the host path based on the pod name and container name.

        <a name="servicestage_v3_component_custom_metric"></a>
        The `custom_metric` block supports:
        """
        return pulumi.get(self, "host_extend_path")

    @_builtins.property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> _builtins.str:
        """
        Specifies the mounted host path, e.g. **/tmp**.
        """
        return pulumi.get(self, "host_path")

    @_builtins.property
    @pulumi.getter(name="logPath")
    def log_path(self) -> _builtins.str:
        """
        Specifies the log path of the container, e.g. **/tmp**.
        """
        return pulumi.get(self, "log_path")

    @_builtins.property
    @pulumi.getter
    def rotate(self) -> _builtins.str:
        """
        Specifies the interval for dumping logs.
        + **Hourly**
        + **Daily**
        + **Weekly**
        """
        return pulumi.get(self, "rotate")


@pulumi.output_type
class ComponentV3Mesher(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        """
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComponentV3PostStart(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param Sequence[_builtins.str] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param _builtins.str host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param _builtins.str scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ComponentV3PreStop(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param Sequence[_builtins.str] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param _builtins.str host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param _builtins.str scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ComponentV3ReadinessProbe(dict):
    def __init__(__self__, *,
                 delay: _builtins.int,
                 timeout: _builtins.int,
                 type: _builtins.str,
                 commands: Optional[Sequence[_builtins.str]] = None,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.int delay: Specifies the delay time of the probe.
        :param _builtins.int timeout: Specifies the timeout of the probe.
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param Sequence[_builtins.str] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param _builtins.str host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.int port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param _builtins.str scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> _builtins.int:
        """
        Specifies the delay time of the probe.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Specifies the timeout of the probe.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ComponentV3ReferResource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 parameters: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the resource ID.
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param _builtins.str parameters: Specifies the information corresponding to the specific types of data storage,
               in JSON format.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[_builtins.str]:
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ComponentV3RuntimeStack(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployMode":
            suggest = "deploy_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3RuntimeStack. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3RuntimeStack.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3RuntimeStack.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_mode: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str deploy_mode: Specifies the deploy mode of the stack.  
               Changing this will create a new resource.
        :param _builtins.str name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param _builtins.str version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> _builtins.str:
        """
        Specifies the deploy mode of the stack.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ComponentV3Storage(dict):
    def __init__(__self__, *,
                 mounts: Sequence['outputs.ComponentV3StorageMount'],
                 name: _builtins.str,
                 parameters: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['ComponentV3StorageMountArgs'] mounts: Specifies the configuration of the disk mounts.  
               The mounts structure is documented below.
               
               <a name="servicestage_v3_component_storage_mounts"></a>
               The `mounts` block supports:
        :param _builtins.str name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param _builtins.str parameters: Specifies the information corresponding to the specific types of data storage,
               in JSON format.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        :param _builtins.str type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        """
        pulumi.set(__self__, "mounts", mounts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def mounts(self) -> Sequence['outputs.ComponentV3StorageMount']:
        """
        Specifies the configuration of the disk mounts.  
        The mounts structure is documented below.

        <a name="servicestage_v3_component_storage_mounts"></a>
        The `mounts` block supports:
        """
        return pulumi.get(self, "mounts")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> _builtins.str:
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentV3StorageMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentV3StorageMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentV3StorageMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentV3StorageMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 read_only: _builtins.bool,
                 sub_path: _builtins.str):
        """
        :param _builtins.str path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param _builtins.bool read_only: Specifies whether the disk mount is read-only.
               
               <a name="servicestage_v3_component_deploy_strategy"></a>
               The `deploy_strategy` block supports:
        :param _builtins.str sub_path: Specifies the sub mount path.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        """
        Specifies whether the disk mount is read-only.

        <a name="servicestage_v3_component_deploy_strategy"></a>
        The `deploy_strategy` block supports:
        """
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> _builtins.str:
        """
        Specifies the sub mount path.
        """
        return pulumi.get(self, "sub_path")


@pulumi.output_type
class ConfigurationV3Component(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "componentName":
            suggest = "component_name"
        elif key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationV3Component. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationV3Component.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationV3Component.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[_builtins.str] = None,
                 component_id: Optional[_builtins.str] = None,
                 component_name: Optional[_builtins.str] = None,
                 environment_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str application_id: The ID of the application.
        :param _builtins.str component_id: The ID of the component.
        :param _builtins.str component_name: The name of the component.
        :param _builtins.str environment_id: The ID of the environment.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[_builtins.str]:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        """
        The ID of the component.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[_builtins.str]:
        """
        The name of the component.
        """
        return pulumi.get(self, "component_name")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[_builtins.str]:
        """
        The ID of the environment.
        """
        return pulumi.get(self, "environment_id")


@pulumi.output_type
class EnvironmentAssociateV3Resource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the resource to be associated.
        :param _builtins.str type: Specifies the type of the resource to be associated.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the resource to be associated.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the resource to be associated.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EnvironmentBasicResource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
               but for CCI namespace, this parameter needs to fill in **name**.
               
               > All resources must under the same VPC as the environment.
        :param _builtins.str type: Specifies the resource type.
               + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
               + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EnvironmentOptionalResource(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
               but for CCI namespace, this parameter needs to fill in **name**.
               
               > All resources must under the same VPC as the environment.
        :param _builtins.str type: Specifies the resource type.
               + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
               + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationsV3ApplicationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the application, in RFC3339 format.
        :param _builtins.str creator: The creator name of the application.
        :param _builtins.str description: The description of the application.
        :param _builtins.str enterprise_project_id: The ID of the enterprise project to which the application belongs.
        :param _builtins.str id: The application ID.
        :param _builtins.str name: The application name.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the application.
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator name of the application.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The ID of the enterprise project to which the application belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The application ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the application.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetComponentRecordsV3RecordResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 current_used: _builtins.bool,
                 deploy_type: _builtins.str,
                 description: _builtins.str,
                 end_time: _builtins.str,
                 instance_id: _builtins.str,
                 jobs: Sequence['outputs.GetComponentRecordsV3RecordJobResult'],
                 status: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str begin_time: The begin time of the component execution record.
        :param _builtins.bool current_used: Whether version is current used.
        :param _builtins.str deploy_type: The deploy type of the component execution record.
        :param _builtins.str description: The description of the component execution record.
        :param _builtins.str end_time: The end time of the component execution record.
        :param _builtins.str instance_id: The instance ID of the component execution record.
        :param Sequence['GetComponentRecordsV3RecordJobArgs'] jobs: The list of component jobs.  
               The jobs structure is documented below.
        :param _builtins.str status: The status of the component execution record.
        :param _builtins.str version: The version number of the component execution record.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "current_used", current_used)
        pulumi.set(__self__, "deploy_type", deploy_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "jobs", jobs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        The begin time of the component execution record.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="currentUsed")
    def current_used(self) -> _builtins.bool:
        """
        Whether version is current used.
        """
        return pulumi.get(self, "current_used")

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> _builtins.str:
        """
        The deploy type of the component execution record.
        """
        return pulumi.get(self, "deploy_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the component execution record.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the component execution record.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The instance ID of the component execution record.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetComponentRecordsV3RecordJobResult']:
        """
        The list of component jobs.  
        The jobs structure is documented below.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the component execution record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version number of the component execution record.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetComponentRecordsV3RecordJobResult(dict):
    def __init__(__self__, *,
                 job_id: _builtins.str,
                 job_infos: Sequence['outputs.GetComponentRecordsV3RecordJobJobInfoResult'],
                 sequence: _builtins.int):
        """
        :param _builtins.str job_id: The job ID.
        :param Sequence['GetComponentRecordsV3RecordJobJobInfoArgs'] job_infos: The job detail.
               The job_info structure is documented below.
        :param _builtins.int sequence: The sequence of the job execution.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_infos", job_infos)
        pulumi.set(__self__, "sequence", sequence)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        The job ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobInfos")
    def job_infos(self) -> Sequence['outputs.GetComponentRecordsV3RecordJobJobInfoResult']:
        """
        The job detail.
        The job_info structure is documented below.
        """
        return pulumi.get(self, "job_infos")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        The sequence of the job execution.
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class GetComponentRecordsV3RecordJobJobInfoResult(dict):
    def __init__(__self__, *,
                 first_batch_replica: _builtins.int,
                 first_batch_weight: _builtins.int,
                 remaining_batch: _builtins.int,
                 replica: _builtins.int,
                 source_url: _builtins.str):
        """
        :param _builtins.int first_batch_replica: The replica of the first batch execution.
        :param _builtins.int first_batch_weight: The weight of the first batch execution.`
        :param _builtins.int remaining_batch: The remaining batch number.
        :param _builtins.int replica: The total replica number.
        :param _builtins.str source_url: The source URL of the component.
        """
        pulumi.set(__self__, "first_batch_replica", first_batch_replica)
        pulumi.set(__self__, "first_batch_weight", first_batch_weight)
        pulumi.set(__self__, "remaining_batch", remaining_batch)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "source_url", source_url)

    @_builtins.property
    @pulumi.getter(name="firstBatchReplica")
    def first_batch_replica(self) -> _builtins.int:
        """
        The replica of the first batch execution.
        """
        return pulumi.get(self, "first_batch_replica")

    @_builtins.property
    @pulumi.getter(name="firstBatchWeight")
    def first_batch_weight(self) -> _builtins.int:
        """
        The weight of the first batch execution.`
        """
        return pulumi.get(self, "first_batch_weight")

    @_builtins.property
    @pulumi.getter(name="remainingBatch")
    def remaining_batch(self) -> _builtins.int:
        """
        The remaining batch number.
        """
        return pulumi.get(self, "remaining_batch")

    @_builtins.property
    @pulumi.getter
    def replica(self) -> _builtins.int:
        """
        The total replica number.
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> _builtins.str:
        """
        The source URL of the component.
        """
        return pulumi.get(self, "source_url")


@pulumi.output_type
class GetComponentRuntimesRuntimeResult(dict):
    def __init__(__self__, *,
                 default_port: _builtins.int,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.int default_port: Specifies the default container port to use for filtering.
        :param _builtins.str description: The runtime description.
        :param _builtins.str name: Specifies the runtime name to use for filtering.
               For the runtime names corresponding to each type of component, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_user_0411.html).
        """
        pulumi.set(__self__, "default_port", default_port)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> _builtins.int:
        """
        Specifies the default container port to use for filtering.
        """
        return pulumi.get(self, "default_port")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The runtime description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the runtime name to use for filtering.
        For the runtime names corresponding to each type of component, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_user_0411.html).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetComponentUsedResourcesV3ApplicationResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 label: _builtins.str):
        """
        :param _builtins.str id: The ID of the environment that component used.
        :param _builtins.str label: The name of the environment that component used.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the environment that component used.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The name of the environment that component used.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class GetComponentUsedResourcesV3EnvironmentResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 label: _builtins.str):
        """
        :param _builtins.str id: The ID of the environment that component used.
        :param _builtins.str label: The name of the environment that component used.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the environment that component used.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The name of the environment that component used.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class GetComponentsV3ComponentResult(dict):
    def __init__(__self__, *,
                 build: _builtins.str,
                 created_at: _builtins.str,
                 environment_id: _builtins.str,
                 external_accesses: Sequence['outputs.GetComponentsV3ComponentExternalAccessResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 refer_resources: Sequence['outputs.GetComponentsV3ComponentReferResourceResult'],
                 runtime_stacks: Sequence['outputs.GetComponentsV3ComponentRuntimeStackResult'],
                 source: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str build: The build configuration of the component, in JSON format.
        :param _builtins.str created_at: The creation time of the component, in RFC3339 format.
        :param _builtins.str environment_id: The environment ID where the component is deployed.
        :param Sequence['GetComponentsV3ComponentExternalAccessArgs'] external_accesses: The configuration of the external accesses.  
               The external_accesses structure is documented below.
        :param _builtins.str id: The resource ID.
        :param _builtins.str name: The stack name.
        :param Sequence['GetComponentsV3ComponentReferResourceArgs'] refer_resources: The configuration of the reference resources.  
               The refer_resources structure is documented below.
        :param Sequence['GetComponentsV3ComponentRuntimeStackArgs'] runtime_stacks: The configuration of the runtime stack.  
               The runtime_stack structure is documented below.
        :param _builtins.str source: The source configuration of the component, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0077.html#servicestage_06_0077__en-us_topic_0220056058_ref28944532).
        :param _builtins.str status: The status of the component.
               + **FAILED**
               + **RUNNING**
               + **DOWN**
               + **RESERVED**
               + **STOPPED**
               + **PENDING**
               + **UNKNOWN**
               + **PARTIALLY_FAILED**
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the component.
        :param _builtins.str updated_at: The latest update time of the component, in RFC3339 format.
        :param _builtins.str version: The stack version.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "external_accesses", external_accesses)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "refer_resources", refer_resources)
        pulumi.set(__self__, "runtime_stacks", runtime_stacks)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def build(self) -> _builtins.str:
        """
        The build configuration of the component, in JSON format.
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        The environment ID where the component is deployed.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="externalAccesses")
    def external_accesses(self) -> Sequence['outputs.GetComponentsV3ComponentExternalAccessResult']:
        """
        The configuration of the external accesses.  
        The external_accesses structure is documented below.
        """
        return pulumi.get(self, "external_accesses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The stack name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="referResources")
    def refer_resources(self) -> Sequence['outputs.GetComponentsV3ComponentReferResourceResult']:
        """
        The configuration of the reference resources.  
        The refer_resources structure is documented below.
        """
        return pulumi.get(self, "refer_resources")

    @_builtins.property
    @pulumi.getter(name="runtimeStacks")
    def runtime_stacks(self) -> Sequence['outputs.GetComponentsV3ComponentRuntimeStackResult']:
        """
        The configuration of the runtime stack.  
        The runtime_stack structure is documented below.
        """
        return pulumi.get(self, "runtime_stacks")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The source configuration of the component, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0077.html#servicestage_06_0077__en-us_topic_0220056058_ref28944532).
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the component.
        + **FAILED**
        + **RUNNING**
        + **DOWN**
        + **RESERVED**
        + **STOPPED**
        + **PENDING**
        + **UNKNOWN**
        + **PARTIALLY_FAILED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the component.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The stack version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetComponentsV3ComponentExternalAccessResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 forward_port: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.str address: The address of the external access.
        :param _builtins.int forward_port: The forward port of the external access.
        :param _builtins.str protocol: The protocol of the external access.
               + **http**
               + **https**
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "forward_port", forward_port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        The address of the external access.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="forwardPort")
    def forward_port(self) -> _builtins.int:
        """
        The forward port of the external access.
        """
        return pulumi.get(self, "forward_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol of the external access.
        + **http**
        + **https**
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetComponentsV3ComponentReferResourceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 parameters: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: The resource ID.
        :param _builtins.str parameters: The resource parameters, in JSON format.  
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table838321632514).
        :param _builtins.str type: The resource type.
               + **vpc**
               + **eip**
               + **elb**
               + **cce**
               + **ecs**
               + **as**
               + **cse**
               + **dcs**
               + **rds**
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> _builtins.str:
        """
        The resource parameters, in JSON format.  
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table838321632514).
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        + **vpc**
        + **eip**
        + **elb**
        + **cce**
        + **ecs**
        + **as**
        + **cse**
        + **dcs**
        + **rds**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetComponentsV3ComponentRuntimeStackResult(dict):
    def __init__(__self__, *,
                 deploy_mode: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str deploy_mode: The deploy mode of the stack.
               + **container**
               + **virtualmachine**
        :param _builtins.str name: The stack name.
        :param _builtins.str type: The resource type.
               + **vpc**
               + **eip**
               + **elb**
               + **cce**
               + **ecs**
               + **as**
               + **cse**
               + **dcs**
               + **rds**
        :param _builtins.str version: The stack version.
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> _builtins.str:
        """
        The deploy mode of the stack.
        + **container**
        + **virtualmachine**
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The stack name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        + **vpc**
        + **eip**
        + **elb**
        + **cce**
        + **ecs**
        + **as**
        + **cse**
        + **dcs**
        + **rds**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The stack version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetEnvironmentsV3EnvironmentResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 deploy_mode: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the environment, in RFC3339 format.
        :param _builtins.str creator: The creator name of the environment.
        :param _builtins.str deploy_mode: The deploy mode of the environment.
               + **container**
               + **virtualmachine**
               + **mixed**
        :param _builtins.str description: The description of the environment.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the environments belong.
        :param _builtins.str id: The environment ID.
        :param _builtins.str name: Specifies the name of the environment to be queried.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the environment.
        :param _builtins.str updated_at: The latest update time of the environment, in RFC3339 format.
        :param _builtins.str version: The version number of the environment.
        :param _builtins.str vpc_id: The ID of the VPC to which the environment belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator name of the environment.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> _builtins.str:
        """
        The deploy mode of the environment.
        + **container**
        + **virtualmachine**
        + **mixed**
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the environment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the environments belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The environment ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the environment to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the environment.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version number of the environment.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the environment belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInnerRuntimeStacksV3RuntimeStackResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str type: The type of the inner runtime stack.
               + **Nodejs**
               + **Java**
               + **Tomcat**
               + **Python**
               + **Php**
        :param _builtins.str url: The image URL of the inner runtime stack.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the inner runtime stack.
        + **Nodejs**
        + **Java**
        + **Tomcat**
        + **Python**
        + **Php**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The image URL of the inner runtime stack.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetRuntimeStacksV3RuntimeStackResult(dict):
    def __init__(__self__, *,
                 deploy_mode: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 url: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str deploy_mode: The deploy mode.
               + **container**
               + **virtualmachine**
        :param _builtins.str name: The name of the runtime stack.
        :param _builtins.str status: The status of the runtime stack.
               + **Supported**
               + **Deprecated**
        :param _builtins.str type: The type of the runtime stack.
               + **Nodejs**
               + **Java**
               + **Tomcat**
               + **Python**
               + **Php**
               + **Docker**
        :param _builtins.str url: The URL of the runtime stack.
        :param _builtins.str version: The version number.
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> _builtins.str:
        """
        The deploy mode.
        + **container**
        + **virtualmachine**
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the runtime stack.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the runtime stack.
        + **Supported**
        + **Deprecated**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the runtime stack.
        + **Nodejs**
        + **Java**
        + **Tomcat**
        + **Python**
        + **Php**
        + **Docker**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The URL of the runtime stack.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version number.
        """
        return pulumi.get(self, "version")


