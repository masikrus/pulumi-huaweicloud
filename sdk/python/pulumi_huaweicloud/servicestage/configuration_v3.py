# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigurationV3Args', 'ConfigurationV3']

@pulumi.input_type
class ConfigurationV3Args:
    def __init__(__self__, *,
                 config_group_id: pulumi.Input[_builtins.str],
                 content: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ConfigurationV3 resource.
        :param pulumi.Input[_builtins.str] config_group_id: Specifies the ID of the configuration group to which
               the configuration file belongs.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the configuration file.  
               For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        :param pulumi.Input[_builtins.str] type: Specifies the type of the configuration file.  
               The valid values are as follows:
               + **yaml**
               + **properties**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the configuration file.  
               The maximum length is `128` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the configuration file.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sensitive: Specifies whether to enable data encryption.  
               Defaults to **false**.
               Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
               mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        """
        pulumi.set(__self__, "config_group_id", config_group_id)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)

    @_builtins.property
    @pulumi.getter(name="configGroupId")
    def config_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the configuration group to which
        the configuration file belongs.
        """
        return pulumi.get(self, "config_group_id")

    @config_group_id.setter
    def config_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_group_id", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the content of the configuration file.  
        For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the configuration file.  
        The valid values are as follows:
        + **yaml**
        + **properties**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the configuration file.  
        The maximum length is `128` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the configuration file.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable data encryption.  
        Defaults to **false**.
        Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
        mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        """
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sensitive", value)


@pulumi.input_type
class _ConfigurationV3State:
    def __init__(__self__, *,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationV3ComponentArgs']]]] = None,
                 config_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConfigurationV3 resources.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationV3ComponentArgs']]] components: The list of the components associated with the configuration file.  
               The components structure is documented below.
        :param pulumi.Input[_builtins.str] config_group_id: Specifies the ID of the configuration group to which
               the configuration file belongs.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the configuration file.  
               For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        :param pulumi.Input[_builtins.str] created_at: The creation time of the configuration file, in RFC3339 format.
        :param pulumi.Input[_builtins.str] creator: The creator of the configuration file.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the configuration file.  
               The maximum length is `128` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the configuration file.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sensitive: Specifies whether to enable data encryption.  
               Defaults to **false**.
               Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
               mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the configuration file.  
               The valid values are as follows:
               + **yaml**
               + **properties**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the configuration file, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: The version of the configuration file.
        """
        if components is not None:
            pulumi.set(__self__, "components", components)
        if config_group_id is not None:
            pulumi.set(__self__, "config_group_id", config_group_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationV3ComponentArgs']]]]:
        """
        The list of the components associated with the configuration file.  
        The components structure is documented below.
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationV3ComponentArgs']]]]):
        pulumi.set(self, "components", value)

    @_builtins.property
    @pulumi.getter(name="configGroupId")
    def config_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the configuration group to which
        the configuration file belongs.
        """
        return pulumi.get(self, "config_group_id")

    @config_group_id.setter
    def config_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_group_id", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of the configuration file.  
        For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the configuration file, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator of the configuration file.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the configuration file.  
        The maximum length is `128` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the configuration file.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable data encryption.  
        Defaults to **false**.
        Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
        mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        """
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sensitive", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the configuration file.  
        The valid values are as follows:
        + **yaml**
        + **properties**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the configuration file, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the configuration file.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:ServiceStage/configurationV3:ConfigurationV3")
class ConfigurationV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a configuration file resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        configuration_name = config.require_object("configurationName")
        test = huaweicloud.servicestage.ConfigurationV3("test",
            config_group_id=group_id,
            name=configuration_name,
            type="properties",
            content=\"\"\"spring.application.name=service
        cloud.servicecomb.service.name=${spring.application.name}
        cloud.servicecomb.service.version=${CAS_INSTANCE_VERSION}
        cloud.servicecomb.service.application=${CAS_APPLICATION_NAME}
        cloud.servicecomb.discovery.address=${PAAS_CSE_SC_ENDPOINT}
        cloud.servicecomb.discovery.healthCheckInterval=10
        cloud.servicecomb.discovery.pollInterval=15000
        cloud.servicecomb.discovery.waitTimeForShutDownInMillis=15000
        cloud.servicecomb.config.serverAddr=${PAAS_CSE_CC_ENDPOINT}
        cloud.servicecomb.config.serverType=kie
        cloud.servicecomb.config.fileSource=governance.yaml,application.yaml
        \"\"\")
        ```

        ## Import

        The resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/configurationV3:ConfigurationV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] config_group_id: Specifies the ID of the configuration group to which
               the configuration file belongs.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the configuration file.  
               For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        :param pulumi.Input[_builtins.str] description: Specifies the description of the configuration file.  
               The maximum length is `128` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the configuration file.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sensitive: Specifies whether to enable data encryption.  
               Defaults to **false**.
               Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
               mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the configuration file.  
               The valid values are as follows:
               + **yaml**
               + **properties**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigurationV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a configuration file resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        configuration_name = config.require_object("configurationName")
        test = huaweicloud.servicestage.ConfigurationV3("test",
            config_group_id=group_id,
            name=configuration_name,
            type="properties",
            content=\"\"\"spring.application.name=service
        cloud.servicecomb.service.name=${spring.application.name}
        cloud.servicecomb.service.version=${CAS_INSTANCE_VERSION}
        cloud.servicecomb.service.application=${CAS_APPLICATION_NAME}
        cloud.servicecomb.discovery.address=${PAAS_CSE_SC_ENDPOINT}
        cloud.servicecomb.discovery.healthCheckInterval=10
        cloud.servicecomb.discovery.pollInterval=15000
        cloud.servicecomb.discovery.waitTimeForShutDownInMillis=15000
        cloud.servicecomb.config.serverAddr=${PAAS_CSE_CC_ENDPOINT}
        cloud.servicecomb.config.serverType=kie
        cloud.servicecomb.config.fileSource=governance.yaml,application.yaml
        \"\"\")
        ```

        ## Import

        The resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/configurationV3:ConfigurationV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ConfigurationV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurationV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurationV3Args.__new__(ConfigurationV3Args)

            if config_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_group_id'")
            __props__.__dict__["config_group_id"] = config_group_id
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["sensitive"] = sensitive
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["components"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["version"] = None
        super(ConfigurationV3, __self__).__init__(
            'huaweicloud:ServiceStage/configurationV3:ConfigurationV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            components: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigurationV3ComponentArgs', 'ConfigurationV3ComponentArgsDict']]]]] = None,
            config_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sensitive: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConfigurationV3':
        """
        Get an existing ConfigurationV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConfigurationV3ComponentArgs', 'ConfigurationV3ComponentArgsDict']]]] components: The list of the components associated with the configuration file.  
               The components structure is documented below.
        :param pulumi.Input[_builtins.str] config_group_id: Specifies the ID of the configuration group to which
               the configuration file belongs.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the configuration file.  
               For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        :param pulumi.Input[_builtins.str] created_at: The creation time of the configuration file, in RFC3339 format.
        :param pulumi.Input[_builtins.str] creator: The creator of the configuration file.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the configuration file.  
               The maximum length is `128` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the configuration file.  
               The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               The name must start with a letter and end with a letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] sensitive: Specifies whether to enable data encryption.  
               Defaults to **false**.
               Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
               mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the configuration file.  
               The valid values are as follows:
               + **yaml**
               + **properties**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the configuration file, in RFC3339 format.
        :param pulumi.Input[_builtins.str] version: The version of the configuration file.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigurationV3State.__new__(_ConfigurationV3State)

        __props__.__dict__["components"] = components
        __props__.__dict__["config_group_id"] = config_group_id
        __props__.__dict__["content"] = content
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator"] = creator
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["sensitive"] = sensitive
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return ConfigurationV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def components(self) -> pulumi.Output[Sequence['outputs.ConfigurationV3Component']]:
        """
        The list of the components associated with the configuration file.  
        The components structure is documented below.
        """
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter(name="configGroupId")
    def config_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the configuration group to which
        the configuration file belongs.
        """
        return pulumi.get(self, "config_group_id")

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content of the configuration file.  
        For details about the system variables that can be written into a configuration file, please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-servicestage/servicestage_03_0316.html#servicestage_03_0316__en-us_topic_0000001904007428_table62206277581).
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the configuration file, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        The creator of the configuration file.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the configuration file.  
        The maximum length is `128` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the configuration file.  
        The valid length is limited from `2` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        The name must start with a letter and end with a letter or a digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable data encryption.  
        Defaults to **false**.
        Only container-deployed components support data encryption. If data encryption is enabled, the configuration file is
        mounted using secret. If data encryption is disabled, the configuration file is mounted using ConfigMap.
        """
        return pulumi.get(self, "sensitive")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the configuration file.  
        The valid values are as follows:
        + **yaml**
        + **properties**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the configuration file, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the configuration file.
        """
        return pulumi.get(self, "version")

