# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApplicationConfigurationV3ConfigurationArgs',
    'ApplicationConfigurationV3ConfigurationArgsDict',
    'ApplicationConfigurationV3ConfigurationEnvArgs',
    'ApplicationConfigurationV3ConfigurationEnvArgsDict',
    'ApplicationEnvironmentArgs',
    'ApplicationEnvironmentArgsDict',
    'ApplicationEnvironmentVariableArgs',
    'ApplicationEnvironmentVariableArgsDict',
    'ComponentBuilderArgs',
    'ComponentBuilderArgsDict',
    'ComponentInstanceArtifactArgs',
    'ComponentInstanceArtifactArgsDict',
    'ComponentInstanceArtifactPropertiesArgs',
    'ComponentInstanceArtifactPropertiesArgsDict',
    'ComponentInstanceConfigurationArgs',
    'ComponentInstanceConfigurationArgsDict',
    'ComponentInstanceConfigurationEnvVariableArgs',
    'ComponentInstanceConfigurationEnvVariableArgsDict',
    'ComponentInstanceConfigurationLifecycleArgs',
    'ComponentInstanceConfigurationLifecycleArgsDict',
    'ComponentInstanceConfigurationLifecycleEntrypointArgs',
    'ComponentInstanceConfigurationLifecycleEntrypointArgsDict',
    'ComponentInstanceConfigurationLifecyclePostStartArgs',
    'ComponentInstanceConfigurationLifecyclePostStartArgsDict',
    'ComponentInstanceConfigurationLifecyclePostStartParametersArgs',
    'ComponentInstanceConfigurationLifecyclePostStartParametersArgsDict',
    'ComponentInstanceConfigurationLifecyclePreStopArgs',
    'ComponentInstanceConfigurationLifecyclePreStopArgsDict',
    'ComponentInstanceConfigurationLifecyclePreStopParametersArgs',
    'ComponentInstanceConfigurationLifecyclePreStopParametersArgsDict',
    'ComponentInstanceConfigurationLogCollectionPolicyArgs',
    'ComponentInstanceConfigurationLogCollectionPolicyArgsDict',
    'ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs',
    'ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgsDict',
    'ComponentInstanceConfigurationProbeArgs',
    'ComponentInstanceConfigurationProbeArgsDict',
    'ComponentInstanceConfigurationProbeLivenessArgs',
    'ComponentInstanceConfigurationProbeLivenessArgsDict',
    'ComponentInstanceConfigurationProbeLivenessCommandParamArgs',
    'ComponentInstanceConfigurationProbeLivenessCommandParamArgsDict',
    'ComponentInstanceConfigurationProbeLivenessHttpParamArgs',
    'ComponentInstanceConfigurationProbeLivenessHttpParamArgsDict',
    'ComponentInstanceConfigurationProbeLivenessTcpParamArgs',
    'ComponentInstanceConfigurationProbeLivenessTcpParamArgsDict',
    'ComponentInstanceConfigurationProbeReadinessArgs',
    'ComponentInstanceConfigurationProbeReadinessArgsDict',
    'ComponentInstanceConfigurationProbeReadinessCommandParamArgs',
    'ComponentInstanceConfigurationProbeReadinessCommandParamArgsDict',
    'ComponentInstanceConfigurationProbeReadinessHttpParamArgs',
    'ComponentInstanceConfigurationProbeReadinessHttpParamArgsDict',
    'ComponentInstanceConfigurationProbeReadinessTcpParamArgs',
    'ComponentInstanceConfigurationProbeReadinessTcpParamArgsDict',
    'ComponentInstanceConfigurationSchedulerArgs',
    'ComponentInstanceConfigurationSchedulerArgsDict',
    'ComponentInstanceConfigurationSchedulerAffinityArgs',
    'ComponentInstanceConfigurationSchedulerAffinityArgsDict',
    'ComponentInstanceConfigurationSchedulerAntiAffinityArgs',
    'ComponentInstanceConfigurationSchedulerAntiAffinityArgsDict',
    'ComponentInstanceConfigurationStorageArgs',
    'ComponentInstanceConfigurationStorageArgsDict',
    'ComponentInstanceConfigurationStorageMountArgs',
    'ComponentInstanceConfigurationStorageMountArgsDict',
    'ComponentInstanceConfigurationStorageParameterArgs',
    'ComponentInstanceConfigurationStorageParameterArgsDict',
    'ComponentInstanceConfigurationStrategyArgs',
    'ComponentInstanceConfigurationStrategyArgsDict',
    'ComponentInstanceExternalAccessArgs',
    'ComponentInstanceExternalAccessArgsDict',
    'ComponentInstanceReferResourceArgs',
    'ComponentInstanceReferResourceArgsDict',
    'ComponentSourceArgs',
    'ComponentSourceArgsDict',
    'ComponentSourcePropertiesArgs',
    'ComponentSourcePropertiesArgsDict',
    'ComponentV3AffinityArgs',
    'ComponentV3AffinityArgsDict',
    'ComponentV3AffinityMatchExpressionArgs',
    'ComponentV3AffinityMatchExpressionArgsDict',
    'ComponentV3AntiAffinityArgs',
    'ComponentV3AntiAffinityArgsDict',
    'ComponentV3AntiAffinityMatchExpressionArgs',
    'ComponentV3AntiAffinityMatchExpressionArgsDict',
    'ComponentV3CustomMetricArgs',
    'ComponentV3CustomMetricArgsDict',
    'ComponentV3DeployStrategyArgs',
    'ComponentV3DeployStrategyArgsDict',
    'ComponentV3EnvArgs',
    'ComponentV3EnvArgsDict',
    'ComponentV3ExternalAccessArgs',
    'ComponentV3ExternalAccessArgsDict',
    'ComponentV3LivenessProbeArgs',
    'ComponentV3LivenessProbeArgsDict',
    'ComponentV3LogArgs',
    'ComponentV3LogArgsDict',
    'ComponentV3MesherArgs',
    'ComponentV3MesherArgsDict',
    'ComponentV3PostStartArgs',
    'ComponentV3PostStartArgsDict',
    'ComponentV3PreStopArgs',
    'ComponentV3PreStopArgsDict',
    'ComponentV3ReadinessProbeArgs',
    'ComponentV3ReadinessProbeArgsDict',
    'ComponentV3ReferResourceArgs',
    'ComponentV3ReferResourceArgsDict',
    'ComponentV3RuntimeStackArgs',
    'ComponentV3RuntimeStackArgsDict',
    'ComponentV3StorageArgs',
    'ComponentV3StorageArgsDict',
    'ComponentV3StorageMountArgs',
    'ComponentV3StorageMountArgsDict',
    'ConfigurationV3ComponentArgs',
    'ConfigurationV3ComponentArgsDict',
    'EnvironmentAssociateV3ResourceArgs',
    'EnvironmentAssociateV3ResourceArgsDict',
    'EnvironmentBasicResourceArgs',
    'EnvironmentBasicResourceArgsDict',
    'EnvironmentOptionalResourceArgs',
    'EnvironmentOptionalResourceArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationConfigurationV3ConfigurationArgsDict(TypedDict):
        envs: pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationV3ConfigurationEnvArgsDict']]]
        """
        Specifies the list of the environment variables.  
        The env structure is documented below.
        """
        assign_strategy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the effective strategy is the continuously effective.  
        The valid values are as follows:
        + **true**: First time effective. Application-level environment variables only take effect when the component is
        first created, and subsequent modifications of the application-level environment variables will not be synchronized
        with the environment variables in the component.
        + **false**: Continuously effective. Environment variables during component upgrades are updated according to the
        application-level environment variables.

        Defaults to **false**.

        <a name="servicestage_v3_application_configuration_env"></a>
        The `env` block supports:
        """
elif False:
    ApplicationConfigurationV3ConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationConfigurationV3ConfigurationArgs:
    def __init__(__self__, *,
                 envs: pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationV3ConfigurationEnvArgs']]],
                 assign_strategy: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationV3ConfigurationEnvArgs']]] envs: Specifies the list of the environment variables.  
               The env structure is documented below.
        :param pulumi.Input[_builtins.bool] assign_strategy: Specifies whether the effective strategy is the continuously effective.  
               The valid values are as follows:
               + **true**: First time effective. Application-level environment variables only take effect when the component is
               first created, and subsequent modifications of the application-level environment variables will not be synchronized
               with the environment variables in the component.
               + **false**: Continuously effective. Environment variables during component upgrades are updated according to the
               application-level environment variables.
               
               Defaults to **false**.
               
               <a name="servicestage_v3_application_configuration_env"></a>
               The `env` block supports:
        """
        pulumi.set(__self__, "envs", envs)
        if assign_strategy is not None:
            pulumi.set(__self__, "assign_strategy", assign_strategy)

    @_builtins.property
    @pulumi.getter
    def envs(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationV3ConfigurationEnvArgs']]]:
        """
        Specifies the list of the environment variables.  
        The env structure is documented below.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationV3ConfigurationEnvArgs']]]):
        pulumi.set(self, "envs", value)

    @_builtins.property
    @pulumi.getter(name="assignStrategy")
    def assign_strategy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the effective strategy is the continuously effective.  
        The valid values are as follows:
        + **true**: First time effective. Application-level environment variables only take effect when the component is
        first created, and subsequent modifications of the application-level environment variables will not be synchronized
        with the environment variables in the component.
        + **false**: Continuously effective. Environment variables during component upgrades are updated according to the
        application-level environment variables.

        Defaults to **false**.

        <a name="servicestage_v3_application_configuration_env"></a>
        The `env` block supports:
        """
        return pulumi.get(self, "assign_strategy")

    @assign_strategy.setter
    def assign_strategy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "assign_strategy", value)


if not MYPY:
    class ApplicationConfigurationV3ConfigurationEnvArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the environment variable.  
        The valid length is limited from `1` to `64`, only Chinese characters, English letters, digits, hyphens (-),
        underscores (\\_) and dots (.) are allowed.
        The name must start with an English letter, hyphen (-) or underscore (\\_).

        > Variable names must be unique within the same application environment.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the environment variable.
        """
elif False:
    ApplicationConfigurationV3ConfigurationEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationConfigurationV3ConfigurationEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment variable.  
               The valid length is limited from `1` to `64`, only Chinese characters, English letters, digits, hyphens (-),
               underscores (\\_) and dots (.) are allowed.
               The name must start with an English letter, hyphen (-) or underscore (\\_).
               
               > Variable names must be unique within the same application environment.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the environment variable.  
        The valid length is limited from `1` to `64`, only Chinese characters, English letters, digits, hyphens (-),
        underscores (\\_) and dots (.) are allowed.
        The name must start with an English letter, hyphen (-) or underscore (\\_).

        > Variable names must be unique within the same application environment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the environment variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApplicationEnvironmentArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the environment ID to which the variables belongs.
        """
        variables: pulumi.Input[Sequence[pulumi.Input['ApplicationEnvironmentVariableArgsDict']]]
        """
        Specifies the list of environment variables.
        The object structure is documented below.

        <a name="servicestage_app_variables"></a>
        The `variable` block supports:
        """
elif False:
    ApplicationEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationEnvironmentArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 variables: pulumi.Input[Sequence[pulumi.Input['ApplicationEnvironmentVariableArgs']]]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the environment ID to which the variables belongs.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationEnvironmentVariableArgs']]] variables: Specifies the list of environment variables.
               The object structure is documented below.
               
               <a name="servicestage_app_variables"></a>
               The `variable` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment ID to which the variables belongs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationEnvironmentVariableArgs']]]:
        """
        Specifies the list of environment variables.
        The object structure is documented below.

        <a name="servicestage_app_variables"></a>
        The `variable` block supports:
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationEnvironmentVariableArgs']]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class ApplicationEnvironmentVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the variable name. The name can contain `1` to `64` characters, only letters,
        digits, underscores (_), hyphens (-) and dots (.) are allowed. The name cannot start with a digit or dot.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the variable value. The value can contain a maximum of `2,048` characters.
        """
elif False:
    ApplicationEnvironmentVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the variable name. The name can contain `1` to `64` characters, only letters,
               digits, underscores (_), hyphens (-) and dots (.) are allowed. The name cannot start with a digit or dot.
        :param pulumi.Input[_builtins.str] value: Specifies the variable value. The value can contain a maximum of `2,048` characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable name. The name can contain `1` to `64` characters, only letters,
        digits, underscores (_), hyphens (-) and dots (.) are allowed. The name cannot start with a digit or dot.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable value. The value can contain a maximum of `2,048` characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentBuilderArgsDict(TypedDict):
        cluster_id: pulumi.Input[_builtins.str]
        """
        Specifies the cluster ID.
        """
        organization: pulumi.Input[_builtins.str]
        """
        Specifies the organization name.
        The organization is usually **domain name**. You can find out in the organization management of SWR.
        """
        cluster_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cluster Name.
        """
        cluster_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cluster type.
        """
        cmd: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build command. If omitted, the default command will be used.
        + About the  default command or script: build.sh in the root directory will be preferentially executed.
        If build.sh does not exist, the code will be compiled using the common method of the selected language,
        for example, mvn clean package for Java.
        + About the custom command: Commands will be customized using the selected language.
        Alternatively, the default command or script will be used after build.sh is modified.
        """
        dockerfile_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the file path for dockerfile.
        """
        node_label: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the filter labels for CCE nodes.

        > Before using the label, please make sure that the node is bound to the EIP and can access the public network.

        <a name="servicestage_component_properties"></a>
        The `properties` block supports:
        """
        use_public_cluster: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to use the public cluster.
        """
elif False:
    ComponentBuilderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentBuilderArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 organization: pulumi.Input[_builtins.str],
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cmd: Optional[pulumi.Input[_builtins.str]] = None,
                 dockerfile_path: Optional[pulumi.Input[_builtins.str]] = None,
                 node_label: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 use_public_cluster: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] organization: Specifies the organization name.
               The organization is usually **domain name**. You can find out in the organization management of SWR.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the cluster Name.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type.
        :param pulumi.Input[_builtins.str] cmd: Specifies the build command. If omitted, the default command will be used.
               + About the  default command or script: build.sh in the root directory will be preferentially executed.
               If build.sh does not exist, the code will be compiled using the common method of the selected language,
               for example, mvn clean package for Java.
               + About the custom command: Commands will be customized using the selected language.
               Alternatively, the default command or script will be used after build.sh is modified.
        :param pulumi.Input[_builtins.str] dockerfile_path: Specifies the file path for dockerfile.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_label: Specifies the filter labels for CCE nodes.
               
               > Before using the label, please make sure that the node is bound to the EIP and can access the public network.
               
               <a name="servicestage_component_properties"></a>
               The `properties` block supports:
        :param pulumi.Input[_builtins.bool] use_public_cluster: Specifies whether to use the public cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "organization", organization)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cmd is not None:
            pulumi.set(__self__, "cmd", cmd)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if node_label is not None:
            pulumi.set(__self__, "node_label", node_label)
        if use_public_cluster is not None:
            pulumi.set(__self__, "use_public_cluster", use_public_cluster)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the organization name.
        The organization is usually **domain name**. You can find out in the organization management of SWR.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster Name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter
    def cmd(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build command. If omitted, the default command will be used.
        + About the  default command or script: build.sh in the root directory will be preferentially executed.
        If build.sh does not exist, the code will be compiled using the common method of the selected language,
        for example, mvn clean package for Java.
        + About the custom command: Commands will be customized using the selected language.
        Alternatively, the default command or script will be used after build.sh is modified.
        """
        return pulumi.get(self, "cmd")

    @cmd.setter
    def cmd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmd", value)

    @_builtins.property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the file path for dockerfile.
        """
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dockerfile_path", value)

    @_builtins.property
    @pulumi.getter(name="nodeLabel")
    def node_label(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the filter labels for CCE nodes.

        > Before using the label, please make sure that the node is bound to the EIP and can access the public network.

        <a name="servicestage_component_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "node_label")

    @node_label.setter
    def node_label(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_label", value)

    @_builtins.property
    @pulumi.getter(name="usePublicCluster")
    def use_public_cluster(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use the public cluster.
        """
        return pulumi.get(self, "use_public_cluster")

    @use_public_cluster.setter
    def use_public_cluster(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_public_cluster", value)


if not MYPY:
    class ComponentInstanceArtifactArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the configuration item.
        """
        storage: pulumi.Input[_builtins.str]
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        url: pulumi.Input[_builtins.str]
        """
        Specifies the software package or image address.
        For a component deployed on a VM, this parameter is the software package address.
        For a component deployed based on a container, this parameter is the image address or component name:v${index}.
        The latter indicates that the component source code or the image automatically built using the software package
        will be used.
        """
        auth_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication mode.
        The valid values are **iam** and **none**. Defaults to **iam**.
        """
        properties: NotRequired[pulumi.Input['ComponentInstanceArtifactPropertiesArgsDict']]
        """
        Specifies the properties of the OBS object.
        This parameter is available only `storage` is **obs**.
        The object structure is documented below.

        <a name="servicestage_properties"></a>
        The `properties` block supports:
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version number.
        """
elif False:
    ComponentInstanceArtifactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceArtifactArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 storage: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str],
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input['ComponentInstanceArtifactPropertiesArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the configuration item.
        :param pulumi.Input[_builtins.str] storage: Specifies the data storage configuration.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param pulumi.Input[_builtins.str] url: Specifies the software package or image address.
               For a component deployed on a VM, this parameter is the software package address.
               For a component deployed based on a container, this parameter is the image address or component name:v${index}.
               The latter indicates that the component source code or the image automatically built using the software package
               will be used.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication mode.
               The valid values are **iam** and **none**. Defaults to **iam**.
        :param pulumi.Input['ComponentInstanceArtifactPropertiesArgs'] properties: Specifies the properties of the OBS object.
               This parameter is available only `storage` is **obs**.
               The object structure is documented below.
               
               <a name="servicestage_properties"></a>
               The `properties` block supports:
        :param pulumi.Input[_builtins.str] version: Specifies the version number.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the software package or image address.
        For a component deployed on a VM, this parameter is the software package address.
        For a component deployed based on a container, this parameter is the image address or component name:v${index}.
        The latter indicates that the component source code or the image automatically built using the software package
        will be used.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication mode.
        The valid values are **iam** and **none**. Defaults to **iam**.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['ComponentInstanceArtifactPropertiesArgs']]:
        """
        Specifies the properties of the OBS object.
        This parameter is available only `storage` is **obs**.
        The object structure is documented below.

        <a name="servicestage_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['ComponentInstanceArtifactPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version number.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ComponentInstanceArtifactPropertiesArgsDict(TypedDict):
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the OBS bucket name.
        """
        endpoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the OBS bucket endpoint.
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the key name of the OBS object.

        <a name="servicestage_configuration"></a>
        The `configuration` block supports:
        """
elif False:
    ComponentInstanceArtifactPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceArtifactPropertiesArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: Specifies the OBS bucket name.
        :param pulumi.Input[_builtins.str] endpoint: Specifies the OBS bucket endpoint.
        :param pulumi.Input[_builtins.str] key: Specifies the key name of the OBS object.
               
               <a name="servicestage_configuration"></a>
               The `configuration` block supports:
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS bucket endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key name of the OBS object.

        <a name="servicestage_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class ComponentInstanceConfigurationArgsDict(TypedDict):
        env_variables: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationEnvVariableArgsDict']]]]
        """
        Specifies the environment variables.
        The object structure is documented below.
        """
        lifecycle: NotRequired[pulumi.Input['ComponentInstanceConfigurationLifecycleArgsDict']]
        """
        Specifies the lifecycle.
        The object structure is documented below.
        """
        log_collection_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyArgsDict']]]]
        """
        Specifies the policies of the log collection.
        The object structure is documented below.
        """
        probe: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeArgsDict']]
        """
        Specifies the variable value.
        The object structure is documented below.

        <a name="servicestage_env_variables"></a>
        The `env_variable` block supports:
        """
        scheduler: NotRequired[pulumi.Input['ComponentInstanceConfigurationSchedulerArgsDict']]
        """
        Specifies the scheduling policy.
        The key indicates the component name. In the Docker container scenario, key indicates the container name.
        If the source parameters of a component specify the software package source, this parameter is optional, and the
        software package source of the component is inherited by default. Otherwise, this parameter is required.
        The object structure is documented below.
        """
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageArgsDict']]]]
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        strategy: NotRequired[pulumi.Input['ComponentInstanceConfigurationStrategyArgsDict']]
        """
        Specifies the upgrade policy.
        The object structure is documented below.
        """
elif False:
    ComponentInstanceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationArgs:
    def __init__(__self__, *,
                 env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationEnvVariableArgs']]]] = None,
                 lifecycle: Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleArgs']] = None,
                 log_collection_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyArgs']]]] = None,
                 probe: Optional[pulumi.Input['ComponentInstanceConfigurationProbeArgs']] = None,
                 scheduler: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerArgs']] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageArgs']]]] = None,
                 strategy: Optional[pulumi.Input['ComponentInstanceConfigurationStrategyArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationEnvVariableArgs']]] env_variables: Specifies the environment variables.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationLifecycleArgs'] lifecycle: Specifies the lifecycle.
               The object structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyArgs']]] log_collection_policies: Specifies the policies of the log collection.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationProbeArgs'] probe: Specifies the variable value.
               The object structure is documented below.
               
               <a name="servicestage_env_variables"></a>
               The `env_variable` block supports:
        :param pulumi.Input['ComponentInstanceConfigurationSchedulerArgs'] scheduler: Specifies the scheduling policy.
               The key indicates the component name. In the Docker container scenario, key indicates the container name.
               If the source parameters of a component specify the software package source, this parameter is optional, and the
               software package source of the component is inherited by default. Otherwise, this parameter is required.
               The object structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageArgs']]] storages: Specifies the data storage configuration.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationStrategyArgs'] strategy: Specifies the upgrade policy.
               The object structure is documented below.
        """
        if env_variables is not None:
            pulumi.set(__self__, "env_variables", env_variables)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if log_collection_policies is not None:
            pulumi.set(__self__, "log_collection_policies", log_collection_policies)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @_builtins.property
    @pulumi.getter(name="envVariables")
    def env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationEnvVariableArgs']]]]:
        """
        Specifies the environment variables.
        The object structure is documented below.
        """
        return pulumi.get(self, "env_variables")

    @env_variables.setter
    def env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationEnvVariableArgs']]]]):
        pulumi.set(self, "env_variables", value)

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleArgs']]:
        """
        Specifies the lifecycle.
        The object structure is documented below.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @_builtins.property
    @pulumi.getter(name="logCollectionPolicies")
    def log_collection_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyArgs']]]]:
        """
        Specifies the policies of the log collection.
        The object structure is documented below.
        """
        return pulumi.get(self, "log_collection_policies")

    @log_collection_policies.setter
    def log_collection_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyArgs']]]]):
        pulumi.set(self, "log_collection_policies", value)

    @_builtins.property
    @pulumi.getter
    def probe(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeArgs']]:
        """
        Specifies the variable value.
        The object structure is documented below.

        <a name="servicestage_env_variables"></a>
        The `env_variable` block supports:
        """
        return pulumi.get(self, "probe")

    @probe.setter
    def probe(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeArgs']]):
        pulumi.set(self, "probe", value)

    @_builtins.property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerArgs']]:
        """
        Specifies the scheduling policy.
        The key indicates the component name. In the Docker container scenario, key indicates the container name.
        If the source parameters of a component specify the software package source, this parameter is optional, and the
        software package source of the component is inherited by default. Otherwise, this parameter is required.
        The object structure is documented below.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerArgs']]):
        pulumi.set(self, "scheduler", value)

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageArgs']]]]:
        """
        Specifies the data storage configuration.
        The object structure is documented below.
        """
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationStrategyArgs']]:
        """
        Specifies the upgrade policy.
        The object structure is documented below.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationStrategyArgs']]):
        pulumi.set(self, "strategy", value)


if not MYPY:
    class ComponentInstanceConfigurationEnvVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the configuration item.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the variable value.

        <a name="servicestage_storages"></a>
        The `storage` block supports:
        """
elif False:
    ComponentInstanceConfigurationEnvVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationEnvVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the configuration item.
        :param pulumi.Input[_builtins.str] value: Specifies the variable value.
               
               <a name="servicestage_storages"></a>
               The `storage` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the variable value.

        <a name="servicestage_storages"></a>
        The `storage` block supports:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecycleArgsDict(TypedDict):
        entrypoint: NotRequired[pulumi.Input['ComponentInstanceConfigurationLifecycleEntrypointArgsDict']]
        """
        Specifies the startup commands.
        The object structure is documented below.
        """
        post_start: NotRequired[pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartArgsDict']]
        """
        Specifies the post-start processing.
        The object structure is documented below.
        """
        pre_stop: NotRequired[pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopArgsDict']]
        """
        Specifies the pre-stop processing.
        The object structure is documented below.

        <a name="servicestage_log_collection_policies"></a>
        The `log_collection_policy` block supports:
        """
elif False:
    ComponentInstanceConfigurationLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecycleArgs:
    def __init__(__self__, *,
                 entrypoint: Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleEntrypointArgs']] = None,
                 post_start: Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopArgs']] = None):
        """
        :param pulumi.Input['ComponentInstanceConfigurationLifecycleEntrypointArgs'] entrypoint: Specifies the startup commands.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartArgs'] post_start: Specifies the post-start processing.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopArgs'] pre_stop: Specifies the pre-stop processing.
               The object structure is documented below.
               
               <a name="servicestage_log_collection_policies"></a>
               The `log_collection_policy` block supports:
        """
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter
    def entrypoint(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleEntrypointArgs']]:
        """
        Specifies the startup commands.
        The object structure is documented below.
        """
        return pulumi.get(self, "entrypoint")

    @entrypoint.setter
    def entrypoint(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationLifecycleEntrypointArgs']]):
        pulumi.set(self, "entrypoint", value)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartArgs']]:
        """
        Specifies the post-start processing.
        The object structure is documented below.
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopArgs']]:
        """
        Specifies the pre-stop processing.
        The object structure is documented below.

        <a name="servicestage_log_collection_policies"></a>
        The `log_collection_policy` block supports:
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecycleEntrypointArgsDict(TypedDict):
        args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the running parameters.

        <a name="servicestage_lifecycle_process"></a>
        The `post_start` and `pre_stop` block supports:
        """
        commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationLifecycleEntrypointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecycleEntrypointArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] args: Specifies the running parameters.
               
               <a name="servicestage_lifecycle_process"></a>
               The `post_start` and `pre_stop` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the running parameters.

        <a name="servicestage_lifecycle_process"></a>
        The `post_start` and `pre_stop` block supports:
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecyclePostStartArgsDict(TypedDict):
        parameters: pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartParametersArgsDict']
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
elif False:
    ComponentInstanceConfigurationLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecyclePostStartArgs:
    def __init__(__self__, *,
                 parameters: pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartParametersArgs'],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartParametersArgs'] parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartParametersArgs']:
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['ComponentInstanceConfigurationLifecyclePostStartParametersArgs']):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecyclePostStartParametersArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request path.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the listening port of the application component process.
        """
elif False:
    ComponentInstanceConfigurationLifecyclePostStartParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecyclePostStartParametersArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecyclePreStopArgsDict(TypedDict):
        parameters: pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopParametersArgsDict']
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
elif False:
    ComponentInstanceConfigurationLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecyclePreStopArgs:
    def __init__(__self__, *,
                 parameters: pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopParametersArgs'],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopParametersArgs'] parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopParametersArgs']:
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['ComponentInstanceConfigurationLifecyclePreStopParametersArgs']):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ComponentInstanceConfigurationLifecyclePreStopParametersArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request path.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the listening port of the application component process.
        """
elif False:
    ComponentInstanceConfigurationLifecyclePreStopParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLifecyclePreStopParametersArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentInstanceConfigurationLogCollectionPolicyArgsDict(TypedDict):
        container_mountings: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgsDict']]]
        """
        Specifies the configurations of the container mounting.
        The object structure is documented below.
        """
        host_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the The host path that will be mounted to the specified container path.

        <a name="servicestage_container_mounting"></a>
        The `container_mounting` block supports:
        """
elif False:
    ComponentInstanceConfigurationLogCollectionPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLogCollectionPolicyArgs:
    def __init__(__self__, *,
                 container_mountings: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs']]],
                 host_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs']]] container_mountings: Specifies the configurations of the container mounting.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] host_path: Specifies the The host path that will be mounted to the specified container path.
               
               <a name="servicestage_container_mounting"></a>
               The `container_mounting` block supports:
        """
        pulumi.set(__self__, "container_mountings", container_mountings)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)

    @_builtins.property
    @pulumi.getter(name="containerMountings")
    def container_mountings(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs']]]:
        """
        Specifies the configurations of the container mounting.
        The object structure is documented below.
        """
        return pulumi.get(self, "container_mountings")

    @container_mountings.setter
    def container_mountings(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs']]]):
        pulumi.set(self, "container_mountings", value)

    @_builtins.property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the The host path that will be mounted to the specified container path.

        <a name="servicestage_container_mounting"></a>
        The `container_mounting` block supports:
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_path", value)


if not MYPY:
    class ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the request path.
        """
        aging_period: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the aging period.
        The valid values are **Hourly**, **Daily** and **Weekly**. The default value is **Hourly**.

        <a name="servicestage_entrypoint"></a>
        The `entrypoint` block supports:
        """
        host_extend_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the extended host path.
        This parameter can be configured only when `host_path` is configured.
        The valid values are as follows:
        + **PodUID**
        + **PodName**
        + **PodUID/ContainerName**
        + **PodName/ContainerName**
        """
elif False:
    ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationLogCollectionPolicyContainerMountingArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 aging_period: Optional[pulumi.Input[_builtins.str]] = None,
                 host_extend_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.str] aging_period: Specifies the aging period.
               The valid values are **Hourly**, **Daily** and **Weekly**. The default value is **Hourly**.
               
               <a name="servicestage_entrypoint"></a>
               The `entrypoint` block supports:
        :param pulumi.Input[_builtins.str] host_extend_path: Specifies the extended host path.
               This parameter can be configured only when `host_path` is configured.
               The valid values are as follows:
               + **PodUID**
               + **PodName**
               + **PodUID/ContainerName**
               + **PodName/ContainerName**
        """
        pulumi.set(__self__, "path", path)
        if aging_period is not None:
            pulumi.set(__self__, "aging_period", aging_period)
        if host_extend_path is not None:
            pulumi.set(__self__, "host_extend_path", host_extend_path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="agingPeriod")
    def aging_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the aging period.
        The valid values are **Hourly**, **Daily** and **Weekly**. The default value is **Hourly**.

        <a name="servicestage_entrypoint"></a>
        The `entrypoint` block supports:
        """
        return pulumi.get(self, "aging_period")

    @aging_period.setter
    def aging_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aging_period", value)

    @_builtins.property
    @pulumi.getter(name="hostExtendPath")
    def host_extend_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the extended host path.
        This parameter can be configured only when `host_path` is configured.
        The valid values are as follows:
        + **PodUID**
        + **PodName**
        + **PodUID/ContainerName**
        + **PodName/ContainerName**
        """
        return pulumi.get(self, "host_extend_path")

    @host_extend_path.setter
    def host_extend_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_extend_path", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeArgsDict(TypedDict):
        liveness: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeLivenessArgsDict']]
        """
        Specifies the component liveness probe.
        The object structure is documented below.
        """
        readiness: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeReadinessArgsDict']]
        """
        Specifies the component service probe.
        The object structure is documented below.

        <a name="servicestage_probe_detail"></a>
        The `liveness` and `readiness` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeArgs:
    def __init__(__self__, *,
                 liveness: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessArgs']] = None,
                 readiness: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessArgs']] = None):
        """
        :param pulumi.Input['ComponentInstanceConfigurationProbeLivenessArgs'] liveness: Specifies the component liveness probe.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationProbeReadinessArgs'] readiness: Specifies the component service probe.
               The object structure is documented below.
               
               <a name="servicestage_probe_detail"></a>
               The `liveness` and `readiness` block supports:
        """
        if liveness is not None:
            pulumi.set(__self__, "liveness", liveness)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @_builtins.property
    @pulumi.getter
    def liveness(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessArgs']]:
        """
        Specifies the component liveness probe.
        The object structure is documented below.
        """
        return pulumi.get(self, "liveness")

    @liveness.setter
    def liveness(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessArgs']]):
        pulumi.set(self, "liveness", value)

    @_builtins.property
    @pulumi.getter
    def readiness(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessArgs']]:
        """
        Specifies the component service probe.
        The object structure is documented below.

        <a name="servicestage_probe_detail"></a>
        The `liveness` and `readiness` block supports:
        """
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessArgs']]):
        pulumi.set(self, "readiness", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeLivenessArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        command_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeLivenessCommandParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        delay: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the interval between the startup and detection.
        """
        http_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeLivenessHttpParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        tcp_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeLivenessTcpParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeLivenessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeLivenessArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 command_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessCommandParamArgs']] = None,
                 delay: Optional[pulumi.Input[_builtins.int]] = None,
                 http_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessHttpParamArgs']] = None,
                 tcp_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessTcpParamArgs']] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param pulumi.Input['ComponentInstanceConfigurationProbeLivenessCommandParamArgs'] command_param: Specifies the commands. Required if `type` is **command**.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] delay: Specifies the interval between the startup and detection.
        :param pulumi.Input['ComponentInstanceConfigurationProbeLivenessHttpParamArgs'] http_param: Specifies the commands. Required if `type` is **http**.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationProbeLivenessTcpParamArgs'] tcp_param: Specifies the commands. Required if `type` is **tcp**.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] timeout: Specifies the detection timeout interval.
               
               <a name="servicestage_command_param"></a>
               The `command_param` block supports:
        """
        pulumi.set(__self__, "type", type)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if http_param is not None:
            pulumi.set(__self__, "http_param", http_param)
        if tcp_param is not None:
            pulumi.set(__self__, "tcp_param", tcp_param)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessCommandParamArgs']]:
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        return pulumi.get(self, "command_param")

    @command_param.setter
    def command_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessCommandParamArgs']]):
        pulumi.set(self, "command_param", value)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval between the startup and detection.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter(name="httpParam")
    def http_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessHttpParamArgs']]:
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        return pulumi.get(self, "http_param")

    @http_param.setter
    def http_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessHttpParamArgs']]):
        pulumi.set(self, "http_param", value)

    @_builtins.property
    @pulumi.getter(name="tcpParam")
    def tcp_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessTcpParamArgs']]:
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        return pulumi.get(self, "tcp_param")

    @tcp_param.setter
    def tcp_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeLivenessTcpParamArgs']]):
        pulumi.set(self, "tcp_param", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeLivenessCommandParamArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeLivenessCommandParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeLivenessCommandParamArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeLivenessHttpParamArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the request path.
        """
        port: pulumi.Input[_builtins.int]
        """
        Specifies the listening port of the application component process.
        """
        scheme: pulumi.Input[_builtins.str]
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeLivenessHttpParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeLivenessHttpParamArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 scheme: pulumi.Input[_builtins.str],
                 host: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        :param pulumi.Input[_builtins.str] scheme: Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        :param pulumi.Input[_builtins.str] host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeLivenessTcpParamArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Specifies the listening port of the application component process.
        """
elif False:
    ComponentInstanceConfigurationProbeLivenessTcpParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeLivenessTcpParamArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeReadinessArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        command_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeReadinessCommandParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        delay: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the interval between the startup and detection.
        """
        http_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeReadinessHttpParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        tcp_param: NotRequired[pulumi.Input['ComponentInstanceConfigurationProbeReadinessTcpParamArgsDict']]
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeReadinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeReadinessArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 command_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessCommandParamArgs']] = None,
                 delay: Optional[pulumi.Input[_builtins.int]] = None,
                 http_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessHttpParamArgs']] = None,
                 tcp_param: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessTcpParamArgs']] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param pulumi.Input['ComponentInstanceConfigurationProbeReadinessCommandParamArgs'] command_param: Specifies the commands. Required if `type` is **command**.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] delay: Specifies the interval between the startup and detection.
        :param pulumi.Input['ComponentInstanceConfigurationProbeReadinessHttpParamArgs'] http_param: Specifies the commands. Required if `type` is **http**.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationProbeReadinessTcpParamArgs'] tcp_param: Specifies the commands. Required if `type` is **tcp**.
               The object structure is documented below.
        :param pulumi.Input[_builtins.int] timeout: Specifies the detection timeout interval.
               
               <a name="servicestage_command_param"></a>
               The `command_param` block supports:
        """
        pulumi.set(__self__, "type", type)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if http_param is not None:
            pulumi.set(__self__, "http_param", http_param)
        if tcp_param is not None:
            pulumi.set(__self__, "tcp_param", tcp_param)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessCommandParamArgs']]:
        """
        Specifies the commands. Required if `type` is **command**.
        The object structure is documented below.
        """
        return pulumi.get(self, "command_param")

    @command_param.setter
    def command_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessCommandParamArgs']]):
        pulumi.set(self, "command_param", value)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval between the startup and detection.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter(name="httpParam")
    def http_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessHttpParamArgs']]:
        """
        Specifies the commands. Required if `type` is **http**.
        The object structure is documented below.
        """
        return pulumi.get(self, "http_param")

    @http_param.setter
    def http_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessHttpParamArgs']]):
        pulumi.set(self, "http_param", value)

    @_builtins.property
    @pulumi.getter(name="tcpParam")
    def tcp_param(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessTcpParamArgs']]:
        """
        Specifies the commands. Required if `type` is **tcp**.
        The object structure is documented below.
        """
        return pulumi.get(self, "tcp_param")

    @tcp_param.setter
    def tcp_param(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationProbeReadinessTcpParamArgs']]):
        pulumi.set(self, "tcp_param", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the detection timeout interval.

        <a name="servicestage_command_param"></a>
        The `command_param` block supports:
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeReadinessCommandParamArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeReadinessCommandParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeReadinessCommandParamArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list.
               
               <a name="servicestage_http_param"></a>
               The `http_param` block supports:
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the command list.

        <a name="servicestage_http_param"></a>
        The `http_param` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeReadinessHttpParamArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the request path.
        """
        port: pulumi.Input[_builtins.int]
        """
        Specifies the listening port of the application component process.
        """
        scheme: pulumi.Input[_builtins.str]
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
elif False:
    ComponentInstanceConfigurationProbeReadinessHttpParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeReadinessHttpParamArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 scheme: pulumi.Input[_builtins.str],
                 host: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        :param pulumi.Input[_builtins.str] scheme: Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        :param pulumi.Input[_builtins.str] host: Specifies the custom IP address. The default address is pod IP address.
               
               <a name="servicestage_tcp_param"></a>
               The `tcp_param` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol scheme. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom IP address. The default address is pod IP address.

        <a name="servicestage_tcp_param"></a>
        The `tcp_param` block supports:
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)


if not MYPY:
    class ComponentInstanceConfigurationProbeReadinessTcpParamArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Specifies the listening port of the application component process.
        """
elif False:
    ComponentInstanceConfigurationProbeReadinessTcpParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationProbeReadinessTcpParamArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentInstanceConfigurationSchedulerArgsDict(TypedDict):
        affinity: NotRequired[pulumi.Input['ComponentInstanceConfigurationSchedulerAffinityArgsDict']]
        """
        Specifies the commands.
        The object structure is documented below.
        """
        anti_affinity: NotRequired[pulumi.Input['ComponentInstanceConfigurationSchedulerAntiAffinityArgsDict']]
        """
        Specifies the commands.
        The object structure is documented below.

        <a name="servicestage_affinity"></a>
        The `affinity` and `anti_affinity` block supports:
        """
elif False:
    ComponentInstanceConfigurationSchedulerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationSchedulerArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAffinityArgs']] = None,
                 anti_affinity: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAntiAffinityArgs']] = None):
        """
        :param pulumi.Input['ComponentInstanceConfigurationSchedulerAffinityArgs'] affinity: Specifies the commands.
               The object structure is documented below.
        :param pulumi.Input['ComponentInstanceConfigurationSchedulerAntiAffinityArgs'] anti_affinity: Specifies the commands.
               The object structure is documented below.
               
               <a name="servicestage_affinity"></a>
               The `affinity` and `anti_affinity` block supports:
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if anti_affinity is not None:
            pulumi.set(__self__, "anti_affinity", anti_affinity)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAffinityArgs']]:
        """
        Specifies the commands.
        The object structure is documented below.
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @_builtins.property
    @pulumi.getter(name="antiAffinity")
    def anti_affinity(self) -> Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAntiAffinityArgs']]:
        """
        Specifies the commands.
        The object structure is documented below.

        <a name="servicestage_affinity"></a>
        The `affinity` and `anti_affinity` block supports:
        """
        return pulumi.get(self, "anti_affinity")

    @anti_affinity.setter
    def anti_affinity(self, value: Optional[pulumi.Input['ComponentInstanceConfigurationSchedulerAntiAffinityArgs']]):
        pulumi.set(self, "anti_affinity", value)


if not MYPY:
    class ComponentInstanceConfigurationSchedulerAffinityArgsDict(TypedDict):
        availability_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the AZ list.
        """
        instance_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        private_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the node private IP address list.
        """
elif False:
    ComponentInstanceConfigurationSchedulerAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationSchedulerAffinityArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the AZ list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_names: Specifies the list of component instance names.
               
               <a name="servicestage_probe"></a>
               The `probe` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] private_ips: Specifies the node private IP address list.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if instance_names is not None:
            pulumi.set(__self__, "instance_names", instance_names)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the AZ list.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "availability_zones", value)

    @_builtins.property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        return pulumi.get(self, "instance_names")

    @instance_names.setter
    def instance_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_names", value)

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the node private IP address list.
        """
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "private_ips", value)


if not MYPY:
    class ComponentInstanceConfigurationSchedulerAntiAffinityArgsDict(TypedDict):
        availability_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the AZ list.
        """
        instance_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        private_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the node private IP address list.
        """
elif False:
    ComponentInstanceConfigurationSchedulerAntiAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationSchedulerAntiAffinityArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the AZ list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_names: Specifies the list of component instance names.
               
               <a name="servicestage_probe"></a>
               The `probe` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] private_ips: Specifies the node private IP address list.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if instance_names is not None:
            pulumi.set(__self__, "instance_names", instance_names)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the AZ list.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "availability_zones", value)

    @_builtins.property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of component instance names.

        <a name="servicestage_probe"></a>
        The `probe` block supports:
        """
        return pulumi.get(self, "instance_names")

    @instance_names.setter
    def instance_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_names", value)

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the node private IP address list.
        """
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "private_ips", value)


if not MYPY:
    class ComponentInstanceConfigurationStorageArgsDict(TypedDict):
        mounts: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageMountArgsDict']]]
        """
        Specifies the directory mounted to the container.
        The object structure is documented below.

        <a name="servicestage_storage_parameters"></a>
        The `parameter` block supports:
        """
        parameter: pulumi.Input['ComponentInstanceConfigurationStorageParameterArgsDict']
        """
        Specifies the storage parameters.
        The object structure is documented below.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
elif False:
    ComponentInstanceConfigurationStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationStorageArgs:
    def __init__(__self__, *,
                 mounts: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageMountArgs']]],
                 parameter: pulumi.Input['ComponentInstanceConfigurationStorageParameterArgs'],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageMountArgs']]] mounts: Specifies the directory mounted to the container.
               The object structure is documented below.
               
               <a name="servicestage_storage_parameters"></a>
               The `parameter` block supports:
        :param pulumi.Input['ComponentInstanceConfigurationStorageParameterArgs'] parameter: Specifies the storage parameters.
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        """
        pulumi.set(__self__, "mounts", mounts)
        pulumi.set(__self__, "parameter", parameter)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def mounts(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageMountArgs']]]:
        """
        Specifies the directory mounted to the container.
        The object structure is documented below.

        <a name="servicestage_storage_parameters"></a>
        The `parameter` block supports:
        """
        return pulumi.get(self, "mounts")

    @mounts.setter
    def mounts(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentInstanceConfigurationStorageMountArgs']]]):
        pulumi.set(self, "mounts", value)

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> pulumi.Input['ComponentInstanceConfigurationStorageParameterArgs']:
        """
        Specifies the storage parameters.
        The object structure is documented below.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: pulumi.Input['ComponentInstanceConfigurationStorageParameterArgs']):
        pulumi.set(self, "parameter", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ComponentInstanceConfigurationStorageMountArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the request path.
        """
        readonly: pulumi.Input[_builtins.bool]
        """
        Specifies the mounted disk permission is read-only or read-write.
        + **true**: read-only.
        + **false**: read-write.
        """
        subpath: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the subpath of the mounted disk.
        This parameter is applicable to `http` type.

        <a name="servicestage_strategy"></a>
        The `strategy` block supports:
        """
elif False:
    ComponentInstanceConfigurationStorageMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationStorageMountArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 readonly: pulumi.Input[_builtins.bool],
                 subpath: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.bool] readonly: Specifies the mounted disk permission is read-only or read-write.
               + **true**: read-only.
               + **false**: read-write.
        :param pulumi.Input[_builtins.str] subpath: Specifies the subpath of the mounted disk.
               This parameter is applicable to `http` type.
               
               <a name="servicestage_strategy"></a>
               The `strategy` block supports:
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "readonly", readonly)
        if subpath is not None:
            pulumi.set(__self__, "subpath", subpath)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies the mounted disk permission is read-only or read-write.
        + **true**: read-only.
        + **false**: read-write.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "readonly", value)

    @_builtins.property
    @pulumi.getter
    def subpath(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subpath of the mounted disk.
        This parameter is applicable to `http` type.

        <a name="servicestage_strategy"></a>
        The `strategy` block supports:
        """
        return pulumi.get(self, "subpath")

    @subpath.setter
    def subpath(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subpath", value)


if not MYPY:
    class ComponentInstanceConfigurationStorageParameterArgsDict(TypedDict):
        claim_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the PVC name.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the configuration item.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request path.
        """
        secret_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Secret name. Required if the storage `type` is **Secret**.

        <a name="servicestage_storage_mounts"></a>
        The `mount` block supports:
        """
elif False:
    ComponentInstanceConfigurationStorageParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationStorageParameterArgs:
    def __init__(__self__, *,
                 claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] claim_name: Specifies the PVC name.
        :param pulumi.Input[_builtins.str] name: Specifies the configuration item.
        :param pulumi.Input[_builtins.str] path: Specifies the request path.
        :param pulumi.Input[_builtins.str] secret_name: Specifies the Secret name. Required if the storage `type` is **Secret**.
               
               <a name="servicestage_storage_mounts"></a>
               The `mount` block supports:
        """
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the PVC name.
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "claim_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Secret name. Required if the storage `type` is **Secret**.

        <a name="servicestage_storage_mounts"></a>
        The `mount` block supports:
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_name", value)


if not MYPY:
    class ComponentInstanceConfigurationStrategyArgsDict(TypedDict):
        upgrade: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the upgrade policy.
        The valid values are **Recreate** or **RollingUpdate**. The default value is **RollingUpdate**.
        The **Recreate** indicates in-place upgrade while the **RollingUpdate** indicates rolling upgrade.

        <a name="servicestage_lifecycle"></a>
        The `lifecycle` block supports:
        """
elif False:
    ComponentInstanceConfigurationStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceConfigurationStrategyArgs:
    def __init__(__self__, *,
                 upgrade: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] upgrade: Specifies the upgrade policy.
               The valid values are **Recreate** or **RollingUpdate**. The default value is **RollingUpdate**.
               The **Recreate** indicates in-place upgrade while the **RollingUpdate** indicates rolling upgrade.
               
               <a name="servicestage_lifecycle"></a>
               The `lifecycle` block supports:
        """
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)

    @_builtins.property
    @pulumi.getter
    def upgrade(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the upgrade policy.
        The valid values are **Recreate** or **RollingUpdate**. The default value is **RollingUpdate**.
        The **Recreate** indicates in-place upgrade while the **RollingUpdate** indicates rolling upgrade.

        <a name="servicestage_lifecycle"></a>
        The `lifecycle` block supports:
        """
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade", value)


if not MYPY:
    class ComponentInstanceExternalAccessArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access address. For example: `www.example.com`.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the listening port of the application component process.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the protocol. The valid values are **HTTP** and **HTTPS**.
        """
elif False:
    ComponentInstanceExternalAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceExternalAccessArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Specifies the access address. For example: `www.example.com`.
        :param pulumi.Input[_builtins.int] port: Specifies the listening port of the application component process.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol. The valid values are **HTTP** and **HTTPS**.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access address. For example: `www.example.com`.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the listening port of the application component process.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol. The valid values are **HTTP** and **HTTPS**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class ComponentInstanceReferResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID.
        If the `type` is set to **ecs**, the value of this parameter must be **Default**.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        alias: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the application alias, which is provided only in DCS scenario.
        The valid values are: **distributed_session**, **distributed_cache** and **distributed_session, distributed_cache**.
        Defaults to **distributed_session, distributed_cache**.
        """
        parameters: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
elif False:
    ComponentInstanceReferResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInstanceReferResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the resource ID.
               If the `type` is set to **ecs**, the value of this parameter must be **Default**.
        :param pulumi.Input[_builtins.str] type: Specifies the probe type. The valid values are as follows:
               + **command**: command execution check.
               + **http**: HTTP request check.
               + **tcp**: TCP port check.
        :param pulumi.Input[_builtins.str] alias: Specifies the application alias, which is provided only in DCS scenario.
               The valid values are: **distributed_session**, **distributed_cache** and **distributed_session, distributed_cache**.
               Defaults to **distributed_session, distributed_cache**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the start post-processing or stop pre-processing parameters.
               The object structure is documented below.
               
               <a name="servicestage_process_param"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID.
        If the `type` is set to **ecs**, the value of this parameter must be **Default**.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the probe type. The valid values are as follows:
        + **command**: command execution check.
        + **http**: HTTP request check.
        + **tcp**: TCP port check.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application alias, which is provided only in DCS scenario.
        The valid values are: **distributed_session**, **distributed_cache** and **distributed_session, distributed_cache**.
        Defaults to **distributed_session, distributed_cache**.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the start post-processing or stop pre-processing parameters.
        The object structure is documented below.

        <a name="servicestage_process_param"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)


if not MYPY:
    class ComponentSourceArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of repository source or storage.
        The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
        """
        url: pulumi.Input[_builtins.str]
        """
        Specifies the URL of the repository or package storage.
        """
        authorization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authorization name.
        This parameter and `storage_type` are alternative.
        """
        properties: NotRequired[pulumi.Input['ComponentSourcePropertiesArgsDict']]
        """
        Specifies the component builder's properties.
        The object structure is documented below.

        <a name="servicestage_component_builder"></a>
        The `builder` block supports:
        """
        repo_namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the namespace name.
        """
        repo_ref: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the branch of the code repository.
        The default value is `master`.
        """
        storage_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the storage type, such as **obs**, **swr**.
        This parameter is conflict with `repo_ref` and `repo_namespace`.
        """
elif False:
    ComponentSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentSourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str],
                 authorization: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input['ComponentSourcePropertiesArgs']] = None,
                 repo_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of repository source or storage.
               The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
        :param pulumi.Input[_builtins.str] url: Specifies the URL of the repository or package storage.
        :param pulumi.Input[_builtins.str] authorization: Specifies the authorization name.
               This parameter and `storage_type` are alternative.
        :param pulumi.Input['ComponentSourcePropertiesArgs'] properties: Specifies the component builder's properties.
               The object structure is documented below.
               
               <a name="servicestage_component_builder"></a>
               The `builder` block supports:
        :param pulumi.Input[_builtins.str] repo_namespace: Specifies the namespace name.
        :param pulumi.Input[_builtins.str] repo_ref: Specifies the name of the branch of the code repository.
               The default value is `master`.
        :param pulumi.Input[_builtins.str] storage_type: Specifies the storage type, such as **obs**, **swr**.
               This parameter is conflict with `repo_ref` and `repo_namespace`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if repo_namespace is not None:
            pulumi.set(__self__, "repo_namespace", repo_namespace)
        if repo_ref is not None:
            pulumi.set(__self__, "repo_ref", repo_ref)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of repository source or storage.
        The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URL of the repository or package storage.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authorization name.
        This parameter and `storage_type` are alternative.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['ComponentSourcePropertiesArgs']]:
        """
        Specifies the component builder's properties.
        The object structure is documented below.

        <a name="servicestage_component_builder"></a>
        The `builder` block supports:
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['ComponentSourcePropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="repoNamespace")
    def repo_namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace name.
        """
        return pulumi.get(self, "repo_namespace")

    @repo_namespace.setter
    def repo_namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_namespace", value)

    @_builtins.property
    @pulumi.getter(name="repoRef")
    def repo_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the branch of the code repository.
        The default value is `master`.
        """
        return pulumi.get(self, "repo_ref")

    @repo_ref.setter
    def repo_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_ref", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the storage type, such as **obs**, **swr**.
        This parameter is conflict with `repo_ref` and `repo_namespace`.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)


if not MYPY:
    class ComponentSourcePropertiesArgsDict(TypedDict):
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the bucket name of obs.
        """
        endpoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the endpoint of obs.
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the key of obs.
        """
elif False:
    ComponentSourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentSourcePropertiesArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: Specifies the bucket name of obs.
        :param pulumi.Input[_builtins.str] endpoint: Specifies the endpoint of obs.
        :param pulumi.Input[_builtins.str] key: Specifies the key of obs.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bucket name of obs.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the endpoint of obs.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key of obs.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class ComponentV3AffinityArgsDict(TypedDict):
        condition: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        kind: pulumi.Input[_builtins.str]
        """
        Specifies the kind of the (anti) affinity rule.
        """
        match_expressions: pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityMatchExpressionArgsDict']]]
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
elif False:
    ComponentV3AffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3AffinityArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[_builtins.str],
                 kind: pulumi.Input[_builtins.str],
                 match_expressions: pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityMatchExpressionArgs']]],
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] condition: Specifies the condition type of the (anti) affinity rule.
        :param pulumi.Input[_builtins.str] kind: Specifies the kind of the (anti) affinity rule.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityMatchExpressionArgs']]] match_expressions: Specifies the list of the match rules for (anti) affinity.  
               The match_expressions structure is documented below.
        :param pulumi.Input[_builtins.int] weight: Specifies the weight of the (anti) affinity rule.  
               The valid value is range from `1` to `100`.
               
               <a name="servicestage_v3_component_affinity_match_expressions"></a>
               The `match_expressions` block supports:
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "match_expressions", match_expressions)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the kind of the (anti) affinity rule.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityMatchExpressionArgs']]]:
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentV3AffinityMatchExpressionArgs']]]):
        pulumi.set(self, "match_expressions", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ComponentV3AffinityMatchExpressionArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the key of the match rule.
        """
        operation: pulumi.Input[_builtins.str]
        """
        Specifies the operation of the match rule.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
elif False:
    ComponentV3AffinityMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3AffinityMatchExpressionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 operation: pulumi.Input[_builtins.str],
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the key of the match rule.
        :param pulumi.Input[_builtins.str] operation: Specifies the operation of the match rule.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key of the match rule.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation of the match rule.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentV3AntiAffinityArgsDict(TypedDict):
        condition: pulumi.Input[_builtins.str]
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        kind: pulumi.Input[_builtins.str]
        """
        Specifies the kind of the (anti) affinity rule.
        """
        match_expressions: pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityMatchExpressionArgsDict']]]
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
elif False:
    ComponentV3AntiAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3AntiAffinityArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[_builtins.str],
                 kind: pulumi.Input[_builtins.str],
                 match_expressions: pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityMatchExpressionArgs']]],
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] condition: Specifies the condition type of the (anti) affinity rule.
        :param pulumi.Input[_builtins.str] kind: Specifies the kind of the (anti) affinity rule.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityMatchExpressionArgs']]] match_expressions: Specifies the list of the match rules for (anti) affinity.  
               The match_expressions structure is documented below.
        :param pulumi.Input[_builtins.int] weight: Specifies the weight of the (anti) affinity rule.  
               The valid value is range from `1` to `100`.
               
               <a name="servicestage_v3_component_affinity_match_expressions"></a>
               The `match_expressions` block supports:
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "match_expressions", match_expressions)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the condition type of the (anti) affinity rule.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the kind of the (anti) affinity rule.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityMatchExpressionArgs']]]:
        """
        Specifies the list of the match rules for (anti) affinity.  
        The match_expressions structure is documented below.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentV3AntiAffinityMatchExpressionArgs']]]):
        pulumi.set(self, "match_expressions", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the weight of the (anti) affinity rule.  
        The valid value is range from `1` to `100`.

        <a name="servicestage_v3_component_affinity_match_expressions"></a>
        The `match_expressions` block supports:
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ComponentV3AntiAffinityMatchExpressionArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the key of the match rule.
        """
        operation: pulumi.Input[_builtins.str]
        """
        Specifies the operation of the match rule.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
elif False:
    ComponentV3AntiAffinityMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3AntiAffinityMatchExpressionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 operation: pulumi.Input[_builtins.str],
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the key of the match rule.
        :param pulumi.Input[_builtins.str] operation: Specifies the operation of the match rule.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key of the match rule.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation of the match rule.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentV3CustomMetricArgsDict(TypedDict):
        dimensions: pulumi.Input[_builtins.str]
        """
        Specifies the monitoring dimension, such as **cpu_usage**, **mem_usage** or
        **cpu_usage,mem_usage** (separated by a comma).

        <a name="servicestage_v3_component_affinity"></a>
        The `affinity` and `anti_affinity` blocks support:
        """
        path: pulumi.Input[_builtins.str]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        port: pulumi.Input[_builtins.int]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
elif False:
    ComponentV3CustomMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3CustomMetricArgs:
    def __init__(__self__, *,
                 dimensions: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] dimensions: Specifies the monitoring dimension, such as **cpu_usage**, **mem_usage** or
               **cpu_usage,mem_usage** (separated by a comma).
               
               <a name="servicestage_v3_component_affinity"></a>
               The `affinity` and `anti_affinity` blocks support:
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the monitoring dimension, such as **cpu_usage**, **mem_usage** or
        **cpu_usage,mem_usage** (separated by a comma).

        <a name="servicestage_v3_component_affinity"></a>
        The `affinity` and `anti_affinity` blocks support:
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dimensions", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentV3DeployStrategyArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        gray_release: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the gray release parameters, in JSON format.  
        Required if the `type` is **GrayRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table888818707).

        <a name="servicestage_v3_component_lifecycle"></a>
        The `post_start` and `pre_stop` blocks support:
        """
        gray_release_origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.gray_release'.
        """
        rolling_release: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the rolling release parameters, in JSON format.  
        Required if the `type` is **RollingRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table4696103920).
        """
        rolling_release_origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.rolling_release'.
        """
elif False:
    ComponentV3DeployStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3DeployStrategyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 gray_release: Optional[pulumi.Input[_builtins.str]] = None,
                 gray_release_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 rolling_release: Optional[pulumi.Input[_builtins.str]] = None,
                 rolling_release_origin: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[_builtins.str] gray_release: Specifies the gray release parameters, in JSON format.  
               Required if the `type` is **GrayRelease**.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table888818707).
               
               <a name="servicestage_v3_component_lifecycle"></a>
               The `post_start` and `pre_stop` blocks support:
        :param pulumi.Input[_builtins.str] gray_release_origin: The script configuration value of this change is also the original value used for comparison with
               the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.gray_release'.
        :param pulumi.Input[_builtins.str] rolling_release: Specifies the rolling release parameters, in JSON format.  
               Required if the `type` is **RollingRelease**.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table4696103920).
        :param pulumi.Input[_builtins.str] rolling_release_origin: The script configuration value of this change is also the original value used for comparison with
               the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.rolling_release'.
        """
        pulumi.set(__self__, "type", type)
        if gray_release is not None:
            pulumi.set(__self__, "gray_release", gray_release)
        if gray_release_origin is not None:
            pulumi.set(__self__, "gray_release_origin", gray_release_origin)
        if rolling_release is not None:
            pulumi.set(__self__, "rolling_release", rolling_release)
        if rolling_release_origin is not None:
            pulumi.set(__self__, "rolling_release_origin", rolling_release_origin)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="grayRelease")
    def gray_release(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the gray release parameters, in JSON format.  
        Required if the `type` is **GrayRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table888818707).

        <a name="servicestage_v3_component_lifecycle"></a>
        The `post_start` and `pre_stop` blocks support:
        """
        return pulumi.get(self, "gray_release")

    @gray_release.setter
    def gray_release(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gray_release", value)

    @_builtins.property
    @pulumi.getter(name="grayReleaseOrigin")
    def gray_release_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.gray_release'.
        """
        return pulumi.get(self, "gray_release_origin")

    @gray_release_origin.setter
    def gray_release_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gray_release_origin", value)

    @_builtins.property
    @pulumi.getter(name="rollingRelease")
    def rolling_release(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rolling release parameters, in JSON format.  
        Required if the `type` is **RollingRelease**.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table4696103920).
        """
        return pulumi.get(self, "rolling_release")

    @rolling_release.setter
    def rolling_release(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rolling_release", value)

    @_builtins.property
    @pulumi.getter(name="rollingReleaseOrigin")
    def rolling_release_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script configuration value of this change is also the original value used for comparison with
        the new value next time the change is made. The corresponding parameter name is 'deploy_strategy.0.rolling_release'.
        """
        return pulumi.get(self, "rolling_release_origin")

    @rolling_release_origin.setter
    def rolling_release_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rolling_release_origin", value)


if not MYPY:
    class ComponentV3EnvArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
elif False:
    ComponentV3EnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3EnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the match rule.
               
               <a name="servicestage_v3_component_probe"></a>
               The `liveness_probe` and `readiness_probe` blocks support:
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the match rule.

        <a name="servicestage_v3_component_probe"></a>
        The `liveness_probe` and `readiness_probe` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentV3ExternalAccessArgsDict(TypedDict):
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol of the external access.
        """
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the address of the external access.
        """
        forward_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the forward port of the external access.
        """
elif False:
    ComponentV3ExternalAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3ExternalAccessArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[_builtins.str],
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 forward_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the external access.
        :param pulumi.Input[_builtins.str] address: Specifies the address of the external access.
        :param pulumi.Input[_builtins.int] forward_port: Specifies the forward port of the external access.
        """
        pulumi.set(__self__, "protocol", protocol)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if forward_port is not None:
            pulumi.set(__self__, "forward_port", forward_port)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol of the external access.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address of the external access.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="forwardPort")
    def forward_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the forward port of the external access.
        """
        return pulumi.get(self, "forward_port")

    @forward_port.setter
    def forward_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "forward_port", value)


if not MYPY:
    class ComponentV3LivenessProbeArgsDict(TypedDict):
        delay: pulumi.Input[_builtins.int]
        """
        Specifies the delay time of the probe.
        """
        timeout: pulumi.Input[_builtins.int]
        """
        Specifies the timeout of the probe.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
elif False:
    ComponentV3LivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3LivenessProbeArgs:
    def __init__(__self__, *,
                 delay: pulumi.Input[_builtins.int],
                 timeout: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] delay: Specifies the delay time of the probe.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout of the probe.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param pulumi.Input[_builtins.str] scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the delay time of the probe.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timeout of the probe.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class ComponentV3LogArgsDict(TypedDict):
        host_extend_path: pulumi.Input[_builtins.str]
        """
        Specifies the extension path of the host.
        + **None**: the extended path is not used.
        + **PodUID**: extend the host path based on the pod ID.
        + **PodName**: extend the host path based on the pod name.
        + **PodUID/ContainerName**: extend the host path based on the pod ID and container name.
        + **PodName/ContainerName**: extend the host path based on the pod name and container name.

        <a name="servicestage_v3_component_custom_metric"></a>
        The `custom_metric` block supports:
        """
        host_path: pulumi.Input[_builtins.str]
        """
        Specifies the mounted host path, e.g. **/tmp**.
        """
        log_path: pulumi.Input[_builtins.str]
        """
        Specifies the log path of the container, e.g. **/tmp**.
        """
        rotate: pulumi.Input[_builtins.str]
        """
        Specifies the interval for dumping logs.
        + **Hourly**
        + **Daily**
        + **Weekly**
        """
elif False:
    ComponentV3LogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3LogArgs:
    def __init__(__self__, *,
                 host_extend_path: pulumi.Input[_builtins.str],
                 host_path: pulumi.Input[_builtins.str],
                 log_path: pulumi.Input[_builtins.str],
                 rotate: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] host_extend_path: Specifies the extension path of the host.
               + **None**: the extended path is not used.
               + **PodUID**: extend the host path based on the pod ID.
               + **PodName**: extend the host path based on the pod name.
               + **PodUID/ContainerName**: extend the host path based on the pod ID and container name.
               + **PodName/ContainerName**: extend the host path based on the pod name and container name.
               
               <a name="servicestage_v3_component_custom_metric"></a>
               The `custom_metric` block supports:
        :param pulumi.Input[_builtins.str] host_path: Specifies the mounted host path, e.g. **/tmp**.
        :param pulumi.Input[_builtins.str] log_path: Specifies the log path of the container, e.g. **/tmp**.
        :param pulumi.Input[_builtins.str] rotate: Specifies the interval for dumping logs.
               + **Hourly**
               + **Daily**
               + **Weekly**
        """
        pulumi.set(__self__, "host_extend_path", host_extend_path)
        pulumi.set(__self__, "host_path", host_path)
        pulumi.set(__self__, "log_path", log_path)
        pulumi.set(__self__, "rotate", rotate)

    @_builtins.property
    @pulumi.getter(name="hostExtendPath")
    def host_extend_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the extension path of the host.
        + **None**: the extended path is not used.
        + **PodUID**: extend the host path based on the pod ID.
        + **PodName**: extend the host path based on the pod name.
        + **PodUID/ContainerName**: extend the host path based on the pod ID and container name.
        + **PodName/ContainerName**: extend the host path based on the pod name and container name.

        <a name="servicestage_v3_component_custom_metric"></a>
        The `custom_metric` block supports:
        """
        return pulumi.get(self, "host_extend_path")

    @host_extend_path.setter
    def host_extend_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_extend_path", value)

    @_builtins.property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mounted host path, e.g. **/tmp**.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_path", value)

    @_builtins.property
    @pulumi.getter(name="logPath")
    def log_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log path of the container, e.g. **/tmp**.
        """
        return pulumi.get(self, "log_path")

    @log_path.setter
    def log_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_path", value)

    @_builtins.property
    @pulumi.getter
    def rotate(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the interval for dumping logs.
        + **Hourly**
        + **Daily**
        + **Weekly**
        """
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rotate", value)


if not MYPY:
    class ComponentV3MesherArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
elif False:
    ComponentV3MesherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3MesherArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ComponentV3PostStartArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
elif False:
    ComponentV3PostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3PostStartArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param pulumi.Input[_builtins.str] scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class ComponentV3PreStopArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
elif False:
    ComponentV3PreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3PreStopArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param pulumi.Input[_builtins.str] scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class ComponentV3ReadinessProbeArgsDict(TypedDict):
        delay: pulumi.Input[_builtins.int]
        """
        Specifies the delay time of the probe.
        """
        timeout: pulumi.Input[_builtins.int]
        """
        Specifies the timeout of the probe.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
elif False:
    ComponentV3ReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3ReadinessProbeArgs:
    def __init__(__self__, *,
                 delay: pulumi.Input[_builtins.int],
                 timeout: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] delay: Specifies the delay time of the probe.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout of the probe.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command list of the probe.  
               This parameter is only available when the `type` is set to `command`.
               
               <a name="servicestage_v3_component_external_accesses"></a>
               The `external_accesses` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host of the probe.  
               Defaults to pod ID, also custom IP address can be specified.
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the probe.  
               This parameter is only available when the `type` is set to `tcp` or `http`.
        :param pulumi.Input[_builtins.str] scheme: Specifies the scheme type of the probe.
               + **HTTP**
               + **HTTPS**
               
               This parameter is only available when the `type` is set to `http`.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the delay time of the probe.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timeout of the probe.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command list of the probe.  
        This parameter is only available when the `type` is set to `command`.

        <a name="servicestage_v3_component_external_accesses"></a>
        The `external_accesses` block supports:
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host of the probe.  
        Defaults to pod ID, also custom IP address can be specified.
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the probe.  
        This parameter is only available when the `type` is set to `tcp` or `http`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheme type of the probe.
        + **HTTP**
        + **HTTPS**

        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class ComponentV3ReferResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        parameters: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
elif False:
    ComponentV3ReferResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3ReferResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 parameters: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[_builtins.str] parameters: Specifies the information corresponding to the specific types of data storage,
               in JSON format.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters", value)


if not MYPY:
    class ComponentV3RuntimeStackArgsDict(TypedDict):
        deploy_mode: pulumi.Input[_builtins.str]
        """
        Specifies the deploy mode of the stack.  
        Changing this will create a new resource.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
elif False:
    ComponentV3RuntimeStackArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3RuntimeStackArgs:
    def __init__(__self__, *,
                 deploy_mode: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] deploy_mode: Specifies the deploy mode of the stack.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        :param pulumi.Input[_builtins.str] version: Specifies the stack version.  
               Changing this will create a new resource.
               
               <a name="servicestage_v3_component_refer_resources"></a>
               The `refer_resources` block supports:
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the deploy mode of the stack.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "deploy_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stack version.  
        Changing this will create a new resource.

        <a name="servicestage_v3_component_refer_resources"></a>
        The `refer_resources` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ComponentV3StorageArgsDict(TypedDict):
        mounts: pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageMountArgsDict']]]
        """
        Specifies the configuration of the disk mounts.  
        The mounts structure is documented below.

        <a name="servicestage_v3_component_storage_mounts"></a>
        The `mounts` block supports:
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        parameters: pulumi.Input[_builtins.str]
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
elif False:
    ComponentV3StorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3StorageArgs:
    def __init__(__self__, *,
                 mounts: pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageMountArgs']]],
                 name: pulumi.Input[_builtins.str],
                 parameters: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageMountArgs']]] mounts: Specifies the configuration of the disk mounts.  
               The mounts structure is documented below.
               
               <a name="servicestage_v3_component_storage_mounts"></a>
               The `mounts` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the disk where the data is stored.  
               Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        :param pulumi.Input[_builtins.str] parameters: Specifies the information corresponding to the specific types of data storage,
               in JSON format.
               For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        :param pulumi.Input[_builtins.str] type: Specifies the type of the probe.
               + **http**
               + **tcp**
               + **command**
        """
        pulumi.set(__self__, "mounts", mounts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def mounts(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageMountArgs']]]:
        """
        Specifies the configuration of the disk mounts.  
        The mounts structure is documented below.

        <a name="servicestage_v3_component_storage_mounts"></a>
        The `mounts` block supports:
        """
        return pulumi.get(self, "mounts")

    @mounts.setter
    def mounts(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentV3StorageMountArgs']]]):
        pulumi.set(self, "mounts", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the disk where the data is stored.  
        Only lowercase letters, digits, and hyphens (-) are allowed and must start and end with a lowercase letter or digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the information corresponding to the specific types of data storage,
        in JSON format.
        For the keys, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-servicestage/servicestage_06_0076.html#servicestage_06_0076__table16441247172510).
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the probe.
        + **http**
        + **tcp**
        + **command**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ComponentV3StorageMountArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        read_only: pulumi.Input[_builtins.bool]
        """
        Specifies whether the disk mount is read-only.

        <a name="servicestage_v3_component_deploy_strategy"></a>
        The `deploy_strategy` block supports:
        """
        sub_path: pulumi.Input[_builtins.str]
        """
        Specifies the sub mount path.
        """
elif False:
    ComponentV3StorageMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentV3StorageMountArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 read_only: pulumi.Input[_builtins.bool],
                 sub_path: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] path: Specifies the path of the probe.  
               This parameter is only available when the `type` is set to `http`.
        :param pulumi.Input[_builtins.bool] read_only: Specifies whether the disk mount is read-only.
               
               <a name="servicestage_v3_component_deploy_strategy"></a>
               The `deploy_strategy` block supports:
        :param pulumi.Input[_builtins.str] sub_path: Specifies the sub mount path.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "sub_path", sub_path)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of the probe.  
        This parameter is only available when the `type` is set to `http`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the disk mount is read-only.

        <a name="servicestage_v3_component_deploy_strategy"></a>
        The `deploy_strategy` block supports:
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "read_only", value)

    @_builtins.property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the sub mount path.
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sub_path", value)


if not MYPY:
    class ConfigurationV3ComponentArgsDict(TypedDict):
        application_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the application.
        """
        component_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the component.
        """
        component_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the component.
        """
        environment_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the environment.
        """
elif False:
    ConfigurationV3ComponentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationV3ComponentArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_name: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application_id: The ID of the application.
        :param pulumi.Input[_builtins.str] component_id: The ID of the component.
        :param pulumi.Input[_builtins.str] component_name: The name of the component.
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the component.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the component.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_name", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the environment.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)


if not MYPY:
    class EnvironmentAssociateV3ResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the resource to be associated.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the resource to be associated.
        """
elif False:
    EnvironmentAssociateV3ResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentAssociateV3ResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the resource to be associated.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the resource to be associated.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the resource to be associated.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the resource to be associated.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EnvironmentBasicResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
elif False:
    EnvironmentBasicResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentBasicResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
               but for CCI namespace, this parameter needs to fill in **name**.
               
               > All resources must under the same VPC as the environment.
        :param pulumi.Input[_builtins.str] type: Specifies the resource type.
               + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
               + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EnvironmentOptionalResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
elif False:
    EnvironmentOptionalResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentOptionalResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
               but for CCI namespace, this parameter needs to fill in **name**.
               
               > All resources must under the same VPC as the environment.
        :param pulumi.Input[_builtins.str] type: Specifies the resource type.
               + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
               + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID. For most resources, this parameter needs to fill in their **id**,
        but for CCI namespace, this parameter needs to fill in **name**.

        > All resources must under the same VPC as the environment.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource type.
        + The type of basic resource supports **cce**, **cci**, **ecs** and **as**.
        + The type of optional resource supports **elb**, **eip**, **rds**, **dcs** and **cse**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


