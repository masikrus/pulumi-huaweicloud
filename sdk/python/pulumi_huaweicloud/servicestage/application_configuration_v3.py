# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationConfigurationV3Args', 'ApplicationConfigurationV3']

@pulumi.input_type
class ApplicationConfigurationV3Args:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 configuration: pulumi.Input['ApplicationConfigurationV3ConfigurationArgs'],
                 environment_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationConfigurationV3 resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the configuration
               belongs.
        :param pulumi.Input['ApplicationConfigurationV3ConfigurationArgs'] configuration: Specifies the configuration of the application.  
               The configuration structure is documented below.
               
               <a name="servicestage_v3_application_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the configuration
               applies.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and application are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "environment_id", environment_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application to which the configuration
        belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['ApplicationConfigurationV3ConfigurationArgs']:
        """
        Specifies the configuration of the application.  
        The configuration structure is documented below.

        <a name="servicestage_v3_application_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['ApplicationConfigurationV3ConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the environment to which the configuration
        applies.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment and application are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ApplicationConfigurationV3State:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input['ApplicationConfigurationV3ConfigurationArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApplicationConfigurationV3 resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the configuration
               belongs.
        :param pulumi.Input['ApplicationConfigurationV3ConfigurationArgs'] configuration: Specifies the configuration of the application.  
               The configuration structure is documented below.
               
               <a name="servicestage_v3_application_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the configuration
               applies.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and application are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application to which the configuration
        belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ApplicationConfigurationV3ConfigurationArgs']]:
        """
        Specifies the configuration of the application.  
        The configuration structure is documented below.

        <a name="servicestage_v3_application_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ApplicationConfigurationV3ConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the environment to which the configuration
        applies.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment and application are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:ServiceStage/applicationConfigurationV3:ApplicationConfigurationV3")
class ApplicationConfigurationV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['ApplicationConfigurationV3ConfigurationArgs', 'ApplicationConfigurationV3ConfigurationArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages the application confiration for the environment within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        environment_variables = config.require_object("environmentVariables")
        test = huaweicloud.servicestage.ApplicationConfigurationV3("test",
            environment_id=environment_id,
            application_id=application_id,
            configuration={
                "envs": [{
                    "name": entry["value"]["name"],
                    "value": entry["value"]["value"],
                } for entry in [{"key": k, "value": v} for k, v in environment_variables]],
                "assign_strategy": True,
            })
        ```

        ## Import

        Application configuration can be imported using `environment_id` and `application_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/applicationConfigurationV3:ApplicationConfigurationV3 test <environment_id>/<application_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the configuration
               belongs.
        :param pulumi.Input[Union['ApplicationConfigurationV3ConfigurationArgs', 'ApplicationConfigurationV3ConfigurationArgsDict']] configuration: Specifies the configuration of the application.  
               The configuration structure is documented below.
               
               <a name="servicestage_v3_application_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the configuration
               applies.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and application are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationConfigurationV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the application confiration for the environment within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        environment_variables = config.require_object("environmentVariables")
        test = huaweicloud.servicestage.ApplicationConfigurationV3("test",
            environment_id=environment_id,
            application_id=application_id,
            configuration={
                "envs": [{
                    "name": entry["value"]["name"],
                    "value": entry["value"]["value"],
                } for entry in [{"key": k, "value": v} for k, v in environment_variables]],
                "assign_strategy": True,
            })
        ```

        ## Import

        Application configuration can be imported using `environment_id` and `application_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/applicationConfigurationV3:ApplicationConfigurationV3 test <environment_id>/<application_id>
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationConfigurationV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationConfigurationV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['ApplicationConfigurationV3ConfigurationArgs', 'ApplicationConfigurationV3ConfigurationArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationConfigurationV3Args.__new__(ApplicationConfigurationV3Args)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["enable_force_new"] = enable_force_new
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["region"] = region
        super(ApplicationConfigurationV3, __self__).__init__(
            'huaweicloud:ServiceStage/applicationConfigurationV3:ApplicationConfigurationV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            configuration: Optional[pulumi.Input[Union['ApplicationConfigurationV3ConfigurationArgs', 'ApplicationConfigurationV3ConfigurationArgsDict']]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApplicationConfigurationV3':
        """
        Get an existing ApplicationConfigurationV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the configuration
               belongs.
        :param pulumi.Input[Union['ApplicationConfigurationV3ConfigurationArgs', 'ApplicationConfigurationV3ConfigurationArgsDict']] configuration: Specifies the configuration of the application.  
               The configuration structure is documented below.
               
               <a name="servicestage_v3_application_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the configuration
               applies.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and application are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationConfigurationV3State.__new__(_ApplicationConfigurationV3State)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["region"] = region
        return ApplicationConfigurationV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application to which the configuration
        belongs.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.ApplicationConfigurationV3Configuration']:
        """
        Specifies the configuration of the application.  
        The configuration structure is documented below.

        <a name="servicestage_v3_application_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the environment to which the configuration
        applies.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the environment and application are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

