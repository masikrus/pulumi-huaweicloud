# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EnvironmentAssociateV3Args', 'EnvironmentAssociateV3']

@pulumi.input_type
class EnvironmentAssociateV3Args:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[_builtins.str],
                 resources: pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EnvironmentAssociateV3 resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID associated with the resources.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]] resources: Specifies the information about the associated resources.
               The resources structure is documented below.
               
               <a name="servicestage_v3_env_associated_resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and resources are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "resources", resources)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment ID associated with the resources.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]]:
        """
        Specifies the information about the associated resources.
        The resources structure is documented below.

        <a name="servicestage_v3_env_associated_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment and resources are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EnvironmentAssociateV3State:
    def __init__(__self__, *,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]]] = None):
        """
        Input properties used for looking up and filtering EnvironmentAssociateV3 resources.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID associated with the resources.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and resources are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]] resources: Specifies the information about the associated resources.
               The resources structure is documented below.
               
               <a name="servicestage_v3_env_associated_resources"></a>
               The `resources` block supports:
        """
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment ID associated with the resources.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment and resources are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]]]:
        """
        Specifies the information about the associated resources.
        The resources structure is documented below.

        <a name="servicestage_v3_env_associated_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentAssociateV3ResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.type_token("huaweicloud:ServiceStage/environmentAssociateV3:EnvironmentAssociateV3")
class EnvironmentAssociateV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnvironmentAssociateV3ResourceArgs', 'EnvironmentAssociateV3ResourceArgsDict']]]]] = None,
                 __props__=None):
        """
        Use this resource to bind resources to the environment within HuaweiCloud.

        > An environment can only have one resource.

        > Do not use this resource at the same time as resource `ServiceStage.Environment`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        eip_id = config.require_object("eipId")
        test = huaweicloud.servicestage.EnvironmentAssociateV3("test",
            environment_id=environment_id,
            resources=[{
                "id": eip_id,
                "type": "eip",
            }])
        ```

        ## Import

        Associate resources can be imported using the `id` (`environment_id`), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/environmentAssociateV3:EnvironmentAssociateV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID associated with the resources.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and resources are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnvironmentAssociateV3ResourceArgs', 'EnvironmentAssociateV3ResourceArgsDict']]]] resources: Specifies the information about the associated resources.
               The resources structure is documented below.
               
               <a name="servicestage_v3_env_associated_resources"></a>
               The `resources` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnvironmentAssociateV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to bind resources to the environment within HuaweiCloud.

        > An environment can only have one resource.

        > Do not use this resource at the same time as resource `ServiceStage.Environment`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        eip_id = config.require_object("eipId")
        test = huaweicloud.servicestage.EnvironmentAssociateV3("test",
            environment_id=environment_id,
            resources=[{
                "id": eip_id,
                "type": "eip",
            }])
        ```

        ## Import

        Associate resources can be imported using the `id` (`environment_id`), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ServiceStage/environmentAssociateV3:EnvironmentAssociateV3 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentAssociateV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentAssociateV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnvironmentAssociateV3ResourceArgs', 'EnvironmentAssociateV3ResourceArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentAssociateV3Args.__new__(EnvironmentAssociateV3Args)

            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["region"] = region
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
        super(EnvironmentAssociateV3, __self__).__init__(
            'huaweicloud:ServiceStage/environmentAssociateV3:EnvironmentAssociateV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnvironmentAssociateV3ResourceArgs', 'EnvironmentAssociateV3ResourceArgsDict']]]]] = None) -> 'EnvironmentAssociateV3':
        """
        Get an existing EnvironmentAssociateV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID associated with the resources.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment and resources are located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnvironmentAssociateV3ResourceArgs', 'EnvironmentAssociateV3ResourceArgsDict']]]] resources: Specifies the information about the associated resources.
               The resources structure is documented below.
               
               <a name="servicestage_v3_env_associated_resources"></a>
               The `resources` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentAssociateV3State.__new__(_EnvironmentAssociateV3State)

        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resources"] = resources
        return EnvironmentAssociateV3(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment ID associated with the resources.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the environment and resources are located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.EnvironmentAssociateV3Resource']]:
        """
        Specifies the information about the associated resources.
        The resources structure is documented below.

        <a name="servicestage_v3_env_associated_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

