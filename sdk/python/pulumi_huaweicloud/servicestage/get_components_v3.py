# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetComponentsV3Result',
    'AwaitableGetComponentsV3Result',
    'get_components_v3',
    'get_components_v3_output',
]

@pulumi.output_type
class GetComponentsV3Result:
    """
    A collection of values returned by getComponentsV3.
    """
    def __init__(__self__, application_id=None, components=None, id=None, region=None):
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetComponentsV3ComponentResult']:
        """
        All components details.  
        The components structure is documented below.
        """
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetComponentsV3Result(GetComponentsV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentsV3Result(
            application_id=self.application_id,
            components=self.components,
            id=self.id,
            region=self.region)


def get_components_v3(application_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComponentsV3Result:
    """
    Use this data source to query the list of components under specified application within HuaweiCloud.

    ## Example Usage

    ### Query all components under specified region

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ServiceStage.get_components_v3()
    ```

    ### Query all components under specified application via its ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    application_id = config.require_object("applicationId")
    test = huaweicloud.ServiceStage.get_components_v3(application_id=application_id)
    ```


    :param _builtins.str application_id: Specifies the ID of the application to which the components belong.
    :param _builtins.str region: Specifies the region where the components are located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ServiceStage/getComponentsV3:getComponentsV3', __args__, opts=opts, typ=GetComponentsV3Result).value

    return AwaitableGetComponentsV3Result(
        application_id=pulumi.get(__ret__, 'application_id'),
        components=pulumi.get(__ret__, 'components'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_components_v3_output(application_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComponentsV3Result]:
    """
    Use this data source to query the list of components under specified application within HuaweiCloud.

    ## Example Usage

    ### Query all components under specified region

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ServiceStage.get_components_v3()
    ```

    ### Query all components under specified application via its ID

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    application_id = config.require_object("applicationId")
    test = huaweicloud.ServiceStage.get_components_v3(application_id=application_id)
    ```


    :param _builtins.str application_id: Specifies the ID of the application to which the components belong.
    :param _builtins.str region: Specifies the region where the components are located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ServiceStage/getComponentsV3:getComponentsV3', __args__, opts=opts, typ=GetComponentsV3Result)
    return __ret__.apply(lambda __response__: GetComponentsV3Result(
        application_id=pulumi.get(__response__, 'application_id'),
        components=pulumi.get(__response__, 'components'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
