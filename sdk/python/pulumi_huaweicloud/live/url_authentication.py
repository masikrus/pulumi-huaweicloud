# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UrlAuthenticationArgs', 'UrlAuthentication']

@pulumi.input_type
class UrlAuthenticationArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 stream_name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 check_level: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a UrlAuthentication resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the domain name.
               The valid values are as follow:
               + **push**: Indicates ingest domain name.
               + **pull**: Indicates streaming domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] check_level: Specifies the check level.
               This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the valid access time defined by the user.
               Changing this parameter will create a new resource.
               The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "type", type)
        if check_level is not None:
            pulumi.set(__self__, "check_level", check_level)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the stream name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the domain name.
        The valid values are as follow:
        + **push**: Indicates ingest domain name.
        + **pull**: Indicates streaming domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="checkLevel")
    def check_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the check level.
        This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
        The valid values are as follows:
        """
        return pulumi.get(self, "check_level")

    @check_level.setter
    def check_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "check_level", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of the valid access time defined by the user.
        Changing this parameter will create a new resource.
        The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _UrlAuthenticationState:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 check_level: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_chains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering UrlAuthentication resources.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] check_level: Specifies the check level.
               This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_chains: The generated signed URLs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the valid access time defined by the user.
               Changing this parameter will create a new resource.
               The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the domain name.
               The valid values are as follow:
               + **push**: Indicates ingest domain name.
               + **pull**: Indicates streaming domain name.
               
               Changing this parameter will create a new resource.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if check_level is not None:
            pulumi.set(__self__, "check_level", check_level)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if key_chains is not None:
            pulumi.set(__self__, "key_chains", key_chains)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="checkLevel")
    def check_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the check level.
        This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
        The valid values are as follows:
        """
        return pulumi.get(self, "check_level")

    @check_level.setter
    def check_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "check_level", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="keyChains")
    def key_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The generated signed URLs.
        """
        return pulumi.get(self, "key_chains")

    @key_chains.setter
    def key_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "key_chains", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of the valid access time defined by the user.
        Changing this parameter will create a new resource.
        The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stream name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the domain name.
        The valid values are as follow:
        + **push**: Indicates ingest domain name.
        + **pull**: Indicates streaming domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Live/urlAuthentication:UrlAuthentication")
class UrlAuthentication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 check_level: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an URL authentication resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        > Before creating the resource, you need to cofiguration the URL validation first (creating
          the URL validation resource first). Refer to
          [URL Validation](https://support.huaweicloud.com/iLive-live/live_01_0049.html) for more details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        type = config.require_object("type")
        stream_name = config.require_object("streamName")
        app_name = config.require_object("appName")
        test = huaweicloud.live.UrlAuthentication("test",
            domain_name=domain_name,
            type=type,
            stream_name=stream_name,
            app_name=app_name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] check_level: Specifies the check level.
               This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the valid access time defined by the user.
               Changing this parameter will create a new resource.
               The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the domain name.
               The valid values are as follow:
               + **push**: Indicates ingest domain name.
               + **pull**: Indicates streaming domain name.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlAuthenticationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an URL authentication resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        > Before creating the resource, you need to cofiguration the URL validation first (creating
          the URL validation resource first). Refer to
          [URL Validation](https://support.huaweicloud.com/iLive-live/live_01_0049.html) for more details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        type = config.require_object("type")
        stream_name = config.require_object("streamName")
        app_name = config.require_object("appName")
        test = huaweicloud.live.UrlAuthentication("test",
            domain_name=domain_name,
            type=type,
            stream_name=stream_name,
            app_name=app_name)
        ```

        :param str resource_name: The name of the resource.
        :param UrlAuthenticationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlAuthenticationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 check_level: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlAuthenticationArgs.__new__(UrlAuthenticationArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["check_level"] = check_level
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["region"] = region
            __props__.__dict__["start_time"] = start_time
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["key_chains"] = None
        super(UrlAuthentication, __self__).__init__(
            'huaweicloud:Live/urlAuthentication:UrlAuthentication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_name: Optional[pulumi.Input[_builtins.str]] = None,
            check_level: Optional[pulumi.Input[_builtins.int]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            key_chains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'UrlAuthentication':
        """
        Get an existing UrlAuthentication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] check_level: Specifies the check level.
               This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_chains: The generated signed URLs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the valid access time defined by the user.
               Changing this parameter will create a new resource.
               The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the domain name.
               The valid values are as follow:
               + **push**: Indicates ingest domain name.
               + **pull**: Indicates streaming domain name.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlAuthenticationState.__new__(_UrlAuthenticationState)

        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["check_level"] = check_level
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["key_chains"] = key_chains
        __props__.__dict__["region"] = region
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["stream_name"] = stream_name
        __props__.__dict__["type"] = type
        return UrlAuthentication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="checkLevel")
    def check_level(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the check level.
        This parameter is valid and mandatory only when the signing method is **c_aes** in the URL validation.
        The valid values are as follows:
        """
        return pulumi.get(self, "check_level")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="keyChains")
    def key_chains(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The generated signed URLs.
        """
        return pulumi.get(self, "key_chains")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the start time of the valid access time defined by the user.
        Changing this parameter will create a new resource.
        The time is in UTC, the format is **yyyy-mm-ddThh:mm:ssZ**, e.g. **2024-06-01T15:03:01Z**. Defaults to current time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the stream name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "stream_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the domain name.
        The valid values are as follow:
        + **push**: Indicates ingest domain name.
        + **pull**: Indicates streaming domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

