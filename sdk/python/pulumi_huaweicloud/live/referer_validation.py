# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RefererValidationArgs', 'RefererValidation']

@pulumi.input_type
class RefererValidationArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 referer_auth_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 referer_config_empty: pulumi.Input[_builtins.str],
                 referer_white_list: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RefererValidation resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name to which the referer validation
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] referer_auth_lists: Specifies the domain name list.
               The maximum length is `100`.
               The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        :param pulumi.Input[_builtins.str] referer_config_empty: Specifies whether the referer header is included.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] referer_white_list: Specifies whether the referer is in the trustlist.
               The valid values are as follows:
               + **true**: Indicates referer whitelist.
               + **false**: Indicates referer blacklist.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "referer_auth_lists", referer_auth_lists)
        pulumi.set(__self__, "referer_config_empty", referer_config_empty)
        pulumi.set(__self__, "referer_white_list", referer_white_list)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the streaming domain name to which the referer validation
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="refererAuthLists")
    def referer_auth_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the domain name list.
        The maximum length is `100`.
        The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        """
        return pulumi.get(self, "referer_auth_lists")

    @referer_auth_lists.setter
    def referer_auth_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "referer_auth_lists", value)

    @_builtins.property
    @pulumi.getter(name="refererConfigEmpty")
    def referer_config_empty(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether the referer header is included.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "referer_config_empty")

    @referer_config_empty.setter
    def referer_config_empty(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "referer_config_empty", value)

    @_builtins.property
    @pulumi.getter(name="refererWhiteList")
    def referer_white_list(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether the referer is in the trustlist.
        The valid values are as follows:
        + **true**: Indicates referer whitelist.
        + **false**: Indicates referer blacklist.
        """
        return pulumi.get(self, "referer_white_list")

    @referer_white_list.setter
    def referer_white_list(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "referer_white_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RefererValidationState:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_auth_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 referer_config_empty: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_white_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RefererValidation resources.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name to which the referer validation
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] referer_auth_lists: Specifies the domain name list.
               The maximum length is `100`.
               The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        :param pulumi.Input[_builtins.str] referer_config_empty: Specifies whether the referer header is included.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] referer_white_list: Specifies whether the referer is in the trustlist.
               The valid values are as follows:
               + **true**: Indicates referer whitelist.
               + **false**: Indicates referer blacklist.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if referer_auth_lists is not None:
            pulumi.set(__self__, "referer_auth_lists", referer_auth_lists)
        if referer_config_empty is not None:
            pulumi.set(__self__, "referer_config_empty", referer_config_empty)
        if referer_white_list is not None:
            pulumi.set(__self__, "referer_white_list", referer_white_list)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the streaming domain name to which the referer validation
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="refererAuthLists")
    def referer_auth_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the domain name list.
        The maximum length is `100`.
        The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        """
        return pulumi.get(self, "referer_auth_lists")

    @referer_auth_lists.setter
    def referer_auth_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "referer_auth_lists", value)

    @_builtins.property
    @pulumi.getter(name="refererConfigEmpty")
    def referer_config_empty(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the referer header is included.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "referer_config_empty")

    @referer_config_empty.setter
    def referer_config_empty(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "referer_config_empty", value)

    @_builtins.property
    @pulumi.getter(name="refererWhiteList")
    def referer_white_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the referer is in the trustlist.
        The valid values are as follows:
        + **true**: Indicates referer whitelist.
        + **false**: Indicates referer blacklist.
        """
        return pulumi.get(self, "referer_white_list")

    @referer_white_list.setter
    def referer_white_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "referer_white_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Live/refererValidation:RefererValidation")
class RefererValidation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_auth_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 referer_config_empty: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_white_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a referer validation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        referer_config_empty = config.require_object("refererConfigEmpty")
        referer_white_list = config.require_object("refererWhiteList")
        referer_auth_list = config.require_object("refererAuthList")
        test = huaweicloud.live.RefererValidation("test",
            domain_name=domain_name,
            referer_config_empty=referer_config_empty,
            referer_white_list=referer_white_list,
            referer_auth_lists=referer_auth_list)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/refererValidation:RefererValidation test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name to which the referer validation
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] referer_auth_lists: Specifies the domain name list.
               The maximum length is `100`.
               The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        :param pulumi.Input[_builtins.str] referer_config_empty: Specifies whether the referer header is included.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] referer_white_list: Specifies whether the referer is in the trustlist.
               The valid values are as follows:
               + **true**: Indicates referer whitelist.
               + **false**: Indicates referer blacklist.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RefererValidationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a referer validation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        referer_config_empty = config.require_object("refererConfigEmpty")
        referer_white_list = config.require_object("refererWhiteList")
        referer_auth_list = config.require_object("refererAuthList")
        test = huaweicloud.live.RefererValidation("test",
            domain_name=domain_name,
            referer_config_empty=referer_config_empty,
            referer_white_list=referer_white_list,
            referer_auth_lists=referer_auth_list)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/refererValidation:RefererValidation test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param RefererValidationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RefererValidationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_auth_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 referer_config_empty: Optional[pulumi.Input[_builtins.str]] = None,
                 referer_white_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RefererValidationArgs.__new__(RefererValidationArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if referer_auth_lists is None and not opts.urn:
                raise TypeError("Missing required property 'referer_auth_lists'")
            __props__.__dict__["referer_auth_lists"] = referer_auth_lists
            if referer_config_empty is None and not opts.urn:
                raise TypeError("Missing required property 'referer_config_empty'")
            __props__.__dict__["referer_config_empty"] = referer_config_empty
            if referer_white_list is None and not opts.urn:
                raise TypeError("Missing required property 'referer_white_list'")
            __props__.__dict__["referer_white_list"] = referer_white_list
            __props__.__dict__["region"] = region
        super(RefererValidation, __self__).__init__(
            'huaweicloud:Live/refererValidation:RefererValidation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            referer_auth_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            referer_config_empty: Optional[pulumi.Input[_builtins.str]] = None,
            referer_white_list: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'RefererValidation':
        """
        Get an existing RefererValidation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name to which the referer validation
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] referer_auth_lists: Specifies the domain name list.
               The maximum length is `100`.
               The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        :param pulumi.Input[_builtins.str] referer_config_empty: Specifies whether the referer header is included.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] referer_white_list: Specifies whether the referer is in the trustlist.
               The valid values are as follows:
               + **true**: Indicates referer whitelist.
               + **false**: Indicates referer blacklist.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RefererValidationState.__new__(_RefererValidationState)

        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["referer_auth_lists"] = referer_auth_lists
        __props__.__dict__["referer_config_empty"] = referer_config_empty
        __props__.__dict__["referer_white_list"] = referer_white_list
        __props__.__dict__["region"] = region
        return RefererValidation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the streaming domain name to which the referer validation
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="refererAuthLists")
    def referer_auth_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the domain name list.
        The maximum length is `100`.
        The domain name can be a specific domain name or a regular expression. e.g. `www.example.com`, `www.*com`.
        """
        return pulumi.get(self, "referer_auth_lists")

    @_builtins.property
    @pulumi.getter(name="refererConfigEmpty")
    def referer_config_empty(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the referer header is included.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "referer_config_empty")

    @_builtins.property
    @pulumi.getter(name="refererWhiteList")
    def referer_white_list(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the referer is in the trustlist.
        The valid values are as follows:
        + **true**: Indicates referer whitelist.
        + **false**: Indicates referer blacklist.
        """
        return pulumi.get(self, "referer_white_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

