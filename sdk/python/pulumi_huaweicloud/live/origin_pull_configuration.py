# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OriginPullConfigurationArgs', 'OriginPullConfiguration']

@pulumi.input_type
class OriginPullConfigurationArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.str],
                 additional_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sources_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a OriginPullConfiguration resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of return to the source.
               The valid values are as follows:
               + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
               + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
               + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] additional_args: Specifies the parameters carried in the URL when returning to the source client's
               website.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scheme: Specifies the source return protocol.
               This parameter is required when the `source_type` is not **huawei**.
               The valid values are as follows:
               + **http**
               + **rtmp**
        :param pulumi.Input[_builtins.int] source_port: Specifies the return port to the source.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources: Specifies the list of domain names for returning to the source.
               + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
               When multiple domain names are configured, if the source return fails, it will be rotated according to the
               configuration order.
               + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
               header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
               returning to the source. Otherwise, the current IP address should be used as the HOST.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources_ips: Specifies the list of IP addresses for returning to the source.
               Up to `10` can be configured.
               + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
               the source fails, it will be rotated according to the configuration order.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "source_type", source_type)
        if additional_args is not None:
            pulumi.set(__self__, "additional_args", additional_args)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sources_ips is not None:
            pulumi.set(__self__, "sources_ips", sources_ips)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of return to the source.
        The valid values are as follows:
        + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
        + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
        + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="additionalArgs")
    def additional_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameters carried in the URL when returning to the source client's
        website.
        """
        return pulumi.get(self, "additional_args")

    @additional_args.setter
    def additional_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_args", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source return protocol.
        This parameter is required when the `source_type` is not **huawei**.
        The valid values are as follows:
        + **http**
        + **rtmp**
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the return port to the source.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of domain names for returning to the source.
        + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
        When multiple domain names are configured, if the source return fails, it will be rotated according to the
        configuration order.
        + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
        header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
        returning to the source. Otherwise, the current IP address should be used as the HOST.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="sourcesIps")
    def sources_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IP addresses for returning to the source.
        Up to `10` can be configured.
        + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
        the source fails, it will be rotated according to the configuration order.
        """
        return pulumi.get(self, "sources_ips")

    @sources_ips.setter
    def sources_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sources_ips", value)


@pulumi.input_type
class _OriginPullConfigurationState:
    def __init__(__self__, *,
                 additional_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sources_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering OriginPullConfiguration resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] additional_args: Specifies the parameters carried in the URL when returning to the source client's
               website.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scheme: Specifies the source return protocol.
               This parameter is required when the `source_type` is not **huawei**.
               The valid values are as follows:
               + **http**
               + **rtmp**
        :param pulumi.Input[_builtins.int] source_port: Specifies the return port to the source.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of return to the source.
               The valid values are as follows:
               + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
               + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
               + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources: Specifies the list of domain names for returning to the source.
               + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
               When multiple domain names are configured, if the source return fails, it will be rotated according to the
               configuration order.
               + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
               header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
               returning to the source. Otherwise, the current IP address should be used as the HOST.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources_ips: Specifies the list of IP addresses for returning to the source.
               Up to `10` can be configured.
               + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
               the source fails, it will be rotated according to the configuration order.
        """
        if additional_args is not None:
            pulumi.set(__self__, "additional_args", additional_args)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sources_ips is not None:
            pulumi.set(__self__, "sources_ips", sources_ips)

    @_builtins.property
    @pulumi.getter(name="additionalArgs")
    def additional_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameters carried in the URL when returning to the source client's
        website.
        """
        return pulumi.get(self, "additional_args")

    @additional_args.setter
    def additional_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_args", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source return protocol.
        This parameter is required when the `source_type` is not **huawei**.
        The valid values are as follows:
        + **http**
        + **rtmp**
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the return port to the source.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of return to the source.
        The valid values are as follows:
        + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
        + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
        + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of domain names for returning to the source.
        + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
        When multiple domain names are configured, if the source return fails, it will be rotated according to the
        configuration order.
        + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
        header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
        returning to the source. Otherwise, the current IP address should be used as the HOST.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="sourcesIps")
    def sources_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IP addresses for returning to the source.
        Up to `10` can be configured.
        + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
        the source fails, it will be rotated according to the configuration order.
        """
        return pulumi.get(self, "sources_ips")

    @sources_ips.setter
    def sources_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sources_ips", value)


@pulumi.type_token("huaweicloud:Live/originPullConfiguration:OriginPullConfiguration")
class OriginPullConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sources_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a Live origin pull configuration resource within HuaweiCloud.

        > This resource is an operational resource, and destroying it will not change the current origin pull configuration.

        ## Example Usage

        ### Create a customer source site with a domain name format for the source site address

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        sources = config.require_object("sources")
        schema = config.require_object("schema")
        test = huaweicloud.live.OriginPullConfiguration("test",
            domain_name=domain_name,
            source_type="domain",
            sources=sources,
            scheme=scheme)
        ```

        ### Create a customer source site with an IP format source address

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        sources_ip = config.require_object("sourcesIp")
        schema = config.require_object("schema")
        test = huaweicloud.live.OriginPullConfiguration("test",
            domain_name=domain_name,
            source_type="ipaddr",
            sources_ips=sources_ip,
            scheme=scheme)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/originPullConfiguration:OriginPullConfiguration test <domain_name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `additional_args`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_live_origin_pull_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              additional_args,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] additional_args: Specifies the parameters carried in the URL when returning to the source client's
               website.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scheme: Specifies the source return protocol.
               This parameter is required when the `source_type` is not **huawei**.
               The valid values are as follows:
               + **http**
               + **rtmp**
        :param pulumi.Input[_builtins.int] source_port: Specifies the return port to the source.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of return to the source.
               The valid values are as follows:
               + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
               + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
               + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources: Specifies the list of domain names for returning to the source.
               + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
               When multiple domain names are configured, if the source return fails, it will be rotated according to the
               configuration order.
               + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
               header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
               returning to the source. Otherwise, the current IP address should be used as the HOST.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources_ips: Specifies the list of IP addresses for returning to the source.
               Up to `10` can be configured.
               + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
               the source fails, it will be rotated according to the configuration order.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OriginPullConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Live origin pull configuration resource within HuaweiCloud.

        > This resource is an operational resource, and destroying it will not change the current origin pull configuration.

        ## Example Usage

        ### Create a customer source site with a domain name format for the source site address

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        sources = config.require_object("sources")
        schema = config.require_object("schema")
        test = huaweicloud.live.OriginPullConfiguration("test",
            domain_name=domain_name,
            source_type="domain",
            sources=sources,
            scheme=scheme)
        ```

        ### Create a customer source site with an IP format source address

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        sources_ip = config.require_object("sourcesIp")
        schema = config.require_object("schema")
        test = huaweicloud.live.OriginPullConfiguration("test",
            domain_name=domain_name,
            source_type="ipaddr",
            sources_ips=sources_ip,
            scheme=scheme)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/originPullConfiguration:OriginPullConfiguration test <domain_name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `additional_args`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_live_origin_pull_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              additional_args,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param OriginPullConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OriginPullConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sources_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OriginPullConfigurationArgs.__new__(OriginPullConfigurationArgs)

            __props__.__dict__["additional_args"] = additional_args
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["region"] = region
            __props__.__dict__["scheme"] = scheme
            __props__.__dict__["source_port"] = source_port
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["sources"] = sources
            __props__.__dict__["sources_ips"] = sources_ips
        super(OriginPullConfiguration, __self__).__init__(
            'huaweicloud:Live/originPullConfiguration:OriginPullConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scheme: Optional[pulumi.Input[_builtins.str]] = None,
            source_port: Optional[pulumi.Input[_builtins.int]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            sources_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'OriginPullConfiguration':
        """
        Get an existing OriginPullConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] additional_args: Specifies the parameters carried in the URL when returning to the source client's
               website.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scheme: Specifies the source return protocol.
               This parameter is required when the `source_type` is not **huawei**.
               The valid values are as follows:
               + **http**
               + **rtmp**
        :param pulumi.Input[_builtins.int] source_port: Specifies the return port to the source.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of return to the source.
               The valid values are as follows:
               + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
               + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
               + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources: Specifies the list of domain names for returning to the source.
               + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
               When multiple domain names are configured, if the source return fails, it will be rotated according to the
               configuration order.
               + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
               header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
               returning to the source. Otherwise, the current IP address should be used as the HOST.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sources_ips: Specifies the list of IP addresses for returning to the source.
               Up to `10` can be configured.
               + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
               the source fails, it will be rotated according to the configuration order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OriginPullConfigurationState.__new__(_OriginPullConfigurationState)

        __props__.__dict__["additional_args"] = additional_args
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["region"] = region
        __props__.__dict__["scheme"] = scheme
        __props__.__dict__["source_port"] = source_port
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["sources"] = sources
        __props__.__dict__["sources_ips"] = sources_ips
        return OriginPullConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="additionalArgs")
    def additional_args(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the parameters carried in the URL when returning to the source client's
        website.
        """
        return pulumi.get(self, "additional_args")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the source return protocol.
        This parameter is required when the `source_type` is not **huawei**.
        The valid values are as follows:
        + **http**
        + **rtmp**
        """
        return pulumi.get(self, "scheme")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the return port to the source.
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of return to the source.
        The valid values are as follows:
        + **domain**: Return to the source customer's source site, where the source site address is in domain name format.
        + **ipaddr**: Return to the source customer's source site, where the source site address is in IP format.
        + **huawei**: Return to the Huawei origin site, the default value after domain creation.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of domain names for returning to the source.
        + When `source_type` is set to **domain**, this parameter is required and can be configured with up to `10` values.
        When multiple domain names are configured, if the source return fails, it will be rotated according to the
        configuration order.
        + When `source_type` is set to **ipaddr**, a maximum of `1` value can be configured. If configured, the httpflv HOST
        header should be filled with this domain name and the RTMP tcurl field should be filled with this domain name when
        returning to the source. Otherwise, the current IP address should be used as the HOST.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter(name="sourcesIps")
    def sources_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of IP addresses for returning to the source.
        Up to `10` can be configured.
        + When `source_type` is set to **ipaddr**, this parameter is required. When configuring multiple IPs, if the return to
        the source fails, it will be rotated according to the configuration order.
        """
        return pulumi.get(self, "sources_ips")

