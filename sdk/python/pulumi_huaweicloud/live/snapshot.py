# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SnapshotArgs', 'Snapshot']

@pulumi.input_type
class SnapshotArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 frequency: pulumi.Input[_builtins.int],
                 storage_bucket: pulumi.Input[_builtins.str],
                 storage_mode: pulumi.Input[_builtins.int],
                 storage_path: pulumi.Input[_builtins.str],
                 call_back_auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_url: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Snapshot resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        :param pulumi.Input[_builtins.str] storage_bucket: Specifies the bucket name of the OBS.
        :param pulumi.Input[_builtins.int] storage_mode: Specifies the store mode in OBS bucket. The options are as follows:
               + **0**: real time snapshot. Name the snapshot file with a timestamp and
               save all screenshot files to the OBS bucket.
               For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
               + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
               will be covered by new snapshot.
               For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        :param pulumi.Input[_builtins.str] storage_path: Specifies the path of OBS object. Comply with OSS Object Definition.
               + When used to indicate input, it needs to be specified to a specific object.
               + When used to indicate output, only the path to the expected storage of the transcoding
               results needs to be specified.
        :param pulumi.Input[_builtins.str] call_back_auth_key: Specifies the callback authentication key value.
               Consists of 32 to 128 characters.
        :param pulumi.Input[_builtins.str] call_back_enabled: Specifies whether to enable callback notifications.
               The options are as follows:
               + **on**: enable
               + **off**: no enable
        :param pulumi.Input[_builtins.str] call_back_url: Specifies the notification server address.
               It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
               The live service will push the status information of the snapshot to this address after the snapshot is completed.
               It is required when `call_back_enabled` is set to `on`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "storage_bucket", storage_bucket)
        pulumi.set(__self__, "storage_mode", storage_mode)
        pulumi.set(__self__, "storage_path", storage_path)
        if call_back_auth_key is not None:
            pulumi.set(__self__, "call_back_auth_key", call_back_auth_key)
        if call_back_enabled is not None:
            pulumi.set(__self__, "call_back_enabled", call_back_enabled)
        if call_back_url is not None:
            pulumi.set(__self__, "call_back_url", call_back_url)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ingest domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the bucket name of the OBS.
        """
        return pulumi.get(self, "storage_bucket")

    @storage_bucket.setter
    def storage_bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_bucket", value)

    @_builtins.property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the store mode in OBS bucket. The options are as follows:
        + **0**: real time snapshot. Name the snapshot file with a timestamp and
        save all screenshot files to the OBS bucket.
        For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
        + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
        will be covered by new snapshot.
        For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "storage_mode", value)

    @_builtins.property
    @pulumi.getter(name="storagePath")
    def storage_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of OBS object. Comply with OSS Object Definition.
        + When used to indicate input, it needs to be specified to a specific object.
        + When used to indicate output, only the path to the expected storage of the transcoding
        results needs to be specified.
        """
        return pulumi.get(self, "storage_path")

    @storage_path.setter
    def storage_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_path", value)

    @_builtins.property
    @pulumi.getter(name="callBackAuthKey")
    def call_back_auth_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the callback authentication key value.
        Consists of 32 to 128 characters.
        """
        return pulumi.get(self, "call_back_auth_key")

    @call_back_auth_key.setter
    def call_back_auth_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_auth_key", value)

    @_builtins.property
    @pulumi.getter(name="callBackEnabled")
    def call_back_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable callback notifications.
        The options are as follows:
        + **on**: enable
        + **off**: no enable
        """
        return pulumi.get(self, "call_back_enabled")

    @call_back_enabled.setter
    def call_back_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_enabled", value)

    @_builtins.property
    @pulumi.getter(name="callBackUrl")
    def call_back_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the notification server address.
        It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
        The live service will push the status information of the snapshot to this address after the snapshot is completed.
        It is required when `call_back_enabled` is set to `on`.
        """
        return pulumi.get(self, "call_back_url")

    @call_back_url.setter
    def call_back_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_url", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SnapshotState:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_url: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Snapshot resources.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] call_back_auth_key: Specifies the callback authentication key value.
               Consists of 32 to 128 characters.
        :param pulumi.Input[_builtins.str] call_back_enabled: Specifies whether to enable callback notifications.
               The options are as follows:
               + **on**: enable
               + **off**: no enable
        :param pulumi.Input[_builtins.str] call_back_url: Specifies the notification server address.
               It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
               The live service will push the status information of the snapshot to this address after the snapshot is completed.
               It is required when `call_back_enabled` is set to `on`.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_bucket: Specifies the bucket name of the OBS.
        :param pulumi.Input[_builtins.int] storage_mode: Specifies the store mode in OBS bucket. The options are as follows:
               + **0**: real time snapshot. Name the snapshot file with a timestamp and
               save all screenshot files to the OBS bucket.
               For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
               + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
               will be covered by new snapshot.
               For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        :param pulumi.Input[_builtins.str] storage_path: Specifies the path of OBS object. Comply with OSS Object Definition.
               + When used to indicate input, it needs to be specified to a specific object.
               + When used to indicate output, only the path to the expected storage of the transcoding
               results needs to be specified.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if call_back_auth_key is not None:
            pulumi.set(__self__, "call_back_auth_key", call_back_auth_key)
        if call_back_enabled is not None:
            pulumi.set(__self__, "call_back_enabled", call_back_enabled)
        if call_back_url is not None:
            pulumi.set(__self__, "call_back_url", call_back_url)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_bucket is not None:
            pulumi.set(__self__, "storage_bucket", storage_bucket)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_path is not None:
            pulumi.set(__self__, "storage_path", storage_path)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="callBackAuthKey")
    def call_back_auth_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the callback authentication key value.
        Consists of 32 to 128 characters.
        """
        return pulumi.get(self, "call_back_auth_key")

    @call_back_auth_key.setter
    def call_back_auth_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_auth_key", value)

    @_builtins.property
    @pulumi.getter(name="callBackEnabled")
    def call_back_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable callback notifications.
        The options are as follows:
        + **on**: enable
        + **off**: no enable
        """
        return pulumi.get(self, "call_back_enabled")

    @call_back_enabled.setter
    def call_back_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_enabled", value)

    @_builtins.property
    @pulumi.getter(name="callBackUrl")
    def call_back_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the notification server address.
        It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
        The live service will push the status information of the snapshot to this address after the snapshot is completed.
        It is required when `call_back_enabled` is set to `on`.
        """
        return pulumi.get(self, "call_back_url")

    @call_back_url.setter
    def call_back_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_url", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ingest domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bucket name of the OBS.
        """
        return pulumi.get(self, "storage_bucket")

    @storage_bucket.setter
    def storage_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_bucket", value)

    @_builtins.property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the store mode in OBS bucket. The options are as follows:
        + **0**: real time snapshot. Name the snapshot file with a timestamp and
        save all screenshot files to the OBS bucket.
        For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
        + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
        will be covered by new snapshot.
        For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "storage_mode", value)

    @_builtins.property
    @pulumi.getter(name="storagePath")
    def storage_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of OBS object. Comply with OSS Object Definition.
        + When used to indicate input, it needs to be specified to a specific object.
        + When used to indicate output, only the path to the expected storage of the transcoding
        results needs to be specified.
        """
        return pulumi.get(self, "storage_path")

    @storage_path.setter
    def storage_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_path", value)


@pulumi.type_token("huaweicloud:Live/snapshot:Snapshot")
class Snapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_url: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Live snapshot resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        storage_bucket = config.require_object("storageBucket")
        storage_path = config.require_object("storagePath")
        domain_name = config.require_object("domainName")
        test = huaweicloud.live.Snapshot("test",
            domain_name=domain_name,
            app_name="live",
            frequency=10,
            storage_mode=0,
            storage_bucket=storage_bucket,
            storage_path=storage_path)
        ```

        ## Import

        The live snapshot can be imported using the `domain_name` and `app_name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/snapshot:Snapshot test <domain_name>/<app_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] call_back_auth_key: Specifies the callback authentication key value.
               Consists of 32 to 128 characters.
        :param pulumi.Input[_builtins.str] call_back_enabled: Specifies whether to enable callback notifications.
               The options are as follows:
               + **on**: enable
               + **off**: no enable
        :param pulumi.Input[_builtins.str] call_back_url: Specifies the notification server address.
               It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
               The live service will push the status information of the snapshot to this address after the snapshot is completed.
               It is required when `call_back_enabled` is set to `on`.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_bucket: Specifies the bucket name of the OBS.
        :param pulumi.Input[_builtins.int] storage_mode: Specifies the store mode in OBS bucket. The options are as follows:
               + **0**: real time snapshot. Name the snapshot file with a timestamp and
               save all screenshot files to the OBS bucket.
               For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
               + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
               will be covered by new snapshot.
               For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        :param pulumi.Input[_builtins.str] storage_path: Specifies the path of OBS object. Comply with OSS Object Definition.
               + When used to indicate input, it needs to be specified to a specific object.
               + When used to indicate output, only the path to the expected storage of the transcoding
               results needs to be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Live snapshot resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        storage_bucket = config.require_object("storageBucket")
        storage_path = config.require_object("storagePath")
        domain_name = config.require_object("domainName")
        test = huaweicloud.live.Snapshot("test",
            domain_name=domain_name,
            app_name="live",
            frequency=10,
            storage_mode=0,
            storage_bucket=storage_bucket,
            storage_path=storage_path)
        ```

        ## Import

        The live snapshot can be imported using the `domain_name` and `app_name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/snapshot:Snapshot test <domain_name>/<app_name>
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_auth_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_url: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 storage_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotArgs.__new__(SnapshotArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["call_back_auth_key"] = call_back_auth_key
            __props__.__dict__["call_back_enabled"] = call_back_enabled
            __props__.__dict__["call_back_url"] = call_back_url
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if frequency is None and not opts.urn:
                raise TypeError("Missing required property 'frequency'")
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["region"] = region
            if storage_bucket is None and not opts.urn:
                raise TypeError("Missing required property 'storage_bucket'")
            __props__.__dict__["storage_bucket"] = storage_bucket
            if storage_mode is None and not opts.urn:
                raise TypeError("Missing required property 'storage_mode'")
            __props__.__dict__["storage_mode"] = storage_mode
            if storage_path is None and not opts.urn:
                raise TypeError("Missing required property 'storage_path'")
            __props__.__dict__["storage_path"] = storage_path
        super(Snapshot, __self__).__init__(
            'huaweicloud:Live/snapshot:Snapshot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_name: Optional[pulumi.Input[_builtins.str]] = None,
            call_back_auth_key: Optional[pulumi.Input[_builtins.str]] = None,
            call_back_enabled: Optional[pulumi.Input[_builtins.str]] = None,
            call_back_url: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            frequency: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            storage_bucket: Optional[pulumi.Input[_builtins.str]] = None,
            storage_mode: Optional[pulumi.Input[_builtins.int]] = None,
            storage_path: Optional[pulumi.Input[_builtins.str]] = None) -> 'Snapshot':
        """
        Get an existing Snapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] call_back_auth_key: Specifies the callback authentication key value.
               Consists of 32 to 128 characters.
        :param pulumi.Input[_builtins.str] call_back_enabled: Specifies whether to enable callback notifications.
               The options are as follows:
               + **on**: enable
               + **off**: no enable
        :param pulumi.Input[_builtins.str] call_back_url: Specifies the notification server address.
               It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
               The live service will push the status information of the snapshot to this address after the snapshot is completed.
               It is required when `call_back_enabled` is set to `on`.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_bucket: Specifies the bucket name of the OBS.
        :param pulumi.Input[_builtins.int] storage_mode: Specifies the store mode in OBS bucket. The options are as follows:
               + **0**: real time snapshot. Name the snapshot file with a timestamp and
               save all screenshot files to the OBS bucket.
               For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
               + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
               will be covered by new snapshot.
               For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        :param pulumi.Input[_builtins.str] storage_path: Specifies the path of OBS object. Comply with OSS Object Definition.
               + When used to indicate input, it needs to be specified to a specific object.
               + When used to indicate output, only the path to the expected storage of the transcoding
               results needs to be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotState.__new__(_SnapshotState)

        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["call_back_auth_key"] = call_back_auth_key
        __props__.__dict__["call_back_enabled"] = call_back_enabled
        __props__.__dict__["call_back_url"] = call_back_url
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["region"] = region
        __props__.__dict__["storage_bucket"] = storage_bucket
        __props__.__dict__["storage_mode"] = storage_mode
        __props__.__dict__["storage_path"] = storage_path
        return Snapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="callBackAuthKey")
    def call_back_auth_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the callback authentication key value.
        Consists of 32 to 128 characters.
        """
        return pulumi.get(self, "call_back_auth_key")

    @_builtins.property
    @pulumi.getter(name="callBackEnabled")
    def call_back_enabled(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to enable callback notifications.
        The options are as follows:
        + **on**: enable
        + **off**: no enable
        """
        return pulumi.get(self, "call_back_enabled")

    @_builtins.property
    @pulumi.getter(name="callBackUrl")
    def call_back_url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the notification server address.
        It must be a legal URL and carry the protocol. The protocol of `http` and `https` are supported.
        The live service will push the status information of the snapshot to this address after the snapshot is completed.
        It is required when `call_back_enabled` is set to `on`.
        """
        return pulumi.get(self, "call_back_url")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ingest domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the screenshot frequency. Value range: 5-3600. Unit: second.
        """
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the bucket name of the OBS.
        """
        return pulumi.get(self, "storage_bucket")

    @_builtins.property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the store mode in OBS bucket. The options are as follows:
        + **0**: real time snapshot. Name the snapshot file with a timestamp and
        save all screenshot files to the OBS bucket.
        For example, snapshot/{domain}/{app_name}/{stream_name}/{UnixTimestamp}.jpg
        + **1**: coverage snapshot. Only the latest snapshot will be saved, old snapshot
        will be covered by new snapshot.
        For example, snapshot/{domain}/{app_name}/{stream_name}.jpg
        """
        return pulumi.get(self, "storage_mode")

    @_builtins.property
    @pulumi.getter(name="storagePath")
    def storage_path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the path of OBS object. Comply with OSS Object Definition.
        + When used to indicate input, it needs to be specified to a specific object.
        + When used to indicate output, only the path to the expected storage of the transcoding
        results needs to be specified.
        """
        return pulumi.get(self, "storage_path")

