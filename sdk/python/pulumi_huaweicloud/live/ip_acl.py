# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['IpAclArgs', 'IpAcl']

@pulumi.input_type
class IpAclArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 ip_auth_list: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IpAcl resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication mode.
               The options are as follows:
               + **WHITE**: IP address whitelist authentication.
               + **BLACK**: IP address blacklist authentication.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest or streaming domain name.
        :param pulumi.Input[_builtins.str] ip_auth_list: Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
               IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
               IP network segments can be added, for example, **127.0.0.1/24**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "ip_auth_list", ip_auth_list)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the authentication mode.
        The options are as follows:
        + **WHITE**: IP address whitelist authentication.
        + **BLACK**: IP address blacklist authentication.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ingest or streaming domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="ipAuthList")
    def ip_auth_list(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
        IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
        IP network segments can be added, for example, **127.0.0.1/24**.
        """
        return pulumi.get(self, "ip_auth_list")

    @ip_auth_list.setter
    def ip_auth_list(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip_auth_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _IpAclState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_auth_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IpAcl resources.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication mode.
               The options are as follows:
               + **WHITE**: IP address whitelist authentication.
               + **BLACK**: IP address blacklist authentication.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest or streaming domain name.
        :param pulumi.Input[_builtins.str] ip_auth_list: Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
               IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
               IP network segments can be added, for example, **127.0.0.1/24**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if ip_auth_list is not None:
            pulumi.set(__self__, "ip_auth_list", ip_auth_list)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication mode.
        The options are as follows:
        + **WHITE**: IP address whitelist authentication.
        + **BLACK**: IP address blacklist authentication.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ingest or streaming domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="ipAuthList")
    def ip_auth_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
        IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
        IP network segments can be added, for example, **127.0.0.1/24**.
        """
        return pulumi.get(self, "ip_auth_list")

    @ip_auth_list.setter
    def ip_auth_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_auth_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Live/ipAcl:IpAcl")
class IpAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_auth_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Live IP address acl resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        auth_type = config.require_object("authType")
        ip_auth_list = config.require_object("ipAuthList")
        test = huaweicloud.live.IpAcl("test",
            domain_name=domain_name,
            auth_type=auth_type,
            ip_auth_list=ip_auth_list)
        ```

        ## Import

        The Live IP address acl resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/ipAcl:IpAcl test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication mode.
               The options are as follows:
               + **WHITE**: IP address whitelist authentication.
               + **BLACK**: IP address blacklist authentication.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest or streaming domain name.
        :param pulumi.Input[_builtins.str] ip_auth_list: Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
               IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
               IP network segments can be added, for example, **127.0.0.1/24**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpAclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Live IP address acl resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        auth_type = config.require_object("authType")
        ip_auth_list = config.require_object("ipAuthList")
        test = huaweicloud.live.IpAcl("test",
            domain_name=domain_name,
            auth_type=auth_type,
            ip_auth_list=ip_auth_list)
        ```

        ## Import

        The Live IP address acl resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/ipAcl:IpAcl test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param IpAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_auth_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpAclArgs.__new__(IpAclArgs)

            if auth_type is None and not opts.urn:
                raise TypeError("Missing required property 'auth_type'")
            __props__.__dict__["auth_type"] = auth_type
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if ip_auth_list is None and not opts.urn:
                raise TypeError("Missing required property 'ip_auth_list'")
            __props__.__dict__["ip_auth_list"] = ip_auth_list
            __props__.__dict__["region"] = region
        super(IpAcl, __self__).__init__(
            'huaweicloud:Live/ipAcl:IpAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            ip_auth_list: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'IpAcl':
        """
        Get an existing IpAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication mode.
               The options are as follows:
               + **WHITE**: IP address whitelist authentication.
               + **BLACK**: IP address blacklist authentication.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest or streaming domain name.
        :param pulumi.Input[_builtins.str] ip_auth_list: Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
               IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
               IP network segments can be added, for example, **127.0.0.1/24**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpAclState.__new__(_IpAclState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["ip_auth_list"] = ip_auth_list
        __props__.__dict__["region"] = region
        return IpAcl(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the authentication mode.
        The options are as follows:
        + **WHITE**: IP address whitelist authentication.
        + **BLACK**: IP address blacklist authentication.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ingest or streaming domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ipAuthList")
    def ip_auth_list(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the blacklist or whitelist IP addresses. Use semicolons (;) to separate
        IP addresses, for example, **192.168.0.0;192.168.0.8**. A maximum of `100` IP addresses are allowed.
        IP network segments can be added, for example, **127.0.0.1/24**.
        """
        return pulumi.get(self, "ip_auth_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

