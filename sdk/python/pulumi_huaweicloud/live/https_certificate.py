# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HttpsCertificateArgs', 'HttpsCertificate']

@pulumi.input_type
class HttpsCertificateArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_format: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 force_redirect: Optional[pulumi.Input[_builtins.bool]] = None,
                 gm_certificate: Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_certificate: Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']] = None):
        """
        The set of arguments for constructing a HttpsCertificate resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name
        :param pulumi.Input[_builtins.str] certificate: Specifies the certificate body.
        :param pulumi.Input[_builtins.str] certificate_format: Specifies the certificate format.
        :param pulumi.Input[_builtins.str] certificate_key: Specifies the private key
        :param pulumi.Input[_builtins.bool] force_redirect: Specifies whether to enable redirection.
        :param pulumi.Input['HttpsCertificateGmCertificateArgs'] gm_certificate: Specifies the GM certificate configuration.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input['HttpsCertificateTlsCertificateArgs'] tls_certificate: Specifies the TLS certificate configuration.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_format is not None:
            pulumi.set(__self__, "certificate_format", certificate_format)
        if certificate_key is not None:
            pulumi.set(__self__, "certificate_key", certificate_key)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if gm_certificate is not None:
            pulumi.set(__self__, "gm_certificate", gm_certificate)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the streaming domain name
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate body.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="certificateFormat")
    def certificate_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate format.
        """
        return pulumi.get(self, "certificate_format")

    @certificate_format.setter
    def certificate_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_format", value)

    @_builtins.property
    @pulumi.getter(name="certificateKey")
    def certificate_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key
        """
        return pulumi.get(self, "certificate_key")

    @certificate_key.setter
    def certificate_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_key", value)

    @_builtins.property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable redirection.
        """
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_redirect", value)

    @_builtins.property
    @pulumi.getter(name="gmCertificate")
    def gm_certificate(self) -> Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']]:
        """
        Specifies the GM certificate configuration.
        """
        return pulumi.get(self, "gm_certificate")

    @gm_certificate.setter
    def gm_certificate(self, value: Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']]):
        pulumi.set(self, "gm_certificate", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']]:
        """
        Specifies the TLS certificate configuration.
        """
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']]):
        pulumi.set(self, "tls_certificate", value)


@pulumi.input_type
class _HttpsCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_format: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_redirect: Optional[pulumi.Input[_builtins.bool]] = None,
                 gm_certificate: Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_certificate: Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']] = None):
        """
        Input properties used for looking up and filtering HttpsCertificate resources.
        :param pulumi.Input[_builtins.str] certificate: Specifies the certificate body.
        :param pulumi.Input[_builtins.str] certificate_format: Specifies the certificate format.
        :param pulumi.Input[_builtins.str] certificate_key: Specifies the private key
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name
        :param pulumi.Input[_builtins.bool] force_redirect: Specifies whether to enable redirection.
        :param pulumi.Input['HttpsCertificateGmCertificateArgs'] gm_certificate: Specifies the GM certificate configuration.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input['HttpsCertificateTlsCertificateArgs'] tls_certificate: Specifies the TLS certificate configuration.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_format is not None:
            pulumi.set(__self__, "certificate_format", certificate_format)
        if certificate_key is not None:
            pulumi.set(__self__, "certificate_key", certificate_key)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if gm_certificate is not None:
            pulumi.set(__self__, "gm_certificate", gm_certificate)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate body.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="certificateFormat")
    def certificate_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate format.
        """
        return pulumi.get(self, "certificate_format")

    @certificate_format.setter
    def certificate_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_format", value)

    @_builtins.property
    @pulumi.getter(name="certificateKey")
    def certificate_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key
        """
        return pulumi.get(self, "certificate_key")

    @certificate_key.setter
    def certificate_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_key", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the streaming domain name
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable redirection.
        """
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_redirect", value)

    @_builtins.property
    @pulumi.getter(name="gmCertificate")
    def gm_certificate(self) -> Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']]:
        """
        Specifies the GM certificate configuration.
        """
        return pulumi.get(self, "gm_certificate")

    @gm_certificate.setter
    def gm_certificate(self, value: Optional[pulumi.Input['HttpsCertificateGmCertificateArgs']]):
        pulumi.set(self, "gm_certificate", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']]:
        """
        Specifies the TLS certificate configuration.
        """
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input['HttpsCertificateTlsCertificateArgs']]):
        pulumi.set(self, "tls_certificate", value)


@pulumi.type_token("huaweicloud:Live/httpsCertificate:HttpsCertificate")
class HttpsCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_format: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_redirect: Optional[pulumi.Input[_builtins.bool]] = None,
                 gm_certificate: Optional[pulumi.Input[Union['HttpsCertificateGmCertificateArgs', 'HttpsCertificateGmCertificateArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_certificate: Optional[pulumi.Input[Union['HttpsCertificateTlsCertificateArgs', 'HttpsCertificateTlsCertificateArgsDict']]] = None,
                 __props__=None):
        """
        Create a HttpsCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: Specifies the certificate body.
        :param pulumi.Input[_builtins.str] certificate_format: Specifies the certificate format.
        :param pulumi.Input[_builtins.str] certificate_key: Specifies the private key
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name
        :param pulumi.Input[_builtins.bool] force_redirect: Specifies whether to enable redirection.
        :param pulumi.Input[Union['HttpsCertificateGmCertificateArgs', 'HttpsCertificateGmCertificateArgsDict']] gm_certificate: Specifies the GM certificate configuration.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input[Union['HttpsCertificateTlsCertificateArgs', 'HttpsCertificateTlsCertificateArgsDict']] tls_certificate: Specifies the TLS certificate configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HttpsCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HttpsCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HttpsCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HttpsCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_format: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_redirect: Optional[pulumi.Input[_builtins.bool]] = None,
                 gm_certificate: Optional[pulumi.Input[Union['HttpsCertificateGmCertificateArgs', 'HttpsCertificateGmCertificateArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_certificate: Optional[pulumi.Input[Union['HttpsCertificateTlsCertificateArgs', 'HttpsCertificateTlsCertificateArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HttpsCertificateArgs.__new__(HttpsCertificateArgs)

            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["certificate_format"] = certificate_format
            __props__.__dict__["certificate_key"] = None if certificate_key is None else pulumi.Output.secret(certificate_key)
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["force_redirect"] = force_redirect
            __props__.__dict__["gm_certificate"] = gm_certificate
            __props__.__dict__["region"] = region
            __props__.__dict__["tls_certificate"] = tls_certificate
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(HttpsCertificate, __self__).__init__(
            'huaweicloud:Live/httpsCertificate:HttpsCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_format: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_key: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            force_redirect: Optional[pulumi.Input[_builtins.bool]] = None,
            gm_certificate: Optional[pulumi.Input[Union['HttpsCertificateGmCertificateArgs', 'HttpsCertificateGmCertificateArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tls_certificate: Optional[pulumi.Input[Union['HttpsCertificateTlsCertificateArgs', 'HttpsCertificateTlsCertificateArgsDict']]] = None) -> 'HttpsCertificate':
        """
        Get an existing HttpsCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: Specifies the certificate body.
        :param pulumi.Input[_builtins.str] certificate_format: Specifies the certificate format.
        :param pulumi.Input[_builtins.str] certificate_key: Specifies the private key
        :param pulumi.Input[_builtins.str] domain_name: Specifies the streaming domain name
        :param pulumi.Input[_builtins.bool] force_redirect: Specifies whether to enable redirection.
        :param pulumi.Input[Union['HttpsCertificateGmCertificateArgs', 'HttpsCertificateGmCertificateArgsDict']] gm_certificate: Specifies the GM certificate configuration.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input[Union['HttpsCertificateTlsCertificateArgs', 'HttpsCertificateTlsCertificateArgsDict']] tls_certificate: Specifies the TLS certificate configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HttpsCertificateState.__new__(_HttpsCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["certificate_format"] = certificate_format
        __props__.__dict__["certificate_key"] = certificate_key
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["force_redirect"] = force_redirect
        __props__.__dict__["gm_certificate"] = gm_certificate
        __props__.__dict__["region"] = region
        __props__.__dict__["tls_certificate"] = tls_certificate
        return HttpsCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the certificate body.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateFormat")
    def certificate_format(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate format.
        """
        return pulumi.get(self, "certificate_format")

    @_builtins.property
    @pulumi.getter(name="certificateKey")
    def certificate_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the private key
        """
        return pulumi.get(self, "certificate_key")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the streaming domain name
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable redirection.
        """
        return pulumi.get(self, "force_redirect")

    @_builtins.property
    @pulumi.getter(name="gmCertificate")
    def gm_certificate(self) -> pulumi.Output['outputs.HttpsCertificateGmCertificate']:
        """
        Specifies the GM certificate configuration.
        """
        return pulumi.get(self, "gm_certificate")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> pulumi.Output['outputs.HttpsCertificateTlsCertificate']:
        """
        Specifies the TLS certificate configuration.
        """
        return pulumi.get(self, "tls_certificate")

