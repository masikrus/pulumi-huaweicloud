# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDisablePushStreamsResult',
    'AwaitableGetDisablePushStreamsResult',
    'get_disable_push_streams',
    'get_disable_push_streams_output',
]

@pulumi.output_type
class GetDisablePushStreamsResult:
    """
    A collection of values returned by getDisablePushStreams.
    """
    def __init__(__self__, app_name=None, blocks=None, domain_name=None, id=None, region=None, stream_name=None):
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if blocks and not isinstance(blocks, list):
            raise TypeError("Expected argument 'blocks' to be a list")
        pulumi.set(__self__, "blocks", blocks)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if stream_name and not isinstance(stream_name, str):
            raise TypeError("Expected argument 'stream_name' to be a str")
        pulumi.set(__self__, "stream_name", stream_name)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[_builtins.str]:
        """
        The application name of the disabling push stream.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter
    def blocks(self) -> Sequence['outputs.GetDisablePushStreamsBlockResult']:
        """
        The list of the disabled push streams.
        """
        return pulumi.get(self, "blocks")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[_builtins.str]:
        """
        The stream name of the disabling push stream.
        """
        return pulumi.get(self, "stream_name")


class AwaitableGetDisablePushStreamsResult(GetDisablePushStreamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDisablePushStreamsResult(
            app_name=self.app_name,
            blocks=self.blocks,
            domain_name=self.domain_name,
            id=self.id,
            region=self.region,
            stream_name=self.stream_name)


def get_disable_push_streams(app_name: Optional[_builtins.str] = None,
                             domain_name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             stream_name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDisablePushStreamsResult:
    """
    Use this datasource to get the list of disabled push streams.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Live.get_disable_push_streams(domain_name=domain_name)
    ```


    :param _builtins.str app_name: Specifies the application name of the disabling push stream.
    :param _builtins.str domain_name: Specifies the ingest domain name of the disabling push stream.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str stream_name: Specifies the stream name of the disabling push stream.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['domainName'] = domain_name
    __args__['region'] = region
    __args__['streamName'] = stream_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Live/getDisablePushStreams:getDisablePushStreams', __args__, opts=opts, typ=GetDisablePushStreamsResult).value

    return AwaitableGetDisablePushStreamsResult(
        app_name=pulumi.get(__ret__, 'app_name'),
        blocks=pulumi.get(__ret__, 'blocks'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        stream_name=pulumi.get(__ret__, 'stream_name'))
def get_disable_push_streams_output(app_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    stream_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDisablePushStreamsResult]:
    """
    Use this datasource to get the list of disabled push streams.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Live.get_disable_push_streams(domain_name=domain_name)
    ```


    :param _builtins.str app_name: Specifies the application name of the disabling push stream.
    :param _builtins.str domain_name: Specifies the ingest domain name of the disabling push stream.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str stream_name: Specifies the stream name of the disabling push stream.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['domainName'] = domain_name
    __args__['region'] = region
    __args__['streamName'] = stream_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Live/getDisablePushStreams:getDisablePushStreams', __args__, opts=opts, typ=GetDisablePushStreamsResult)
    return __ret__.apply(lambda __response__: GetDisablePushStreamsResult(
        app_name=pulumi.get(__response__, 'app_name'),
        blocks=pulumi.get(__response__, 'blocks'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        stream_name=pulumi.get(__response__, 'stream_name')))
