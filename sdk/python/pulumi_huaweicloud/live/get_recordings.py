# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordingsResult',
    'AwaitableGetRecordingsResult',
    'get_recordings',
    'get_recordings_output',
]

@pulumi.output_type
class GetRecordingsResult:
    """
    A collection of values returned by getRecordings.
    """
    def __init__(__self__, app_name=None, domain_name=None, id=None, region=None, rules=None, stream_name=None, type=None):
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if stream_name and not isinstance(stream_name, str):
            raise TypeError("Expected argument 'stream_name' to be a str")
        pulumi.set(__self__, "stream_name", stream_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[_builtins.str]:
        """
        The application name of the recording rule.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        The ingest domain name to which the recording rule belongs.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region to which the OBS bucket belongs.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetRecordingsRuleResult']:
        """
        The list of the recording rules.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[_builtins.str]:
        """
        The stream name of the recording rule.
        """
        return pulumi.get(self, "stream_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The recording type of the recording rule.
        """
        return pulumi.get(self, "type")


class AwaitableGetRecordingsResult(GetRecordingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordingsResult(
            app_name=self.app_name,
            domain_name=self.domain_name,
            id=self.id,
            region=self.region,
            rules=self.rules,
            stream_name=self.stream_name,
            type=self.type)


def get_recordings(app_name: Optional[_builtins.str] = None,
                   domain_name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   stream_name: Optional[_builtins.str] = None,
                   type: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordingsResult:
    """
    Use this datasource to get the list of recording rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Live.get_recordings()
    ```


    :param _builtins.str app_name: Specifies the application name of the recording rule.
    :param _builtins.str domain_name: Specifies the ingest domain name to which the recording rules belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str stream_name: Specifies the stream name of the recording rule.
    :param _builtins.str type: Specifies the recording type of the recording rule.
           The valid values are as follows:
           + **CONTINUOUS_RECORD**: Indicates continuous recording.
           + **COMMAND_RECORD**: Indicates command recording.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['domainName'] = domain_name
    __args__['region'] = region
    __args__['streamName'] = stream_name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Live/getRecordings:getRecordings', __args__, opts=opts, typ=GetRecordingsResult).value

    return AwaitableGetRecordingsResult(
        app_name=pulumi.get(__ret__, 'app_name'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        rules=pulumi.get(__ret__, 'rules'),
        stream_name=pulumi.get(__ret__, 'stream_name'),
        type=pulumi.get(__ret__, 'type'))
def get_recordings_output(app_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          domain_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          stream_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRecordingsResult]:
    """
    Use this datasource to get the list of recording rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Live.get_recordings()
    ```


    :param _builtins.str app_name: Specifies the application name of the recording rule.
    :param _builtins.str domain_name: Specifies the ingest domain name to which the recording rules belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str stream_name: Specifies the stream name of the recording rule.
    :param _builtins.str type: Specifies the recording type of the recording rule.
           The valid values are as follows:
           + **CONTINUOUS_RECORD**: Indicates continuous recording.
           + **COMMAND_RECORD**: Indicates command recording.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['domainName'] = domain_name
    __args__['region'] = region
    __args__['streamName'] = stream_name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Live/getRecordings:getRecordings', __args__, opts=opts, typ=GetRecordingsResult)
    return __ret__.apply(lambda __response__: GetRecordingsResult(
        app_name=pulumi.get(__response__, 'app_name'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        rules=pulumi.get(__response__, 'rules'),
        stream_name=pulumi.get(__response__, 'stream_name'),
        type=pulumi.get(__response__, 'type')))
