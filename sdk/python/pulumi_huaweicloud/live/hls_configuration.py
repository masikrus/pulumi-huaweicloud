# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HlsConfigurationArgs', 'HlsConfiguration']

@pulumi.input_type
class HlsConfigurationArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]],
                 domain_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HlsConfiguration resource.
        :param pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]] applications: Specifies app configuration of the ingest domain.
               
               The application structure is documented below.
               
               <a name="hls_application"></a>
               The `application` block supports:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]]:
        """
        Specifies app configuration of the ingest domain.

        The application structure is documented below.

        <a name="hls_application"></a>
        The `application` block supports:
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ingest domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _HlsConfigurationState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering HlsConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]] applications: Specifies app configuration of the ingest domain.
               
               The application structure is documented below.
               
               <a name="hls_application"></a>
               The `application` block supports:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]]]:
        """
        Specifies app configuration of the ingest domain.

        The application structure is documented below.

        <a name="hls_application"></a>
        The `application` block supports:
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HlsConfigurationApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ingest domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Live/hlsConfiguration:HlsConfiguration")
class HlsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HlsConfigurationApplicationArgs', 'HlsConfigurationApplicationArgsDict']]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Live HLS configuration resource within HuaweiCloud.

        > This resource is an operational resource, and destroying it will not change the current HLS configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        app_name = config.require_object("appName")
        test = huaweicloud.live.HlsConfiguration("test",
            domain_name=domain_name,
            applications=[{
                "name": app_name,
                "hls_fragment": 5,
                "hls_ts_count": 5,
                "hls_min_frags": 5,
            }])
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/hlsConfiguration:HlsConfiguration test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HlsConfigurationApplicationArgs', 'HlsConfigurationApplicationArgsDict']]]] applications: Specifies app configuration of the ingest domain.
               
               The application structure is documented below.
               
               <a name="hls_application"></a>
               The `application` block supports:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HlsConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Live HLS configuration resource within HuaweiCloud.

        > This resource is an operational resource, and destroying it will not change the current HLS configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        app_name = config.require_object("appName")
        test = huaweicloud.live.HlsConfiguration("test",
            domain_name=domain_name,
            applications=[{
                "name": app_name,
                "hls_fragment": 5,
                "hls_ts_count": 5,
                "hls_min_frags": 5,
            }])
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/hlsConfiguration:HlsConfiguration test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param HlsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HlsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HlsConfigurationApplicationArgs', 'HlsConfigurationApplicationArgsDict']]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HlsConfigurationArgs.__new__(HlsConfigurationArgs)

            if applications is None and not opts.urn:
                raise TypeError("Missing required property 'applications'")
            __props__.__dict__["applications"] = applications
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["region"] = region
        super(HlsConfiguration, __self__).__init__(
            'huaweicloud:Live/hlsConfiguration:HlsConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HlsConfigurationApplicationArgs', 'HlsConfigurationApplicationArgsDict']]]]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'HlsConfiguration':
        """
        Get an existing HlsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HlsConfigurationApplicationArgs', 'HlsConfigurationApplicationArgsDict']]]] applications: Specifies app configuration of the ingest domain.
               
               The application structure is documented below.
               
               <a name="hls_application"></a>
               The `application` block supports:
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HlsConfigurationState.__new__(_HlsConfigurationState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["region"] = region
        return HlsConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Sequence['outputs.HlsConfigurationApplication']]:
        """
        Specifies app configuration of the ingest domain.

        The application structure is documented below.

        <a name="hls_application"></a>
        The `application` block supports:
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ingest domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

